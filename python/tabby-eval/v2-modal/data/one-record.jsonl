{"language": "csharp", "segments": {"prefix": "using LassoProcessManager.Models.Rules;\nusing Newtonsoft.Json;\nusing ProcessManager.Models.Configs;\nusing System.Reflection;\n\nnamespace ProcessManager.Providers\n{\n    public class ConfigProvider : IConfigProvider\n    {\n        private const string ConfigFileName = \"Config.json\";\n        private ManagerConfig managerConfig;\n\n        private ILogProvider LogProvider { get; set; }\n\n        public ConfigProvider(ILogProvider logProvider)\n            => this.LogProvider = logProvider;\n\n        public ManagerConfig GetManagerConfig()\n        {\n            if (managerConfig != null)\n                return managerConfig;\n\n            string configPath = GetConfigFilePath();\n            try\n            {\n                managerConfig = JsonConvert.DeserializeObject<ManagerConfig>(File.ReadAllText(GetConfigFilePath()));\n                return managerConfig;\n            }\n            catch\n            {\n                LogProvider.Log($\"Failed to load config at '{configPath}'.\");\n            }\n\n            return null;\n        }\n\n        public List<BaseRule> GetRules()\n        {\n            List<BaseRule> rules = new List<BaseRule>();\n            rules.AddRange(managerConfig.ProcessRules);\n            rules.AddRange(managerConfig.FolderRules);\n\n            return rules;\n        }\n\n        public Dictionary<string, ", "suffix": "\n            Dictionary<string, LassoProfile> lassoProfiles = new Dictionary<string, LassoProfile>();\n\n            // Load lasso profiles\n            foreach (var profile in managerConfig.Profiles)\n            {\n                if (!lassoProfiles.ContainsKey(profile.Name))\n                {\n                    lassoProfiles.Add(profile.Name, profile);\n                }\n            }\n\n            return lassoProfiles;\n        }\n\n        private string GetConfigFilePath()\n            => Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), ConfigFileName);\n    }\n}\n", "crossfile_context": {"text": "// Here are some relevant code fragments from other files of the repo:\n\n// the below code fragment can be found in:\n// ProcessManager/Providers/IConfigProvider.cs\n//         ManagerConfig GetManagerConfig();\n//         /// <summary>\n//         /// Geth the list of lasso rules.\n//         /// </summary>\n//         /// <returns></returns>\n//         List<BaseRule> GetRules();\n//         Dictionary<string, LassoProfile> GetLassoProfiles();\n//     }\n// }\n\n// the below code fragment can be found in:\n// ProcessManager/Models/Configs/ManagerConfig.cs\n//         public ProcessRule[] ProcessRules { get; set; }\n//         /// <summary>\n//         /// List of folders rules.\n//         /// </summary>\n//         public FolderRule[] FolderRules { get; set; }\n//     }\n// }\n\n// the below code fragment can be found in:\n// ProcessManager/Managers/LassoManager.cs\n//         public void Dispose()\n//         {\n//             if (processStartEvent != null) \n//             {\n//                 processStartEvent.EventArrived -= ProcessStartEvent_EventArrived;\n//                 processStartEvent.Dispose();\n//                 processStartEvent = null;\n//             }\n//         }\n//         public bool Setup()\n\n// the below code fragment can be found in:\n// ProcessManager/Managers/LassoManager.cs\n//         {\n//             int failCount = 0;\n//             Dictionary<string, int> successCount = new Dictionary<string, int>();\n//             foreach (var process in Process.GetProcesses())\n//             {\n//                 LassoProfile lassoProfile = GetLassoProfileForProcess(process);\n//                 bool success = TrySetProcessProfile(process, lassoProfile, out string profileName);\n//                 if (success)\n//                 {\n//                     if (!successCount.ContainsKey(profileName))\n\n", "list": [{"retrieved_chunk": "        ManagerConfig GetManagerConfig();\n        /// <summary>\n        /// Geth the list of lasso rules.\n        /// </summary>\n        /// <returns></returns>\n        List<BaseRule> GetRules();\n        Dictionary<string, LassoProfile> GetLassoProfiles();\n    }\n}", "filename": "ProcessManager/Providers/IConfigProvider.cs", "score": 22.799994275269317}, {"retrieved_chunk": "        public ProcessRule[] ProcessRules { get; set; }\n        /// <summary>\n        /// List of folders rules.\n        /// </summary>\n        public FolderRule[] FolderRules { get; set; }\n    }\n}", "filename": "ProcessManager/Models/Configs/ManagerConfig.cs", "score": 20.728193497923062}, {"retrieved_chunk": "        public void Dispose()\n        {\n            if (processStartEvent != null) \n            {\n                processStartEvent.EventArrived -= ProcessStartEvent_EventArrived;\n                processStartEvent.Dispose();\n                processStartEvent = null;\n            }\n        }\n        public bool Setup()", "filename": "ProcessManager/Managers/LassoManager.cs", "score": 14.506247294243275}, {"retrieved_chunk": "        {\n            int failCount = 0;\n            Dictionary<string, int> successCount = new Dictionary<string, int>();\n            foreach (var process in Process.GetProcesses())\n            {\n                LassoProfile lassoProfile = GetLassoProfileForProcess(process);\n                bool success = TrySetProcessProfile(process, lassoProfile, out string profileName);\n                if (success)\n                {\n                    if (!successCount.ContainsKey(profileName))", "filename": "ProcessManager/Managers/LassoManager.cs", "score": 11.789149115850975}]}}, "groundtruth": "LassoProfile> GetLassoProfiles()\n        {", "metadata": {"task_id": "project_cc_csharp/27", "repository": "kenshinakh1-LassoProcessManager-bcc481f", "file": "ProcessManager/Providers/ConfigProvider.cs", "context_start_lineno": 0, "groundtruth_start_lineno": 45, "right_context_start_lineno": 47}}

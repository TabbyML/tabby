---
source: crates/tabby/tests/goldentests_chat.rs
expression: "golden_test(json!({\n                \"seed\": 0, \"messages\":\n                [{\n                    \"role\": \"user\", \"content\":\n                    \"How to parse email address with regex\"\n                }]\n            })).await"
---
" To parse an email address with regex, you can use the following pattern:\n```\n^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\n```\nThis pattern matches email addresses in the following format:\n\n* `^`: start of the string\n* `[a-zA-Z0-9._%+-]+`: matches one or more characters that are either letters, numbers, periods, underscores, percent signs, plus signs, or hyphens\n* `@`: matches the `@` symbol\n* `[a-zA-Z0-9.-]+`: matches one or more characters that are either letters, numbers, periods, or hyphens\n* `\\.`: matches the `.` symbol\n* `[a-zA-Z]{2,}`: matches two or more characters that are letters\n* `$`: end of the string\n\nYou can use this pattern in a programming language that supports regex, such as Python, JavaScript, or Java, to extract the username and domain name from an email address. For example, in Python, you can use the `re` module to match the email address against the pattern and extract the username and domain name like this:\n```\nimport re\n\nemail = \"john.doe@example.com\"\nmatch = re.match(r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\", email)\n\nif match:\n    username = match.group(1)\n    domain = match.group(2)\n    print(f\"Username: {username}\")\n    print(f\"Domain: {domain}\")\nelse:\n    print(\"Invalid email address\")\n```\nThis will output:\n```\nUsername: john.doe\nDomain: example.com\n```"


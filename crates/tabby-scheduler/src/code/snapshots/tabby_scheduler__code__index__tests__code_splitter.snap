---
source: crates/tabby-scheduler/src/code/index.rs
expression: "format!(\"{:#?}\", rust_chunks)"
---
[
    "use dashmap::DashMap;\nuse tabby_common::languages::Language;\nuse trie_rs::{Trie, TrieBuilder};\n\npub struct StopConditionFactory {\n    stop_trie_cache: DashMap<String, Trie<u8>>,\n}",
    "fn reverse<T>(s: T) -> String\nwhere\n    T: Into<String>,\n{\n    s.into().chars().rev().collect()\n}\n\nimpl Default for StopConditionFactory {\n    fn default() -> Self {\n        Self {\n            stop_trie_cache: DashMap::new(),\n        }\n    }\n}",
    "type CachedTrie<'a> = dashmap::mapref::one::Ref<'a, String, Trie<u8>>;",
    "impl StopConditionFactory",
    "{",
    "pub fn create(&self, text: &str, language: Option<&'static Language>) -> StopCondition",
    "{\n        if let Some(language) = language {\n            StopCondition::new(self.get_trie(language), text)\n        } else {\n            StopCondition::new(None, text)\n        }\n    }",
    "fn get_trie<'a>(&'a self, language: &'static Language) -> Option<CachedTrie<'a>>",
    "{\n        let stop_words = language.get_stop_words();",
    "if stop_words.is_empty() {\n            None\n        }",
    "else",
    "{\n            let hashkey = language.language().to_owned();\n            let mut trie = self.stop_trie_cache.get(&hashkey);",
    "if trie.is_none() {\n                self.stop_trie_cache\n                    .insert(hashkey.clone(), create_stop_trie(stop_words));\n                trie = self.stop_trie_cache.get(&hashkey);\n            }\n\n            trie\n        }\n    }\n}",
    "fn create_stop_trie(stop_words: Vec<String>) -> Trie<u8> {\n    let mut builder = TrieBuilder::new();\n    for word in stop_words {\n        builder.push(reverse(word))\n    }\n    builder.build()\n}",
    "pub struct StopCondition<'a> {\n    stop_trie: Option<CachedTrie<'a>>,\n    reversed_text: String,\n    num_decoded: usize,\n}",
    "impl<'a> StopCondition<'a>",
    "{\n    pub fn new(stop_trie: Option<CachedTrie<'a>>, text: &str) -> Self {\n        Self {\n            stop_trie,\n            reversed_text: reverse(text),\n            num_decoded: 0,\n        }\n    }",
    "pub fn should_stop(&mut self, new_text: &str) -> (bool, usize)",
    "{\n        self.num_decoded += 1;",
    "if !new_text.is_empty()",
    "{\n            self.reversed_text = reverse(new_text) + &self.reversed_text;",
    "if let Some(re) = &self.stop_trie",
    "{\n                let matches = re.common_prefix_search(&self.reversed_text);\n                let matched_length = matches.into_iter().map(|x| x.len()).max();",
    "if let Some(matched_length) = matched_length {\n                    return (true, matched_length);\n                }\n            }\n        }\n        (false, 0)\n    }\n}\n\n#[cfg(test)]",
    "mod tests",
    "{\n    use tabby_common::languages::UNKNOWN_LANGUAGE;\n\n    use super::*;\n\n    #[test]",
    "fn test_trie_works()",
    "{\n        let text = reverse(\"void write_u32(std::uint32_t val) const {\\n        write_raw(&val, sizeof(val));\\n    }\\n\\n    ~llama_file() {\\n        if (fp) {\\n            std::fclose(fp);\\n        }\\n    }\\n};\\n\\nvoid\");",
    "let trie = create_stop_trie(vec![\"\\n\\n\".to_owned(), \"\\n\\n  \".to_owned()]);\n        assert!(trie.common_prefix_search(&text).is_empty());",
    "let trie = create_stop_trie(vec![\n            \"\\n\\n\".to_owned(),\n            \"\\n\\n  \".to_owned(),\n            \"\\nvoid\".to_owned(),\n        ]);\n        assert!(!trie.common_prefix_search(&text).is_empty());\n    }\n\n    #[test]",
    "fn test_stop_condition_max_length()",
    "{\n        let factory = StopConditionFactory::default();\n        let mut cond = factory.create(\"\", Some(&UNKNOWN_LANGUAGE));\n        let (should_stop, _) = cond.should_stop(\"1\");\n        assert!(!should_stop);",
    "let (should_stop, _) = cond.should_stop(\"2\");\n        assert!(!should_stop);\n        let (should_stop, _) = cond.should_stop(\"3\");\n        assert!(!should_stop);\n        let (should_stop, _) = cond.should_stop(\"4\");\n        assert!(!should_stop)\n    }\n}",
]

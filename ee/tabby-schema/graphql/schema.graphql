type Repository {
  id: ID!
  name: String!
  kind: RepositoryKind!
}

input UpdateRepositoryProviderInput {
  id: ID!
  displayName: String!
  accessToken: String!
}

type GitlabRepositoryProvider {
  id: ID!
  displayName: String!
  status: RepositoryProviderStatus!
}

enum Language {
  RUST
  PYTHON
  JAVA
  KOTLIN
  JAVASCRIPT
  TYPESCRIPT
  GO
  RUBY
  CSHARP
  C
  CPP
  SOLIDITY
  OTHER
}

type GithubRepositoryProviderEdge {
  node: GithubRepositoryProvider!
  cursor: String!
}

type GitRepository {
  id: ID!
  name: String!
  gitUrl: String!
}

type JobRun {
  id: ID!
  job: String!
  createdAt: DateTimeUtc!
  updatedAt: DateTimeUtc!
  finishedAt: DateTimeUtc
  exitCode: Int
  stdout: String!
  stderr: String!
}

type GitlabProvidedRepositoryEdge {
  node: GitlabProvidedRepository!
  cursor: String!
}

enum AuthMethod {
  NONE
  PLAIN
  LOGIN
}

type GithubProvidedRepositoryConnection {
  edges: [GithubProvidedRepositoryEdge!]!
  pageInfo: PageInfo!
}

type RegisterResponse {
  accessToken: String!
  refreshToken: String!
}

enum LicenseStatus {
  OK
  EXPIRED
  SEATS_EXCEEDED
}

input RequestPasswordResetEmailInput {
  email: String!
}

type LicenseInfo {
  type: LicenseType!
  status: LicenseStatus!
  seats: Int!
  seatsUsed: Int!
  issuedAt: DateTimeUtc
  expiresAt: DateTimeUtc
}

type GitlabRepositoryProviderEdge {
  node: GitlabRepositoryProvider!
  cursor: String!
}

type GithubRepositoryProviderConnection {
  edges: [GithubRepositoryProviderEdge!]!
  pageInfo: PageInfo!
}

input SecuritySettingInput {
  allowedRegisterDomainList: [String!]!
  disableClientSideTelemetry: Boolean!
}

type SecuritySetting {
  allowedRegisterDomainList: [String!]!
  disableClientSideTelemetry: Boolean!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

enum RepositoryProviderStatus {
  READY
  PENDING
  ERROR
}

type DiskUsageStats {
  events: DiskUsage!
  indexedRepositories: DiskUsage!
  database: DiskUsage!
  models: DiskUsage!
}

input UpdateOAuthCredentialInput {
  provider: OAuthProvider!
  clientId: String!
  clientSecret: String
}

type ServerInfo {
  isAdminInitialized: Boolean!
  isChatEnabled: Boolean!
  isEmailConfigured: Boolean!
  allowSelfSignup: Boolean!
  isDemoMode: Boolean!
}

type GithubRepositoryProvider {
  id: ID!
  displayName: String!
  status: RepositoryProviderStatus!
}

input PasswordChangeInput {
  oldPassword: String
  newPassword1: String!
  newPassword2: String!
}

type Invitation {
  id: ID!
  email: String!
  code: String!
  createdAt: DateTimeUtc!
}

type GitlabProvidedRepositoryConnection {
  edges: [GitlabProvidedRepositoryEdge!]!
  pageInfo: PageInfo!
}

type EmailSetting {
  smtpUsername: String!
  smtpServer: String!
  smtpPort: Int!
  fromAddress: String!
  encryption: Encryption!
  authMethod: AuthMethod!
}

type JobStats {
  success: Int!
  failed: Int!
  pending: Int!
}

type TokenAuthResponse {
  accessToken: String!
  refreshToken: String!
}

type NetworkSetting {
  externalUrl: String!
}

type JobRunEdge {
  node: JobRun!
  cursor: String!
}

type UserEvent {
  id: ID!
  userId: ID!
  kind: EventKind!
  createdAt: DateTimeUtc!
  payload: String!
}

enum WorkerKind {
  COMPLETION
  CHAT
}

type Mutation {
  resetRegistrationToken: String!
  requestInvitationEmail(input: RequestInvitationInput!): Invitation!
  requestPasswordResetEmail(input: RequestPasswordResetEmailInput!): Boolean!
  passwordReset(input: PasswordResetInput!): Boolean!
  passwordChange(input: PasswordChangeInput!): Boolean!
  resetUserAuthToken: Boolean!
  logoutAllSessions: Boolean!
  updateUserActive(id: ID!, active: Boolean!): Boolean!
  updateUserRole(id: ID!, isAdmin: Boolean!): Boolean!
  uploadUserAvatarBase64(id: ID!, avatarBase64: String): Boolean!
  register(email: String!, password1: String!, password2: String!, invitationCode: String): RegisterResponse!
  tokenAuth(email: String!, password: String!): TokenAuthResponse!
  verifyToken(token: String!): Boolean!
  refreshToken(refreshToken: String!): RefreshTokenResponse!
  createInvitation(email: String!): ID!
  sendTestEmail(to: String!): Boolean!
  createGitRepository(name: String!, gitUrl: String!): ID!
  deleteGitRepository(id: ID!): Boolean!
  updateGitRepository(id: ID!, name: String!, gitUrl: String!): Boolean!
  deleteInvitation(id: ID!): ID!
  updateOauthCredential(input: UpdateOAuthCredentialInput!): Boolean!
  deleteOauthCredential(provider: OAuthProvider!): Boolean!
  updateEmailSetting(input: EmailSettingInput!): Boolean!
  updateSecuritySetting(input: SecuritySettingInput!): Boolean!
  updateNetworkSetting(input: NetworkSettingInput!): Boolean!
  deleteEmailSetting: Boolean!
  uploadLicense(license: String!): Boolean!
  resetLicense: Boolean!
  createGithubRepositoryProvider(input: CreateRepositoryProviderInput!): ID!
  deleteGithubRepositoryProvider(id: ID!): Boolean!
  updateGithubRepositoryProvider(input: UpdateRepositoryProviderInput!): Boolean!
  updateGithubProvidedRepositoryActive(id: ID!, active: Boolean!): Boolean!
  createGitlabRepositoryProvider(input: CreateRepositoryProviderInput!): ID!
  deleteGitlabRepositoryProvider(id: ID!): Boolean!
  updateGitlabRepositoryProvider(input: UpdateRepositoryProviderInput!): Boolean!
  updateGitlabProvidedRepositoryActive(id: ID!, active: Boolean!): Boolean!
}

type UserEventEdge {
  node: UserEvent!
  cursor: String!
}

type RepositoryEdge {
  node: GitRepository!
  cursor: String!
}

"DateTime"
scalar DateTimeUtc

type FileEntrySearchResult {
  type: String!
  path: String!
  "matched indices for fuzzy search query."
  indices: [Int!]!
}

type GithubProvidedRepository {
  id: ID!
  vendorId: String!
  githubRepositoryProviderId: ID!
  name: String!
  gitUrl: String!
  active: Boolean!
}

type Query {
  workers: [Worker!]!
  registrationToken: String!
  me: User!
  users(after: String, before: String, first: Int, last: Int): UserConnection!
  invitations(after: String, before: String, first: Int, last: Int): InvitationConnection!
  githubRepositoryProviders(ids: [ID!], after: String, before: String, first: Int, last: Int): GithubRepositoryProviderConnection!
  githubRepositories(providerIds: [ID!]!, active: Boolean, after: String, before: String, first: Int, last: Int): GithubProvidedRepositoryConnection!
  gitlabRepositoryProviders(ids: [ID!], after: String, before: String, first: Int, last: Int): GitlabRepositoryProviderConnection!
  gitlabRepositories(providerIds: [ID!]!, active: Boolean, after: String, before: String, first: Int, last: Int): GitlabProvidedRepositoryConnection!
  jobRuns(ids: [ID!], jobs: [String!], after: String, before: String, first: Int, last: Int): JobRunConnection!
  jobRunStats(jobs: [String!]): JobStats!
  emailSetting: EmailSetting
  networkSetting: NetworkSetting!
  securitySetting: SecuritySetting!
  gitRepositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositorySearch(kind: RepositoryKind!, id: ID!, pattern: String!): [FileEntrySearchResult!]!
  oauthCredential(provider: OAuthProvider!): OAuthCredential
  oauthCallbackUrl(provider: OAuthProvider!): String!
  serverInfo: ServerInfo!
  license: LicenseInfo!
  jobs: [String!]!
  dailyStatsInPastYear(users: [ID!]): [CompletionStats!]!
  dailyStats(start: DateTimeUtc!, end: DateTimeUtc!, users: [ID!], languages: [Language!]): [CompletionStats!]!
  userEvents(after: String, before: String, first: Int, last: Int, users: [ID!], start: DateTimeUtc!, end: DateTimeUtc!): UserEventConnection!
  diskUsageStats: DiskUsageStats!
  repositoryList: [Repository!]!
}

input NetworkSettingInput {
  externalUrl: String!
}

enum Encryption {
  START_TLS
  SSL_TLS
  NONE
}

type UserEdge {
  node: User!
  cursor: String!
}

type DiskUsage {
  filepath: [String!]!
  "Size in kilobytes."
  sizeKb: Float!
}

type JobRunConnection {
  edges: [JobRunEdge!]!
  pageInfo: PageInfo!
}

type RefreshTokenResponse {
  accessToken: String!
  refreshToken: String!
  refreshExpiresAt: DateTimeUtc!
}

type GitlabRepositoryProviderConnection {
  edges: [GitlabRepositoryProviderEdge!]!
  pageInfo: PageInfo!
}

type RepositoryConnection {
  edges: [RepositoryEdge!]!
  pageInfo: PageInfo!
}

enum RepositoryKind {
  GIT
  GITHUB
  GITLAB
}

input EmailSettingInput {
  smtpUsername: String!
  fromAddress: String!
  smtpServer: String!
  smtpPort: Int!
  encryption: Encryption!
  authMethod: AuthMethod!
  smtpPassword: String
}

enum LicenseType {
  COMMUNITY
  TEAM
  ENTERPRISE
}

type GitlabProvidedRepository {
  id: ID!
  vendorId: String!
  gitlabRepositoryProviderId: ID!
  name: String!
  gitUrl: String!
  active: Boolean!
}

type OAuthCredential {
  provider: OAuthProvider!
  clientId: String!
  createdAt: DateTimeUtc!
  updatedAt: DateTimeUtc!
}

type CompletionStats {
  start: DateTimeUtc!
  end: DateTimeUtc!
  language: Language!
  completions: Int!
  views: Int!
  selects: Int!
}

type UserEventConnection {
  edges: [UserEventEdge!]!
  pageInfo: PageInfo!
}

input PasswordResetInput {
  code: String!
  password1: String!
  password2: String!
}

input CreateRepositoryProviderInput {
  displayName: String!
  accessToken: String!
}

type User {
  id: ID!
  email: String!
  isAdmin: Boolean!
  isOwner: Boolean!
  authToken: String!
  createdAt: DateTimeUtc!
  active: Boolean!
  isPasswordSet: Boolean!
}

type Worker {
  kind: WorkerKind!
  name: String!
  addr: String!
  device: String!
  arch: String!
  cpuInfo: String!
  cpuCount: Int!
  cudaDevices: [String!]!
}

type InvitationEdge {
  node: Invitation!
  cursor: String!
}

enum OAuthProvider {
  GITHUB
  GOOGLE
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

input RequestInvitationInput {
  email: String!
}

type GithubProvidedRepositoryEdge {
  node: GithubProvidedRepository!
  cursor: String!
}

enum EventKind {
  COMPLETION
  SELECT
  VIEW
  DISMISS
}

type InvitationConnection {
  edges: [InvitationEdge!]!
  pageInfo: PageInfo!
}

schema {
  query: Query
  mutation: Mutation
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

enum AuthMethod {
  NONE
  PLAIN
  LOGIN
}

enum Encryption {
  START_TLS
  SSL_TLS
  NONE
}

enum EventKind {
  COMPLETION
  SELECT
  VIEW
  DISMISS
}

enum IntegrationKind {
  GITHUB
  GITLAB
  GITHUB_SELF_HOSTED
  GITLAB_SELF_HOSTED
}

enum IntegrationStatus {
  READY
  PENDING
  FAILED
}

enum Language {
  RUST
  PYTHON
  JAVA
  KOTLIN
  JAVASCRIPT
  TYPESCRIPT
  GO
  RUBY
  CSHARP
  C
  CPP
  SOLIDITY
  OTHER
}

enum LicenseStatus {
  OK
  EXPIRED
  SEATS_EXCEEDED
}

enum LicenseType {
  COMMUNITY
  TEAM
  ENTERPRISE
}

enum OAuthProvider {
  GITHUB
  GOOGLE
  GITLAB
}

enum RepositoryKind {
  GIT
  GITHUB
  GITLAB
  GITHUB_SELF_HOSTED
  GITLAB_SELF_HOSTED
  GIT_CONFIG
}

enum Role {
  USER
  ASSISTANT
}

input CodeQueryInput {
  gitUrl: String!
  filepath: String
  language: String
  content: String!
}

input CodeSearchParamsOverrideInput {
  minEmbeddingScore: Float
  minBm25Score: Float
  minRrfScore: Float
  numToReturn: Int
  numToScore: Int
}

input CreateCustomDocumentInput {
  name: String!
  url: String!
}

input CreateIntegrationInput {
  displayName: String!
  accessToken: String!
  kind: IntegrationKind!
  apiBase: String
}

input CreateMessageInput {
  content: String!
  attachments: MessageAttachmentInput
}

input CreateThreadAndRunInput {
  thread: CreateThreadInput!
  options: ThreadRunOptionsInput! = {codeQuery: null, debugOptions: null, docQuery: null, generateRelevantQuestions: false}
}

input CreateThreadInput {
  userMessage: CreateMessageInput!
}

input CreateThreadRunInput {
  threadId: ID!
  additionalUserMessage: CreateMessageInput!
  options: ThreadRunOptionsInput! = {codeQuery: null, debugOptions: null, docQuery: null, generateRelevantQuestions: false}
}

input CreateWebCrawlerUrlInput {
  url: String!
}

input DocQueryInput {
  content: String!
}

input EmailSettingInput {
  smtpUsername: String!
  fromAddress: String!
  smtpServer: String!
  smtpPort: Int!
  encryption: Encryption!
  authMethod: AuthMethod!
  smtpPassword: String
}

input MessageAttachmentCodeInput {
  filepath: String
  startLine: Int
  content: String!
}

input MessageAttachmentInput {
  code: [MessageAttachmentCodeInput!]!
}

input NetworkSettingInput {
  externalUrl: String!
}

input PasswordChangeInput {
  oldPassword: String
  newPassword1: String!
  newPassword2: String!
}

input PasswordResetInput {
  code: String!
  password1: String!
  password2: String!
}

input RequestInvitationInput {
  email: String!
}

input RequestPasswordResetEmailInput {
  email: String!
}

input SecuritySettingInput {
  allowedRegisterDomainList: [String!]!
  disableClientSideTelemetry: Boolean!
}

input SetPresetDocumentActiveInput {
  name: String!
  active: Boolean!
}

input ThreadRunDebugOptionsInput {
  codeSearchParamsOverride: CodeSearchParamsOverrideInput = null
}

input ThreadRunOptionsInput {
  docQuery: DocQueryInput = null
  codeQuery: CodeQueryInput = null
  generateRelevantQuestions: Boolean! = false
  debugOptions: ThreadRunDebugOptionsInput = null
}

input UpdateIntegrationInput {
  id: ID!
  displayName: String!
  accessToken: String
  apiBase: String
  kind: IntegrationKind!
}

input UpdateOAuthCredentialInput {
  provider: OAuthProvider!
  clientId: String!
  clientSecret: String
}

"""
  Combined date and time (with time zone) in [RFC 3339][0] format.

  Represents a description of an exact instant on the time-line (such as the
  instant that a user account was created).

  [`DateTime` scalar][1] compliant.

  See also [`chrono::DateTime`][2] for details.

  [0]: https://datatracker.ietf.org/doc/html/rfc3339#section-5
  [1]: https://graphql-scalars.dev/docs/scalars/date-time
  [2]: https://docs.rs/chrono/latest/chrono/struct.DateTime.html
"""
scalar DateTime

type CompletionStats {
  start: DateTime!
  end: DateTime!
  language: Language!
  completions: Int!
  views: Int!
  selects: Int!
}

type CustomDocumentConnection {
  edges: [CustomDocumentEdge!]!
  pageInfo: PageInfo!
}

type CustomDocumentEdge {
  node: CustomWebDocument!
  cursor: String!
}

type CustomWebDocument {
  url: String!
  name: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  jobInfo: JobInfo!
}

type DiskUsage {
  filepath: [String!]!
  "Size in kilobytes."
  sizeKb: Float!
}

type DiskUsageStats {
  events: DiskUsage!
  indexedRepositories: DiskUsage!
  database: DiskUsage!
  models: DiskUsage!
}

type EmailSetting {
  smtpUsername: String!
  smtpServer: String!
  smtpPort: Int!
  fromAddress: String!
  encryption: Encryption!
  authMethod: AuthMethod!
}

type FileEntrySearchResult {
  type: String!
  path: String!
  "matched indices for fuzzy search query."
  indices: [Int!]!
}

type GitReference {
  name: String!
  commit: String!
}

type GitRepository {
  id: ID!
  name: String!
  gitUrl: String!
  refs: [GitReference!]!
  jobInfo: JobInfo!
}

type GrepFile {
  path: String!
  lines: [GrepLine!]!
}

type GrepLine {
  "Content of the line."
  line: GrepTextOrBase64!
  "Byte offset in the file to the start of the line."
  byteOffset: Int!
  "Line number in the file, starting from 1."
  lineNumber: Int!
  "The matches in the line."
  subMatches: [GrepSubMatch!]!
}

type GrepSubMatch {
  bytesStart: Int!
  bytesEnd: Int!
}

type GrepTextOrBase64 {
  text: String
  base64: String
}

type Integration {
  id: ID!
  kind: IntegrationKind!
  displayName: String!
  accessToken: String!
  apiBase: String
  createdAt: DateTime!
  updatedAt: DateTime!
  status: IntegrationStatus!
}

type IntegrationConnection {
  edges: [IntegrationEdge!]!
  pageInfo: PageInfo!
}

type IntegrationEdge {
  node: Integration!
  cursor: String!
}

type Invitation {
  id: ID!
  email: String!
  code: String!
  createdAt: DateTime!
}

type InvitationConnection {
  edges: [InvitationEdge!]!
  pageInfo: PageInfo!
}

type InvitationEdge {
  node: Invitation!
  cursor: String!
}

type JobInfo {
  "Last run of the job."
  lastJobRun: JobRun
  "The command to submit job run using triggerJobRun mutation."
  command: String!
}

type JobRun {
  id: ID!
  job: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  startedAt: DateTime
  finishedAt: DateTime
  exitCode: Int
  stdout: String!
  stderr: String!
}

type JobRunConnection {
  edges: [JobRunEdge!]!
  pageInfo: PageInfo!
}

type JobRunEdge {
  node: JobRun!
  cursor: String!
}

type JobStats {
  success: Int!
  failed: Int!
  pending: Int!
}

type LicenseInfo {
  type: LicenseType!
  status: LicenseStatus!
  seats: Int!
  seatsUsed: Int!
  issuedAt: DateTime
  expiresAt: DateTime
}

type Message {
  id: ID!
  threadId: ID!
  role: Role!
  content: String!
  attachment: MessageAttachment!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageAttachment {
  code: [MessageAttachmentCode!]!
  clientCode: [MessageAttachmentClientCode!]!
  doc: [MessageAttachmentDoc!]!
}

type MessageAttachmentClientCode {
  filepath: String
  startLine: Int
  content: String!
}

type MessageAttachmentCode {
  gitUrl: String!
  filepath: String!
  language: String!
  content: String!
  startLine: Int!
}

type MessageAttachmentCodeScores {
  rrf: Float!
  bm25: Float!
  embedding: Float!
}

type MessageAttachmentDoc {
  title: String!
  link: String!
  content: String!
}

type MessageCodeSearchHit {
  code: MessageAttachmentCode!
  scores: MessageAttachmentCodeScores!
}

type MessageConnection {
  edges: [MessageEdge!]!
  pageInfo: PageInfo!
}

type MessageDocSearchHit {
  doc: MessageAttachmentDoc!
  score: Float!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

type Mutation {
  resetRegistrationToken: String!
  requestInvitationEmail(input: RequestInvitationInput!): Invitation!
  requestPasswordResetEmail(input: RequestPasswordResetEmailInput!): Boolean!
  passwordReset(input: PasswordResetInput!): Boolean!
  passwordChange(input: PasswordChangeInput!): Boolean!
  resetUserAuthToken: Boolean!
  logoutAllSessions: Boolean!
  updateUserActive(id: ID!, active: Boolean!): Boolean!
  updateUserRole(id: ID!, isAdmin: Boolean!): Boolean!
  uploadUserAvatarBase64(id: ID!, avatarBase64: String): Boolean!
  updateUserName(id: ID!, name: String!): Boolean!
  register(email: String!, password1: String!, password2: String!, invitationCode: String, name: String!): RegisterResponse!
  tokenAuth(email: String!, password: String!): TokenAuthResponse!
  verifyToken(token: String!): Boolean!
  refreshToken(refreshToken: String!): RefreshTokenResponse!
  createInvitation(email: String!): ID!
  sendTestEmail(to: String!): Boolean!
  createGitRepository(name: String!, gitUrl: String!): ID!
  deleteGitRepository(id: ID!): Boolean!
  updateGitRepository(id: ID!, name: String!, gitUrl: String!): Boolean!
  deleteInvitation(id: ID!): ID!
  updateOauthCredential(input: UpdateOAuthCredentialInput!): Boolean!
  deleteOauthCredential(provider: OAuthProvider!): Boolean!
  updateEmailSetting(input: EmailSettingInput!): Boolean!
  updateSecuritySetting(input: SecuritySettingInput!): Boolean!
  updateNetworkSetting(input: NetworkSettingInput!): Boolean!
  deleteEmailSetting: Boolean!
  uploadLicense(license: String!): Boolean!
  resetLicense: Boolean!
  createIntegration(input: CreateIntegrationInput!): ID!
  updateIntegration(input: UpdateIntegrationInput!): Boolean!
  deleteIntegration(id: ID!, kind: IntegrationKind!): Boolean!
  updateIntegratedRepositoryActive(id: ID!, active: Boolean!): Boolean!
  "Trigger a job run given its param string."
  triggerJobRun(command: String!): ID!
  createWebCrawlerUrl(input: CreateWebCrawlerUrlInput!): ID!
  deleteWebCrawlerUrl(id: ID!): Boolean!
  "Delete pair of user message and bot response in a thread."
  deleteThreadMessagePair(threadId: ID!, userMessageId: ID!, assistantMessageId: ID!): Boolean!
  "Turn on persisted status for a thread."
  setThreadPersisted(threadId: ID!): Boolean!
  createCustomDocument(input: CreateCustomDocumentInput!): ID!
  deleteCustomDocument(id: ID!): Boolean!
  setPresetDocumentActive(input: SetPresetDocumentActiveInput!): Boolean!
}

type NetworkSetting {
  externalUrl: String!
}

type OAuthCredential {
  provider: OAuthProvider!
  clientId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

type PresetDocumentConnection {
  edges: [PresetDocumentEdge!]!
  pageInfo: PageInfo!
}

type PresetDocumentEdge {
  node: PresetWebDocument!
  cursor: String!
}

type PresetWebDocument {
  id: ID!
  name: String!
  "`updated_at` is only filled when the preset is active."
  updatedAt: DateTime
  "`job_info` is only filled when the preset is active."
  jobInfo: JobInfo
}

type ProvidedRepository {
  id: ID!
  integrationId: ID!
  active: Boolean!
  displayName: String!
  gitUrl: String!
  vendorId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  refs: [GitReference!]!
  jobInfo: JobInfo!
}

type ProvidedRepositoryConnection {
  edges: [ProvidedRepositoryEdge!]!
  pageInfo: PageInfo!
}

type ProvidedRepositoryEdge {
  node: ProvidedRepository!
  cursor: String!
}

type Query {
  registrationToken: String!
  me: User!
  users(after: String, before: String, first: Int, last: Int): UserConnection!
  invitations(after: String, before: String, first: Int, last: Int): InvitationConnection!
  jobRuns(ids: [ID!], jobs: [String!], after: String, before: String, first: Int, last: Int): JobRunConnection!
  jobRunStats(jobs: [String!]): JobStats!
  emailSetting: EmailSetting
  networkSetting: NetworkSetting!
  securitySetting: SecuritySetting!
  gitRepositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  "Search files that matches the pattern in the repository."
  repositorySearch(kind: RepositoryKind!, id: ID!, rev: String, pattern: String!): [FileEntrySearchResult!]!
  """
    File content search with a grep-like experience.

    Syntax:

    1. Unprefixed text will be treated as a regex pattern for file content search.
    2. 'f:' to search by file name with a regex pattern.
    3. 'lang:' to search by file language.
    4. All tokens can be negated by prefixing them with '-'.

    Examples:
    * `f:schema -lang:rust fn`
    * `func_name lang:go`
  """
  repositoryGrep(kind: RepositoryKind!, id: ID!, rev: String, query: String!): RepositoryGrepOutput!
  oauthCredential(provider: OAuthProvider!): OAuthCredential
  oauthCallbackUrl(provider: OAuthProvider!): String!
  serverInfo: ServerInfo!
  license: LicenseInfo!
  jobs: [String!]!
  dailyStatsInPastYear(users: [ID!]): [CompletionStats!]!
  dailyStats(start: DateTime!, end: DateTime!, users: [ID!], languages: [Language!]): [CompletionStats!]!
  userEvents(after: String, before: String, first: Int, last: Int, users: [ID!], start: DateTime!, end: DateTime!): UserEventConnection!
  diskUsageStats: DiskUsageStats!
  repositoryList: [Repository!]!
  integrations(ids: [ID!], kind: IntegrationKind, after: String, before: String, first: Int, last: Int): IntegrationConnection!
  integratedRepositories(ids: [ID!], kind: IntegrationKind, active: Boolean, after: String, before: String, first: Int, last: Int): ProvidedRepositoryConnection!
  webCrawlerUrls(after: String, before: String, first: Int, last: Int): WebCrawlerUrlConnection!
  threads(ids: [ID!], after: String, before: String, first: Int, last: Int): ThreadConnection!
  """
    Read thread messages by thread ID.

    Thread is public within an instance, so no need to check for ownership.
  """
  threadMessages(threadId: ID!, after: String, before: String, first: Int, last: Int): MessageConnection!
  customWebDocuments(after: String, before: String, first: Int, last: Int): CustomDocumentConnection!
  presetWebDocuments(after: String, before: String, first: Int, last: Int, isActive: Boolean!): PresetDocumentConnection!
}

type RefreshTokenResponse {
  accessToken: String!
  refreshToken: String!
  refreshExpiresAt: DateTime!
}

type RegisterResponse {
  accessToken: String!
  refreshToken: String!
}

type Repository {
  id: ID!
  name: String!
  kind: RepositoryKind!
  gitUrl: String!
  refs: [GitReference!]!
}

type RepositoryConnection {
  edges: [RepositoryEdge!]!
  pageInfo: PageInfo!
}

type RepositoryEdge {
  node: GitRepository!
  cursor: String!
}

type RepositoryGrepOutput {
  files: [GrepFile!]!
  "Elapsed time in milliseconds for grep search."
  elapsedMs: Int!
}

type SecuritySetting {
  allowedRegisterDomainList: [String!]!
  disableClientSideTelemetry: Boolean!
}

type ServerInfo {
  isAdminInitialized: Boolean!
  isChatEnabled: Boolean!
  isEmailConfigured: Boolean!
  allowSelfSignup: Boolean!
  isDemoMode: Boolean!
}

type Subscription {
  createThreadAndRun(input: CreateThreadAndRunInput!): ThreadRunItem!
  createThreadRun(input: CreateThreadRunInput!): ThreadRunItem!
}

type Thread {
  id: ID!
  userId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ThreadConnection {
  edges: [ThreadEdge!]!
  pageInfo: PageInfo!
}

type ThreadEdge {
  node: Thread!
  cursor: String!
}

type ThreadRunItem {
  threadCreated: ID
  threadRelevantQuestions: [String!]
  threadUserMessageCreated: ID
  threadAssistantMessageCreated: ID
  threadAssistantMessageAttachmentsCode: [MessageCodeSearchHit!]
  threadAssistantMessageAttachmentsDoc: [MessageDocSearchHit!]
  threadAssistantMessageContentDelta: String
  threadAssistantMessageCompleted: ID
}

type TokenAuthResponse {
  accessToken: String!
  refreshToken: String!
}

type User {
  id: ID!
  email: String!
  name: String!
  isAdmin: Boolean!
  isOwner: Boolean!
  authToken: String!
  createdAt: DateTime!
  active: Boolean!
  isPasswordSet: Boolean!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserEvent {
  id: ID!
  userId: ID!
  kind: EventKind!
  createdAt: DateTime!
  payload: String!
}

type UserEventConnection {
  edges: [UserEventEdge!]!
  pageInfo: PageInfo!
}

type UserEventEdge {
  node: UserEvent!
  cursor: String!
}

type WebCrawlerUrl {
  url: String!
  id: ID!
  createdAt: DateTime!
  jobInfo: JobInfo!
}

type WebCrawlerUrlConnection {
  edges: [WebCrawlerUrlEdge!]!
  pageInfo: PageInfo!
}

type WebCrawlerUrlEdge {
  node: WebCrawlerUrl!
  cursor: String!
}

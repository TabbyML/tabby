"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3396],{75561:function(n,e,t){t.d(e,{B:function(){return s}});var r=t(18500);let i={"\n  query ListUserEvents(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $start: DateTime!\n    $end: DateTime!\n    $users: [ID!]\n  ) {\n    userEvents(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      start: $start\n      end: $end\n      users: $users\n    ) {\n      edges {\n        node {\n          id\n          userId\n          createdAt\n          kind\n          payload\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.UQ,"\n  mutation uploadUserAvatarBase64($id: ID!, $avatarBase64: String!) {\n    uploadUserAvatarBase64(id: $id, avatarBase64: $avatarBase64)\n  }\n":r.eI,"\n  mutation UpdateUserName($id: ID!, $name: String!) {\n    updateUserName(id: $id, name: $name)\n  }\n":r.DQ,"\n  mutation PasswordChange($input: PasswordChangeInput!) {\n    passwordChange(input: $input)\n  }\n":r.oZ,"\n  mutation updateEmailSetting($input: EmailSettingInput!) {\n    updateEmailSetting(input: $input)\n  }\n":r.gl,"\n  mutation deleteEmailSetting {\n    deleteEmailSetting\n  }\n":r.wZ,"\n  mutation SendTestEmail($to: String!) {\n    sendTestEmail(to: $to)\n  }\n":r.nI,"\n  query emailSetting {\n    emailSetting {\n      smtpUsername\n      smtpServer\n      fromAddress\n      encryption\n      authMethod\n      smtpPort\n    }\n  }\n":r.k6,"\n  mutation UpdateIntegration($input: UpdateIntegrationInput!) {\n    updateIntegration(input: $input)\n  }\n":r.fc,"\n  mutation DeleteIntegration($id: ID!, $kind: IntegrationKind!) {\n    deleteIntegration(id: $id, kind: $kind)\n  }\n":r.AU,"\n  mutation UpdateIntegratedRepositoryActive($id: ID!, $active: Boolean!) {\n    updateIntegratedRepositoryActive(id: $id, active: $active)\n  }\n":r.o7,"\n  mutation CreateIntegration($input: CreateIntegrationInput!) {\n    createIntegration(input: $input)\n  }\n":r.fY,"\n  mutation deleteGitRepository($id: ID!) {\n    deleteGitRepository(id: $id)\n  }\n":r.TS,"\n  mutation createGitRepository($name: String!, $gitUrl: String!) {\n    createGitRepository(name: $name, gitUrl: $gitUrl)\n  }\n":r.ad,"\n  mutation updateOauthCredential($input: UpdateOAuthCredentialInput!) {\n    updateOauthCredential(input: $input)\n  }\n":r.m,"\n  mutation deleteOauthCredential($provider: OAuthProvider!) {\n    deleteOauthCredential(provider: $provider)\n  }\n":r.ZH,"\n  query OAuthCallbackUrl($provider: OAuthProvider!) {\n    oauthCallbackUrl(provider: $provider)\n  }\n":r.L$,"\n  query OAuthCredential($provider: OAuthProvider!) {\n    oauthCredential(provider: $provider) {\n      provider\n      clientId\n      createdAt\n      updatedAt\n    }\n  }\n":r.Fd,"\n  mutation updateNetworkSettingMutation($input: NetworkSettingInput!) {\n    updateNetworkSetting(input: $input)\n  }\n":r.rN,"\n  mutation updateSecuritySetting($input: SecuritySettingInput!) {\n    updateSecuritySetting(input: $input)\n  }\n":r.Nl,"\n  query SecuritySetting {\n    securitySetting {\n      allowedRegisterDomainList\n      disableClientSideTelemetry\n    }\n  }\n":r.rU,"\n  mutation UploadLicense($license: String!) {\n    uploadLicense(license: $license)\n  }\n":r.Yo,"\n  mutation ResetLicense {\n    resetLicense\n  }\n":r.d0,"\n  mutation CreateInvitation($email: String!) {\n    createInvitation(email: $email)\n  }\n":r.ib,"\n  mutation DeleteInvitation($id: ID!) {\n    deleteInvitation(id: $id)\n  }\n":r.YM,"\n  mutation updateUserRole($id: ID!, $isAdmin: Boolean!) {\n    updateUserRole(id: $id, isAdmin: $isAdmin)\n  }\n":r.XF,"\n  mutation UpdateUserActive($id: ID!, $active: Boolean!) {\n    updateUserActive(id: $id, active: $active)\n  }\n":r.dv,"\n  query GetRegistrationToken {\n    registrationToken\n  }\n":r.bh,"\n  mutation ResetRegistrationToken {\n    resetRegistrationToken\n  }\n":r.wW,"\n  query GetDiskUsageStats {\n    diskUsageStats {\n      events {\n        filepath\n        sizeKb\n      }\n      indexedRepositories {\n        filepath\n        sizeKb\n      }\n      database {\n        filepath\n        sizeKb\n      }\n      models {\n        filepath\n        sizeKb\n      }\n    }\n  }\n":r.xX,"\n  mutation ResetUserAuthToken {\n    resetUserAuthToken\n  }\n":r.qq,"\n  mutation passwordReset($input: PasswordResetInput!) {\n    passwordReset(input: $input)\n  }\n":r.vK,"\n  mutation requestPasswordResetEmail($input: RequestPasswordResetEmailInput!) {\n    requestPasswordResetEmail(input: $input)\n  }\n":r.i8,"\n  mutation requestInvitationEmail($input: RequestInvitationInput!) {\n    requestInvitationEmail(input: $input) {\n      email\n      code\n    }\n  }\n":r.S_,"\n  mutation tokenAuth($email: String!, $password: String!) {\n    tokenAuth(email: $email, password: $password) {\n      accessToken\n      refreshToken\n    }\n  }\n":r.UO,"\n  mutation register(\n    $name: String!\n    $email: String!\n    $password1: String!\n    $password2: String!\n    $invitationCode: String\n  ) {\n    register(\n      name: $name\n      email: $email\n      password1: $password1\n      password2: $password2\n      invitationCode: $invitationCode\n    ) {\n      accessToken\n      refreshToken\n    }\n  }\n":r.YR,"\n  query RepositorySearch($kind: RepositoryKind!, $id: ID!, $pattern: String!) {\n    repositorySearch(kind: $kind, id: $id, pattern: $pattern) {\n      type\n      path\n      indices\n    }\n  }\n":r.BH,"\n  query RepositoryList {\n    repositoryList {\n      id\n      name\n      kind\n      gitUrl\n    }\n  }\n":r.HC,"\n  query GetLicenseInfo {\n    license {\n      type\n      status\n      seats\n      seatsUsed\n      issuedAt\n      expiresAt\n    }\n  }\n":r.eZ,"\n  query MeQuery {\n    me {\n      id\n      authToken\n      email\n      isAdmin\n      isPasswordSet\n      name\n    }\n  }\n":r.fk,"\n  query NetworkSetting {\n    networkSetting {\n      externalUrl\n    }\n  }\n":r.m2,"\n  query GetServerInfo {\n    serverInfo {\n      isAdminInitialized\n      isEmailConfigured\n      isChatEnabled\n      allowSelfSignup\n      isDemoMode\n    }\n  }\n":r.a,"\n  mutation refreshToken($refreshToken: String!) {\n    refreshToken(refreshToken: $refreshToken) {\n      accessToken\n      refreshToken\n    }\n  }\n":r.FR,"\n  mutation LogoutAllSessions {\n    logoutAllSessions\n  }\n":r.Il,"\n  query ListInvitations(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    invitations(after: $after, before: $before, first: $first, last: $last) {\n      edges {\n        node {\n          id\n          email\n          code\n          createdAt\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.Xx,"\n  query gitRepositories(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    gitRepositories(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          name\n          gitUrl\n          jobInfo {\n            lastJobRun {\n              id\n              job\n              createdAt\n              finishedAt\n              exitCode\n            }\n            command\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.Mi,"\n  query ListJobRuns(\n    $ids: [ID!]\n    $jobs: [String!]\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    jobRuns(\n      ids: $ids\n      jobs: $jobs\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          job\n          createdAt\n          finishedAt\n          exitCode\n          stdout\n          stderr\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.$S,"\n  query GetJobRunStats($jobs: [String!]) {\n    jobRunStats(jobs: $jobs) {\n      success\n      failed\n      pending\n    }\n  }\n":r.np,"\n  query ListJobs {\n    jobs\n  }\n":r.Ax,"\n  query ListUsers($after: String, $before: String, $first: Int, $last: Int) {\n    users(after: $after, before: $before, first: $first, last: $last) {\n      edges {\n        node {\n          id\n          email\n          isAdmin\n          isOwner\n          createdAt\n          active\n          name\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.by,"\n  query DailyStatsInPastYear($users: [ID!]) {\n    dailyStatsInPastYear(users: $users) {\n      start\n      end\n      completions\n      selects\n      views\n    }\n  }\n":r.Wd,"\n  query DailyStats(\n    $start: DateTime!\n    $end: DateTime!\n    $users: [ID!]\n    $languages: [Language!]\n  ) {\n    dailyStats(start: $start, end: $end, users: $users, languages: $languages) {\n      start\n      end\n      completions\n      selects\n      views\n      language\n    }\n  }\n":r.Sm,"\n  query ListIntegrations(\n    $ids: [ID!]\n    $kind: IntegrationKind\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    integrations(\n      ids: $ids\n      kind: $kind\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          displayName\n          status\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.KZ,"\n  query ListIntegratedRepositories(\n    $ids: [ID!]\n    $kind: IntegrationKind\n    $active: Boolean\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    integratedRepositories(\n      ids: $ids\n      kind: $kind\n      active: $active\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          displayName\n          gitUrl\n          active\n          jobInfo {\n            lastJobRun {\n              id\n              job\n              createdAt\n              finishedAt\n              exitCode\n            }\n            command\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.qt};function s(n){var e;return null!==(e=i[n])&&void 0!==e?e:{}}},43240:function(n,e,t){t.d(e,{BX:function(){return r.B}});var r=t(75561)},80605:function(n,e,t){t.d(e,{UA:function(){return f},Uw:function(){return d},c7:function(){return u},jJ:function(){return l},xG:function(){return o}});var r=t(40055),i=t(43240);let s=(0,i.BX)("\n  query GetServerInfo {\n    serverInfo {\n      isAdminInitialized\n      isEmailConfigured\n      isChatEnabled\n      allowSelfSignup\n      isDemoMode\n    }\n  }\n"),a=()=>{let[{data:n}]=(0,r.aM)({query:s});return null==n?void 0:n.serverInfo},o=()=>{var n;return null===(n=a())||void 0===n?void 0:n.isChatEnabled},u=()=>{var n;return null===(n=a())||void 0===n?void 0:n.isAdminInitialized},d=()=>{var n;return null===(n=a())||void 0===n?void 0:n.isEmailConfigured},l=()=>{var n;return null===(n=a())||void 0===n?void 0:n.allowSelfSignup},f=()=>{var n;return null===(n=a())||void 0===n?void 0:n.isDemoMode}},91302:function(n,e,t){t.d(e,{Dp:function(){return p},Ho:function(){return h},QJ:function(){return y},av:function(){return A},kP:function(){return b},zq:function(){return k}});var r,i,s=t(36164),a=t(3546),o=t(11978),u=t(24426),d=t.n(u),l=t(43240),f=t(80605),g=t(11634),$=t(66794);function c(n,e){var t,r;let s=function(n,e){switch(e.type){case i.SignIn:case i.Refresh:return{status:"authenticated",data:e.data};case i.SignOut:return{status:"unauthenticated",data:void 0}}}(0,e);return n.status==s.status&&(t=n.data,r=s.data,(null==t?void 0:t.accessToken)===(null==r?void 0:r.accessToken)&&(null==t?void 0:t.refreshToken)===(null==r?void 0:r.refreshToken))?n:s}(r=i||(i={}))[r.SignIn=0]="SignIn",r[r.SignOut=1]="SignOut",r[r.Refresh=2]="Refresh";let v=a.createContext({}),p=(0,l.BX)("\n  mutation refreshToken($refreshToken: String!) {\n    refreshToken(refreshToken: $refreshToken) {\n      accessToken\n      refreshToken\n    }\n  }\n"),m=(0,l.BX)("\n  mutation LogoutAllSessions {\n    logoutAllSessions\n  }\n"),h=n=>{let{children:e}=n,[t,r]=a.useState(!1),[o]=d()($.nd,void 0),[u,l]=a.useReducer(c,{status:"loading",data:void 0});a.useEffect(()=>{(null==o?void 0:o.accessToken)&&(null==o?void 0:o.refreshToken)?l({type:i.SignIn,data:o}):l({type:i.SignOut}),r(!0)},[]),a.useEffect(()=>{!t||((null==o?void 0:o.accessToken)&&(null==o?void 0:o.refreshToken)?l({type:i.Refresh,data:o}):(null==o?void 0:o.accessToken)||(null==o?void 0:o.refreshToken)||l({type:i.SignOut}))},[o]);let f=a.useMemo(()=>{var n;return(null==u?void 0:u.status)=="authenticated"?{data:{accessToken:u.data.accessToken},status:u.status}:{status:null!==(n=null==u?void 0:u.status)&&void 0!==n?n:"loading",data:null}},[u]);return(0,s.jsx)(v.Provider,{value:{authState:u,dispatch:l,session:f},children:e})};class I extends Error{constructor(){super("AuthProvider is missing. Please add the AuthProvider at root level")}}function S(){let n=a.useContext(v);if(!n)throw new I;return n}function k(){let{dispatch:n}=S(),[e,t]=d()($.nd,void 0);return async e=>(t({accessToken:e.accessToken,refreshToken:e.refreshToken}),n({type:i.SignIn,data:e}),!0)}function y(){let n=(0,g.D)(m),{dispatch:e}=S(),[t,r]=d()($.nd,void 0);return async()=>{await n(),r(void 0),e({type:i.SignOut})}}function b(){let{session:n}=S();return n}let T=["/auth/signin","/auth/signup","/auth/reset-password"];function A(){let n=(0,f.c7)(),e=(0,o.useRouter)(),t=(0,o.usePathname)(),r=(0,o.useSearchParams)(),{data:i,status:s}=b();return a.useEffect(()=>{if("loading"===s||"authenticated"===s||void 0===n)return;let i="/auth/signup"===t&&"true"===r.get("isAdmin");if(!i&&!n)return e.replace("/auth/signup?isAdmin=true");T.includes(t)||e.replace("/auth/signin")},[n,s]),i}},11634:function(n,e,t){t.d(e,{D:function(){return $},L:function(){return c}});var r=t(22365),i=t(28552),s=t(81013),a=t(79716),o=t(74630),u=t(40055),d=t(44745),l=t(91302),f=t(70410),g=t(66794);function $(n,e){var t;let[r,i]=(0,u.Db)(n),s=(null==e?void 0:e.form)?(t=e.form,n=>{let{graphQLErrors:e=[]}=n;for(let n of e)if(n.extensions&&n.extensions["validation-errors"]){let e=n.extensions["validation-errors"];for(let n of e.errors)t.setError(n.path,n)}else(null==n?void 0:n.originalError)&&t.setError("root",n.originalError)}):void 0,a=async n=>{let t;try{if(null==(t=await i(n))?void 0:t.error)s&&s(t.error),(null==e?void 0:e.onError)&&e.onError(t.error);else if(!(0,o.Z)(null==t?void 0:t.data)){var r;null==e||null===(r=e.onCompleted)||void 0===r||r.call(e,t.data)}}catch(n){(null==e?void 0:e.onError)&&e.onError(n);return}return t};return a}let c=new d.KU({url:"/graphql",requestPolicy:"cache-and-network",exchanges:[(0,i.HG)({keys:{CompletionStats:()=>null,ServerInfo:()=>null,RepositorySearch:()=>null,RepositoryList:()=>null},resolvers:{Query:{invitations:(0,s.N)(),repositories:(0,s.N)()}},updates:{Mutation:{deleteInvitation(n,e,t,r){n.deleteInvitation&&t.inspectFields("Query").filter(n=>"invitations"===n.fieldName).forEach(n=>{t.updateQuery({query:f.lE,variables:n.arguments},n=>{var t;return(null==n?void 0:null===(t=n.invitations)||void 0===t?void 0:t.edges)&&(n.invitations.edges=n.invitations.edges.filter(n=>n.node.id!==e.id)),n})})},deleteGitRepository(n,e,t,r){n.deleteGitRepository&&t.inspectFields("Query").filter(n=>"gitRepositories"===n.fieldName).forEach(n=>{t.updateQuery({query:f.S1,variables:n.arguments},n=>{var t;return(null==n?void 0:null===(t=n.gitRepositories)||void 0===t?void 0:t.edges)&&(n.gitRepositories.edges=n.gitRepositories.edges.filter(n=>n.node.id!==e.id)),n})})}}}}),(0,r.M)(async n=>{let e=(0,g.bW)(),t=null==e?void 0:e.accessToken,r=null==e?void 0:e.refreshToken;return{addAuthToOperation(e){let i=(0,g.bW)();return(t=null==i?void 0:i.accessToken,r=null==i?void 0:i.refreshToken,t)?n.appendHeaders(e,{Authorization:"Bearer ".concat(t)}):e},didAuthError(n,e){let t=n.graphQLErrors.some(n=>{var e;return(null==n?void 0:null===(e=n.extensions)||void 0===e?void 0:e.code)==="UNAUTHORIZED"});return t&&g.gN.clearAccessToken(),t},willAuthError(n){let e=(0,g.bW)();if(t=null==e?void 0:e.accessToken,r=null==e?void 0:e.refreshToken,"query"===n.kind&&n.query.definitions.some(n=>{var e;return"OperationDefinition"===n.kind&&(null===(e=n.name)||void 0===e?void 0:e.value)&&["GetServerInfo"].includes(n.name.value)})||"mutation"===n.kind&&n.query.definitions.some(n=>{var e;return"OperationDefinition"===n.kind&&(null===(e=n.name)||void 0===e?void 0:e.value)&&["tokenAuth","register"].includes(n.name.value)})||r&&"mutation"===n.kind&&n.query.definitions.some(n=>{var e;return"OperationDefinition"===n.kind&&(null==n?void 0:null===(e=n.name)||void 0===e?void 0:e.value)==="refreshToken"}))return!1;if(!t)return g.gN.clearAccessToken(),!0;try{let{exp:n}=(0,a.o)(t);return(0,g.pw)(n)}catch(n){return!0}},refreshAuth:async()=>g.gN.refreshToken(async()=>{var e;let t=null===(e=(0,g.bW)())||void 0===e?void 0:e.refreshToken;if(t)return n.mutate(l.Dp,{refreshToken:t}).then(n=>{var e;return null==n?void 0:null===(e=n.data)||void 0===e?void 0:e.refreshToken})})}}),(0,d.Dk)({onError(n){n.message.startsWith("[GraphQL]")&&(n.message=n.message.replace("[GraphQL]","").trim())}}),d.Ek]})},70410:function(n,e,t){t.d(e,{Cl:function(){return f},DQ:function(){return u},GG:function(){return a},S1:function(){return s},Y6:function(){return l},kb:function(){return g},lE:function(){return i},ts:function(){return $},yB:function(){return o},yw:function(){return d}});var r=t(43240);let i=(0,r.BX)("\n  query ListInvitations(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    invitations(after: $after, before: $before, first: $first, last: $last) {\n      edges {\n        node {\n          id\n          email\n          code\n          createdAt\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"),s=(0,r.BX)("\n  query gitRepositories(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    gitRepositories(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          name\n          gitUrl\n          jobInfo {\n            lastJobRun {\n              id\n              job\n              createdAt\n              finishedAt\n              exitCode\n            }\n            command\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"),a=(0,r.BX)("\n  query ListJobRuns(\n    $ids: [ID!]\n    $jobs: [String!]\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    jobRuns(\n      ids: $ids\n      jobs: $jobs\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          job\n          createdAt\n          finishedAt\n          exitCode\n          stdout\n          stderr\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"),o=(0,r.BX)("\n  query GetJobRunStats($jobs: [String!]) {\n    jobRunStats(jobs: $jobs) {\n      success\n      failed\n      pending\n    }\n  }\n"),u=(0,r.BX)("\n  query ListJobs {\n    jobs\n  }\n"),d=(0,r.BX)("\n  query ListUsers($after: String, $before: String, $first: Int, $last: Int) {\n    users(after: $after, before: $before, first: $first, last: $last) {\n      edges {\n        node {\n          id\n          email\n          isAdmin\n          isOwner\n          createdAt\n          active\n          name\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"),l=(0,r.BX)("\n  query DailyStatsInPastYear($users: [ID!]) {\n    dailyStatsInPastYear(users: $users) {\n      start\n      end\n      completions\n      selects\n      views\n    }\n  }\n"),f=(0,r.BX)("\n  query DailyStats(\n    $start: DateTime!\n    $end: DateTime!\n    $users: [ID!]\n    $languages: [Language!]\n  ) {\n    dailyStats(start: $start, end: $end, users: $users, languages: $languages) {\n      start\n      end\n      completions\n      selects\n      views\n      language\n    }\n  }\n"),g=(0,r.BX)("\n  query ListIntegrations(\n    $ids: [ID!]\n    $kind: IntegrationKind\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    integrations(\n      ids: $ids\n      kind: $kind\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          displayName\n          status\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n"),$=(0,r.BX)("\n  query ListIntegratedRepositories(\n    $ids: [ID!]\n    $kind: IntegrationKind\n    $active: Boolean\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    integratedRepositories(\n      ids: $ids\n      kind: $kind\n      active: $active\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          displayName\n          gitUrl\n          active\n          jobInfo {\n            lastJobRun {\n              id\n              job\n              createdAt\n              finishedAt\n              exitCode\n            }\n            command\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n")},66794:function(n,e,t){t.d(e,{bW:function(){return o},gN:function(){return g},nd:function(){return a},pw:function(){return l}});var r=t(79716),i=t(74630),s=t(74248);let a="_tabby_auth",o=()=>{if((0,s.S_)()){let n=localStorage.getItem(a);if(n)try{return JSON.parse(n)}catch(n){}}},u=n=>{localStorage.setItem(a,JSON.stringify(n))},d=()=>{localStorage.removeItem(a),window.dispatchEvent(new StorageEvent("storage",{storageArea:window.localStorage,url:window.location.href,key:a}))},l=n=>!!(0,i.Z)(n)||Date.now()>1e3*n,f=n=>!(0,i.Z)(n)&&Date.now()-1e3*n<6e4,g=new class{clearAccessToken(){let n=o();n&&u({...n,accessToken:""})}async refreshToken(n){try{var e;if(void 0===(null===(e=navigator)||void 0===e?void 0:e.locks))throw console.error("The Web Locks API is not supported in your browser. Please upgrade to a newer browser version."),Error();await navigator.locks.request("_tabby_auth_lock",async()=>{let e;let t=o(),i=null==t?void 0:t.accessToken,s=null==t?void 0:t.refreshToken;if(i){let{iat:s}=(0,r.o)(i);e=f(s)?t:await n()}else s&&(e=await n());e?u(e):d()})}catch(n){d()}}}}}]);
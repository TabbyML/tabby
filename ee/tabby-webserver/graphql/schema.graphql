type TokenAuthResponse {
  accessToken: String!
  refreshToken: String!
}

enum WorkerKind {
  COMPLETION
  CHAT
}

type Mutation {
  resetRegistrationToken: String!
  resetUserAuthToken: Boolean!
  updateUserActive(id: ID!, active: Boolean!): Boolean!
  register(email: String!, password1: String!, password2: String!, invitationCode: String): RegisterResponse!
  tokenAuth(email: String!, password: String!): TokenAuthResponse!
  verifyToken(token: String!): VerifyTokenResponse!
  refreshToken(refreshToken: String!): RefreshTokenResponse!
  createInvitation(email: String!): ID!
  createRepository(name: String!, gitUrl: String!): ID!
  deleteRepository(id: ID!): Boolean!
  updateRepository(id: ID!, name: String!, gitUrl: String!): Boolean!
  deleteInvitation(id: ID!): ID!
  updateOauthCredential(provider: OAuthProvider!, clientId: String!, clientSecret: String!, redirectUri: String): Boolean!
  deleteOauthCredential(provider: OAuthProvider!): Boolean!
  updateEmailSetting(smtpUsername: String!, smtpPassword: String, smtpServer: String!): Boolean!
  updateSecuritySetting(input: SecuritySettingInput!): Boolean!
  updateNetworkSetting(input: NetworkSettingInput!): Boolean!
  deleteEmailSetting: Boolean!
}

type RepositoryEdge {
  node: Repository!
  cursor: String!
}

"DateTime"
scalar DateTimeUtc

type JWTPayload {
  "Expiration time (as UTC timestamp)"
  exp: Float!
  "Issued at (as UTC timestamp)"
  iat: Float!
  "User email address"
  sub: String!
  "Whether the user is admin."
  isAdmin: Boolean!
}

type JobRun {
  id: ID!
  job: String!
  createdAt: DateTimeUtc!
  updatedAt: DateTimeUtc!
  finishedAt: DateTimeUtc
  exitCode: Int
  stdout: String!
  stderr: String!
}

type Query {
  workers: [Worker!]!
  registrationToken: String!
  isAdminInitialized: Boolean!
  me: User!
  users(after: String, before: String, first: Int, last: Int): UserConnection!
  invitations(after: String, before: String, first: Int, last: Int): InvitationConnection!
  jobRuns(after: String, before: String, first: Int, last: Int): JobRunConnection!
  emailSetting: EmailSetting
  networkSetting: NetworkSetting!
  securitySetting: SecuritySetting!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  oauthCredential(provider: OAuthProvider!): OAuthCredential
}

input NetworkSettingInput {
  externalUrl: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

type JobRunConnection {
  edges: [JobRunEdge!]!
  pageInfo: PageInfo!
}

type RefreshTokenResponse {
  accessToken: String!
  refreshToken: String!
  refreshExpiresAt: DateTimeUtc!
}

type RegisterResponse {
  accessToken: String!
  refreshToken: String!
}

type RepositoryConnection {
  edges: [RepositoryEdge!]!
  pageInfo: PageInfo!
}

input SecuritySettingInput {
  allowedRegisterDomainList: [String!]!
  disableClientSideTelemetry: Boolean!
}

type SecuritySetting {
  allowedRegisterDomainList: [String!]!
  disableClientSideTelemetry: Boolean!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type OAuthCredential {
  provider: OAuthProvider!
  clientId: String!
  clientSecret: String!
  redirectUri: String
  createdAt: DateTimeUtc!
  updatedAt: DateTimeUtc!
}

type VerifyTokenResponse {
  claims: JWTPayload!
}

type Invitation {
  id: ID!
  email: String!
  code: String!
  createdAt: String!
}

type EmailSetting {
  smtpUsername: String!
  smtpServer: String!
}

type User {
  id: ID!
  email: String!
  isAdmin: Boolean!
  authToken: String!
  createdAt: DateTimeUtc!
  active: Boolean!
}

type Worker {
  kind: WorkerKind!
  name: String!
  addr: String!
  device: String!
  arch: String!
  cpuInfo: String!
  cpuCount: Int!
  cudaDevices: [String!]!
}

type InvitationEdge {
  node: Invitation!
  cursor: String!
}

enum OAuthProvider {
  GITHUB
  GOOGLE
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

type NetworkSetting {
  externalUrl: String!
}

type JobRunEdge {
  node: JobRun!
  cursor: String!
}

type Repository {
  id: ID!
  name: String!
  gitUrl: String!
}

type InvitationConnection {
  edges: [InvitationEdge!]!
  pageInfo: PageInfo!
}

schema {
  query: Query
  mutation: Mutation
}

{"version":3,"sources":["../src/index.ts","../src/TabbyAgent.ts","../src/CompletionCache.ts","../src/generated/core/BaseHttpRequest.ts","../src/generated/core/request.ts","../src/generated/core/ApiError.ts","../src/generated/core/CancelablePromise.ts","../src/generated/core/AxiosHttpRequest.ts","../src/generated/services/DefaultService.ts","../src/generated/TabbyApi.ts","../src/generated/models/EventType.ts","../src/utils.ts","../src/types.ts"],"sourcesContent":["export { TabbyAgent } from \"./TabbyAgent\";\nexport {\n  Agent,\n  AgentFunction,\n  AgentEvent,\n  StatusChangedEvent,\n  CompletionRequest,\n  CompletionResponse,\n  agentEventNames,\n} from \"./types\";\nexport {\n  CancelablePromise,\n  CancelError,\n  ApiError,\n  HTTPValidationError,\n  ValidationError,\n  Choice,\n  ChoiceEvent,\n  CompletionEvent,\n  EventType,\n} from \"./generated\";\n","import axios from \"axios\";\nimport { EventEmitter } from \"events\";\nimport { v4 as uuid } from \"uuid\";\nimport { CompletionCache } from \"./CompletionCache\";\nimport { sleep, cancelable, splitLines, isBlank } from \"./utils\";\nimport { Agent, AgentEvent, CompletionRequest, CompletionResponse } from \"./types\";\nimport { TabbyApi, CancelablePromise, ApiError, ChoiceEvent, CompletionEvent } from \"./generated\";\n\nexport class TabbyAgent extends EventEmitter implements Agent {\n  private serverUrl: string = \"http://127.0.0.1:5000\";\n  private status: \"connecting\" | \"ready\" | \"disconnected\" = \"connecting\";\n  private api: TabbyApi;\n  private completionCache: CompletionCache;\n\n  constructor() {\n    super();\n    this.ping();\n    this.api = new TabbyApi({ BASE: this.serverUrl });\n    this.completionCache = new CompletionCache();\n  }\n\n  private changeStatus(status: \"connecting\" | \"ready\" | \"disconnected\") {\n    if (this.status != status) {\n      this.status = status;\n      const event: AgentEvent = { event: \"statusChanged\", status };\n      super.emit(\"statusChanged\", event);\n    }\n  }\n\n  private async ping(tries: number = 0): Promise<boolean> {\n    try {\n      const response = await axios.get(this.serverUrl);\n      this.changeStatus(\"ready\");\n      return true;\n    } catch (e) {\n      if (tries > 5) {\n        this.changeStatus(\"disconnected\");\n        return false;\n      }\n      this.changeStatus(\"connecting\");\n      const pingRetryDelay = 1000;\n      await sleep(pingRetryDelay);\n      return this.ping(tries + 1);\n    }\n  }\n\n  private wrapApiPromise<T>(promise: CancelablePromise<T>): CancelablePromise<T> {\n    return cancelable(\n      promise\n        .then((resolved: T) => {\n          this.changeStatus(\"ready\");\n          return resolved;\n        })\n        .catch((err: ApiError) => {\n          this.changeStatus(\"disconnected\");\n          throw err;\n        }),\n      () => {\n        promise.cancel();\n      }\n    );\n  }\n\n  private createPrompt(request: CompletionRequest): string {\n    const maxLines = 20;\n    const prefix = request.text.slice(0, request.position);\n    const lines = splitLines(prefix);\n    const cutoff = Math.max(lines.length - maxLines, 0);\n    const prompt = lines.slice(cutoff).join(\"\");\n    return prompt;\n  }\n\n  public setServerUrl(serverUrl: string): string {\n    this.serverUrl = serverUrl.replace(/\\/$/, \"\"); // Remove trailing slash\n    this.ping();\n    this.api = new TabbyApi({ BASE: this.serverUrl });\n    return this.serverUrl;\n  }\n\n  public getServerUrl(): string {\n    return this.serverUrl;\n  }\n\n  public getStatus(): \"connecting\" | \"ready\" | \"disconnected\" {\n    return this.status;\n  }\n\n  public getCompletions(request: CompletionRequest): CancelablePromise<CompletionResponse> {\n    if (this.completionCache.has(request)) {\n      return new CancelablePromise((resolve) => {\n        resolve(this.completionCache.get(request));\n      });\n    }\n    const prompt = this.createPrompt(request);\n    if (isBlank(prompt)) {\n      // Create a empty completion response\n      return new CancelablePromise((resolve) => {\n        resolve({\n          id: \"agent-\" + uuid(),\n          created: new Date().getTime(),\n          choices: []\n        });\n      });\n    }\n    const promise = this.wrapApiPromise(this.api.default.completionsV1CompletionsPost({\n      prompt,\n      language: request.language,\n    }));\n    return cancelable(\n      promise.then((response: CompletionResponse) => {\n        this.completionCache.set(request, response);\n        return response;\n      }),\n      () => {\n        promise.cancel();\n      }\n    );\n  }\n\n  public postEvent(request: ChoiceEvent | CompletionEvent): CancelablePromise<any> {\n    return this.wrapApiPromise(this.api.default.eventsV1EventsPost(request));\n  }\n}\n","import { LRUCache } from \"lru-cache\";\nimport hashObject from \"object-hash\";\nimport sizeOfObject from \"object-sizeof\";\nimport { CompletionRequest, CompletionResponse } from \"./types\";\nimport { splitLines, splitWords } from \"./utils\";\n\ntype CompletionCacheKey = CompletionRequest;\ntype CompletionCacheValue = CompletionResponse;\n\nexport class CompletionCache {\n  private cache: LRUCache<string, CompletionCacheValue>;\n  private options = {\n    maxSize: 1 * 1024 * 1024, // 1MB\n    partiallyAcceptedCacheGeneration: {\n      enabled: true,\n      perCharacter: {\n        lines: 1,\n        words: 10,\n        max: 30,\n      },\n      perWord: {\n        lines: 1,\n        max: 20,\n      },\n      perLine: {\n        max: 3,\n      },\n    },\n  };\n\n  constructor() {\n    this.cache = new LRUCache<string, CompletionCacheValue>({\n      maxSize: this.options.maxSize,\n      sizeCalculation: sizeOfObject,\n    });\n  }\n\n  has(key: CompletionCacheKey): boolean {\n    return this.cache.has(this.hash(key));\n  }\n\n  set(key: CompletionCacheKey, value: CompletionCacheValue): void {\n    for (const entry of this.createCacheEntries(key, value)) {\n      this.cache.set(this.hash(entry.key), entry.value);\n    }\n  }\n\n  get(key: CompletionCacheKey): CompletionCacheValue | undefined {\n    return this.cache.get(this.hash(key));\n  }\n\n  private hash(key: CompletionCacheKey): string {\n    return hashObject(key);\n  }\n\n  private createCacheEntries(\n    key: CompletionCacheKey,\n    value: CompletionCacheValue\n  ): { key: CompletionCacheKey; value: CompletionCacheValue }[] {\n    const list = [{ key, value }];\n    if (this.options.partiallyAcceptedCacheGeneration.enabled) {\n      const entries = value.choices\n        .map((choice) => {\n          return this.calculatePartiallyAcceptedPositions(choice.text).map((position) => {\n            return {\n              prefix: choice.text.slice(0, position),\n              suffix: choice.text.slice(position),\n              choiceIndex: choice.index,\n            };\n          });\n        })\n        .flat()\n        .reduce((grouped: { [key: string]: { suffix: string; choiceIndex: number }[] }, entry) => {\n          grouped[entry.prefix] = grouped[entry.prefix] || [];\n          grouped[entry.prefix].push({ suffix: entry.suffix, choiceIndex: entry.choiceIndex });\n          return grouped;\n        }, {});\n      for (const prefix in entries) {\n        const cacheKey = {\n          ...key,\n          text: key.text.slice(0, key.position) + prefix + key.text.slice(key.position),\n          position: key.position + prefix.length\n        };\n        const cacheValue = {\n          ...value,\n          choices: entries[prefix].map((choice) => {\n            return {\n              index: choice.choiceIndex,\n              text: choice.suffix,\n            };\n          }),\n        };\n        list.push({\n          key: cacheKey,\n          value: cacheValue,\n        });\n      }\n    }\n    return list;\n  }\n\n  private calculatePartiallyAcceptedPositions(completion: string): number[] {\n    const positions: number[] = [];\n    const option = this.options.partiallyAcceptedCacheGeneration;\n\n    const lines = splitLines(completion);\n    let index = 0;\n    let offset = 0;\n    // `index < lines.length - 1` to exclude the last line\n    while (index < lines.length - 1 && index < option.perLine.max) {\n      offset += lines[index].length;\n      positions.push(offset);\n      index++;\n    }\n\n    const words = lines.slice(0, option.perWord.lines).map(splitWords).flat();\n    index = 0;\n    offset = 0;\n    while (index < words.length && index < option.perWord.max) {\n      offset += words[index].length;\n      positions.push(offset);\n      index++;\n    }\n\n    const characters = lines\n      .slice(0, option.perCharacter.lines)\n      .map(splitWords)\n      .flat()\n      .slice(0, option.perCharacter.words)\n      .join(\"\");\n    offset = 1;\n    while (offset < characters.length && offset < option.perCharacter.max) {\n      positions.push(offset);\n      offset++;\n    }\n\n    // distinct and sort ascending\n    return positions.filter((v, i, arr) => arr.indexOf(v) === i).sort((a, b) => a - b);\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport abstract class BaseHttpRequest {\n\n  constructor(public readonly config: OpenAPIConfig) {}\n\n  public abstract request<T>(options: ApiRequestOptions): CancelablePromise<T>;\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport axios from 'axios';\nimport type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport FormData from 'form-data';\n\nimport { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nconst isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nconst isString = (value: any): value is string => {\n  return typeof value === 'string';\n};\n\nconst isStringWithValue = (value: any): value is string => {\n  return isString(value) && value !== '';\n};\n\nconst isBlob = (value: any): value is Blob => {\n  return (\n    typeof value === 'object' &&\n    typeof value.type === 'string' &&\n    typeof value.stream === 'function' &&\n    typeof value.arrayBuffer === 'function' &&\n    typeof value.constructor === 'function' &&\n    typeof value.constructor.name === 'string' &&\n    /^(Blob|File)$/.test(value.constructor.name) &&\n    /^(Blob|File)$/.test(value[Symbol.toStringTag])\n  );\n};\n\nconst isFormData = (value: any): value is FormData => {\n  return value instanceof FormData;\n};\n\nconst isSuccess = (status: number): boolean => {\n  return status >= 200 && status < 300;\n};\n\nconst base64 = (str: string): string => {\n  try {\n    return btoa(str);\n  } catch (err) {\n    // @ts-ignore\n    return Buffer.from(str).toString('base64');\n  }\n};\n\nconst getQueryString = (params: Record<string, any>): string => {\n  const qs: string[] = [];\n\n  const append = (key: string, value: any) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n  };\n\n  const process = (key: string, value: any) => {\n    if (isDefined(value)) {\n      if (Array.isArray(value)) {\n        value.forEach(v => {\n          process(key, v);\n        });\n      } else if (typeof value === 'object') {\n        Object.entries(value).forEach(([k, v]) => {\n          process(`${key}[${k}]`, v);\n        });\n      } else {\n        append(key, value);\n      }\n    }\n  };\n\n  Object.entries(params).forEach(([key, value]) => {\n    process(key, value);\n  });\n\n  if (qs.length > 0) {\n    return `?${qs.join('&')}`;\n  }\n\n  return '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n  const encoder = config.ENCODE_PATH || encodeURI;\n\n  const path = options.url\n    .replace('{api-version}', config.VERSION)\n    .replace(/{(.*?)}/g, (substring: string, group: string) => {\n      if (options.path?.hasOwnProperty(group)) {\n        return encoder(String(options.path[group]));\n      }\n      return substring;\n    });\n\n  const url = `${config.BASE}${path}`;\n  if (options.query) {\n    return `${url}${getQueryString(options.query)}`;\n  }\n  return url;\n};\n\nconst getFormData = (options: ApiRequestOptions): FormData | undefined => {\n  if (options.formData) {\n    const formData = new FormData();\n\n    const process = (key: string, value: any) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value);\n      } else {\n        formData.append(key, JSON.stringify(value));\n      }\n    };\n\n    Object.entries(options.formData)\n      .filter(([_, value]) => isDefined(value))\n      .forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach(v => process(key, v));\n        } else {\n          process(key, value);\n        }\n      });\n\n    return formData;\n  }\n  return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nconst resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n  if (typeof resolver === 'function') {\n    return (resolver as Resolver<T>)(options);\n  }\n  return resolver;\n};\n\nconst getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions, formData?: FormData): Promise<Record<string, string>> => {\n  const token = await resolve(options, config.TOKEN);\n  const username = await resolve(options, config.USERNAME);\n  const password = await resolve(options, config.PASSWORD);\n  const additionalHeaders = await resolve(options, config.HEADERS);\n  const formHeaders = typeof formData?.getHeaders === 'function' && formData?.getHeaders() || {}\n\n  const headers = Object.entries({\n    Accept: 'application/json',\n    ...additionalHeaders,\n    ...options.headers,\n    ...formHeaders,\n  })\n  .filter(([_, value]) => isDefined(value))\n  .reduce((headers, [key, value]) => ({\n    ...headers,\n    [key]: String(value),\n  }), {} as Record<string, string>);\n\n  if (isStringWithValue(token)) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  if (isStringWithValue(username) && isStringWithValue(password)) {\n    const credentials = base64(`${username}:${password}`);\n    headers['Authorization'] = `Basic ${credentials}`;\n  }\n\n  if (options.body) {\n    if (options.mediaType) {\n      headers['Content-Type'] = options.mediaType;\n    } else if (isBlob(options.body)) {\n      headers['Content-Type'] = options.body.type || 'application/octet-stream';\n    } else if (isString(options.body)) {\n      headers['Content-Type'] = 'text/plain';\n    } else if (!isFormData(options.body)) {\n      headers['Content-Type'] = 'application/json';\n    }\n  }\n\n  return headers;\n};\n\nconst getRequestBody = (options: ApiRequestOptions): any => {\n  if (options.body) {\n    return options.body;\n  }\n  return undefined;\n};\n\nconst sendRequest = async <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  url: string,\n  body: any,\n  formData: FormData | undefined,\n  headers: Record<string, string>,\n  onCancel: OnCancel\n): Promise<AxiosResponse<T>> => {\n  const source = axios.CancelToken.source();\n\n  const requestConfig: AxiosRequestConfig = {\n    url,\n    headers,\n    data: body ?? formData,\n    method: options.method,\n    withCredentials: config.WITH_CREDENTIALS,\n    cancelToken: source.token,\n  };\n\n  onCancel(() => source.cancel('The user aborted a request.'));\n\n  try {\n    return await axios.request(requestConfig);\n  } catch (error) {\n    const axiosError = error as AxiosError<T>;\n    if (axiosError.response) {\n      return axiosError.response;\n    }\n    throw error;\n  }\n};\n\nconst getResponseHeader = (response: AxiosResponse<any>, responseHeader?: string): string | undefined => {\n  if (responseHeader) {\n    const content = response.headers[responseHeader];\n    if (isString(content)) {\n      return content;\n    }\n  }\n  return undefined;\n};\n\nconst getResponseBody = (response: AxiosResponse<any>): any => {\n  if (response.status !== 204) {\n    return response.data;\n  }\n  return undefined;\n};\n\nconst catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n  const errors: Record<number, string> = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    403: 'Forbidden',\n    404: 'Not Found',\n    500: 'Internal Server Error',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    ...options.errors,\n  }\n\n  const error = errors[result.status];\n  if (error) {\n    throw new ApiError(options, result, error);\n  }\n\n  if (!result.ok) {\n    throw new ApiError(options, result, 'Generic Error');\n  }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\n  return new CancelablePromise(async (resolve, reject, onCancel) => {\n    try {\n      const url = getUrl(config, options);\n      const formData = getFormData(options);\n      const body = getRequestBody(options);\n      const headers = await getHeaders(config, options, formData);\n\n      if (!onCancel.isCancelled) {\n        const response = await sendRequest<T>(config, options, url, body, formData, headers, onCancel);\n        const responseBody = getResponseBody(response);\n        const responseHeader = getResponseHeader(response, options.responseHeader);\n\n        const result: ApiResult = {\n          url,\n          ok: isSuccess(response.status),\n          status: response.status,\n          statusText: response.statusText,\n          body: responseHeader ?? responseBody,\n        };\n\n        catchErrorCodes(options, result);\n\n        resolve(result.body);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n  public readonly url: string;\n  public readonly status: number;\n  public readonly statusText: string;\n  public readonly body: any;\n  public readonly request: ApiRequestOptions;\n\n  constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n    super(message);\n\n    this.name = 'ApiError';\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.body = response.body;\n    this.request = request;\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n  constructor(message: string) {\n    super(message);\n    this.name = 'CancelError';\n  }\n\n  public get isCancelled(): boolean {\n    return true;\n  }\n}\n\nexport interface OnCancel {\n  readonly isResolved: boolean;\n  readonly isRejected: boolean;\n  readonly isCancelled: boolean;\n\n  (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n  #isResolved: boolean;\n  #isRejected: boolean;\n  #isCancelled: boolean;\n  readonly #cancelHandlers: (() => void)[];\n  readonly #promise: Promise<T>;\n  #resolve?: (value: T | PromiseLike<T>) => void;\n  #reject?: (reason?: any) => void;\n\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason?: any) => void,\n      onCancel: OnCancel\n    ) => void\n  ) {\n    this.#isResolved = false;\n    this.#isRejected = false;\n    this.#isCancelled = false;\n    this.#cancelHandlers = [];\n    this.#promise = new Promise<T>((resolve, reject) => {\n      this.#resolve = resolve;\n      this.#reject = reject;\n\n      const onResolve = (value: T | PromiseLike<T>): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isResolved = true;\n        this.#resolve?.(value);\n      };\n\n      const onReject = (reason?: any): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isRejected = true;\n        this.#reject?.(reason);\n      };\n\n      const onCancel = (cancelHandler: () => void): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#cancelHandlers.push(cancelHandler);\n      };\n\n      Object.defineProperty(onCancel, 'isResolved', {\n        get: (): boolean => this.#isResolved,\n      });\n\n      Object.defineProperty(onCancel, 'isRejected', {\n        get: (): boolean => this.#isRejected,\n      });\n\n      Object.defineProperty(onCancel, 'isCancelled', {\n        get: (): boolean => this.#isCancelled,\n      });\n\n      return executor(onResolve, onReject, onCancel as OnCancel);\n    });\n  }\n\n   get [Symbol.toStringTag]() {\n            return \"Cancellable Promise\";\n     }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n  ): Promise<TResult1 | TResult2> {\n    return this.#promise.then(onFulfilled, onRejected);\n  }\n\n  public catch<TResult = never>(\n    onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n  ): Promise<T | TResult> {\n    return this.#promise.catch(onRejected);\n  }\n\n  public finally(onFinally?: (() => void) | null): Promise<T> {\n    return this.#promise.finally(onFinally);\n  }\n\n  public cancel(): void {\n    if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n      return;\n    }\n    this.#isCancelled = true;\n    if (this.#cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this.#cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn('Cancellation threw an error', error);\n        return;\n      }\n    }\n    this.#cancelHandlers.length = 0;\n    this.#reject?.(new CancelError('Request aborted'));\n  }\n\n  public get isCancelled(): boolean {\n    return this.#isCancelled;\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport { BaseHttpRequest } from './BaseHttpRequest';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\nimport { request as __request } from './request';\n\nexport class AxiosHttpRequest extends BaseHttpRequest {\n\n  constructor(config: OpenAPIConfig) {\n    super(config);\n  }\n\n  /**\n   * Request method\n   * @param options The request options from the service\n   * @returns CancelablePromise<T>\n   * @throws ApiError\n   */\n  public override request<T>(options: ApiRequestOptions): CancelablePromise<T> {\n    return __request(this.config, options);\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ChoiceEvent } from '../models/ChoiceEvent';\nimport type { CompletionEvent } from '../models/CompletionEvent';\nimport type { CompletionRequest } from '../models/CompletionRequest';\nimport type { CompletionResponse } from '../models/CompletionResponse';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class DefaultService {\n\n  constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n  /**\n   * Completions\n   * @param requestBody\n   * @returns CompletionResponse Successful Response\n   * @throws ApiError\n   */\n  public completionsV1CompletionsPost(\n    requestBody: CompletionRequest,\n  ): CancelablePromise<CompletionResponse> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/v1/completions',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        422: `Validation Error`,\n      },\n    });\n  }\n\n  /**\n   * Events\n   * @param requestBody\n   * @returns any Successful Response\n   * @throws ApiError\n   */\n  public eventsV1EventsPost(\n    requestBody: (ChoiceEvent | CompletionEvent),\n  ): CancelablePromise<any> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/v1/events',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        422: `Validation Error`,\n      },\n    });\n  }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { BaseHttpRequest } from './core/BaseHttpRequest';\nimport type { OpenAPIConfig } from './core/OpenAPI';\nimport { AxiosHttpRequest } from './core/AxiosHttpRequest';\n\nimport { DefaultService } from './services/DefaultService';\n\ntype HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;\n\nexport class TabbyApi {\n\n  public readonly default: DefaultService;\n\n  public readonly request: BaseHttpRequest;\n\n  constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = AxiosHttpRequest) {\n    this.request = new HttpRequest({\n      BASE: config?.BASE ?? '',\n      VERSION: config?.VERSION ?? '0.1.0',\n      WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\n      CREDENTIALS: config?.CREDENTIALS ?? 'include',\n      TOKEN: config?.TOKEN,\n      USERNAME: config?.USERNAME,\n      PASSWORD: config?.PASSWORD,\n      HEADERS: config?.HEADERS,\n      ENCODE_PATH: config?.ENCODE_PATH,\n    });\n\n    this.default = new DefaultService(this.request);\n  }\n}\n\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * An enumeration.\n */\nexport enum EventType {\n  COMPLETION = 'completion',\n  VIEW = 'view',\n  SELECT = 'select',\n}\n","export function sleep(milliseconds: number) {\n  return new Promise((r) => setTimeout(r, milliseconds));\n}\n\nexport function splitLines(input: string) {\n  return input.match(/.*(?:$|\\r?\\n)/g).filter(Boolean) // Split lines and keep newline character\n}\n\nexport function splitWords(input: string) {\n  return input.match(/\\w+|\\W+/g).filter(Boolean); // Split consecutive words and non-words\n}\n\nexport function isBlank(input: string) {\n  return input.trim().length === 0;\n}\n\nimport { CancelablePromise } from \"./generated\";\nexport function cancelable<T>(promise: Promise<T>, cancel: () => void): CancelablePromise<T> {\n  return new CancelablePromise((resolve, reject, onCancel) => {\n    promise\n      .then((resp: T) => {\n        resolve(resp);\n      })\n      .catch((err: Error) => {\n        reject(err);\n      });\n    onCancel(() => {\n      cancel();\n    });\n  });\n}\n","import {\n  CancelablePromise,\n  ChoiceEvent,\n  CompletionEvent,\n  CompletionResponse as ApiCompletionResponse,\n} from \"./generated\";\n\nexport type CompletionRequest = {\n  filepath: string;\n  language: string;\n  text: string;\n  position: number;\n};\n\nexport type CompletionResponse = ApiCompletionResponse;\n\nexport interface AgentFunction {\n  setServerUrl(url: string): string;\n  getServerUrl(): string;\n  getStatus(): \"connecting\" | \"ready\" | \"disconnected\";\n  getCompletions(request: CompletionRequest): CancelablePromise<CompletionResponse>;\n  postEvent(event: ChoiceEvent | CompletionEvent): CancelablePromise<any>;\n}\n\nexport type StatusChangedEvent = {\n  event: \"statusChanged\";\n  status: \"connecting\" | \"ready\" | \"disconnected\";\n};\n\nexport type AgentEvent = StatusChangedEvent;\nexport const agentEventNames: AgentEvent[\"event\"][] = [\"statusChanged\"];\n\nexport interface AgentEventEmitter {\n  on<T extends AgentEvent>(eventName: T[\"event\"], callback: (event: T) => void): this;\n}\n\nexport type Agent = AgentFunction & AgentEventEmitter;\n"],"mappings":"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","names":["import_axios","request","resolve","FormData","headers","axios","resolve","EventType","resolve","sizeOfObject","hashObject","axios","request","resolve","uuid"]}

{"version":3,"file":"index.min.js","mappings":"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","sources":["webpack://Tabby/webpack/universalModuleDefinition","webpack://Tabby/./generated/Tabby.ts","webpack://Tabby/./generated/core/ApiError.ts","webpack://Tabby/./generated/core/AxiosHttpRequest.ts","webpack://Tabby/./generated/core/BaseHttpRequest.ts","webpack://Tabby/./generated/core/CancelablePromise.ts","webpack://Tabby/./generated/core/OpenAPI.ts","webpack://Tabby/./generated/core/request.ts","webpack://Tabby/./generated/models/EventType.ts","webpack://Tabby/./generated/models/Language.ts","webpack://Tabby/./generated/services/DefaultService.ts","webpack://Tabby/external umd \"axios\"","webpack://Tabby/external umd \"form-data\"","webpack://Tabby/webpack/bootstrap","webpack://Tabby/./generated/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"axios\"), require(\"form-data\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"axios\", \"form-data\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tabby\"] = factory(require(\"axios\"), require(\"form-data\"));\n\telse\n\t\troot[\"Tabby\"] = factory(root[\"axios\"], root[\"form-data\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__300__, __WEBPACK_EXTERNAL_MODULE__258__) => {\nreturn ","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { BaseHttpRequest } from './core/BaseHttpRequest';\nimport type { OpenAPIConfig } from './core/OpenAPI';\nimport { AxiosHttpRequest } from './core/AxiosHttpRequest';\n\nimport { DefaultService } from './services/DefaultService';\n\ntype HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;\n\nexport class Tabby {\n\n  public readonly default: DefaultService;\n\n  public readonly request: BaseHttpRequest;\n\n  constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = AxiosHttpRequest) {\n    this.request = new HttpRequest({\n      BASE: config?.BASE ?? '',\n      VERSION: config?.VERSION ?? '0.1.0',\n      WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\n      CREDENTIALS: config?.CREDENTIALS ?? 'include',\n      TOKEN: config?.TOKEN,\n      USERNAME: config?.USERNAME,\n      PASSWORD: config?.PASSWORD,\n      HEADERS: config?.HEADERS,\n      ENCODE_PATH: config?.ENCODE_PATH,\n    });\n\n    this.default = new DefaultService(this.request);\n  }\n}\n\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n  public readonly url: string;\n  public readonly status: number;\n  public readonly statusText: string;\n  public readonly body: any;\n  public readonly request: ApiRequestOptions;\n\n  constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n    super(message);\n\n    this.name = 'ApiError';\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.body = response.body;\n    this.request = request;\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport { BaseHttpRequest } from './BaseHttpRequest';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\nimport { request as __request } from './request';\n\nexport class AxiosHttpRequest extends BaseHttpRequest {\n\n  constructor(config: OpenAPIConfig) {\n    super(config);\n  }\n\n  /**\n   * Request method\n   * @param options The request options from the service\n   * @returns CancelablePromise<T>\n   * @throws ApiError\n   */\n  public override request<T>(options: ApiRequestOptions): CancelablePromise<T> {\n    return __request(this.config, options);\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport abstract class BaseHttpRequest {\n\n  constructor(public readonly config: OpenAPIConfig) {}\n\n  public abstract request<T>(options: ApiRequestOptions): CancelablePromise<T>;\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n  constructor(message: string) {\n    super(message);\n    this.name = 'CancelError';\n  }\n\n  public get isCancelled(): boolean {\n    return true;\n  }\n}\n\nexport interface OnCancel {\n  readonly isResolved: boolean;\n  readonly isRejected: boolean;\n  readonly isCancelled: boolean;\n\n  (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n  #isResolved: boolean;\n  #isRejected: boolean;\n  #isCancelled: boolean;\n  readonly #cancelHandlers: (() => void)[];\n  readonly #promise: Promise<T>;\n  #resolve?: (value: T | PromiseLike<T>) => void;\n  #reject?: (reason?: any) => void;\n\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason?: any) => void,\n      onCancel: OnCancel\n    ) => void\n  ) {\n    this.#isResolved = false;\n    this.#isRejected = false;\n    this.#isCancelled = false;\n    this.#cancelHandlers = [];\n    this.#promise = new Promise<T>((resolve, reject) => {\n      this.#resolve = resolve;\n      this.#reject = reject;\n\n      const onResolve = (value: T | PromiseLike<T>): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isResolved = true;\n        this.#resolve?.(value);\n      };\n\n      const onReject = (reason?: any): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#isRejected = true;\n        this.#reject?.(reason);\n      };\n\n      const onCancel = (cancelHandler: () => void): void => {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n          return;\n        }\n        this.#cancelHandlers.push(cancelHandler);\n      };\n\n      Object.defineProperty(onCancel, 'isResolved', {\n        get: (): boolean => this.#isResolved,\n      });\n\n      Object.defineProperty(onCancel, 'isRejected', {\n        get: (): boolean => this.#isRejected,\n      });\n\n      Object.defineProperty(onCancel, 'isCancelled', {\n        get: (): boolean => this.#isCancelled,\n      });\n\n      return executor(onResolve, onReject, onCancel as OnCancel);\n    });\n  }\n\n   get [Symbol.toStringTag]() {\n            return \"Cancellable Promise\";\n     }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n  ): Promise<TResult1 | TResult2> {\n    return this.#promise.then(onFulfilled, onRejected);\n  }\n\n  public catch<TResult = never>(\n    onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n  ): Promise<T | TResult> {\n    return this.#promise.catch(onRejected);\n  }\n\n  public finally(onFinally?: (() => void) | null): Promise<T> {\n    return this.#promise.finally(onFinally);\n  }\n\n  public cancel(): void {\n    if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n      return;\n    }\n    this.#isCancelled = true;\n    if (this.#cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this.#cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn('Cancellation threw an error', error);\n        return;\n      }\n    }\n    this.#cancelHandlers.length = 0;\n    this.#reject?.(new CancelError('Request aborted'));\n  }\n\n  public get isCancelled(): boolean {\n    return this.#isCancelled;\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\ntype Headers = Record<string, string>;\n\nexport type OpenAPIConfig = {\n  BASE: string;\n  VERSION: string;\n  WITH_CREDENTIALS: boolean;\n  CREDENTIALS: 'include' | 'omit' | 'same-origin';\n  TOKEN?: string | Resolver<string>;\n  USERNAME?: string | Resolver<string>;\n  PASSWORD?: string | Resolver<string>;\n  HEADERS?: Headers | Resolver<Headers>;\n  ENCODE_PATH?: (path: string) => string;\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n  BASE: '',\n  VERSION: '0.1.0',\n  WITH_CREDENTIALS: false,\n  CREDENTIALS: 'include',\n  TOKEN: undefined,\n  USERNAME: undefined,\n  PASSWORD: undefined,\n  HEADERS: undefined,\n  ENCODE_PATH: undefined,\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport axios from 'axios';\nimport type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport FormData from 'form-data';\n\nimport { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nconst isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\n  return value !== undefined && value !== null;\n};\n\nconst isString = (value: any): value is string => {\n  return typeof value === 'string';\n};\n\nconst isStringWithValue = (value: any): value is string => {\n  return isString(value) && value !== '';\n};\n\nconst isBlob = (value: any): value is Blob => {\n  return (\n    typeof value === 'object' &&\n    typeof value.type === 'string' &&\n    typeof value.stream === 'function' &&\n    typeof value.arrayBuffer === 'function' &&\n    typeof value.constructor === 'function' &&\n    typeof value.constructor.name === 'string' &&\n    /^(Blob|File)$/.test(value.constructor.name) &&\n    /^(Blob|File)$/.test(value[Symbol.toStringTag])\n  );\n};\n\nconst isFormData = (value: any): value is FormData => {\n  return value instanceof FormData;\n};\n\nconst isSuccess = (status: number): boolean => {\n  return status >= 200 && status < 300;\n};\n\nconst base64 = (str: string): string => {\n  try {\n    return btoa(str);\n  } catch (err) {\n    // @ts-ignore\n    return Buffer.from(str).toString('base64');\n  }\n};\n\nconst getQueryString = (params: Record<string, any>): string => {\n  const qs: string[] = [];\n\n  const append = (key: string, value: any) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n  };\n\n  const process = (key: string, value: any) => {\n    if (isDefined(value)) {\n      if (Array.isArray(value)) {\n        value.forEach(v => {\n          process(key, v);\n        });\n      } else if (typeof value === 'object') {\n        Object.entries(value).forEach(([k, v]) => {\n          process(`${key}[${k}]`, v);\n        });\n      } else {\n        append(key, value);\n      }\n    }\n  };\n\n  Object.entries(params).forEach(([key, value]) => {\n    process(key, value);\n  });\n\n  if (qs.length > 0) {\n    return `?${qs.join('&')}`;\n  }\n\n  return '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n  const encoder = config.ENCODE_PATH || encodeURI;\n\n  const path = options.url\n    .replace('{api-version}', config.VERSION)\n    .replace(/{(.*?)}/g, (substring: string, group: string) => {\n      if (options.path?.hasOwnProperty(group)) {\n        return encoder(String(options.path[group]));\n      }\n      return substring;\n    });\n\n  const url = `${config.BASE}${path}`;\n  if (options.query) {\n    return `${url}${getQueryString(options.query)}`;\n  }\n  return url;\n};\n\nconst getFormData = (options: ApiRequestOptions): FormData | undefined => {\n  if (options.formData) {\n    const formData = new FormData();\n\n    const process = (key: string, value: any) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value);\n      } else {\n        formData.append(key, JSON.stringify(value));\n      }\n    };\n\n    Object.entries(options.formData)\n      .filter(([_, value]) => isDefined(value))\n      .forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach(v => process(key, v));\n        } else {\n          process(key, value);\n        }\n      });\n\n    return formData;\n  }\n  return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nconst resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n  if (typeof resolver === 'function') {\n    return (resolver as Resolver<T>)(options);\n  }\n  return resolver;\n};\n\nconst getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions, formData?: FormData): Promise<Record<string, string>> => {\n  const token = await resolve(options, config.TOKEN);\n  const username = await resolve(options, config.USERNAME);\n  const password = await resolve(options, config.PASSWORD);\n  const additionalHeaders = await resolve(options, config.HEADERS);\n  const formHeaders = typeof formData?.getHeaders === 'function' && formData?.getHeaders() || {}\n\n  const headers = Object.entries({\n    Accept: 'application/json',\n    ...additionalHeaders,\n    ...options.headers,\n    ...formHeaders,\n  })\n  .filter(([_, value]) => isDefined(value))\n  .reduce((headers, [key, value]) => ({\n    ...headers,\n    [key]: String(value),\n  }), {} as Record<string, string>);\n\n  if (isStringWithValue(token)) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  if (isStringWithValue(username) && isStringWithValue(password)) {\n    const credentials = base64(`${username}:${password}`);\n    headers['Authorization'] = `Basic ${credentials}`;\n  }\n\n  if (options.body) {\n    if (options.mediaType) {\n      headers['Content-Type'] = options.mediaType;\n    } else if (isBlob(options.body)) {\n      headers['Content-Type'] = options.body.type || 'application/octet-stream';\n    } else if (isString(options.body)) {\n      headers['Content-Type'] = 'text/plain';\n    } else if (!isFormData(options.body)) {\n      headers['Content-Type'] = 'application/json';\n    }\n  }\n\n  return headers;\n};\n\nconst getRequestBody = (options: ApiRequestOptions): any => {\n  if (options.body) {\n    return options.body;\n  }\n  return undefined;\n};\n\nconst sendRequest = async <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  url: string,\n  body: any,\n  formData: FormData | undefined,\n  headers: Record<string, string>,\n  onCancel: OnCancel\n): Promise<AxiosResponse<T>> => {\n  const source = axios.CancelToken.source();\n\n  const requestConfig: AxiosRequestConfig = {\n    url,\n    headers,\n    data: body ?? formData,\n    method: options.method,\n    withCredentials: config.WITH_CREDENTIALS,\n    cancelToken: source.token,\n  };\n\n  onCancel(() => source.cancel('The user aborted a request.'));\n\n  try {\n    return await axios.request(requestConfig);\n  } catch (error) {\n    const axiosError = error as AxiosError<T>;\n    if (axiosError.response) {\n      return axiosError.response;\n    }\n    throw error;\n  }\n};\n\nconst getResponseHeader = (response: AxiosResponse<any>, responseHeader?: string): string | undefined => {\n  if (responseHeader) {\n    const content = response.headers[responseHeader];\n    if (isString(content)) {\n      return content;\n    }\n  }\n  return undefined;\n};\n\nconst getResponseBody = (response: AxiosResponse<any>): any => {\n  if (response.status !== 204) {\n    return response.data;\n  }\n  return undefined;\n};\n\nconst catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n  const errors: Record<number, string> = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    403: 'Forbidden',\n    404: 'Not Found',\n    500: 'Internal Server Error',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    ...options.errors,\n  }\n\n  const error = errors[result.status];\n  if (error) {\n    throw new ApiError(options, result, error);\n  }\n\n  if (!result.ok) {\n    throw new ApiError(options, result, 'Generic Error');\n  }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\n  return new CancelablePromise(async (resolve, reject, onCancel) => {\n    try {\n      const url = getUrl(config, options);\n      const formData = getFormData(options);\n      const body = getRequestBody(options);\n      const headers = await getHeaders(config, options, formData);\n\n      if (!onCancel.isCancelled) {\n        const response = await sendRequest<T>(config, options, url, body, formData, headers, onCancel);\n        const responseBody = getResponseBody(response);\n        const responseHeader = getResponseHeader(response, options.responseHeader);\n\n        const result: ApiResult = {\n          url,\n          ok: isSuccess(response.status),\n          status: response.status,\n          statusText: response.statusText,\n          body: responseHeader ?? responseBody,\n        };\n\n        catchErrorCodes(options, result);\n\n        resolve(result.body);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * An enumeration.\n */\nexport enum EventType {\n  COMPLETION = 'completion',\n  VIEW = 'view',\n  SELECT = 'select',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * An enumeration.\n */\nexport enum Language {\n  UNKNOWN = 'unknown',\n  PYTHON = 'python',\n  JAVASCRIPT = 'javascript',\n  TYPESCRIPT = 'typescript',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ChoiceEvent } from '../models/ChoiceEvent';\nimport type { CompletionEvent } from '../models/CompletionEvent';\nimport type { CompletionRequest } from '../models/CompletionRequest';\nimport type { CompletionResponse } from '../models/CompletionResponse';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class DefaultService {\n\n  constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n  /**\n   * Completions\n   * @param requestBody\n   * @returns CompletionResponse Successful Response\n   * @throws ApiError\n   */\n  public completionsV1CompletionsPost(\n    requestBody: CompletionRequest,\n  ): CancelablePromise<CompletionResponse> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/v1/completions',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        422: `Validation Error`,\n      },\n    });\n  }\n\n  /**\n   * Events\n   * @param requestBody\n   * @returns any Successful Response\n   * @throws ApiError\n   */\n  public eventsV1EventsPost(\n    requestBody: (ChoiceEvent | CompletionEvent),\n  ): CancelablePromise<any> {\n    return this.httpRequest.request({\n      method: 'POST',\n      url: '/v1/events',\n      body: requestBody,\n      mediaType: 'application/json',\n      errors: {\n        422: `Validation Error`,\n      },\n    });\n  }\n\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__300__;","module.exports = __WEBPACK_EXTERNAL_MODULE__258__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport { Tabby } from './Tabby';\n\nexport { ApiError } from './core/ApiError';\nexport { BaseHttpRequest } from './core/BaseHttpRequest';\nexport { CancelablePromise, CancelError } from './core/CancelablePromise';\nexport { OpenAPI } from './core/OpenAPI';\nexport type { OpenAPIConfig } from './core/OpenAPI';\n\nexport type { Choice } from './models/Choice';\nexport type { ChoiceEvent } from './models/ChoiceEvent';\nexport type { CompletionEvent } from './models/CompletionEvent';\nexport type { CompletionRequest } from './models/CompletionRequest';\nexport type { CompletionResponse } from './models/CompletionResponse';\nexport { EventType } from './models/EventType';\nexport type { HTTPValidationError } from './models/HTTPValidationError';\nexport { Language } from './models/Language';\nexport type { ValidationError } from './models/ValidationError';\n\nexport { DefaultService } from './services/DefaultService';\n"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__300__","__WEBPACK_EXTERNAL_MODULE__258__","constructor","config","HttpRequest","AxiosHttpRequest","request","BASE","VERSION","WITH_CREDENTIALS","CREDENTIALS","TOKEN","USERNAME","PASSWORD","HEADERS","ENCODE_PATH","default","DefaultService","ApiError","Error","response","message","super","name","url","status","statusText","body","BaseHttpRequest","options","CancelError","isCancelled","CancelablePromise","executor","Promise","resolve","reject","onCancel","cancelHandler","push","Object","defineProperty","get","value","reason","Symbol","toStringTag","then","onFulfilled","onRejected","catch","finally","onFinally","cancel","length","error","console","warn","OpenAPI","undefined","isDefined","isString","isStringWithValue","isBlob","type","stream","arrayBuffer","test","async","resolver","getHeaders","formData","token","username","password","additionalHeaders","formHeaders","headers","entries","Accept","filter","_","reduce","key","String","credentials","str","btoa","err","Buffer","from","toString","base64","mediaType","encoder","encodeURI","path","replace","substring","group","hasOwnProperty","query","params","qs","process","Array","isArray","forEach","v","k","encodeURIComponent","append","join","getQueryString","getUrl","JSON","stringify","getFormData","getRequestBody","source","CancelToken","requestConfig","data","method","withCredentials","cancelToken","axiosError","sendRequest","responseBody","getResponseBody","responseHeader","content","getResponseHeader","result","ok","errors","catchErrorCodes","EventType","Language","httpRequest","completionsV1CompletionsPost","requestBody","eventsV1EventsPost","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","Tabby"],"sourceRoot":""}

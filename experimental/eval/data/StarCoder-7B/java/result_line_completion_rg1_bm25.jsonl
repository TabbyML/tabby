{"groundtruth": "int startAngle = ((Arc) object).getStartAngle();", "prediction": "\n\n                g.setColor(((Arc) object).getColor());\n                g.fillArc(x, y, width, height, ((Arc) object).getStartAngle(), ((Arc) object).getStopAngle());\n            } else if (object instanceof Line) {\n                int startX = ((Line) object).getStartX();\n                int startY = ((Line) object).getStartY();\n                int endX = ((Line) object).getEndX();\n                int endY = ((Line) object).getEndY();\n\n                g.setColor(((Line) object).getColor());\n                g.drawLine(startX, startY, end", "first_line_groundtruth": "int startAngle = ((Arc) object).getStartAngle();", "first_line_prediction": "", "match": 0}
{"groundtruth": "((Line) object).getColor());", "prediction": "Color.BLACK);\n                g.drawLine(x, y, endX, endY);\n            } else if (object instanceof Image) {\n                String fileName = ((Image) object).getFileName();\n\n                BufferedImage image = ImageLoader.loadImage(fileName);\n                g.drawImage(image, x, y, null);\n            } else if (object instanceof Text) {\n                String text = ((Text) object).getText();\n                Font font = ((Text) object).getFont();\n\n                g.setColor(((Text) object).getColor());\n                g.setFont(font);\n                g.drawString(text, x, y", "first_line_groundtruth": "((Line) object).getColor());", "first_line_prediction": "Color.BLACK);", "match": 0}
{"groundtruth": "(Arc) object).getStopAngle();", "prediction": "int) ((Arc) object).getStopAngle();\n\n                g.setColor(((Arc) object).getColor());\n                g.fillArc(x, y, width, height, startAngle, stopAngle);\n            } else if (object instanceof Line) {\n                int startX = ((Line) object).getStartX();\n                int startY = ((Line) object).getStartY();\n                int endX = ((Line) object).getEndX();\n                int endY = ((Line) object).getEndY();\n\n                g.setColor(((Line) object).getColor());\n                g.drawLine(startX, startY, end", "first_line_groundtruth": "(Arc) object).getStopAngle();", "first_line_prediction": "int) ((Arc) object).getStopAngle();", "match": 0}
{"groundtruth": "server.blockUntilShutdown();", "prediction": " Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n             server.stop();\n         }));\n        Thread.sleep(1000000000);\n    }", "first_line_groundtruth": "server.blockUntilShutdown();", "first_line_prediction": " Runtime.getRuntime().addShutdownHook(new Thread(() -> {", "match": 0}
{"groundtruth": "HttpClientUtil.sendGetRequest();", "prediction": " try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }\n            logger.info(\"Acknowledge message, messageId={}\", messageView.getMessageId());\n            messageView.ack();\n        });\n    }", "first_line_groundtruth": "HttpClientUtil.sendGetRequest();", "first_line_prediction": " try {", "match": 0}
{"groundtruth": "GreetingClient.start();", "prediction": " // do something here.\n             Thread.sleep(1000);\n        } finally {\n            span.end();\n        }\n        final GreetingClient greetingClient = new GreetingClient();\n        final GreetingOuterClass.SayHelloRequest request =\n                GreetingOuterClass.SayHelloRequest.newBuilder().setName(\"World\").build();\n        final GreetingOuterClass.SayHelloResponse response = greetingClient.sayHello(request);\n        System.out.println(\"Response: \" + response.getResponseContent());\n    }", "first_line_groundtruth": "GreetingClient.start();", "first_line_prediction": " // do something here.", "match": 0}
{"groundtruth": "RocketMqClients.CreatePushConsumer(messageView -> {", "prediction": " OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();\n         Tracer tracer = openTelemetry.getTracer(\"io.github.aaronai\");\n         Span span = tracer.spanBuilder(\"ProcessC\").startSpan();\n         try {\n             span.setAttribute(\"process\", \"ProcessC\");\n             span.setAttribute(\"process_id\", \"1\");\n             span.setAttribute(\"process_name\", \"ProcessC\");\n             span.setAttribute(\"process_version\", \"1.0.0\");\n             span.setAttribute(\"process_type\", \"java\");\n             span.setAttribute(\"process_pid\", \"1\");\n             span.setAttribute", "first_line_groundtruth": "RocketMqClients.CreatePushConsumer(messageView -> {", "first_line_prediction": " OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();", "match": 0}
{"groundtruth": "Producer producer = RocketMqClients.CreateProducer();", "prediction": " // 1. create producer\n            Producer producer = RocketMqClients.createProducer(NORMAL_TOPIC);\n            // 2. send message\n            SendReceipt sendReceipt = producer.send(request.getRequestContent().getBytes(StandardCharsets.UTF_8));\n            // 3. get message id\n            String messageId = sendReceipt.getMsgId();\n            logger.info(\"Send message, messageId={}\", messageId);\n            // 4. send response\n            responseObserver.onNext(io.github.aaronai.proto.GreetingOuterClass.SayHelloResponse.newBuilder()\n                    .setResponseContent(\"Hello \" + request.getRequest", "first_line_groundtruth": "Producer producer = RocketMqClients.CreateProducer();", "first_line_prediction": " // 1. create producer", "match": 0}
{"groundtruth": "systemMessage.setContent(systemprompt);", "prediction": " systemMessage.setText(systemprompt);\n            messages.add(systemMessage);\n\n            // User prompt\n            Message userMessage = new Message();\n            userMessage.setRole(\"user\");\n            userMessage.setText(update.message().text());\n            messages.add(userMessage);\n\n            // Add examples\n            for(String example : examples) {\n                Message message = new Message();\n                message.setRole(\"example\");\n                message.setText(example);\n                messages.add(message);\n            }\n\n            // Add presentation\n            if(presentation!=null && !presentation.isEmpty()) {\n                Message message = new Message();\n               ", "first_line_groundtruth": "systemMessage.setContent(systemprompt);", "first_line_prediction": " systemMessage.setText(systemprompt);", "match": 0}
{"groundtruth": "\"Contador de tokens: %d\",gptService.getNumTokens());", "prediction": "\n                \"Tokens consumed: %d\",\n                this.gptService.getTokensConsumed()\n        );\n        sendReply(update, message);\n    }", "first_line_groundtruth": "\"Contador de tokens: %d\",gptService.getNumTokens());", "first_line_prediction": "", "match": 0}
{"groundtruth": "chatRequest.setMaxTokens(maxtokens);", "prediction": " // chatRequest.setPrompt(systemprompt);\n            chatRequest.setPrompt(presentation);\n            chatRequest.setStream(false);\n            chatRequest.setCompletion(true);\n            chatRequest.setEngine(\"davinci\");\n            chatRequest.setPrompt(update.message().text());\n            chatRequest.setExample(examples);\n            chatRequest.setStop(false);\n            chatRequest.setStream(false);\n            chatRequest.setPresence(false);\n            chatRequest.setMaxTokens(maxtokens);\n            chatRequest.setPresence(false);\n            chatRequest.setStream(false);", "first_line_groundtruth": "chatRequest.setMaxTokens(maxtokens);", "first_line_prediction": " // chatRequest.setPrompt(systemprompt);", "match": 0}
{"groundtruth": "chatRequest.setModel(model);", "prediction": " // Get the chat object from the update\n            Chat chat = update.message().chat();\n            chatRequest.setChat(chat);\n            chatRequest.setPrompt(systemprompt);\n            chatRequest.setEngine(model);\n            chatRequest.setTemperature(temperature);\n            chatRequest.setMaxTokens(maxtokens);\n            chatRequest.setStream(true);\n            chatRequest.setPresence(false);\n            chatRequest.setStop(false);\n            chatRequest.setTruncate(false);\n            chatRequest.setPresence(false);\n            chatRequest.setPresence(false);\n            chatRequest.setPresence(", "first_line_groundtruth": "chatRequest.setModel(model);", "first_line_prediction": " // Get the chat object from the update", "match": 0}
{"groundtruth": "systemMessage.setRole(\"system\");", "prediction": " systemMessage.setText(systemprompt);\n             messages.add(systemMessage);", "first_line_groundtruth": "systemMessage.setRole(\"system\");", "first_line_prediction": " systemMessage.setText(systemprompt);", "match": 0}
{"groundtruth": "userMessage.setContent(this.presentation);", "prediction": " // Add the custom message to the list of messages\n            userMessage.setContent(text);\n            messages.add(userMessage);\n\n            // set messages to the request\n            chatRequest.setMessages(messages);\n\n            // Send synchronous request to the OpenAI Api\n            response = client.getCompletion(chatRequest);\n            // Incremet token counter\n            ntokens = ntokens + response.getUsage().getTotalTokens();\n\n            // Return text to be sent to the user\n            return response.getChoices().get(0).getMessage().getContent();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"I'm", "first_line_groundtruth": "userMessage.setContent(this.presentation);", "first_line_prediction": " // Add the custom message to the list of messages", "match": 0}
{"groundtruth": "exampleMessage.setRole(role.toLowerCase());", "prediction": " exampleMessage.setRole(role);\n                     exampleMessage.setContent(content);\n                     results.add(exampleMessage);\n                }\n            } catch (Exception e) {\n                log.error(\"Error parsing example: \" + example);\n            }\n        }\n        return results;\n    }\n\n    /**\n     * This method checks if the user is authorized to talk to the bot.\n     * @param update the update object containing the user input\n     * @return true if the user is authorized, false otherwise\n     */\n    private boolean checkPermission(Update update) {\n        if(this.whiteSet==null) {\n            return true;\n       ", "first_line_groundtruth": "exampleMessage.setRole(role.toLowerCase());", "first_line_prediction": " exampleMessage.setRole(role);", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u63d0\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u662f\uff1a\" + i);", "prediction": " Log.d(TAG, \"extractFirstIntFromString: \" + i);\n        }\n        return i;\n    }\n\n    // \u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u7b2c\u4e00\u4e2a\u6574\u6570\n    public static String extractFirstIntFromString(String str, int defaultValue){\n        Pattern p = Pattern.compile(\"\\\\d+\");\n        Matcher m = p.matcher(str);\n\n        int i = defaultValue;\n        if (m.find()){\n            i = Integer.parseInt(m.group());\n             Log.d(TAG, \"extractFirstIntFromString: \" + i);\n        }\n        return String.valueOf(i);\n    }\n\n    // \u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u63d0\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u662f\uff1a\" + i);", "first_line_prediction": " Log.d(TAG, \"extractFirstIntFromString: \" + i);", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");", "prediction": " // \u70b9\u51fb\u201c\u6211\u7684\u201d\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u201c\u6211\u7684\u201d\");\n        List<AccessibilityNodeInfo> byText = AccUtils.findElementListByContainText(\"\u6211\u7684\");\n        if (byText != null) {\n            AccUtils.clickNodeByPoint(byText.get(0));\n            AccUtils.timeSleep(waitOneSecond);\n        }\n\n        // \u70b9\u51fb\u201c\u6211\u7684\u201d\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u201c\u6211\u7684\u201d\");\n        byText = AccUtils.findElementListByContainText(\"\u6211\u7684\");\n        if (byText != null) {\n            AccUtils.clickNodeByPoint(", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");", "first_line_prediction": " // \u70b9\u51fb\u201c\u6211\u7684\u201d", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5f00\");", "prediction": " // \u70b9\u51fb\u5de5\u4f5c\u53f0\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(3000);\n\n        // \u70b9\u51fb\u5de5\u4f5c\u53f0\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(3000);\n\n        // \u70b9\u51fb\u5de5\u4f5c\u53f0\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(3000);\n\n        // \u70b9\u51fb\u5de5\u4f5c\u53f0\n        AccUtils.clickParentCanClick(AccUtils.", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5f00\");", "first_line_prediction": " // \u70b9\u51fb\u5de5\u4f5c\u53f0", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");", "prediction": " // \u6253\u5f00", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");", "first_line_prediction": " // \u6253\u5f00", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");", "prediction": " //Rect(425, 1280 - 656, 1362); packageName: com.alibaba.android.rimet; className: android.view.View; text: \u8003", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");", "first_line_prediction": " //Rect(425, 1280 - 656, 1362); packageName: com.alibaba.android.rimet; className: android.view.View; text: \u8003", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6682\u65f6\u4e0d\");", "prediction": " // \u70b9\u51fb\u7b7e\u5230\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u7b7e\u5230\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u7b7e\u5230\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u7b7e\u5230\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u7b7e\u5230\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u7b7e\u5230\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u7b7e\u5230\"));\n        AccUtils.timeSleep", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6682\u65f6\u4e0d\");", "first_line_prediction": " // \u70b9\u51fb\u7b7e\u5230", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u6807\u9898 => \" + videoDesc);", "prediction": " if (videoDesc != null) {\n                 AccUtils.printLogMsg(\"\u89c6\u9891\u6807\u9898\uff1a\" + videoDesc);\n             }\n            AccUtils.timeSleep(waitTwoSecond);\n        }\n    }\n\n    /**\n     * \u968f\u673a\u83b7\u53d6\u89c6\u9891\u6807\u9898\n     * @return\n     */\n    private String currentVideoDesc() {\n        List<AccessibilityNodeInfo> list = AccUtils.findElementListByText(\"\u89c6\u9891\");\n        if (list != null && list.size() > 0) {\n            Random random = new Random();\n            int index = random.nextInt(list.size());\n            AccessibilityNodeInfo nodeInfo = list.get(index);\n           ", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u6807\u9898 => \" + videoDesc);", "first_line_prediction": " if (videoDesc != null) {", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");", "prediction": " // \u70b9\u51fb\u201c\u6211\u201d\n        AccessibilityNodeInfo elementByText = AccUtils.findElementByText(\"\u6211\");\n        if (elementByText != null) {\n            AccUtils.clickNodeByPoint(elementByText);\n        }\n        AccUtils.timeSleep(500);\n\n        // \u70b9\u51fb\u201c\u6211\u201d\n        elementByText = AccUtils.findElementByText(\"\u6211\");\n        if (elementByText != null) {\n            AccUtils.clickNodeByPoint(elementByText);\n        }\n        AccUtils.timeSleep(500);\n\n        // \u70b9\u51fb\u201c\u6211\u201d\n        elementByText = Acc", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");", "first_line_prediction": " // \u70b9\u51fb\u201c\u6211\u201d", "match": 0}
{"groundtruth": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));", "prediction": " List<AccessibilityNodeInfo> byText = AccUtils.findElementListByContainText(\"\u5de5\u4f5c\u53f0\");\n        if (byText != null) {\n            AccUtils.clickNodeByPoint(byText.get(0));\n            AccUtils.timeSleep(waitOneSecond);\n        }\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        List<AccessibilityNodeInfo> byText1 = AccUtils.findElementListByContainText(\"\u5de5\u4f5c\u53f0\");\n        if (byText1 != null) {\n            AccUtils.clickNodeByPoint(byText1.get(0));\n            AccUtils.timeSleep(waitOneSecond);", "first_line_groundtruth": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));", "first_line_prediction": " List<AccessibilityNodeInfo> byText = AccUtils.findElementListByContainText(\"\u5de5\u4f5c\u53f0\");", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u597d\u7684\");", "prediction": " // \u70b9\u51fb\u8003", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u597d\u7684\");", "first_line_prediction": " // \u70b9\u51fb\u8003", "match": 0}
{"groundtruth": "dyTaskService.main();", "prediction": " dyTaskService.main();\n                } catch (Exception e) {\n                    AccUtils.printLogMsg(ExceptionUtil.toString(e)); //\u6253\u5370\u5f02\u5e38\u4fe1\u606f\u5230\u60ac", "first_line_groundtruth": "dyTaskService.main();", "first_line_prediction": " dyTaskService.main();", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u5411\u4e0b\u6ed1\u52a8\");", "prediction": " // \u70b9\u6389\u5f39\u7a97\n            AccessibilityNodeInfo elementByText1 = AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");\n            if (elementByText1 != null) {\n                AccUtils.clickNodeByPoint(elementByText1);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n            AccessibilityNodeInfo element1 = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");\n            if (element1 != null) {\n                AccUtils.clickNodeByPoint(element1);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n            AccessibilityNodeInfo closeNode1 = AccUtils.findElementByText", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u5411\u4e0b\u6ed1\u52a8\");", "first_line_prediction": " // \u70b9\u6389\u5f39\u7a97", "match": 0}
{"groundtruth": "= AccUtils.findElementListByContainText(\"\u6253\u5361\");", "prediction": " = AccUtils.findNodesByContainText(\"\u4e0a\u73ed\u6253\u5361\");\n        if (listByContainText.size() > 0) {\n            AccUtils.clickNodeByPoint(listByContainText.get(0));\n        }else {\n            AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u4e0a\u73ed\u6253\u5361\"));\n        }\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u786e\u5b9a\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u786e\u5b9a\"));\n        AccUtils.timeSleep(3000);", "first_line_groundtruth": "= AccUtils.findElementListByContainText(\"\u6253\u5361\");", "first_line_prediction": " = AccUtils.findNodesByContainText(\"\u4e0a\u73ed\u6253\u5361\");", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u6253\u5361\u5b8c\u6210\uff0c\u8fd4\u56de\u684c\u9762\");", "prediction": " //Rect(425, 1280 - 656, 1362); packageName: com.alibaba.android.rimet; className: android.view.View; text: \u4e0a\u73ed\u6253\u5361;\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");\n        listByContainText = AccUtils.findElementListByContainText(\"\u6253\u5361\");\n        if (listByContainText != null && listByContainText.size() > 0) {\n            for (AccessibilityNodeInfo nodeInfo : listByContainText) {\n                Rect rect = new Rect();\n                nodeInfo.getBounds", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u6253\u5361\u5b8c\u6210\uff0c\u8fd4\u56de\u684c\u9762\");", "first_line_prediction": " //Rect(425, 1280 - 656, 1362); packageName: com.alibaba.android.rimet; className: android.view.View; text: \u4e0a\u73ed\u6253\u5361;", "match": 0}
{"groundtruth": "TinkerManager.setUpgradeRetryEnable(true);", "prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c\n        Log.i(TAG, \"onBaseContextAttached: \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\");\n        Variable.context = getApplication().getBaseContext();\n    }\n\n    @Override\n    public void onBaseContextDetached() {\n        super.onBaseContextDetached();\n        TinkerManager.setTinkerApplicationLike(null);\n    }", "first_line_groundtruth": "TinkerManager.setUpgradeRetryEnable(true);", "first_line_prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c", "match": 0}
{"groundtruth": "AccUtils.findElementByText(\"\u8003\u52e4\u6253\u5361\"));", "prediction": "AccUtils.findElementByText(\"\u8003", "first_line_groundtruth": "AccUtils.findElementByText(\"\u8003\u52e4\u6253\u5361\"));", "first_line_prediction": "AccUtils.findElementByText(\"\u8003", "match": 0}
{"groundtruth": "TinkerManager.installTinker(this);", "prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c\n        Log.i(TAG, \"onBaseContextAttached: \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\");\n    }", "first_line_groundtruth": "TinkerManager.installTinker(this);", "first_line_prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c", "match": 0}
{"groundtruth": "= AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");", "prediction": " = AccUtils.findElementByText(\"\u70b9\u6389\");\n            if (elementByText != null) {\n                AccUtils.click(elementByText);\n                AccUtils.timeSleep(waitTwoSecond);\n            }\n\n            // \u70b9\u6389\u5f39\u7a97\n            AccessibilityNodeInfo elementByText2  = AccUtils.findElementByText(\"\u70b9\u6389\");\n            if (elementByText2 != null) {\n                AccUtils.click(elementByText2);\n                AccUtils.timeSleep(waitTwoSecond);\n            }\n\n            // \u70b9\u6389\u5f39\u7a97\n            AccessibilityNodeInfo elementByText3  = AccUtils.findElementByText(\"", "first_line_groundtruth": "= AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");", "first_line_prediction": " = AccUtils.findElementByText(\"\u70b9\u6389\");", "match": 0}
{"groundtruth": "element = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");", "prediction": " elementByText1 = AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");\n            if (elementByText1 != null) {\n                AccUtils.clickNodeByPoint(elementByText1);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n\n            // \u70b9\u6389\u5f39\u7a97\n            AccessibilityNodeInfo elementByText2 = AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");\n            if (elementByText2 != null) {\n                AccUtils.clickNodeByPoint(elementByText2);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n            AccessibilityNodeInfo  elementByText3 = Acc", "first_line_groundtruth": "element = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");", "first_line_prediction": " elementByText1 = AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"open dy App\");", "prediction": " AccUtils.printLogMsg(\"\u6253\u5f00", "first_line_groundtruth": "AccUtils.printLogMsg(\"open dy App\");", "first_line_prediction": " AccUtils.printLogMsg(\"\u6253\u5f00", "match": 0}
{"groundtruth": "AccUtils.openApp(\"\u6296\u97f3\");", "prediction": " AccUtils.startApplication(Variable.context, \"com.alibaba.android.rimet\");\n        AccUtils.timeSleep(7000);\n        AccUtils.printLogMsg(\"return to initial state\");\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n        AccUtils.printLogMsg(\"open dy App\");\n        AccUtils.startApplication(Variable.context, \"com.alibaba.android.rimet\");\n        AccUtils.timeSleep(7000);\n        Acc", "first_line_groundtruth": "AccUtils.openApp(\"\u6296\u97f3\");", "first_line_prediction": " AccUtils.startApplication(Variable.context, \"com.alibaba.android.rimet\");", "match": 0}
{"groundtruth": "TinkerManager.setTinkerApplicationLike(this);", "prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c\n        Log.i(TAG, \"onBaseContextAttached: \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\");\n        Variable.context = getApplication().getBaseContext();\n    }\n\n    @Override\n    public void onBaseContextDetached() {\n        super.onBaseContextDetached();\n        Variable.context = null;\n    }\n\n    @Override\n    public void onLowMemory() {\n        super.onLowMemory();\n        Log.i(TAG, \"onLowMemory: \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\");\n    }\n\n    @Override\n    public void onTrimMemory(int level) {\n        super.onTrimMemory(level", "first_line_groundtruth": "TinkerManager.setTinkerApplicationLike(this);", "first_line_prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c", "match": 0}
{"groundtruth": "Utils.isBackground()) {", "prediction": "result.isSuccess) {\n                    TinkerServiceInternals.killTinkerPatchServiceProcess(getApplicationContext());\n                }\n            }\n        }\n    }\n\n    private void deleteRawPatchFile(File rawPatchFile) {\n        if (rawPatchFile.exists()) {\n            rawPatchFile.delete();\n        }\n    }\n\n    private boolean checkIfNeedKill(PatchResult result) {\n        if (result.isSuccess) {\n            return true;\n        }\n        if (result.isSuccess && result.isUpgradePatch) {\n            return true;\n        }\n        if (result.isSuccess && result.isUpgradePatch && result", "first_line_groundtruth": "Utils.isBackground()) {", "first_line_prediction": "result.isSuccess) {", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u627e\u5230\u6574\u6570\uff01\");", "prediction": " AccUtils.printLogMsg(\"\u63d0\u53d6\u4e0d\u5230\u7b2c\u4e00\u4e2a\u6574\u6570\");\n        }\n        return i;\n    }\n\n    // \u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u7b2c\u4e00\u4e2a\u6574\u6570\n    public static String extractFirstIntFromString(String str, String pattern){\n        Pattern p = Pattern.compile(pattern);\n        Matcher m = p.matcher(str);\n\n        String i = \"\";\n        if (m.find()){\n            i = m.group();\n            AccUtils.printLogMsg(\"\u63d0\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u662f\uff1a\" + i);\n        } else {\n             AccUtils.printLogMsg(\"\u63d0\u53d6\u4e0d\u5230\u7b2c\u4e00\u4e2a\u6574\u6570\");\n        }\n        return i;\n    }", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u627e\u5230\u6574\u6570\uff01\");", "first_line_prediction": " AccUtils.printLogMsg(\"\u63d0\u53d6\u4e0d\u5230\u7b2c\u4e00\u4e2a\u6574\u6570\");", "match": 0}
{"groundtruth": "WindowPermissionCheck.checkPermission(this);", "prediction": " WindowPermissionCheck.checkPermission(this);\n        if (!permission) {\n            Toast.makeText(this, \"\u8bf7\u5f00\u542f\u6743\u9650\", Toast.LENGTH_SHORT).show();\n            finish();\n        }\n\n        // \u6ce8\u518c\u5e7f\u64ad\n        registerReceiver(mReceiver, new IntentFilter(MyService.ACTION_START_SERVICE));\n\n        // \u6ce8\u518c\u5e7f\u64ad\n        registerReceiver(mReceiver, new IntentFilter(MyService.ACTION_STOP_SERVICE));\n\n        // \u6ce8\u518c\u5e7f\u64ad\n        registerReceiver(mReceiver, new IntentFilter(MyService.ACTION_UPDATE_SERVICE));\n\n        // \u6ce8\u518c\u5e7f\u64ad\n        registerReceiver(", "first_line_groundtruth": "WindowPermissionCheck.checkPermission(this);", "first_line_prediction": " WindowPermissionCheck.checkPermission(this);", "match": 0}
{"groundtruth": "AccUtils.timeSleep(3000);", "prediction": "", "first_line_groundtruth": "AccUtils.timeSleep(3000);", "first_line_prediction": "", "match": 0}
{"groundtruth": "ntokens = ntokens + response.getUsage().getTotalTokens();", "prediction": " this.ntokens += response.getTokens();\n\n        } catch (Exception e) {\n            log.error(\"Error while sending message to OpenAI API\", e);\n            response = new ChatResponse();\n            response.setTokens(0);\n            response.setMessages(new ArrayList<>());\n            response.setPrompt(\"\");\n            response.setChoices(new ArrayList<>());\n        }\n\n        // Compose response\n        String responseText = \"\";\n        for(Message message : response.getMessages()) {\n            if(message.getRole().equals(\"system\")) {\n                responseText += message.getContent();\n            } else {\n                responseText +=", "first_line_groundtruth": "ntokens = ntokens + response.getUsage().getTotalTokens();", "first_line_prediction": " this.ntokens += response.getTokens();", "match": 0}
{"groundtruth": "AccUtils.timeSleep(6000);", "prediction": " AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u8003", "first_line_groundtruth": "AccUtils.timeSleep(6000);", "first_line_prediction": " AccUtils.timeSleep(3000);", "match": 0}
{"groundtruth": "out.println(filme.getNome()+\" - \"+filme.getDuracao());", "prediction": "out.println(\"O filme \"+filme.getNome()+\" est\u00e1 sendo exibido\");\n            }\n        }\n    }\n    public void stop(){\n        if(emPlay){\n            emPlay = false;\n            System.out.println(\"O filme \"+filme.getNome()+\" est\u00e1 parado\");\n        }\n    }", "first_line_groundtruth": "out.println(filme.getNome()+\" - \"+filme.getDuracao());", "first_line_prediction": "out.println(\"O filme \"+filme.getNome()+\" est\u00e1 sendo exibido\");", "match": 0}
{"groundtruth": ".setContent(response.getChoices().get(0).getMessage().getContent());", "prediction": ".setContent(response.getCompletions().get(0).getText());\n                userContext.get(update.message().from().id()).add(assistantMessage);\n            }\n\n            // Return the response\n            return response.getCompletions().get(0).getText();\n\n        } catch (Exception e) {\n            log.error(\"Error while sending message to OpenAI API\", e);\n            return \"I'm sorry but I can't talk to you, please try again later.\";\n        }\n    }\n\n    /**\n     * This method checks if the user is authorized to talk to the bot\n     * based on the whitelist.\n     *", "first_line_groundtruth": ".setContent(response.getChoices().get(0).getMessage().getContent());", "first_line_prediction": ".setContent(response.getCompletions().get(0).getText());", "match": 0}
{"groundtruth": "AccUtils.timeSleep(2000);", "prediction": " // \u8fdb\u5165\u9996\u9875\n        AccUtils.printLogMsg(\"\u8fdb\u5165\u9996\u9875\");\n        AccUtils.clickNodeByText(\"\u9996\u9875\");\n        AccUtils.timeSleep(5000);\n\n        // \u8fdb\u5165\u6211\u7684\n        AccUtils.printLogMsg(\"\u8fdb\u5165\u6211\u7684\");\n        AccUtils.clickNodeByText(\"\u6211\u7684\");\n        AccUtils.timeSleep(5000);\n\n        // \u8fdb\u5165\u6211\u7684\u65e5\u5386\n        AccUtils.printLogMsg(\"\u8fdb\u5165\u6211\u7684\u65e5\u5386\");\n        AccUtils.clickNodeByText(\"\u6211\u7684\u65e5\u5386\");\n        AccUtils.timeSleep(5000);\n\n        // \u8fdb\u5165\u6211\u7684\u65e5", "first_line_groundtruth": "AccUtils.timeSleep(2000);", "first_line_prediction": " // \u8fdb\u5165\u9996\u9875", "match": 0}
{"groundtruth": "itempedido.getPreco();", "prediction": " itempedido.getPreco();\n        }\n        return total;\n    }\n\n    public int getCodigo() {\n        return codigo;\n    }\n\n    public void setCodigo(int codigo) {\n        this.codigo = codigo;\n    }", "first_line_groundtruth": "itempedido.getPreco();", "first_line_prediction": " itempedido.getPreco();", "match": 0}
{"groundtruth": "AccUtils.timeSleep(7000);", "prediction": " // \u7b49\u5f85\u542f\u52a8\n        AccUtils.timeSleep(waitSixSecond + waitTwoSecond);\n        for (int i = 0; i < 100; i++) {\n            // \u70b9\u6389\u5f39\u7a97\n            AccessibilityNodeInfo elementByText = AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");\n            if (elementByText != null) {\n                AccUtils.clickNodeByPoint(elementByText);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n            AccessibilityNodeInfo element = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");\n            if (element != null) {\n                AccUtils.", "first_line_groundtruth": "AccUtils.timeSleep(7000);", "first_line_prediction": " // \u7b49\u5f85\u542f\u52a8", "match": 0}
{"groundtruth": "= meuDVD.removerFilme();", "prediction": " = meuDVD.devolverFilme();\n        System.out.println(filmeDevolvido);\n        System.out.println(meuDVD);\n        meuDVD.ligar();\n        meuDVD.inserirFilme(filme1);\n        meuDVD.inserirFilme(filme2);\n        meuDVD.inserirFilme(filme1);\n        meuDVD.inserirFilme(filme2);\n        meuDVD.inserirFilme(filme1);\n        meuDVD.inser", "first_line_groundtruth": "= meuDVD.removerFilme();", "first_line_prediction": " = meuDVD.devolverFilme();", "match": 0}
{"groundtruth": "returnCode = Utils.checkForPatchRecover(NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN, maxMemory);", "prediction": " return returnCode;\n        }\n\n        if (returnCode == ShareConstants.ERROR_RECOVER_INSERVICE) {\n            return returnCode;\n        }\n\n        if (returnCode == ShareConstants.ERROR_PATCH_CHECK_FAIL) {\n            return returnCode;\n        }\n\n        if (returnCode == ShareConstants.ERROR_PATCH_CHECK_FAIL_NEW_PATCH_RESTRICTION) {\n            return returnCode;\n        }\n\n        if (returnCode == ShareConstants.ERROR_PATCH_CHECK_FAIL_NEW_PATCH_RESTRICTION_SPACE_SIZE) {\n            return returnCode;\n        }\n\n        if", "first_line_groundtruth": "returnCode = Utils.checkForPatchRecover(NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN, maxMemory);", "first_line_prediction": " return returnCode;", "match": 0}
{"groundtruth": "meuDVD.aumentarVolume();", "prediction": "\n        \n    }", "first_line_groundtruth": "meuDVD.aumentarVolume();", "first_line_prediction": "", "match": 0}
{"groundtruth": "(filme.getNome()+\" - \"+filme.getDuracao());", "prediction": "(\"O filme \"+filme.getNome()+\" est\u00e1 sendo exibido\");\n            }\n        }\n    }\n    public void stop(){\n        if(emPlay){\n            emPlay = false;\n            System.out.println(\"O filme \"+filme.getNome()+\" est\u00e1 parado\");\n        }\n    }", "first_line_groundtruth": "(filme.getNome()+\" - \"+filme.getDuracao());", "first_line_prediction": "(\"O filme \"+filme.getNome()+\" est\u00e1 sendo exibido\");", "match": 0}
{"groundtruth": "meuDVD.diminuirVolume();", "prediction": "\n        \n    }", "first_line_groundtruth": "meuDVD.diminuirVolume();", "first_line_prediction": "", "match": 0}
{"groundtruth": "meuDVD.play();", "prediction": "\n        \n    }", "first_line_groundtruth": "meuDVD.play();", "first_line_prediction": "", "match": 0}
{"groundtruth": "this.ipList.put(Sneaky.stringifyAddress(address), System.currentTimeMillis());", "prediction": " this.ipList.put(((InetSocketAddress) address).getAddress().getHostAddress(), System.currentTimeMillis());\n    }\n\n    public boolean isAllowed(SocketAddress address) {\n        return this.ipList.containsKey(((InetSocketAddress) address).getAddress().getHostAddress());\n    }", "first_line_groundtruth": "this.ipList.put(Sneaky.stringifyAddress(address), System.currentTimeMillis());", "first_line_prediction": " this.ipList.put(((InetSocketAddress) address).getAddress().getHostAddress(), System.currentTimeMillis());", "match": 0}
{"groundtruth": "= translator.detectLanguage(questionInput);", "prediction": " = translator.detectLanguage(questionInput);\n                if (!SUPPORTED_LANGUAGES.contains(sourceLang)) {\n                    needTranslate = true;\n                }\n            }\n\n            if (needTranslate) {\n                questionInput = translator.translate(sourceLang, middleLanguage(), questionInput);\n            }\n\n            String questionInputEncoded = URLEncoder.encode(questionInput, StandardCharsets.UTF_8.toString());\n            String url = STREAM_GENERATE_URL + \"?reqid=\" + reqid + \"&snim0e=\" + snim0e + \"&conversationId=\" + conversationId + \"&responseId=\" +", "first_line_groundtruth": "= translator.detectLanguage(questionInput);", "first_line_prediction": " = translator.detectLanguage(questionInput);", "match": 0}
{"groundtruth": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);", "prediction": " = translator.translate(translator.middleLanguage(), sourceLang, answerOutput);\n            }\n\n            return Answer.builder()\n                .answer(answerOutput)\n                .sourceLang(sourceLang)\n                .build();\n        } catch (IOException e) {\n            log.error(\"Error while getting answer\", e);\n            throw new BardApiException(\"Error while getting answer\", e);\n        }\n    }\n\n    private String fetchSNlM0e() throws IOException {\n        Map<String, String> params = new LinkedHashMap<>();\n        params.put(\"bl\", \"boq_assistant-bard-web-server_20", "first_line_groundtruth": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);", "first_line_prediction": " = translator.translate(translator.middleLanguage(), sourceLang, answerOutput);", "match": 0}
{"groundtruth": "= translator.translate(sourceLang, translator.middleLanguage(), questionInput);", "prediction": " = translator.translate(questionInput, sourceLang, \"en\");\n                }\n            }\n\n            String targetLang = \"en\";\n            if (needTranslate) {\n                targetLang = translator.detectLanguage(questionInput);\n            }\n\n            String rawText = questionInput;\n            if (needTranslate) {\n                rawText = translator.translate(questionInput, sourceLang, targetLang);\n            }\n\n            String url = STREAM_GENERATE_URL + \"?reqid=\" + reqid + \"&snim0e=\" + snim0e + \"&conversationId=\" + conversationId + \"&responseId=\" + responseId", "first_line_groundtruth": "= translator.translate(sourceLang, translator.middleLanguage(), questionInput);", "first_line_prediction": " = translator.translate(questionInput, sourceLang, \"en\");", "match": 0}
{"groundtruth": "fill(WebActions.decrypt(password));", "prediction": "fill(WebActions.getProperty(password));\n    }\n\n    public void clickLogin() {\n        LOGIN_BUTTON.click();\n    }\n\n    public void clickOnIcon(String iconName) {\n        page.click(page.locator(iconName));\n    }\n\n    public boolean verifyProfilePage() {\n        return page.url().contains(\"profile\");\n    }\n\n    public boolean verifyBookPage() {\n        return page.url().contains(\"books\");\n    }\n\n    public boolean verifyBooksPage() {\n        return page.url().contains(\"books\");\n    }\n\n    public boolean verifyBooksPageWithSearchBox() {\n        return page.", "first_line_groundtruth": "fill(WebActions.decrypt(password));", "first_line_prediction": "fill(WebActions.getProperty(password));", "match": 0}
{"groundtruth": "= PluginImpl.getInstance().getAccessKeyId();", "prediction": " = PluginImpl.getInstance().getAccessKeyId();\n        String accessKeySecret = PluginImpl.getInstance().getAccessKeySecret();\n        ossClient = new OSSClientBuilder().build(accessKeyId, accessKeySecret, endpointFormat.replace(\"-\", region));\n        DefaultProfile profile = DefaultProfile.getProfile(region, accessKeyId, accessKeySecret);\n        oosClient = new DefaultAcsClient(profile);\n    }", "first_line_groundtruth": "= PluginImpl.getInstance().getAccessKeyId();", "first_line_prediction": " = PluginImpl.getInstance().getAccessKeyId();", "match": 0}
{"groundtruth": "instance.getOosClient().getAcsResponse(request);", "prediction": " instance.getOosClient().startExecution(request);\n            executionId = response.getExecutionId();\n            listener.getLogger().println(\"ExecutionId:\" + executionId);\n        } catch (ClientException e) {\n            e.printStackTrace();\n        }\n        return executionId;\n    }\n\n    // ecs resource execute oos Template : ECS_TEMPLATE_NAME\n    private String ecsResourceExec(StartExecutionRequest request,  AliyunClientFactory instance, TaskListener listener) {\n        request.setTemplateName(ECS_TEMPLATE_NAME);\n        String parameter =\n                \"{\\\"\" +\n                        \"invokeDestinationDir\\\":\\\"\"", "first_line_groundtruth": "instance.getOosClient().getAcsResponse(request);", "first_line_prediction": " instance.getOosClient().startExecution(request);", "match": 0}
{"groundtruth": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);", "prediction": "uret = instance.getOssClient().uploadPart(uploadPartRequest);\n                partETags.add(uret.getPartETag());\n                instream.close();\n            }\n            CompleteMultipartUploadRequest completeMultipartUploadRequest = new CompleteMultipartUploadRequest();\n            completeMultipartUploadRequest.setBucketName(bucketName);\n            completeMultipartUploadRequest.setKey(objectName);\n            completeMultipartUploadRequest.setUploadId(uploadId);\n            completeMultipartUploadRequest.setPartETags(partETags);\n            CompleteMultipartUploadResult curet = instance.getOssClient().completeMultipartUpload(complete", "first_line_groundtruth": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);", "first_line_prediction": "uret = instance.getOssClient().uploadPart(uploadPartRequest);", "match": 0}
{"groundtruth": "instance.build(this.region);", "prediction": " /**\n         * get oss client\n         * */\n        OSS ossClient = null;\n        try {\n            ossClient = instance.getOssClient(region);\n        } catch (ClientException e) {\n            logger.println(\"get oss client failed\");\n            throw new IOException(e);\n        }\n        /**\n         * get oss bucket\n         * */\n        OSSObject ossObject = null;\n        try {\n            ossObject = ossClient.getObject(bucket, objectName);\n        } catch (ClientException e) {\n            logger.println(\"get oss object failed\");\n            throw new IOException(e);\n        }\n        /**\n         * get", "first_line_groundtruth": "instance.build(this.region);", "first_line_prediction": " /**", "match": 0}
{"groundtruth": "(instance.getOssClient() != null) {", "prediction": " (zipFile.exists()) {\n                logger.println(\"Failed to delete file \" + zipFile.getPath());\n            }\n        }\n    }\n\n    private void uploadOssFile(AliyunClientFactory instance, FilePath sourceDirectory, PrintStream logger) {\n        String bucketName = this.bucket;\n        try {\n            InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, objectName);\n            InitiateMultipartUploadResult upresult = instance.getOssClient().initiateMultipartUpload(request);\n            String uploadId = upresult.getUploadId();\n            List<PartETag> partET", "first_line_groundtruth": "(instance.getOssClient() != null) {", "first_line_prediction": " (zipFile.exists()) {", "match": 0}
{"groundtruth": "upresult = instance.getOssClient().initiateMultipartUpload(request);", "prediction": " result = instance.getOssClient().getAcsResponse(request);\n            String uploadId = result.getUploadId();\n            logger.println(\"UploadId:\" + uploadId);\n            UploadPartRequest uploadPartRequest = new UploadPartRequest();\n            uploadPartRequest.setBucketName(bucketName);\n            uploadPartRequest.setKey(objectName);\n            uploadPartRequest.setUploadId(uploadId);\n            uploadPartRequest.setPartNumber(1);\n            uploadPartRequest.setInputStream(new FileInputStream(zipFile));\n            UploadPartResult uploadPartResult = instance.getOssClient().getAcs", "first_line_groundtruth": "upresult = instance.getOssClient().initiateMultipartUpload(request);", "first_line_prediction": " result = instance.getOssClient().getAcsResponse(request);", "match": 0}
{"groundtruth": "instance.getOosClient().getAcsResponse(executionsRequest).getExecutions().get(0).getStatus();", "prediction": " instance.getOosClient().listExecutions(executionsRequest).getExecutions().get(0).getStatus();\n            } catch (ClientException e) {\n                logger.println(\"list executions failed\");\n            }\n        }\n        if (\"Success\".equalsIgnoreCase(status)) {\n            logger.println(\"OOS template execution success\");\n        } else {\n            logger.println(\"OOS template execution failed\");\n        }\n    }\n\n    /**\n     * zipAndUpload is used to compress and upload the specific path of the built project.\n     * @param instance\n     * @param projectName\n     * @param sourceDirectory\n     * @param logger", "first_line_groundtruth": "instance.getOosClient().getAcsResponse(executionsRequest).getExecutions().get(0).getStatus();", "first_line_prediction": " instance.getOosClient().listExecutions(executionsRequest).getExecutions().get(0).getStatus();", "match": 0}
{"groundtruth": "HazardDiamondAPI.open(this);", "prediction": " openScreen();\n        }\n        return ActionResult.success(world.isClient());\n    }\n\n    @Override\n    public void onPlaced(World world, BlockPos pos, BlockState state, PlayerEntity placer, ItemStack itemStack) {\n        super.onPlaced(world, pos, state, placer, itemStack);\n        if (!world.isClient()) {\n            var entity = HazardDiamondAPI.createEntity(world, pos, data);\n            world.spawnEntity(entity);\n        }\n    }\n\n    @Override\n    public void onBreak(World world, BlockPos pos, BlockState state, PlayerEntity", "first_line_groundtruth": "HazardDiamondAPI.open(this);", "first_line_prediction": " openScreen();", "match": 0}
{"groundtruth": "setScreen(new HazardScreen(holder.getHazardData()));", "prediction": "open(holder);\n    }\n\n    /**\n     * Opens an immutable {@link HazardScreen} on the client.\n     * @param holder the holder of the hazard data object to display\n     * @param onClose a callback to be executed when the screen is closed\n     */\n    @Environment(EnvType.CLIENT)\n    public static void open(HazardDataHolder holder, Runnable onClose) {\n        HazardDiamondAPIImpl.open(holder, onClose);\n    }\n\n    /**\n     * Opens an immutable {@link HazardScreen} on the client.\n     * @param holder the holder of the hazard data object", "first_line_groundtruth": "setScreen(new HazardScreen(holder.getHazardData()));", "first_line_prediction": "open(holder);", "match": 0}
{"groundtruth": ".register(Registry.ITEM, HDiamond.id(\"panel_item\"), INSTANCE);", "prediction": ".register(Registry.ITEM, HDiamond.id(\"panel\"), INSTANCE);\n    }", "first_line_groundtruth": ".register(Registry.ITEM, HDiamond.id(\"panel_item\"), INSTANCE);", "first_line_prediction": ".register(Registry.ITEM, HDiamond.id(\"panel\"), INSTANCE);", "match": 0}
{"groundtruth": "AliyunPushLog.e(REC_TAG, \"key \" + entry.getKey() + \" value \" + entry.getValue());", "prediction": "\tAliyunPushLog.e(REC_TAG, \"showNotificationNow: \" + entry.getKey() + \" = \" + entry.getValue());\n\t\t}\n\t\treturn false;", "first_line_groundtruth": "AliyunPushLog.e(REC_TAG, \"key \" + entry.getKey() + \" value \" + entry.getValue());", "first_line_prediction": "\tAliyunPushLog.e(REC_TAG, \"showNotificationNow: \" + entry.getKey() + \" = \" + entry.getValue());", "match": 0}
{"groundtruth": "= holder.getHazardData().getTooltip().stream()\n                .map(Text.Serializer::toJson)\n                .toList();", "prediction": " = new NbtList();\n        var pictograms = new NbtList();\n        for (var pictogram : holder.getHazardData().getPictograms()) {\n            pictograms.add(NbtString.of(pictogram.toString()));\n        }\n        nbt.put(\"WailaData\", NbtCompound.of(\n            \"tooltips\",  tooltips,\n            \"pictograms\", pictograms\n        ));\n    }", "first_line_groundtruth": "= holder.getHazardData().getTooltip().stream()", "first_line_prediction": " = new NbtList();", "match": 0}
{"groundtruth": "ResultUtil.error();", "prediction": " ResultUtil.error(ErrorCode.SERVER_ERROR);\n    }", "first_line_groundtruth": "ResultUtil.error();", "first_line_prediction": " ResultUtil.error(ErrorCode.SERVER_ERROR);", "match": 0}
{"groundtruth": "target = (Annotation) AopUtil.getTarget(annotation);", "prediction": " annotation1 = annotation.annotationType();\n                if (annotation1.isAnnotationPresent(RequestMapping.class)) {\n                    RequestMapping requestMapping = (RequestMapping) annotation;\n                    url = requestMapping.value()[0];\n                    httpMethod = requestMapping.method()[0].name();\n                }\n            }\n        }\n    }", "first_line_groundtruth": "target = (Annotation) AopUtil.getTarget(annotation);", "first_line_prediction": " annotation1 = annotation.annotationType();", "match": 0}
{"groundtruth": ".info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{", "prediction": ".error(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\", phone, param.get(\"code\"), DateUtil.now());\n        return \"\";\n    }\n\n    /**\n     * \u968f\u673a\u751f\u6210\u9a8c\u8bc1\u7801\n     *\n     * @return JSONObject\n     */\n    private JSONObject randomCode() {\n        Random random = new Random();\n        int code = random.nextInt(900000) + 100000;\n        return JSONObject.parseObject(\"{\\\"code\\\":\" + code + \"}\");\n    }\n\n    /**\n     * \u521b\u5efa\u8bf7\u6c42\u5bf9\u8c61\n     *\n     *", "first_line_groundtruth": ".info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{", "first_line_prediction": ".error(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\", phone, param.get(\"code\"), DateUtil.now());", "match": 0}
{"groundtruth": "= UserRoleEnum.getEnumByValue(mustRole);", "prediction": " = UserRoleEnum.valueOf(mustRole);\n            if (mustUserRoleEnum.equals(loginUser.getUserRole())) {\n                return joinPoint.proceed(joinPoint.getArgs());\n            } else {\n                throw new BusinessException(ErrorCode.USER_ROLE_ERROR);\n            }\n        } else {\n            return joinPoint.proceed(joinPoint.getArgs());\n        }\n    }", "first_line_groundtruth": "= UserRoleEnum.getEnumByValue(mustRole);", "first_line_prediction": " = UserRoleEnum.valueOf(mustRole);", "match": 0}
{"groundtruth": "username = jwtTokenProvider.getUsername(token);", "prediction": " username = jwtTokenProvider.getUsername(token);\n\n      // get user details from database\n      UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n\n      // create authentication token\n      UsernamePasswordAuthenticationToken authenticationToken =\n          new UsernamePasswordAuthenticationToken(\n              userDetails, null, userDetails.getAuthorities());\n\n      // set authentication details to token\n      authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n\n      // set authentication token to security context\n      SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n    }\n\n    filterChain.doFilter(request, response);\n  }", "first_line_groundtruth": "username = jwtTokenProvider.getUsername(token);", "first_line_prediction": " username = jwtTokenProvider.getUsername(token);", "match": 0}
{"groundtruth": "(errorCode.getMsg());", "prediction": "(message);// \u9519\u8bef\u4fe1\u606f\n        this.code=errorCode.getCode();\n        this.message=message;\n    }\n\n    public BusinessException(ErrorCode errorCode){\n        super(errorCode.getMsg());// \u9519\u8bef\u4fe1\u606f\n        this.code=errorCode.getCode();\n        this.message=errorCode.getMsg();\n    }\n\n    public BusinessException(String message){\n        super(message);// \u9519\u8bef\u4fe1\u606f\n        this.code=50000;\n        this.message=message;\n    }\n\n    public BusinessException(String message, Throwable cause){\n        super(message, cause);// \u9519\u8bef\u4fe1\u606f\n        this.code=5", "first_line_groundtruth": "(errorCode.getMsg());", "first_line_prediction": "(message);// \u9519\u8bef\u4fe1\u606f", "match": 0}
{"groundtruth": "(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir,name));", "prediction": "(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir, name));\n    }\n\n    @PostMapping\n    @PreAuthorize(\"hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')\")\n    public ResponseEntity<CityDto> createCity(@RequestBody CityDto cityDto) {\n        return ResponseEntity.ok(cityService.createCity(cityDto));\n    }\n\n    @PutMapping(\"/{id}\")\n    @PreAuthorize(\"hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')\")\n    public ResponseEntity<CityDto> updateCity(@PathVariable Long id, @RequestBody CityDto", "first_line_groundtruth": "(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir,name));", "first_line_prediction": "(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir, name));", "match": 0}
{"groundtruth": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{", "prediction": "(\"\u53d1\u9001\u9a8c\u8bc1\u7801\u6210\u529f, phone:{}, code:{}\", phone, param.get(\"code\"));\n                return param.get(\"code\").toString();\n            } else {\n                log.error(\"\u53d1\u9001\u9a8c\u8bc1\u7801\u5931\u8d25, phone:{}, code:{}\", phone, param.get(\"code\"));\n                return null;\n            }\n        } catch (Exception e) {\n            log.error(\"\u53d1\u9001\u9a8c\u8bc1\u7801\u5931\u8d25, phone:{}, code:{}\", phone, param.get(\"code\"));\n            return null;\n        }\n    }\n\n    /**\n     * \u968f\u673a\u751f\u6210\u9a8c\u8bc1\u7801\n     *\n     * @return JSONObject\n     */\n    private JSONObject randomCode() {\n        Random random", "first_line_groundtruth": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{", "first_line_prediction": "(\"\u53d1\u9001\u9a8c\u8bc1\u7801\u6210\u529f, phone:{}, code:{}\", phone, param.get(\"code\"));", "match": 0}
{"groundtruth": "return JSON_CONVERTOR.parseObject(input, clazz);", "prediction": " return JSON_CONVERTOR.parseObject(input, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(String input, Charset charset, Class<T> clazz) {\n        return JSON_CONVERTOR.parseObject(input, charset, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(String input, Charset charset, Class<T> clazz, String... ignoreProperties) {\n        return JSON_CONVERTOR.parseObject(input, charset, clazz, ignoreProperties", "first_line_groundtruth": "return JSON_CONVERTOR.parseObject(input, clazz);", "first_line_prediction": " return JSON_CONVERTOR.parseObject(input, clazz);", "match": 0}
{"groundtruth": ".append(commandNamespace.name());", "prediction": "\n                            .append(commandNamespace.name())\n                            .append(\":\\n\")\n                            .append(commandNamespace.dump());\n                });\n        return builder.toString();\n    }", "first_line_groundtruth": ".append(commandNamespace.name());", "first_line_prediction": "", "match": 0}
{"groundtruth": ".namespaceManager.getCommandNamespaces().forEach(namespace -> {", "prediction": ".setVariable(\"namespaceManager\", namespaceManager);\n        this.setVariable(\"shellProvider\", this);\n        this.setVariable(\"shell\", this);\n        this.setVariable(\"shellProvider\", this);\n        this.setVariable(\"shell\", this);\n        this.setVariable(\"shellProvider\", this);\n        this.setVariable(\"shell\", this);\n        this.setVariable(\"shellProvider\", this);\n        this.setVariable(\"shell\", this);\n        this.setVariable(\"shellProvider\", this);\n        this.setVariable(\"shell\", this);\n        this.setVariable(\"shellProvider\", this);\n        this", "first_line_groundtruth": ".namespaceManager.getCommandNamespaces().forEach(namespace -> {", "first_line_prediction": ".setVariable(\"namespaceManager\", namespaceManager);", "match": 0}
{"groundtruth": ".print(namespaceManager.dump());", "prediction": "\n            .println(\"help: print this help message\");\n    }\n\n    protected void welcome() {\n        RUNTIME.getPrinter()\n            .println(\"Welcome to the AntChain Plugin Server CLI!\");\n    }", "first_line_groundtruth": ".print(namespaceManager.dump());", "first_line_prediction": "", "match": 0}
{"groundtruth": "shell.start();", "prediction": " // start shell\n         shell.start();\n    }\n\n    private static String getVersion() {\n        return ResourceUtil.readUtf8Str(\"META-INF/version.txt\");\n    }", "first_line_groundtruth": "shell.start();", "first_line_prediction": " // start shell", "match": 0}
{"groundtruth": "commandNamespace.getCommands().forEach(\n                            (cmdName, cmd) -> {", "prediction": " commandNamespace.getCommands().forEach(\n                            command -> {\n                                builder.append(\"\\n     \").append(command.name());\n                                command.getArgs().forEach(\n                                        arg -> {\n                                            builder.append(\"\\n         \").append(arg.name());\n                                            if (!arg.getConstraints().isEmpty()) {\n                                                builder.append(\" //\");\n                                                arg.getConstraints().forEach(\n                                                        contraint -> {\n                                                            builder.append(contraint).append(\",\");\n                                                        });\n                                                builder.deleteCharAt(builder.length() - 1);\n                                            }\n                                        });\n                            });\n                });\n        return builder.toString();\n    }", "first_line_groundtruth": "commandNamespace.getCommands().forEach(", "first_line_prediction": " commandNamespace.getCommands().forEach(", "match": 0}
{"groundtruth": "String result = shell.execute(command);", "prediction": " resultBuilder.append(shell.execute(command)).append(\"\\n\");\n                    } catch (Exception e) {\n                        System.out.printf(\"illegal command [ %s ], execute failed\\n\", command);\n                    }\n                    command = reader.readLine();\n                }\n                System.out.println(resultBuilder.toString());\n            } catch (Exception e) {\n                System.out.printf(\"execute file failed, file path: %s\\n\", filePath);\n            }\n            return;\n        }\n\n        shell.start();\n    }\n\n    private static String getVersion() {\n        try {\n            return ResourceUtil.readUtf", "first_line_groundtruth": "String result = shell.execute(command);", "first_line_prediction": " resultBuilder.append(shell.execute(command)).append(\"\\n\");", "match": 0}
{"groundtruth": "!grpcClient.checkServerStatus()) {", "prediction": "cmd.hasOption(OP_CMD)) {\n            String cmdStr = cmd.getOptionValue(OP_CMD);\n            shellProvider.execute(cmdStr);\n        } else if (cmd.hasOption(OP_FILE)) {\n            String file = cmd.getOptionValue(OP_FILE);\n            try (InputStream inputStream = ResourceUtil.getStream(file)) {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(\"UTF-8\")));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    shellProvider.execute(line);\n                }\n            } catch (IOException", "first_line_groundtruth": "!grpcClient.checkServerStatus()) {", "first_line_prediction": "cmd.hasOption(OP_CMD)) {", "match": 0}
{"groundtruth": "getGrpcClient().shutdown();", "prediction": "getGrpcClient().close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void welcome() {\n        RUNTIME.getPrinter().println(\"Welcome to AntChain Bridge Plugin Server CLI!\");\n        RUNTIME.getPrinter().println(\"Type 'help' for more information.\");\n    }\n\n    private void initReservedWord() {\n        reservedWord.put(\"help\", new HelpCommand());\n        reservedWord.put(\"exit\", new ExitCommand());\n        reservedWord.put(\"cls\", new ClsCommand());\n        reservedWord.put(\"cd\", new CdCommand());\n        reserved", "first_line_groundtruth": "getGrpcClient().shutdown();", "first_line_prediction": "getGrpcClient().close();", "match": 0}
{"groundtruth": "\"                          PLUGIN SERVER CLI \" + Launcher.getVersion()\n        );", "prediction": " \"                                                                               v0.1.0\");\n    }", "first_line_groundtruth": "\"                          PLUGIN SERVER CLI \" + Launcher.getVersion()", "first_line_prediction": " \"                                                                               v0.1.0\");", "match": 0}
{"groundtruth": ").execute();", "prediction": " + \" \").run();\n\n                            } else {\n\n                                shellProvider.execute(cmd);\n                            }\n                        } catch (Exception e) {\n                            System.out.println(\"error\");\n                        }\n                    }\n                }).start();\n            }\n        } finally {\n            shellLock.unlock();\n        }\n    }\n\n    public void stop() {\n        loopRunning.set(false);\n    }\n\n    private void welcome() {\n        PrintWriter writer = terminal.writer();\n        writer.println(\"Welcome to AntChain Bridge Plugin Server CLI!\");\n        writer.println(\"Type 'help' for more information.\");\n    }\n\n    private void initReservedWord() {\n       ", "first_line_groundtruth": ").execute();", "first_line_prediction": " + \" \").run();", "match": 0}
{"groundtruth": "().println(JsonUtil.format(result));", "prediction": "().println(result);\n                                } else {\n                                    RUNTIME.getPrinter().println(result + \"\\n\");\n                                }\n                            }\n                        } catch (Exception e) {\n                            RUNTIME.getPrinter().println(\"error: \" + e.getMessage());\n                            e.printStackTrace();\n                        }\n                    }\n                }).start();\n            }\n        } finally {\n            shellLock.unlock();\n        }\n    }\n\n    public void stop() {\n        loopRunning.set(false);\n    }\n\n    private void welcome() {\n        RUNTIME.getPrinter().println(\"Welcome to AntChain Bridge Plugin Server CLI\");\n        RUNTIME.getPrinter().", "first_line_groundtruth": "().println(JsonUtil.format(result));", "first_line_prediction": "().println(result);", "match": 0}
{"groundtruth": "(!buffer.isEmpty() && !namespace.name().startsWith(buffer)) {", "prediction": " (namespace.getCommandNames().isEmpty()) {\n                    return;\n                }\n\n                namespace.getCommandNames().forEach(commandName -> {\n                    if (!buffer.isEmpty() && !commandName.startsWith(buffer)) {\n                        return;\n                    }\n\n                    candidates.add(new Candidate(commandName, commandName, null, null, null, null, true));\n                });\n            });\n        } else {\n            // \u8865\u5168\u547d\u4ee4\n            namespaces.forEach(namespace -> {\n\n                if  (namespace.getCommandNames().isEmpty()) {\n                    return;\n                }\n\n                namespace.getCommandNames().forEach(commandName -> {", "first_line_groundtruth": "(!buffer.isEmpty() && !namespace.name().startsWith(buffer)) {", "first_line_prediction": " (namespace.getCommandNames().isEmpty()) {", "match": 0}
{"groundtruth": "new StringBuilder(namespace.name());", "prediction": " new StringBuilder();\n                sb.append(namespace.name());\n                namespace.getCommandNamespaces().forEach(commandNamespace -> {\n                    sb.append(\" \");\n                    sb.append(commandNamespace.name());\n                });\n\n                candidates.add(new Candidate(sb.toString(), sb.toString(), null, null, null, null, true));\n            });\n        } else {\n            // \u8865\u5168\u547d\u4ee4\n            namespaces.forEach(namespace -> {\n                if (!buffer.isEmpty() && !namespace.name().startsWith(buffer)) {\n                    return;\n                }\n\n                namespace.getCommandNamespaces().forEach(commandNamespace -> {\n                    if", "first_line_groundtruth": "new StringBuilder(namespace.name());", "first_line_prediction": " new StringBuilder();", "match": 0}
{"groundtruth": "namespace.getCommands().forEach((cmdName, cmd) -> {", "prediction": " namespace.getCommandNamespaces().forEach(commandNamespace -> {\n                     sb.append(\" \").append(commandNamespace.name());\n                 });\n\n                candidates.add(new Candidate(sb.toString(), sb.toString(), null, null, null, null, true));\n            });\n        }\n    }", "first_line_groundtruth": "namespace.getCommands().forEach((cmdName, cmd) -> {", "first_line_prediction": " namespace.getCommandNamespaces().forEach(commandNamespace -> {", "match": 0}
{"groundtruth": "!namespace.name().equals(buf[0])) {", "prediction": "namespace.name().equals(buf[0])) {\n\n                    CommandNamespace commandNamespace = namespace;\n\n                    if (buf.length > 1) {\n                        commandNamespace = commandNamespace.getCommand(buf[1]);\n                    }\n\n                    if (commandNamespace != null) {\n                        commandNamespace.getCommands().forEach((cmdName, cmd) -> {\n\n                            if (cmdName.equals(buf[1])) {\n\n                                StringBuilder sb = new StringBuilder(cmdName);\n                                cmd.getArgs().forEach(arg -> {\n                                    sb.append(\"\\n\\t\\t\").append(arg.getName());\n                                });\n\n                                candidates.add", "first_line_groundtruth": "!namespace.name().equals(buf[0])) {", "first_line_prediction": "namespace.name().equals(buf[0])) {", "match": 0}
{"groundtruth": "mThermalUtils.setDefaultThermalProfile();", "prediction": " mThermalUtils.setThermalProfile(mPreviousApp);\n        }\n    };\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        mThermalUtils = ThermalUtils.getInstance(this);\n        mActivityTaskManager = IActivityTaskManager.Stub.asInterface(\n                ServiceManager.getService(\"activity\"));\n        mActivityTaskManager.registerTaskStackListener(mTaskListener);\n        mActivityTaskManager.registerReceiverAsUser(mIntentReceiver,\n                new IntentFilter(Intent.ACTION_BOOT_COMPLETED), null, null, 0);\n    }\n\n    @Override\n    public void", "first_line_groundtruth": "mThermalUtils.setDefaultThermalProfile();", "first_line_prediction": " mThermalUtils.setThermalProfile(mPreviousApp);", "match": 0}
{"groundtruth": "Candidate(namespace.name() + \".\", namespace.name(), null, null, null, null, true));", "prediction": " Candidate(sb.toString(), sb.toString(), null, null, null, null, true));\n            });\n        }\n    }", "first_line_groundtruth": "Candidate(namespace.name() + \".\", namespace.name(), null, null, null, null, true));", "first_line_prediction": " Candidate(sb.toString(), sb.toString(), null, null, null, null, true));", "match": 0}
{"groundtruth": "mThermalUtils.setThermalProfile(foregroundApp);", "prediction": " mThermalUtils.updateThermalState(foregroundApp);\n                     mPreviousApp = foregroundApp;\n                }\n            } catch (RemoteException e) {\n                Log.e(TAG, \"Failed to get focused root task info\", e);\n            }\n        }\n    };\n\n    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            final String action = intent.getAction();\n            if (action.equals(Intent.ACTION_SCREEN_ON)) {\n                mThermalUtils.updateThermalState(null);\n            }\n        }\n   ", "first_line_groundtruth": "mThermalUtils.setThermalProfile(foregroundApp);", "first_line_prediction": " mThermalUtils.updateThermalState(foregroundApp);", "match": 0}
{"groundtruth": "cmd.addArgs(argName, param.getType().getSimpleName(), constraints);", "prediction": " cmd.addArgs(argName, param.getType().getName(), constraints);\n            }\n\n            this.addCommand(cmd);\n        });\n    }\n\n    @Override\n    public String getName() {\n        return name();\n    }\n\n    @Override\n    public String getHelp() {\n        return null;\n    }\n\n    @Override\n    public String getUsage() {\n        return null;\n    }\n\n    @Override\n    public String getShortDescription() {\n        return null;\n    }\n\n    @Override\n    public String getLongDescription() {\n        return null;\n    }\n\n    @Override\n    public String getExample() {\n        return null;\n    }\n\n   ", "first_line_groundtruth": "cmd.addArgs(argName, param.getType().getSimpleName(), constraints);", "first_line_prediction": " cmd.addArgs(argName, param.getType().getName(), constraints);", "match": 0}
{"groundtruth": "(namespaceManager.getCommandNamespaces());", "prediction": "(namespaceManager.getCommandNamespaces());\n    }\n\n    /**\n     * \u6dfb\u52a0\u4fdd\u7559\u5173\u952e\u5b57\n     *\n     * @param reservedWord\n     */\n    public void addReservedWord(String reservedWord) {\n        reservedWords.add(reservedWord);\n    }\n\n    @Override\n    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {\n        String lineText = line.line().trim();\n        if (lineText.isEmpty()) {\n            // \u7a7a\u884c\uff0c\u8865\u5168\u6240\u6709namespace\n            namespaces.forEach(namespace -> {\n                candidates.add(new Candidate(namespace.name()));\n            });\n        }", "first_line_groundtruth": "(namespaceManager.getCommandNamespaces());", "first_line_prediction": "(namespaceManager.getCommandNamespaces());", "match": 1}
{"groundtruth": "mDiracSound.setMusic(enable ? 1 : 0);", "prediction": " refreshPlaybackIfNecessary();\n    }\n\n    public void setHifiMode(boolean enable) {\n        mDiracSound.setHifiMode(enable ? 1 : 0);\n    }\n\n    public void setHeadsetType(int type) {\n        mDiracSound.setHeadsetType(type);\n    }\n\n    public void setPreset(String preset) {\n        mDiracSound.setLevel(preset);\n    }\n\n    public void setScenario(int scene) {\n        mDiracSound.setScenario(scene);\n    }\n\n    public void setVolume(int volume) {\n        mDiracSound.set", "first_line_groundtruth": "mDiracSound.setMusic(enable ? 1 : 0);", "first_line_prediction": " refreshPlaybackIfNecessary();", "match": 0}
{"groundtruth": "FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);", "prediction": " FileUtils.writeFile(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);\n    }\n\n    protected static void setBenchmarkThermalProfile() {\n         FileUtils.writeFile(THERMAL_SCONFIG, THERMAL_STATE_BENCHMARK);\n    }\n\n    protected static void setBrowserThermalProfile() {\n         FileUtils.writeFile(THERMAL_SCONFIG, THERMAL_STATE_BROWSER);\n    }\n\n    protected static void setCameraThermalProfile() {\n         FileUtils.writeFile(THERMAL_SCONFIG, THERMAL_STATE_CAMERA);\n    }\n\n    protected static void setDialerThermalProfile()", "first_line_groundtruth": "FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);", "first_line_prediction": " FileUtils.writeFile(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);", "match": 0}
{"groundtruth": "null && mDiracSound.getMusic() == 1;", "prediction": " null && mDiracSound.isEnabled();\n    }\n\n    public void setHeadsetType(int type) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        mDiracSound.setHeadsetType(type);\n    }\n\n    public void setHifiMode(int mode) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        mDiracSound.setHifiMode(mode);\n    }\n\n    public void setScenario(int scene) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        mDiracSound.setScenario(scene);\n    }\n\n    public void setPreset(String preset) throws IllegalStateException,", "first_line_groundtruth": "null && mDiracSound.getMusic() == 1;", "first_line_prediction": " null && mDiracSound.isEnabled();", "match": 0}
{"groundtruth": "mDiracSound.setLevel(band, Float.valueOf(level[band]));", "prediction": " mDiracSound.setLevel(band, Float.parseFloat(level[band]));\n        }\n    }\n\n    public void setScenario(int scenario) {\n        mDiracSound.setScenario(scenario);\n    }\n\n    public void setHeadsetType(int type) {\n        mDiracSound.setHeadsetType(type);\n    }\n\n    public void setMusic(boolean enable) {\n        mDiracSound.setMusic(enable ? 1 : 0);\n    }\n\n    public void setVolume(int volume) {\n        mDiracSound.setVolume(volume);\n    }\n\n    public void setMute(boolean", "first_line_groundtruth": "mDiracSound.setLevel(band, Float.valueOf(level[band]));", "first_line_prediction": " mDiracSound.setLevel(band, Float.parseFloat(level[band]));", "match": 0}
{"groundtruth": "? mDiracUtils.isDiracEnabled() : false;", "prediction": " && mDiracUtils.isDiracEnabled();\n\n        mSwitchBar = (MainSwitchPreference) findPreference(PREF_ENABLE);\n        mSwitchBar.setChecked(enhancerEnabled);\n        mSwitchBar.setOnPreferenceChangeListener(this);\n\n        mHeadsetType = (ListPreference) findPreference(PREF_HEADSET);\n        mHeadsetType.setSummary(mHeadsetType.getEntry());\n        mHeadsetType.setOnPreferenceChangeListener(this);\n\n        mPreset = (ListPreference) findPreference(PREF_PRESET);\n        mPreset.setSummary(mPreset.getEntry());\n        mPreset.setOn", "first_line_groundtruth": "? mDiracUtils.isDiracEnabled() : false;", "first_line_prediction": " && mDiracUtils.isDiracEnabled();", "match": 0}
{"groundtruth": "mDiracSound.setHifiMode(paramInt);", "prediction": " mDiracSound.setHifiMode(paramInt);\n    }\n\n    public void setScenario(int paramInt) {\n        mDiracSound.setScenario(paramInt);\n    }\n\n    public void setParameter(int[] paramArrayOfInt, byte[] paramArrayOfByte) {\n        mDiracSound.setParameter(paramArrayOfInt, paramArrayOfByte);\n    }\n\n    public void checkStatus(int status) {\n        if (status != 0) {\n            throw new RuntimeException(\"Dirac error: \" + status);\n        }\n    }\n\n    public void setAudioFocus(boolean enable) {\n        if (enable", "first_line_groundtruth": "mDiracSound.setHifiMode(paramInt);", "first_line_prediction": " mDiracSound.setHifiMode(paramInt);", "match": 0}
{"groundtruth": "gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);", "prediction": "propertyChangeSupport.firePropertyChange(\"settings\", oldValues, newValues);\n    }", "first_line_groundtruth": "gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);", "first_line_prediction": "propertyChangeSupport.firePropertyChange(\"settings\", oldValues, newValues);", "match": 0}
{"groundtruth": "mDiracUtils.setHifiMode((Boolean) newValue ? 1 : 0);", "prediction": " mDiracUtils.setHifi(Boolean.parseBoolean(newValue.toString()));\n                 return true;\n            case PREF_PRESET:\n                mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));\n                return true;\n            case PREF_SCENE:\n                mDiracUtils.setScene(Integer.parseInt(newValue.toString()));\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    @Override\n    public void onSwitchChanged(SwitchPreference preference, boolean isChecked) {\n        if (mDiracUtils == null) return;\n        mDiracUtils.", "first_line_groundtruth": "mDiracUtils.setHifiMode((Boolean) newValue ? 1 : 0);", "first_line_prediction": " mDiracUtils.setHifi(Boolean.parseBoolean(newValue.toString()));", "match": 0}
{"groundtruth": "mDiracUtils.setHeadsetType(Integer.parseInt(newValue.toString()));", "prediction": " mDiracUtils.setHeadsetType(Integer.parseInt((String) newValue));\n                 break;\n            case PREF_PRESET:\n                 mDiracUtils.setLevel((String) newValue);\n                 break;\n            case PREF_HIFI:\n                 mDiracUtils.setHifi((Boolean) newValue);\n                 break;\n            case PREF_SCENE:\n                 mDiracUtils.setScene((String) newValue);\n                 break;\n        }\n        return true;\n    }\n\n    @Override\n    public void onSwitchChanged(SwitchPreference preference, boolean isChecked) {\n        if (mDiracUtils == null", "first_line_groundtruth": "mDiracUtils.setHeadsetType(Integer.parseInt(newValue.toString()));", "first_line_prediction": " mDiracUtils.setHeadsetType(Integer.parseInt((String) newValue));", "match": 0}
{"groundtruth": ".helpMenu.setHelpColors(config.getMessages().getHelpCmd().getHelpColors());", "prediction": ".helpMenu.register(this);\n\n      getServer().getPluginManager().registerEvents(new PlaceholderUpdateListener(this), this);\n    } catch (Exception e) {\n      getLogger().log(Level.SEVERE, \"Failed to register commands\", e);\n    }\n  }\n\n  @Override\n  public void onDisable() {\n    this.helpMenu.unregister(this);\n  }\n\n  public PSConfig getConfig() {\n    return config;\n  }\n\n  public MinecraftHelp<CommandSender> getHelpMenu() {\n    return helpMenu;\n  }\n\n  public PlaceholderProvider getPlaceholderProvider() {\n    return placeholderProvider;", "first_line_groundtruth": ".helpMenu.setHelpColors(config.getMessages().getHelpCmd().getHelpColors());", "first_line_prediction": ".helpMenu.register(this);", "match": 0}
{"groundtruth": "Menu menu = MyMenu.createMenu(this);", "prediction": " montoyaApi.registerScanCheck(scanCheck);\n         montoyaApi.registerMenuTab(new MyMenu(montoyaApi, this));\n    }\n\n    @Override\n    public void propertyChange(PropertyChangeEvent evt) {\n        if (evt.getPropertyName().equals(MontoyaApi.MontoyaApiEvent.EXTENSION_STARTED.name())) {\n            logging.logToOutput(\"[+] Extension started\");\n        } else if (evt.getPropertyName().equals(MontoyaApi.MontoyaApiEvent.EXTENSION_STOPPED.name())) {\n            logging.logToOutput(\"[+", "first_line_groundtruth": "Menu menu = MyMenu.createMenu(this);", "first_line_prediction": " montoyaApi.registerScanCheck(scanCheck);", "match": 0}
{"groundtruth": "(sender, key, args) -> config.getMessages().getHelpCmd().getMessage(key));", "prediction": " (sender, command, label, args) -> {\n             if (args.length == 0) {\n               return Component.text(\"Usage: /papisigns <command> [args]\");\n             }\n             return Component.text(\"Usage: /papisigns \" + args[0] + \" [args]\");\n           });\n\n      this.helpMenu.register(this);\n\n      getServer().getPluginManager().registerEvents(new PlaceholderUpdateListener(this), this);\n    } catch (Exception e) {\n      getLogger().log(Level.SEVERE, \"Failed to register commands\", e);\n    }\n ", "first_line_groundtruth": "(sender, key, args) -> config.getMessages().getHelpCmd().getMessage(key));", "first_line_prediction": " (sender, command, label, args) -> {", "match": 0}
{"groundtruth": "description = HtmlResourceLoader.loadHtmlContent(\"aboutDescription.html\");", "prediction": " description = HtmlResourceLoader.loadResource(\"about.html\");\n        JLabel descriptionLabel = new JLabel(description);\n        descriptionLabel.putClientProperty(\"html.disable\", null);\n        return descriptionLabel;\n    }\n\n    private JButton createUpgradeButton() {\n        JButton upgradeButton = new JButton(\"Upgrade\");\n        upgradeButton.addActionListener(e -> {\n            try {\n                Desktop.getDesktop().browse(new URI(WEBSITE));\n            } catch (IOException | URISyntaxException ex) {\n                ex.printStackTrace();\n            }\n        });\n        upgradeButton.setBackground(UIManager.getColor(\"Burp.burpOrange\"));\n       ", "first_line_groundtruth": "description = HtmlResourceLoader.loadHtmlContent(\"aboutDescription.html\");", "first_line_prediction": " description = HtmlResourceLoader.loadResource(\"about.html\");", "match": 0}
{"groundtruth": "mDiracUtils.setScenario(Integer.parseInt(newValue.toString()));", "prediction": " mDiracUtils.setScene((String) newValue);\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    @Override\n    public void onSwitchChanged(SwitchPreference preference, boolean isChecked) {\n        if (mDiracUtils == null) return;\n        mDiracUtils.setDiracEnabled(isChecked);\n    }", "first_line_groundtruth": "mDiracUtils.setScenario(Integer.parseInt(newValue.toString()));", "first_line_prediction": " mDiracUtils.setScene((String) newValue);", "match": 0}
{"groundtruth": "mDiracUtils.setLevel((String) newValue);", "prediction": " mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));\n                return true;\n            case PREF_SCENE:\n                mDiracUtils.setScenario(Integer.parseInt(newValue.toString()));\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    @Override\n    public void onSwitchChanged(SwitchPreference preference, boolean isChecked) {\n        if (mDiracUtils == null) return;\n        mDiracUtils.setDiracEnabled(isChecked);\n    }", "first_line_groundtruth": "mDiracUtils.setLevel((String) newValue);", "first_line_prediction": " mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));", "match": 0}
{"groundtruth": "myBurpExtension.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPromptText);", "prediction": " myBurpExtension.setApiKey(newApiKey);\n         myBurpExtension.setModel(newModelId);\n         myBurpExtension.setMaxPromptSize(newMaxPromptSize);\n         myBurpExtension.setPrompt(newPromptText);", "first_line_groundtruth": "myBurpExtension.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPromptText);", "first_line_prediction": " myBurpExtension.setApiKey(newApiKey);", "match": 0}
{"groundtruth": "settingsView.setOnApplyButtonClickListener(() -> {", "prediction": " // TODO: implement\n    }\n\n    private JList<String> createListView() {\n        JList<String> listView = new JList<>();\n        listView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n        listView.setCellRenderer(new ListCellRenderer<String>() {\n            @Override\n            public void customize(JList<? extends String> list, String value, int index, boolean isSelected, boolean cellHasFocus) {\n                setText(value);\n            }\n        });\n        return listView;\n    }\n\n    public void setDefaultView(String viewName) {\n        CardLayout cardLayout = (CardLayout) cards", "first_line_groundtruth": "settingsView.setOnApplyButtonClickListener(() -> {", "first_line_prediction": " // TODO: implement", "match": 0}
{"groundtruth": "gptRequest.setPrompt(prompt);", "prediction": " RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), gptRequest.toJson());\n     Request request = new Request.Builder()\n         .url(\"https://api.openai.com/v1/engines/\" + model + \"/completions\")\n         .addHeader(\"Authorization\", \"Bearer \" + apiKey)\n         .addHeader(\"Content-Type\", \"application/json\")\n         .post(body)\n         .build();\n     Response response = client.newCall(request).execute();\n     if (!response.isSuccessful()) {\n       throw new IOException(\"Unexpected", "first_line_groundtruth": "gptRequest.setPrompt(prompt);", "first_line_prediction": " RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), gptRequest.toJson());", "match": 0}
{"groundtruth": "inst.setOption(\"Skill Level\", String.valueOf(level));", "prediction": " inst.setLevel(level);\n    }", "first_line_groundtruth": "inst.setOption(\"Skill Level\", String.valueOf(level));", "first_line_prediction": " inst.setLevel(level);", "match": 0}
{"groundtruth": "(reader.getRest());", "prediction": "(reader.read());\n                return;\n            }\n            string.append(reader.read(p));\n            reader.read(p + 1);\n            if (reader.canRead()) {\n                string.append(' ');\n            }\n        }\n\n        @Override\n        public StringNode build() {\n            return new StringNode(string.length() == 0);\n        }\n    }", "first_line_groundtruth": "(reader.getRest());", "first_line_prediction": "(reader.read());", "match": 0}
{"groundtruth": "reader.hint(\"An Integer\");", "prediction": " else {\n                return null;\n            }\n        }\n\n        @Override\n        public IntegerNode parse(StringReader reader) {\n            String next = tryParse(reader);\n            if (next == null) {\n                throw new StockfishError.CommandSyntaxError(\"Expected integer, found \" + reader.peek(1));\n            }\n            parsed = next;\n            return literalNode;\n        }\n\n        @Override\n        public String getParsed() {\n            return parsed;\n        }\n    }", "first_line_groundtruth": "reader.hint(\"An Integer\");", "first_line_prediction": " else {", "match": 0}
{"groundtruth": "if (!reader.canRead()) {", "prediction": " while ((p = reader.peek()) != -1) {\n                if (p == ' ' || p == '\\t') {\n                    reader.skip();\n                } else {\n                    break;\n                }\n            }\n            if (p == -1) {\n                if (node.canBeEmpty) {\n                    finish();\n                } else {\n                    reader.error(\"expected a string\");\n                }\n            } else {\n                string.append((char) p);\n                reader.skip();\n            }\n        }\n\n        @Override\n        public StringNode get() {\n            return node;\n        }\n\n        @Override\n        public String getParsed() {", "first_line_groundtruth": "if (!reader.canRead()) {", "first_line_prediction": " while ((p = reader.peek()) != -1) {", "match": 0}
{"groundtruth": "(cfg.getApiKey() != null) {", "prediction": " (cfg.getToken() != null) {\n            metadata.put(authorization, cfg.getToken());\n        }\n\n        if (cfg.getApiKey() != null) {\n            metadata.put(authorization, cfg.getApiKey());\n        }\n\n        ManagedChannel channel;\n\n        if (cfg.getInsecure()) {\n            channel = NettyChannelBuilder.forAddress(cfg.getHost(), cfg.getPort())\n                    .usePlaintext()\n                    .build();\n        } else {\n            SslContext sslContext = GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n            channel = NettyChannel", "first_line_groundtruth": "(cfg.getApiKey() != null) {", "first_line_prediction": " (cfg.getToken() != null) {", "match": 0}
{"groundtruth": "cfg.getTenantId() != null) {", "prediction": "cfg.getTenantId() != null) {\n            metadata.put(asertoTenantId, cfg.getTenantId());\n        }\n\n        if (cfg.getToken() != null) {\n            metadata.put(authorization, cfg.getToken());\n        }\n\n        if (cfg.getApiKey() != null) {\n            metadata.put(authorization, \"Bearer \" + cfg.getApiKey());\n        }\n\n        SslContext sslContext = null;\n        if (cfg.getInsecure()) {\n            sslContext = GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslContext", "first_line_groundtruth": "cfg.getTenantId() != null) {", "first_line_prediction": "cfg.getTenantId() != null) {", "match": 1}
{"groundtruth": "cfg.setCaCertPath(caCertPath);", "prediction": " cfg.setCaCertPath(caCertPath);\n\n        return this;\n    }\n\n    public ManagedChannel build() throws SSLException {\n        ManagedChannel channel;\n\n        if (cfg.getInsecure()) {\n            channel = NettyChannelBuilder.forAddress(cfg.getHost(), cfg.getPort())\n                    .usePlaintext()\n                    .build();\n        } else {\n            SslContext sslContext = GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n            channel = NettyChannelBuilder.forAddress(cfg.getHost(), cfg.getPort())\n                    .sslContext(sslContext)", "first_line_groundtruth": "cfg.setCaCertPath(caCertPath);", "first_line_prediction": " cfg.setCaCertPath(caCertPath);", "match": 0}
{"groundtruth": "), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));", "prediction": "cfg.getPort()), cfg.getPort())\n                 .usePlaintext(cfg.getInsecure())\n                 .intercept(new MetadataUtils.AttachHeadersInterceptor(metadata));\n\n        if (cfg.getCaCertPath() != null) {\n            SslContext sslContext = GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n            channelBuilder.sslContext(sslContext);\n        }\n\n        return channelBuilder.build();\n    }", "first_line_groundtruth": "), cfg.getPort())", "first_line_prediction": "cfg.getPort()), cfg.getPort())", "match": 0}
{"groundtruth": "(cfg.getHost(), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));", "prediction": "(cfg.getHost(), cfg.getPort())\n                 .usePlaintext(cfg.getInsecure())\n                 .intercept(new MetadataUtils.AttachHeadersInterceptor(metadata));\n\n        if (cfg.getCaCertPath() != null) {\n            SslContext sslContext = GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n            channelBuilder.sslContext(sslContext);\n        }\n\n        return channelBuilder.build();\n    }", "first_line_groundtruth": "(cfg.getHost(), cfg.getPort())", "first_line_prediction": "(cfg.getHost(), cfg.getPort())", "match": 1}
{"groundtruth": "reader.peek(1);", "prediction": " if (reader.canRead()) {\n                    string.append(' ');\n                 }\n            }\n        }\n\n        @Override\n        public StringNode getParsed() {\n            return node;\n        }\n\n        @Override\n        public String representation() {\n            return \"[string \" + string + \"]\";\n        }\n    }", "first_line_groundtruth": "reader.peek(1);", "first_line_prediction": " if (reader.canRead()) {", "match": 0}
{"groundtruth": "return new AnalysisTaskWrapper(inst.calculate(), b);", "prediction": " return new AnalysisTaskWrapper(this.inst.calculate(), b);\n    }", "first_line_groundtruth": "return new AnalysisTaskWrapper(inst.calculate(), b);", "first_line_prediction": " return new AnalysisTaskWrapper(this.inst.calculate(), b);", "match": 0}
{"groundtruth": "reader.peek(p - reader.getPos()));", "prediction": "reader.getRest().substring(0, p));\n                reader.setPos(p + 1);\n            }\n        }\n\n        @Override\n        public StringNode build() {\n            return new StringNode(node.canBeEmpty);\n        }\n    }", "first_line_groundtruth": "reader.peek(p - reader.getPos()));", "first_line_prediction": "reader.getRest().substring(0, p));", "match": 0}
{"groundtruth": "= reader.find(\" \")) == -1) {", "prediction": " = reader.find(\" \")) != -1) {\n                string.append(reader.string.substring(reader.pos, p));\n                reader.pos = p + 1;\n            } else {\n                string.append(reader.string.substring(reader.pos));\n                reader.pos = reader.string.length();\n            }\n        }\n\n        @Override\n        public StringNode getParsed() {\n            return node;\n        }\n\n        @Override\n        public String representation() {\n            return \"[string]\";\n        }\n    }", "first_line_groundtruth": "= reader.find(\" \")) == -1) {", "first_line_prediction": " = reader.find(\" \")) != -1) {", "match": 0}
{"groundtruth": "mDiracUtils.setEnabled(isChecked);", "prediction": " if (isChecked) {\n            mDiracUtils.enableDirac();\n        } else {\n            mDiracUtils.disableDirac();\n        }\n    }", "first_line_groundtruth": "mDiracUtils.setEnabled(isChecked);", "first_line_prediction": " if (isChecked) {", "match": 0}
{"groundtruth": "Node.greedyString())\n                                )\n                );", "prediction": "Node.string().complete(s -> {\n                                             if (s.startsWith(\"bestmove\")) {\n                                                 collectedBestMove = s.substring(9);\n                                             } else if (s.startsWith(\"ponder\")) {\n                                                 collectedPonder = s.substring(7);\n                                             }\n                                         }))\n                                 )\n                 )\n                 .with(\n                        Node.literal(\"bestmove\")\n                                 .mustConsumeChild()\n                                 .with(\n                                        Node.string()\n                                                 .complete(bestMove::set)\n                                                 .with(Node.literal(\"ponder\")\n                                                         .mustConsumeChild()\n                                                         .with(Node.string().complete(ponder", "first_line_groundtruth": "Node.greedyString())", "first_line_prediction": "Node.string().complete(s -> {", "match": 0}
{"groundtruth": "ShadeParser.parseShadeOutput(buildResult.toPath()),\n                        DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));", "prediction": " parseMavenOutput(buildResult),\n                         parsePaimonDependencies(root));\n\n        // parse NOTICE files\n        final Map<String, NoticeContents> modulesWithNoticeContents =\n                parseNoticeFiles(modulesWithBundledDependencies);\n\n        // check NOTICE files\n        final Map<String, Boolean> modulesWithCorrectNoticeContents =\n                checkNoticeFiles(modulesWithNoticeContents);\n\n        // print results\n        printResults(modulesWithCorrectNoticeContents);\n\n        // return number of modules with incorrect NOTICE files\n        return modulesWithCorrectNoticeContents.entrySet().stream()\n                .filter(entry -> !entry.getValue())\n                .count();\n    }", "first_line_groundtruth": "ShadeParser.parseShadeOutput(buildResult.toPath()),", "first_line_prediction": " parseMavenOutput(buildResult),", "match": 0}
{"groundtruth": "DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));", "prediction": " DeployParser.parseDeployOutput(buildResult.toPath()),\n                         NoticeParser.parseNoticeFile(buildResult.toPath()));\n\n        // parse NOTICE files\n        final Map<String, NoticeContents> modulesWithNoticeContents =\n                parseNoticeFiles(modulesWithBundledDependencies, root);\n\n        // check NOTICE files\n        final Map<String, Boolean> modulesWithCorrectNoticeContents =\n                checkNoticeFiles(modulesWithNoticeContents, modulesWithBundledDependencies);\n\n        // print results\n        printResults(modulesWithCorrectNoticeContents);\n\n        // return number of modules with incorrect NOTICE files\n        return modulesWithCorrectNoticeContents.entrySet().", "first_line_groundtruth": "DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));", "first_line_prediction": " DeployParser.parseDeployOutput(buildResult.toPath()),", "match": 0}
{"groundtruth": "= !cfg.getCaCertPath().isEmpty();", "prediction": " = cfg.getCaCertPath() != null;\n\n        if (insecure) {\n            channelBuilder.usePlaintext();\n        } else if (caSpecified) {\n            SslContext sslContext = GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n            channelBuilder.sslContext(sslContext);\n        }\n\n        return channelBuilder.build();\n    }", "first_line_groundtruth": "= !cfg.getCaCertPath().isEmpty();", "first_line_prediction": " = cfg.getCaCertPath() != null;", "match": 0}
{"groundtruth": "return ParserUtils.parsePluginOutput(\n                lines,\n                DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                DependencyParser::parseCopyDependencyBlock);", "prediction": " return ParserUtils.parsePluginOutput(\n                 lines.filter(line -> !line.contains(\" Excluding \")),\n                 DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                 DependencyParser::parseDependencyCopyBlock);\n    }\n\n    private static Set<Dependency> parseDependencyCopyBlock(Iterator<String> block) {\n        Set<Dependency> result = new LinkedHashSet<>();\n        while (block.hasNext()) {\n            String line = block.next();\n            Matcher matcher = DEPENDENCY_COPY_ITEM_PATTERN.matcher(line);\n            if (matcher.matches()) {\n                result.add(new Dependency(", "first_line_groundtruth": "return ParserUtils.parsePluginOutput(", "first_line_prediction": " return ParserUtils.parsePluginOutput(", "match": 0}
{"groundtruth": "with(Node.literal(\"string\").mustConsumeChild()\n                                        .with(Node.greedyString())\n                                )\n                );", "prediction": "with(Node.literal(\"multipv\").mustConsumeChild()\n                                         .with(Node.integer().complete(multipv::set))\n                                 )\n                                 .with(Node.literal(\"multipv\").mustConsumeChild()\n                                         .with(Node.integer().complete(multipv::set))\n                                 )\n                                 .with(Node.literal(\"multipv\").mustConsumeChild()\n                                         .with(Node.integer().complete(multipv::set))\n                                 )\n                                 .with(Node.literal(\"multipv\").mustConsumeChild()\n                                         .with(Node.integer().complete(multipv::set))\n                                 )\n                                 .", "first_line_groundtruth": "with(Node.literal(\"string\").mustConsumeChild()", "first_line_prediction": "with(Node.literal(\"multipv\").mustConsumeChild()", "match": 0}
{"groundtruth": "return dependency.getGroupId().contains(\"org.scala-lang\")\n                || scalaSuffixPattern.matcher(dependency.getArtifactId()).find();", "prediction": " return dependency.getGroupId().equals(\"org.scala-lang\") &&\n                 dependency.getArtifactId().equals(\"scala-reflect\");\n    }\n\n    private static boolean isExcluded(final String artifactId) {\n        return EXCLUDED_MODULES.contains(artifactId);\n    }\n\n    private static Collection<String> checkScalaSuffixes(\n            final ParseResult parseResult,\n            final Path paimonRootPath) {\n        final List<String> violations = new ArrayList<>();\n        for (String infectedModule : parseResult.getInfectedModules()) {\n            final Path modulePath = paimonRootPath.resolve(inf", "first_line_groundtruth": "return dependency.getGroupId().contains(\"org.scala-lang\")", "first_line_prediction": " return dependency.getGroupId().equals(\"org.scala-lang\") &&", "match": 0}
{"groundtruth": "+ dependency.getVersion()\n                + \":\"\n                + dependency.getClassifier().orElse(\"(no-classifier)\");", "prediction": " + dependency.getVersion();\n    }", "first_line_groundtruth": "+ dependency.getVersion()", "first_line_prediction": " + dependency.getVersion();", "match": 0}
{"groundtruth": "boolean isTestDependency = dependency.getScope().get().equals(\"test\");", "prediction": " boolean dependsOnScalaTest = dependsOnScalaTest(dependency);\n                if (dependsOnScala || dependsOnScalaTest) {\n                    infected = true;\n                    break;\n                }\n            }\n\n            if (infected) {\n                infectedModules.add(moduleName);\n            } else {\n                cleanModules.add(moduleName);\n            }\n        }\n\n        return new ParseResult(cleanModules, infectedModules);\n    }\n\n    private static boolean isExcluded(final String moduleName) {\n        return EXCLUDED_MODULES.contains(moduleName);\n    }\n\n    private static boolean dependsOnScala(final Dependency dependency) {\n        return", "first_line_groundtruth": "boolean isTestDependency = dependency.getScope().get().equals(\"test\");", "first_line_prediction": " boolean dependsOnScalaTest = dependsOnScalaTest(dependency);", "match": 0}
{"groundtruth": "wrapped.start(cmd),\n                SearchResultsWrapper::new,\n                b\n        );", "prediction": "wrapped.start(cmd),\n                e -> new SearchResultsWrapper(e, b),\n                b\n        );\n    }\n\n    @LuaWhitelist\n    public CompletableFutureWrapper<SearchResults, SearchResultsWrapper> start(String cmd, LuaFunction func) {\n        return new CompletableFutureWrapper<>(\n                this.wrapped.start(cmd),\n                e -> new SearchResultsWrapper(e, b),\n                b\n        ).onException(func);\n    }\n\n    @LuaWhitelist\n    public CompletableFutureWrapper<SearchResults, SearchResultsWrapper> start(String cmd, LuaFunction func, LuaFunction func2) {\n        return new CompletableFutureWrapper<>(\n                this.wrapped.", "first_line_groundtruth": "wrapped.start(cmd),", "first_line_prediction": "wrapped.start(cmd),", "match": 1}
{"groundtruth": "= NoticeFileChecker.run(new File(args[0]), Paths.get(args[1]));", "prediction": " = 0;\n        int moderateIssueCount = 0;\n        int infoIssueCount     = 0;\n\n        final Path pathMavenBuildOutput = Paths.get(args[0]);\n        final Path pathPaimonRoot = Paths.get(args[1]);\n        final Path pathPaimonDeployed = Paths.get(args[2]);\n\n        final File buildResult = new File(pathMavenBuildOutput.toString(), \"build-result.txt\");\n        if (!buildResult.exists()) {\n            LOG.error(\"Build result file not found at: {}\", buildResult.getAbsolutePath());\n            System.", "first_line_groundtruth": "= NoticeFileChecker.run(new File(args[0]), Paths.get(args[1]));", "first_line_prediction": " = 0;", "match": 0}
{"groundtruth": "severeIssueCount += JarFileChecker.checkPath(Paths.get(args[2]));", "prediction": " // check for scala suffixes\n        severeIssueCount += ScalaSuffixChecker.run(new File(args[0]), Paths.get(args[1]));\n\n        // check for jar files\n        severeIssueCount += JarFileChecker.run(new File(args[0]), Paths.get(args[1]));\n\n        // check for pom files\n        severeIssueCount += PomFileChecker.run(new File(args[0]), Paths.get(args[1]));\n\n        // check for shade files\n        severeIssueCount += ShadeFileChecker.run(new File(args[0]), Paths", "first_line_groundtruth": "severeIssueCount += JarFileChecker.checkPath(Paths.get(args[2]));", "first_line_prediction": " // check for scala suffixes", "match": 0}
{"groundtruth": "DependencyParser.parseDependencyTreeOutput(path);", "prediction": " DependencyParser.parse(path);\n\n        for (final Map.Entry<String, DependencyTree> entry : dependenciesByModule.entrySet()) {\n            final String moduleName = entry.getKey();\n            final DependencyTree dependencyTree = entry.getValue();\n\n            if (EXCLUDED_MODULES.contains(moduleName)) {\n                continue;\n            }\n\n            if (dependencyTree.isScalaFree()) {\n                cleanModules.add(moduleName);\n            } else {\n                infectedModules.add(moduleName);\n            }\n        }\n\n        return new ParseResult(cleanModules, infectedModules);\n    }\n\n    private static Collection<String> checkScala", "first_line_groundtruth": "DependencyParser.parseDependencyTreeOutput(path);", "first_line_prediction": " DependencyParser.parse(path);", "match": 0}
{"groundtruth": "(!noticeContents.getNoticeModuleName().equals(moduleName)) {", "prediction": " (!noticeContents.getLines().get(0).equals(moduleName)) {\n                addProblem(problemsBySeverity, Severity.CRITICAL, \"The first line of the NOTICE file is not the module name.\");\n            }\n\n            // check that all dependencies are listed in the NOTICE file\n            for (Dependency dependency : modulesWithShadedDependencies.get(moduleName)) {\n                if (!noticeContents.getDependencies().contains(dependency)) {\n                    addProblem(\n                            problemsBySeverity,\n                            Severity.CRITICAL,\n                            \"The NOTICE file does not list the dependency \" + dependency);\n                }\n            }\n\n            // check that all dependencies are listed in", "first_line_groundtruth": "(!noticeContents.getNoticeModuleName().equals(moduleName)) {", "first_line_prediction": " (!noticeContents.getLines().get(0).equals(moduleName)) {", "match": 0}
{"groundtruth": "wrapped.stop();", "prediction": " this.wrapped.stop();\n        }\n        catch (StockfishError exc) {\n            return b.errorFunction().call(exc.getMessage());\n        }\n        return LuaValue.NIL;\n    }", "first_line_groundtruth": "wrapped.stop();", "first_line_prediction": " this.wrapped.stop();", "match": 0}
{"groundtruth": "+ dependency.getClassifier().orElse(\"(no-classifier)\");", "prediction": " + dependency.getClassifier();\n    }", "first_line_groundtruth": "+ dependency.getClassifier().orElse(\"(no-classifier)\");", "first_line_prediction": " + dependency.getClassifier();", "match": 0}
{"groundtruth": "final Set<String> deployedModules = DeployParser.parseDeployOutput(buildResult);", "prediction": " // parse NOTICE files from modules\n        final Map<String, NoticeContents> modulesWithNoticeContents =\n                parseNoticeFiles(modulesWithBundledDependencies, root);\n\n        // check NOTICE files for excess dependencies\n        final Map<String, Set<String>> modulesWithExcessDependencies =\n                checkForExcessDependencies(modulesWithNoticeContents);\n\n        // print results\n        printResults(modulesWithExcessDependencies);\n\n        return modulesWithExcessDependencies.values().stream()\n                .flatMap(Collection::stream)\n                .distinct()\n                .count();\n    }\n\n    private static Map<String, Set<Dependency>> combineAndFilterP", "first_line_groundtruth": "final Set<String> deployedModules = DeployParser.parseDeployOutput(buildResult);", "first_line_prediction": " // parse NOTICE files from modules", "match": 0}
{"groundtruth": "= isExcluded(dependency.getArtifactId());", "prediction": " = isExcluded(dependency);\n                if (dependsOnScala && isTestDependency && !isExcluded) {\n                    infected = true;\n                    break;\n                }\n            }\n            if (infected) {\n                infectedModules.add(moduleName);\n            } else {\n                cleanModules.add(moduleName);\n            }\n        }\n\n        return new ParseResult(cleanModules, infectedModules);\n    }\n\n    private static boolean isExcluded(final String moduleName) {\n        return EXCLUDED_MODULES.contains(moduleName);\n    }\n\n    private static boolean dependsOnScala(final Dependency dependency) {\n        return dependency.getArtifact", "first_line_groundtruth": "= isExcluded(dependency.getArtifactId());", "first_line_prediction": " = isExcluded(dependency);", "match": 0}
{"groundtruth": "declaredDependency : noticeContents.getDeclaredDependencies()) {", "prediction": " dependency : noticeContents.getDependencies()) {\n                declaredDependencies.add(dependency);\n            }\n\n            // collect all shaded dependencies from NOTICE file\n            Set<Dependency> shadedDependencies = new HashSet<>();\n            for (Dependency dependency : noticeContents.getDependencies()) {\n                if (dependency.getGroupId().contains(\"org.apache.paimon\")) {\n                    shadedDependencies.add(dependency);\n                }\n            }\n\n            // collect all shaded dependencies from modules\n            Set<Dependency> shadedDependenciesFromModules = new HashSet<>();\n            for (Map.Entry<String, Set<Dependency>> entry : modulesWithShadedDependencies", "first_line_groundtruth": "declaredDependency : noticeContents.getDeclaredDependencies()) {", "first_line_prediction": " dependency : noticeContents.getDependencies()) {", "match": 0}
{"groundtruth": "of(Dependency.create(groupId, artifactId, version, classifier));", "prediction": "of(\n                    Dependency.create(groupId, artifactId, version, classifier));\n        }\n        return Optional.empty();\n    }", "first_line_groundtruth": "of(Dependency.create(groupId, artifactId, version, classifier));", "first_line_prediction": "of(", "match": 0}
{"groundtruth": "(dependency.getArtifactId()).find();", "prediction": "(dependency.getArtifactId()).matches();\n    }\n\n    private static boolean isExcluded(final String artifactId) {\n        return EXCLUDED_MODULES.contains(artifactId);\n    }\n\n    private static Collection<String> checkScalaSuffixes(\n            final ParseResult parseResult,\n            final Path paimonRootPath) {\n        final List<String> violations = new ArrayList<>();\n        for (String moduleName : parseResult.getInfectedModules()) {\n            final Path modulePath = paimonRootPath.resolve(moduleName);\n            final Path moduleBuildPath = modulePath.resolve(\"build.sbt\");\n            if (!Files", "first_line_groundtruth": "(dependency.getArtifactId()).find();", "first_line_prediction": "(dependency.getArtifactId()).matches();", "match": 0}
{"groundtruth": "(policyCtx.getName(), policyCtx.getLabel());", "prediction": "(policyCtx.getPolicyName(), policyCtx.getPolicyLabel());\n\n        isBuilder.setIdentityContext(identityContext);\n        isBuilder.setPolicyContext(policyContext);\n        isBuilder.setPolicyInstance(policy);\n\n        if (values != null) {\n            for (Map.Entry<String, Value> entry : values.entrySet()) {\n                isBuilder.putValues(entry.getKey(), entry.getValue());\n            }\n        }\n\n        IsResponse response = client.is(isBuilder.build());\n\n        return response.getResultList();\n    }\n\n    public Struct query(String query, PolicyCtx policyContext,", "first_line_groundtruth": "(policyCtx.getName(), policyCtx.getLabel());", "first_line_prediction": "(policyCtx.getPolicyName(), policyCtx.getPolicyLabel());", "match": 0}
{"groundtruth": "NoticeParser.parseNoticeFile(noticeFile);", "prediction": " NoticeParser.parseNoticeFile(noticeFile);\n                                            } catch (IOException e) {\n                                                LOG.error(\"Failed to parse NOTICE file: \" + noticeFile, e);\n                                                return Optional.empty();\n                                            }\n                                        }));\n\n        final Map<String, Set<String>> moduleToBundledDependencies =\n                modulesWithBundledDependencies.entrySet().stream()\n                                            .collect(\n                                                    Collectors.toMap(\n                                                            Map.Entry::getKey,\n                                                            entry ->\n                                                                    entry.getValue().stream()\n                                                                            .map(Dependency::toString)\n                                                                            .collect(\n                                                                                    Collectors.toSet())));\n\n        final Map<String, Set<String", "first_line_groundtruth": "NoticeParser.parseNoticeFile(noticeFile);", "first_line_prediction": " NoticeParser.parseNoticeFile(noticeFile);", "match": 0}
{"groundtruth": "identityContext.getIdentityType());", "prediction": "identityContext.getIdentityType());\n\n        return identityContextBuilder.build();\n    }\n\n    private PolicyContext buildPolicyContext(PolicyCtx policyContext) {\n        PolicyContext.Builder policyContextBuilder = PolicyContext.newBuilder();\n        policyContextBuilder.setPath(policyContext.getPath());\n        policyContextBuilder.setDecisions(Arrays.asList(policyContext.getDecisions()));\n\n        return policyContextBuilder.build();\n    }\n\n    private Struct.Builder buildResourceContext(Map<String, Value> values) {\n        Struct.Builder structBuilder = Struct.newBuilder();\n        for (Map.Entry<String, Value>", "first_line_groundtruth": "identityContext.getIdentityType());", "first_line_prediction": "identityContext.getIdentityType());", "match": 1}
{"groundtruth": ".get(module).flatten().collect(Collectors.toList());", "prediction": ".get(moduleName).getDependencies();\n            final List<Dependency> testDependencies =\n                    dependenciesByModule.get(moduleName).getTestDependencies();\n\n            final List<Dependency> testDependenciesWithScalaSuffix =\n                    testDependencies.stream()\n                            .filter(dependency -> dependency.getArtifactId().endsWith(\"_2.11\"))\n                            .collect(Collectors.toList());\n\n            if (testDependenciesWithScalaSuffix.isEmpty()) {\n                cleanModules.add(moduleName);\n            } else {\n                infectedModules.add(moduleName);\n            }\n        }\n\n        return new ParseResult(cleanModules, infectedModules);\n    }\n\n    private", "first_line_groundtruth": ".get(module).flatten().collect(Collectors.toList());", "first_line_prediction": ".get(moduleName).getDependencies();", "match": 0}
{"groundtruth": "PolicyInstance policy = buildPolicy(policyContext.getName(), policyContext.getLabel());", "prediction": " PolicyContext policyContextBuilder = buildPolicyContext(policyContext);\n         Struct.Builder resourceContextBuilder = buildResourceContext(values);\n\n        queryRequestBuilder.setPolicyContext(policyContextBuilder);\n        queryRequestBuilder.setResourceContext(resourceContextBuilder);\n\n        QueryResponse queryResponse = client.query(queryRequestBuilder.build());\n\n        return queryResponse.getResponse();\n    }\n\n    public Map<String, Value> decisionTree(IdentityCtx identityCtx, PolicyCtx policyCtx) {\n        DecisionTreeRequest.Builder decisionTreeRequestBuilder = DecisionTreeRequest.newBuilder();\n\n        IdentityContext identityContext = buildIdentityContext(identityCtx);\n        Policy", "first_line_groundtruth": "PolicyInstance policy = buildPolicy(policyContext.getName(), policyContext.getLabel());", "first_line_prediction": " PolicyContext policyContextBuilder = buildPolicyContext(policyContext);", "match": 0}
{"groundtruth": "return ParserUtils.parsePluginOutput(\n                lines.filter(line -> !line.contains(\" Excluding \")),\n                SHADE_NEXT_MODULE_PATTERN,\n                ShadeParser::parseBlock);", "prediction": " return ParserUtils.parsePluginOutput(\n                 lines,\n                 SHADE_NEXT_MODULE_PATTERN,\n                 ShadeParser::parseShadeBlock);\n    }\n\n    private static Set<Dependency> parseShadeBlock(Iterator<String> block) {\n        final Set<Dependency> dependencies = new LinkedHashSet<>();\n        Optional<Dependency> parsedDependency = parseShadeDependency(block.next());\n        while (parsedDependency.isPresent()) {\n            dependencies.add(parsedDependency.get());\n            if (block.hasNext()) {\n                parsedDependency = parseShadeDependency(block.next());\n            } else {\n                parsedDependency = Optional.empty", "first_line_groundtruth": "return ParserUtils.parsePluginOutput(", "first_line_prediction": " return ParserUtils.parsePluginOutput(", "match": 0}
{"groundtruth": "configIntermediary.updateConfigByObject(className, configObjString);", "prediction": " JSONObject configObj = JSONObject.parseObject(configObjString);\n        ConfigSupport configByObject = configIntermediary.getConfigByObject(className);\n        configByObject.setConfig(configObj);\n        configByObject.updateConfig();\n        responseWriter(response, configByObject);\n    }\n\n    private void responseWriter(HttpServletResponse response, ConfigSupport configByObject) throws IOException {\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        response.getWriter().write(JSONObject.toJSONString(configByObject));\n    }", "first_line_groundtruth": "configIntermediary.updateConfigByObject(className, configObjString);", "first_line_prediction": " JSONObject configObj = JSONObject.parseObject(configObjString);", "match": 0}
{"groundtruth": "gitClient.listTags();", "prediction": " gitClient.getAllTags();\n    } catch (GitAPIException | IOException e) {\n      log.error(\"Unable to get all tags due to: [{}]\", e.getMessage(), e);\n      throw new RuntimeException(e);\n    }\n\n    Collections.sort(tags);\n    return tags;\n  }\n\n  private void generateChangelog(JGit gitClient, JiraClient jiraClient, ChangelogGenerator changelogGenerator, String tagName, List<String> issueKeys) {\n    try {\n      changelogGenerator.generateChangelog(gitClient, jiraClient, tagName, issueKeys);\n    } catch (MissingObjectException e)", "first_line_groundtruth": "gitClient.listTags();", "first_line_prediction": " gitClient.getAllTags();", "match": 0}
{"groundtruth": "gitClient.commitChangelogTagAndPush(tagName);", "prediction": " gitClient.commitAndTag(tagName);\n       gitClient.mergeChangelogBranchIntoWorkingTrunk(tagName);\n       gitClient.push();\n    } catch (GitAPIException | MissingObjectException e) {\n      log.error(\"Exception: [{}]\", e.getMessage(), e);\n      throw new RuntimeException(e);\n    }\n\n    log.info(\"Changelog generation complete!\");\n  }\n\n  private String processGenerateChangelogRequest(JGit gitClient, JiraClient jiraClient, ChangelogGenerator changelogGenerator, List<String> tags, String[] inputArgument) {\n    String tagName = null;\n    if (input", "first_line_groundtruth": "gitClient.commitChangelogTagAndPush(tagName);", "first_line_prediction": " gitClient.commitAndTag(tagName);", "match": 0}
{"groundtruth": "> issueKeys = gitClient.getAllIssuesSinceLastTag();", "prediction": "> newTags = gitClient.incrementVersion(tags, versioningStrategy);\n        tagName = newTags.get(newTags.size() - 1);\n      } else {\n        tagName = gitClient.generateChangelogTag(tags);\n      }\n    } catch (GitAPIException | IOException e) {\n      log.error(\"Unable to generate the changelog due to: [{}]\", e.getMessage(), e);\n      throw new RuntimeException(e);\n    }\n\n    log.info(\"Generating changelog for tag: [{}]\", tagName);\n    List<Issue> issues = jiraClient.getIssuesForTag(tagName);\n   ", "first_line_groundtruth": "> issueKeys = gitClient.getAllIssuesSinceLastTag();", "first_line_prediction": "> newTags = gitClient.incrementVersion(tags, versioningStrategy);", "match": 0}
{"groundtruth": ".generateChangelogFromExisting(gitClient.getWorkingDir(), tagName, jiraIssues);", "prediction": ".generateChangelog(gitClient, jiraIssues, tagName);\n  }", "first_line_groundtruth": ".generateChangelogFromExisting(gitClient.getWorkingDir(), tagName, jiraIssues);", "first_line_prediction": ".generateChangelog(gitClient, jiraIssues, tagName);", "match": 0}
{"groundtruth": "ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));", "prediction": " ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));\n                 this.insert(config);\n            }\n        }\n        return configSupport;\n    }\n\n    @Override\n    default <T extends ConfigSupport> T get(Class<T> tClass) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        T t = tClass.getDeclaredConstructor().newInstance();\n        return this.get(t);\n    }\n\n    @Override\n    default List<ConfigPlus> getConfigByCategoryAndCode(String configCategory, Object[] configCodes) {", "first_line_groundtruth": "ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));", "first_line_prediction": " ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));", "match": 0}
{"groundtruth": "Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));", "prediction": " Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));\n                entityManager.persist(config);\n            }\n        }\n        return configSupport;\n    }\n\n    @Override\n    public <T extends ConfigSupport> T get(Class<T> tClass) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        T t = tClass.getDeclaredConstructor().newInstance();\n        return this.get(t);\n    }\n\n    private List<Config> getConfigByCategoryAndCode(String configCategory, Object[] configCodes) {\n        CriteriaBuilder builder = entityManager.getC", "first_line_groundtruth": "Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));", "first_line_prediction": " Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));", "match": 0}
{"groundtruth": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");", "prediction": "substring(requestURI.lastIndexOf(\"/\") + 1);\n        if (className.startsWith(\"get\")) {\n            className = className.substring(2);\n            ConfigSupport configObj = configIntermediary.fineelyConfigService.get(className);\n            if (configObj != null) {\n                response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n                response.getWriter().write(JSONObject.toJSONString(configObj));\n            } else {\n                response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            }\n        } else if (className.startsWith(\"update\")) {\n            className = className.substring(5", "first_line_groundtruth": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");", "first_line_prediction": "substring(requestURI.lastIndexOf(\"/\") + 1);", "match": 0}
{"groundtruth": "> issueKeys = gitClient.getIssuesWithinTag(tagName);", "prediction": "> issueKeys = gitClient.getAllIssuesSinceLastTag();\n\n        generateChangelog(gitClient, jiraClient, changelogGenerator, tagName, issueKeys);\n      } else {\n        tagName = tags.get(tags.size() - 1);\n\n        List<String> issueKeys = gitClient.getAllIssuesSinceLastTag();\n\n        generateChangelog(gitClient, jiraClient, changelogGenerator, tagName, issueKeys);\n      }\n    } catch (GitAPIException | IOException | URISyntaxException e) {\n      log.error(\"Unable to generate the changelog due to: [{}]\", e.getMessage(), e);", "first_line_groundtruth": "> issueKeys = gitClient.getIssuesWithinTag(tagName);", "first_line_prediction": "> issueKeys = gitClient.getAllIssuesSinceLastTag();", "match": 0}
{"groundtruth": "<Issue> jiraIssues = jiraClient.getIssueList(jiraIssueKeys);", "prediction": "<Issue> issues = jiraClient.getIssues(jiraIssueKeys);\n    changelogGenerator.generateChangelog(gitClient, tagName, issues);\n  }", "first_line_groundtruth": "<Issue> jiraIssues = jiraClient.getIssueList(jiraIssueKeys);", "first_line_prediction": "<Issue> issues = jiraClient.getIssues(jiraIssueKeys);", "match": 0}
{"groundtruth": "withRegion(null != config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)\n                .withClientConfiguration(configuration)\n                .build();", "prediction": "withEndpointConfiguration(config.getEndpointConfiguration())\n                 .withClientConfiguration(configuration)\n                 .build();\n\n        writer = new DataWriter(client, config.getPersonalizeDataset(), config.getPersonalizeEventStream(), config.getPersonalizeRoleArn(), config.getPersonalizeBatchSize(), config.getPersonalizeBatchWaitTime(), config.getPersonalizeBatchRetryTime(), config.getPersonalizeBatchRetryDelay(), config.getPersonalizeBatchRetryDelayType(), config.getPersonalizeBatchRetryDelayTimeUnit(), config.getPersonalizeBatchRetryDelayTimeUnit(), config.getPersonalizeBatchRetryDelayTimeUnit", "first_line_groundtruth": "withRegion(null != config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)", "first_line_prediction": "withEndpointConfiguration(config.getEndpointConfiguration())", "match": 0}
{"groundtruth": "writer.closeQuietly();", "prediction": " log.error(\"Retrying {} times\", retryAttempts);\n             remainingRetries = retryAttempts - 1;\n             for (SinkRecord record : records) {\n                 reporter.report(record);\n             }\n        } else {\n            log.error(\"Giving up after {} retries\", retryAttempts);\n            for (SinkRecord record : records) {\n                reporter.report(record);\n            }\n        }\n    }\n\n    @Override\n    public void flush(Map<TopicPartition, OffsetAndMetadata> offsets) {\n        log.info(\"Flushing Amazon Personalize Sink task\");\n        writer.flush();\n    }\n\n    @Override\n   ", "first_line_groundtruth": "writer.closeQuietly();", "first_line_prediction": " log.error(\"Retrying {} times\", retryAttempts);", "match": 0}
{"groundtruth": "(config.getMaxRetries());", "prediction": "(config.getMaxRetries());\n        AmazonPersonalizeEvents client = new AmazonPersonalizeEventsClient(configuration);\n        writer = new DataWriter(client, config, reporter);\n    }\n\n    @Override\n    public void put(Collection<SinkRecord> records) {\n        for (SinkRecord record : records) {\n            try {\n                writer.putItem(record);\n            } catch (Exception e) {\n                log.error(\"Error in Put Items API\", e);\n                if (remainingRetries > 0) {\n                    remainingRetries--;\n                    log.error(\"Retrying Put Items API call\");\n                    continue;\n                }\n                throw", "first_line_groundtruth": "(config.getMaxRetries());", "first_line_prediction": "(config.getMaxRetries());", "match": 1}
{"groundtruth": "\"chat\", token.chat().id())\n      .fetch()\n      .first()\n      .then();", "prediction": "\n            \"chat\",\n            token.chat().id()\n         )\n       .fetch()\n       .rowsUpdated();\n  }", "first_line_groundtruth": "\"chat\", token.chat().id())", "first_line_prediction": "", "match": 0}
{"groundtruth": "!= config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)\n                .withClientConfiguration(configuration)\n                .build();", "prediction": " // TODO: Add region to config\n                )\n                 .withClientConfiguration(configuration)\n                 .build();\n\n        writer = new DataWriter(client, config, reporter);\n    }\n\n    @Override\n    public void put(Collection<SinkRecord> records) {\n        try {\n            writer.write(records);\n        } catch (Exception e) {\n            log.error(\"Error writing records to Personalize\", e);\n            if (null != reporter) {\n                reporter.report(Collections.singleton(new SinkRecord(\n                        config.getTopic(),\n                        null,\n                        null,\n                        null,\n                        null,\n                        e\n                ", "first_line_groundtruth": "!= config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)", "first_line_prediction": " // TODO: Add region to config", "match": 0}
{"groundtruth": "methodLog.setStartTime(startTime);", "prediction": " methodLog.setArgs(args);\n         methodLog.setReturning(returning);\n         methodLog.setExceptionInfo(exceptionInfo);\n         methodLog.setIpAddress(ipAddress);\n         methodLog.setUrl(url);\n         methodLog.setModule(module);\n         methodLog.setMethod(methodName);\n         methodLog.setMethods(Arrays.toString(methods));\n         methodLog.setTimeConsuming(timeConsuming);\n         methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setStartTime(startTime);", "first_line_prediction": " methodLog.setArgs(args);", "match": 0}
{"groundtruth": "methodLog.setOperator(\"system\");", "prediction": " methodLog.setOperator(ipAddress);\n        }\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setOperator(\"system\");", "first_line_prediction": " methodLog.setOperator(ipAddress);", "match": 0}
{"groundtruth": ".bind(\"id\", chat.id())\n      .fetch()\n      .first()\n      .then();", "prediction": "\n       .bind(\"id\", chat.id())\n       .fetch()\n       .first()\n       .flatMap(rows -> Mono.empty())\n       .then();\n  }", "first_line_groundtruth": ".bind(\"id\", chat.id())", "first_line_prediction": "", "match": 0}
{"groundtruth": "methodLog.setMethodName(methodName);", "prediction": " methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setArgs(args);\n        methodLog.setReturning(returning);\n        methodLog.setIp(ipAddress);\n        methodLog.setUrl(url);\n        methodLog.setModule(module);\n        methodLog.setMethod(methodName);\n        methodLog.setMethods(Arrays.toString(methods));\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setMethodName(methodName);", "first_line_prediction": " methodLog.setExceptionInfo(exceptionInfo);", "match": 0}
{"groundtruth": "methodLog.setAllParams(args);", "prediction": " methodLog.setArgs(args);\n        methodLog.setReturning(returning);\n        methodLog.setIpAddress(ipAddress);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setOperator(MethodLogUtils.getOperator());\n        methodLog.setCreateTime(LocalDateTime.now());\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethod(methods);\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setAllParams(args);", "first_line_prediction": " methodLog.setArgs(args);", "match": 0}
{"groundtruth": "methodLog.setCreateTime(startTime);", "prediction": "", "first_line_groundtruth": "methodLog.setCreateTime(startTime);", "first_line_prediction": "", "match": 0}
{"groundtruth": "methodLog.setTimeConsuming(timeConsuming);", "prediction": " methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setIp(ipAddress);\n        methodLog.setArgs(args);\n        methodLog.setReturning(returning);\n        methodLog.setUrl(url);\n        methodLog.setModule(module);\n        methodLog.setMethod(methodName);\n        methodLog.setMethods(Arrays.toString(methods));\n        methodLog.setTimeConsuming(timeConsuming);\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setTimeConsuming(timeConsuming);", "first_line_prediction": " methodLog.setExceptionInfo(exceptionInfo);", "match": 0}
{"groundtruth": "methodLog.setExceptionInfo(exceptionInfo);", "prediction": " methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setOperator(CommonConstants.DEFAULT_OPERATOR);\n        methodLog.setCreateTime(LocalDateTime.now());\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethod(Arrays.toString(methods));\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setExceptionInfo(exceptionInfo);", "first_line_prediction": " methodLog.setExceptionInfo(exceptionInfo);", "match": 0}
{"groundtruth": "methodLog.setIpAddress(ipAddress);", "prediction": " methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setIpAddress(ipAddress);\n        methodLog.setOperator(CommonConstants.DEFAULT_OPERATOR);\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethod(methods);\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setIpAddress(ipAddress);", "first_line_prediction": " methodLog.setExceptionInfo(exceptionInfo);", "match": 0}
{"groundtruth": "methodLog.setResult(returning);", "prediction": " methodLog.setResult(returning);\n        methodLog.setIpAddress(ipAddress);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setOperator(MethodLogUtils.getOperator());\n        methodLog.setCreateTime(LocalDateTime.now());\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setResult(returning);", "first_line_prediction": " methodLog.setResult(returning);", "match": 0}
{"groundtruth": "methodLog.setDesc(finishedDesc);", "prediction": " methodLog.setIp(ipAddress);\n         methodLog.setModule(module);\n         methodLog.setUrl(url);\n         methodLog.setMethod(methodName);\n         methodLog.setArgs(args);\n         methodLog.setReturning(returning);\n         methodLog.setFinishedDesc(finishedDesc);\n         methodLog.setExceptionInfo(exceptionInfo);\n         methodLog.setTimeConsuming(timeConsuming);\n         methodLog.setMethods(Arrays.toString(methods));\n         methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setDesc(finishedDesc);", "first_line_prediction": " methodLog.setIp(ipAddress);", "match": 0}
{"groundtruth": "methodLog.setEndTime(endTime);", "prediction": " if (Objects.nonNull(endTime)) {\n            methodLog.setEndTime(endTime);\n        }\n        methodLog.setIp(ipAddress);\n        methodLog.setArgs(args);\n        methodLog.setReturning(returning);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethod(methodName);\n        methodLog.setMethods(Arrays.toString(methods));\n        methodLog.setTimeConsuming(timeConsuming);\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setEndTime(endTime);", "first_line_prediction": " if (Objects.nonNull(endTime)) {", "match": 0}
{"groundtruth": "movimentacaoRepository.findByVeiculoId(id).isEmpty()){", "prediction": "movimentacaoRepository.findByCondutor(condutorBanco).isEmpty()){\n            throw new IllegalArgumentException(\"N\u00e3o \u00e9 poss\u00edvel excluir um condutor que possui movimenta\u00e7\u00f5es\");\n        }\n\n        this.condutorRepository.delete(condutorBanco);\n    }\n\n    /**\n     * Validates if a Condutor ID exists in the database.\n     *\n     * @param id The ID of the Condutor to be validated.\n     * @throws IllegalArgumentException If the Condutor ID does not exist in the database.\n     */\n    public void validarIdCondutor(Long id) {\n        final Optional<Cond", "first_line_groundtruth": "movimentacaoRepository.findByVeiculoId(id).isEmpty()){", "first_line_prediction": "movimentacaoRepository.findByCondutor(condutorBanco).isEmpty()){", "match": 0}
{"groundtruth": ".marcaRepository.findByNome(nome));", "prediction": ".marcaRepository.findByNome(nome));\n    }\n\n    @PostMapping\n    public ResponseEntity<?> create(@Validated @RequestBody Marca marca) {\n        try {\n            marcaRepository.save(marca);\n            return ResponseEntity.ok(marca);\n        } catch (DataIntegrityViolationException e) {\n            return ResponseEntity.badRequest().body(\"J\u00e1 existe uma marca com esse nome\");\n        }\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<?> update(@PathVariable(\"id\") Long id, @Validated @RequestBody Marca marca) {\n        marca.setId(id);\n        mar", "first_line_groundtruth": ".marcaRepository.findByNome(nome));", "first_line_prediction": ".marcaRepository.findByNome(nome));", "match": 1}
{"groundtruth": "return ResponseEntity.ok(condutorRepository.findAllAtivo());", "prediction": " List<Condutor> condutorList = this.condutorRepository.findAllAtivo();\n         if (condutorList == null || condutorList.isEmpty()) {\n             return ResponseEntity.badRequest().body(\"N\u00e3o h\u00e1 nenhum condutor ativo\");\n         } else {\n             return ResponseEntity.ok(condutorList);\n         }\n     }", "first_line_groundtruth": "return ResponseEntity.ok(condutorRepository.findAllAtivo());", "first_line_prediction": " List<Condutor> condutorList = this.condutorRepository.findAllAtivo();", "match": 0}
{"groundtruth": "marcaService.validarDeleteMarca(id);", "prediction": " marcaService.validarDeleteMarca(id);\n             return ResponseEntity.ok(\"Registro apagado com sucesso\");\n         } catch (IllegalArgumentException e) {\n             return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n         }\n     }", "first_line_groundtruth": "marcaService.validarDeleteMarca(id);", "first_line_prediction": " marcaService.validarDeleteMarca(id);", "match": 0}
{"groundtruth": "<Veiculo> veiculoList = veiculoRepository.findAllAtivo();", "prediction": "<Veiculo> veiculoList = veiculoRepository.findAllAtivo();\n        if (veiculoList == null || veiculoList.isEmpty()) {\n            return ResponseEntity.badRequest().body(\"N\u00e3o h\u00e1 nenhum ve\u00edculo ativo\");\n        } else {\n            return ResponseEntity.ok(veiculoList);\n        }\n    }", "first_line_groundtruth": "<Veiculo> veiculoList = veiculoRepository.findAllAtivo();", "first_line_prediction": "<Veiculo> veiculoList = veiculoRepository.findAllAtivo();", "match": 1}
{"groundtruth": "= this.veiculoRepository.findByPlaca(placa);", "prediction": " = veiculoRepository.findByPlaca(placa);\n        return ResponseEntity.ok(veiculo);\n    }\n\n    /**\n     * Registers a new Veiculo.\n     *\n     * @param veiculo The Veiculo object to register.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PostMapping\n    public ResponseEntity<?> register(@Validated @RequestBody Veiculo veiculo) {\n        final Veiculo savedVeiculo = this.veiculoRepository.save(veiculo);\n        return ResponseEntity.ok(savedVeiculo);\n    }\n\n    /**\n     * Updates an existing Veiculo.\n     *\n     * @", "first_line_groundtruth": "= this.veiculoRepository.findByPlaca(placa);", "first_line_prediction": " = veiculoRepository.findByPlaca(placa);", "match": 0}
{"groundtruth": "!this.movimentacaoRepository.findByVeiculoId(id).isEmpty()) {", "prediction": "veiculo.getMovimentacoes().size() > 0) {\n            throw new IllegalArgumentException(\"Vehicle has movimentations !\");\n        }\n\n        this.veiculoRepository.delete(veiculo);\n    }\n\n    /**\n     * Realiza valida\u00e7\u00f5es para cadastrar um novo modelo no sistema.\n     *\n     * @param modelo o objeto Modelo a ser validado.\n     * @throws IllegalArgumentException se alguma das valida\u00e7\u00f5es n\u00e3o passar.\n     */\n    @Transactional\n    public void validarCadastroModelo(Modelo modelo) {\n\n        modelo.setCadastro(LocalDateTime.now());\n\n        Assert.isTrue(modelo", "first_line_groundtruth": "!this.movimentacaoRepository.findByVeiculoId(id).isEmpty()) {", "first_line_prediction": "veiculo.getMovimentacoes().size() > 0) {", "match": 0}
{"groundtruth": "Condutor condutor = this.condutorRepository.findbyCPF(cpf);", "prediction": " Condutor condutor = this.condutorRepository.findByCpf(cpf);\n\n        if (condutor == null || condutor.getCpf() == null) {\n            return ResponseEntity.badRequest().body(\"cpf inv\u00e1lido\");\n        }\n\n        return ResponseEntity.ok(condutor);\n    }", "first_line_groundtruth": "Condutor condutor = this.condutorRepository.findbyCPF(cpf);", "first_line_prediction": " Condutor condutor = this.condutorRepository.findByCpf(cpf);", "match": 0}
{"groundtruth": "(!this.modeloRepository.findByMarcaId(id).isEmpty()){", "prediction": "(!this.modeloRepository.findByMarcaId(id).isEmpty()){\n            marca.setAtivo(false);\n            marcaRepository.save(marca);\n        }else{\n            marcaRepository.delete(marca);\n        }\n    }\n\n    /**\n     * Validates if a brand ID exists in the database.\n     *\n     * @param id The ID of the brand to be validated.\n     * @throws IllegalArgumentException If the brand ID does not exist in the database.\n     */\n    private void validarIdMarca(Long id) {\n        Assert.notNull(id, \"The brand ID cannot be", "first_line_groundtruth": "(!this.modeloRepository.findByMarcaId(id).isEmpty()){", "first_line_prediction": "(!this.modeloRepository.findByMarcaId(id).isEmpty()){", "match": 1}
{"groundtruth": "veiculoService.validarDeleteVeiculo(id);", "prediction": " veiculoService.validarDeleteVeiculo(id);\n             return ResponseEntity.ok(\"Registro apagado com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }", "first_line_groundtruth": "veiculoService.validarDeleteVeiculo(id);", "first_line_prediction": " veiculoService.validarDeleteVeiculo(id);", "match": 0}
{"groundtruth": "modeloService.validarDeleteModelo(id);", "prediction": " modeloService.validarDeleteModelo(id);\n             return ResponseEntity.ok(\"Registro apagado com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }", "first_line_groundtruth": "modeloService.validarDeleteModelo(id);", "first_line_prediction": " modeloService.validarDeleteModelo(id);", "match": 0}
{"groundtruth": "condutor = this.condutorRepository.findByNome(nome);", "prediction": " condutor = condutorRepository.findByNome(nome);\n        return condutor == null ? ResponseEntity.badRequest().body(\"Nome n\u00e3o encontrado\") : ResponseEntity.ok(condutor);\n    }\n\n    @GetMapping(\"/marca\")\n    public ResponseEntity<?> getByMarca(@RequestParam(\"marca\") String marca) {\n        final Marca marcaEntity = marcaRepository.findByNome(marca);\n        return marcaEntity == null ? ResponseEntity.badRequest().body(\"Marca n\u00e3o encontrada\") : ResponseEntity.ok(marcaEntity);\n    }\n\n    @GetMapping(\"/veiculo\")\n    public ResponseEntity<?> getBy", "first_line_groundtruth": "condutor = this.condutorRepository.findByNome(nome);", "first_line_prediction": " condutor = condutorRepository.findByNome(nome);", "match": 0}
{"groundtruth": "= movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();", "prediction": " = movimentacaoRepository.findLastFiveMovimentacoes();\n        return ResponseEntity.ok(lastFiveMovimentacoes);\n    }\n\n    @GetMapping(\"/last-month\")\n    public ResponseEntity<?> findMovimentacoesLastMonth() {\n        List<Movimentacao> lastMonthMovimentacoes  = movimentacaoRepository.findLastMonthMovimentacoes();\n        return ResponseEntity.ok(lastMonthMovimentacoes);\n    }\n\n    @GetMapping(\"/last-year\")\n    public ResponseEntity<?> findMovimentacoesLastYear() {\n        List<Movimentacao> lastYearMovimentacoes  = movimentacaoRepository.findLast", "first_line_groundtruth": "= movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();", "first_line_prediction": " = movimentacaoRepository.findLastFiveMovimentacoes();", "match": 0}
{"groundtruth": ".ok(movimentacaoRepository.ultimaMovimentacao());", "prediction": ".ok(movimentacaoRepository.findLastByOrderByEntryDateDesc());\n    }", "first_line_groundtruth": ".ok(movimentacaoRepository.ultimaMovimentacao());", "first_line_prediction": ".ok(movimentacaoRepository.findLastByOrderByEntryDateDesc());", "match": 0}
{"groundtruth": "ok(marcaRepository.findAllAtivo());", "prediction": "ok(this.marcaRepository.findAllAtivo());\n    }\n\n    /**\n     * Creates a new Marca.\n     *\n     * @param marca The Marca object to create.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PostMapping\n    public ResponseEntity<?> createMarca(@Validated @RequestBody Marca marca) {\n        try {\n            marcaRepository.save(marca);\n            return ResponseEntity.ok(marca);\n        } catch (DataIntegrityViolationException e) {\n            return ResponseEntity.badRequest().body(\"J\u00e1 existe uma marca com esse nome\");", "first_line_groundtruth": "ok(marcaRepository.findAllAtivo());", "first_line_prediction": "ok(this.marcaRepository.findAllAtivo());", "match": 0}
{"groundtruth": "<Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertasByPlaca(placa);", "prediction": "<Movimentacao> movimentacoes = movimentacaoRepository.findByPlaca(placa);\n            return movimentacoes.isEmpty() ? ResponseEntity.badRequest().body(\"Movimenta\u00e7\u00e3o n\u00e3o encontrada\") : ResponseEntity.ok(movimentacoes);\n        }\n        // Perform a search based on the status (open or closed)\n        List<Movimentacao> movimentacoes = movimentacaoRepository.findByStatus(true);\n        return movimentacoes.isEmpty() ? ResponseEntity.badRequest().body(\"Movimenta\u00e7\u00e3o n\u00e3o encontrada\") : ResponseEntity.ok(movimentacoes);\n    }", "first_line_groundtruth": "<Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertasByPlaca(placa);", "first_line_prediction": "<Movimentacao> movimentacoes = movimentacaoRepository.findByPlaca(placa);", "match": 0}
{"groundtruth": ".ok(this.modeloRepository.findByNome(nome));", "prediction": ".ok(modeloRepository.findByNome(nome));\n    }\n\n    @GetMapping(\"/marca/{id}\")\n    public ResponseEntity<?> getByMarcaId(@PathVariable(\"id\") Long id) {\n        return ResponseEntity.ok(modeloRepository.findByMarcaId(id));\n    }\n\n    @GetMapping(\"/placa/{placa}\")\n    public ResponseEntity<?> getByPlaca(@PathVariable(\"placa\") String placa) {\n        final Modelo modelo = modeloRepository.findByPlaca(placa);\n        if (modelo == null || modelo.getPlaca() == null) {\n            return ResponseEntity.badRequest().body(\"plac", "first_line_groundtruth": ".ok(this.modeloRepository.findByNome(nome));", "first_line_prediction": ".ok(modeloRepository.findByNome(nome));", "match": 0}
{"groundtruth": "> modeloList = modeloRepository.findAllAtivo();", "prediction": "> modeloList = modeloRepository.findAllAtivo();\n        if (modeloList == null || modeloList.isEmpty()) {\n            return ResponseEntity.badRequest().body(\"N\u00e3o tem nenhum modelo ativo\");\n        } else {\n            return ResponseEntity.ok(modeloList);\n        }\n    }\n\n    /**\n     * Creates a new Modelo.\n     *\n     * @param modelo The Modelo object to create.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PostMapping\n    public ResponseEntity<?> registerModelo(@RequestBody @Validated final Modelo modelo) {\n        try {\n            modeloService.valid", "first_line_groundtruth": "> modeloList = modeloRepository.findAllAtivo();", "first_line_prediction": "> modeloList = modeloRepository.findAllAtivo();", "match": 1}
{"groundtruth": ".ok(configuracaoRepository.ultimaConfiguracao());", "prediction": ".ok(configuracaoService.getLast());\n    }\n\n    @PostMapping\n    public ResponseEntity<?> saveRequest(@Validated @RequestBody Configuracao configuracao) {\n        return ResponseEntity.ok(configuracaoService.save(configuracao));\n    }", "first_line_groundtruth": ".ok(configuracaoRepository.ultimaConfiguracao());", "first_line_prediction": ".ok(configuracaoService.getLast());", "match": 0}
{"groundtruth": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();", "prediction": "Movimentacao> movimentacoes = movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();\n            return ResponseEntity.ok(movimentacoes);\n        }\n    }", "first_line_groundtruth": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();", "first_line_prediction": "Movimentacao> movimentacoes = movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();", "match": 0}
{"groundtruth": "if (!this.modeloRepository.findByMarcaId(id).isEmpty()) {", "prediction": " // Verificar se o modelo est\u00e1 em uso\n        final List<Veiculo> veiculos = this.veiculoRepository.findByModeloId(id);\n        Assert.isTrue(veiculos.isEmpty(), \"O modelo n\u00e3o pode ser exclu\u00eddo porque est\u00e1 em uso!\");\n\n        modeloRepository.delete(modelo);\n    }\n\n    /**\n     * Retrieves all modelos.\n     *\n     * @return ResponseEntity with a list of all modelos.\n     */\n    public Page<Modelo> listAll(Pageable pageable) {\n        return this.modeloRepository.findAll(pageable);\n    }\n\n    /**\n     * Retrieves", "first_line_groundtruth": "if (!this.modeloRepository.findByMarcaId(id).isEmpty()) {", "first_line_prediction": " // Verificar se o modelo est\u00e1 em uso", "match": 0}
{"groundtruth": "= marcaRepository.findActiveElement(marcaId);", "prediction": " = this.marcaRepository.findByAtivo(true);\n        Assert.isTrue(isActive.stream().anyMatch(marca -> marca.getId().equals(marcaId)),\n                \"N\u00e3o foi poss\u00edvel apagar o modelo, pois a marca n\u00e3o est\u00e1 ativa.\");\n    }\n\n    /**\n     * Validates if the model is active.\n     *\n     * @param modeloId The ID of the model to be validated.\n     * @throws IllegalArgumentException If the model is inactive.\n     */\n    private void validarModeloAtivo(Long modeloId) {\n        final List<Modelo> isActive", "first_line_groundtruth": "= marcaRepository.findActiveElement(marcaId);", "first_line_prediction": " = this.marcaRepository.findByAtivo(true);", "match": 0}
{"groundtruth": "movimentacaoService.validarDeleteMovimentacao(id);", "prediction": " movimentacaoService.validarDeleteMovimentacao(id);\n             return ResponseEntity.ok(\"Registro apagado com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }", "first_line_groundtruth": "movimentacaoService.validarDeleteMovimentacao(id);", "first_line_prediction": " movimentacaoService.validarDeleteMovimentacao(id);", "match": 0}
{"groundtruth": "<Boolean>newResult().data(dao.deleteComposition(composerId, title)).build();", "prediction": "newResult().data(dao.deleteComposition(composerId, title));\n        }\n        catch (EmptyResultDataAccessException e)\n        {\n            throw new GraphqlErrorException(\"No composition found with title \" + title, e);\n        }\n    }\n\n    private UnaryOperator<Composer> selectIfPresent(String value, Function<Composer, String> getter)\n    {\n        return c -> Objects.nonNull(value) && value.equals(getter.apply(c)) ? c : null;\n    }", "first_line_groundtruth": "<Boolean>newResult().data(dao.deleteComposition(composerId, title)).build();", "first_line_prediction": "newResult().data(dao.deleteComposition(composerId, title));", "match": 0}
{"groundtruth": "(dao.allComposers()).detect(c -> id == c.id());", "prediction": "(this.dao.findById(id)).getFirst();\n    }\n\n    @QueryMapping\n    public List<Composer> composers()\n    {\n        return ListAdapter.adapt(this.dao.findAll());\n    }\n\n    @MutationMapping\n    public ComposerInput createComposer(@Argument ComposerInput input)\n    {\n        return input;\n    }\n\n    @MutationMapping\n    public ComposerInput updateComposer(@Argument int id, @Argument ComposerInput input)\n    {\n        return input;\n    }\n\n    @MutationMapping\n    public boolean deleteComposer(@Argument int id)\n    {\n        try\n        {\n            this.dao.deleteById(id);\n           ", "first_line_groundtruth": "(dao.allComposers()).detect(c -> id == c.id());", "first_line_prediction": "(this.dao.findById(id)).getFirst();", "match": 0}
{"groundtruth": "symbolNum = lsbBitReader.readBit() + 1;", "prediction": " codeLength;\n            int  symbol;\n            int  code;\n            int  codeLengthCount;\n            int  symbolCount;\n            int  codeCount;\n            int  codeLengthSymbol;\n            int  symbolIndex;\n            int  symbolIndex2;\n            int  symbolIndex3;\n            int  symbolIndex4;\n            int  symbolIndex5;\n            int  symbolIndex6;\n            int  symbolIndex7;\n            int  symbolIndex8;\n            int  symbolIndex9;\n            int  symbolIndex10;\n            int  symbolIndex11;\n            int  symbolIndex12;\n            int ", "first_line_groundtruth": "symbolNum = lsbBitReader.readBit() + 1;", "first_line_prediction": " codeLength;", "match": 0}
{"groundtruth": "(Lists.adapt(dao.allComposers()));", "prediction": "(dao.allComposers());\n    }\n\n    @QueryMapping\n    public List<Composer> composers(@Argument String country,\n                                     @Argument String city,\n                                     @Argument String instrument,\n                                     @Argument String lastName)\n    {\n        return selectIfPresent(country, c -> c.location().country())\n                 .andThen(selectIfPresent(city, c -> c.location().city()))\n                 .andThen(selectIfPresent(instrument, c -> c.primaryInstrument().name()))\n                 .andThen(selectIfPresent(lastName, Composer::lastName))\n                 .apply(dao.allComposers", "first_line_groundtruth": "(Lists.adapt(dao.allComposers()));", "first_line_prediction": "(dao.allComposers());", "match": 0}
{"groundtruth": "int) (2 + 2 * lsbBitReader.readBits(3));", "prediction": "int) (lsbBitReader.readBits(4) + 4);\n            codedSymbols = alphabetSize - 1;\n        } else {\n            codedSymbols = alphabetSize;\n        }\n\n        short[] codeLengths = new short[codedSymbols];\n\n        for (int i = 0; i < codedSymbols; i++) {\n            int symbol = lsbBitReader.readBits(maxSymbolBitLength);\n            codeLengths[i] = (short) huffmanTable.getCodeLength(symbol);\n        }\n\n        return codeLengths;\n    }\n\n    /**\n     * Returns the code length for the given symbol\n     *", "first_line_groundtruth": "int) (2 + 2 * lsbBitReader.readBits(3));", "first_line_prediction": "int) (lsbBitReader.readBits(4) + 4);", "match": 0}
{"groundtruth": "short len = (short) lsbBitReader.readBits(3);", "prediction": " lCodeLengths[L_CODE_ORDER[i]] = (short) lsbBitReader.readBits(8);\n            }\n\n            // now read the \"second stage\" code lengths\n            // In the following this is called the P-Code (for position code)\n            int numPCodeLengths = (int) (lsbBitReader.readBits(4) + 4);\n            short[] pCodeLengths = new short[numPCodeLengths];\n\n            for (int i = 0; i < numPCodeLengths; i++) {\n                pCodeLengths[i] = (short) lsbBit", "first_line_groundtruth": "short len = (short) lsbBitReader.readBits(3);", "first_line_prediction": " lCodeLengths[L_CODE_ORDER[i]] = (short) lsbBitReader.readBits(8);", "match": 0}
{"groundtruth": "lsbBitReader.readBits(length);", "prediction": " // Read the symbol\n        short symbol = (short) (lengthAndSymbol & 0xffff);\n\n        // Advance the reader\n        lsbBitReader.readBits(length);\n\n        return symbol;\n    }", "first_line_groundtruth": "lsbBitReader.readBits(length);", "first_line_prediction": " // Read the symbol", "match": 0}
{"groundtruth": "int) (lsbBitReader.readBits(4) + 4);", "prediction": "int) lsbBitReader.readBits(5);\n            int[] lCodeLengths = new int[numLCodeLengths];\n            for (int i = 0; i < numLCodeLengths; i++) {\n                lCodeLengths[i] = (int) lsbBitReader.readBits(3);\n            }\n\n            // now read the \"second stage\" code lengths\n            // In the following this is called the D-Code (for distance code)\n            int numDCodeLengths = (int) lsbBitReader.readBits(5);\n            int[] dCodeLengths = new int[num", "first_line_groundtruth": "int) (lsbBitReader.readBits(4) + 4);", "first_line_prediction": "int) lsbBitReader.readBits(5);", "match": 0}
{"groundtruth": "lsbBitReader.readBits(LEVEL1_BITS);", "prediction": " int symbol = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);\n             return (short) (level2.get(index >>> LEVEL1_BITS)[symbol]);\n        } else {\n            // Lvl1 lookup\n            return (short) (lengthAndSymbol & 0xffff);\n        }\n    }", "first_line_groundtruth": "lsbBitReader.readBits(LEVEL1_BITS);", "first_line_prediction": " int symbol = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);", "match": 0}
{"groundtruth": "short symbol2 = (short) lsbBitReader.readBits(8);", "prediction": " level1[0] = symbol1;\n            } else {\n                for (int i = 0; i < symbolNum; i++) {\n                    level1[i] = symbol1;\n                }\n            }\n        } else {\n            int symbolNum = lsbBitReader.readBits(5) + 2;\n            boolean first8Bits = lsbBitReader.readBit() == 1;\n            short symbol1 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);\n\n            if (symbolNum == 2) {\n                level1[0] =", "first_line_groundtruth": "short symbol2 = (short) lsbBitReader.readBits(8);", "first_line_prediction": " level1[0] = symbol1;", "match": 0}
{"groundtruth": "(int) (lsbBitReader.readBits(extraBits) + repeatOffset);", "prediction": "0;\n                while (repeatCount < 64) {\n                    if (lsbBitReader.readBit() == 1) {\n                        repeatCount++;\n                    } else {\n                        repeatCount += 2;\n                    }\n                }\n\n                repeatCount += repeatOffset;\n\n                if (repeatSymbol == 0) {\n                    repeatSymbol = lsbBitReader.readBits(extraBits);\n                }\n\n                for (int j = 0; j < repeatCount; j++) {\n                    codeLengths[i] = repeatSymbol;\n                }\n\n                prevLength = repeatSymbol;\n            }\n        }\n\n        return codeLengths;\n    }", "first_line_groundtruth": "(int) (lsbBitReader.readBits(extraBits) + repeatOffset);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "simpleLengthCode = lsbBitReader.readBit() == 1;", "prediction": " isLevel2 = false;\n        int codeLength = 0;\n        int symbol = 0;\n        int code = 0;\n        int codeLengthCount = 0;\n        int symbolCount = 0;\n        int symbolIndex = 0;\n        int level2Index = 0;\n        int level2CodeLength = 0;\n        int level2Code = 0;\n        int level2Symbol = 0;\n        int level2SymbolCount = 0;\n        int level2SymbolIndex = 0;\n        int level2SymbolLength = 0;\n        int level2SymbolValue = ", "first_line_groundtruth": "simpleLengthCode = lsbBitReader.readBit() == 1;", "first_line_prediction": " isLevel2 = false;", "match": 0}
{"groundtruth": "level2Index = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);", "prediction": " index2 = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);\n            int[] table = level2.get(index2);\n            int symbol = table[(int) lsbBitReader.peekBits(length - LEVEL1_BITS - LEVEL2_BITS)];\n\n            lsbBitReader.readBits(length - LEVEL1_BITS - LEVEL2_BITS); // Consume bits of second level\n\n            return (short) symbol;\n        } else {\n            // Lvl1 lookup\n            lsbBitReader.readBits(length); // Consume bits of", "first_line_groundtruth": "level2Index = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);", "first_line_prediction": " index2 = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);", "match": 0}
{"groundtruth": "short symbol1 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);", "prediction": " // The first 8 bits of the symbol are the code length\n            int codeLength = first8Bits ? lsbBitReader.readBits(8) : lsbBitReader.readBits(16);\n            int symbol = symbolNum << 8 | codeLength;\n            level1[symbol] = symbolNum;\n        } else {\n            int symbolNum = lsbBitReader.readBit() + 1;\n            boolean first8Bits = lsbBitReader.readBit() == 1;\n            // The first 8 bits of the symbol are the code length\n            int codeLength = first8Bits", "first_line_groundtruth": "short symbol1 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);", "first_line_prediction": " // The first 8 bits of the symbol are the code length", "match": 0}
{"groundtruth": ") lsbBitReader.peekBits(LEVEL1_BITS);", "prediction": ") (lsbBitReader.readBits(LEVEL1_BITS) >>> 1);\n\n        if (index < level1.length) {\n            return (short) (level1[index] >>> 16);\n        }\n\n        int level2Index = (int) (lsbBitReader.readBits(LEVEL2_BITS) >>> 1);\n        int level2Size = (int) (level1[index] & 0xffff);\n\n        if (level2Index >= level2Size) {\n            throw new IOException(\"Huffman: Invalid level2 index.\");\n        }\n\n        int[] level2 = this", "first_line_groundtruth": ") lsbBitReader.peekBits(LEVEL1_BITS);", "first_line_prediction": ") (lsbBitReader.readBits(LEVEL1_BITS) >>> 1);", "match": 0}
{"groundtruth": "data.getDataElements(x >> bits, y >> bits, rgba);", "prediction": "", "first_line_groundtruth": "data.getDataElements(x >> bits, y >> bits, rgba);", "first_line_prediction": "", "match": 0}
{"groundtruth": "int) (2 + lsbBitReader.readBits(maxSymbolBitLength));", "prediction": "int) (lsbBitReader.readBits(maxSymbolBitLength) + 1);\n        } else {\n            codedSymbols = (int) (lsbBitReader.readBits(1) + 1);\n        }\n\n        short[] codeLengths = new short[codedSymbols];\n\n        for (int i = 0; i < codedSymbols; i++) {\n            int symbol = (int) (lsbBitReader.readBits(huffmanTable.getBitLength(i)) + 1);\n            codeLengths[i] = (short) symbol;\n        }\n\n        return codeLengths;\n    }\n\n    /**", "first_line_groundtruth": "int) (2 + lsbBitReader.readBits(maxSymbolBitLength));", "first_line_prediction": "int) (lsbBitReader.readBits(maxSymbolBitLength) + 1);", "match": 0}
{"groundtruth": "raster.setDataElements(x, 0, rgba);", "prediction": " raster.setDataElements(x, 0, rgba);\n        }\n\n        // (0,y) T predict\n        for (int y = 1; y < height; y++) {\n            raster.getDataElements(0, y, rgba);\n            raster.getDataElements(0, y - 1, predictor);\n            addPixels(rgba, predictor);\n            raster.setDataElements(0, y, rgba);\n        }\n\n        // (x,y) TR predict\n        for (int x = 1; x < width; x++) {\n            for (int y = 1; y < height; y++)", "first_line_groundtruth": "raster.setDataElements(x, 0, rgba);", "first_line_prediction": " raster.setDataElements(x, 0, rgba);", "match": 0}
{"groundtruth": "ReplayManager.getInstance().despawnPlayerClone(this);", "prediction": " this.setGamemode(GameMode.SURVIVAL);\n        }\n    }\n\n    public void setViewDistance(int viewDistance) {\n        this.viewDistance = viewDistance;\n    }", "first_line_groundtruth": "ReplayManager.getInstance().despawnPlayerClone(this);", "first_line_prediction": " this.setGamemode(GameMode.SURVIVAL);", "match": 0}
{"groundtruth": "raster.getDataElements(0, 0, rgba);", "prediction": " // (0,1) L (0x00000000) predict\n         // (1,0) T (0x00000000) predict\n         // (1,1) TR (0x00000000) predict\n\n        // (0,0) Black (0x000000ff) predict\n        // (0,1) L (0x00000000) predict\n        // (1,0) T (0x00000000) predict\n        // (1", "first_line_groundtruth": "raster.getDataElements(0, 0, rgba);", "first_line_prediction": " // (0,1) L (0x00000000) predict", "match": 0}
{"groundtruth": "Live.getInstance().requestLiveToken(\n                (deviceCode, userCode, verificationUrl, expiresIn, interval) -> {", "prediction": " Live.startAuth();\n    }", "first_line_groundtruth": "Live.getInstance().requestLiveToken(", "first_line_prediction": " Live.startAuth();", "match": 0}
{"groundtruth": "raster.setDataElements(0, 0, rgba);", "prediction": " raster.setDataElements(0, 0, rgba);\n\n        // (0,1) L predict\n        raster.getDataElements(0, 1, rgba);\n        rgba[0] += 0xff;\n        rgba[3] += 0xff;\n        raster.setDataElements(0, 1, rgba);\n\n        // (0,2) T predict\n        raster.getDataElements(0, 2, rgba);\n        rgba[1] += 0xff;\n        rgba[3] += 0xff;\n        raster.setDataElements(0, 2, rgba);\n\n        // (0,3", "first_line_groundtruth": "raster.setDataElements(0, 0, rgba);", "first_line_prediction": " raster.setDataElements(0, 0, rgba);", "match": 0}
{"groundtruth": "String data = FileManager.getFileResourceAsString(\"bedrock-data/required_item_list.json\");", "prediction": " ITEM_DEFINITIONS = JSON.parseObject(FileManager.getFileResourceAsString(\"bedrock-data/item_definitions.json\"), new TypeReference<ArrayList<ItemDefinition>>() {});\n    }", "first_line_groundtruth": "String data = FileManager.getFileResourceAsString(\"bedrock-data/required_item_list.json\");", "first_line_prediction": " ITEM_DEFINITIONS = JSON.parseObject(FileManager.getFileResourceAsString(\"bedrock-data/item_definitions.json\"), new TypeReference<ArrayList<ItemDefinition>>() {});", "match": 0}
{"groundtruth": "ReplayManager.getInstance().spawnPlayerClone(this);", "prediction": " this.setEntityRuntimeId(this.clonedPlayerId);\n        } else {\n            this.setGamemode(GameMode.SURVIVAL);\n            this.setEntityRuntimeId(this.entityRuntimeId);\n        }\n    }\n\n    public void setViewDistance(int viewDistance) {\n        this.viewDistance = viewDistance;\n    }", "first_line_groundtruth": "ReplayManager.getInstance().spawnPlayerClone(this);", "first_line_prediction": " this.setEntityRuntimeId(this.clonedPlayerId);", "match": 0}
{"groundtruth": "OutputWindow.print(\"Proxy server Listening on \" + bindAddress);", "prediction": "\n\n        OutputWindow.print(\"Loading account data...\");\n        AccountManager.loadAccounts();\n\n        OutputWindow.print(\"Loading replay data...\");\n        ReplayViewerServer.loadReplays();\n\n        OutputWindow.print(\"Loading Live data...\");\n        Live.loadLive();\n\n        OutputWindow.print(\"BedrockReplay started!\");\n        OutputWindow.print(\"Press any key to exit...\");\n        System.in.read();\n\n        long endTime = (System.currentTimeMillis() / 1000L);\n        OutputWindow.print(\"BedrockReplay stopped!\");\n        OutputWindow.print(\"Total time: \" + (endTime - startTime) +", "first_line_groundtruth": "OutputWindow.print(\"Proxy server Listening on \" + bindAddress);", "first_line_prediction": "", "match": 0}
{"groundtruth": "proxyServer.start();", "prediction": "\n\n        OutputWindow.print(\"Starting proxy server...\");\n        proxyServer.start();\n\n        OutputWindow.print(\"Starting replay viewer server...\");\n        ReplayViewerServer replayViewerServer = new ReplayViewerServer(bindAddress);\n        replayViewerServer.start();\n\n        OutputWindow.print(\"Starting account manager...\");\n        AccountManager accountManager = new AccountManager(proxyServer);\n        accountManager.start();\n\n        OutputWindow.print(\"Starting live...\");\n        Live live = new Live(proxyServer);\n        live.start();\n\n        OutputWindow.print(\"BedrockReplay started!\");\n        OutputWindow.print(\"Press any key to exit...\");", "first_line_groundtruth": "proxyServer.start();", "first_line_prediction": "", "match": 0}
{"groundtruth": "OutputWindow.print(\"Successfully loaded your account!\");", "prediction": " AccountManager.loadAccount(accountFile);\n            } catch (Exception e) {\n                OutputWindow.print(\"Failed to load account file: \" + e.getMessage());\n            }\n        } else {\n            OutputWindow.print(\"No account file found, creating new one...\");\n            AccountManager.createAccount();\n        }\n    }", "first_line_groundtruth": "OutputWindow.print(\"Successfully loaded your account!\");", "first_line_prediction": " AccountManager.loadAccount(accountFile);", "match": 0}
{"groundtruth": "raster.getSample(xC, y, 1);", "prediction": "0;\n                for (int i = 0; i < componentSize; i++) {\n                    sample |= (colorTable[xC * componentSize + i] & 0xff) << (componentOffset + i * 8);\n                }\n\n                raster.getDataElements(x, y, rgba);\n                rgba[3] = (byte) (sample & 0xff);\n            }\n        }\n    }", "first_line_groundtruth": "raster.getSample(xC, y, 1);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "OutputWindow.print(\"Done (took \" + (System.currentTimeMillis() / 1000L - startTime) + \"s)!\");", "prediction": "\n\n        OutputWindow.print(\"Loading account data...\");\n        AccountManager.loadAccounts();\n\n        OutputWindow.print(\"Loading Live data...\");\n        Live.loadLive();\n\n        OutputWindow.print(\"BedrockReplay started!\");\n        OutputWindow.print(\"Press any key to exit...\");\n        System.in.read();\n        OutputWindow.print(\"Exiting...\");\n\n        long endTime = (System.currentTimeMillis() / 1000L);\n        OutputWindow.print(\"BedrockReplay finished in \" + (endTime - startTime) + \" seconds!\");\n    }", "first_line_groundtruth": "OutputWindow.print(\"Done (took \" + (System.currentTimeMillis() / 1000L - startTime) + \"s)!\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "raster.getDataElements(x, 0, rgba);", "prediction": " raster.getDataElements(x, 0, predictor);\n             predictor[3] += 0xff;\n             raster.setDataElements(x, 0, predictor);\n        }\n\n        // (0,y) T predict\n        for (int y = 1; y < height; y++) {\n             raster.getDataElements(0, y, predictor);\n             predictor[3] += 0xff;\n             raster.setDataElements(0, y, predictor);\n        }\n\n        // (x,y) TR predict\n        for (int x = 1; x < width; x++) {\n             raster.getDataElements", "first_line_groundtruth": "raster.getDataElements(x, 0, rgba);", "first_line_prediction": " raster.getDataElements(x, 0, predictor);", "match": 0}
{"groundtruth": "raster.getDataElements(x - 1, 0, predictor);", "prediction": " rgba[3] += 0xff;\n            raster.setDataElements(x, 0, rgba);\n        }\n\n        // (0,y) T predict\n        for (int y = 1; y < height; y++) {\n            raster.getDataElements(0, y, rgba);\n            rgba[3] += 0xff;\n            raster.setDataElements(0, y, rgba);\n        }\n\n        // (x,y) TR predict\n        for (int x = 1; x < width; x++) {\n            raster.getDataElements(x, y, rgba);\n            rgba[3] +=", "first_line_groundtruth": "raster.getDataElements(x - 1, 0, predictor);", "first_line_prediction": " rgba[3] += 0xff;", "match": 0}
{"groundtruth": "callback.onComplete(accessToken, refreshToken);", "prediction": " callback.onComplete(accessToken, refreshToken);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }, 0, deviceAuth.getIntValue(\"interval\"));\n    }\n\n    private JSONObject startDeviceAuth() {\n        HttpClient client = HttpClient.newBuilder().build();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(LIVE_CONNECT_URL))\n                .header(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                .POST(HttpRequest.BodyPublishers.ofString(\"client_id=000000004C", "first_line_groundtruth": "callback.onComplete(accessToken, refreshToken);", "first_line_prediction": " callback.onComplete(accessToken, refreshToken);", "match": 0}
{"groundtruth": "FileManager.getFileContents(connection.getInputStream());", "prediction": " connection.getHeaderField(\"x-xbl-token\");\n        if (responce == null) {\n            throw new Exception(\"Xbox Device Token not found\");\n        }\n        return responce;\n    }\n\n    private void addSignatureHeader(HttpsURLConnection connection, JSONObject jsonObject, ECPrivateKey privateKey) throws Exception {\n        String header = this.getSignatureHeader(jsonObject, privateKey);\n        connection.setRequestProperty(\"x-xbl-signature\", header);\n    }\n\n    private String getSignatureHeader(JSONObject jsonObject, ECPrivateKey privateKey) throws Exception {\n        String header = \"ES256\";\n        String header", "first_line_groundtruth": "FileManager.getFileContents(connection.getInputStream());", "first_line_prediction": " connection.getHeaderField(\"x-xbl-token\");", "match": 0}
{"groundtruth": "OutputWindow.print(\"Failed to load your account, please authenticate with your Microsoft account again.\");", "prediction": " OutputWindow.print(\"Failed to load your account!\");\n            }\n        } else {\n            OutputWindow.print(\"No account found, please create one!\");\n            AccountManager.createAccount();\n        }\n    }", "first_line_groundtruth": "OutputWindow.print(\"Failed to load your account, please authenticate with your Microsoft account again.\");", "first_line_prediction": " OutputWindow.print(\"Failed to load your account!\");", "match": 0}
{"groundtruth": "Utils.toByteArray(currentTime));", "prediction": "postData.toJSONString().getBytes(StandardCharsets.UTF_8));\n        bytesToSign.write(new byte[]{0, 0, 0, 0});\n\n        byte[] signature = this.sign(bytesToSign.toByteArray(), privateKey);\n\n        httpsURLConnection.setRequestProperty(\"x-xbl-signature\", Base64.getUrlEncoder().withoutPadding().encodeToString(signature));\n        httpsURLConnection.setRequestProperty(\"x-xbl-contract-version\", \"1\");\n        httpsURLConnection.setRequestProperty(\"x-xbl-contract-version\", \"1\");\n        httpsURLConnection.setRequestProperty(\"x-", "first_line_groundtruth": "Utils.toByteArray(currentTime));", "first_line_prediction": "postData.toJSONString().getBytes(StandardCharsets.UTF_8));", "match": 0}
{"groundtruth": "OutputWindow.print(\"First time running BedrockReplay, please authenticate with your Microsoft account first.\");", "prediction": " startAuth();\n        }\n    }\n\n    private static void startAuth() {\n        OutputWindow.print(\"Please authenticate with your Microsoft account.\");\n        AccountManager.startAuth();\n    }", "first_line_groundtruth": "OutputWindow.print(\"First time running BedrockReplay, please authenticate with your Microsoft account first.\");", "first_line_prediction": " startAuth();", "match": 0}
{"groundtruth": "int transformType = data.getSample(x >> bits, y >> bits, 1);", "prediction": " raster.getDataElements(x, y, rgba);\n                 raster.getDataElements(x - 1, y, predictor);\n                 raster.getDataElements(x, y - 1, predictor2);\n                 raster.getDataElements(x - 1, y - 1, predictor3);\n                 addPixels(rgba, predictor);\n                 addPixels(rgba, predictor2);\n                 addPixels(rgba, predictor3);\n                 raster.setDataElements(x, y, rgba);\n            }\n        }\n\n        // Handle right and bottom border separately\n\n        // (x,y) TR predict\n        for (int x = width -", "first_line_groundtruth": "int transformType = data.getSample(x >> bits, y >> bits, 1);", "first_line_prediction": " raster.getDataElements(x, y, rgba);", "match": 0}
{"groundtruth": "return FileManager.getFileContents(connection.getInputStream());", "prediction": " String response = FileManager.getFileContents(connection.getInputStream());\n         JSONObject responseJsonObject = JSONObject.parseObject(response);", "first_line_groundtruth": "return FileManager.getFileContents(connection.getInputStream());", "first_line_prediction": " String response = FileManager.getFileContents(connection.getInputStream());", "match": 0}
{"groundtruth": "callback.onFailure(\"Failed to save replay: \" + e.getMessage());", "prediction": " callback.onError(e);\n             }\n        });\n    }\n\n    public void loadFromFile(String path, Callback callback) {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        executor.execute(() -> {\n            try {\n                try (FileInputStream fis = new FileInputStream(path + \".replay\");\n                     DataInputStream dis = new DataInputStream(new XZInputStream(fis))) {\n\n                    this.recorderEntityRuntimeId = dis.readLong();\n                    int packetBuffersByTickSize = dis.readInt();\n                    byte[] packetBuffersByTick = new byte[packetBuffersByTickSize];\n                    dis.readFully(packet", "first_line_groundtruth": "callback.onFailure(\"Failed to save replay: \" + e.getMessage());", "first_line_prediction": " callback.onError(e);", "match": 0}
{"groundtruth": "= xbox.getDeviceToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate());", "prediction": " = xbox.getDeviceToken();\n        String xuid = xbox.getXuid();\n        String accessToken = xbox.getAccessToken();\n        String refreshToken = xbox.getRefreshToken();\n\n        loginPacket.setUsername(xuid);\n        loginPacket.setDeviceId(deviceToken);\n        loginPacket.setAccessToken(accessToken);\n        loginPacket.setRefreshToken(refreshToken);\n        loginPacket.setPublicKey(Base64.getEncoder().encodeToString(this.keyPair.getPublic().getEncoded()));\n        loginPacket.setPrivateKey(Base64.getEncoder().encodeToString(this.keyPair.", "first_line_groundtruth": "= xbox.getDeviceToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate());", "first_line_prediction": " = xbox.getDeviceToken();", "match": 0}
{"groundtruth": "xbox.requestMinecraftChain(xsts, (ECPublicKey) this.keyPair.getPublic());", "prediction": " JwtUtils.createChainData(this.keyPair.getPublic(), this.keyPair.getPrivate());\n        String jwt = JwtUtils.createJwt(chainData, xsts);\n\n        loginPacket.setUsername(this.playerInfo.getUsername());\n        loginPacket.setUuid(this.playerInfo.getUuid());\n        loginPacket.setAccessToken(this.accessToken);\n        loginPacket.setXboxToken(jwt);\n        loginPacket.setDeviceId(deviceToken);\n        loginPacket.setChainData(chainData);\n        loginPacket.setXboxUserId(xbox.getXboxUserId());\n       ", "first_line_groundtruth": "xbox.requestMinecraftChain(xsts, (ECPublicKey) this.keyPair.getPublic());", "first_line_prediction": " JwtUtils.createChainData(this.keyPair.getPublic(), this.keyPair.getPrivate());", "match": 0}
{"groundtruth": "raster.getDataElements(trX, trY, predictor2);", "prediction": " raster.getDataElements(trX, trY, predictor2);\n                         raster.getDataElements(x, tY, predictor3);\n                         addPixels(rgba, predictor);\n                         addPixels(rgba, predictor2);\n                         addPixels(rgba, predictor3);\n                         break;\n                    case PREDICTOR_AVG_L_TL:\n                        raster.getDataElements(lX, y, predictor);\n                         raster.getDataElements(lX, tY, predictor2);\n                         addPixels(rgba, predictor);\n                         addPixels(rgba, predictor2);\n                         break;\n                    case PREDICTOR_AVG_L_T", "first_line_groundtruth": "raster.getDataElements(trX, trY, predictor2);", "first_line_prediction": " raster.getDataElements(trX, trY, predictor2);", "match": 0}
{"groundtruth": "CODEC_HELPER.setBlockDefinitions(FakeDefinitionRegistry.createBlockRegistry());", "prediction": "\n\n        NioEventLoopGroup bossGroup = new NioEventLoopGroup();\n        NioEventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioDatagramChannel.class)\n                    .childHandler(new BedrockServerInitializer(BEDROCK_CODEC,\n                            new PacketHandler(itemRegistry.build(), runtimeIds)));\n            b.bind(address).sync().channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            boss", "first_line_groundtruth": "CODEC_HELPER.setBlockDefinitions(FakeDefinitionRegistry.createBlockRegistry());", "first_line_prediction": "", "match": 0}
{"groundtruth": "raster.getDataElements(trX, trY, predictor3);", "prediction": " average2(predictor, predictor2);\n                        raster.getDataElements(trX, trY, predictor3);\n                        average2(predictor2, predictor3);\n\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_SELECT:\n                        raster.getDataElements(lX, y, predictor);\n                        raster.getDataElements(x, tY, predictor2);\n                        raster.getDataElements(lX, tY, predictor3);\n                        select(predictor, predictor2, predictor3);\n\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_CLAMP_ADD_SUB_", "first_line_groundtruth": "raster.getDataElements(trX, trY, predictor3);", "first_line_prediction": " average2(predictor, predictor2);", "match": 0}
{"groundtruth": "xbox.getXBLToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate(), deviceToken);", "prediction": " xbox.getXsts(deviceToken);\n        String jwt = JwtUtils.generateJwt(xsts);\n\n        loginPacket.setUsername(this.playerInfo.getUsername());\n        loginPacket.setXuid(this.playerInfo.getXuid());\n        loginPacket.setDeviceId(deviceToken);\n        loginPacket.setJwt(jwt);\n        loginPacket.setPublicKey(Base64.getEncoder().encodeToString(this.keyPair.getPublic().getEncoded()));\n        loginPacket.setPrivateKey(Base64.getEncoder().encodeToString(this.keyPair.getPrivate().getEncoded()));\n\n       ", "first_line_groundtruth": "xbox.getXBLToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate(), deviceToken);", "first_line_prediction": " xbox.getXsts(deviceToken);", "match": 0}
{"groundtruth": "raster.getDataElements(lX, y, predictor);", "prediction": " raster.getDataElements(lX, tY, predictor);\n                         addPixels(rgba, predictor);\n                         break;\n                    case PREDICTOR_T:\n                         raster.getDataElements(lX, tY, predictor);\n                         addPixels(rgba, predictor);\n                         break;\n                    case PREDICTOR_TR:\n                         raster.getDataElements(trX, trY, predictor);\n                         addPixels(rgba, predictor);\n                         break;\n                    case PREDICTOR_TL:\n                         raster.getDataElements(lX, tY, predictor);\n                         addPixels(rgba, predictor);\n                         break;\n                    case PREDICTOR", "first_line_groundtruth": "raster.getDataElements(lX, y, predictor);", "first_line_prediction": " raster.getDataElements(lX, tY, predictor);", "match": 0}
{"groundtruth": "raster.getDataElements(x, tY, predictor2);", "prediction": " addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_AVG_L_TL:\n                        raster.getDataElements(lX, y, predictor);\n                        raster.getDataElements(lX, tY, predictor2);\n                        average2(predictor, predictor2);\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_AVG_L_T:\n                        raster.getDataElements(lX, y, predictor);\n                        raster.getDataElements(x, tY, predictor2);\n                        average2(predictor, predictor2);\n                        addPixels(rgba, predictor);\n                        break", "first_line_groundtruth": "raster.getDataElements(x, tY, predictor2);", "first_line_prediction": " addPixels(rgba, predictor);", "match": 0}
{"groundtruth": "raster.getDataElements(lX, tY, predictor3);", "prediction": " raster.getDataElements(lX, tY, predictor3);\n                        select(predictor, predictor2, predictor3);\n\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_CLAMP_ADD_SUB_FULL:\n                        raster.getDataElements(lX, y, predictor);\n                        raster.getDataElements(x, tY, predictor2);\n                        raster.getDataElements(lX, tY, predictor3);\n                        clampAddSubtractFull(predictor, predictor2, predictor3);\n\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_CLAMP_ADD_SUB", "first_line_groundtruth": "raster.getDataElements(lX, tY, predictor3);", "first_line_prediction": " raster.getDataElements(lX, tY, predictor3);", "match": 0}
{"groundtruth": "lsbBitInputStream.readBits(14);", "prediction": "16 * lsbBitInputStream.readBits(16);\n        int height = 1 + (int) 16 * lsbBitInputStream.readBits(16);\n\n        int stride = width * 4;\n        int[] pixels = new int[stride * height];\n\n        VP8LDecoder decoder = new VP8LDecoder(lsbBitInputStream);\n        decoder.decode(pixels, width, height);\n\n        return new RGBABuffer(width, height, pixels);\n    }\n\n    private void decode(int[] pixels, int width, int height) throws IOException {\n        int num_layers =", "first_line_groundtruth": "lsbBitInputStream.readBits(14);", "first_line_prediction": "16 * lsbBitInputStream.readBits(16);", "match": 0}
{"groundtruth": "colorCacheBits = (int) lsbBitReader.readBits(4);", "prediction": " colorCacheBits = (int) lsbBitReader.readBits(3);\n        }\n\n        // Read color cache\n        int colorCacheSize = 1 << colorCacheBits;\n        int[] colorCache = new int[colorCacheSize];\n        for (int i = 0; i < colorCacheSize; i++) {\n            colorCache[i] = (int) lsbBitReader.readBits(8);\n        }\n\n        // Read color cache update\n        int colorCacheUpdate = (int) lsbBitReader.readBits(8);\n\n        // Read color cache update\n        int colorCacheUpdate2 =", "first_line_groundtruth": "colorCacheBits = (int) lsbBitReader.readBits(4);", "first_line_prediction": " colorCacheBits = (int) lsbBitReader.readBits(3);", "match": 0}
{"groundtruth": "lsbBitInputStream.readBit();", "prediction": "\n\n        VP8LDecoder decoder = new VP8LDecoder(lsbBitInputStream);\n        return decoder.decode(width, height);\n    }\n\n    private RGBABuffer decode(int width, int height) throws IOException {\n        RGBABuffer rgbaBuffer = new RGBABuffer(width, height);\n        ColorCache colorCache = new ColorCache(width, height);\n\n        int numHuffmanCodeGroups = lsbBitReader.readBits(5);\n        List<HuffmanCodeGroup> huffmanCodeGroups = new ArrayList<>(numHuffmanCodeGroups);\n        for (int i = 0; i", "first_line_groundtruth": "lsbBitInputStream.readBit();", "first_line_prediction": "", "match": 0}
{"groundtruth": "(int) lsbBitInputStream.readBits(3) != 0) {", "prediction": "lsbBitInputStream.readBit() != 0) {\n            throw new IOException(\"Invalid VP8L_VERSION\");\n        }\n\n        int version = (int) lsbBitInputStream.readBits(3);\n        if (version != 0) {\n            throw new IOException(\"Invalid VP8L_VERSION\");\n        }\n\n        int colorSpace = (int) lsbBitInputStream.readBits(2);\n        if (colorSpace != 0) {\n            throw new IOException(\"Invalid VP8L_COLORSPACE\");\n        }\n\n        int colorRange = (int) lsbBitInputStream.readBits(", "first_line_groundtruth": "(int) lsbBitInputStream.readBits(3) != 0) {", "first_line_prediction": "lsbBitInputStream.readBit() != 0) {", "match": 0}
{"groundtruth": "+ (int) lsbBitReader.readBits(extraBits) + 1;", "prediction": " + lsbBitReader.readBits(extraBits);\n        }\n    }", "first_line_groundtruth": "+ (int) lsbBitReader.readBits(extraBits) + 1;", "first_line_prediction": " + lsbBitReader.readBits(extraBits);", "match": 0}
{"groundtruth": "int transformType = (int) lsbBitReader.readBits(2);", "prediction": " // Read transform\n        int transformCode = lsbBitReader.readBits(3);\n\n        if (transformCode == 0) {\n            return 0;\n        }\n\n        int transformType = transformCode - 1;\n        int transformX = lsbBitReader.readBits(xSize);\n        int transformY = lsbBitReader.readBits(ySize);\n\n        transforms.add(new Transform(transformType, transformX, transformY));\n\n        return transformCode;\n    }\n\n    private void readHuffmanInfo(HuffmanInfo huffmanInfo) throws IOException {\n        // Read Huff", "first_line_groundtruth": "int transformType = (int) lsbBitReader.readBits(2);", "first_line_prediction": " // Read transform", "match": 0}
{"groundtruth": "decodeRaster = RGBABuffer.createRelativeImage(raster, 0, 0, xSize, height);", "prediction": " // and height is different from raster height\n             decodeRaster = RGBABuffer.createAbsoluteImage(xSize, height);\n        } else {\n            decodeRaster = raster;\n        }\n\n        // Read pixels\n        int y = 0;\n        while (y < height) {\n            int x = 0;\n            while (x < width) {\n                int index = readIndex(lsbBitReader, huffmanInfo, colorCache);\n                if (index == -1) {\n                    x++;\n                    continue;\n                }\n\n                int color = colorCache.getColor(index);\n                decodeRaster.setPixel(x, y,", "first_line_groundtruth": "decodeRaster = RGBABuffer.createRelativeImage(raster, 0, 0, xSize, height);", "first_line_prediction": " // and height is different from raster height", "match": 0}
{"groundtruth": "&& lsbBitReader.readBit() == 1) {", "prediction": " && colorCacheBits > 0) {\n            huffmanMetaCodes = RGBABuffer.createAbsoluteImage(xSize, ySize);\n        }\n\n        while (true) {\n            HuffmanCodeGroup curHuffmanGroup = huffmanCodeGroups[huffmanGroupNum];\n\n            if (curHuffmanGroup.xSize == xSize && curHuffmanGroup.ySize == ySize) {\n                break;\n            }\n\n            huffmanGroupNum++;\n        }\n\n        huffmanXSize = curHuffmanGroup.xSize;\n        huffmanYSize = curH", "first_line_groundtruth": "&& lsbBitReader.readBit() == 1) {", "first_line_prediction": " && colorCacheBits > 0) {", "match": 0}
{"groundtruth": "RGBABuffer outputBuffer = RGBABuffer.createAbsoluteImage(width, height);", "prediction": " int colorSpace = (int) lsbBitInputStream.readBits(2);\n        if (colorSpace != 0) {\n            throw new IOException(\"Invalid ColorSpace.\");\n        }\n\n        int colorRange = (int) lsbBitInputStream.readBits(2);\n        if (colorRange != 0) {\n            throw new IOException(\"Invalid ColorRange.\");\n        }\n\n        int alphaMode = (int) lsbBitInputStream.readBits(2);\n        if (alphaMode != 0) {\n            throw new IOException(\"Invalid AlphaMode.\");\n        }\n\n        int frameType = (int) lsbBitInputStream", "first_line_groundtruth": "RGBABuffer outputBuffer = RGBABuffer.createAbsoluteImage(width, height);", "first_line_prediction": " int colorSpace = (int) lsbBitInputStream.readBits(2);", "match": 0}
{"groundtruth": "byte) (lsbBitReader.readBits(3) + 2);", "prediction": "byte) lsbBitReader.readBits(2);\n                int size = 1 << sizeBits;\n\n                int xOff = (int) lsbBitReader.readBits(sizeBits);\n                int yOff = (int) lsbBitReader.readBits(sizeBits);\n\n                transforms.add(new Transform(transformType, xSize, ySize, xOff, yOff));\n\n                return size;\n            }\n            case SUBSAMPLE_TRANSFORM: {\n                byte xOffBits = (byte) lsbBitReader.readBits(2);\n                byte yOffBits = (byte) lsbBit", "first_line_groundtruth": "byte) (lsbBitReader.readBits(3) + 2);", "first_line_prediction": "byte) lsbBitReader.readBits(2);", "match": 0}
{"groundtruth": "colorTableSize = ((int) lsbBitReader.readBits(8)) + 1;", "prediction": " colorTableSize = (int) lsbBitReader.readBits(8);\n\n                // 8 bit value for color table\n                byte[] colorTable = new byte[colorTableSize];\n                for (int i = 0; i < colorTableSize; i++) {\n                    colorTable[i] = (byte) lsbBitReader.readBits(8);\n                }\n\n                // 8 bit value for color index\n                int colorIndex = (int) lsbBitReader.readBits(8);\n\n                // 8 bit value for alpha\n                int alpha = (int) lsbBitReader.readBits", "first_line_groundtruth": "colorTableSize = ((int) lsbBitReader.readBits(8)) + 1;", "first_line_prediction": " colorTableSize = (int) lsbBitReader.readBits(8);", "match": 0}
{"groundtruth": "configVariables.setClientID(System.getenv(\"BOT_CLIENT_ID\"));", "prediction": "\n\n        } else {\n            System.out.println(\"Using file\");\n            try {\n                var properties = new Properties();\n                properties.load(new FileInputStream(BOT_CONFIG_PROPERTIES));\n                configVariables.setUser(properties.getProperty(\"bot.user\"));\n                configVariables.setToken(properties.getProperty(\"bot.token\"));\n                configVariables.setClientID(properties.getProperty(\"bot.clientID\"));\n                configVariables.getChattersToIgnore().addAll(Arrays.asList(properties.getProperty(\"bot.chattersToIgnore\").split(\",\")));\n                configVariables.getChannelsToJoin().addAll(Arrays.asList", "first_line_groundtruth": "configVariables.setClientID(System.getenv(\"BOT_CLIENT_ID\"));", "first_line_prediction": "", "match": 0}
{"groundtruth": "(int) lsbBitReader.readBits(3) + 2;", "prediction": "8;\n            huffmanMetaCodes = RGBABuffer.createAbsoluteImage(xSize, ySize);\n            readVP8Lossless(huffmanMetaCodes, false, xSize, ySize);\n        }\n\n        if (lsbBitReader.readBit() == 1) {\n            // read in huffman codes\n            huffmanGroupNum = 2;\n            huffmanXSize = xSize / 2;\n            huffmanYSize = ySize / 2;\n        } else {\n            huffmanXSize = xSize;\n            huffmanYSize = ySize;", "first_line_groundtruth": "(int) lsbBitReader.readBits(3) + 2;", "first_line_prediction": "8;", "match": 0}
{"groundtruth": "configVariables.setUser(System.getenv(\"BOT_USER\"));", "prediction": "\n\n            var splittedClientID = System.getenv(\"CLIENT_ID\").split(\",\");\n            if (splittedClientID != null)\n                Arrays.stream(splittedClientID)\n                         .forEach(clientID -> configVariables.setClientID(clientID));\n\n            var splittedToken = System.getenv(\"TOKEN\").split(\",\");\n            if (splittedToken != null)\n                Arrays.stream(splittedToken)\n                         .forEach(token -> configVariables.setToken(token));\n\n            var splittedUser = System.getenv(\"USER\").split(\",\");\n            if (splittedUser != null)\n                Arrays.stream(", "first_line_groundtruth": "configVariables.setUser(System.getenv(\"BOT_USER\"));", "first_line_prediction": "", "match": 0}
{"groundtruth": "RGBABuffer.createAbsoluteImage(blockWidth, blockHeight);", "prediction": " Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE, blockWidth, blockHeight, 4 * blockWidth, 4, new int[]{0, 1, 2, 3}, null);\n\n                int[] data = new int[4 * blockWidth * blockHeight];\n                raster.getDataElements(0, 0, data);\n\n                for (int i = 0; i < data.length; i++) {\n                    data[i] = lsbBitReader.readBits(8);\n                }\n\n                transforms.add(new Transform(transformType, blockWidth, blockHeight,", "first_line_groundtruth": "RGBABuffer.createAbsoluteImage(blockWidth, blockHeight);", "first_line_prediction": " Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE, blockWidth, blockHeight, 4 * blockWidth, 4, new int[]{0, 1, 2, 3}, null);", "match": 0}
{"groundtruth": "RGBABuffer colorTableRGBABuffer = RGBABuffer.createAbsoluteImage(colorTableSize, 1);", "prediction": " // The color table is stored in the following order:\n                 // 0x00000000, 0x00000000, 0x00000000, ...\n                 // 0x00000000, 0x00000000, 0x00000000, ...\n                 // ...\n                 // 0x00000000, 0x00000000, 0x0000000", "first_line_groundtruth": "RGBABuffer colorTableRGBABuffer = RGBABuffer.createAbsoluteImage(colorTableSize, 1);", "first_line_prediction": " // The color table is stored in the following order:", "match": 0}
{"groundtruth": "raster.getDataElements(x1, ySrc, rgba);", "prediction": " if (x1 < 0) {\n                ySrc--;\n                x1 += width;\n             } else if (x1 >= width) {\n                x1 -= width;\n                ySrc++;\n             }\n\n            int y1 = ySrc++;\n\n            if (y1 < 0) {\n                y1 += height;\n            } else if (y1 >= height) {\n                y1 -= height;\n            }\n\n            if (y1 < 0 || y1 >= height || x1 < 0 || x1 >= width) {\n                throw new IOException(\"Corrupt WebP stream, decodeBwRef: ySrc", "first_line_groundtruth": "raster.getDataElements(x1, ySrc, rgba);", "first_line_prediction": " if (x1 < 0) {", "match": 0}
{"groundtruth": "topLevel && lsbBitReader.readBit() == 1) {", "prediction": "true) {\n            int transformType = lsbBitReader.readBits(3);\n            if (transformType == 0) {\n                break;\n            }\n            Transform transform = TransformFactory.createTransform(transformType);\n            transform.read(lsbBitReader);\n            transforms.add(transform);\n        }\n\n        // Read Huffman codes\n        HuffmanInfo huffmanInfo = new HuffmanInfo();\n        huffmanInfo.read(lsbBitReader);\n        HuffmanCodeGroup[] codeGroups = huffmanInfo.getCodeGroups();\n\n        // Read color mapping\n        int colorMappingSize =", "first_line_groundtruth": "topLevel && lsbBitReader.readBit() == 1) {", "first_line_prediction": "true) {", "match": 0}
{"groundtruth": "colorTableRGBABuffer.getDataElements(x, 0, colorTableRGBACopyBuffer);", "prediction": " // Copy the color table to a copy buffer\n                    colorTableRGBABuffer.getDataElements(x, 0, colorTableRGBACopyBuffer);\n                    colorTable[x * 4] = colorTableRGBACopyBuffer[0];\n                    colorTable[x * 4 + 1] = colorTableRGBACopyBuffer[1];\n                    colorTable[x * 4 + 2] = colorTableRGBACopyBuffer[2];\n                    colorTable[x * 4 + 3] = colorTableRGBACopyBuffer[3];\n                }\n\n                // The color table is always subtraction-coded", "first_line_groundtruth": "colorTableRGBABuffer.getDataElements(x, 0, colorTableRGBACopyBuffer);", "first_line_prediction": " // Copy the color table to a copy buffer", "match": 0}
{"groundtruth": "userID = twitchAPI.getUserID(user).orElse(\"\");", "prediction": "userIDMap = new HashMap<>();\n        this.executor = Executors.newSingleThreadExecutor();\n        this.messageService = new MessageServiceImpl();\n    }\n\n    @OnOpen\n    public void onOpen(Session session) {\n        this.session = session;\n        this.session.getAsyncRemote().sendText(MessageFormat.format(\"PASS {0}\", this.token));\n        this.session.getAsyncRemote().sendText(MessageFormat.format(\"NICK {0}\", this.user));\n        this.session.getAsyncRemote().sendText(MessageFormat.format(\"JOIN #{0}\", this.channelsTo", "first_line_groundtruth": "userID = twitchAPI.getUserID(user).orElse(\"\");", "first_line_prediction": "userIDMap = new HashMap<>();", "match": 0}
{"groundtruth": "int argb = colorCache.lookup(code - 256 - 24);", "prediction": " // TODO: Implement color cache\n    }\n\n    private void decodeLiteral(RGBABuffer raster, ColorCache colorCache, HuffmanCodeGroup curCodeGroup, byte[] rgba, int y, int x, short code) {\n        int color = curCodeGroup.colorTable[code - 256];\n        rgba[0] = (byte) (color >> 16);\n        rgba[1] = (byte) (color >> 8);\n        rgba[2] = (byte) (color);\n        rgba[3] = (byte) 0xff;\n\n        raster.setPixel(x,", "first_line_groundtruth": "int argb = colorCache.lookup(code - 256 - 24);", "first_line_prediction": " // TODO: Implement color cache", "match": 0}
{"groundtruth": "= botsAPI.getOnlineBots();", "prediction": " = botsAPI.getBots(broadcasterID);\n                if (botList.isEmpty())\n                    return;\n\n                var botString = new StringJoiner(\", \");\n                botList.forEach(bot -> botString.add(bot));\n                sendMessage(MessageFormat.format(\"Bots: {0}\", botString));\n            }\n        });\n    }\n\n    private void processUserJoin(String message) {\n        var channel = message\n                .substring(message.indexOf(TwitchTags.JOIN.message) + TwitchTags.JOIN.message.length());\n        if (isInvalid(channel))\n            return;\n\n        var", "first_line_groundtruth": "= botsAPI.getOnlineBots();", "first_line_prediction": " = botsAPI.getBots(broadcasterID);", "match": 0}
{"groundtruth": "twitchAPI.getUserID(userName.trim());", "prediction": " twitchAPI.getUserID(userName.trim());\n\t\t\t\tif (isInvalid(userToBanID))\n\t\t\t\t\tcontinue;", "first_line_groundtruth": "twitchAPI.getUserID(userName.trim());", "first_line_prediction": " twitchAPI.getUserID(userName.trim());", "match": 0}
{"groundtruth": "broadcasterID = twitchAPI.getUserID(channel.trim());", "prediction": "ircChannel = channel.replace(\"#\", \"\");\n            var broadcasterID = twitchAPI.getBroadcasterID(ircChannel).orElse(\"\");\n            broadcasterIDMap.put(channel, broadcasterID);\n        });\n\n        System.out.println(\"Getting user ID\");\n        userIDMap.put(user, userID);\n\n        System.out.println(\"Getting user ID\");\n        executor = Executors.newSingleThreadExecutor();\n    }\n\n    @OnOpen\n    public void onOpen(Session session) {\n        this.session = session;\n        executor.submit(() -> {\n            try {\n                session.getBasicRemote().", "first_line_groundtruth": "broadcasterID = twitchAPI.getUserID(channel.trim());", "first_line_prediction": "ircChannel = channel.replace(\"#\", \"\");", "match": 0}
{"groundtruth": "Generator().generate(schemaVersion, scanPackages, outputDir, skipValidation);", "prediction": " Generator(project, schemaVersion, outputDir, scanPackages, skipValidation).generate();\n  }\n\n  private void setClasspath() throws MojoExecutionException {\n    try {\n      PluginDescriptor pluginDescriptor = project.getPlugin(GeneratorPlugin.class);\n      URL schemaURL = new URL(SCHEMA_BASE_URL + \"/camunda-element-templates-json-schema-\" + schemaVersion + \".json\");\n      ClassRealm classRealm = pluginDescriptor.getPluginRealm();\n      classRealm.addURL(schemaURL);\n    } catch (MalformedURLException e) {\n      throw new MojoExecutionException(\"Invalid schema URL\", e);\n   ", "first_line_groundtruth": "Generator().generate(schemaVersion, scanPackages, outputDir, skipValidation);", "first_line_prediction": " Generator(project, schemaVersion, outputDir, scanPackages, skipValidation).generate();", "match": 0}
{"groundtruth": "template.setTemplateName(templateName);", "prediction": " template.setName(templateName);\n    }\n\n    String templateId = String.valueOf(methodParameters.get(TEMPLATE_ID));\n    if (!templateId.isBlank()) {\n      template.setId(templateId);\n    }\n\n    String functionName = String.valueOf(methodParameters.get(FUNCTION_NAME_PROPERTY));\n    if (!functionName.isBlank()) {\n      template.setFunctionName(functionName);\n    }\n\n    String description = String.valueOf(methodParameters.get(DESCRIPTION));\n    if (!description.isBlank()) {\n      template.setDescription(description);\n    }\n\n    List<Property> properties = new ArrayList<>();", "first_line_groundtruth": "template.setTemplateName(templateName);", "first_line_prediction": " template.setName(templateName);", "match": 0}
{"groundtruth": "template.setAppliesTo((String[]) methodParameters.get(APPLIES_TO));", "prediction": " // TODO: add appliesTo\n    template.setFunctionName(String.valueOf(methodParameters.get(FUNCTION_NAME_PROPERTY)));\n    template.setDescription(String.valueOf(methodParameters.get(DESCRIPTION)));\n    template.setIndex(Integer.parseInt(String.valueOf(methodParameters.get(INDEX))));\n\n    List<Property> properties = new ArrayList<>();\n    for (Map.Entry<String, Object> entry : methodParameters.entrySet()) {\n      if (entry.getKey().startsWith(PROPERTIES)) {\n        properties.add(createProperty(entry.getValue()));\n      }\n    }\n\n    template.setProperties(properties", "first_line_groundtruth": "template.setAppliesTo((String[]) methodParameters.get(APPLIES_TO));", "first_line_prediction": " // TODO: add appliesTo", "match": 0}
{"groundtruth": "template.setEntriesVisible(((Boolean) (methodParameters.get(ENTRIES_VISIBLE))).booleanValue());", "prediction": " String templateId = String.valueOf(methodParameters.get(TEMPLATE_ID));\n     if (!templateId.isBlank()) {\n       template.setId(templateId);\n     }", "first_line_groundtruth": "template.setEntriesVisible(((Boolean) (methodParameters.get(ENTRIES_VISIBLE))).booleanValue());", "first_line_prediction": " String templateId = String.valueOf(methodParameters.get(TEMPLATE_ID));", "match": 0}
{"groundtruth": "treeMapPane = TreeMapPane.forTreeContent();", "prediction": "mpt = new TreeMapPane<>();\n\t\tmpt.setRoot(children);\n\t\tnode = mpt.rootProperty();", "first_line_groundtruth": "treeMapPane = TreeMapPane.forTreeContent();", "first_line_prediction": "mpt = new TreeMapPane<>();", "match": 0}
{"groundtruth": "(exemption != null && exemption.isExemptionActive()) {", "prediction": " (exemption != null && exemption.isExempted()) {\n            return;\n        }\n        long blockingTime = this.blockingTime.get();\n        if (blockingTime > 0) {\n            if (blockingTime >= threshold) {\n                reportEvent(blockingTime);\n            }\n        }\n    }", "first_line_groundtruth": "(exemption != null && exemption.isExemptionActive()) {", "first_line_prediction": " (exemption != null && exemption.isExempted()) {", "match": 0}
{"groundtruth": "final ThreadInfo threadInfo = ThreadInfo.fromThread(thread);", "prediction": " threadInfos[reported++] = threadAccessor.getThreadInfo(thread);\n            }\n            listener.onBlockedThread(new BlockedThreadEvent(blockedFor, threadInfos));\n        });\n    }", "first_line_groundtruth": "final ThreadInfo threadInfo = ThreadInfo.fromThread(thread);", "first_line_prediction": " threadInfos[reported++] = threadAccessor.getThreadInfo(thread);", "match": 0}
{"groundtruth": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));", "prediction": "(\"  executePrice=\" + executePrice);\n    \tSystem.out.println(\"  executeId=\" + executeId);\n    \tSystem.out.println(\"  executeMatchId=\" + executeMatchId);\n    \tSystem.out.println();\n    \tSystem.out.println(\"  orderBook.getPrice(executeId)=\" + orderBook.getPrice(executeId));\n    \tSystem.out.println(\"  orderBook.getPrice(executeMatchId)=\" + orderBook.getPrice(executeMatchId));\n    \tSystem.out.println(\"  orderBook.getPrice(order.getId())", "first_line_groundtruth": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));", "first_line_prediction": "(\"  executePrice=\" + executePrice);", "match": 0}
{"groundtruth": "messages = body.getMessages();", "prediction": " message = new ChatCompletionMessage(\"assistant\", response);\n                  message.setRetry(true);\n                  body.addMessage(message);\n                }\n              }\n\n              retryCounter++;\n              stream(requestBody, listeners);\n            }));\n  }", "first_line_groundtruth": "messages = body.getMessages();", "first_line_prediction": " message = new ChatCompletionMessage(\"assistant\", response);", "match": 0}
{"groundtruth": "cancel(ts.nanoEpoch());", "prediction": "cancel(ts.nanoEpoch());\n\t\t\taskOrder.cancel(ts.nanoEpoch());\n\t\t}", "first_line_groundtruth": "cancel(ts.nanoEpoch());", "first_line_prediction": "cancel(ts.nanoEpoch());", "match": 1}
{"groundtruth": "ts = book.getTimestamper();", "prediction": " timestamper = new Timestamper();\n\t\t\tOrder order = new Order(Side.BUY, \"AAPL\", 150.44, 200, getClientOrderId(), TimeInForce.DAY, timestamper);\n\t\t\tbook.addOrder(order);\n\t\t}\n\t\t\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Done!\");", "first_line_groundtruth": "ts = book.getTimestamper();", "first_line_prediction": " timestamper = new Timestamper();", "match": 0}
{"groundtruth": ".cancel(orderBook.getTimestamper().nanoEpoch());", "prediction": " = orderBook.getOrder(1);\n\t\torder.cancel(orderBook.getTimestamper().nanoEpoch());\n\t\t\n\t\t /*\n\t\t\t -----> onOrderCanceled called:\n\t\t\t  orderBook=AAPL\n\t\t\t  time=1682731732573000000\n\t\t\t  order=Order [id=1, clientOrderId=1, side=BUY, security=AAPL, originalSize=200, openSize=100, \n\t\t\t  \t\t\t\texecutedSize=0, canceledSize=100, price=150.44, type=", "first_line_groundtruth": ".cancel(orderBook.getTimestamper().nanoEpoch());", "first_line_prediction": " = orderBook.getOrder(1);", "match": 0}
{"groundtruth": "ts.nanoEpoch(), 100);", "prediction": "100);\n\t\t\taskOrder.reduceTo(100);\n\t\t\t\n\t\t\tbook.cancelOrder(bidOrder);\n\t\t\tbook.cancelOrder(askOrder);\n\t\t}", "first_line_groundtruth": "ts.nanoEpoch(), 100);", "first_line_prediction": "100);", "match": 0}
{"groundtruth": "if (!book.isEmpty()) throw new IllegalStateException(\"Book must be empty here!\");", "prediction": "\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(\"Done!\");", "first_line_groundtruth": "if (!book.isEmpty()) throw new IllegalStateException(\"Book must be empty here!\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "(listeners, client.isRetryOnReadTimeout(), (response) -> {", "prediction": "(listeners, requestBody.isRetryOnReadTimeout(), this::onRetry));\n  }\n\n  private void onRetry(String message) {\n    retryCounter++;\n    if (retryCounter > MAX_RETRY_COUNT) {\n      throw new RuntimeException(\"Max retry count exceeded\");\n    }\n    System.out.println(\"Retrying: \" + message);\n  }", "first_line_groundtruth": "(listeners, client.isRetryOnReadTimeout(), (response) -> {", "first_line_prediction": "(listeners, requestBody.isRetryOnReadTimeout(), this::onRetry));", "match": 0}
{"groundtruth": "(orderBook.getTimestamper().nanoEpoch(), 100);", "prediction": "(100);\n\t\t\n\t\t/*\n\t\t\t -----> onOrderReduced called:\n\t\t\t  orderBook=AAPL\n\t\t\t  time=1682731803569000000\n\t\t\t  order=Order [id=1, clientOrderId=1, side=BUY, security=AAPL, originalSize=200, openSize=200, \n\t\t\t  \t\t\t\texecutedSize=0, canceledSize=0, price=150.44, type=LIMIT, tif=DAY]\n\t\t\t  reduceSize=100\n\t\t\t  reducePrice=", "first_line_groundtruth": "(orderBook.getTimestamper().nanoEpoch(), 100);", "first_line_prediction": "(100);", "match": 0}
{"groundtruth": "orderBook.showOrders();", "prediction": "\n\t\t\n\t\torderBook.createLimit(String.valueOf(++orderId), orderId, Side.BUY, 200, 150.44, TimeInForce.DAY);\n\t\t\n\t\t/*\n\t\t\t -----> onOrderAccepted called:\n\t\t\t  orderBook=AAPL\n\t\t\t  time=1682731006570000000\n\t\t\t  order=Order [id=2, clientOrderId=2, side=BUY, security=AAPL, originalSize=200, openSize=200, \n\t\t\t  \t\t\t\texecutedSize=0", "first_line_groundtruth": "orderBook.showOrders();", "first_line_prediction": "", "match": 0}
{"groundtruth": "listeners.onComplete(messageBuilder);", "prediction": " return;\n    }\n    if (throwable instanceof SocketTimeoutException) {\n      if (retryOnReadTimeout) {\n        LOG.info(\"Socket timeout, retrying\");\n        onRetry.accept(format(\"Socket timeout, retrying\"));\n        return;\n      }\n    }\n    LOG.error(\"Request failed.\", throwable);\n    listeners.onError(getErrorDetails(throwable.getMessage()), throwable);\n  }", "first_line_groundtruth": "listeners.onComplete(messageBuilder);", "first_line_prediction": " return;", "match": 0}
{"groundtruth": "+= order.getOpenSize();", "prediction": " = size + order.getSize();\n        \n        orders = orders + 1;\n        \n        order.addListener(this);\n        \n        sizeDirty = true;\n    }\n    \n    public void removeOrder(Order order) {\n    \t\n    \tif (order == head) {\n    \t\t\n    \t\thead = head.next;\n    \t\t\n    \t\tif (head != null) {\n    \t\t\t\n    \t\t\thead.prev = null;\n    \t\t}\n    \t\t\n    \t} else if (order == tail) {\n    \t\t\n    \t\ttail = tail.prev;\n    \t\t\n    \t\tif (tail != null) {\n    \t\t\t\n    \t\t\ttail.next = null;\n    \t\t}\n    \t\t\n    \t}", "first_line_groundtruth": "+= order.getOpenSize();", "first_line_prediction": " = size + order.getSize();", "match": 0}
{"groundtruth": "proxyAuthenticator.getUsername(),\n                      proxyAuthenticator.getPassword()))\n                  .build());", "prediction": " proxyAuthenticator.getUsername(), proxyAuthenticator.getPassword()))\n                   .build());\n        }\n      }\n\n      return builder.build();\n    }\n\n    private void trustAllCertificates(OkHttpClient.Builder builder) {\n      try {\n        SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n        sslContext.init(null, new TrustManager[] {\n            new X509TrustManager() {\n              @Override\n              public void checkClientTrusted(X509Certificate[] chain, String authType) {\n              }\n\n              @Override\n              public void checkServerTrusted(X509Certificate[] chain, String authType) {\n             ", "first_line_groundtruth": "proxyAuthenticator.getUsername(),", "first_line_prediction": " proxyAuthenticator.getUsername(), proxyAuthenticator.getPassword()))", "match": 0}
{"groundtruth": "orderBookLogger.off();", "prediction": "\n\t\torderBook.showLevels();\n\t\t\n\t\t /*\n\t\t  200 @   150.44 (id=1)\n\t\t  500 @   149.44 (id=2)\n\t\t -------- \n\t\t */\n\t\t\n\t\torderBook.showOrders();\n\t\t\n\t\t /*\n\t\t  200 @   150.44 (id=1)\n\t\t  500 @   149.44 (id=2)\n\t\t -------- \n\t\t */\n\t\t\n\t\torderBook.cancel(String.valueOf(orderId), orderId);\n\t\t\n\t\t /* \n\t\t\t -----> onOrderCanceled called:\n\t\t\t  orderBook=AAPL", "first_line_groundtruth": "orderBookLogger.off();", "first_line_prediction": "", "match": 0}
{"groundtruth": "createFactory(client.getHttpClient())\n        .newEventSource(\n            request,\n            getEventListener(listeners, client.isRetryOnReadTimeout(), (response) -> {", "prediction": "eventSource(request, getEventListener(listeners, true, this::retry));\n  }\n\n  private void retry(String message) {\n    retryCounter++;\n    if (retryCounter > MAX_RETRY_COUNT) {\n      throw new RuntimeException(\"Maximum retry count exceeded\");\n    }\n    System.out.println(\"Retrying: \" + message);\n  }\n\n  public interface CompletionEventListener {\n    void onNext(String message);\n    void onError(ErrorDetails error, Throwable errorCause);\n    void onComplete(ChatCompletionMessage message);\n  }\n\n  public static class ErrorDetails {\n    private final String message;\n    private final Throwable errorCause", "first_line_groundtruth": "createFactory(client.getHttpClient())", "first_line_prediction": "eventSource(request, getEventListener(listeners, true, this::retry));", "match": 0}
{"groundtruth": "!= null && mDiracSound.getMusic() == 1;", "prediction": " != null && mDiracSound.isEnabled();\n    }\n\n    public void setHeadsetType(int type) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        mDiracSound.setHeadsetType(type);\n    }\n\n    public void setLevel(int band, float level) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        mDiracSound.setLevel(band, level);\n    }\n\n    public void setHifiMode(int mode) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        mDiracSound.setHifiMode(mode);\n    }\n\n    public void setScenario(int", "first_line_groundtruth": "!= null && mDiracSound.getMusic() == 1;", "first_line_prediction": " != null && mDiracSound.isEnabled();", "match": 0}
{"groundtruth": "orderBook.showLevels();", "prediction": "\n\t\t\n\t\torderBook.createLimit(String.valueOf(++orderId), orderId, Side.BUY, 200, 150.44, TimeInForce.DAY);\n\t\t\n\t\t/*\n\t\t\t -----> onOrderAccepted called:\n\t\t\t  orderBook=AAPL\n\t\t\t  time=1682731006570000000\n\t\t\t  order=Order [id=2, clientOrderId=2, side=BUY, security=AAPL, originalSize=200, openSize=200, \n\t\t\t  \t\t\t\texecutedSize=0", "first_line_groundtruth": "orderBook.showLevels();", "first_line_prediction": "", "match": 0}
{"groundtruth": "= client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {", "prediction": " = client.call(createRequest(requestBody))) {\n      return response.body().string();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  private <T extends CompletionRequest> Request createRequest(T requestBody) {\n    var headers = new HashMap<String, String>();\n    headers.putAll(getRequiredHeaders());\n    headers.put(\"Content-Type\", \"application/json\");\n    var requestBodyJson = requestBody.toJson();\n    var requestBodyBytes = requestBodyJson.getBytes();\n    var requestBody = RequestBody.create(MediaType.get(\"", "first_line_groundtruth": "= client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {", "first_line_prediction": " = client.call(createRequest(requestBody))) {", "match": 0}
{"groundtruth": "DoubleUtils.toDouble(price);", "prediction": "1.0 * price / 100000000.0;", "first_line_groundtruth": "DoubleUtils.toDouble(price);", "first_line_prediction": "1.0 * price / 100000000.0;", "match": 0}
{"groundtruth": "mDiracUtils != null ? mDiracUtils.isDiracEnabled() : false;", "prediction": " mDiracUtils.isDiracEnabled();\n        mSwitchBar = (MainSwitchPreference) findPreference(PREF_ENABLE);\n        mSwitchBar.setChecked(enhancerEnabled);\n        mSwitchBar.setOnPreferenceChangeListener(this);\n        mSwitchBar.setOnMainSwitchChangeListener(this);\n\n        mHeadsetType = (ListPreference) findPreference(PREF_HEADSET);\n        mHeadsetType.setSummaryProvider(new DiracUtils.HeadsetTypeSummaryProvider());\n        mHeadsetType.setOnPreferenceChangeListener(this);\n\n        mPreset = (ListPreference) findPreference(PREF_PRESET);\n       ", "first_line_groundtruth": "mDiracUtils != null ? mDiracUtils.isDiracEnabled() : false;", "first_line_prediction": " mDiracUtils.isDiracEnabled();", "match": 0}
{"groundtruth": "orderBookLogger.on();", "prediction": "\n\t\t\n\t\torderBook.cancel(String.valueOf(orderId));\n\t\t\n\t\torderBook.showLevels();\n\t\t\n\t\t /*\n\t\t  100 @   148.14 (orders=1)\n\t\t  500 @   149.44 (orders=2)\n\t\t  100 @   149.44 (orders=3)\n\t\t  200 @   150.44 (orders=1)\n\t\t--------     2.80\n\t\t  300 @   153.24 (orders=1)\n\t\t  500 @   156.43 (", "first_line_groundtruth": "orderBookLogger.on();", "first_line_prediction": "", "match": 0}
{"groundtruth": "VoidAffordance.create(), afford(methodOn(ItemController.class).create(null))));", "prediction": " afford(VoidAffordance.class).withRel(\"create\"),\n                     afford(VoidAffordance.class).withRel(\"delete\")));\n    List<EntityModel<Representation>> representations =\n        StreamSupport.stream(this.itemRepository.findAll().spliterator(), false)\n            .map(Representation::new)\n            .map(Representation::toEntityModel)\n            .toList();\n    return ResponseEntity.ok(\n        returnPreference.toRepresentation(\n            CollectionModel.of(representations, selfLink)));\n  }\n\n  @PostMapping\n  public ResponseEntity<?> create(@RequestBody Item item) {\n    itemRepository.save(item);", "first_line_groundtruth": "VoidAffordance.create(), afford(methodOn(ItemController.class).create(null))));", "first_line_prediction": " afford(VoidAffordance.class).withRel(\"create\"),", "match": 0}
{"groundtruth": "if (StringUtils.equals(s.getFixCode(), sb)) {", "prediction": " if (s.fixCode.equals(sb)) {\n\t\t\t\t\t return s;\n\t\t\t\t }\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tpublic static final TimeInForce fromChar(char b) {\n\t\t\treturn ALL.get(b);\n\t\t}\n\t\t\n\t\tpublic char getChar() {\n\t\t\treturn b;\n\t\t}\n\t\t\n\t\tpublic String getFixCode() {\n\t\t\treturn fixCode;\n\t\t}", "first_line_groundtruth": "if (StringUtils.equals(s.getFixCode(), sb)) {", "first_line_prediction": " if (s.fixCode.equals(sb)) {", "match": 0}
{"groundtruth": "class).findById(item.id())).toUri())\n        .build();", "prediction": "class).findById(item.id())).toUri())\n        .build();\n  }\n\n  @GetMapping(\"/{id}\")\n  public ResponseEntity<?> findById(@PathVariable(\"id\") Long id) {\n    Item item = itemRepository.findById(id).orElse(null);\n    if (item == null) {\n      return ResponseEntity.notFound().build();\n    }\n    return ResponseEntity.ok(new Representation(item));\n  }\n\n  @GetMapping(\"/{id}/right-lens\")\n  public ResponseEntity<?> selectRightLens(@PathVariable(\"id\") Long id) {\n    Item item = itemRepository.findById(id).orElse(null);", "first_line_groundtruth": "class).findById(item.id())).toUri())", "first_line_prediction": "class).findById(item.id())).toUri())", "match": 1}
{"groundtruth": "\"  restPrice=\" + DoubleUtils.toDouble(restPrice));", "prediction": "String.format(\"  restPrice=%.2f\", DoubleUtils.toDouble(restPrice)));\n    \tSystem.out.println();\n    \t}", "first_line_groundtruth": "\"  restPrice=\" + DoubleUtils.toDouble(restPrice));", "first_line_prediction": "String.format(\"  restPrice=%.2f\", DoubleUtils.toDouble(restPrice)));", "match": 0}
{"groundtruth": ".withDimension(milvusConfiguration.getDimensions())\n            .build();", "prediction": " .withDimension(128)\n             .build();\n\n        List<FieldType> fieldTypes = new ArrayList<>();\n        fieldTypes.add(fieldType1);\n        fieldTypes.add(fieldType2);\n        fieldTypes.add(fieldType3);\n        fieldTypes.add(fieldType4);\n\n        CreateCollectionParam createCollectionParam = CreateCollectionParam.newBuilder()\n                .withCollectionName(milvusConfiguration.getCollectionName())\n                .withShardsNum(1)\n                .withCollectionType(milvusConfiguration.getCollectionType())\n                .withFields(fieldTypes)\n                .build();\n\n        RpcStatus status = milvus", "first_line_groundtruth": ".withDimension(milvusConfiguration.getDimensions())", "first_line_prediction": " .withDimension(128)", "match": 0}
{"groundtruth": "book.getBestBidOrder();", "prediction": " book.getBidOrder(1000);\n\t\t\tbook.cancel(bidOrder);\n\t\t\tbook.reduce(bidOrder, 100);\n\t\t\tbook.cancel(book.getBidOrder(1000));\n\t\t\tbook.reduce(book.getBidOrder(1000), 100);\n\t\t\tbook.cancel(book.getBidOrder(1000));\n\t\t\tbook.reduce(book.getBidOrder(1000), 100);\n\t\t\tbook.cancel(book.getBidOrder(1000", "first_line_groundtruth": "book.getBestBidOrder();", "first_line_prediction": " book.getBidOrder(1000);", "match": 0}
{"groundtruth": ".withTimeout(milvusConfiguration.getTimeout(), TimeUnit.MILLISECONDS)\n                .createCollection(createCollectionReq);", "prediction": ".createCollection(createCollectionReq);\n            if (response.ok()) {\n                LOGGER.info(\"Collection created successfully\");\n            } else {\n                LOGGER.error(\"Collection creation failed\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Collection creation failed\");\n            throw e;\n        }\n    }\n\n    private void dropCollection() throws Exception {\n        DropCollectionParam dropCollectionReq = DropCollectionParam.newBuilder()\n             .withCollectionName(milvusConfiguration.getCollection())\n             .build();\n\n        try {\n            R<RpcStatus> response = milvusClient.dropCollection(dropCollectionReq);\n           ", "first_line_groundtruth": ".withTimeout(milvusConfiguration.getTimeout(), TimeUnit.MILLISECONDS)", "first_line_prediction": ".createCollection(createCollectionReq);", "match": 0}
{"groundtruth": "if(milvusConfiguration.getDeleteOnStartup() && hasCollection) {", "prediction": "\n            \n            if(hasCollection) {\n                LOGGER.debug(\"Collection exists, skipping load\");\n            }\n            else {\n                LOGGER.debug(\"Collection does not exist, loading\");\n                LoadCollectionParam loadCollectionReq = LoadCollectionParam.newBuilder()\n                     .withCollectionName(milvusConfiguration.getCollection())\n                     .withFileName(milvusConfiguration.getCollection() + \".bin\")\n                     .build();\n                R<RpcStatus> response = milvusClient.withTimeout(milvusConfiguration.getTimeout(), TimeUnit.MILLISECONDS)\n                     .loadCollection(loadCollectionReq);\n                if(response.getStatus().equals(R.", "first_line_groundtruth": "if(milvusConfiguration.getDeleteOnStartup() && hasCollection) {", "first_line_prediction": "", "match": 0}
{"groundtruth": "(milvusConfiguration.getCollection())\n                .build());", "prediction": "(milvusConfiguration.getCollection())\n                 .withFileName(milvusConfiguration.getCollection() + \".bin\")\n                 .build());\n\n            if(response.getStatus().equals(R.Status.Success.getCode())) {\n                LOGGER.debug(\"Load collection response: \" + response.getData().getMsg());\n            }\n            else {\n                LOGGER.error(\"Error loading collection: \" + response.getData().getMsg());\n                if(response.getException() != null) {\n                    throw new Exception(\"Error loading collection\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error loading collection\");\n               ", "first_line_groundtruth": "(milvusConfiguration.getCollection())", "first_line_prediction": "(milvusConfiguration.getCollection())", "match": 1}
{"groundtruth": "new Entry(entry1.path, entry1.metadata, classMergerCooler.merge(entry1.data, entry2.data));", "prediction": " classMergerCooler.merge(entry1, entry2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = entry1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (entry1 != null) {\n\t\t\t\tresult = entry1;\n\t\t\t} else if (entry2 != null) {\n\t\t\t\tresult = entry2;\n\t\t\t} else {\n\t\t\t\tresult = null;\n\t\t\t}\n\t\t\t\n\t\t\tif (result != null) {\n\t\t\t\tif (isMinecraft) {\n\t\t\t\t\tside = \"client\";\n\t\t\t\t} else {\n\t\t\t\t\tside = \"server\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t", "first_line_groundtruth": "new Entry(entry1.path, entry1.metadata, classMergerCooler.merge(entry1.data, entry2.data));", "first_line_prediction": " classMergerCooler.merge(entry1, entry2);", "match": 0}
{"groundtruth": "(MinivanPlugin.filenameSafe(name) + \".jar\");", "prediction": "(artifact.path);\n\t\t}\n\t\t\n\t\tpublic String getClassifier() {\n\t\t\treturn artifact.classifier;\n\t\t}\n\t\t\n\t\tpublic String getVersion() {\n\t\t\treturn artifact.version;\n\t\t}\n\t\t\n\t\tpublic String getURL() {\n\t\t\treturn forgeDownloadRoot + getURLSuffix();\n\t\t}\n\t\t\n\t\tpublic String getSha1() {\n\t\t\treturn downloads.get(\"sha1\").getAsString();\n\t\t}\n\t\t\n\t\tpublic String getNatives() {\n\t\t\treturn natives.get(\"natives\").getAsString();\n\t\t}\n\t\t\n\t\tpublic String getNativesURL() {", "first_line_groundtruth": "(MinivanPlugin.filenameSafe(name) + \".jar\");", "first_line_prediction": "(artifact.path);", "match": 0}
{"groundtruth": "sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);", "prediction": " /* Timeout reached. */\n            requests.remove(request);\n            sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);\n        }, request.getInput().getTimeout() * 20L);\n    }\n\n    /* Sends the prompt message to the player. */\n    private static void sendInputMessage(@NotNull UUID uuid, @NotNull AquaInput input, @NotNull InputMessage type) {\n        Player player = plugin.getServer().getPlayer(uuid);\n        if (player == null) return;\n        player.sendMessage(input.getMessages().get(type)\n                .replace(\"{player}\", player.getName())\n               ", "first_line_groundtruth": "sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);", "first_line_prediction": " /* Timeout reached. */", "match": 0}
{"groundtruth": ".get(uuid).forEach(request -> request.getFuture().complete(response));", "prediction": ".get(uuid).forEach(request -> request.getFuture().complete(response));\n        requestsQueue.remove(uuid);\n    }", "first_line_groundtruth": ".get(uuid).forEach(request -> request.getFuture().complete(response));", "first_line_prediction": ".get(uuid).forEach(request -> request.getFuture().complete(response));", "match": 1}
{"groundtruth": "request.getInput().getTimeout() * 20L);", "prediction": "20 * request.getInput().getTimeout());\n    }\n\n    /* Sends the given message to the player. */\n    private static void sendInputMessage(@NotNull UUID uuid, @NotNull AquaInput input, @NotNull InputMessage message) {\n        Player player = plugin.getServer().getPlayer(uuid);\n        if (player == null) return;\n        player.sendMessage(input.getPrefix() + message.getMessage());\n    }\n\n    /* Completes the current request with the given response. */\n    private static void completeCurrentRequest(@NotNull UUID uuid, @NotNull AquaInputResponse response) {\n        Queue<AquaInputRequest", "first_line_groundtruth": "request.getInput().getTimeout() * 20L);", "first_line_prediction": "20 * request.getInput().getTimeout());", "match": 0}
{"groundtruth": "if (request.getInput().getTimeout() < 0) return;", "prediction": " plugin.getServer().getScheduler().runTaskLater(plugin, () -> {\n             if (request.getInput().hasFlag(InputFlag.CANCELABLE)) {\n                 sendInputMessage(uuid, request.getInput(), InputMessage.CANCEL);\n             } else {\n                 sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);\n             }\n             request.getFuture().complete(new AquaInputResponse(InputStatus.TIMEOUT));\n         }, request.getInput().getTimeout());\n    }\n\n    /* Sends the message of the given type to the player. */\n    private static void sendInputMessage(@NotNull UUID uuid, @", "first_line_groundtruth": "if (request.getInput().getTimeout() < 0) return;", "first_line_prediction": " plugin.getServer().getScheduler().runTaskLater(plugin, () -> {", "match": 0}
{"groundtruth": ", request.getInput(), InputMessage.PROMPT);", "prediction": ", request);\n\n        /* Timeout task. */\n        plugin.getServer().getScheduler().runTaskLater(plugin, () -> {\n            if (requestsQueue.containsKey(uuid)) {\n                Queue<AquaInputRequest> queue = requestsQueue.get(uuid);\n                if (queue.contains(request)) {\n                    queue.remove(request);\n                    if (queue.isEmpty())\n                        requestsQueue.remove(uuid);\n                }\n            }\n        }, request.getInput().getTimeout());\n    }\n\n    /* Sends the prompt message to the player. */\n    private static void sendInputMessage(@NotNull UUID uuid, @NotNull Aqua", "first_line_groundtruth": ", request.getInput(), InputMessage.PROMPT);", "first_line_prediction": ", request);", "match": 0}
{"groundtruth": ".element().getInput();", "prediction": "\n                .peek();\n    }", "first_line_groundtruth": ".element().getInput();", "first_line_prediction": "", "match": 0}
{"groundtruth": "requests.element().getFuture().complete(response);", "prediction": " /* If the current head of the input requests queue is not the same as the one that was completed,\n          * then the request has been completed by another thread.\n          * */\n        if (requests.element() != requests.peek()) return;\n\n        requests.poll();\n        requests.element().getFuture().complete(response);\n    }", "first_line_groundtruth": "requests.element().getFuture().complete(response);", "first_line_prediction": " /* If the current head of the input requests queue is not the same as the one that was completed,", "match": 0}
{"groundtruth": "request.getFuture();", "prediction": " request.getFuture();\n    }\n\n    /**\n     * Initializes the plugin.\n     *\n     * @param plugin the plugin\n     * */\n    private static void initialize(@NotNull JavaPlugin plugin) {\n        AquaInputManager.plugin = plugin;\n    }\n\n    /**\n     * Initializes the input request.\n     *\n     * @param uuid the unique id\n     * @param request the request\n     * */\n    private static void initializeInputRequest(@NotNull UUID uuid, @NotNull AquaInputRequest request) {\n        CompletableFuture<AquaInputResponse> future = new CompletableFuture<>();\n        request.setFuture(future);\n        plugin.getServer().get", "first_line_groundtruth": "request.getFuture();", "first_line_prediction": " request.getFuture();", "match": 0}
{"groundtruth": "d.getOriginalText().split(\"\\\\n\");", "prediction": " sb.toString().split(\" \");\n        List<String> outputList = new ArrayList<>();\n        for(String s : splitText) {\n            outputBuilder.append(agencyConfiguration.getPythonScriptPath()).append(\" \").append(s).append(\" \");\n            outputList.add(s);\n        }\n        String output = outputBuilder.toString();\n        LOGGER.debug(\"Got output from python: \" + output);\n        d.setOutput(output);\n        d.setOutputList(outputList);\n        return d;\n    }", "first_line_groundtruth": "d.getOriginalText().split(\"\\\\n\");", "first_line_prediction": " sb.toString().split(\" \");", "match": 0}
{"groundtruth": "(description.getName().equals(skillType)) {", "prediction": "(description.getName().equals(skillType)) {\n                    returnVal.put(skillType, currentSkill);\n                    break;\n                }\n            }\n        }\n        return returnVal;\n    }", "first_line_groundtruth": "(description.getName().equals(skillType)) {", "first_line_prediction": "(description.getName().equals(skillType)) {", "match": 1}
{"groundtruth": "conversation.formattedFullHistory(), null);", "prediction": "getLongInput(new Scanner(System.in)), conversation);\n        return historyAgentConversation;\n    }", "first_line_groundtruth": "conversation.formattedFullHistory(), null);", "first_line_prediction": "getLongInput(new Scanner(System.in)), conversation);", "match": 0}
{"groundtruth": "= currentSkill.describe();", "prediction": " = currentSkill.describe();\n                if(description.getName().equals(skillType)) {\n                    returnVal.put(skillType, currentSkill);\n                    break;\n                }\n            }\n        }\n        return returnVal;\n    }", "first_line_groundtruth": "= currentSkill.describe();", "first_line_prediction": " = currentSkill.describe();", "match": 0}
{"groundtruth": "conversation.getAllMessages().get(0).getRole().equals(ChatMessageRole.SYSTEM.value())) {", "prediction": "historyAgentConversation.hasSystemMessage()) {\n            summarized.addMessage(historyAgentConversation.getSystemMessage());\n        }\n\n        // copy the agent messages\n        for(final var message : historyAgentConversation.getMessages()) {\n            summarized.addMessage(message);\n        }\n\n        return summarized;\n    }", "first_line_groundtruth": "conversation.getAllMessages().get(0).getRole().equals(ChatMessageRole.SYSTEM.value())) {", "first_line_prediction": "historyAgentConversation.hasSystemMessage()) {", "match": 0}
{"groundtruth": ").infer(object, recordName));", "prediction": "recordName));\n        writer.write(object, encoder);\n        encoder.flush();\n        return ByteBuffer.wrap(outputStream.toByteArray());\n    }", "first_line_groundtruth": ").infer(object, recordName));", "first_line_prediction": "recordName));", "match": 0}
{"groundtruth": "conversation.getAllMessages())\n                    .maxTokens(agencyConfiguration.getChatRequestMaxTokens())\n                    .build();", "prediction": "conversation.getAllMessages())\n                     .model(openAiConfiguration.chatModel())\n                     .n(tokenCount)\n                     .build();\n\n        ChatCompletionResult chatCompletionResult = openAiService.chatCompletion(chatCompletionRequest);\n        LOGGER.debug(\"JTokkit returned \" + chatCompletionResult.getMessages().size() + \" messages\");\n\n        ChatMessage aiResponseMessage = new ChatMessage(ChatMessageRole.ASSISTANT.value(), chatCompletionResult.getMessages().get(0).getContent());\n        conversation.addMessage(aiResponseMessage);\n        return aiResponseMessage;\n    }\n\n    public Integer getTokenCount(EncodingRegistry", "first_line_groundtruth": "conversation.getAllMessages())", "first_line_prediction": "conversation.getAllMessages())", "match": 1}
{"groundtruth": "var message : conversation.getAllMessages()) {", "prediction": " ChatMessage chatMessage : conversation.getAllMessages()) {\n            sum += encoding.countTokens(chatMessage.getContent());\n            sum += encoding.countTokens(chatMessage.getRole());\n            sum += encoding.countTokens(\"\\n\");\n        }\n        return sum / tokensPerMessage;\n    }\n\n    public String getSummary(String text) {\n        return summarizerAgent.summarize(text);\n    }\n\n    public String getSummary(String text, String model) {\n        return summarizerAgent.summarize(text, model);\n    }\n\n    public String getSummary(String text, String model, String summaryLength", "first_line_groundtruth": "var message : conversation.getAllMessages()) {", "first_line_prediction": " ChatMessage chatMessage : conversation.getAllMessages()) {", "match": 0}
{"groundtruth": "historyAgentConversation.getAllMessages().get(\n                        historyAgentConversation.getAllMessages().size()-1)));", "prediction": " historyAgentConversation.formattedFullHistory()));\n\n        return summarized;\n    }", "first_line_groundtruth": "historyAgentConversation.getAllMessages().get(", "first_line_prediction": " historyAgentConversation.formattedFullHistory()));", "match": 0}
{"groundtruth": "return mapper.deleteRegister(challengeSeq, id);", "prediction": " // TODO Auto-generated method stub\n\t\tint res = rmRepository.deleteRegister(challengeSeq, id);\n\t\tSystem.out.println(\"biz delete res: \" + res);\n\t\treturn res;", "first_line_groundtruth": "return mapper.deleteRegister(challengeSeq, id);", "first_line_prediction": " // TODO Auto-generated method stub", "match": 0}
{"groundtruth": "dto.setOnOffNoty(\"Y\");", "prediction": "", "first_line_groundtruth": "dto.setOnOffNoty(\"Y\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "> challenges = challengeBiz.findbyCate(category);", "prediction": "> challenges = challengeBiz.findByChallengeCategory(category);\n\t      model.addAttribute(\"challenges\", challenges);\n\t      model.addAttribute(\"cate\", category);\n\t      return \"main\";\n\t   }\n\t   \n\t   @GetMapping(\"/main_work\")\n\t   public String getWorkChallenges(Model model) {\n\t      String category = \"\uacf5\ubd80\";\n\t      List<ChallengeDto> challenges = challengeBiz.findByChallengeCategory(category);\n\t      model.addAttribute(\"challenges\", challenges);\n\t      model.addAttribute(\"cate\", category);\n\t      return \"main\";\n\t   }\n\t   \n\t   @GetMapping(\"/main_etc\")\n\t   public String getEtcChallenges(Model model", "first_line_groundtruth": "> challenges = challengeBiz.findbyCate(category);", "first_line_prediction": "> challenges = challengeBiz.findByChallengeCategory(category);", "match": 0}
{"groundtruth": "historyAgentConversation.getAllMessages().size()-1)));", "prediction": "0).getContent()));\n\n        return summarized;\n    }", "first_line_groundtruth": "historyAgentConversation.getAllMessages().size()-1)));", "first_line_prediction": "0).getContent()));", "match": 0}
{"groundtruth": "conversation.getAllMessages().size()).toArray(new ChatMessage[0]);", "prediction": " conversation.getAllMessages().size())\n                     .toArray(new ChatMessage[0]);\n    }", "first_line_groundtruth": "conversation.getAllMessages().size()).toArray(new ChatMessage[0]);", "first_line_prediction": " conversation.getAllMessages().size())", "match": 0}
{"groundtruth": "dto.setUserLoginType(\"K\");", "prediction": "", "first_line_groundtruth": "dto.setUserLoginType(\"K\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "dto.setUserName(userName);", "prediction": "\ttry {\n\t\t\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\t\tdto.setUserBirth(sdf.parse(userBirth));\n\t\t\t} catch (ParseException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\tdto.setUserName(userName);\n\t\tdto.setUserPhone(userPhone);\n\t\tdto.setUserLoginType(\"kakao\");\n\t\tkakaoLogin.insertUser(dto);\n\t\treturn \"redirect:/\";", "first_line_groundtruth": "dto.setUserName(userName);", "first_line_prediction": "\ttry {", "match": 0}
{"groundtruth": ".put(\"userId\", dto.getUserId());", "prediction": ".put(\"url\", \"/kakaoAuth/join\");\n\t\t}\n\t\treturn result;", "first_line_groundtruth": ".put(\"userId\", dto.getUserId());", "first_line_prediction": ".put(\"url\", \"/kakaoAuth/join\");", "match": 0}
{"groundtruth": "dto.setUserPhone(userPhone);", "prediction": "\tdto.setUserPhone(userPhone);\n\t\t\tdto.setUserLoginType(\"kakao\");\n\t\t\tkakaoLogin.insertUser(dto);\n\t\treturn \"redirect:/\";", "first_line_groundtruth": "dto.setUserPhone(userPhone);", "first_line_prediction": "\tdto.setUserPhone(userPhone);", "match": 0}
{"groundtruth": "user = loginBiz.findByUserId(userId);", "prediction": " dto = new UserDto();\n\t\tdto.setUserId(userId);\n\t\tdto.setUserPw(userPw);\n\t\tSystem.out.println(\"login \uc9c4\uc785\");\n\t\tSystem.out.println(\"login check\\n\" + dto);\n\t\tif(loginBiz.loginCheck(dto)) {\n\t\t\tSystem.out.println(\"login success\");\n\t\t\tsession.setAttribute(\"userId\", dto.getUserId());\n\t\t\tsession.setAttribute(\"userName\", dto.getUserName());\n\t\t\treturn \"redirect:/main\";\n\t\t}else {\n\t\t\tSystem.out.println(\"login fail\");\n\t\t\t", "first_line_groundtruth": "user = loginBiz.findByUserId(userId);", "first_line_prediction": " dto = new UserDto();", "match": 0}
{"groundtruth": "&& user.getUserPw().equals(userPw)) {", "prediction": " && userPw.equals(user.getUserPw())) {\n\t\t\tsession.setAttribute(\"user\", user);\n\t\t\treturn \"redirect:/index\";\n\t\t} else {\n\t\t\tmodel.addAttribute(\"msg\", \"\uc544\uc774\ub514 \ub610\ub294 \ube44", "first_line_groundtruth": "&& user.getUserPw().equals(userPw)) {", "first_line_prediction": " && userPw.equals(user.getUserPw())) {", "match": 0}
{"groundtruth": "openAiConfiguration.chatModel(), \n            conversation);", "prediction": "0, \n            conversation.getConversation().get(0).getTokens().size());\n\n        ChatCompletionRequest request = requestBuilder\n            .withPrompt(conversation.getConversation().get(0).getTokens().get(0).getTokens())\n            .withMaxTokens(tokenCount)\n            .withTemperature(openAiConfiguration.getTemperature())\n            .withFrequencyPenalty(openAiConfiguration.getFrequencyPenalty())\n            .withPresencePenalty(openAiConfiguration.getPresencePenalty())\n            .withStop(openAiConfiguration.getStop())\n            .withStream(openAiConfiguration.getStream())\n            .", "first_line_groundtruth": "openAiConfiguration.chatModel(), ", "first_line_prediction": "0, ", "match": 0}
{"groundtruth": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {", "prediction": "(historyAgentConversation.getAllMessages().size() > 1) {\n            for(int i = 1; i < historyAgentConversation.getAllMessages().size(); i++) {\n                recentMessagesSB.append(historyAgentConversation.getAllMessages().get(i).getContent());\n                recentMessagesSB.append(\"\\n\");\n            }\n        }\n        else {\n            recentMessagesSB.append(\"No messages yet.\");\n        }\n        \n        summarized.addMessage(\n            new ChatMessage(ChatMessageRole.SYSTEM.value(), recentMessagesSB.toString()));\n\n        return summarized;\n    }", "first_line_groundtruth": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {", "first_line_prediction": "(historyAgentConversation.getAllMessages().size() > 1) {", "match": 0}
{"groundtruth": "ChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);", "prediction": "\tChallengeDto challengeDto = challengeBiz.selectOne(challengeSeq);\n\t\t\t\tUserDto userDto = loginBiz.selectOne(userId);\n\t\t\t\tRegisteredMemberDto registeredMemberDto = new RegisteredMemberDto();\n\t\t\t\tregisteredMemberDto.setChallengeDto(challengeDto);\n\t\t\t\tregisteredMemberDto.setUserDto(userDto);\n\t\t\t\tregisteredMemberDto.setJoinDate(new Date());\n\t\t\t\tregisteredMemberDto.setChallengeSeq(challengeSeq);\n\t\t\t\tregisteredMemberDto.setUserId(userId);\n\t\t\t\tregisteredMemberDto.setChallengeName(challengeDto.getChallengeName());\n\t\t\t\tregisteredMemberDto", "first_line_groundtruth": "ChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);", "first_line_prediction": "\tChallengeDto challengeDto = challengeBiz.selectOne(challengeSeq);", "match": 0}
{"groundtruth": "challenge = challengeBiz.selectOne(challengeName);", "prediction": " challengeDto = challengeBiz.findbyChallengeName(challengeName);\n\t\tmodel.addAttribute(\"challenge\", challengeDto);\n\t\tmodel.addAttribute(\"cate\", challengeDto.getCate());\n\t\tmodel.addAttribute(\"rmTotal\", registeredBiz.selectAll());\n\t\treturn \"detail\";", "first_line_groundtruth": "challenge = challengeBiz.selectOne(challengeName);", "first_line_prediction": " challengeDto = challengeBiz.findbyChallengeName(challengeName);", "match": 0}
{"groundtruth": "return redisOps.getValue(getApiKeyRedisKey());", "prediction": " return redisOps.getValue(apiKeyRedisKey);\n    }\n\n    @Override\n    public String getOpenAIApiKeyId() {\n        return openAIApiKeyId;\n    }\n\n    @Override\n    public OkHttpClientUtils getOkHttpClient() {\n        return okHttpClientUtils;\n    }\n\n    @Override\n    public void setOkHttpClient(OkHttpClientUtils okHttpClientUtils) {\n        this.okHttpClientUtils = okHttpClientUtils;\n    }\n\n    @Override\n    public String getLockRedisKey() {\n        return lockRedisKey;\n    }\n\n    @Override\n    public String getApiKeyRedisKey() {\n        return apiKeyRedisKey;\n    }\n\n    @", "first_line_groundtruth": "return redisOps.getValue(getApiKeyRedisKey());", "first_line_prediction": " return redisOps.getValue(apiKeyRedisKey);", "match": 0}
{"groundtruth": "redisOps.setValue(apiKeyRedisKey, openApiKey);", "prediction": " // \u4fdd\u5b58 openAIApiKeyId\n        redisOps.setValue(apiKeyRedisKey, openAIApiKeyId);\n        // \u4fdd\u5b58 openApiKey\n        redisOps.setValue(apiKeyRedisKey + \":open_api_key\", openApiKey);\n    }\n\n    @Override\n    public String getOpenAIApiKey() {\n        return redisOps.getValue(apiKeyRedisKey + \":open_api_key\");\n    }\n\n    @Override\n    public String getOpenAIApiKeyId() {\n        return redisOps.getValue(apiKeyRedisKey);\n    }\n\n    @Override\n    public OkHttpClientUtils getOkHttpClient() {\n        if (okHttpClientUtils ==", "first_line_groundtruth": "redisOps.setValue(apiKeyRedisKey, openApiKey);", "first_line_prediction": " // \u4fdd\u5b58 openAIApiKeyId", "match": 0}
{"groundtruth": "int currentMember = registeredBiz.coutBySeq(challengeSeq);", "prediction": "\n\t\t\t\n\t\t\t// \ucc38\uc5ec\ud558\uae30\n\t\t\tchallengeBiz.joinUser(currentChallenge, currentUser);", "first_line_groundtruth": "int currentMember = registeredBiz.coutBySeq(challengeSeq);", "first_line_prediction": "", "match": 0}
{"groundtruth": "registeredBiz.coutBySeq(challengeSeq);", "prediction": "0;\n\t\t\t\tif (currentChallenge.getChallengeMaxMember() == 1) {\n\t\t\t\t\tmember = 1;\n\t\t\t\t} else {\n\t\t\t\t\tmember = currentMember + 1;\n\t\t\t\t}\n\t\t\t\tif (member == currentChallenge.getChallengeMaxMember()) {\n\t\t\t\t\tcurrentChallenge.setChallengeEnabled(\"N\");\n\t\t\t\t\tchallengeBiz.update(currentChallenge);\n\t\t\t\t}\n\t\t\t\treturn \"success\";\n\t\t\t} else {\n\t\t\t\treturn \"fail\";\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"fail\";\n\t\t}", "first_line_groundtruth": "registeredBiz.coutBySeq(challengeSeq);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "registeredBiz.challengeStart(challengeSeq);", "prediction": "\tchallengeBiz.updateChallengeEnabled(challengeSeq);\n\t\t\t\t}\n\t\t\t\treturn \"success\";\n\t\t\t} else {\n\t\t\t\treturn \"fail\";\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"fail\";\n\t\t}", "first_line_groundtruth": "registeredBiz.challengeStart(challengeSeq);", "first_line_prediction": "\tchallengeBiz.updateChallengeEnabled(challengeSeq);", "match": 0}
{"groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")\n\t\t\t\t\t&& currentMember < currentChallenge.getChallengeMaxMember()) {", "prediction": "\tif (currentMember == 0) {\n\t\t\t\t\t//", "first_line_groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")", "first_line_prediction": "\tif (currentMember == 0) {", "match": 0}
{"groundtruth": "return currentChallenge.getChallengeName() + \"\uc5d0 \ucc38\uc5ec\ud558\uc600\uc2b5\ub2c8\ub2e4. \";", "prediction": "\treturn \"success\";\n\t\t\t\t} else {\n\t\t\t\t\treturn \"fail\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn \"fail\";\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"fail\";\n\t\t}", "first_line_groundtruth": "return currentChallenge.getChallengeName() + \"\uc5d0 \ucc38\uc5ec\ud558\uc600\uc2b5\ub2c8\ub2e4. \";", "first_line_prediction": "\treturn \"success\";", "match": 0}
{"groundtruth": "currentChallenge.getChallengeMaxMember()) {", "prediction": "3\n\t\t\t\t\t&& currentChallenge.getChallengeCate().equals(currentUser.getUserCate())) {\n\t\t\t\t// \ucc38\uc5ec\ud558\uae30\n\t\t\t\tregisteredBiz.insert(challengeSeq, userId);\n\t\t\t\treturn \"success\";\n\t\t\t} else {\n\t\t\t\treturn \"fail\";\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"fail\";\n\t\t}", "first_line_groundtruth": "currentChallenge.getChallengeMaxMember()) {", "first_line_prediction": "3", "match": 0}
{"groundtruth": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());", "prediction": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t\t\tsettings.sopsFilesReadOnly != settingsComponent.isSopsFilesReadOnly();", "first_line_groundtruth": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||", "first_line_prediction": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||", "match": 1}
{"groundtruth": "settingsComponent.getSopsFilesReadOnly());", "prediction": " settingsComponent.getSopsFilesReadOnly());", "first_line_groundtruth": "settingsComponent.getSopsFilesReadOnly());", "first_line_prediction": " settingsComponent.getSopsFilesReadOnly());", "match": 0}
{"groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {", "prediction": "\n\t\t\tint res = registeredBiz.delete(challengeSeq, currentUser.getId());\n\t\t\tSystem.out.println(\"controller delete res: \" + res);\n\t\t\t\n\t\t\t// \ub514\ube44 \ubc18\uc601 \ud6c4", "first_line_groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {", "first_line_prediction": "", "match": 0}
{"groundtruth": "SettingsState.getInstance().sopsEnvironment.split(\"\\\\s(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");", "prediction": " Arrays.stream(EnvironmentUtil.getEnvironmentVariables())\n\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t.toArray(String[]::new);", "first_line_groundtruth": "SettingsState.getInstance().sopsEnvironment.split(\"\\\\s(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");", "first_line_prediction": " Arrays.stream(EnvironmentUtil.getEnvironmentVariables())", "match": 0}
{"groundtruth": "currentChallenge.getChallengeMaxMember() <= member) {", "prediction": "member == currentChallenge.getChallengeMaxMember()) {\n\t\t\t\t\tchallengeBiz.updateChallengeEnabled(challengeSeq);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn \"success\";\n\t\t\t} else {\n\t\t\t\treturn \"fail\";\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"fail\";\n\t\t}", "first_line_groundtruth": "currentChallenge.getChallengeMaxMember() <= member) {", "first_line_prediction": "member == currentChallenge.getChallengeMaxMember()) {", "match": 0}
{"groundtruth": "+ \" &3&o\u2192 &r\" + blockItem.getDisplayName());", "prediction": " + \" &7&o- &f&o\" + blockItem.getName(1));\n        }\n\n        Helpers.sendFormattedMessage(sender,\"\");\n        return true;\n    }", "first_line_groundtruth": "+ \" &3&o\u2192 &r\" + blockItem.getDisplayName());", "first_line_prediction": " + \" &7&o- &f&o\" + blockItem.getName(1));", "match": 0}
{"groundtruth": "world.dropItemNaturally(location, blockItem.getItem(1));", "prediction": " world.dropItemNaturally(location, blockItem.getItem(1));\n            }\n        }\n    }\n\n    public void preload () {\n        for (int x = -1; x <= 1; x++) {\n            for (int z = -1; z <= 1; z++) {\n                for (int y = -1; y <= 1; y++) {\n                    Location location = new Location(plugin.getServer().getWorld(\"world\"), x, y, z);\n                    BlockItem blockItem = new BlockItem(location);\n                    this.addBlock(location, blockItem);\n                }\n           ", "first_line_groundtruth": "world.dropItemNaturally(location, blockItem.getItem(1));", "first_line_prediction": " world.dropItemNaturally(location, blockItem.getItem(1));", "match": 0}
{"groundtruth": "player.getInventory().addItem(blockItem.getItem(amount));", "prediction": " if (amount > blockItem.getAmount()) {\n            Helpers.sendMessage(this.plugin, player, Keys.MESSAGES_CMD_BLOCK_NOT_ENOUGH);\n            return false;\n        }\n\n        blockItem.setAmount(blockItem.getAmount() - amount);\n        player.getInventory().addItem(blockItem.getItemStack(amount));\n\n        return true;\n    }\n\n    public boolean giveBlockItem (CommandSender sender, String blockType, int amount) {\n        if (sender instanceof Player) {\n            Player player = (Player) sender;\n            return this.giveBlockItem(blockType, player", "first_line_groundtruth": "player.getInventory().addItem(blockItem.getItem(amount));", "first_line_prediction": " if (amount > blockItem.getAmount()) {", "match": 0}
{"groundtruth": "edgarSectorEnrichService.exportToCSV(writer);", "prediction": " stockCikRepository.findAll().forEach(writer::println);\n        }\n    }", "first_line_groundtruth": "edgarSectorEnrichService.exportToCSV(writer);", "first_line_prediction": " stockCikRepository.findAll().forEach(writer::println);", "match": 0}
{"groundtruth": "edgarSectorEnrichService.enrichCik(ticker);", "prediction": " stockCikRepository.findByTicker(ticker);\n        if (stockCikOptional.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n        }\n        Stock stockCik = stockCikOptional.get();\n        try {\n            Stock.EnrichedData enrichedData = stockEnrichmentService.enrich(stockCik.getCik(), stockCik.getTicker());\n            stockCik.updateEnrichedData(enrichedData);\n            stockCik.setLastError(null);\n            return ResponseEntity.ok(cikRepository.save(stockC", "first_line_groundtruth": "edgarSectorEnrichService.enrichCik(ticker);", "first_line_prediction": " stockCikRepository.findByTicker(ticker);", "match": 0}
{"groundtruth": "fullIndexDownloadService.processFillings(filingTypesList);", "prediction": " filingsDownloadService.downloadFilings(filingTypesList);\n             fullIndexDownloadService.downloadFullIndex();\n             edgarSectorEnrichService.enrichStockWithCusips();\n             return ResponseEntity.ok().build();\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();\n        }\n    }", "first_line_groundtruth": "fullIndexDownloadService.processFillings(filingTypesList);", "first_line_prediction": " filingsDownloadService.downloadFilings(filingTypesList);", "match": 0}
{"groundtruth": "String> formTypes = fullIndexRepository.findDistinctFormTypes();", "prediction": "String> formTypes = filingsDownloadService.getDistinctFormTypes();\n        return new ResponseEntity<>(formTypes, HttpStatus.OK);\n    }", "first_line_groundtruth": "String> formTypes = fullIndexRepository.findDistinctFormTypes();", "first_line_prediction": "String> formTypes = filingsDownloadService.getDistinctFormTypes();", "match": 0}
{"groundtruth": "filingsDownloadService.downloadFullIndex();", "prediction": " String result = fullIndexDownloadService.downloadFullIndex();\n         return new ResponseEntity<>(result, HttpStatus.OK);\n     }", "first_line_groundtruth": "filingsDownloadService.downloadFullIndex();", "first_line_prediction": " String result = fullIndexDownloadService.downloadFullIndex();", "match": 0}
{"groundtruth": "<String> allFormTypes = fullIndexRepository.findDistinctFormTypes();", "prediction": "<String> filingTypes = fullIndexRepository.findByFormTypeContaining(\"13\").stream()\n                .map(FullIndex::getFormType)\n                .collect(Collectors.toSet());\n\n        int newFilings = 0;\n        int existingFilings = 0;\n\n        for (String filingType : filingTypes) {\n            log.info(\"Downloading filings of type {}\", filingType);\n            String result = downloadFilingsOfType(filingType);\n            newFilings += result.split(\"New filings: \")[1].split(\",\")[0].trim();\n            existingFilings += result", "first_line_groundtruth": "<String> allFormTypes = fullIndexRepository.findDistinctFormTypes();", "first_line_prediction": "<String> filingTypes = fullIndexRepository.findByFormTypeContaining(\"13\").stream()", "match": 0}
{"groundtruth": "IAPKAnalyzer.createFor(inputFile);", "prediction": " IAPKAnalyzer.createFor(inputFile);\n        var result = analyzer.analyzeAPK();\n        var gson = new GsonBuilder().setPrettyPrinting().create();\n        return gson.toJson(result);\n    }", "first_line_groundtruth": "IAPKAnalyzer.createFor(inputFile);", "first_line_prediction": " IAPKAnalyzer.createFor(inputFile);", "match": 0}
{"groundtruth": "targetFilings = fullIndexRepository.findByFormType(filingType);", "prediction": " fullIndices = fullIndexRepository.findByFormType(filingType);\n        if (fullIndices.isEmpty()) {\n            log.info(\"No full indices found for filing type {}\", filingType);\n            return null;\n        }\n\n        List<String> cikList = fullIndices.stream()\n                .map(FullIndex::getCik)\n                .map(String::valueOf)\n                .collect(Collectors.toList());\n\n        List<String> cikCusipPairs = cikList.stream()\n                .map(cik -> Pair.of(cik, cikCusipMapsRepository.find", "first_line_groundtruth": "targetFilings = fullIndexRepository.findByFormType(filingType);", "first_line_prediction": " fullIndices = fullIndexRepository.findByFormType(filingType);", "match": 0}
{"groundtruth": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");", "prediction": " nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");\n            final File[] origNativeLibDirs = (File[]) nativeLibDirField.get(dexPathList);\n\n            final List<File> newNativeLibDirList = new ArrayList<>(origNativeLibDirs.length + 1);\n            newNativeLibDirList.add(folder);\n            for (File origNativeLibDir : origNativeLibDirs) {\n                if (!folder.equals(origNativeLibDir)) {\n                    newNativeLibDirList.add(origNativeLibDir);\n                }\n            }\n            native", "first_line_groundtruth": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");", "first_line_prediction": " nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");", "match": 0}
{"groundtruth": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");", "prediction": " Field nativeLibraryPathField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryPath\");\n            final String origLibPath = (String) nativeLibraryPathField.get(dexPathList);\n            final String[] origLibPathSplit = origLibPath.split(\":\");\n            final StringBuilder newLibPath = new StringBuilder(folder.getPath());\n\n            for (String origLib : origLibPathSplit) {\n                if (origLib == null || folder.getPath().equals(origLib)) {\n                    continue;\n                }\n                newLibPath.append(':').append(origLib);\n            }\n            nativeLibraryPath", "first_line_groundtruth": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");", "first_line_prediction": " Field nativeLibraryPathField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryPath\");", "match": 0}
{"groundtruth": "Field nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");", "prediction": " List<String> pathList = (List<String>) dexPathList;\n            final Iterator<String> it = pathList.iterator();\n            while (it.hasNext()) {\n                final String path = it.next();\n                if (path.startsWith(folder.getPath())) {\n                    it.remove();\n                    break;\n                }\n            }\n            pathList.add(0, folder.getPath());\n            pathListField.set(classLoader, pathList);\n        }\n    }\n\n    private static final class V23 {\n        private static void install(ClassLoader classLoader, File folder)  throws Throwable {\n            final Field", "first_line_groundtruth": "Field nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");", "first_line_prediction": " List<String> pathList = (List<String>) dexPathList;", "match": 0}
{"groundtruth": "= ShareReflectUtil.findField(classLoader, \"libPath\");", "prediction": " = ClassLoader.class.getDeclaredField(\"path\");\n            pathField.setAccessible(true);\n            String oldPath = (String) pathField.get(classLoader);\n            String newPath = oldPath + File.pathSeparator + addPath;\n            pathField.set(classLoader, newPath);\n        }\n    }\n\n    private static final class V14 {\n        private static void install(ClassLoader classLoader, File folder)  throws Throwable {\n            String addPath = folder.getPath();\n            Method method = ClassLoader.class.getDeclaredMethod(\"addURL\", new Class[]{File.class});\n            method.setAccessible(true", "first_line_groundtruth": "= ShareReflectUtil.findField(classLoader, \"libPath\");", "first_line_prediction": " = ClassLoader.class.getDeclaredField(\"path\");", "match": 0}
{"groundtruth": "= parser.readLong(buffer, baseOffset);", "prediction": " = parser.readWord(buffer, baseOffset);\n        val  = parser.readLong(buffer, baseOffset + 0x8);\n        ptr  = parser.readLong(buffer, baseOffset + 0x10);\n    }", "first_line_groundtruth": "= parser.readLong(buffer, baseOffset);", "first_line_prediction": " = parser.readWord(buffer, baseOffset);", "match": 0}
{"groundtruth": "val = parser.readWord(buffer, baseOffset + 0x4);", "prediction": " val = parser.readWord(buffer, baseOffset + 0x4);\n    }", "first_line_groundtruth": "val = parser.readWord(buffer, baseOffset + 0x4);", "first_line_prediction": " val = parser.readWord(buffer, baseOffset + 0x4);", "match": 0}
{"groundtruth": "= parser.readWord(buffer, 0x1C);", "prediction": " = parser.readHalf(buffer, 0x12);\n        shoff  = parser.readHalf(buffer, 0x14);\n        flags  = parser.readHalf(buffer, 0x16);\n        ehsize = parser.readHalf(buffer, 0x18);\n        phentsize = parser.readHalf(buffer, 0x1A);\n        phnum = parser.readHalf(buffer, 0x1C);\n        shentsize = parser.readHalf(buffer, 0x1E);\n        shnum = parser.readHalf(", "first_line_groundtruth": "= parser.readWord(buffer, 0x1C);", "first_line_prediction": " = parser.readHalf(buffer, 0x12);", "match": 0}
{"groundtruth": "final Method makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class);", "prediction": " final Method makeElements = ShareReflectUtil.findMethod(dexPathList,\n                     \"makePathElements\", List.class, File.class, List.class);\n            final ArrayList<IOException> suppressedExceptions = new ArrayList<>();\n\n            final Object[] elements = (Object[]) makeElements.invoke(dexPathList, newLibDirs, null, suppressedExceptions);\n\n            final Field nativeLibraryPathElements = ShareReflectUtil.findField(dexPathList, \"nativeLibraryPathElements\");\n            nativeLibraryPathElements.set(dexPathList, elements);\n        }\n    }", "first_line_groundtruth": "final Method makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class);", "first_line_prediction": " final Method makeElements = ShareReflectUtil.findMethod(dexPathList,", "match": 0}
{"groundtruth": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");", "prediction": " pathListField = ShareReflectUtil.findField(classLoader, \"libPathList\");\n            final List<String> origLibPathList = (List<String>) pathListField.get(classLoader);\n            final List<String> newLibPathList = new ArrayList<>(origLibPathList.size() + 1);\n            newLibPathList.addAll(origLibPathList);\n            newLibPathList.add(addPath);\n            pathListField.set(classLoader, newLibPathList);\n        }\n    }\n\n    private static final class V14 {\n        private static void install(ClassLoader", "first_line_groundtruth": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");", "first_line_prediction": " pathListField = ShareReflectUtil.findField(classLoader, \"libPathList\");", "match": 0}
{"groundtruth": "ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder %s is illegal\", folder);", "prediction": " return;\n        }\n        String[] files = folder.list();\n        if (files == null) {\n            return;\n        }\n        for (String file : files) {\n            File f = new File(folder, file);\n            if (f.isDirectory()) {\n                installNativeLibraryPath(classLoader, f);\n            } else {\n                if (file.endsWith(\".so\")) {\n                    installNativeLibrary(classLoader, f);\n                }\n            }\n        }\n    }\n\n    public static void installNativeLibrary(ClassLoader classLoader, File file) throws Throwable {\n        if (file == null || !file.exists()) {", "first_line_groundtruth": "ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder %s is illegal\", folder);", "first_line_prediction": " return;", "match": 0}
{"groundtruth": "parser.readWord(buffer, 0x20);", "prediction": "0;\n        flags = parser.readWord(buffer, 0x20);\n        ehsize = parser.readHalf(buffer, 0x22);\n        phentsize = parser.readHalf(buffer, 0x24);\n        phnum = parser.readHalf(buffer, 0x26);\n        shentsize = parser.readHalf(buffer, 0x28);\n        shnum = parser.readHalf(buffer, 0x2A);\n        shstrndx = parser.readHalf(buffer, 0x2C);\n    }\n\n    @", "first_line_groundtruth": "parser.readWord(buffer, 0x20);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");", "prediction": " libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");\n            final List<String> libraryPathElements = (List<String>) libraryPathElementsFiled.get(classLoader);\n            final Iterator<String> libPathElementIt = libraryPathElements.iterator();\n            while (libPathElementIt.hasNext()) {\n                final String libPath = libPathElementIt.next();\n                if (libPath.startsWith(folder.getPath())) {\n                    libPathElementIt.remove();\n                    break;\n                }\n            }\n            libraryPathElements.add(0, folder.getPath", "first_line_groundtruth": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");", "first_line_prediction": " libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");", "match": 0}
{"groundtruth": "makeElements = ShareReflectUtil.findMethod(dexPathList,\n                    \"makePathElements\", List.class, File.class, List.class);", "prediction": " addNativeLibraryDirectoryMethod = ShareReflectUtil.findMethod(dexPathList, \"addNativeLibraryDirectory\", File.class);\n            addNativeLibraryDirectoryMethod.invoke(dexPathList, newLibDirs.toArray(new File[0]));\n        }\n    }\n\n    private static final class V25 {\n        private static void install(ClassLoader classLoader, File folder)  throws Throwable {\n            final Field pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");\n            final Object dexPathList = pathListField.get(classLoader);\n\n            final Field nativeLibraryDirectories = ShareReflectUtil", "first_line_groundtruth": "makeElements = ShareReflectUtil.findMethod(dexPathList,", "first_line_prediction": " addNativeLibraryDirectoryMethod = ShareReflectUtil.findMethod(dexPathList, \"addNativeLibraryDirectory\", File.class);", "match": 0}
{"groundtruth": "= parser.readHalf(buffer, 0x2A);", "prediction": " = parser.readHalf(buffer, 0x24);\n        phnum = parser.readHalf(buffer, 0x26);\n        shentsize = parser.readHalf(buffer, 0x28);\n        shnum = parser.readHalf(buffer, 0x2A);\n        shstrndx = parser.readHalf(buffer, 0x2C);\n    }\n\n    @Override\n    public Elf.SectionHeader getSectionHeader(final int index) throws IOException {\n        return new Section32Header(parser, this, index);\n    }\n\n    @Override\n    public", "first_line_groundtruth": "= parser.readHalf(buffer, 0x2A);", "first_line_prediction": " = parser.readHalf(buffer, 0x24);", "match": 0}
{"groundtruth": "= parser.readHalf(buffer, 0x2E);", "prediction": " = parser.readHalf(buffer, 0x2E);\n        shnum = parser.readHalf(buffer, 0x30);\n        shstrndx = parser.readHalf(buffer, 0x32);\n    }\n\n    @Override\n    public Elf.SectionHeader getSectionHeader(final int index) throws IOException {\n        return new Section32Header(parser, this, index);\n    }\n\n    @Override\n    public Elf.ProgramHeader getProgramHeader(final int index) throws IOException {\n        return new Program32Header(parser, this, index);\n    }", "first_line_groundtruth": "= parser.readHalf(buffer, 0x2E);", "first_line_prediction": " = parser.readHalf(buffer, 0x2E);", "match": 0}
{"groundtruth": "parser.readLong(buffer, 0x20);", "prediction": "0;\n        shoff = 0;\n        phentsize = 0;\n        phnum = 0;\n        shentsize = 0;\n        shnum = 0;\n        shstrndx = 0;\n        shdr = null;\n        shdrs = null;\n        shdrsCount = 0;\n        shdrsCapacity = 0;\n        shdrsOffset = 0;\n        shdrsSize = 0;\n        shdrsIndex = 0;\n        shdrsIndexOffset = 0;\n        shdrsIndexSize = 0;\n        sh", "first_line_groundtruth": "parser.readLong(buffer, 0x20);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "parser.readLong(buffer, baseOffset + 0x28);", "prediction": " parser.readLong(buffer, baseOffset + 0x18);\n        flags = parser.readWord(buffer, baseOffset + 0x20);\n        align = parser.readWord(buffer, baseOffset + 0x24);\n    }", "first_line_groundtruth": "parser.readLong(buffer, baseOffset + 0x28);", "first_line_prediction": " parser.readLong(buffer, baseOffset + 0x18);", "match": 0}
{"groundtruth": "= parser.readHalf(buffer, 0x36);", "prediction": " = parser.readHalf(buffer, 0x2E);\n        phnum = parser.readHalf(buffer, 0x30);\n        shentsize = parser.readHalf(buffer, 0x32);\n        shnum = parser.readHalf(buffer, 0x34);\n        shstrndx = parser.readHalf(buffer, 0x36);\n    }\n\n    @Override\n    public Elf.SectionHeader getSectionHeader(final int index) throws IOException {\n        return new Section64Header(parser, this, index);\n    }\n\n    @Override\n    public", "first_line_groundtruth": "= parser.readHalf(buffer, 0x36);", "first_line_prediction": " = parser.readHalf(buffer, 0x2E);", "match": 0}
{"groundtruth": "parser.readWord(buffer, baseOffset + 0x8);", "prediction": "0;\n        memsz = parser.readWord(buffer, baseOffset + 0x8);\n        flags = parser.readWord(buffer, baseOffset + 0xC);\n        align = parser.readWord(buffer, baseOffset + 0x10);\n    }", "first_line_groundtruth": "parser.readWord(buffer, baseOffset + 0x8);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "offset = parser.readLong(buffer, baseOffset + 0x8);", "prediction": " offset = parser.readWord(buffer, baseOffset + 0x4);\n         vaddr = parser.readWord(buffer, baseOffset + 0x8);\n         paddr = parser.readWord(buffer, baseOffset + 0x10);\n         filesz = parser.readWord(buffer, baseOffset + 0x18);\n         memsz = parser.readWord(buffer, baseOffset + 0x20);\n         flags = parser.readWord(buffer, baseOffset + 0x28);\n         align = parser.readWord(buffer, baseOffset", "first_line_groundtruth": "offset = parser.readLong(buffer, baseOffset + 0x8);", "first_line_prediction": " offset = parser.readWord(buffer, baseOffset + 0x4);", "match": 0}
{"groundtruth": "= parser.readWord(buffer, baseOffset + 0x14);", "prediction": " = parser.readWord(buffer, baseOffset + 0xC);\n        flags  = parser.readWord(buffer, baseOffset + 0x10);\n        align  = parser.readWord(buffer, baseOffset + 0x14);\n    }", "first_line_groundtruth": "= parser.readWord(buffer, baseOffset + 0x14);", "first_line_prediction": " = parser.readWord(buffer, baseOffset + 0xC);", "match": 0}
{"groundtruth": "offset = parser.readWord(buffer, baseOffset + 0x4);", "prediction": " offset = parser.readWord(buffer, baseOffset + 0x4);\n         vaddr = parser.readWord(buffer, baseOffset + 0x8);\n         memsz = parser.readWord(buffer, baseOffset + 0xC);\n         flags = parser.readWord(buffer, baseOffset + 0x10);\n         align = parser.readWord(buffer, baseOffset + 0x14);\n    }", "first_line_groundtruth": "offset = parser.readWord(buffer, baseOffset + 0x4);", "first_line_prediction": " offset = parser.readWord(buffer, baseOffset + 0x4);", "match": 0}
{"groundtruth": "= StartupMode.fromString(properties.get(\"scan.startup.mode\"));", "prediction": " = StartupMode.valueOf(properties.get(\"startupMode\"));\n    this.transactionalIdPrefix = properties.get(\"transactionalIdPrefix\");\n    this.deliveryGuarantee = properties.get(\"deliveryGuarantee\");\n    this.properties = properties;\n  }\n\n  public String getId() {\n    return id;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getBootstrapServers() {\n    return bootstrapServers;\n  }\n\n  public String getTopic() {\n    return topic;\n  }\n\n  public StartupMode getStartupMode() {\n    return startupMode;\n  }\n\n  public String get", "first_line_groundtruth": "= StartupMode.fromString(properties.get(\"scan.startup.mode\"));", "first_line_prediction": " = StartupMode.valueOf(properties.get(\"startupMode\"));", "match": 0}
{"groundtruth": "(streamConfig.transactionalIdPrefix())\n            .setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();", "prediction": "(streamConfig.transactionalIdPrefix())\n             .setTransactionalId(streamConfig.transactionalId())\n             .setTransactionalTimeoutMs(streamConfig.transactionTimeoutMs())\n             .setEnableIdempotence(streamConfig.enableIdempotence())\n             .setIsolationLevel(streamConfig.isolationLevel())\n             .setCompressionType(streamConfig.compressionType())\n             .setProperties(toProperties(streamConfig.properties()))\n             .build();\n\n    return new DecodableStreamSinkImpl<>(delegate);\n  }\n\n  private Properties toProperties(Map<String, String> map) {\n    Properties p = new Properties", "first_line_groundtruth": "(streamConfig.transactionalIdPrefix())", "first_line_prediction": "(streamConfig.transactionalIdPrefix())", "match": 1}
{"groundtruth": ".subscribe(Collections.singleton(testEnvironment.topicFor(name)));", "prediction": ".subscribe(Collections.singletonList(name));\n    return new DecodableStreamImpl<>(name, consumer, producer);\n  }\n\n  /**\n   * Returns a stream for the given name.\n   *\n   * <p>This method is deprecated and will be removed in a future release. Use {@link #stream(String)}\n   * instead.\n   */\n  @Deprecated\n  public DecodableStream<String> getStream(String name) {\n    return stream(name);\n  }\n\n  /**\n   * Returns a stream for the given name.\n   *\n   * <p>This method is deprecated and will be removed in a future release", "first_line_groundtruth": ".subscribe(Collections.singleton(testEnvironment.topicFor(name)));", "first_line_prediction": ".subscribe(Collections.singletonList(name));", "match": 0}
{"groundtruth": "setTopics(streamConfig.topic())\n            .setProperties(toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);", "prediction": "setGroupId(streamConfig.groupId())\n             .setTopic(streamConfig.topic())\n             .setProperties(streamConfig.kafkaProperties())\n             .setStartingOffsets(\n                 streamConfig.startupMode() == StartupMode.EARLIEST_OFFSET\n                     ? OffsetsInitializer.EARLIEST\n                     : OffsetsInitializer.LATEST)\n             .setRecordDeserializer(deserializationSchema);\n\n    if (streamConfig.transactionalIdPrefix() != null) {\n      builder.setTransactionalIdPrefix(streamConfig.transactionalIdPrefix());\n    }\n\n    if (streamConfig.deliveryGuarantee() != null) {\n     ", "first_line_groundtruth": "setTopics(streamConfig.topic())", "first_line_prediction": "setGroupId(streamConfig.groupId())", "match": 0}
{"groundtruth": "((DecodableSourceSplitImpl) obj).getDelegate());", "prediction": "obj);\n  }\n\n  @Override\n  public DecodableSourceSplit deserialize(int version, byte[] serialized) throws IOException {\n    return new DelegatingSourceSplit(delegate.deserialize(version, serialized));\n  }", "first_line_groundtruth": "((DecodableSourceSplitImpl) obj).getDelegate());", "first_line_prediction": "obj);", "match": 0}
{"groundtruth": "producerProperties(testEnvironment.bootstrapServers()));", "prediction": "\n            testEnvironment.getProducerProperties(),\n            testEnvironment.getProducerConfig());\n    this.streams = new HashMap<>();\n    this.executorService = Executors.newCachedThreadPool();\n  }\n\n  /**\n   * Creates a new testing context, using the given {@link TestEnvironment}.\n   *\n   * @param testEnvironment the {@link TestEnvironment} to use\n   * @return a new {@link PipelineTestContext}\n   */\n  public static PipelineTestContext create(TestEnvironment testEnvironment) {\n    return new PipelineTestContext(testEnvironment);\n  }\n\n  /**\n   * Creates a new testing context, using the given {@link TestEnvironment}.", "first_line_groundtruth": "producerProperties(testEnvironment.bootstrapServers()));", "first_line_prediction": "", "match": 0}
{"groundtruth": ".setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();", "prediction": " .setProperties(toProperties(streamConfig.kafkaProperties()))\n             .build();\n\n    return new DecodableStreamSinkImpl<>(delegate);\n  }\n\n  private static Properties toProperties(Map<String, String> map) {\n    Properties p = new Properties();\n\n    for (Map.Entry<String, String> entry : map.entrySet()) {\n      p.setProperty(entry.getKey(), entry.getValue());\n    }\n\n    return p;\n  }", "first_line_groundtruth": ".setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))", "first_line_prediction": " .setProperties(toProperties(streamConfig.kafkaProperties()))", "match": 0}
{"groundtruth": "(testEnvironment.topicFor(streamName), streamRecord.value()));", "prediction": "((testEnvironment.topicFor(streamName)), streamRecord.value()));\n      try {\n        sent.get();\n      } catch (InterruptedException | ExecutionException e) {\n        throw new RuntimeException(\"Couldn't send record\", e);\n      }\n    }\n\n    @Override\n    public Future<StreamRecord<String>> takeOne() {\n      return take(1).thenApply(records -> records.get(0));\n    }\n\n    @Override\n    public Future<List<StreamRecord<String>>> take(int n) {\n      CompletableFuture<List<StreamRecord<String>>> future = new CompletableFuture<>();\n      consumer.poll(Duration.of", "first_line_groundtruth": "(testEnvironment.topicFor(streamName), streamRecord.value()));", "first_line_prediction": "((testEnvironment.topicFor(streamName)), streamRecord.value()));", "match": 0}
{"groundtruth": "toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);", "prediction": "streamConfig.kafkaProperties())\n             .setGroupId(streamConfig.groupId())\n             .setStartingOffsets(\n                 streamConfig.startupMode() == StartupMode.EARLIEST_OFFSET\n                     ? OffsetsInitializer.EARLIEST\n                     : OffsetsInitializer.LATEST)\n             .setRecordDeserializer(deserializationSchema);\n\n    if (streamConfig.transactionalIdPrefix() != null) {\n      builder.setTransactionalIdPrefix(streamConfig.transactionalIdPrefix());\n    }\n\n    if (streamConfig.deliveryGuarantee() != null) {\n      builder.setDeliveryGuarantee(streamConfig.deliveryGu", "first_line_groundtruth": "toProperties(streamConfig.kafkaProperties()))", "first_line_prediction": "streamConfig.kafkaProperties())", "match": 0}
{"groundtruth": "if (streamConfig.startupMode() != null) {", "prediction": " if (startupMode != null) {\n       builder.setStartupMode(startupMode);\n     }", "first_line_groundtruth": "if (streamConfig.startupMode() != null) {", "first_line_prediction": " if (startupMode != null) {", "match": 0}
{"groundtruth": "tbApikeyDAO.useOnece(key);", "prediction": " // \u8c03\u7528\u63a5\u53e3\n        genImage(message, key, send);\n    }", "first_line_groundtruth": "tbApikeyDAO.useOnece(key);", "first_line_prediction": " // \u8c03\u7528\u63a5\u53e3", "match": 0}
{"groundtruth": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");", "prediction": " Object cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), actionInfo.getParameter(), new ResultSetExtractor<Map>() {\n                                 @Override\n                                 public Map extractData(ResultSet rs) throws SQLException, DataAccessException {\n                                     while (rs.next()) {\n                                         Map<String, Object> map = new HashMap<>();\n                                         map.put(\"PG_COUNT\", rs.getLong(\"PG_COUNT\"));\n                                         return map;\n                                     }\n                                     return new HashMap<>();\n                                 }\n                             }).get(\"PG_COUNT\");\n                            localPage.setTotal(Long.parseLong(cnt.toString()));\n                        }\n                    }\n                } else", "first_line_groundtruth": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");", "first_line_prediction": " Object cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), actionInfo.getParameter(), new ResultSetExtractor<Map>() {", "match": 0}
{"groundtruth": "() != null && methodInfo.getArgs().length > 0) {", "prediction": "() != null && methodInfo.getArgs().length > 0) {\n                        methodInfo.setArgs(interceptor.beforePrepare(methodInfo, jdbcTemplate, methodInfo.getArgs()));\n                    }\n                    //\u63d2\u4ef6\u5141\u8bb8\u4fee\u6539\u539f\u59cbSQL\n                    if (methodInfo.getActionInfo().getBatchSql() != null) {\n                        methodInfo.getActionInfo().setBatchSql(interceptor.beforePrepare(methodInfo, jdbcTemplate, methodInfo.getActionInfo().getBatchSql()));\n                    }\n                    //\u63d2\u4ef6\u5141\u8bb8\u4fee\u6539\u539f\u59cb\u5165\u53c2\n                    if (methodInfo.getActionInfo().getBatchParameter() != null) {\n                        methodInfo", "first_line_groundtruth": "() != null && methodInfo.getArgs().length > 0) {", "first_line_prediction": "() != null && methodInfo.getArgs().length > 0) {", "match": 1}
{"groundtruth": "), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");", "prediction": "), methodInfo.getArgs()[actionInfo.getParameterIndex()]).get(\"PG_COUNT\");\n                            localPage.setTotal(Long.parseLong(cnt.toString()));\n                        } else {\n                            Object cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], Long.class);\n                            localPage.setTotal(Long.parseLong(cnt.toString()));\n                        }\n                    }\n                } else {\n                    if (actionInfo.isHasParameterType()) {\n                        Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql)).get", "first_line_groundtruth": "), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");", "first_line_prediction": "), methodInfo.getArgs()[actionInfo.getParameterIndex()]).get(\"PG_COUNT\");", "match": 0}
{"groundtruth": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");", "prediction": " cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), actionInfo.getParameter(), new ResultSetExtractor<Map>() {\n                                @Override\n                                public Map extractData(ResultSet rs) throws SQLException, DataAccessException {\n                                    while (rs.next()) {\n                                        Map<String, Object> map = new HashMap<>();\n                                        map.put(\"PG_COUNT\", rs.getLong(\"PG_COUNT\"));\n                                        return map;\n                                    }\n                                    return new HashMap<>();\n                                }\n                            }).get(\"PG_COUNT\");\n                            localPage.setTotal(Long.parseLong(cnt.toString()));\n                        }\n                    }\n                } else {", "first_line_groundtruth": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");", "first_line_prediction": " cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), actionInfo.getParameter(), new ResultSetExtractor<Map>() {", "match": 0}
{"groundtruth": ".debug(\"finish sql==>{", "prediction": ".debug(\"after prepare==>sql==>{}\", this.toStr(methodInfo.getActionInfo().getBatchSql()));\n        log.debug(\"after prepare==>parameters==>{}\", this.toStr(methodInfo.getActionInfo().getBatchParameter()));\n\n        //\u6267\u884c\u539f\u751f\u65b9\u6cd5\n        Object result = methodInvocation.proceed();\n\n        //\u903b\u8f91\u5904\u7406\uff08\u6838\u5fc3\u65b9\u6cd5\uff1a\u4e3b\u8981\u5904\u7406\u8fd4\u56de\u503c\uff09\n        if (this.interceptors != null && this.interceptors.size() > 0) {\n            for (IInterceptor interceptor : this.interceptors) {\n                if (interceptor.supportMethod(methodInfo)) {\n                    interceptor.", "first_line_groundtruth": ".debug(\"finish sql==>{", "first_line_prediction": ".debug(\"after prepare==>sql==>{}\", this.toStr(methodInfo.getActionInfo().getBatchSql()));", "match": 0}
{"groundtruth": "pages = page.getPages();", "prediction": "startRow = page.getStartRow();\n            this.endRow = page.getEndRow();\n            this.size = page.getSize();\n            this.pages = page.getPages();\n\n            this.prePage = page.getPrePage();\n            this.nextPage = page.getNextPage();\n\n            this.isFirstPage = page.isIsFirstPage();\n            this.isLastPage = page.isIsLastPage();\n            this.hasPreviousPage = page.isHasPreviousPage();\n            this.hasNextPage = page.isHasNextPage();\n\n            this.navigatePages = navigatePages;\n            this.", "first_line_groundtruth": "pages = page.getPages();", "first_line_prediction": "startRow = page.getStartRow();", "match": 0}
{"groundtruth": "cpuPattern.matcher(location.fileContent());", "prediction": " cpuPattern.matcher(location.fileContent()); cpuMatcher.find(); ) {\n\t\t\tresult.add(new Match(\n\t\t\t\t\tcpuMatcher.group(\"container\"),\n\t\t\t\t\tcpuMatcher.group(\"cluster\"),\n\t\t\t\t\tcpuMatcher.group(\"cpu\"),\n\t\t\t\t\tK8sResourceType.Cpu\n\t\t\t));\n\t\t}", "first_line_groundtruth": "cpuPattern.matcher(location.fileContent());", "first_line_prediction": " cpuPattern.matcher(location.fileContent()); cpuMatcher.find(); ) {", "match": 0}
{"groundtruth": "] = this.actionInfo.getParameter();", "prediction": "][0] = this.actionInfo.getBatchParameter().get(0);\n                    }\n                } else {\n                    this.args[this.actionInfo.getParameterIndex()] = this.actionInfo.getBatchParameter();\n                }\n            }\n        }\n    }\n\n    public void resolveParameter(int i, Object[] parameter) {\n        if (this.actionInfo != null) {\n            this.actionInfo.getBatchParameter().get(i)[0] = parameter;\n\n            if (this.actionInfo.isHasParameter()) {\n                if (!this.actionInfo.isParameterIsPss()) {\n                    if", "first_line_groundtruth": "] = this.actionInfo.getParameter();", "first_line_prediction": "][0] = this.actionInfo.getBatchParameter().get(0);", "match": 0}
{"groundtruth": "MethodActionInfo actionInfo = methodInfo.getActionInfo();", "prediction": " // \u5904\u7406\u5206\u9875\u53c2\u6570\n            if (methodInfo.isSupport()) {\n                // \u5904\u7406\u5206\u9875\u53c2\u6570\n                if (methodInfo.isSupport()) {\n                    // \u5904\u7406\u5206\u9875\u53c2\u6570\n                    if (methodInfo.isSupport()) {\n                        // \u5904\u7406\u5206\u9875\u53c2\u6570\n                        if (methodInfo.isSupport()) {\n                            // \u5904\u7406\u5206\u9875\u53c2\u6570\n                            if (methodInfo.isSupport()) {\n                                // \u5904\u7406\u5206\u9875\u53c2\u6570\n                                if (methodInfo.isSupport()) {\n                                    // \u5904\u7406\u5206\u9875\u53c2\u6570\n                                    if (methodInfo.isSupport()) {\n                                        // \u5904\u7406\u5206\u9875\u53c2\u6570\n                                        if (methodInfo.isSupport()) {\n                                           ", "first_line_groundtruth": "MethodActionInfo actionInfo = methodInfo.getActionInfo();", "first_line_prediction": " // \u5904\u7406\u5206\u9875\u53c2\u6570", "match": 0}
{"groundtruth": ".debug(\"method==>name:{", "prediction": ".info(\"\u8c03\u7528\u65b9\u6cd5\u540d\u79f0\uff1a{}\", methodInfo.getName());\n        log.info(\"\u8c03\u7528\u65b9\u6cd5\u5165\u53c2\uff1a{}\", Arrays.toString(methodInfo.getArgs()));\n        methodInfo.putUserAttribute(\"startTime\", LocalDateTime.now());\n\n        Object result = null;\n        for (IInterceptor interceptor : interceptors) {\n            result = interceptor.before(result, methodInfo, jdbcTemplate);\n        }\n\n        result = methodInvocation.proceed();\n\n        for (IInterceptor interceptor : interceptors) {\n            result = interceptor.after(result, methodInfo, jdbcTemplate);\n        }\n\n        return result;\n    }", "first_line_groundtruth": ".debug(\"method==>name:{", "first_line_prediction": ".info(\"\u8c03\u7528\u65b9\u6cd5\u540d\u79f0\uff1a{}\", methodInfo.getName());", "match": 0}
{"groundtruth": "queryForMap(dialect.getCountSql(sql), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");", "prediction": "query(dialect.getCountSql(sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], (int[]) methodInfo.getArgs()[actionInfo.getParameterTypeIndex()], new ResultSetExtractor<Map>() {\n                                @Override\n                                public Map extractData(ResultSet rs) throws SQLException, DataAccessException {\n                                    while (rs.next()) {\n                                        Map<String, Object> map = new HashMap<>();\n                                        map.put(\"PG_COUNT\", rs.getLong(\"PG_COUNT\"));\n                                        return map;\n                                    }\n                                    return new HashMap<>();\n                                }\n                            })\n                                    .get(\"PG_COUNT\");\n                            local", "first_line_groundtruth": "queryForMap(dialect.getCountSql(sql), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");", "first_line_prediction": "query(dialect.getCountSql(sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], (int[]) methodInfo.getArgs()[actionInfo.getParameterTypeIndex()], new ResultSetExtractor<Map>() {", "match": 0}
{"groundtruth": "Repository repository : gitLabRepositoryApi.findRepositories()) {", "prediction": "Repository repository : gitLabRepositoryApi.getRepositories()) {\n\t\t\tSystem.out.println(\"Applying repository: \" + repository.getName());\n\t\t\tgitLabRepositoryApi.applyRepository(repository);\n\t\t}\n\t\treturn List.of();", "first_line_groundtruth": "Repository repository : gitLabRepositoryApi.findRepositories()) {", "first_line_prediction": "Repository repository : gitLabRepositoryApi.getRepositories()) {", "match": 0}
{"groundtruth": "String sql = actionInfo.getSql();", "prediction": " // \u5904\u7406\u5206\u9875\n            if (dialect.isPagination()) {\n                // \u5904\u7406\u5206\u9875\n                PageHelper.startPage(localPage.getPageNum(), localPage.getPageSize());\n                // \u5904\u7406\u6392\u5e8f\n                if (localPage.getOrderBy() != null && !localPage.getOrderBy().isEmpty()) {\n                    PageHelper.orderBy(localPage.getOrderBy());\n                }\n                // \u5904\u7406\u67e5\u8be2\u6761\u4ef6\n                if (localPage.getWhere() != null && !localPage.getWhere().isEmpty()) {\n                    PageHelper.where(localPage.getWhere());\n                }\n                // \u5904\u7406\u67e5\u8be2\u53c2\u6570\n                if", "first_line_groundtruth": "String sql = actionInfo.getSql();", "first_line_prediction": " // \u5904\u7406\u5206\u9875", "match": 0}
{"groundtruth": "() && methodInfo.getActionInfo().isReturnIsList()) {", "prediction": "()) {\n                sql = dialect.getCountSql(sql);\n            }\n\n            //\u67e5\u8be2\u5206\u9875\n            if (localPage.isPage()) {\n                sql = dialect.getPageSql(sql, localPage.getPageNum(), localPage.getPageSize());\n            }\n\n            //\u67e5\u8be2\u6392\u5e8f\n            if (localPage.isSort()) {\n                sql = dialect.getSortSql(sql, localPage.getSort());\n            }\n\n            //\u67e5\u8be2\u6761\u4ef6\n            if (localPage.isWhere()) {\n                sql = dialect.getWhereSql(sql, localPage.getWhere());\n            }\n\n            //\u67e5\u8be2\u53c2\u6570\n            if (localPage.", "first_line_groundtruth": "() && methodInfo.getActionInfo().isReturnIsList()) {", "first_line_prediction": "()) {", "match": 0}
{"groundtruth": "sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map>() {", "prediction": "sql), new PreparedStatementSetter() {\n                            @Override\n                            public void setValues(PreparedStatement ps) throws SQLException {\n                                actionInfo.getParameterType().forEach(i -> {\n                                    try {\n                                        ps.setObject(i, localPage.getParams().get(i));\n                                    } catch (SQLException e) {\n                                        e.printStackTrace();\n                                    }\n                                });\n                            }\n                        }, new ResultSetExtractor<Object>() {\n                            @Override\n                            public Object extractData(ResultSet rs) throws SQLException, DataAccessException {\n                                return rs.next() ? rs.getObject(1) : null;\n                            }\n                        });\n                        localPage.setCount(", "first_line_groundtruth": "sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map>() {", "first_line_prediction": "sql), new PreparedStatementSetter() {", "match": 0}
{"groundtruth": "(methodInfo.getActionInfo().getBatchParameter()));", "prediction": "(methodInfo.getActionInfo().getBatchParameters()));\n\n        Object result = null;\n        for (IInterceptor interceptor : interceptors) {\n            result = interceptor.before(result, methodInfo, jdbcTemplate);\n        }\n\n        if (methodInfo.getActionInfo().getActionType() == MethodInvocationInfo.ActionType.SELECT) {\n            result = this.processSelect((Select) result, methodInfo.getActionInfo().getBatchIndex(), methodInfo.getActionInfo().getBatchSql(), methodInfo.getActionInfo().getBatchParameters());\n        } else if (methodInfo.getActionInfo().getActionType() == MethodInvocationInfo.", "first_line_groundtruth": "(methodInfo.getActionInfo().getBatchParameter()));", "first_line_prediction": "(methodInfo.getActionInfo().getBatchParameters()));", "match": 0}
{"groundtruth": "page.getStartRow() + 1;", "prediction": "1 + page.getStartRow();\n                this.endRow = this.startRow + page.size() - 1;\n            }\n            this.prePage = page.getPrePage();\n            this.nextPage = page.getNextPage();\n            this.isFirstPage = page.isIsFirstPage();\n            this.isLastPage = page.isIsLastPage();\n            this.hasPreviousPage = page.isHasPreviousPage();\n            this.hasNextPage = page.isHasNextPage();\n            this.navigatePages = navigatePages;\n            this.navigatepageNums = page.getNavigatepageNums", "first_line_groundtruth": "page.getStartRow() + 1;", "first_line_prediction": "1 + page.getStartRow();", "match": 0}
{"groundtruth": "if (methodInfo.getArgs() != null && methodInfo.getArgs().length > 0) {", "prediction": " methodInfo.setSql(interceptor.changeSql(methodInfo.getSql()));\n                     methodInfo.setArgs(interceptor.changeArgs(methodInfo.getArgs()));\n                    interceptor.afterPrepare(methodInfo, jdbcTemplate);\n                    break;\n                }\n            }\n        }\n\n        //\u6267\u884c\u539f\u751f\u65b9\u6cd5\n        Object result = methodInvocation.proceed();\n\n        //\u903b\u8f91\u5904\u7406\uff08\u6838\u5fc3\u65b9\u6cd5\uff1a\u4e3b\u8981\u5904\u7406\u8fd4\u56de\u503c\uff09\n        if (this.interceptors != null && this.interceptors.size() > 0) {\n            for (IInterceptor interceptor : this.interceptors) {\n                if (interceptor.supportMethod(method", "first_line_groundtruth": "if (methodInfo.getArgs() != null && methodInfo.getArgs().length > 0) {", "first_line_prediction": " methodInfo.setSql(interceptor.changeSql(methodInfo.getSql()));", "match": 0}
{"groundtruth": "toStr(methodInfo.getActionInfo().getBatchSql()));", "prediction": "getSql(methodInfo));\n\n        Object result = null;\n        for (IInterceptor interceptor : interceptors) {\n            result = interceptor.before(result, methodInfo, jdbcTemplate);\n        }\n\n        result = method.invoke(methodInvocation.getThis(), args);\n\n        for (IInterceptor interceptor : interceptors) {\n            result = interceptor.after(result, methodInfo, jdbcTemplate);\n        }\n\n        return result;\n    }\n\n    private String getSql(MethodInvocationInfo methodInfo) {\n        String sql = methodInfo.getActionInfo().getSql();\n        if (methodInfo.getActionInfo().isHasParameter())", "first_line_groundtruth": "toStr(methodInfo.getActionInfo().getBatchSql()));", "first_line_prediction": "getSql(methodInfo));", "match": 0}
{"groundtruth": "methodInfo.resolveSql(sql);", "prediction": " //\u8bbe\u7f6e\u5206\u9875\u53c2\u6570\n            methodInfo.setSql(sql);\n            methodInfo.setArgs(localPage.getArgs());\n            methodInfo.setArgTypes(localPage.getArgTypes());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void afterPrepare(final MethodInvocationInfo methodInfo, JdbcTemplate jdbcTemplate) {\n\n    }\n\n    @Override\n    public void afterExecute(final MethodInvocationInfo methodInfo, JdbcTemplate jdbcTemplate) {\n\n    }\n\n    @Override\n    public void afterReturn(final MethodInvocationInfo methodInfo, JdbcTemplate jdbcTemplate", "first_line_groundtruth": "methodInfo.resolveSql(sql);", "first_line_prediction": " //\u8bbe\u7f6e\u5206\u9875\u53c2\u6570", "match": 0}
{"groundtruth": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));", "prediction": "prefix).append(\"MapType(\");\n\t\tkeyType.buildFormattedString(nextPrefix, builder);\n\t\tbuilder.append(\", \");\n\t\tvalueType.buildFormattedString(nextPrefix, builder);\n\t\tbuilder.append(\", \");\n\t\tbuilder.append(valueContainsNull);\n\t\tbuilder.append(\")\");", "first_line_groundtruth": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));", "first_line_prediction": "prefix).append(\"MapType(\");", "match": 0}
{"groundtruth": "equalsTo.setRightExpression(this.tenantLineHandler.getTenantId());", "prediction": " // \u9488\u5bf9\u5df2\u7ed9\u51fa", "first_line_groundtruth": "equalsTo.setRightExpression(this.tenantLineHandler.getTenantId());", "first_line_prediction": " // \u9488\u5bf9\u5df2\u7ed9\u51fa", "match": 0}
{"groundtruth": "DataType.buildFormattedString(elementType, nextPrefix, builder);", "prediction": "\telementType.buildFormattedString(nextPrefix, builder);", "first_line_groundtruth": "DataType.buildFormattedString(elementType, nextPrefix, builder);", "first_line_prediction": "\telementType.buildFormattedString(nextPrefix, builder);", "match": 0}
{"groundtruth": "new EqualsTo(this.getAliasColumn(table), this.tenantLineHandler.getTenantId());", "prediction": " this.andExpression(table, where, whereSegment);\n    }\n\n    /**\n     * \u6784\u5efa", "first_line_groundtruth": "new EqualsTo(this.getAliasColumn(table), this.tenantLineHandler.getTenantId());", "first_line_prediction": " this.andExpression(table, where, whereSegment);", "match": 0}
{"groundtruth": "DataType.buildFormattedString(dataType, nextPrefix, builder);", "prediction": "\tdataType.buildFormattedString(nextPrefix, builder);", "first_line_groundtruth": "DataType.buildFormattedString(dataType, nextPrefix, builder);", "first_line_prediction": "\tdataType.buildFormattedString(nextPrefix, builder);", "match": 0}
{"groundtruth": "(methodInfo.getActionInfo().isReturnIsList()) {", "prediction": " (localPage.isCount()) {\n                result = (Collection) result;\n            } else {\n                result = (Collection) result.getClass().newInstance();\n            }\n        } catch (Exception e) {\n            PageHelper.clearPage();\n            throw e;\n        }\n\n        try {\n            MethodActionInfo actionInfo = methodInfo.getActionInfo();\n            Dialect dialect = PageHelper.getDialect(jdbcTemplate);\n            String sql = actionInfo.getSql();\n\n            //\u67e5\u8be2", "first_line_groundtruth": "(methodInfo.getActionInfo().isReturnIsList()) {", "first_line_prediction": " (localPage.isCount()) {", "match": 0}
{"groundtruth": "prefix, valueType.getTypeName(),\n\t\t\t\tvalueContainsNull));", "prediction": " prefix, valueType.getTypeName(), valueContainsNull));\n\t\tDataType.buildFormattedString(valueType, nextPrefix, builder);", "first_line_groundtruth": "prefix, valueType.getTypeName(),", "first_line_prediction": " prefix, valueType.getTypeName(), valueContainsNull));", "match": 0}
{"groundtruth": "(new SelectExpressionItem(new Column(this.tenantLineHandler.getTenantIdColumn())));", "prediction": "(new SelectExpressionItem(new StringValue(StringPool.ASTERISK)));\n    }\n\n    /**\n     * \u5904\u7406 select \u8bed\u53e5\n     *\n     * @param selectBody SelectBody\n     * @param whereSegment where \u6761\u4ef6\n     */\n    protected void processSelectBody(SelectBody selectBody, String whereSegment) {\n        if (selectBody instanceof PlainSelect) {\n            this.processPlainSelect((PlainSelect) selectBody, whereSegment);\n        } else if (selectBody instanceof WithItem) {\n            this.processWithItem((WithItem) selectBody, whereSegment);\n        }\n    }\n\n    /**\n     *", "first_line_groundtruth": "(new SelectExpressionItem(new Column(this.tenantLineHandler.getTenantIdColumn())));", "first_line_prediction": "(new SelectExpressionItem(new StringValue(StringPool.ASTERISK)));", "match": 0}
{"groundtruth": ".format(\"%s-- element: %s (containsNull = %b)\\n\", prefix, elementType.getTypeName(),\n\t\t\t\tcontainsNull));", "prediction": ".format(\"%s-- array of %s (containsNull = %b)\\n\", prefix, elementType.getTypeName(),\n\t\t\t\tcontainsNull));\n\t\telementType.buildFormattedString(nextPrefix, builder);", "first_line_groundtruth": ".format(\"%s-- element: %s (containsNull = %b)\\n\", prefix, elementType.getTypeName(),", "first_line_prediction": ".format(\"%s-- array of %s (containsNull = %b)\\n\", prefix, elementType.getTypeName(),", "match": 0}
{"groundtruth": "(!dbHero.getId().equals(heroToUpdate.getId())) {", "prediction": " (dbHero == null) {\n            throw new NotFoundException();\n        }\n        heroToUpdate.setId(dbHero.getId());\n        return this.heroRepository.save(heroToUpdate);\n    }\n\n    public void delete(Long id) {\n        Hero dbHero = this.findById(id);\n        if  (dbHero == null) {\n            throw new NotFoundException();\n        }\n        this.heroRepository.deleteById(id);\n    }", "first_line_groundtruth": "(!dbHero.getId().equals(heroToUpdate.getId())) {", "first_line_prediction": " (dbHero == null) {", "match": 0}
{"groundtruth": "dataType.getTypeName(), nullable, metadata.toString()));", "prediction": "\tdataType.getTypeName(), nullable, metadata));\n\t\tdataType.buildFormattedString(nextPrefix, builder);", "first_line_groundtruth": "dataType.getTypeName(), nullable, metadata.toString()));", "first_line_prediction": "\tdataType.getTypeName(), nullable, metadata));", "match": 0}
{"groundtruth": "dbHero.getXp() + 2);", "prediction": "dbHero.getXp() + 1);\n        this.heroRepository.save(dbHero);\n    }", "first_line_groundtruth": "dbHero.getXp() + 2);", "first_line_prediction": "dbHero.getXp() + 1);", "match": 0}
{"groundtruth": "DataType.buildFormattedString(keyType, nextPrefix, builder);", "prediction": "\t// TODO: add support for nested maps\n\t\tbuilder.append(String.format(\"%s-- value: %s\\n\", nextPrefix, valueType.getTypeName()));", "first_line_groundtruth": "DataType.buildFormattedString(keyType, nextPrefix, builder);", "first_line_prediction": "\t// TODO: add support for nested maps", "match": 0}
{"groundtruth": ").equals(heroToUpdate.getId())) {", "prediction": " ).equals(heroToUpdate.getId( ))) {\n            throw new BusinessException(\"Hero ID does not match\");\n        }\n        heroToUpdate.setXp(dbHero.getXp( ));\n        return this.heroRepository.save(heroToUpdate);\n    }\n\n    public void delete(Long id) {\n        this.heroRepository.deleteById(id);\n    }", "first_line_groundtruth": ").equals(heroToUpdate.getId())) {", "first_line_prediction": " ).equals(heroToUpdate.getId( ))) {", "match": 0}
{"groundtruth": "Insets insets = UIUtils.getInsets(\"Toast.shadowInsets\", new Insets(0, 0, 6, 6));", "prediction": " return new DropShadowBorder(color, 1, true);\n    }\n\n    @Override\n    public void installComponents(JPanel p) {\n        super.installComponents(p);\n        layout = new PanelNotificationLayout(p);\n        p.setLayout(layout);\n    }\n\n    @Override\n    public void uninstallComponents(JPanel p) {\n        super.uninstallComponents(p);\n        p.setLayout(null);\n        layout = null;\n    }\n\n    @Override\n    public void installListeners(JPanel p) {\n        super.installListeners(p);\n        p.addComponentListener(windowEvent);\n    }\n\n    @Override\n    public void", "first_line_groundtruth": "Insets insets = UIUtils.getInsets(\"Toast.shadowInsets\", new Insets(0, 0, 6, 6));", "first_line_prediction": " return new DropShadowBorder(color, 1, true);", "match": 0}
{"groundtruth": "UIUtils.getString(prefix + \".effectAlignment\", \"left\");", "prediction": " FlatUIUtils.getUIString(prefix + \".effectAlignment\", \"left\");\n    }\n\n    @Override\n    protected void uninstallDefaults(JPanel p) {\n        super.uninstallDefaults(p);\n        iconTextGap = 0;\n        closeButtonGap = 0;\n        minimumWidth = 0;\n        maximumWidth = -1;\n        arc = 0;\n        outlineWidth = 0;\n        outlineColor = null;\n        margin = null;\n        showCloseButton = false;\n        closeIconColor = null;\n        closeButtonIcon = null;\n        useEffect = false;\n        effectColor = null;\n        effect", "first_line_groundtruth": "UIUtils.getString(prefix + \".effectAlignment\", \"left\");", "first_line_prediction": " FlatUIUtils.getUIString(prefix + \".effectAlignment\", \"left\");", "match": 0}
{"groundtruth": "notificationHolder.clearHold();", "prediction": " for (Map.Entry<Location, List<NotificationAnimation>> set : lists.entrySet()) {\n            for (int i = 0; i < set.getValue().size(); i++) {\n                NotificationAnimation an = set.getValue().get(i);\n                if (an != null) {\n                    an.cancel();\n                }\n            }\n        }\n        notificationHolder.clear();\n    }\n\n    public void clear(Location location) {\n        List<NotificationAnimation> list = lists.get(location);\n        if (list != null) {\n            for (int i = 0; i < list.size(); i++)", "first_line_groundtruth": "notificationHolder.clearHold();", "first_line_prediction": " for (Map.Entry<Location, List<NotificationAnimation>> set : lists.entrySet()) {", "match": 0}
{"groundtruth": "UIUtils.getInsets(\"Toast.frameInsets\", new Insets(10, 10, 10, 10));", "prediction": " new Insets(FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0));\n            horizontalSpace = FlatUIUtils.getUIInt(\"Toast.horizontalSpace\", 0);\n            animationMove = FlatUIUtils.getUIInt(\"Toast.animationMove\", 0);\n            top = location.equals(Location.TOP_LEFT) || location.equals(Location.", "first_line_groundtruth": "UIUtils.getInsets(\"Toast.frameInsets\", new Insets(10, 10, 10, 10));", "first_line_prediction": " new Insets(FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0));", "match": 0}
{"groundtruth": "notificationHolder.removeHold(hold);", "prediction": " hold.close();\n            }\n        } else {\n            notificationAnimation.close();\n        }\n    }\n\n    public void close(NotificationAnimation notificationAnimation) {\n        notificationClose(notificationAnimation);\n    }\n\n    public void close(NotificationAnimation notificationAnimation, long duration) {\n        notificationClose(notificationAnimation);\n    }\n\n    public void close(NotificationAnimation notificationAnimation, long duration, Consumer<NotificationAnimation> callback) {\n        notificationClose(notificationAnimation);\n        if (callback != null) {\n            callback.accept(notificationAnimation);\n        }\n    }\n\n    public void close(NotificationAnimation notificationAnimation, Consumer<NotificationAnimation> callback)", "first_line_groundtruth": "notificationHolder.removeHold(hold);", "first_line_prediction": " hold.close();", "match": 0}
{"groundtruth": "toastNotificationPanel.setDialog(window);", "prediction": "\n            \n            if (location == Location.TOP_LEFT || location == Location.BOTTOM_LEFT) {\n                top = true;\n            }\n            if (location == Location.TOP_RIGHT || location == Location.BOTTOM_RIGHT) {\n                top = false;\n            }\n            if (location == Location.TOP_CENTER || location == Location.BOTTOM_CENTER) {\n                top = true;\n            }\n            if (location == Location.TOP_LEFT || location == Location.TOP_CENTER || location == Location.TOP_RIGHT) {\n                horizontalSpace = 0;\n            }\n            if (location == Location.BOTTOM_LEFT", "first_line_groundtruth": "toastNotificationPanel.setDialog(window);", "first_line_prediction": "", "match": 0}
{"groundtruth": "+ \".closeIcon\", UIUtils.createIcon(\"raven/toast/svg/close.svg\", closeIconColor, 0.75f));", "prediction": " + \".closeButtonIcon\", \"close\");\n        useEffect = FlatUIUtils.getUIBoolean(prefix + \".useEffect\", true);\n        effectColor = FlatUIUtils.getUIColor(prefix + \".effectColor\", \"Component.focusColor\");\n        effectWidth = FlatUIUtils.getUIFloat(prefix + \".effectWidth\", 0.5f);\n        effectOpacity = FlatUIUtils.getUIFloat(prefix + \".effectOpacity\", 0.5f);\n        effectAlignment = FlatUIUtils.getUIString(prefix + \".effectAlignment\", \"left\");\n    }\n\n    @Override\n    protected void", "first_line_groundtruth": "+ \".closeIcon\", UIUtils.createIcon(\"raven/toast/svg/close.svg\", closeIconColor, 0.75f));", "first_line_prediction": " + \".closeButtonIcon\", \"close\");", "match": 0}
{"groundtruth": "hold = notificationHolder.getHold(notificationAnimation.getLocation());", "prediction": " an = notificationHolder.remove(notificationAnimation);\n        if (an != null) {\n            an.close();\n        }\n    }\n\n    public void close(NotificationAnimation notificationAnimation) {\n        notificationClose(notificationAnimation);\n    }\n\n    public void close(NotificationAnimation notificationAnimation, long duration) {\n        notificationClose(notificationAnimation);\n        notificationAnimation.start();\n    }\n\n    public void close(NotificationAnimation notificationAnimation, long duration, Consumer<NotificationAnimation> onClose) {\n        notificationClose(notificationAnimation);\n        notificationAnimation.start(duration, onClose);\n    }\n\n    public void close(NotificationAnimation notificationAnimation, long duration", "first_line_groundtruth": "hold = notificationHolder.getHold(notificationAnimation.getLocation());", "first_line_prediction": " an = notificationHolder.remove(notificationAnimation);", "match": 0}
{"groundtruth": "UIUtils.getInsets(prefix + \".margin\", new Insets(8, 8, 8, 8));", "prediction": " FlatUIUtils.getUIInsets(prefix + \".margin\", 0, 0, 0, 0);\n        closeButtonIcon = FlatUIUtils.getUIIcon(prefix + \".closeButtonIcon\", \"close\");\n        showCloseButton = FlatUIUtils.getUIBoolean(prefix + \".showCloseButton\", true);\n        closeIconColor = FlatUIUtils.getUIColor(prefix + \".closeIconColor\", \"Component.focusColor\");\n        useEffect = FlatUIUtils.getUIBoolean(prefix + \".useEffect\", true);\n        effectColor = FlatUIUtils.getUIColor(prefix +", "first_line_groundtruth": "UIUtils.getInsets(prefix + \".margin\", new Insets(8, 8, 8, 8));", "first_line_prediction": " FlatUIUtils.getUIInsets(prefix + \".margin\", 0, 0, 0, 0);", "match": 0}
{"groundtruth": "notificationHolder.clearHold(location);", "prediction": " List<NotificationAnimation> list = lists.get(location);\n         if (list != null) {\n             for (int i = 0; i < list.size(); i++) {\n                 NotificationAnimation an = list.get(i);\n                 if (an != null) {\n                     an.close();\n                 }\n             }\n         }\n    }\n\n    public void clear(Type type) {\n        for (Map.Entry<Location, List<NotificationAnimation>> set : lists.entrySet()) {\n            for (int i = 0; i < set.getValue().size(); i++) {\n                NotificationAnimation an = set.", "first_line_groundtruth": "notificationHolder.clearHold(location);", "first_line_prediction": " List<NotificationAnimation> list = lists.get(location);", "match": 0}
{"groundtruth": "toastNotificationPanel.set(type, message);", "prediction": " toastNotificationPanel.setDuration(FlatUIUtils.getUIInt(\"Toast.duration\", 2500));\n        toastNotificationPanel.setEffectWidth(FlatUIUtils.getUIFloat(\"Toast.effectWidth\", 0.5f));\n        toastNotificationPanel.setEffectOpacity(FlatUIUtils.getUIFloat(\"Toast.effectOpacity\", 0.2f));\n        toastNotificationPanel.setEffectAlignment(FlatUIUtils.getUIString(\"Toast.effectAlignment\", \"left\"));\n        toastNotificationPanel.setEffectColor(FlatUIUtils.getUIColor(\"Toast.effectColor\"));", "first_line_groundtruth": "toastNotificationPanel.set(type, message);", "first_line_prediction": " toastNotificationPanel.setDuration(FlatUIUtils.getUIInt(\"Toast.duration\", 2500));", "match": 0}
{"groundtruth": "lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();", "prediction": "0).transform(originalPoints);\n    }", "first_line_groundtruth": "lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();", "first_line_prediction": "0).transform(originalPoints);", "match": 0}
{"groundtruth": "notificationHolder.hold(notificationAnimation);", "prediction": " return false;\n        }\n    }\n\n    public void show(Notification notification) {\n        show(notification, FlatUIUtils.getUIInt(\"Toast.duration\", 2500));\n    }\n\n    public void show(Notification notification, long duration) {\n        initStart(new NotificationAnimation(notification, duration), duration);\n    }\n\n    public void show(Notification notification, Consumer<Notification> onShow) {\n        show(notification, FlatUIUtils.getUIInt(\"Toast.duration\", 2500), onShow);\n    }\n\n    public void show(Notification notification, long duration, Consumer<Notification>", "first_line_groundtruth": "notificationHolder.hold(notificationAnimation);", "first_line_prediction": " return false;", "match": 0}
{"groundtruth": "lowerLeft.getX(), lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();", "prediction": "lowerLeft.getX(), lowerLeft.getY()).transform(originalPoints);\n    }", "first_line_groundtruth": "lowerLeft.getX(), lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();", "first_line_prediction": "lowerLeft.getX(), lowerLeft.getY()).transform(originalPoints);", "match": 0}
{"groundtruth": "y][x].isSet()) {", "prediction": "y][x].isOn()) {\n                    System.out.print(SET);\n                } else {\n                    System.out.print(UNSET);\n                }\n            }\n            System.out.println();\n        }\n    }\n\n    public static void main(String[] args) {\n        TextCanvas canvas = new TextCanvas(10, 10);\n        canvas.draw(new Shape(Arrays.asList(\n                new Point(0, 0),\n                new Point(1, 1),\n                new Point(2, 2),\n                new Point(3, 3),\n                new Point(4, ", "first_line_groundtruth": "y][x].isSet()) {", "first_line_prediction": "y][x].isOn()) {", "match": 0}
{"groundtruth": "(point.getX(), point.getY());", "prediction": "Pixel(point);\n        }\n    }\n\n    public void show() {\n        StringBuilder sb = new StringBuilder();\n        for (int y = 0; y < height; y++) {\n            for (int x = 0; x < width; x++) {\n                sb.append(isSet(x, y) ? SET : UNSET);\n            }\n            sb.append(\"\\n\");\n        }\n        System.out.println(sb.toString());\n    }\n\n    private void setPixel(Point point) {\n        if (point.getX() >= 0 && point.getY() >= 0 && point.getX() <", "first_line_groundtruth": "(point.getX(), point.getY());", "first_line_prediction": "Pixel(point);", "match": 0}
{"groundtruth": "getX() * factor, point.getY() * factor + 50, factor, factor);", "prediction": "getX() * factor, point.getY() * factor, factor, factor);\n            }\n        }\n    }", "first_line_groundtruth": "getX() * factor, point.getY() * factor + 50, factor, factor);", "first_line_prediction": "getX() * factor, point.getY() * factor, factor, factor);", "match": 0}
{"groundtruth": ".drawOval(point.getX() * factor, point.getY() * factor + 50, factor, factor);", "prediction": ".setColor(Color.BLACK);\n                g.drawLine(point.getX(), point.getY(), point.getX(), point.getY());\n            }\n        }\n    }", "first_line_groundtruth": ".drawOval(point.getX() * factor, point.getY() * factor + 50, factor, factor);", "first_line_prediction": ".setColor(Color.BLACK);", "match": 0}
{"groundtruth": "param.put(item.getValue(), hParam);", "prediction": " param.put(item.getValue(),hParam);\n            }\n        }\n        GrayParamHolder.putValues(param);\n        return true;\n    }", "first_line_groundtruth": "param.put(item.getValue(), hParam);", "first_line_prediction": " param.put(item.getValue(),hParam);", "match": 0}
{"groundtruth": ", this.parserMulti(methodInfo.getActionInfo().getBatchSql()[i], null));", "prediction": ");\n            }\n        }\n    }\n\n    @Override\n    public void afterPrepare(final MethodInvocationInfo methodInfo, JdbcTemplate jdbcTemplate) {\n        if (methodInfo.getActionInfo() != null && methodInfo.getActionInfo().getBatchSql() != null) {\n            for (int i = 0; i < methodInfo.getActionInfo().getBatchSql().length; i++) {\n                methodInfo.resolveSql(i);\n            }\n        }\n    }\n\n    @Override\n    public void afterExecute(final MethodInvocationInfo methodInfo, JdbcTemplate jdbcTemplate) {\n        if (methodInfo.getActionInfo() !=", "first_line_groundtruth": ", this.parserMulti(methodInfo.getActionInfo().getBatchSql()[i], null));", "first_line_prediction": ");", "match": 0}
{"groundtruth": "GrayParamHolder.putValues(param);", "prediction": " GrayParamHolder.paramLocal.set(param);\n        return true;\n    }", "first_line_groundtruth": "GrayParamHolder.putValues(param);", "first_line_prediction": " GrayParamHolder.paramLocal.set(param);", "match": 0}
{"groundtruth": "ExceptionUtils.mpe(\"Failed to process multiple-table update, please exclude the tableName or statementId\");", "prediction": " ExceptionUtils.unchecked(new IllegalArgumentException(\"insert select or itemsList is null\"));\n        }\n    }\n\n    @Override\n    protected void processUpdate(Update update, int index, String sql, Object obj) {\n        if (this.tenantLineHandler.ignoreTable(update.getTable().getName())) {\n            // \u8fc7\u6ee4\u9000\u51fa\u6267\u884c\n            return;\n        }\n        List<Column> columns = update.getColumns();\n        if (CollectionUtils.isEmpty(columns)) {\n            // \u9488\u5bf9\u4e0d\u7ed9\u5217\u540d\u7684update \u4e0d\u5904\u7406\n            return;\n        }\n        String tenantIdColumn = this.tenantLineHandler.getTenantIdColumn();", "first_line_groundtruth": "ExceptionUtils.mpe(\"Failed to process multiple-table update, please exclude the tableName or statementId\");", "first_line_prediction": " ExceptionUtils.unchecked(new IllegalArgumentException(\"insert select or itemsList is null\"));", "match": 0}
{"groundtruth": "= GrayUtil.isGrayRequest();", "prediction": " = GrayUtil.isGrayRequest();\n            }\n            if (isGrayRequest) {\n                return instances.stream()\n                        .filter(instance -> Objects.equals(grayGroup, instance.getMetadata().get(GrayscaleConstant.HEADER_KEY)))\n                        .collect(Collectors.toList());\n            } else {\n                return instances;\n            }\n        }\n    }\n\n    @Override\n    public void initWithNiwsConfig(IClientConfig clientConfig) {\n        // TODO Auto-generated method stub\n\n    }", "first_line_groundtruth": "= GrayUtil.isGrayRequest();", "first_line_prediction": " = GrayUtil.isGrayRequest();", "match": 0}
{"groundtruth": "if(GrayUtil.isGrayPod()){", "prediction": " paramLocal.set(paramMap);\n        }\n        return paramMap;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5355\u4e2a\u53c2\u6570\u503c\n     *\n     * @param key\n     * @param value\n     */\n    public static void setValue(String key, String value) {\n        Map<String, String> paramMap = GrayParamHolder.paramLocal.get();\n        if (Objects.nonNull(paramMap) && !paramMap.isEmpty()) {\n            paramMap.put(key, value);\n        }\n    }\n\n    /**\n     *", "first_line_groundtruth": "if(GrayUtil.isGrayPod()){", "first_line_prediction": " paramLocal.set(paramMap);", "match": 0}
{"groundtruth": "info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542cmq\u961f\u5217\u7684\u72b6\u6001:{", "prediction": "info(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a", "first_line_groundtruth": "info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542cmq\u961f\u5217\u7684\u72b6\u6001:{", "first_line_prediction": "info(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a", "match": 0}
{"groundtruth": "=GrayUtil.requestGroup();", "prediction": "=GrayUtil.getGrayGroup();\n                }\n            }\n            if (isGrayRequest) {\n                return instances.stream()\n                        .filter(instance -> Objects.equals(grayGroup, instance.getMetadata().get(GrayscaleConstant.HEADER_KEY)))\n                        .collect(Collectors.toList());\n            } else {\n                return instances;\n            }\n        }\n    }\n\n    @Override\n    public void initWithNiwsConfig(IClientConfig clientConfig) {\n        // TODO Auto-generated method stub\n\n    }", "first_line_groundtruth": "=GrayUtil.requestGroup();", "first_line_prediction": "=GrayUtil.getGrayGroup();", "match": 0}
{"groundtruth": "String> attributes= GrayParamHolder.getGrayMap();", "prediction": " String> paramMap = GrayParamHolder.getGrayMap();\n        return paramMap!=null && paramMap.containsKey(GrayscaleConstant.HEADER_KEY) && paramMap.get(GrayscaleConstant.HEADER_KEY).equals(GrayscaleConstant.HEADER_VALUE);\n    }\n\n    /**\n     * \u662f\u5426\u4e3a", "first_line_groundtruth": "String> attributes= GrayParamHolder.getGrayMap();", "first_line_prediction": " String> paramMap = GrayParamHolder.getGrayMap();", "match": 0}
{"groundtruth": "getName() + \"\u7070\u5ea6\u73af\u5883\u53d8\u66f4:\" + listenerStateEnum.getValue());", "prediction": "getSimpleName() + \"\u76d1\u542c\u72b6\u6001\u53d8\u66f4\u4e3a\uff1a{}\", listenerStateEnum);\n        if (listenerStateEnum.equals(ListenerStateEnum.GRAYSCALE)) {\n            initConsumerGray();\n        } else {\n            initConsumerProduction();\n        }\n    }\n\n    /**\n     * \u8ba2\u9605\u6d88\u606f\n     *\n     * @param topic\n     * @param subExpression\n     */\n    public void subscribe(String topic, String subExpression) {\n        if (StringUtils.isEmpty(subExpression)) {\n            subExpression = DEFAULT_SUB_EXPRESSION;\n        }\n        subscribes.add(new SubscriptionData(topic, subExpression));\n    }\n\n   ", "first_line_groundtruth": "getName() + \"\u7070\u5ea6\u73af\u5883\u53d8\u66f4:\" + listenerStateEnum.getValue());", "first_line_prediction": "getSimpleName() + \"\u76d1\u542c\u72b6\u6001\u53d8\u66f4\u4e3a\uff1a{}\", listenerStateEnum);", "match": 0}
{"groundtruth": "getHeader(item.getValue());", "prediction": "getHeader(item.getValue());\n            if (StringUtils.hasText(hParam)) {\n                param.put(item.getValue(),hParam);\n            }\n        }\n        GrayParamHolder.paramLocal.set(param);\n        return true;\n    }", "first_line_groundtruth": "getHeader(item.getValue());", "first_line_prediction": "getHeader(item.getValue());", "match": 1}
{"groundtruth": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\uff1a{", "prediction": "(\"mqInit,listenerMqState:{},newState:{}\", listenerMqState, newState);\n        if (listenerMqState != null && listenerMqState.equals(newState)) {\n            return;\n        }\n        if (listenerMqState != null) {\n            this.shutdownConsumer(listenerMqState);\n        }\n        if (newState != null) {\n            this.initConsumer(newState);\n        }\n        listenerMqState = newState;\n    }\n\n    /**\n     * \u5224\u65ad\u5f53\u524d\u670d\u52a1\u6709", "first_line_groundtruth": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\uff1a{", "first_line_prediction": "(\"mqInit,listenerMqState:{},newState:{}\", listenerMqState, newState);", "match": 0}
{"groundtruth": "RtcMsg.createContractTransaction(\n                        subject, application, content, to));", "prediction": " new RtcMsg(subject, application, content, to));\n    }\n\n    public static RawRtcMsg createSubscribeMsg(String to) {\n        return new RawRtcMsg(\n                new RtcMsg(\"\", \"\", \"\", to));\n    }\n\n    public static RawRtcMsg createUnsubscribeMsg(String to) {\n        return new RawRtcMsg(\n                new RtcMsg(\"\", \"\", \"\", to));\n    }\n\n    public static RawRtcMsg createRtcMsg(RtcMsg rtcMsg) {\n        return new RawRtcMsg(rtcMsg);\n    }\n\n    public String getSubject() {\n        return transaction.getSubject();\n    }\n\n   ", "first_line_groundtruth": "RtcMsg.createContractTransaction(", "first_line_prediction": " new RtcMsg(subject, application, content, to));", "match": 0}
{"groundtruth": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);", "prediction": " rawTelegram = new RawTelegram(chainId, nonce, contractAddress, data);\n        String telegram = TelegramEncoder.encode(rawTelegram);\n        String telegramHash = Numeric.toHexString(rawTelegram.getTelegramHash());\n        String telegramHashHex = Numeric.toHexStringNoPrefix(rawTelegram.getTelegramHash());\n        String telegramHashHexPrefix = Numeric.toHexStringNoPrefix(rawTelegram.getTelegramHash());\n        String telegramHashHexPrefix2 = Numeric.toHexStringNoPrefix(rawTelegram.getTelegramHash());\n        String telegramHashHexPrefix3 = Numeric.toHexStringNo", "first_line_groundtruth": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);", "first_line_prediction": " rawTelegram = new RawTelegram(chainId, nonce, contractAddress, data);", "match": 0}
{"groundtruth": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String)) {", "prediction": " (config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n         && ! (recordValue instanceof String)) {\n      recordValue = objectMapper.writeValueAsString(recordValue);\n    } else if (!(recordValue instanceof String)) {\n      recordValue = Util.convertJsonNodeToYTree((JsonNode) recordValue);\n    }\n\n    return YTree.node(recordValue);\n  }\n\n  protected Map<String, Object> convertRecordHeaders(SinkRecord record) {\n    Map<String, Object> headers = new HashMap<>();\n    for (Header header : record.headers()) {\n      headers.put(header.", "first_line_groundtruth": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING", "first_line_prediction": " (config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING", "match": 0}
{"groundtruth": "Util.parseHumanReadableDuration(value.toString());", "prediction": " Util.parseHumanReadableDuration(value.toString());\n      } catch (Exception ex) {\n        throw new ConfigException(name, value, ex.toString());\n      }\n    }\n  }\n\n  public static class ValidUpperString extends ConfigDef.Validator {\n\n    private final Set<String> validValues;\n\n    public ValidUpperString(String... validValues) {\n      this.validValues = new HashSet<>(Arrays.asList(validValues));\n    }\n\n    @Override\n    public void ensureValid(String name, Object value) {\n      if (!validValues.contains(value.toString().toUpperCase())) {\n        throw new ConfigException", "first_line_groundtruth": "Util.parseHumanReadableDuration(value.toString());", "first_line_prediction": " Util.parseHumanReadableDuration(value.toString());", "match": 0}
{"groundtruth": "if (usuario.getPassword().equals(Senha)) {", "prediction": " if (usuario.getEmail().equals(Email) && usuario.getSenha().equals(Senha)) {\n                             senhaCorreta = true;\n                             break;\n                         }\n                    }\n                    if (senhaCorreta) {\n                        RedirecionaLogin();\n                    } else {\n                        Toast.makeText(Login.this, \"Senha incorreta\", Toast.LENGTH_SHORT).show();\n                    }\n                } else {\n                    Toast.makeText(Login.this, \"Usu\u00e1rio n\u00e3o encontrado\", Toast.LENGTH_SHORT).show();\n                }\n            }\n\n            @Override\n            public void onCancelled(@NonNull Database", "first_line_groundtruth": "if (usuario.getPassword().equals(Senha)) {", "first_line_prediction": " if (usuario.getEmail().equals(Email) && usuario.getSenha().equals(Senha)) {", "match": 0}
{"groundtruth": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String)) {", "prediction": " (recordKey instanceof YTreeNode) {\n      return (YTreeNode) recordKey;\n    }\n\n    return YTree.listBuilder().value(recordKey).buildList();\n  }\n\n  protected Object convertRecordValue(SinkRecord record) throws Exception {\n    if (record.value() == null) {\n      return JsonNodeFactory.instance.nullNode();\n    }\n    if (record.value() instanceof String) {\n      return record.value();\n    }\n\n    byte[] jsonBytes = JSON_CONVERTER.fromConnectData(record.topic(), record.valueSchema(),\n        record.value());\n    var jsonString = new", "first_line_groundtruth": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING", "first_line_prediction": " (recordKey instanceof YTreeNode) {", "match": 0}
{"groundtruth": "array.validateShape(String.valueOf(key), expectedShape);", "prediction": " if (array != null) {\n             array.validateShape(expectedShape);\n         }\n         return array;\n     }", "first_line_groundtruth": "array.validateShape(String.valueOf(key), expectedShape);", "first_line_prediction": " if (array != null) {", "match": 0}
{"groundtruth": "RA_atual = usuario.getMatricula();", "prediction": "setUsuario(usuario);\n                            return;\n                        }\n                    }\n                    // Senha incorreta, mostrar um toast de erro\n                    Toast.makeText(Login.this, \"Senha incorreta\", Toast.LENGTH_SHORT).show();\n                } else {\n                    // Usu\u00e1rio n\u00e3o encontrado, mostrar um toast de erro\n                    Toast.makeText(Login.this, \"Usu\u00e1rio n\u00e3o encontrado\", Toast.LENGTH_SHORT).show();\n                }\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError databaseError) {\n                Toast.makeText(Login.this, \"Erro ao ler dados do", "first_line_groundtruth": "RA_atual = usuario.getMatricula();", "first_line_prediction": "setUsuario(usuario);", "match": 0}
{"groundtruth": "!twilioService.validatePhoneNumber(from)) {", "prediction": "twilioService.isValidPhoneNumber(from)) {\n            try {\n                return chatGPTService.sendMessage(body);\n            } catch (RestException e) {\n                logger.error(\"Error sending message to ChatGPTService: \" + e.getMessage());\n                return e.getMessage();\n            }\n        } else {\n            logger.error(\"Invalid phone number: \" + from);\n            return \"Invalid phone number: \" + from;\n        }\n    }", "first_line_groundtruth": "!twilioService.validatePhoneNumber(from)) {", "first_line_prediction": "twilioService.isValidPhoneNumber(from)) {", "match": 0}
{"groundtruth": "myJavaInputStream    = in.getInputStream();", "prediction": " myJavaInputStream  = in.getInputStream();\n             myJavaOutputStream = out.getOutputStream();\n             myPythonInputStream = in.getOutputStream();\n             myPythonOutputStream = out.getInputStream();\n        }\n\n        /**\n         * Get the input stream.\n         *\n         * @return The input stream.\n         */\n        public InputStream getInputStream()\n        {\n            return myJavaInputStream;\n        }\n\n        /**\n         * Get the output stream.\n         *\n         * @return The output stream.\n         */\n        public OutputStream getOutputStream()\n        {\n            return myJavaOutputStream;\n        }\n\n        /**\n         * Get the input stream.\n         *\n         * @", "first_line_groundtruth": "myJavaInputStream    = in.getInputStream();", "first_line_prediction": " myJavaInputStream  = in.getInputStream();", "match": 0}
{"groundtruth": "String response = chatGPTService.askQuestion(message);", "prediction": " ChatMessage chatMessage = chatGPTService.sentChatMessage(message);\n             return chatMessage;\n        }\n\n        else {\n            throw new RestException(\"Message is empty\");\n        }\n\n    }", "first_line_groundtruth": "String response = chatGPTService.askQuestion(message);", "first_line_prediction": " ChatMessage chatMessage = chatGPTService.sentChatMessage(message);", "match": 0}
{"groundtruth": "myPythonInputStream  = out.getInputStream();", "prediction": " myPythonInputStream  = in.getOutputStream();\n            myPythonOutputStream = out.getInputStream();\n        }\n\n        /**\n         * Close the pipe.\n         */\n        public void close()\n        {\n            myIsClosed = true;\n        }\n\n        /**\n         * Get the input stream.\n         *\n         * @return The input stream.\n         */\n        public InputStream getInputStream()\n        {\n            return myJavaInputStream;\n        }\n\n        /**\n         * Get the output stream.\n         *\n         * @return The output stream.\n         */\n        public OutputStream getOutputStream()\n        {\n            return myJavaOutputStream;\n        }\n\n        /**\n         * Get the input", "first_line_groundtruth": "myPythonInputStream  = out.getInputStream();", "first_line_prediction": " myPythonInputStream  = in.getOutputStream();", "match": 0}
{"groundtruth": "chatGPTService.askQuestion(body);", "prediction": " chatGPTService.askQuestion(body);\n        return response;\n    }", "first_line_groundtruth": "chatGPTService.askQuestion(body);", "first_line_prediction": " chatGPTService.askQuestion(body);", "match": 0}
{"groundtruth": "= StringUtil.stackTraceToString(t);", "prediction": " = t;\n                arg     = \"Exception: \" + t;\n            }\n\n            // Do the invoke\n            try {\n                result = python.invoke(arg);\n            }\n            catch (Throwable t) {\n                result  = t;\n                arg     = \"Exception: \" + t;\n            }\n\n            // Print the result\n            System.out.println(arg + \" -> \" + result);\n        }\n\n        System.out.println();\n        System.out.println(\"Done!\");\n        System.out.println();\n\n        python.close();\n    }", "first_line_groundtruth": "= StringUtil.stackTraceToString(t);", "first_line_prediction": " = t;", "match": 0}
{"groundtruth": "chatGPTConfiguration.setApiKey(ConfigUtils.obfuscateApiKey(chatGPTConfiguration.getApiKey()));", "prediction": " return chatGPTConfiguration;\n        }\n    }\n\n    /** This method sends a message to the ChatGPTService */\n    @Get(\"/message\")\n    public ChatMessage sendMessage(@QueryValue String message) {\n\n        if (StringUtils.isBlank(message)) {\n            throw new RestException(\"message is empty. Please provide a message.\");\n        }\n\n        else {\n            ChatMessage chatMessage = chatGPTService.askQuestion(message);\n            return chatMessage;\n        }\n    }", "first_line_groundtruth": "chatGPTConfiguration.setApiKey(ConfigUtils.obfuscateApiKey(chatGPTConfiguration.getApiKey()));", "first_line_prediction": " return chatGPTConfiguration;", "match": 0}
{"groundtruth": "(request.getTo());", "prediction": "(request.getFrom());\n\t\tresponse.setTo(request.getTo());", "first_line_groundtruth": "(request.getTo());", "first_line_prediction": "(request.getFrom());", "match": 0}
{"groundtruth": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);", "prediction": " currentFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);", "first_line_groundtruth": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);", "first_line_prediction": " currentFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);", "match": 0}
{"groundtruth": "UDPFrame currentFrame = FrameMapper.mapFromBytesToInstance(incomingRequestPacket.getData());", "prediction": "\tUDPFrame incomingFrame = FrameMapper.map(incomingRequestPacket.getData(), incomingRequestPacket.getLength());", "first_line_groundtruth": "UDPFrame currentFrame = FrameMapper.mapFromBytesToInstance(incomingRequestPacket.getData());", "first_line_prediction": "\tUDPFrame incomingFrame = FrameMapper.map(incomingRequestPacket.getData(), incomingRequestPacket.getLength());", "match": 0}
{"groundtruth": ", List<UDPFrame>> completedRequestFrameList : map.findCompletedRequestsFrameLists())\n\t\t\t\t{", "prediction": ", List<UDPFrame>> pair : map.findFramesByAddress(incomingRequestPacket.getSocketAddress()))\n\t\t\t\t{\n\t\t\t\t\tif (pair.getValue().isEmpty())\n\t\t\t\t\t{\n\t\t\t\t\t\tmap.remove(pair.getKey());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException e)\n\t\t\t{\n\t\t\t\tlogger.log(Level.SEVERE, \"Failed to receive request from server\", e);\n\t\t\t}\n\t\t\tcatch (MappingException e)\n\t\t\t{\n\t\t\t\tlogger.log(Level.SEVERE, \"Failed to receive request: mapping failure detected\", e);\n\t\t\t}\n\t\t", "first_line_groundtruth": ", List<UDPFrame>> completedRequestFrameList : map.findCompletedRequestsFrameLists())", "first_line_prediction": ", List<UDPFrame>> pair : map.findFramesByAddress(incomingRequestPacket.getSocketAddress()))", "match": 0}
{"groundtruth": "sendResponseWithOverhead(responseBytes, response.getTo());", "prediction": "\tthrow new NetworkException(\"Response size is too big\");", "first_line_groundtruth": "sendResponseWithOverhead(responseBytes, response.getTo());", "first_line_prediction": "\tthrow new NetworkException(\"Response size is too big\");", "match": 0}
{"groundtruth": "myByteList.clear();", "prediction": " myStream.write(myFourByteBuffer.order(ByteOrder.LITTLE_ENDIAN).putFloat(0, o));\n    }", "first_line_groundtruth": "myByteList.clear();", "first_line_prediction": " myStream.write(myFourByteBuffer.order(ByteOrder.LITTLE_ENDIAN).putFloat(0, o));", "match": 0}
{"groundtruth": "return execute(api.getModel(modelId));", "prediction": " return execute(api.getModel(modelId)).data;\n    }\n\n    public List<EmbeddingResult> createEmbeddings(EmbeddingRequest request) {\n        return execute(api.createEmbeddings(request)).data;\n    }\n\n    public CompletionResult createCompletion(CompletionRequest request) {\n        return execute(api.createCompletion(request)).data;\n    }\n\n    public ChatCompletionResult createChatCompletion(ChatCompletionRequest request) {\n        return execute(api.createChatCompletion(request)).data;\n    }\n\n    public EditResult createEdit(EditRequest request) {\n        return execute(api.createEdit(request)).data", "first_line_groundtruth": "return execute(api.getModel(modelId));", "first_line_prediction": " return execute(api.getModel(modelId)).data;", "match": 0}
{"groundtruth": "(myByteList.toArray());", "prediction": "(myByteList.array(), 0, myByteList.length());\n    }", "first_line_groundtruth": "(myByteList.toArray());", "first_line_prediction": "(myByteList.array(), 0, myByteList.length());", "match": 0}
{"groundtruth": "return execute(api.listModels()).data;", "prediction": " return api.listModels().execute().body();\n    }\n\n    public Model getModel(String modelId) {\n        return api.getModel(modelId).execute().body();\n    }\n\n    public EmbeddingResult createEmbeddings(EmbeddingRequest request) {\n        return api.createEmbeddings(request).execute().body();\n    }\n\n    public ModerationResult createModeration(ModerationRequest request) {\n        return api.createModeration(request).execute().body();\n    }\n\n    public EditResult createEdit(EditRequest request) {\n        return api.createEdit(request).execute().body();\n    }\n\n    public Completion", "first_line_groundtruth": "return execute(api.listModels()).data;", "first_line_prediction": " return api.listModels().execute().body();", "match": 0}
{"groundtruth": "PythonMinion.byValue(foo);", "prediction": "1234567890;\n            start = System.nanoTime();\n            for (int i=0; i < count; i++) {\n                python.invoke(\"len\", Integer.class, foo);\n            }\n            end = System.nanoTime();\n            System.out.println(\"  time(len(\" + foo + \")) = \" +\n                               ((end - start) / count / 1000) + \"us\");\n        }\n\n        // Close the connection\n        python.close();\n    }", "first_line_groundtruth": "PythonMinion.byValue(foo);", "first_line_prediction": "1234567890;", "match": 0}
{"groundtruth": "if (infoFilter.isStudentIdValid(studentId)) {", "prediction": " if (infoFilter.isStudentIdValid(studentId)) {\n                 this.studentId = studentId;\n             }\n        } catch (InvalidStudentIdException ex) {\n            throw ex;\n        }\n    }\n\n    public String getStudentClass() {\n        return studentClass;\n    }\n\n    public void setStudentClass(String studentClass) {\n        this.studentClass = studentClass;\n    }\n\n    public String getMajor() {\n        return major;\n    }\n\n    public void setMajor(String major) {\n        this.major = major;\n    }\n\n    public String getSchoolYear() {\n        return schoolYear;\n   ", "first_line_groundtruth": "if (infoFilter.isStudentIdValid(studentId)) {", "first_line_prediction": " if (infoFilter.isStudentIdValid(studentId)) {", "match": 0}
{"groundtruth": "python.invoke(\"len\", Integer.class, foo);", "prediction": " python.invoke(\"len\", Integer.class, foo);\n            }\n            long end = System.nanoTime();\n            System.out.println(\"  \" + count + \" calls in \" +\n                               (end - start) / 1000000 + \" ms\");\n        }\n\n        // Close the connection\n        python.close();\n    }", "first_line_groundtruth": "python.invoke(\"len\", Integer.class, foo);", "first_line_prediction": " python.invoke(\"len\", Integer.class, foo);", "match": 0}
{"groundtruth": "python.invoke(\"len\", Integer.class, arg);", "prediction": " python.invoke(arg, \"upper\");\n            }\n            catch (Throwable t) {\n                result = StringUtil.stackTraceToString(t);\n            }\n            System.out.println(\"  \\\"\" + arg + \".upper()\\\" -> \" + result);\n        }\n\n        System.out.println();\n        System.out.println(\"Closing...\");\n        python.close();\n        System.out.println(\"Closed.\");\n    }", "first_line_groundtruth": "python.invoke(\"len\", Integer.class, arg);", "first_line_prediction": " python.invoke(arg, \"upper\");", "match": 0}
{"groundtruth": "infoFilter.isPersonIdValid(id)) {", "prediction": "infoFilter.isPersonIdValid(id)) {\n                this.id = id;\n            }\n        } catch (InvalidPersonIdException e) {\n            throw e;\n        }\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) throws InvalidEmailException {\n        var infoFilter = new InfoFilterImp();\n        try {\n            if (infoFilter.isEmailValid(email)) {\n                this.email", "first_line_groundtruth": "infoFilter.isPersonIdValid(id)) {", "first_line_prediction": "infoFilter.isPersonIdValid(id)) {", "match": 1}
{"groundtruth": "if (subject.getKind().compareTo(\n                    comboSubjectType.getItemAt(i).toString()) == 0) {", "prediction": " if (comboSubjectType.getItemAt(i).equals(subject.getKind())) {\n                 comboSubjectType.setSelectedIndex(i);\n             }\n        }\n    }", "first_line_groundtruth": "if (subject.getKind().compareTo(", "first_line_prediction": " if (comboSubjectType.getItemAt(i).equals(subject.getKind())) {", "match": 0}
{"groundtruth": "[]     shape   = {", "prediction": "       ndim    = rawData.data().getInt();\n                final int[]     shape   = new int[ndim];\n                for (int i = 0; i < ndim; i++) {\n                    shape[i] = rawData.data().getInt();\n                }\n\n                initArray(dtype, false, shape, null, rawData.data());\n            }\n            catch (ClassCastException e) {\n                throw new MalformedPickleException(\n                     \"Invalid arguments passed to numpy.fromstring: \" +\n                     \"expecting (data, dtype), got \" + tuple,\n                     e\n                 );\n            }\n            catch", "first_line_groundtruth": "[]     shape   = {", "first_line_prediction": "       ndim    = rawData.data().getInt();", "match": 0}
{"groundtruth": "txtMajor.setText(student.getMajor());", "prediction": "\n                \n            } else {\n                txtStudentId.setText(\"\");\n                txtFullName.setText(\"\");\n                var msg = \"Sinh vi\u00ean c\u1ea7n t\u00ecm kh\u00f4ng t\u1ed3n t\u1ea1i. Vui l\u00f2ng th\u1eed l\u1ea1i!\";\n                showMessage(msg);\n            }\n        }\n    }", "first_line_groundtruth": "txtMajor.setText(student.getMajor());", "first_line_prediction": "", "match": 0}
{"groundtruth": "o.getNoCheck(i));", "prediction": "o.get(i));\n        }\n\n        addNumpyArrayEnding(DType.Type.INT8, o);\n    }", "first_line_groundtruth": "o.getNoCheck(i));", "first_line_prediction": "o.get(i));", "match": 0}
{"groundtruth": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");", "prediction": " System.out.println(\"[ \"+raiz.getElement() + \" ]\");\n             preOrden(raiz.getLeftSon());\n             preOrden(raiz.getRightSon());\n        }\n    }\n\n    public void insertNodoIterativo(int element) {\n        Nodo node = new Nodo(element);\n        Nodo pointer = root;\n        Nodo previous = null;\n        while (pointer != null) {\n            previous = pointer;\n            if (element < pointer.getElement()) {\n                pointer = pointer.getLeftSon();\n            } else {\n                pointer = pointer.getRightSon();\n            }\n       ", "first_line_groundtruth": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");", "first_line_prediction": " System.out.println(\"[ \"+raiz.getElement() + \" ]\");", "match": 0}
{"groundtruth": "nodo.setRightSon(raiz.getRightSon());", "prediction": "\n                    } else {\n                        Nodo nodo = searchNodoToReplace(raiz.getRightSon());\n                        nodo.setRightSon(raiz.getRightSon());\n                    }\n                }\n            } else if (element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else {\n                deleteNodo(element, raiz.getRightSon(), raiz);\n            }\n        }\n    }\n\n    public boolean validateLeftSon(Nodo raiz) {\n        if (raiz == null) {\n            return true;\n        } else", "first_line_groundtruth": "nodo.setRightSon(raiz.getRightSon());", "first_line_prediction": "", "match": 0}
{"groundtruth": "myByteList.append(Float.toString(o).getBytes());", "prediction": " myByteList.append(myEightByteBuffer.order(ByteOrder.LITTLE_ENDIAN).putFloat(0, o));\n        write(myByteList.array());\n    }", "first_line_groundtruth": "myByteList.append(Float.toString(o).getBytes());", "first_line_prediction": " myByteList.append(myEightByteBuffer.order(ByteOrder.LITTLE_ENDIAN).putFloat(0, o));", "match": 0}
{"groundtruth": "subject.getKind().compareTo(\n                    comboSubjectType.getItemAt(i).toString()) == 0) {", "prediction": "comboSubjectType.getItemAt(i).equals(subject.getKind())) {\n                comboSubjectType.setSelectedIndex(i);\n                break;\n            }\n        }\n    }", "first_line_groundtruth": "subject.getKind().compareTo(", "first_line_prediction": "comboSubjectType.getItemAt(i).equals(subject.getKind())) {", "match": 0}
{"groundtruth": "if (element == raiz.getElement()) {", "prediction": " if (element < raiz.getElement()) {\n                 if (raiz.getLeftSon() != null) {\n                     deleteNodo(element, raiz.getLeftSon(), raiz);\n                 }\n             } else if (element > raiz.getElement()) {\n                 if (raiz.getRightSon() != null) {\n                     deleteNodo(element, raiz.getRightSon(), raiz);\n                 }\n             } else {\n                 if (raiz.isLeaf()) {\n                     if (previousNode == null) {\n                         setRoot(null);\n                     } else {\n                         if (previousNode.", "first_line_groundtruth": "if (element == raiz.getElement()) {", "first_line_prediction": " if (element < raiz.getElement()) {", "match": 0}
{"groundtruth": "ect.getName() + \" tr\u01b0\u1edbc \u0111\u00f3.\";", "prediction": ".getSubjectName() + \" v\u00e0o l\u00fac \" + dateFormat.format(currentTime);\n                showMessage(msg);\n            } else {\n                registerings.add(r);\n                var msg = \"\u0110\u0103ng k\u00fd m\u00f4n h\u1ecdc \" + subj.getSubjectName() + \" th\u00e0nh c\u00f4ng!\";\n                showMessage(msg);\n            }\n        }\n    }\n\n    private void searchStudent() {\n        var checker = new InfoFilterImp();\n        var student = checker.searchStudent(registerings, txtStudentIdToSearch.getText());\n        if(student != null) {\n            this.student =", "first_line_groundtruth": "ect.getName() + \" tr\u01b0\u1edbc \u0111\u00f3.\";", "first_line_prediction": ".getSubjectName() + \" v\u00e0o l\u00fac \" + dateFormat.format(currentTime);", "match": 0}
{"groundtruth": ", SCALAR_ARRAY_SHAPE, rawData.data());", "prediction": ", SCALAR_ARRAY_SHAPE, null, rawData);\n            return dummyArray.getArray();\n        }", "first_line_groundtruth": ", SCALAR_ARRAY_SHAPE, rawData.data());", "first_line_prediction": ", SCALAR_ARRAY_SHAPE, null, rawData);", "match": 0}
{"groundtruth": "raiz.isLeaf()) {", "prediction": "raiz.getLeftSon() == null && raiz.getRightSon() == null) {\n                    if (previousNode == null) {\n                        setRoot(null);\n                    } else {\n                        if (previousNode.getLeftSon() == raiz) {\n                            previousNode.setLeftSon(null);\n                        } else {\n                            previousNode.setRightSon(null);\n                        }\n                    }\n                } else if (raiz.getLeftSon() == null) {\n                    if (previousNode == null) {\n                        setRoot(raiz.getRightSon());\n                    } else {\n                        if (previousNode", "first_line_groundtruth": "raiz.isLeaf()) {", "first_line_prediction": "raiz.getLeftSon() == null && raiz.getRightSon() == null) {", "match": 0}
{"groundtruth": "if (infoFilter.isDateOfBirthValid(dob)) {", "prediction": " if (infoFilter.isDateOfBirthValid(dob)) {\n                SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\n                this.dob = dateFormat.parse(dob);\n             }\n        } catch (ParseException ex) {\n            throw new InvalidDateOfBirthException();\n        }\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob;\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = 7;\n        hash = 89 * hash + Objects.hashCode(this.id);\n        hash = 89 * hash + Objects.hashCode(this", "first_line_groundtruth": "if (infoFilter.isDateOfBirthValid(dob)) {", "first_line_prediction": " if (infoFilter.isDateOfBirthValid(dob)) {", "match": 0}
{"groundtruth": "if (s.getStudentId().compareTo(studentId) == 0) {", "prediction": " if (s.getId().toUpperCase().equals(studentId)) {\n                    student = s;\n                    break;\n                 }\n            }\n            if (student != null) {\n                txtFullName.setText(student.getFullName());\n                txtStudentId.setText(student.getId());\n            } else {\n                txtFullName.setText(\"\");\n                txtStudentId.setText(\"\");\n                var msg = \"Sinh vi\u00ean c\u1ea7n t\u00ecm kh\u00f4ng t\u1ed3n t\u1ea1i. Vui l\u00f2ng th\u1eed l\u1ea1i!\";\n                showMessage(msg);\n            }\n        }\n    }", "first_line_groundtruth": "if (s.getStudentId().compareTo(studentId) == 0) {", "first_line_prediction": " if (s.getId().toUpperCase().equals(studentId)) {", "match": 0}
{"groundtruth": "(element < previousNode.getElement()) {", "prediction": " (previousNode.getLeftSon() == raiz) {\n                            previousNode.setLeftSon(null);\n                        } else {\n                            previousNode.setRightSon(null);\n                        }\n                    }\n                } else {\n                    // Cuando es un nodo con dos hijos\n                    Nodo node = raiz.getRightSon();\n                    while (node.getLeftSon() != null) {\n                        node = node.getLeftSon();\n                    }\n                    element = node.getElement();\n                    deleteNodo(element, raiz, raiz);\n                }\n            } else if (element < raiz.getElement())", "first_line_groundtruth": "(element < previousNode.getElement()) {", "first_line_prediction": " (previousNode.getLeftSon() == raiz) {", "match": 0}
{"groundtruth": "else if (raiz.hasOnlyRightSon()) {", "prediction": " else {\n                    // Cuando es un nodo con dos hijos\n                    Nodo aux = raiz.getRightSon();\n                    while (aux.getLeftSon() != null) {\n                        aux = aux.getLeftSon();\n                    }\n                    raiz.setElement(aux.getElement());\n                    deleteNodo(aux.getElement(), raiz, raiz);\n                }\n            } else {\n                if (element < raiz.getElement()) {\n                    deleteNodo(element, raiz.getLeftSon(), raiz);\n                } else {\n                    deleteNodo(element, raiz.getRightSon", "first_line_groundtruth": "else if (raiz.hasOnlyRightSon()) {", "first_line_prediction": " else {", "match": 0}
{"groundtruth": "return dummyArray.getLong(0);", "prediction": " return dummyArray.getLong(0);\n            case UINT8:\n            case UINT16:\n            case UINT32:\n            case UINT64:\n                 return dummyArray.getDouble(0);\n            case FLOAT16:\n            case FLOAT32:\n            case FLOAT64:\n                 return dummyArray.getDouble(0);\n            default:\n                 throw new MalformedPickleException(\n                     \"Invalid type \" + dtype + \" for numpy scalar\"\n                 );\n            }\n        }", "first_line_groundtruth": "return dummyArray.getLong(0);", "first_line_prediction": " return dummyArray.getLong(0);", "match": 0}
{"groundtruth": "raiz.getRightSon() != null;", "prediction": " raiz.getLeftSon() == null;\n    }\n    \n    public Nodo searchNodoToReplace(Nodo raiz) {\n        Nodo nodo = raiz;\n        while (nodo.getLeftSon() != null) {\n            nodo = nodo.getLeftSon();\n        }\n        return nodo;\n    }\n\n    public boolean isEmpty() {\n        return root == null;\n    }\n\n    public void insert(int element) {\n        if (isEmpty()) {\n            setRoot(new Nodo(element));\n        } else {\n            insertNodoRecursive(element, getRoot());\n        }\n   ", "first_line_groundtruth": "raiz.getRightSon() != null;", "first_line_prediction": " raiz.getLeftSon() == null;", "match": 0}
{"groundtruth": "nodo.setLeftSon(raiz.getLeftSon());", "prediction": "\n                    } else {\n                        Nodo nodo = searchNodoToReplace(raiz.getRightSon());\n                        \n                    }\n                }\n            } else if (element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else {\n                deleteNodo(element, raiz.getRightSon(), raiz);\n            }\n        }\n    }\n\n    public boolean validateLeftSon(Nodo raiz) {\n        if (raiz.getRightSon() == null) {\n            return true;\n        } else {\n            return false;\n        }\n    }", "first_line_groundtruth": "nodo.setLeftSon(raiz.getLeftSon());", "first_line_prediction": "", "match": 0}
{"groundtruth": "Nodo nodo = searchNodoToReplace(raiz.getLeftSon());", "prediction": " // Si el nodo izquierdo tiene hijos a la derecha\n                        Nodo rightSon = raiz.getLeftSon();\n                        while (rightSon.getRightSon() != null) {\n                            rightSon = rightSon.getRightSon();\n                        }\n                        raiz.setElement(rightSon.getElement());\n                        deleteNodo(raiz.getElement(), raiz.getLeftSon(), raiz);\n                    } else {\n                        // Si el nodo izquierdo tiene hijos a la izquierda\n                        Nodo leftSon = raiz.getLeftSon();\n                        while (leftSon", "first_line_groundtruth": "Nodo nodo = searchNodoToReplace(raiz.getLeftSon());", "first_line_prediction": " // Si el nodo izquierdo tiene hijos a la derecha", "match": 0}
{"groundtruth": "validateLeftSon(raiz.getLeftSon());", "prediction": " raiz.getRightSon() != null;\n                    boolean haveLeftSons = raiz.getLeftSon() != null;\n                    Nodo rightSon = raiz.getRightSon();\n                    Nodo leftSon = raiz.getLeftSon();\n                    Nodo node = new Nodo(element);\n                    if (haveRightSons) {\n                        if (haveLeftSons) {\n                            // Tiene dos hijos\n                            if (element < rightSon.getElement()) {\n                                previousNode.setLeftSon(leftSon);\n                                rightSon.setLeftSon(node);\n                            } else {\n                                previous", "first_line_groundtruth": "validateLeftSon(raiz.getLeftSon());", "first_line_prediction": " raiz.getRightSon() != null;", "match": 0}
{"groundtruth": ".setRightSon(raiz.getRightSon());", "prediction": ".setLeftSon(raiz.getRightSon());\n                        nodo.setRightSon(raiz.getLeftSon());\n                        if (element < previousNode.getElement()) {\n                            previousNode.setLeftSon(nodo);\n                        } else {\n                            previousNode.setRightSon(nodo);\n                        }\n                    }\n                }\n            } else if (element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else {\n                deleteNodo(element, raiz.getRightSon(), raiz);\n            }\n        }\n    }\n\n   ", "first_line_groundtruth": ".setRightSon(raiz.getRightSon());", "first_line_prediction": ".setLeftSon(raiz.getRightSon());", "match": 0}
{"groundtruth": "Nodo nodo = raiz.getLeftSon();", "prediction": " // Si no tiene hijo derecho, se puede eliminar el nodo\n                        if (element < previousNode.getElement()) {\n                            previousNode.setLeftSon(raiz.getRightSon());\n                        } else {\n                            previousNode.setRightSon(raiz.getRightSon());\n                        }\n                    }\n                }\n            } else if (element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else {\n                deleteNodo(element, raiz.getRightSon(), raiz);\n            }\n        }\n    }\n\n    public boolean validate", "first_line_groundtruth": "Nodo nodo = raiz.getLeftSon();", "first_line_prediction": " // Si no tiene hijo derecho, se puede eliminar el nodo", "match": 0}
{"groundtruth": "while(raiz.getRightSon() != null) {", "prediction": " Nodo nodo = raiz;\n         while(nodo.getRightSon() != null){\n             nodo = nodo.getRightSon();\n         }\n         return nodo;\n    }\n\n    public boolean isEmpty() {\n        return root == null;\n    }\n\n    public void insert(int element) {\n        if (isEmpty()) {\n            setRoot(new Nodo(element));\n        } else {\n            insertNodoRecursive(element, getRoot());\n        }\n    }\n\n    public void insert(Object element) {\n        if (isEmpty()) {\n            setRoot(new Nodo(element));\n        } else {", "first_line_groundtruth": "while(raiz.getRightSon() != null) {", "first_line_prediction": " Nodo nodo = raiz;", "match": 0}
{"groundtruth": "[] newSons = new Nodo[father.getSons().length + 1];", "prediction": "[] sons = new Nodo[father.getSons().length + 1];\n        for (int i = 0; i < father.getSons().length; i++) {\n            sons[i] = father.getSons()[i];\n        }\n        sons[sons.length - 1] = nodo;\n        father.setSons(sons);\n    }\n    \n    public void insert(Integer element) {\n        if (isEmpty()) {\n            setRoot(new Nodo(element));\n        } else {\n            Nodo pointer = getRoot();\n            while (pointer.getNext() !=", "first_line_groundtruth": "[] newSons = new Nodo[father.getSons().length + 1];", "first_line_prediction": "[] sons = new Nodo[father.getSons().length + 1];", "match": 0}
{"groundtruth": "pointer.getElement() == fatherElement) {", "prediction": "element < fatherElement) {\n                if (pointer.getLeftSon() == null) {\n                    pointer.setLeftSon(nodo);\n                } else {\n                    insertRecursive(element, fatherElement, pointer.getLeftSon());\n                }\n            } else {\n                if (pointer.getRightSon() == null) {\n                    pointer.setRightSon(nodo);\n                } else {\n                    insertRecursive(element, fatherElement, pointer.getRightSon());\n                }\n            }\n        }\n    }\n    \n    public void insert(Integer element) {\n        insertRecursive(element, 0, root);\n    }\n    \n    public", "first_line_groundtruth": "pointer.getElement() == fatherElement) {", "first_line_prediction": "element < fatherElement) {", "match": 0}
{"groundtruth": "if (pointer.getSons()[i].getElement() == fatherElement) {", "prediction": " if (pointer.getSons()[i] == null) {\n                         pointer.setSon(i, nodo);\n                         break;\n                     }\n                }\n            }\n        }\n    }\n    \n    public void insert(Integer element) {\n        if (isEmpty()) {\n            setRoot(new Nodo(element));\n        } else {\n            Nodo pointer = getRoot();\n            while (pointer != null) {\n                if (pointer.getElement() == element) {\n                    return;\n                } else if (pointer.getElement() > element) {\n                    if (pointer.getLeftSon() == null) {\n                        pointer.setLeftSon", "first_line_groundtruth": "if (pointer.getSons()[i].getElement() == fatherElement) {", "first_line_prediction": " if (pointer.getSons()[i] == null) {", "match": 0}
{"groundtruth": "out.println(\"[ \"+raiz.getElement() + \" ]\");", "prediction": "out.print(raiz.getElement() + \" \");\n        if (raiz.getSons() != null) {\n            for (int i = 0; i < raiz.getSons().length; i++) {\n                printPreOrden(raiz.getSons()[i]);\n            }\n        }\n    }\n    \n    public void printInOrden(Nodo raiz) {\n        if (raiz.getSons() != null) {\n            for (int i = 0; i < raiz.getSons().length; i++) {\n                printInOrden(raiz.getSons()[i]);\n           ", "first_line_groundtruth": "out.println(\"[ \"+raiz.getElement() + \" ]\");", "first_line_prediction": "out.print(raiz.getElement() + \" \");", "match": 0}
{"groundtruth": "33, bst.getRoot());", "prediction": "60, bst.getRoot());\n        bst.insertNodoRecursive(70, bst.getRoot());\n        bst.insertNodoRecursive(80, bst.getRoot());\n        bst.insertNodoRecursive(90, bst.getRoot());\n        bst.insertNodoRecursive(100, bst.getRoot());\n        bst.insertNodoRecursive(110, bst.getRoot());\n        bst.insertNodoRecursive(120, bst.getRoot());\n        bst.insertNodoRecursive(130, bst", "first_line_groundtruth": "33, bst.getRoot());", "first_line_prediction": "60, bst.getRoot());", "match": 0}
{"groundtruth": ".preOrden(bst.getRoot());", "prediction": ".insertNodoRecursive(45, bst.getRoot());\n        bst.insertNodoRecursive(42, bst.getRoot());\n        bst.insertNodoRecursive(47, bst.getRoot());\n        bst.insertNodoRecursive(50, bst.getRoot());\n        bst.insertNodoRecursive(52, bst.getRoot());\n        bst.insertNodoRecursive(54, bst.getRoot());\n        bst.insertNodoRecursive(55, bst.getRoot());\n        bst.insertNodoRecursive(56,", "first_line_groundtruth": ".preOrden(bst.getRoot());", "first_line_prediction": ".insertNodoRecursive(45, bst.getRoot());", "match": 0}
{"groundtruth": "(25, bst.getRoot());", "prediction": "(15, bst.getRoot());\n        bst.insertNodoRecursive(25, bst.getRoot());\n        bst.insertNodoRecursive(35, bst.getRoot());\n        bst.insertNodoRecursive(45, bst.getRoot());\n        bst.insertNodoRecursive(40, bst.getRoot());\n        bst.insertNodoRecursive(60, bst.getRoot());\n        bst.insertNodoRecursive(70, bst.getRoot());\n        bst.insertNodoRecursive(80, bst.getRoot());", "first_line_groundtruth": "(25, bst.getRoot());", "first_line_prediction": "(15, bst.getRoot());", "match": 0}
{"groundtruth": ".deleteNodo(30, bst.getRoot(), null);", "prediction": ".eliminarNodo(20, bst.getRoot());\n        bst.preOrden(bst.getRoot());\n        \n        System.out.println(\"Buscar\");\n        System.out.println(bst.buscar(20, bst.getRoot()));\n        System.out.println(bst.buscar(10, bst.getRoot()));\n        System.out.println(bst.buscar(30, bst.getRoot()));\n        System.out.println(bst.buscar(5, bst.getRoot()));\n        System.out.println(bst.buscar(25", "first_line_groundtruth": ".deleteNodo(30, bst.getRoot(), null);", "first_line_prediction": ".eliminarNodo(20, bst.getRoot());", "match": 0}
{"groundtruth": "(getPeek().getNext());", "prediction": "((Nodo) pointer.getNext());\n            pointer.setNext(null);\n            if (getPeek() == null) {\n                setPeek(null);\n            }\n            length--;\n        }\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return peek == null;\n    }\n\n    @Override\n    public Nodo getPeek() {\n        return peek;\n    }\n\n    @Override\n    public void setPeek(Nodo nodo) {\n        this.peek = nodo;\n    }\n\n    @Override\n    public int getLength() {\n        return length;\n    }\n\n    @Override\n    public void printStack() {\n        N", "first_line_groundtruth": "(getPeek().getNext());", "first_line_prediction": "((Nodo) pointer.getNext());", "match": 0}
{"groundtruth": "(pointer.getNext() != pointer2) {", "prediction": " (pointer != pointer2) {\n                pointer = pointer.getNext();\n                pointer2 = pointer2.getNext();\n            }\n        }\n        length++;\n    }\n    \n    public void insertBegin(Object element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead().setNext(getHead());\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2 = getHead();\n            node.setNext(getHead());\n            setHead(node);\n            while  (pointer != pointer2) {\n                pointer = pointer.getNext();", "first_line_groundtruth": "(pointer.getNext() != pointer2) {", "first_line_prediction": " (pointer != pointer2) {", "match": 0}
{"groundtruth": ".println(\"[ \"+pointer.getElement()+\" ]\");", "prediction": ".println(pointer.getElement());\n            pointer = pointer.getNext();\n        }\n    }", "first_line_groundtruth": ".println(\"[ \"+pointer.getElement()+\" ]\");", "first_line_prediction": ".println(pointer.getElement());", "match": 0}
{"groundtruth": ").setNext(getHead());", "prediction": "node);\n        } else {\n            node.setNext(getHead());\n            setHead(node);\n        }\n        length++;\n    }\n\n    public void insertBegin(Object element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            node.setNext(getHead());\n            setHead(node);\n        }\n        length++;\n    }\n\n    public void insertFinal(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            Nodo pointer", "first_line_groundtruth": ").setNext(getHead());", "first_line_prediction": "node);", "match": 0}
{"groundtruth": "while (pointer.getNext() != getHead()) {", "prediction": " while (pointer.getNext() != pointer) {\n                pointer = (Nodo) pointer.getNext();\n            }\n            pointer.setNext(getHead());\n         }\n        length++;\n    }\n    \n    public void insertInIndex(int element, int index) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead().setNext(getHead());\n        } else {\n            if (index == 0){\n                insertBegin(element);\n            } else {\n                if (index < length) {\n                    Nodo pointer = getHead();\n                    int cont =", "first_line_groundtruth": "while (pointer.getNext() != getHead()) {", "first_line_prediction": " while (pointer.getNext() != pointer) {", "match": 0}
{"groundtruth": "pointer.getNext())).getNext() != getHead()) {", "prediction": "pointer.getNext())).getNext() != null) {\n                    pointer = (Nodo) pointer.getNext();\n                }\n                pointer2 = (Nodo) pointer.getNext();\n                pointer.setNext(null);\n            } else {\n                pointer2 = deleteBegin();\n            }\n            length--;\n            return pointer2;\n        }\n        return null;\n    }\n    \n    public Nodo deleteBegin(){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2;\n            \n            if (length > 1){\n                while (((Nodo)", "first_line_groundtruth": "pointer.getNext())).getNext() != getHead()) {", "first_line_prediction": "pointer.getNext())).getNext() != null) {", "match": 0}
{"groundtruth": "pointer.setNext(getHead());", "prediction": " pointer.setNext(node);\n        }\n        length++;\n    }\n    \n    public void insertBegin(Object element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead().setNext(getHead());\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2 = getHead();\n            node.setNext(getHead());\n            setHead(node);\n            while (pointer.getNext() != pointer2) {\n                pointer = (Nodo) pointer.getNext();\n            }\n             pointer.setNext(node);\n        }", "first_line_groundtruth": "pointer.setNext(getHead());", "first_line_prediction": " pointer.setNext(node);", "match": 0}
{"groundtruth": "list.deleteInIndex(3);", "prediction": " list.printList();\n        list.deleteInIndex(2);\n        list.deleteInIndex(6);\n        list.printList();\n    }\n    ", "first_line_groundtruth": "list.deleteInIndex(3);", "first_line_prediction": " list.printList();", "match": 0}
{"groundtruth": "while (pointer.getNext() != pointer2) {", "prediction": " pointer2.setNext(null);\n            length--;\n            return pointer2;\n        }\n        \n        return null;\n    }\n    \n    public Nodo deleteInIndex(int index){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            if (index == 0){\n                deleteBegin();\n            } else {\n                if (index < length) {\n                    Nodo pointer = getHead();\n                    Nodo pointer2;\n                    int cont = 0;\n                    while ( cont< index-1) {\n                        pointer = (Nodo) pointer.getNext();\n                        cont++;\n                    }\n                   ", "first_line_groundtruth": "while (pointer.getNext() != pointer2) {", "first_line_prediction": " pointer2.setNext(null);", "match": 0}
{"groundtruth": ".getNext())).getNext() != getHead()) {", "prediction": ".getNext())).getNext() != null) {\n                    pointer = (Nodo) pointer.getNext();\n                }\n                pointer2 = (Nodo) pointer.getNext();\n                pointer.setNext(null);\n            } else {\n                pointer2 = deleteBegin();\n            }\n            length--;\n            return pointer2;\n        }\n        return null;\n    }\n    \n    public Nodo deleteBegin(){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2;\n            \n            if (length > 1){\n                while (((Nodo) (", "first_line_groundtruth": ".getNext())).getNext() != getHead()) {", "first_line_prediction": ".getNext())).getNext() != null) {", "match": 0}
{"groundtruth": "int) pointer1.getElement();", "prediction": "int) pointer1.getData();\n                pointer1 = (Nodo) pointer1.getNext();\n            }\n            if (pointer2 != null){\n                value += (int) pointer2.getData();\n                pointer2 = (Nodo) pointer2.getNext();\n            }\n            if (pointer3 != null){\n                value += (int) pointer3.getData();\n                pointer3 = (Nodo) pointer3.getNext();\n            }\n            list.insertFinal(value);\n        }\n        return list;\n    }", "first_line_groundtruth": "int) pointer1.getElement();", "first_line_prediction": "int) pointer1.getData();", "match": 0}
{"groundtruth": "pointer1 = lista1.getHead();", "prediction": " nodo = null;\n        Nodo  nodo2 = null;\n        Nodo  nodo3 = null;\n        Nodo  nodo4 = null;\n        Nodo  nodo5 = null;\n        Nodo  nodo6 = null;\n        Nodo  nodo7 = null;\n        Nodo  nodo8 = null;\n        Nodo  nodo9 = null;\n        Nodo  nodo10 = null;\n        Nodo  nodo11 = null;\n        Nodo  nodo12 = null;\n        Nodo  nodo13 = null", "first_line_groundtruth": "pointer1 = lista1.getHead();", "first_line_prediction": " nodo = null;", "match": 0}
{"groundtruth": "Nodo pointer3 = lista3.getHead();", "prediction": " Nodo pointer3 = lista3.getHead();\n        while(pointer1 != null && pointer2 != null && pointer3 != null){\n            int suma = pointer1.getElement() + pointer2.getElement() + pointer3.getElement();\n            Nodo nodo = new Nodo(suma);\n            list.insertFinal(nodo);\n            pointer1 = pointer1.getNext();\n            pointer2 = pointer2.getNext();\n            pointer3 = pointer3.getNext();\n        }\n        return list;\n    }", "first_line_groundtruth": "Nodo pointer3 = lista3.getHead();", "first_line_prediction": " Nodo pointer3 = lista3.getHead();", "match": 0}
{"groundtruth": ").setPrevious(node);", "prediction": "node);\n            setHead(node);\n        }\n        size++;\n    }\n\n    @Override\n    public void insertFinal(Object element) {\n        NodoDoble node = new NodoDoble(element);\n        if (isEmpty()) {\n            setHead(node);\n            setTail(node);\n        } else {\n            getTail(node);\n            setTail(node);\n        }\n        size++;\n    }\n\n    @Override\n    public void insertInIndex(Object element, int index) {\n        NodoDoble node = new NodoDoble(element);\n        if (isEmpty()) {\n            set", "first_line_groundtruth": ").setPrevious(node);", "first_line_prediction": "node);", "match": 0}
{"groundtruth": "node.setPrevious(pointer);", "prediction": " while (pointer.getNext() != null) {\n                 pointer = pointer.getNext();\n             }\n             pointer.setNext(node);\n             node.setPrevious(pointer);\n             setTail(node);\n        }\n        size++;\n    }\n\n    @Override\n    public void insertInIndex(Object element, int index) {\n        NodoDoble node = new NodoDoble(element);\n        if (isEmpty()) {\n            setHead(node);\n            setTail(node);\n        } else {\n            NodoDoble pointer = getHead();\n            for (int i = 0; i < index;", "first_line_groundtruth": "node.setPrevious(pointer);", "first_line_prediction": " while (pointer.getNext() != null) {", "match": 0}
{"groundtruth": "= (NodoDoble) pointer.getNext();", "prediction": " = pointer.getNext();\n                        cont++;\n                    }\n                    pointer2 = pointer.getNext();\n                    pointer.setNext(pointer2.getNext());\n                    pointer2.setNext(null);\n                }\n            } else {\n                NodoDoble pointer = getTail();\n                if (index == getSize()-1){\n                    deleteFinal();\n                } else {\n                    NodoDoble pointer2;\n                    int cont = 0;\n                    while ( cont< getSize()-index-1 && pointer != null) {\n                        pointer  = pointer.getPrevious();\n                        cont++;\n                    }\n                    pointer2 = pointer.getPrevious", "first_line_groundtruth": "= (NodoDoble) pointer.getNext();", "first_line_prediction": " = pointer.getNext();", "match": 0}
{"groundtruth": "pointer2 = pointer.getPrevious();", "prediction": " previous = pointer.getPrevious();\n                previous.setNext(null);\n                setTail(previous);\n            }\n            size--;\n            return pointer;\n        }\n        return null;\n    }", "first_line_groundtruth": "pointer2 = pointer.getPrevious();", "first_line_prediction": " previous = pointer.getPrevious();", "match": 0}
{"groundtruth": "pointer.setPrevious(null);", "prediction": " pointer2.setNext(null);\n                 setTail(pointer2);\n            }\n            size--;\n            return pointer;\n        }\n        return null;\n    }", "first_line_groundtruth": "pointer.setPrevious(null);", "first_line_prediction": " pointer2.setNext(null);", "match": 0}
{"groundtruth": "pointer2 = pointer.getNext();", "prediction": " pointer2 = (NodoDoble) pointer.getNext();\n                     pointer.setNext((NodoDoble) pointer2.getNext());\n                     pointer2.setNext(null);\n                     return pointer2;\n                }\n            } else {\n                NodoDoble pointer = getTail();\n                if (index == getSize()-1){\n                    deleteFinal();\n                } else {\n                    NodoDoble pointer2;\n                    int cont = 0;\n                    while ( cont< getSize()-index-1 && pointer != null) {\n                        pointer = (NodoDoble) pointer.getPrevious();", "first_line_groundtruth": "pointer2 = pointer.getNext();", "first_line_prediction": " pointer2 = (NodoDoble) pointer.getNext();", "match": 0}
{"groundtruth": "emoji.getSubgroup() == subgroup).collect(Collectors.toSet());", "prediction": " emoji.getSubGroup() == subgroup).collect(Collectors.toSet());\n    }\n\n    /**\n     * Gets all emojis that are part of the given group and subgroup.\n     *\n     * @param group The group to get the emojis for.\n     * @param subgroup The subgroup to get the emojis for.\n     * @return A set of all emojis that are part of the given group and subgroup.\n     */\n    public static Set<Emoji> getAllEmojisByGroupAndSubGroup(final EmojiGroup group, final EmojiSubGroup subgroup) {\n        return EMOJIS_", "first_line_groundtruth": "emoji.getSubgroup() == subgroup).collect(Collectors.toSet());", "first_line_prediction": " emoji.getSubGroup() == subgroup).collect(Collectors.toSet());", "match": 0}
{"groundtruth": "pointer2.getNext().setPrevious(pointer);", "prediction": " pointer2.setNext(null);\n                }\n            } else {\n                NodoDoble pointer = getTail();\n                if (index == getSize()-1) {\n                    deleteFinal();\n                } else {\n                    NodoDoble pointer2;\n                    int cont = 0;\n                    while ( cont< getSize()-index-1 && pointer != null) {\n                        pointer = (NodoDoble) pointer.getPrevious();\n                        cont++;\n                    }\n                    pointer2 = pointer.getPrevious();\n                    pointer.setPrevious(pointer2.getPrevious());\n                    pointer2.setPrevious(null);\n               ", "first_line_groundtruth": "pointer2.getNext().setPrevious(pointer);", "first_line_prediction": " pointer2.setNext(null);", "match": 0}
{"groundtruth": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))\n                .findFirst();", "prediction": "(emoji -> emoji.getAllDiscordAliases().contains(aliasWithoutColon) || emoji.getAllDiscordAliases().contains(aliasWithColon))\n                 .findFirst();\n    }\n\n    /**\n     * Gets an emoji for the given unicode.\n     *\n     * @param emoji The unicode of the emoji.\n     * @return The emoji.\n     */\n    public static Optional<Emoji> getByUnicode(final String emoji) {\n        if (isStringNullOrEmpty(emoji)) return Optional.empty();\n        return Optional.ofNullable(EMOJI_UNICODE_TO_EMOJI.get(emoji));\n    }\n\n    /**\n     * Gets all", "first_line_groundtruth": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))", "first_line_prediction": "(emoji -> emoji.getAllDiscordAliases().contains(aliasWithoutColon) || emoji.getAllDiscordAliases().contains(aliasWithColon))", "match": 0}
{"groundtruth": "emoji.getAllAliases().contains(aliasWithoutColon) || emoji.getAllAliases().contains(aliasWithColon))\n                .findFirst();", "prediction": " emoji.getAliases().contains(aliasWithoutColon) || emoji.getAliases().contains(aliasWithColon))\n                 .findFirst();\n    }\n\n    /**\n     * Gets all emojis that match the given pattern.\n     *\n     * @param pattern The pattern to match.\n     * @return A list of all emojis that match the given pattern.\n     */\n    public static List<Emoji> getByPattern(final String pattern) {\n        if (isStringNullOrEmpty(pattern)) return Collections.emptyList();\n        return EMOJI_PATTERN.matcher(pattern).results().stream()\n                 .map(m -> EMOJI_", "first_line_groundtruth": "emoji.getAllAliases().contains(aliasWithoutColon) || emoji.getAllAliases().contains(aliasWithColon))", "first_line_prediction": " emoji.getAliases().contains(aliasWithoutColon) || emoji.getAliases().contains(aliasWithColon))", "match": 0}
{"groundtruth": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());", "prediction": " return new HashSet<>(EMOJI_FIRST_CODEPOINT_TO_EMOJIS_ORDER_CODEPOINT_LENGTH_DESCENDING.get(group.getGroupCodePoint()));\n    }\n\n    /**\n     * Gets all emojis that are part of the given group.\n     *\n     * @param group The group to get the emojis for.\n     * @return A set of all emojis that are part of the given group.\n     */\n    public static Set<Emoji> getAllEmojisByGroup(final int group) {\n        return new HashSet<>(EMOJI_FIRST_CODEPOINT_TO_E", "first_line_groundtruth": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());", "first_line_prediction": " return new HashSet<>(EMOJI_FIRST_CODEPOINT_TO_EMOJIS_ORDER_CODEPOINT_LENGTH_DESCENDING.get(group.getGroupCodePoint()));", "match": 0}
{"groundtruth": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(emoji));", "prediction": ".isHairStyleEmoji(unicode) ? HairStyle.removeHairStyle(unicode) : unicode;\n        final List<Emoji> variations = new ArrayList<>();\n        variations.add(new Emoji(baseEmoji, unicode, discordAliases, githubAliases, slackAliases, hasFitzpatrick, hasHairStyle, version, qualification, description, group, subgroup));\n        if (hasFitzpatrick) {\n            variations.add(new Emoji(baseEmoji, unicode, discordAliases, githubAliases, slackAliases, false, hasHairStyle, version, qualification, description, group,", "first_line_groundtruth": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(emoji));", "first_line_prediction": ".isHairStyleEmoji(unicode) ? HairStyle.removeHairStyle(unicode) : unicode;", "match": 0}
{"groundtruth": "mListener.onCancelledAuth();", "prediction": " mListener.onLoggedOut();\n                }\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(Exception e) {\n                Log.i(TAG, \"cancelAuthorization fail\");\n                if (mListener != null) {\n                    mListener.onException(Constants.CANCEL_AUTHORIZATION_ACTION, e.getMessage());\n                }\n            }\n        });\n    }\n\n    public static void getAuthAccount() {\n        int action = mSharedPreferences.getInt(MODE, Constants.LOGIN_ACTION);\n        AccountAuthService authService = createAuthService(action);\n        Task<Auth", "first_line_groundtruth": "mListener.onCancelledAuth();", "first_line_prediction": " mListener.onLoggedOut();", "match": 0}
{"groundtruth": "mListener.onLoggedOut();", "prediction": " mListener.onLogOut();\n                }\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(Exception e) {\n                Log.e(TAG, \"signOut Failed\");\n            }\n        });\n    }\n\n    public static void getAuthAccount() {\n        int action = mSharedPreferences.getInt(MODE, Constants.LOGIN_ACTION);\n        AccountAuthService authService = createAuthService(action);\n        Task<AuthAccount> authAccountTask = authService.getAuthAccount();\n        authAccountTask.addOnSuccessListener(new OnSuccessListener<AuthAccount", "first_line_groundtruth": "mListener.onLoggedOut();", "first_line_prediction": " mListener.onLogOut();", "match": 0}
{"groundtruth": "HuaweiPushPlugin.handleReceiveMessage(messageData);", "prediction": " // Check whether the message is empty.\n        if (messageData == null) {\n            Log.e(TAG, \"Received message data is null!\");\n            HuaweiPushPlugin.handleException(Constants.UNKNOWN_ERROR, Constants.ON_MESSAGE_RECEIVED, \"Received null message data\");\n            return;\n        }\n        Log.i(TAG, \"Received message data: \" + messageData);\n        try {\n            JSONObject messageJson = new JSONObject(messageData);\n            HuaweiPushPlugin.handleMessageReceived(messageJson);\n        } catch (JSONException e) {\n            Log.e(TAG, \"Received message", "first_line_groundtruth": "HuaweiPushPlugin.handleReceiveMessage(messageData);", "first_line_prediction": " // Check whether the message is empty.", "match": 0}
{"groundtruth": "mAdStatusListener.onRewarded(rewardName, rewardAmount);", "prediction": " mAdStatusListener.onRewarded(rewardAmount, rewardName);\n                        }\n                     }\n                 });\n            }", "first_line_groundtruth": "mAdStatusListener.onRewarded(rewardName, rewardAmount);", "first_line_prediction": " mAdStatusListener.onRewarded(rewardAmount, rewardName);", "match": 0}
{"groundtruth": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {", "prediction": "TextUtils.isEmpty(inAppPurchaseDataSignature)) {\n            return new Pair<>(false, null);\n        }\n        InAppPurchaseData inAppPurchaseData = null;\n        try {\n            inAppPurchaseData = InAppPurchaseData.parse(inAppPurchaseDataStr);\n        } catch (Exception e) {\n            Log.e(TAG, \"verifyPurchaseStatus, parse inAppPurchaseDataStr fail, \" + e.getMessage());\n            return new Pair<>(false, null);\n        }\n        if (inAppPurchaseData == null) {\n            Log.e(TAG, \"verifyPurchaseStatus, inAppPurchaseData", "first_line_groundtruth": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {", "first_line_prediction": "TextUtils.isEmpty(inAppPurchaseDataSignature)) {", "match": 0}
{"groundtruth": "list.deleteInIndex(6);", "prediction": " list.printList();\n    }", "first_line_groundtruth": "list.deleteInIndex(6);", "first_line_prediction": " list.printList();", "match": 0}
{"groundtruth": "iapApiCallback.onFail(e);", "prediction": " iapApiCallback.onFailure(e);\n            }\n        });\n    }\n\n    /**\n     * To start the in-app purchase activity.\n     *\n     * @param activity Activity instance.\n     * @param mClient IapClient instance to call the startIapActivity API.\n     * @param iapApiCallback IapApiCallback.\n     */\n    public static void startIapActivity(Activity activity, IapClient mClient, final IapApiCallback iapApiCallback) {\n        Log.i(TAG, \"call startIapActivity\");\n        Task<StartIapActivityResult> task = m", "first_line_groundtruth": "iapApiCallback.onFail(e);", "first_line_prediction": " iapApiCallback.onFailure(e);", "match": 0}
{"groundtruth": "list.deleteInIndex(2);", "prediction": " list.deleteInIndex(3);\n        list.printList();\n    }", "first_line_groundtruth": "list.deleteInIndex(2);", "first_line_prediction": " list.deleteInIndex(3);", "match": 0}
{"groundtruth": ").compareTo(cont.getTitular()) < 0) {", "prediction": "cont.getTitular()) < 0) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;", "first_line_groundtruth": ").compareTo(cont.getTitular()) < 0) {", "first_line_prediction": "cont.getTitular()) < 0) {", "match": 0}
{"groundtruth": "out.printf(\"Saldo atualizado: R$%.2f%n\", conta.getSaldo());", "prediction": "out.printf(\"Saldo atual: R$ %.2f%n\", this.getSaldo());\n\t\tSystem.out.println(\"Data: \" + sdf.format(date));\n\t\tSystem.out.println(\"**********************************************************\");", "first_line_groundtruth": "out.printf(\"Saldo atualizado: R$%.2f%n\", conta.getSaldo());", "first_line_prediction": "out.printf(\"Saldo atual: R$ %.2f%n\", this.getSaldo());", "match": 0}
{"groundtruth": ".getTitular().compareTo(cont.getTitular()) > 0) {", "prediction": ".getTipoDeConta().compareTo(cont.getTipoDeConta()) > 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (this.getTipoDeConta().compareTo(cont.getTipoDeConta()) < 0) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;", "first_line_groundtruth": ".getTitular().compareTo(cont.getTitular()) > 0) {", "first_line_prediction": ".getTipoDeConta().compareTo(cont.getTipoDeConta()) > 0) {", "match": 0}
{"groundtruth": "conta.sacar(valor, conta);", "prediction": "", "first_line_groundtruth": "conta.sacar(valor, conta);", "first_line_prediction": "", "match": 0}
{"groundtruth": "printf(\"Saldo atual: R$ %.2f\", conta.getSaldo());", "prediction": "println(\"Dep\u00f3sito efetuado com sucesso!\");\n\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tSystem.out.println(\"Insira o valor da transfer\u00eancia: R$ \");\n\t\t\t\tvalor = sc.nextDouble();", "first_line_groundtruth": "printf(\"Saldo atual: R$ %.2f\", conta.getSaldo());", "first_line_prediction": "println(\"Dep\u00f3sito efetuado com sucesso!\");", "match": 0}
{"groundtruth": "pointer2 = (Nodo) pointer2.getNext();", "prediction": " pointer2 = pointer2.getNext();\n                 cont2++;\n            }\n            if (pointer2.getElement() > pointer.getElement()){\n                pointer.setElement(pointer2.getElement());\n                pointer.setNext(pointer2.getNext());\n                pointer2.getNext().setPrevious(pointer);\n                pointer2.setNext(null);\n                pointer2.setPrevious(null);\n            }\n            pointer = pointer2;\n            cont2 = 0;\n            cont--;\n        }\n        System.out.println(\"El promedio es:\"+(double)(acum/queue.getSize()));\n    }\n    \n    public void Ej", "first_line_groundtruth": "pointer2 = (Nodo) pointer2.getNext();", "first_line_prediction": " pointer2 = pointer2.getNext();", "match": 0}
{"groundtruth": "System.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());", "prediction": "\tSystem.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());\n\t\t\tSystem.out.println(\"Total de dep\u00f3sitos: \" + conta.getTotalDepositos());\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"Valor de tarifa cobrado no pagamento: R$ \" + ContaCorrente.getTarifaPagamento());\n\t\t\tSystem.out.println(\"Total de pagamentos: \" + conta.getTotalPagamentos());\n\t\t\tSystem.out.println();", "first_line_groundtruth": "System.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());", "first_line_prediction": "\tSystem.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());", "match": 0}
{"groundtruth": "(cpfDestinatario.equals(conta.getCpf())) {", "prediction": " (cpfDestinatario.length() != 11) {\n\t\t\t\t\tSystem.out.println(\"Insira um CPF v\u00e1lido.\");\n\t\t\t\t\tSystem.out.printf(\"Insira o CPF do destinat\u00e1rio: \");\n\t\t\t\t\tcpfDestinatario = sc.nextLine();\n\t\t\t\t}", "first_line_groundtruth": "(cpfDestinatario.equals(conta.getCpf())) {", "first_line_prediction": " (cpfDestinatario.length() != 11) {", "match": 0}
{"groundtruth": "conta.transferir(contaDestino, valor, conta);", "prediction": "", "first_line_groundtruth": "conta.transferir(contaDestino, valor, conta);", "first_line_prediction": "", "match": 0}
{"groundtruth": "printf(\"NOME: %s\\t| AG\u00caNCIA: %s\\n\", c.getTitular(), c.getAgencia());", "prediction": "println(c);\n\t\t}\n\t\tSystem.out.println(\"****************************************************\");\n\t\tEscritor.relatorioClientes(conta, funcionario);", "first_line_groundtruth": "printf(\"NOME: %s\\t| AG\u00caNCIA: %s\\n\", c.getTitular(), c.getAgencia());", "first_line_prediction": "println(c);", "match": 0}
{"groundtruth": "etTitular(), c.getAgencia());", "prediction": ".getNome(), c.getAgencia().getNumAgencia());\n\t\t}\n\t\tSystem.out.println(\"****************************************************\");\n\t\tEscritor.relatorioClientes(conta, funcionario);", "first_line_groundtruth": "etTitular(), c.getAgencia());", "first_line_prediction": ".getNome(), c.getAgencia().getNumAgencia());", "match": 0}
{"groundtruth": "Escritor.registroDeDadosAtualizados();", "prediction": "\tSystem.out.println(\"Obrigado por utilizar o sistema!\");\n\t\t\t\t\tSystem.out.println(\"At\u00e9 logo!\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"Op\u00e7\u00e3o inv\u00e1lida!\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (InputMismatchException e) {\n\t\t\tSystem.out.println(\"Op\u00e7\u00e3o inv\u00e1lida!\");\n\t\t}", "first_line_groundtruth": "Escritor.registroDeDadosAtualizados();", "first_line_prediction": "\tSystem.out.println(\"Obrigado por utilizar o sistema!\");", "match": 0}
{"groundtruth": "println(\"Total de saques: \" + conta.getTotalSaques());", "prediction": "println(\"Valor de tarifa cobrado no deposito: R$ \" + ContaCorrente.getTarifaDeposito());\n\t\tSystem.out.println(\"Valor de tarifa cobrado no pagamento: R$ \" + ContaCorrente.getTarifaPagamento());\n\t\tSystem.out.println(\"Valor de tarifa cobrado no saque: R$ \" + ContaCorrente.getTarifaSaque());\n\t\tSystem.out.println(\"Valor de tarifa cobrado no deposito: R$ \" + ContaCorrente.getTarifaDeposit", "first_line_groundtruth": "println(\"Total de saques: \" + conta.getTotalSaques());", "first_line_prediction": "println(\"Valor de tarifa cobrado no deposito: R$ \" + ContaCorrente.getTarifaDeposito());", "match": 0}
{"groundtruth": "capitalBancoSaldo += lista.getSaldo();", "prediction": "\tcapitalBancoSaldo += lista.getSaldo();\n\t\t}\n\t\tSystem.out.printf(\"O valor total do capital do banco \u00e9: R$ %.2f%n\", capitalBancoSaldo);\n\t\tSystem.out.println(\"**************************************************\");\n\t\tSystem.out.println();", "first_line_groundtruth": "capitalBancoSaldo += lista.getSaldo();", "first_line_prediction": "\tcapitalBancoSaldo += lista.getSaldo();", "match": 0}
{"groundtruth": ".out.println(pointer2.getElement());", "prediction": ".out.println(\"El promedio de los \"+cont3+\" elementos es:\"+(double)(pointer2.getElement()/cont));\n            cont3++;\n            cont2=0;\n            pointer2 = (Nodo) pointer2.getNext();\n        }\n    }\n    \n    public void Ejercicio2(Queue queue) {\n        Nodo pointer = queue.getHead();\n        int cont = queue.getSize();\n        int cont2 = 0;\n        int cont3 = 0;\n        boolean firstTime = true;\n        while ((pointer != queue.getHead() || firstTime)){\n            firstTime = false", "first_line_groundtruth": ".out.println(pointer2.getElement());", "first_line_prediction": ".out.println(\"El promedio de los \"+cont3+\" elementos es:\"+(double)(pointer2.getElement()/cont));", "match": 0}
{"groundtruth": "(\"Valor de tarifa cobrado na tranfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());", "prediction": "(\"Valor de tarifa cobrado na transfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());\n\t\tSystem.out.println(\"Total de transfer\u00eancias: \" + conta.getTotalTransferencias());\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Valor de tarifa cobrado no seguro de vida: R$ \" + ContaCorrente.getTarifaSeguroDeVida());\n\t\tSystem.out.println(\"Total de seguros de vida: \" + conta.getTotalSegurosDeVida());\n\t\t", "first_line_groundtruth": "(\"Valor de tarifa cobrado na tranfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());", "first_line_prediction": "(\"Valor de tarifa cobrado na transfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());", "match": 0}
{"groundtruth": "conta.imprimeExtrato(conta);", "prediction": "\tEscritor.extrato(conta);\n\t\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tSystem.out.println();\n\t\t\t\tSystem.out.println(\"******** Menu Relat\u00f3rios e Saldo ********\");\n\t\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\t\tSystem.out.println(\"[1] Relat\u00f3rio de informa\u00e7\u00f5es dos clientes do banco\");\n\t\t\t\tSystem.out.println(\"[2] Relat\u00f3rio do capital total armazenado\");\n\t\t\t\tSystem.out.println(\"[3] Retornar ao", "first_line_groundtruth": "conta.imprimeExtrato(conta);", "first_line_prediction": "\tEscritor.extrato(conta);", "match": 0}
{"groundtruth": "= \"Ag\u00eancia: \" + conta.getAgencia();", "prediction": " = \"Agencia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "= \"Ag\u00eancia: \" + conta.getAgencia();", "first_line_prediction": " = \"Agencia: \" + conta.getAgencia();", "match": 0}
{"groundtruth": "= valorSimulado * ((ContaPoupanca.getTaxaRendimento() / 30) * dias);", "prediction": " = 0.0;\n\t\tDouble rendimentoTotal = 0.0;\n\t\tDouble rendimentoMensal = 0.0;\n\t\tDouble rendimentoAnual = 0.0;\n\t\tDouble rendimentoTotalMensal = 0.0;\n\t\tDouble rendimentoTotalAnual = 0.0;\n\t\tDouble rendimentoTotalAnualMensal = 0.0;\n\t\tDouble rendimentoTotalAnualMensalAnual = 0.0;\n\t\tDouble rendimentoTotalAnualMensalAnualAnual = 0.0;\n\t\t", "first_line_groundtruth": "= valorSimulado * ((ContaPoupanca.getTaxaRendimento() / 30) * dias);", "first_line_prediction": " = 0.0;", "match": 0}
{"groundtruth": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();", "prediction": "ateHoje = ContaCorrente.getTarifaSaque() + ContaCorrente.getTarifaDeposito()\n\t\t\t\t+ ContaCorrente.getTarifaTransferencia();\n\t\tdouble total = ContaCorrente.getTarifaSaque() + ContaCorrente.getTarifaDeposito()\n\t\t\t\t+ ContaCorrente.getTarifaTransferencia() + conta.getTotalSaques()\n\t\t\t\t+ conta.getTotalDepositos() + conta.getTotalTransferencias();\n\t\tdouble saldo = ContaCorrente.getSaldo();\n\t\tdouble saldoFinal =", "first_line_groundtruth": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();", "first_line_prediction": "ateHoje = ContaCorrente.getTarifaSaque() + ContaCorrente.getTarifaDeposito()", "match": 0}
{"groundtruth": "ag.getNumAgencia());", "prediction": " ag.getNumAgencia() + \";\" + ag.getNome() + \";\" + ag.getEndereco() + \";\"\n\t\t\t\t\t\t+ ag.getCidade() + \";\" + ag.getEstado() + \";\" + ag.getTelefone() + \";\" + ag.getCep() + \"\\n\");\n\t\t\t}", "first_line_groundtruth": "ag.getNumAgencia());", "first_line_prediction": " ag.getNumAgencia() + \";\" + ag.getNome() + \";\" + ag.getEndereco() + \";\"", "match": 0}
{"groundtruth": ").getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();", "prediction": "ContasEnum.CORRENTE).getNome() + \"_\" + conta.getTitular(ContasEnum.CORRENTE).getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();", "first_line_groundtruth": ").getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();", "first_line_prediction": "ContasEnum.CORRENTE).getNome() + \"_\" + conta.getTitular(ContasEnum.CORRENTE).getTipoDeUsuario();", "match": 0}
{"groundtruth": "queue.getSize()){", "prediction": "10){\n                cont3 = 0;\n                pointer2 = (Nodo) pointer2.getNext();\n            }\n        }\n    }\n    \n    public void Ejercicio2(Queue queue) {\n        Nodo pointer = queue.getHead();\n        int cont = 0;\n        while (pointer != null) {\n            cont++;\n            pointer = (Nodo) pointer.getNext();\n        }\n        System.out.println(\"El tama\u00f1o de la cola es: \"+cont);\n    }\n    \n    public void Ejercicio3(Queue queue) {\n        Nodo pointer = queue.getHead();", "first_line_groundtruth": "queue.getSize()){", "first_line_prediction": "10){", "match": 0}
{"groundtruth": "= (Nodo) queue.getHead().getNext();", "prediction": " = (Nodo) pointer2.getNext();\n        }\n    }\n    \n    public void Ejercicio2(Queue queue) {\n        Nodo pointer = queue.getHead();\n        int cont = 0;\n        while (pointer != null) {\n            cont++;\n            pointer = (Nodo) pointer.getNext();\n        }\n        System.out.println(\"El tama\u00f1o de la cola es: \"+cont);\n    }\n    \n    public void Ejercicio3(Queue queue) {\n        Nodo pointer = queue.getHead();\n        int cont = 0;\n        while (pointer != null) {", "first_line_groundtruth": "= (Nodo) queue.getHead().getNext();", "first_line_prediction": " = (Nodo) pointer2.getNext();", "match": 0}
{"groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia();", "prediction": " \"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia();", "first_line_prediction": " \"Ag\u00eancia: \" + conta.getAgencia();", "match": 0}
{"groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";", "prediction": "ContasEnum.CONTA_CORRENTE) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_comprovanteTransferencia\";", "first_line_groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";", "first_line_prediction": "ContasEnum.CONTA_CORRENTE) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado", "match": 0}
{"groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";", "prediction": "", "first_line_groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";", "first_line_prediction": "", "match": 0}
{"groundtruth": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";", "prediction": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_extratoConta\";", "first_line_groundtruth": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";", "first_line_prediction": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_extratoConta\";", "match": 0}
{"groundtruth": "conta.getTipoDeConta();", "prediction": "1;\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "conta.getTipoDeConta();", "first_line_prediction": "1;", "match": 0}
{"groundtruth": "\"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());", "prediction": " \"Nome: \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "\"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());", "first_line_prediction": " \"Nome: \" + conta.getTitular().getNome();", "match": 0}
{"groundtruth": "conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();", "prediction": " conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();", "first_line_prediction": " conta.getAgencia();", "match": 0}
{"groundtruth": "+ conta.imprimeCPF(conta.getCpf());", "prediction": " + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "+ conta.imprimeCPF(conta.getCpf());", "first_line_prediction": " + conta.getCpf();", "match": 0}
{"groundtruth": "+ conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();", "prediction": " + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "+ conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();", "first_line_prediction": " + conta.getAgencia();", "match": 0}
{"groundtruth": "Extrato listaMovimentacao : conta.getlistaDeMovimentacoes()) {", "prediction": "int i = 0; i < 10; i++) {\n\t\t\t\tlinha = \"Dia: \" + i + \" | Valor: R$\" + conta.getSaldo(i);\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\t\t\tbw.append(\"\\n\");", "first_line_groundtruth": "Extrato listaMovimentacao : conta.getlistaDeMovimentacoes()) {", "first_line_prediction": "int i = 0; i < 10; i++) {", "match": 0}
{"groundtruth": "linha = \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());", "prediction": "\n\t\t\tlinha = \"Valor total de dep\u00f3sitos = R$\" + String.format(\"%.2f\", ((ContaCorrente) conta).getTotalDepositos());\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "linha = \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());", "first_line_prediction": "", "match": 0}
{"groundtruth": ") + \"_\" + conta.getTitular().getTipoDeUsuario();", "prediction": "conta.getTitular().getTipoDeUsuario());\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();", "first_line_groundtruth": ") + \"_\" + conta.getTitular().getTipoDeUsuario();", "first_line_prediction": "conta.getTitular().getTipoDeUsuario());", "match": 0}
{"groundtruth": "= \"Agencia: \" + conta.getAgencia();", "prediction": " = \"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "= \"Agencia: \" + conta.getAgencia();", "first_line_prediction": " = \"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());", "match": 0}
{"groundtruth": "linha = \"Tipo: \" + conta.getTipoDeConta();", "prediction": "\n\t\t\tlinha = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "linha = \"Tipo: \" + conta.getTipoDeConta();", "first_line_prediction": "", "match": 0}
{"groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";", "prediction": "conta.getCpf()) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";", "first_line_groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";", "first_line_prediction": "conta.getCpf()) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";", "match": 0}
{"groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";", "prediction": "\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"\n\t\t\t\t\t+ \"rendimentDaPoupanca\";", "first_line_groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado", "first_line_prediction": "\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"", "match": 0}
{"groundtruth": "\"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));", "prediction": " \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "\"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));", "first_line_prediction": " \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());", "match": 0}
{"groundtruth": "= \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();", "prediction": " = \"CPF = \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "= \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();", "first_line_prediction": " = \"CPF = \" + conta.getCpf();", "match": 0}
{"groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();", "prediction": " \"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();", "first_line_prediction": " \"Ag\u00eancia: \" + conta.getAgencia();", "match": 0}
{"groundtruth": "= \"Total gasto em transa\u00e7\u00f5es = R$\" + conta.getTotalTarifas();", "prediction": " = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "= \"Total gasto em transa\u00e7\u00f5es = R$\" + conta.getTotalTarifas();", "first_line_prediction": " = \"Tipo: \" + conta.getTipoDeConta();", "match": 0}
{"groundtruth": "\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());", "prediction": "Locale.US, \"%.2f\", conta.getTotalGastoTributos());\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}", "first_line_groundtruth": "\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());", "first_line_prediction": "Locale.US, \"%.2f\", conta.getTotalGastoTributos());", "match": 0}
{"groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";", "prediction": "cliente) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"\n\t\t\t\t\t+ \"rendimentDaPoupanca\";", "first_line_groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado", "first_line_prediction": "cliente) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"", "match": 0}
{"groundtruth": "linha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();", "prediction": "\n\t\t\tlinha = \"Taxa para pagamento = \" + ContaCorrente.getTarifaPagamento();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "linha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();", "first_line_prediction": "", "match": 0}
{"groundtruth": "= \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();", "prediction": " = \"Total gasto em tributos = R$\" + String.format(\"%.2f\", conta.getTotalTarifas());\n\t\t\tbw.append(linha + \"\\n\\n\");", "first_line_groundtruth": "= \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();", "first_line_prediction": " = \"Total gasto em tributos = R$\" + String.format(\"%.2f\", conta.getTotalTarifas());", "match": 0}
{"groundtruth": "= \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();", "prediction": " = \"Taxa para transfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "= \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();", "first_line_prediction": " = \"Taxa para transfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();", "match": 0}
{"groundtruth": "\"Total de saques realizados = \" + conta.getTotalSaques();", "prediction": " \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "\"Total de saques realizados = \" + conta.getTotalSaques();", "first_line_prediction": " \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();", "match": 0}
{"groundtruth": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));", "prediction": " main = performGetRequest(\"https://check-host.net/check-ping?id=\" + id);\n        if(!main.has(\"nodes\")) throw new IOException(\"Invalid response!\");\n        JsonObject nodes = main.get(\"nodes\").getAsJsonObject();\n        Map<CHServer, PingResult> results = new HashMap<>();\n        for(Entry<String, JsonElement> entry : nodes.entrySet()) {\n            JsonArray list = entry.getValue().getAsJsonArray();\n            if(list.size() != servers.size()) throw new IOException(\"Invalid response!\");\n            for(int i = 0; i < list.size();", "first_line_groundtruth": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));", "first_line_prediction": " main = performGetRequest(\"https://check-host.net/check-ping?id=\" + id);", "match": 0}
{"groundtruth": "\"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();", "prediction": " \"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencias();\n\t\t\tbw.append(linha + \"\\n\\n\");", "first_line_groundtruth": "\"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();", "first_line_prediction": " \"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencias();", "match": 0}
{"groundtruth": "cookieStore.appendCookies(builder).build();", "prediction": " builder.header(\"Cookie\", cookieStore.toString())\n                .header(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\")\n                .header(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8", "first_line_groundtruth": "cookieStore.appendCookies(builder).build();", "first_line_prediction": " builder.header(\"Cookie\", cookieStore.toString())", "match": 0}
{"groundtruth": "cookieStore.mergeFromResponse(response);", "prediction": " cookieStore.mergeFromResponse(response);\n    }", "first_line_groundtruth": "cookieStore.mergeFromResponse(response);", "first_line_prediction": " cookieStore.mergeFromResponse(response);", "match": 0}
{"groundtruth": "new FXMLLoader(DownfallUtil.getInstance().getURLDownfallMainFXML());", "prediction": " new FXMLLoader(DownfallMain.class.getResource(\"/fxml/main/main.fxml\"));\n        Scene scene = new Scene(loader.load());\n        stage.setScene(scene);\n        stage.show();\n\n        DungeonMasterController controller = loader.getController();\n        controller.setStage(stage);\n    }", "first_line_groundtruth": "new FXMLLoader(DownfallUtil.getInstance().getURLDownfallMainFXML());", "first_line_prediction": " new FXMLLoader(DownfallMain.class.getResource(\"/fxml/main/main.fxml\"));", "match": 0}
{"groundtruth": "selectedProperty()  .unbindBidirectional(tag.isFactionalProperty());", "prediction": "selectedProperty() .unbindBidirectional(tag.isFactionalProperty());\n    }\n\n    /**\n     * Binds the properties of a given tag to all TextFields and CheckBoxes.\n     * @param tag Tag to be displayed.\n     */\n    private void displayTag(Tag tag) {\n        tagTextField.setText(tag.getTag());\n        isFactionalCheckBox.setSelected(tag.isFactional());\n    }\n\n    /**\n     * Creates a new tag and adds it to the list of tags.\n     */\n    private void createTag() {\n        Tag newTag = new Tag(tags.size()+1, tagTextField.", "first_line_groundtruth": "selectedProperty()  .unbindBidirectional(tag.isFactionalProperty());", "first_line_prediction": "selectedProperty() .unbindBidirectional(tag.isFactionalProperty());", "match": 0}
{"groundtruth": ", null, null, defConstructionCost, null, defConstructionTime, operatesImmediately, Configurator.getInstance().getDefBuildingGFXPathname());", "prediction": ", null, null, defConstructionCost, null, defConstructionTime, operatesImmediately);\n    }\n\n    /**\n     *\n     * @param id unique identifier used to differentiate different templates\n     * @param name a human-readable name of the template.\n     * @param inputMaterials a list of input materials that are used in production in this building per turn\n     * @param outputMaterials a list of output materials that are produced in this building per turn\n     * @param defConstructionCost construction cost per turn of construction\n     * @param constructionMaterials a list of materials that are used in construction of this building\n     * @param", "first_line_groundtruth": ", null, null, defConstructionCost, null, defConstructionTime, operatesImmediately, Configurator.getInstance().getDefBuildingGFXPathname());", "first_line_prediction": ", null, null, defConstructionCost, null, defConstructionTime, operatesImmediately);", "match": 0}
{"groundtruth": ").setUserRealm(savegame.getUserRealm());", "prediction": "savegame.getRules()).loadFrom(savegame);\n        } catch (JAXBException | IllegalArgumentException | IOException e) {\n            e.printStackTrace();\n            Logger.getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.WARNING,\"Couldn't load savegame from path: \"+pathname);\n        }\n    }\n\n    /**\n     * Saves the current savegame to the last pathname used.\n     */\n    @Override\n    public void saveToLast() {\n        saveTo(Configurator.getInstance().getLastSavegamePathname());\n    }\n\n    /**\n     * Saves the current savegame to a given pathname.\n     * @param", "first_line_groundtruth": ").setUserRealm(savegame.getUserRealm());", "first_line_prediction": "savegame.getRules()).loadFrom(savegame);", "match": 0}
{"groundtruth": ").loadAndApplyRules(savegame.getPathToRules());", "prediction": "savegame.getUserRealm()).setLastSavegamePathname(new PathRelativisor(pathname).relativize());\n            Configurator.getInstance(savegame.getUserRealm()).setLastSavegameDate(savegame.getDate());\n            Configurator.getInstance(savegame.getUserRealm()).setLastSavegameVersion(savegame.getVersion());\n            Configurator.getInstance(savegame.getUserRealm()).setLastSavegameDescription(savegame.getDescription());\n            Configurator.getInstance(savegame.getUserRealm()).setLastSavegameAuthor(savegame.getAuthor());\n            Configurator.getInstance(savegame.getUserRealm()).setLastSave", "first_line_groundtruth": ").loadAndApplyRules(savegame.getPathToRules());", "first_line_prediction": "savegame.getUserRealm()).setLastSavegamePathname(new PathRelativisor(pathname).relativize());", "match": 0}
{"groundtruth": "this.pathToGFXProperty.setValue(Configurator.getInstance().getDefBuildingGFXPathname());", "prediction": " this.GFX = null;\n    }\n\n    /**\n     *\n     * @return the path to the GFX file for this building\n     */\n    @XmlElement(name=\"path-to-gfx\")\n    public String getPathToGFX() {\n        return pathToGFXProperty.get();\n    }\n\n    /**\n     *\n     * @param pathToGFX the path to the GFX file for this building\n     */\n    public void setPathToGFX(String pathToGFX) {\n        this.pathToGFXProperty.setValue(pathToGFX);\n    }\n\n    /**\n     *\n     * @return the GFX Image for this building\n    ", "first_line_groundtruth": "this.pathToGFXProperty.setValue(Configurator.getInstance().getDefBuildingGFXPathname());", "first_line_prediction": " this.GFX = null;", "match": 0}
{"groundtruth": "configurator.loadAndApplyRules();", "prediction": "\n\n        FXMLLoader loader = new FXMLLoader(DownfallMain.class.getResource(\"/fxml/main/DownfallMain.fxml\"));\n        loader.setController(new DowntownMainController(configurator));\n        Scene scene = new Scene(loader.load());\n        stage.setScene(scene);\n        stage.initStyle(StageStyle.UNDECORATED);\n        stage.show();\n    }", "first_line_groundtruth": "configurator.loadAndApplyRules();", "first_line_prediction": "", "match": 0}
{"groundtruth": "configurator.saveRules();", "prediction": " configurator.saveConfiguration();\n             configurator.saveAndApplyRules();\n        });\n\n        FXMLLoader loader = new FXMLLoader(DownfallMain.class.getResource(\"/fxml/main/main.fxml\"));\n        loader.setController(new DowntownMainController());\n        Scene scene = new Scene(loader.load());\n        stage.setScene(scene);\n        stage.show();\n    }", "first_line_groundtruth": "configurator.saveRules();", "first_line_prediction": " configurator.saveConfiguration();", "match": 0}
{"groundtruth": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.SEVERE, \"No Template found for id = \"+material.getTemplateId());", "prediction": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.WARNING, \"No ID found for template with id = \"+material.getTemplateId());\n        }\n        return list.size() > 0 ? list.get(0) : null;\n    }", "first_line_groundtruth": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.SEVERE, \"No Template found for id = \"+material.getTemplateId());", "first_line_prediction": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.WARNING, \"No ID found for template with id = \"+material.getTemplateId());", "match": 0}
{"groundtruth": "= Configurator.getInstance();", "prediction": " = Configurator.getInstance();\n        configurator.load();\n        configurator.getRules().setMaterialTemplates(DownfallUtil.getMaterialTemplates());\n        configurator.getRules().setConversionMaterialTemplates(DownfallUtil.getConversionMaterialTemplates());\n        configurator.getRules().setConversionMaterialTemplates(DownfallUtil.getConversionMaterialTemplates());\n        configurator.getRules().setConversionMaterialTemplates(DownfallUtil.getConversionMaterialTemplates());\n        configurator.getRules().setConversionMaterialTemplates(DownfallUtil.getConversionMaterialTemplates());\n        configurator.getRules().setConversionMaterialTemplates(Downfall", "first_line_groundtruth": "= Configurator.getInstance();", "first_line_prediction": " = Configurator.getInstance();", "match": 0}
{"groundtruth": ", defImportPrice, isExportable, isEphemeral, Configurator.getInstance().getDefMaterialGFXPathname());", "prediction": ", defImportPrice, isExportable, isEphemeral, MaterialGFXPathname);\n    }\n\n    /**\n     * Initializes pathToGFX to the default MaterialGFXPathname defined in the current configuration.\n     * @param name Human-readable name of the materials to be generated with this template\n     * @param id Unique identifier used to differentiate different material templates\n     * @param defExportPrice Default export price\n     * @param defImportPrice Default import price\n     * @param isExportable Value that determines if the material will be exportable from the realm\n     * @param isEphemeral Value that determines if the material can be", "first_line_groundtruth": ", defImportPrice, isExportable, isEphemeral, Configurator.getInstance().getDefMaterialGFXPathname());", "first_line_prediction": ", defImportPrice, isExportable, isEphemeral, MaterialGFXPathname);", "match": 0}
{"groundtruth": "DownfallUtil.getInstance().loadImage(item));", "prediction": "DownfallUtil.getImage(item));\n                        super.updateItem(item, empty);\n                    } else {\n                        super.updateItem(item, empty);\n                    }\n                }\n            };\n            return cell;\n        });\n    }", "first_line_groundtruth": "DownfallUtil.getInstance().loadImage(item));", "first_line_prediction": "DownfallUtil.getImage(item));", "match": 0}
{"groundtruth": "()  .bindBidirectional(tag.isFactionalProperty());", "prediction": "()  .bindBidirectional(tag.isFactionalProperty());\n    }", "first_line_groundtruth": "()  .bindBidirectional(tag.isFactionalProperty());", "first_line_prediction": "()  .bindBidirectional(tag.isFactionalProperty());", "match": 1}
{"groundtruth": ".unbindBidirectional(tag.tagProperty());", "prediction": " .unbindBidirectional(tag.tagProperty());\n        isFactionalCheckBox.selectedProperty() .unbindBidirectional(tag.isFactionalProperty());\n    }\n\n    /**\n     * Binds the properties of a given tag to all TextFields and CheckBoxes.\n     * @param tag Tag to be displayed.\n     */\n    private void displayTag(Tag tag) {\n        tagTextField.textProperty()              .bindBidirectional(tag.tagProperty());\n        isFactionalCheckBox.selectedProperty() .bindBidirectional(tag.isFactionalProperty());\n    }\n\n    /**\n     * Lightweight mutator method.\n     *", "first_line_groundtruth": ".unbindBidirectional(tag.tagProperty());", "first_line_prediction": " .unbindBidirectional(tag.tagProperty());", "match": 0}
{"groundtruth": "(relativisor.relativize());", "prediction": "(relativisor.relativize(DownfallUtil.getInstance().getInstallationDirectory()));\n                }\n        });\n    }", "first_line_groundtruth": "(relativisor.relativize());", "first_line_prediction": "(relativisor.relativize(DownfallUtil.getInstance().getInstallationDirectory()));", "match": 0}
{"groundtruth": "tag.setTag(\"New Tag\");", "prediction": " tag.setName(\"New Tag\");\n         tag.setFactional(false);\n         return tag;\n    }", "first_line_groundtruth": "tag.setTag(\"New Tag\");", "first_line_prediction": " tag.setName(\"New Tag\");", "match": 0}
{"groundtruth": "Configurator.getInstance().getUserRealm();", "prediction": " Configurator.getUserRealm();\n        realmNameLabel.setText(userRealm.getName());\n        realmImageView.setImage(new Image(userRealm.getRealmPathToGFX()));\n        dynastyImageView.setImage(new Image(userRealm.getRulerPathToGFX()));\n        realmPane.setPrefHeight(IMAGE_PANE_HEIGHT + IMAGE_PANE_GAP);\n        dynastyPane.setPrefHeight(IMAGE_PANE_HEIGHT + IMAGE_PANE_GAP);\n\n        //update labels\n        legitimacyLabel.setText(String.valueOf(userRealm.getLegitimacy()));\n        infamy", "first_line_groundtruth": "Configurator.getInstance().getUserRealm();", "first_line_prediction": " Configurator.getUserRealm();", "match": 0}
{"groundtruth": ".setText(userRealm.getDiplomaticReputation().toString());", "prediction": " .setText(String.valueOf(userRealm.getDiplomaticReputation()));\n        legitimacyLabel          .setText(String.valueOf(userRealm.getLegitimacy()));\n        prestigeLabel            .setText(String.valueOf(userRealm.getPrestige()));\n        powerProjectionLabel     .setText(String.valueOf(userRealm.getPowerProjection()));\n        stabilityLabel           .setText(String.valueOf(userRealm.getStability()));\n        stabilityPerMonthLabel   .setText(String.valueOf(userRealm.getStabilityPerMonth()));\n        nuicpLabel               .setText(", "first_line_groundtruth": ".setText(userRealm.getDiplomaticReputation().toString());", "first_line_prediction": " .setText(String.valueOf(userRealm.getDiplomaticReputation()));", "match": 0}
{"groundtruth": "tag.setId(1);", "prediction": " tag.setId(1);\n        tag.setName(\"New Tag\");\n        return tag;\n    }", "first_line_groundtruth": "tag.setId(1);", "first_line_prediction": " tag.setId(1);", "match": 0}
{"groundtruth": "(s -> s.gameVersion().equals(gameVersion)).toList();", "prediction": "(s -> s.gameVersion().equals(gameVersion)).toList();\n    }\n\n    public List<BCServerInfo> withPlayerCount(final int playerCount) {\n        return this.servers().stream().filter(s -> s.playerCount() == playerCount).toList();\n    }\n\n    public List<BCServerInfo> withPlayerCountBetween(final int min, final int max) {\n        return this.servers().stream().filter(s -> s.playerCount() >= min && s.playerCount() <= max).toList();\n    }\n\n    public List<BCServerInfo> withPlayerCountGreaterThan(final", "first_line_groundtruth": "(s -> s.gameVersion().equals(gameVersion)).toList();", "first_line_prediction": "(s -> s.gameVersion().equals(gameVersion)).toList();", "match": 1}
{"groundtruth": ".setValue(template.getId());", "prediction": ".setValue(template.getId());\n        amountProperty.setValue(amount);\n    }\n\n    /**\n     * @return the idProperty\n     */\n    @XmlElement\n    public IntegerProperty idProperty() {\n        return idProperty;\n    }\n\n    /**\n     * @return the amountProperty\n     */\n    @XmlElement\n    public IntegerProperty amountProperty() {\n        return amountProperty;\n    }\n\n    /**\n     * @return the template\n     */\n    @XmlElement\n    public VisualMaterialTemplate getTemplate() {\n        return Configurator.getInstance().findMaterialTemplate(idProperty.getValue());\n    }\n\n    /**\n     * @return the amount\n     */\n    @XmlElement\n   ", "first_line_groundtruth": ".setValue(template.getId());", "first_line_prediction": ".setValue(template.getId());", "match": 1}
{"groundtruth": "BCVersion.fromString(versionIdentifier);", "prediction": " BCVersion.fromIdentifier(versionIdentifier);\n\n            if (version == null) {\n                continue;\n            }\n\n            final String name = urlParts[1];\n            final int playerCount = Integer.parseInt(urlParts[2]);\n            final int playerLimit = Integer.parseInt(urlParts[2]);\n\n            servers.add(new BCServerInfo(name, playerCount, playerLimit, host, port, version, joinUrl, versionIdentifier));\n        }\n\n        return new BCServerList(servers);\n    }\n\n    public List<BCServerInfo> getServers() {\n        return Collections.unmodifiableList(servers);\n    }", "first_line_groundtruth": "BCVersion.fromString(versionIdentifier);", "first_line_prediction": " BCVersion.fromIdentifier(versionIdentifier);", "match": 0}
{"groundtruth": "joinServerInterface.sendAuthRequest(sha1(server.getBytes()));", "prediction": " final URL url = new URL(GET_MP_PASS.toString());\n             final InputStream inputStream = url.openStream();\n             final Scanner scanner = new Scanner(inputStream);\n             final StringBuilder stringBuilder = new StringBuilder();\n             while (scanner.hasNextLine()) {\n                 stringBuilder.append(scanner.nextLine());\n             }\n             scanner.close();", "first_line_groundtruth": "joinServerInterface.sendAuthRequest(sha1(server.getBytes()));", "first_line_prediction": " final URL url = new URL(GET_MP_PASS.toString());", "match": 0}
{"groundtruth": "configurator.loadConfiguration();", "prediction": "", "first_line_groundtruth": "configurator.loadConfiguration();", "first_line_prediction": "", "match": 0}
{"groundtruth": "= FXCollections.observableList(Configurator.getInstance().getRules().getActorTags());", "prediction": " = FXCollections.observableArrayList(Configurator.getInstance().getRules().getTags());\n\n        //Configuring editor\n        tagTableEditor.setItems(tags);\n        tagTableEditor.setFetcher(new SimpleTagFetcher());\n        tagTableEditor.getTableView().getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {\n            if(oldValue != null)\n                unbindTag(oldValue);\n            displayTag(newValue);\n        });\n    }\n\n    /**\n     * Opens the editor for the given object.\n     * @param object The object to open the editor for.\n     */\n    public void openEditor(Object", "first_line_groundtruth": "= FXCollections.observableList(Configurator.getInstance().getRules().getActorTags());", "first_line_prediction": " = FXCollections.observableArrayList(Configurator.getInstance().getRules().getTags());", "match": 0}
{"groundtruth": "legitimacyLabel         .setText(userRealm.getLegitimacy().toString());", "prediction": "\n\n        //update ImageViews\n        realmImageView.setImage(new Image(userRealm.getRealmPathToGFX()));\n        dynastyImageView.setImage(new Image(userRealm.getRealmPathToGFX()));\n\n        //update stability\n        stabilityCirclePane.setPrefSize(IMAGE_PANE_HEIGHT, IMAGE_PANE_HEIGHT);\n        stabilityCirclePane.setMinSize(IMAGE_PANE_HEIGHT, IMAGE_PANE_HEIGHT);\n        stabilityCirclePane.setMaxSize(IMAGE_PANE_HEIGHT, IMAGE_PANE_HEIGHT);\n        stabilityCirclePane.setPrefSize(IMAGE_PANE_", "first_line_groundtruth": "legitimacyLabel         .setText(userRealm.getLegitimacy().toString());", "first_line_prediction": "", "match": 0}
{"groundtruth": ".pathToGFXProperty.setValue(Configurator.getInstance().getDefMaterialGFXPathname());", "prediction": ".GFX = DownfallUtil.getInstance().loadImage(pathToGFX);\n        this.gfxInitialized = true;\n    }\n\n    /**\n     * Lightweight Accessor Method\n     * @return String pathname to an image file that represents this material.\n     */\n    @XmlElement(name=\"path-to-gfx\")\n    public String getPathToGFX() {\n        return pathToGFXProperty.get();\n    }\n\n    /**\n     * Lightweight Accessor Method\n     * @return new Image that has been updated.\n     */\n    public Image updateGFX() {\n        //TODO: contemplate removing GFX from here or doing something better with", "first_line_groundtruth": ".pathToGFXProperty.setValue(Configurator.getInstance().getDefMaterialGFXPathname());", "first_line_prediction": ".GFX = DownfallUtil.getInstance().loadImage(pathToGFX);", "match": 0}
{"groundtruth": "setLegitimacy(realm.getLegitimacy());", "prediction": "setRulerPathToGFX(realm.getRulerPathToGFX());\n        userRealm.setRulerPathToRules(realm.getRulerPathToRules());\n        userRealm.setRulerPathToSave(realm.getRulerPathToSave());\n        userRealm.setRulerPathToSavegame(realm.getRulerPathToSavegame());\n        userRealm.setRulerPathToSavegameBackup(realm.getRulerPathToSavegameBackup());\n        userRealm.setRulerPathToSavegameBackupBackup(realm.getRulerPathToSavegameBackupBackup());\n        userRealm.setR", "first_line_groundtruth": "setLegitimacy(realm.getLegitimacy());", "first_line_prediction": "setRulerPathToGFX(realm.getRulerPathToGFX());", "match": 0}
{"groundtruth": "prompter.findCommand(commandText, commands);", "prediction": " commands.get().stream().filter(c -> c.getName().equals(commandText)).findFirst().orElse(null);", "first_line_groundtruth": "prompter.findCommand(commandText, commands);", "first_line_prediction": " commands.get().stream().filter(c -> c.getName().equals(commandText)).findFirst().orElse(null);", "match": 0}
{"groundtruth": ", prompter.getSystemPrompt(commands));", "prediction": " + \" \" + userInput);\n\t\tmessages.add(systemMessage);\n\t\treturn messages;", "first_line_groundtruth": ", prompter.getSystemPrompt(commands));", "first_line_prediction": " + \" \" + userInput);", "match": 0}
{"groundtruth": "userRealm.setPowerProjection(realm.getPowerProjection());", "prediction": " userRealm.setRulerPathToGFX(realm.getRulerPathToGFX());\n        userRealm.setRulerPathToRules(realm.getRulerPathToRules());\n        userRealm.setRulerPathToSavegame(realm.getRulerPathToSavegame());\n        userRealm.setRulerPathToSavegameBackup(realm.getRulerPathToSavegameBackup());\n        userRealm.setRulerPathToSavegameBackupBackup(realm.getRulerPathToSavegameBackupBackup());\n        userRealm.setRulerPathToSavegameBackupBackupBackup(realm.getRulerPathToSave", "first_line_groundtruth": "userRealm.setPowerProjection(realm.getPowerProjection());", "first_line_prediction": " userRealm.setRulerPathToGFX(realm.getRulerPathToGFX());", "match": 0}
{"groundtruth": "return DEFAULT_SYSTEM_PROMPT.replaceAll(PREFIX_TEMPLATE, delimiter.getPrefix())//\n\t\t\t\t.replaceAll(POSTFIX_TEMPLATE, delimiter.getPostfix());", "prediction": "\treturn DEFAULT_SYSTEM_PROMPT.replace(PREFIX_TEMPLATE, delimiter.getPrefix()) //\n\t\t\t\t\t.replace(POSTFIX_TEMPLATE, delimiter.getPostfix()) //\n\t\t\t\t\t.replace(COMMAND_LIST_TEMPLATE, getCommandListTemplate(delimiter));", "first_line_groundtruth": "return DEFAULT_SYSTEM_PROMPT.replaceAll(PREFIX_TEMPLATE, delimiter.getPrefix())//", "first_line_prediction": "\treturn DEFAULT_SYSTEM_PROMPT.replace(PREFIX_TEMPLATE, delimiter.getPrefix()) //", "match": 0}
{"groundtruth": "loadAndApplyRules(configuration.getLastRulesPathname());", "prediction": " try {\n             rules = loadRules(configuration.getLastLoadedRulesPathname());\n         } catch (IOException e) {\n             Logger.getLogger(Configurator.class.getName()).log(Level.SEVERE, \"Failed to load rules\", e);\n         }\n         rules.applyRules(userRealm);\n    }\n\n    /**\n     * Loads the configuration from the default path.\n     * @return the loaded configuration\n     */\n    public Configuration loadConfiguration() {\n        try {\n            configuration = loadConfiguration(CONFIG_PATH);\n        } catch (IOException e) {\n            Logger.getLogger(Configurator.class.getName()).log(Level.SEVERE,", "first_line_groundtruth": "loadAndApplyRules(configuration.getLastRulesPathname());", "first_line_prediction": " try {", "match": 0}
{"groundtruth": ".setRulerPathToGFX(realm.getRulerPathToGFX());", "prediction": ".setRealmPathToRules(realm.getRealmPathToRules());\n        userRealm.setRealmPathToRules(realm.getRealmPathToRules());\n        userRealm.setRealmPathToRules(realm.getRealmPathToRules());\n        userRealm.setRealmPathToRules(realm.getRealmPathToRules());\n        userRealm.setRealmPathToRules(realm.getRealmPathToRules());\n        userRealm.setRealmPathToRules(realm.getRealmPathToRules());\n        userRealm.setRealmPathToRules(realm.getRealmPathToRules());\n        userRealm.set", "first_line_groundtruth": ".setRulerPathToGFX(realm.getRulerPathToGFX());", "first_line_prediction": ".setRealmPathToRules(realm.getRealmPathToRules());", "match": 0}
{"groundtruth": "return commandWrapper.unwrapCommand(commandString);", "prediction": "\tString unwrappedCommandString = commandString.replace(commandWrapper.getPrefix(), \"\").replace(commandWrapper.getPostfix(), \"\");\n\t\t\treturn unwrappedCommandString;", "first_line_groundtruth": "return commandWrapper.unwrapCommand(commandString);", "first_line_prediction": "\tString unwrappedCommandString = commandString.replace(commandWrapper.getPrefix(), \"\").replace(commandWrapper.getPostfix(), \"\");", "match": 0}
{"groundtruth": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(),    new NumberStringConverter());", "prediction": ".textProperty()         .bindBidirectional(realm.diplomaticReputationProperty(), new NumberStringConverter());\n        legitimacyTextField.textProperty()       .bindBidirectional(realm.legitimacyProperty(),            new NumberStringConverter());\n        powerProjectionTextField.textProperty().bindBidirectional(realm.powerProjectionProperty(),      new NumberStringConverter());\n        prestigeTextField.textProperty()         .bindBidirectional(realm.prestigeProperty(),              new NumberStringConverter());\n        stabilityTextField.textProperty()         .bindBidirectional(realm.stabilityProperty(),            new NumberStringConverter", "first_line_groundtruth": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(),    new NumberStringConverter());", "first_line_prediction": ".textProperty()         .bindBidirectional(realm.diplomaticReputationProperty(), new NumberStringConverter());", "match": 0}
{"groundtruth": "textProperty()        .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());", "prediction": "textProperty()         .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());\n        stabilityTextField.textProperty()         .bindBidirectional(realm.stabilityProperty(),                new NumberStringConverter());\n        infamyTextField.textProperty()           .bindBidirectional(realm.infamyProperty(),                  new NumberStringConverter());\n        rulerGFXTextField.textProperty()         .bindBidirectional(realm.rulerGraphicProperty(),            new NumberStringConverter());\n        realmGFXTextField.textProperty()         .bindBidirectional(realm.graphicProperty(),                 new NumberStringConverter());\n\n        //bind", "first_line_groundtruth": "textProperty()        .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());", "first_line_prediction": "textProperty()         .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());", "match": 0}
{"groundtruth": "BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {", "prediction": " BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {\n             if (throwable != null) {\n                 throwableConsumer.accept(throwable);\n                 return;\n             }\n             complete.accept(bcServerList);\n         });\n    }", "first_line_groundtruth": "BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {", "first_line_prediction": " BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {", "match": 0}
{"groundtruth": "authenticationData = new CCAuthenticationData(account.username(), account.password(), previousResponse.token, loginCode);", "prediction": " data = new CCAuthenticationData(loginCode);\n            final HttpRequest request = WebRequests.buildWithCookies(account.cookieStore, HttpRequest.newBuilder().POST(HttpRequest.BodyPublishers.ofString(data.toJson())).uri(AUTHENTICATION_URI));\n            final HttpResponse<String> response = WebRequests.HTTP_CLIENT.sendAsync(request, HttpResponse.BodyHandlers.ofString()).join();\n            WebRequests.updateCookies(account.cookieStore, response);\n            final String responseBody = response.body();\n            return CCAuthenticationResponse.fromJson(responseBody);\n        });\n    }", "first_line_groundtruth": "authenticationData = new CCAuthenticationData(account.username(), account.password(), previousResponse.token, loginCode);", "first_line_prediction": " data = new CCAuthenticationData(loginCode);", "match": 0}
{"groundtruth": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());", "prediction": "textProperty()        .bindBidirectional(materialTemplate.pathToGFXProperty());\n        exportPriceTextField.textProperty()      .bindBidirectional(materialTemplate.defExportPriceProperty());\n        importPriceTextField.textProperty()      .bindBidirectional(materialTemplate.defImportPriceProperty());\n    }\n\n    /**\n     * Validates the material template to ensure that the user has not entered invalid data.\n     * @param template template to be validated.\n     * @return true if the material template is valid, false otherwise.\n     */\n    private boolean validateMaterial(VisualMaterialTemplate template) {\n        return template.nameProperty", "first_line_groundtruth": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());", "first_line_prediction": "textProperty()        .bindBidirectional(materialTemplate.pathToGFXProperty());", "match": 0}
{"groundtruth": "<>(\"login_code\", authenticationData.loginCode())\n            );", "prediction": "<>(\"loginCode\", authenticationData.loginCode())\n            );\n\n            final HttpRequest request = WebRequests.createRequest(\n                    \"https://auth.classicube.net/auth/login\",\n                    \"POST\",\n                    requestBody\n            );\n\n            final HttpResponse<String> response = ClassiCubeHandler.sendRequest(request);\n\n            return CCAuthenticationResponse.fromJson(response.body());\n        });\n    }", "first_line_groundtruth": "<>(\"login_code\", authenticationData.loginCode())", "first_line_prediction": "<>(\"loginCode\", authenticationData.loginCode())", "match": 0}
{"groundtruth": ", account.password(), previousResponse.token, loginCode);", "prediction": " + \":\" + account.password());\n            final HttpRequest request = WebRequests.buildWithCookies(account.cookieStore, HttpRequest.newBuilder().POST(HttpRequest.BodyPublishers.ofString(authenticationData.toJson())).uri(AUTHENTICATION_URI));\n            final HttpResponse<String> response = WebRequests.HTTP_CLIENT.sendAsync(request, HttpResponse.BodyHandlers.ofString()).join();\n            WebRequests.updateCookies(account.cookieStore, response);\n            final String responseBody = response.body();\n            final CCAuthenticationResponse authenticationResponse = CCAuthenticationResponse.fromJson(responseBody);\n            if (authenticationResponse.", "first_line_groundtruth": ", account.password(), previousResponse.token, loginCode);", "first_line_prediction": " + \":\" + account.password());", "match": 0}
{"groundtruth": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());", "prediction": ".textProperty()         .bindBidirectional(realm.rulerPathToGFXProperty());\n\n        //bind table editors\n        stockpileEditor.setItems(FXCollections.observableArrayList(realm.getStockpile()));\n        stockpileEditor.setEditable(true);\n        stockpileEditor.setColumnNames(STOCKPILE_NAME_COLUMN_NAME, STOCKPILE_AMOUNT_COLUMN_NAME);\n        stockpileEditor.setColumnWidths(100, 100);\n        stockpileEditor.setColumnWidths(100, 100);\n       ", "first_line_groundtruth": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());", "first_line_prediction": ".textProperty()         .bindBidirectional(realm.rulerPathToGFXProperty());", "match": 0}
{"groundtruth": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());", "prediction": ".textProperty()         .bindBidirectional(realm.pathToGFXProperty());\n        rulerGFXTextField.textProperty()         .bindBidirectional(realm.pathToRulerGFXProperty());\n\n        //bind table editors\n        stockpileEditor.setItems(FXCollections.observableArrayList(realm.getStockpile()));\n        stockpileEditor.setEditable(true);\n        stockpileEditor.setColumnNames(STOCKPILE_NAME_COLUMN_NAME, STOCKPILE_AMOUNT_COLUMN_NAME);\n        stockpileEditor.setColumnWidths(100, 10", "first_line_groundtruth": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());", "first_line_prediction": ".textProperty()         .bindBidirectional(realm.pathToGFXProperty());", "match": 0}
{"groundtruth": "StatusBarHelper.setStatusBarLightMode(this);", "prediction": " break;\n            case R.id.btn_2:\n                StatusBarHelper.setStatusBarLightMode(this);\n                break;\n            case R.id.btn_3:\n                StatusBarHelper.setStatusBarDarkMode(this);\n                break;\n            case R.id.btn_4:\n                StatusBarHelper.setStatusBarLightMode(this);\n                break;\n            case R.id.btn_5:\n                StatusBarHelper.setStatusBarDarkMode(this);\n                break;\n            case R.id.btn_6:\n                StatusBarHelper.setStatusBarLightMode(this);\n                break;\n           ", "first_line_groundtruth": "StatusBarHelper.setStatusBarLightMode(this);", "first_line_prediction": " break;", "match": 0}
{"groundtruth": "product0 = productRepository.findById(id);", "prediction": " productModel = productRepository.findById(id);\n        if (productModel.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"produto nao encontrado\");\n        }\n        return ResponseEntity.status(HttpStatus.OK).body(productModel.get());\n    }", "first_line_groundtruth": "product0 = productRepository.findById(id);", "first_line_prediction": " productModel = productRepository.findById(id);", "match": 0}
{"groundtruth": "StatusBarHelper.translucent(this);", "prediction": " titleBar2.setBackgroundColor(Color.RED);\n                break;\n            case R.id.btn_2:\n                titleBar2.setBackgroundColor(Color.GREEN);\n                break;\n            case R.id.btn_3:\n                titleBar2.setBackgroundColor(Color.BLUE);\n                break;\n            case R.id.btn_4:\n                titleBar2.setBackgroundColor(Color.YELLOW);\n                break;\n            case R.id.btn_5:\n                titleBar2.setBackgroundColor(Color.CYAN);\n                break;\n            case R.id.btn_6:\n                titleBar", "first_line_groundtruth": "StatusBarHelper.translucent(this);", "first_line_prediction": " titleBar2.setBackgroundColor(Color.RED);", "match": 0}
{"groundtruth": "user0 = userRepository.findByIdentifier(identifier);", "prediction": " user0 = userRepository.findByIdentifier(identifier);\n        if (user0 == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"usuario nao encontrado.\");\n        }\n        return ResponseEntity.status(HttpStatus.OK).body(user0);\n    }", "first_line_groundtruth": "user0 = userRepository.findByIdentifier(identifier);", "first_line_prediction": " user0 = userRepository.findByIdentifier(identifier);", "match": 0}
{"groundtruth": "d(\"TitleBar\",\"onCreate-getStatusbarHeight\"+StatusBarHelper.getStatusbarHeight(this));", "prediction": "d(\"MainActivity\", \"onCreate: \");\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        Log.d(\"MainActivity\", \"onResume: \");\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        Log.d(\"MainActivity\", \"onPause: \");\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        Log.d(\"MainActivity\", \"onDestroy: \");\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        Log.d(\"MainActivity\", \"onStop: \");", "first_line_groundtruth": "d(\"TitleBar\",\"onCreate-getStatusbarHeight\"+StatusBarHelper.getStatusbarHeight(this));", "first_line_prediction": "d(\"MainActivity\", \"onCreate: \");", "match": 0}
{"groundtruth": "== null || !Objects.equals(user0.getPassword(), senha)) {", "prediction": " == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Usuario nao encontrado.\");\n        }\n        if (!Objects.equals(senha, user0.getPassword())) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(\"Senha incorreta.\");\n        }\n        return ResponseEntity.status(HttpStatus.OK).body(user0);\n    }\n\n    /**\n     * Metodo/Rota responsavel por realizar o cadastro do usuario\n     * @param userRecordDto - DTO que contem os dados do usuario para realizar o cadastro\n     * @return - Retorna", "first_line_groundtruth": "== null || !Objects.equals(user0.getPassword(), senha)) {", "first_line_prediction": " == null) {", "match": 0}
{"groundtruth": "user0 = userRepository.findByEmail(email);", "prediction": " userModel = userRepository.findByEmail(email);\n        if(userModel == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Usuario nao encontrado.\");\n        }\n        if(!Objects.equals(senha, userModel.getPassword())) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(\"Senha incorreta.\");\n        }\n        return ResponseEntity.status(HttpStatus.OK).body(userModel);\n    }\n\n    /**\n     * Metodo/Rota responsavel por realizar o cadastro do usuario\n     * @param userRecordDto - DTO que contem", "first_line_groundtruth": "user0 = userRepository.findByEmail(email);", "first_line_prediction": " userModel = userRepository.findByEmail(email);", "match": 0}
{"groundtruth": ".OK).body(userRepository.findByIdentifier(identifier));", "prediction": ".OK).body(user0);\n    }", "first_line_groundtruth": ".OK).body(userRepository.findByIdentifier(identifier));", "first_line_prediction": ".OK).body(user0);", "match": 0}
{"groundtruth": "(plugin.getParticleManager(), lobbyParticles, player);", "prediction": "(this, lobbyParticles, player);\n        playParticleRunnableHashMap.put(player.getUniqueId(), playParticleRunnable);\n        plugin.getServer().getScheduler().runTaskAsynchronously(plugin, playParticleRunnable);\n    }\n\n    /**\n     * Remove a particle from the player.\n     * @param player Player\n     */\n    public void removeParticleFromPlayer(Player player) {\n        playerLobbyParticles.remove(player.getUniqueId());\n\n        if (playParticleRunnableHashMap.containsKey(player.getUniqueId())) {\n            playParticleRunnableHashMap.get(player.getUniqueId()).cancel();\n            playParticleRunnableHashMap.remove", "first_line_groundtruth": "(plugin.getParticleManager(), lobbyParticles, player);", "first_line_prediction": "(this, lobbyParticles, player);", "match": 0}
{"groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"code-numbers-only\")) {", "prediction": "length < 1) {\n            throw new IllegalArgumentException(\"Code length must be greater than 0\");\n        }\n        return generateString(length);\n    }\n\n    /**\n     * Sends a message to the player\n     * @param player The player to send the message to\n     * @param message The message to send\n     */\n    public static void sendMessage(@NotNull Player player, @NotNull String message) {\n        player.sendMessage(cc(message));\n    }\n\n    /**\n     * Sends a message to the player\n     * @param player The player to send the message to\n     * @param message The message to send\n     */\n    public static void", "first_line_groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"code-numbers-only\")) {", "first_line_prediction": "length < 1) {", "match": 0}
{"groundtruth": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");", "prediction": " }\n        });\n        return future;\n    }\n\n    /**\n     * Gets the discord ID of a player\n     * @param uuid The UUID of the player\n     * @return The discord ID of the player\n     */\n    public static @NotNull String getDiscordId(final @NotNull UUID uuid) {\n        return DiscordVerifier.getDiscordCodes().get(uuid).getKey();\n    }\n\n    /**\n     * Gets the UUID of a player\n     * @param discordId The discord ID of the player\n     * @return The UUID of the player\n     */\n    public static @NotNull UUID getUuid(final @NotNull String discordId) {\n        return", "first_line_groundtruth": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");", "first_line_prediction": " }", "match": 0}
{"groundtruth": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString())) {", "prediction": " future.complete(sb.toString());\n        });\n        return future;\n    }\n\n    /**\n     * Generates a random code\n     * @param length The length of the code\n     * @return A future containing the generated code\n     */\n    public static @NotNull CompletableFuture<String> generateCode(int length) {\n        return generateString(length);\n    }\n\n    /**\n     * Sends a message to a player\n     * @param player The player to send the message to\n     * @param message The message to send\n     */\n    public static void sendMessage(@NotNull Player player, @NotNull String message) {\n        player.sendMessage(cc(message", "first_line_groundtruth": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString())) {", "first_line_prediction": " future.complete(sb.toString());", "match": 0}
{"groundtruth": "Connection connection = DiscordVerifier.getDatabaseConnection();", "prediction": " Connection connection = DiscordVerifier.getInstance().getDatabase().getConnection();\n                 PreparedStatement statement = connection.prepareStatement(\"INSERT INTO discord_codes (uuid, discord_id) VALUES (?, ?)\");\n                 statement.setString(1, uuid.toString());\n                 statement.setString(2, discordId);\n                 statement.executeUpdate();\n                 statement.close();\n                 connection.close();\n                 future.complete(null);\n            } catch (SQLException e) {\n                future.completeExceptionally(e);\n            }\n        });\n        return future;\n    }\n\n    /**\n     * Gets the discord ID of a player\n     * @param uuid The UUID of the", "first_line_groundtruth": "Connection connection = DiscordVerifier.getDatabaseConnection();", "first_line_prediction": " Connection connection = DiscordVerifier.getInstance().getDatabase().getConnection();", "match": 0}
{"groundtruth": "lobbyParticles.getParticle(), playerLocation, lobbyParticles.getCount());", "prediction": "lobbyParticles.getParticle(), playerLocation, lobbyParticles.getAmount(), lobbyParticles.getOffsetX(), lobbyParticles.getOffsetY(), lobbyParticles.getOffsetZ(), lobbyParticles.getSpeed(), lobbyParticles.getParticleData());\n    }", "first_line_groundtruth": "lobbyParticles.getParticle(), playerLocation, lobbyParticles.getCount());", "first_line_prediction": "lobbyParticles.getParticle(), playerLocation, lobbyParticles.getAmount(), lobbyParticles.getOffsetX(), lobbyParticles.getOffsetY(), lobbyParticles.getOffsetZ(), lobbyParticles.getSpeed(), lobbyParticles.getParticleData());", "match": 0}
{"groundtruth": "sendMessage(CustomColor.translate(\"&7Invalid usage.. Try &e/gmp (player)&7.\"));", "prediction": "sendMessage(CustomColor.translate(\"&cUsage: /givemegaphone [player]\"));\n            return false;\n        }\n    }", "first_line_groundtruth": "sendMessage(CustomColor.translate(\"&7Invalid usage.. Try &e/gmp (player)&7.\"));", "first_line_prediction": "sendMessage(CustomColor.translate(\"&cUsage: /givemegaphone [player]\"));", "match": 0}
{"groundtruth": "UUID, Integer> idsProducts = cartModel.getIdsProducts();", "prediction": "UUID, Integer> products = cartRecordDto.getIdsProducts();\n        for (Map.Entry<UUID, Integer> entry : products.entrySet()) {\n            amount += entry.getValue();\n        }\n        cartModel.setAmount(amount);\n\n        cartRepository.save(cartModel);\n\n        return ResponseEntity.status(HttpStatus.CREATED).body(cartModel);\n    }\n\n    /**\n     * Metodo/Rota responsavel por listar todos os carrinhos de compras\n     * @return Lista com todos os carrinhos de compras\n     */\n    @GetMapping(\"/cart/listAll\")\n    public", "first_line_groundtruth": "UUID, Integer> idsProducts = cartModel.getIdsProducts();", "first_line_prediction": "UUID, Integer> products = cartRecordDto.getIdsProducts();", "match": 0}
{"groundtruth": "sender.sendMessage(CustomColor.translate(\"&a\" + args[0] + \" &7is &cnot &7online.\"));", "prediction": " sender.sendMessage(CustomColor.translate(\"&cPlayer not found!\"));\n                 return false;\n            }\n\n            target.getInventory().addItem(megaphone);\n            target.sendMessage(CustomColor.translate(\"&7Congrats! &aYou &7now have a megaphone.\"));\n            return true;\n\n        } else {\n            sender.sendMessage(CustomColor.translate(\"&cInvalid usage!\"));\n            return false;\n        }\n\n    }", "first_line_groundtruth": "sender.sendMessage(CustomColor.translate(\"&a\" + args[0] + \" &7is &cnot &7online.\"));", "first_line_prediction": " sender.sendMessage(CustomColor.translate(\"&cPlayer not found!\"));", "match": 0}
{"groundtruth": "= userRepository.findByIdentifier(identifier);", "prediction": " = user0;\n        BeanUtils.copyProperties(userRecordDto, userModel);\n        return ResponseEntity.status(HttpStatus.OK).body(userRepository.save(userModel));\n    }", "first_line_groundtruth": "= userRepository.findByIdentifier(identifier);", "first_line_prediction": " = user0;", "match": 0}
{"groundtruth": "playerLocation, lobbyParticles.getCount());", "prediction": "1, playerLocation, 0, 0, 0);\n    }", "first_line_groundtruth": "playerLocation, lobbyParticles.getCount());", "first_line_prediction": "1, playerLocation, 0, 0, 0);", "match": 0}
{"groundtruth": "> list = userRepository.findByType(type);", "prediction": "> userList = userRepository.findByType(type);\n        if (userList.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Usuario nao encontrado.\");\n        }\n        return ResponseEntity.status(HttpStatus.OK).body(userList);\n     }", "first_line_groundtruth": "> list = userRepository.findByType(type);", "first_line_prediction": "> userList = userRepository.findByType(type);", "match": 0}
{"groundtruth": "asList(manager.getItemsAsArray()), new ArrayList<>());", "prediction": "asList(manager.getItemNames()), new ArrayList<>());\n        }\n        return null;\n    }", "first_line_groundtruth": "asList(manager.getItemsAsArray()), new ArrayList<>());", "first_line_prediction": "asList(manager.getItemNames()), new ArrayList<>());", "match": 0}
{"groundtruth": ".delete(userRepository.findByIdentifier(identifier));", "prediction": ".deleteByIdentifier(identifier);\n        return ResponseEntity.status(HttpStatus.OK).body(\"Usuario deletado com sucesso.\");\n     }", "first_line_groundtruth": ".delete(userRepository.findByIdentifier(identifier));", "first_line_prediction": ".deleteByIdentifier(identifier);", "match": 0}
{"groundtruth": "size = plugin.getParticleManager().getParticlesMapSize()+1;", "prediction": " rows = 9;\n        int  columns = 9;\n        inventory = Bukkit.createInventory(null, rows * columns, \"Particle Menu\");\n        addItemsToInventory();\n    }\n\n    /**\n     * Method to create a gui item with the desired material and name.\n     * @param material Material\n     * @param name Name\n     * @return ItemStack\n     */\n    private ItemStack createGuiItem(Material material, String name) {\n        ItemStack item = new ItemStack(material);\n        ItemMeta meta = item.getItemMeta();\n        meta.setDisplayName(name);\n        item.setItemMeta(meta);\n        return item", "first_line_groundtruth": "size = plugin.getParticleManager().getParticlesMapSize()+1;", "first_line_prediction": " rows = 9;", "match": 0}
{"groundtruth": ".get().addProduct(idProduct, 1);", "prediction": ".get().getIdsProducts().put(idProduct, 1);\n                }\n            }\n            else if (action.equals(\"remove\")){\n                if (products.containsKey(idProduct)){\n                    products.put(idProduct, products.get(idProduct) - 1);\n                }\n                else {\n                    newCart.get().getIdsProducts().put(idProduct, 0);\n                }\n            }\n            else {\n                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Acao invalida\");\n            }\n\n            return ResponseEntity.status(HttpStatus.OK).body(cartRepository.save(newCart", "first_line_groundtruth": ".get().addProduct(idProduct, 1);", "first_line_prediction": ".get().getIdsProducts().put(idProduct, 1);", "match": 0}
{"groundtruth": ": mainInstance.getYmlDataFile().getConfigurationSection(\"\").getKeys(false)){", "prediction": " : mainInstance.getYmlDataFile().getConfigurationSection(\"items\").getKeys(false)){\n            customItems.put(itemStackName, mainInstance.getYmlDataFile().getItemStack(itemStackName));\n        }\n    }", "first_line_groundtruth": ": mainInstance.getYmlDataFile().getConfigurationSection(\"\").getKeys(false)){", "first_line_prediction": " : mainInstance.getYmlDataFile().getConfigurationSection(\"items\").getKeys(false)){", "match": 0}
{"groundtruth": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();", "prediction": "0;\n        while (time < DiscordVerifier.getInstance().getConfig().getInt(\"code-timeout\")) {\n            player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-timeout\").replace(\"{time}\", String.valueOf(time))));\n            time++;\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-timeout-end\")));\n    }", "first_line_groundtruth": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "(DiscordVerifier.getInstance().getConfig().getBoolean(\"should-minecraft-chat-copyable\")) {", "prediction": " (time > 0) {\n            builder.append(\"\\n\\n\")\n                    .append(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-time-left\"))\n                            .replace(\"{time}\", String.valueOf(time)))\n                    .event(new ClickEvent(ClickEvent.Action.RUN_COMMAND, \"/discord verify\"))\n                    .color(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-time-left-color\"));\n        }\n        player.spigot().sendMessage(builder.create());\n    }", "first_line_groundtruth": "(DiscordVerifier.getInstance().getConfig().getBoolean(\"should-minecraft-chat-copyable\")) {", "first_line_prediction": " (time > 0) {", "match": 0}
{"groundtruth": "mainInstance.getYmlDataFile().save(mainInstance.getDatafile());", "prediction": " mainInstance.getYmlDataFile().save(mainInstance.getYmlDataFile());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }", "first_line_groundtruth": "mainInstance.getYmlDataFile().save(mainInstance.getDatafile());", "first_line_prediction": " mainInstance.getYmlDataFile().save(mainInstance.getYmlDataFile());", "match": 0}
{"groundtruth": "manager.saveFile();", "prediction": "\n\n        return true;\n    }", "first_line_groundtruth": "manager.saveFile();", "first_line_prediction": "", "match": 0}
{"groundtruth": ".setDisplayName(Color.translate(name));", "prediction": ".setDisplayName(Color.translate(\"&6\"+name));\n        itemStack.setItemMeta(itemMeta);\n\n        return itemStack;\n    }\n\n    /**\n     * Method to get the inventory\n     * @return Inventory\n     */\n    public Inventory getInventory() {\n        return inventory;\n    }\n\n    /**\n     * Method to get the loadedParticlesMaterial\n     * @return HashMap\n     */\n    public HashMap<ItemStack, LobbyParticles> getLoadedParticlesMaterial() {\n        return loadedParticlesMaterial;\n    }\n\n    /**\n     * Method to get the plugin\n     * @return Particles\n     */\n    public Particles getPlugin() {\n        return plugin", "first_line_groundtruth": ".setDisplayName(Color.translate(name));", "first_line_prediction": ".setDisplayName(Color.translate(\"&6\"+name));", "match": 0}
{"groundtruth": ".requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-given\"));", "prediction": ".requireNonNull(e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-id\")));\n        player.addRole(given).queue();\n        player.sendMessage(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-discord-player\"));\n    }\n\n    private void attemptSendMCMessage(UUID uuid) {\n        Player player = Bukkit.getPlayer(uuid);\n        if (player == null) return;\n        String code = DiscordVerifier.getDiscordCodes().get(uuid).getLeft();\n        String message = DiscordVerifier.getInstance().getConfig().getString(\"messages.", "first_line_groundtruth": ".requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-given\"));", "first_line_prediction": ".requireNonNull(e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-id\")));", "match": 0}
{"groundtruth": ".save(mainInstance.getDatafile());", "prediction": "\n                    .save(mainInstance.getYmlDataFile());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }", "first_line_groundtruth": ".save(mainInstance.getDatafile());", "first_line_prediction": "", "match": 0}
{"groundtruth": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-discord\")).queue();", "prediction": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-valid\")).queue();\n        DiscordVerifier.getDiscordCodes().remove(uuid);\n        DiscordVerifier.getDiscordRoles().forEach((role, data) -> {\n            if (data.getLeft().equals(code)) {\n                e.getGuild().addRoleToMember(e.getMember(), role).queue();\n            }\n        });\n        DiscordVerifier.getDiscordRoles().forEach((role, data) -> {\n            if (data.getRight().equals(code)) {\n                e.getGuild().addRoleToMember(e.getMember(),", "first_line_groundtruth": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-discord\")).queue();", "first_line_prediction": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-valid\")).queue();", "match": 0}
{"groundtruth": ".teleport(main.getWarpManager().getWarp(args[0]));", "prediction": ".teleport(new Location(Bukkit.getWorld(warps.getString(args[0] + \".world\")), warps.getDouble(args[0] + \".x\"), warps.getDouble(args[0] + \".y\"), warps.getDouble(args[0] + \".z\")));\n        player.sendMessage(ChatColor.GOLD + \"Teleported to warp \" + args[0] + \"!\");\n        return true;\n    }", "first_line_groundtruth": ".teleport(main.getWarpManager().getWarp(args[0]));", "first_line_prediction": ".teleport(new Location(Bukkit.getWorld(warps.getString(args[0] + \".world\")), warps.getDouble(args[0] + \".x\"), warps.getDouble(args[0] + \".y\"), warps.getDouble(args[0] + \".z\")));", "match": 0}
{"groundtruth": "<= configManager.getTalkRange()) {", "prediction": " <= configManager.getTalkRange()) {\n                    if(configManager.showPlayerDistance()) {\n                        target.sendMessage(CustomColor.translate(\"&8[&e\" + distance + \"m&8] &a\" + player.getName() + \" &8\u2192 &7\" + event.getMessage()));\n                        return;\n                    }\n                    target.sendMessage(CustomColor.translate(\"&a\" + player.getName() + \" &8\u2192 &7\" + event.getMessage()));\n                }\n            }\n        });\n    }", "first_line_groundtruth": "<= configManager.getTalkRange()) {", "first_line_prediction": " <= configManager.getTalkRange()) {", "match": 0}
{"groundtruth": ".cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-mc\")));", "prediction": ".getDiscordID(uuid));\n    }", "first_line_groundtruth": ".cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-mc\")));", "first_line_prediction": ".getDiscordID(uuid));", "match": 0}
{"groundtruth": "DiscordVerifier.getDiscordCodes().forEach((uuid, data) -> {", "prediction": " DiscordVerifierAPI.verify(e.getGuild(), code, (success, uuid) -> {\n             if (success) {\n                 // If the code is valid, attempt to verify the player\n                 DiscordVerifierAPI.verifyPlayer(e.getGuild(), uuid, (success2, player) -> {\n                     if (success2) {\n                         // If the player is valid, attempt to add them to the guild\n                         DiscordVerifierAPI.addPlayerToGuild(e.getGuild(), player, (success3, guild) -> {\n                             if (success3) {\n                                 // If the player is added to the guild, attempt", "first_line_groundtruth": "DiscordVerifier.getDiscordCodes().forEach((uuid, data) -> {", "first_line_prediction": " DiscordVerifierAPI.verify(e.getGuild(), code, (success, uuid) -> {", "match": 0}
{"groundtruth": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();", "prediction": " player.sendMessage(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent\") + \" \" + time + \" \" + DiscordVerifier.getInstance().getConfig().getString(\"messages.seconds\"));\n    }", "first_line_groundtruth": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();", "first_line_prediction": " player.sendMessage(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent\") + \" \" + time + \" \" + DiscordVerifier.getInstance().getConfig().getString(\"messages.seconds\"));", "match": 0}
{"groundtruth": "main.getWarpManager().setWarp(args[0], loc);", "prediction": " warps.set(args[0], loc);\n         main.getWarpManager().saveWarps();\n         player.sendMessage(ChatColor.GOLD + \"Warp \" + args[0] + \" has been set!\");\n         return true;\n    }", "first_line_groundtruth": "main.getWarpManager().setWarp(args[0], loc);", "first_line_prediction": " warps.set(args[0], loc);", "match": 0}
{"groundtruth": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-generated\"))\n                .replace(\"{", "prediction": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-message\"));\n        ComponentBuilder builder = new ComponentBuilder(rawMsg);\n        builder.append(\"\\n\");\n        builder.append(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-message-time\")));\n        builder.append(time);\n        builder.append(\"\\n\");\n        builder.append(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-message-code\")));\n        builder.append(code);\n        builder.append(\"\\n\");\n        builder.append(DiscordVerifierAPI", "first_line_groundtruth": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-generated\"))", "first_line_prediction": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-message\"));", "match": 0}
{"groundtruth": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.sync-name\")){", "prediction": "\n\n    }\n\n    private void attemptSendMCMessage(UUID uuid) {\n        Player player = Bukkit.getPlayer(uuid);\n        if (player == null) return;\n        String message = DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-mc\");\n        player.sendMessage(message);\n    }", "first_line_groundtruth": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.sync-name\")){", "first_line_prediction": "", "match": 0}
{"groundtruth": "return DiscordVerifier.getDiscordCodes().get(player.getUniqueId()) != null;", "prediction": " return DiscordVerifier.getDiscordCodes().containsKey(player.getUniqueId());\n    }\n\n    private void sendCodeMessage(Player player) {\n        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent\")));\n        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent-click\")));\n        player.spigot().sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent-click\")));\n        player.spigot().sendMessage(DiscordVerifierAPI.cc", "first_line_groundtruth": "return DiscordVerifier.getDiscordCodes().get(player.getUniqueId()) != null;", "first_line_prediction": " return DiscordVerifier.getDiscordCodes().containsKey(player.getUniqueId());", "match": 0}
{"groundtruth": ", Color.translate(\"&6Particle Menu\"));", "prediction": ", Color.translate(\"&6Particle Menu\"));\n        addItemsToInventory();\n    }\n\n    /**\n     * Method to create a gui item with desired name and material.\n     * @param material Material\n     * @param itemName String\n     * @return ItemStack\n     */\n    private ItemStack createGuiItem(Material material, String itemName) {\n        ItemStack item = new ItemStack(material);\n        ItemMeta meta = item.getItemMeta();\n        meta.setDisplayName(Color.translate(itemName));\n        item.setItemMeta(meta);\n        return item;\n    }\n\n    /**\n     * Method to get the inventory.\n     * @return Inventory", "first_line_groundtruth": ", Color.translate(\"&6Particle Menu\"));", "first_line_prediction": ", Color.translate(\"&6Particle Menu\"));", "match": 1}
{"groundtruth": "().editOriginal(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-invalid\")).queue();", "prediction": "().editOriginal(\"Invalid code!\").queue();\n        }\n    }\n\n    private void setSuccessful(SlashCommandInteractionEvent e, String code, AtomicBoolean failed, UUID uuid) {\n        e.getHook().editOriginal(\"Verified!\").queue();\n        DiscordVerifier.getDiscordCodes().remove(uuid);\n        Player player = Bukkit.getPlayer(uuid);\n        if (player != null && player.isOnline() && player.isValid()) {\n            player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-verified\")));\n        }\n        DiscordVerifier.getInstance().getServer().", "first_line_groundtruth": "().editOriginal(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-invalid\")).queue();", "first_line_prediction": "().editOriginal(\"Invalid code!\").queue();", "match": 0}
{"groundtruth": "DiscordVerifier.getDiscordCodes().remove(uuid);", "prediction": " // Verify the player\n        DiscordVerifierAPI.verify(uuid, code).whenComplete((result, error) -> {\n            if (error != null) {\n                e.getHook().editOriginal(error.getMessage()).queue();\n                return;\n            }\n            if (result == null) {\n                e.getHook().editOriginal(\"An unknown error occurred.\").queue();\n                return;\n            }\n            Player player = Bukkit.getPlayer(uuid);\n            if (player == null) {\n                e.getHook().editOriginal(\"An unknown error occurred.\").queue();\n                return;\n            }\n            if (result.", "first_line_groundtruth": "DiscordVerifier.getDiscordCodes().remove(uuid);", "first_line_prediction": " // Verify the player", "match": 0}
{"groundtruth": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"Minecraft.Command\");", "prediction": "\n\n    }\n\n    private void attemptSendMCMessage(UUID uuid) {\n        String channelId = DiscordVerifier.getInstance().getConfig().getString(\"discord.message-channel\");\n        if (channelId.isEmpty()) return;\n        if (channelId.equals(\"0\")) return;\n        if (channelId.equals(\"1\")) {\n            Bukkit.getScheduler().runTaskAsynchronously(DiscordVerifier.getInstance(), () -> {\n                Player player = Bukkit.getPlayer(uuid);\n                if (player == null) return;\n                player.sendMessage(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-mc\"));\n            });", "first_line_groundtruth": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"Minecraft.Command\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"should-code-be-case-sensitive\");", "prediction": " DiscordVerifier.getInstance().getConfig().getBoolean(\"case-sensitive-codes\");\n            if (caseSensitive) {\n                if (code.equals(data.getLeft())) {\n                    failed.set(false);\n                    DiscordVerifier.getDiscordCodes().remove(uuid);\n                    Player player = Bukkit.getPlayer(uuid);\n                    if (player != null && player.isOnline() && player.isValid()) {\n                        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-valid\")));\n                        DiscordVerifier.getInstance().getServer().getPluginManager().callEvent(new AsyncPlayerVerifyEvent", "first_line_groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"should-code-be-case-sensitive\");", "first_line_prediction": " DiscordVerifier.getInstance().getConfig().getBoolean(\"case-sensitive-codes\");", "match": 0}
{"groundtruth": "Bukkit.getScheduler().runTask(DiscordVerifier.getInstance(), () -> {", "prediction": " for (String command : commands) {\n            Bukkit.dispatchCommand(Bukkit.getConsoleSender(), command.replace(\"%player%\", name).replace(\"%code%\", code));\n         }\n    }\n\n    private void attemptSendMCMessage(UUID uuid) {\n        List<String> messages = DiscordVerifier.getInstance().getConfig().getStringList(\"Minecraft.Message\");\n        for (String message : messages) {\n            Bukkit.dispatchCommand(Bukkit.getConsoleSender(), message.replace(\"%player%\", Bukkit.getPlayer(uuid).getName()));\n        }\n    }", "first_line_groundtruth": "Bukkit.getScheduler().runTask(DiscordVerifier.getInstance(), () -> {", "first_line_prediction": " for (String command : commands) {", "match": 0}
{"groundtruth": "Player player = DiscordVerifier.getInstance().getServer().getPlayer(uuid);", "prediction": " Player player = Bukkit.getPlayer(uuid);\n        if (player == null) return;\n        String message = DiscordVerifier.getInstance().getConfig().getString(\"Minecraft.Message\");\n        if (message.isEmpty()) return;\n        Bukkit.dispatchCommand(Bukkit.getConsoleSender(), message.replace(\"{player}\", player.getName()));\n    }", "first_line_groundtruth": "Player player = DiscordVerifier.getInstance().getServer().getPlayer(uuid);", "first_line_prediction": " Player player = Bukkit.getPlayer(uuid);", "match": 0}
{"groundtruth": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&a&lMegaphone\"));", "prediction": " megaphoneMeta.setDisplayName(CustomColor.translate(\"&7Megaphone\"));\n             megaphoneMeta.setLore(Collections.singletonList(CustomColor.translate(\"&7Right click to give a megaphone\")));\n             megaphoneMeta.addItemFlags(ItemMeta.ItemFlag.HIDE_ATTRIBUTES);\n             megaphone.setItemMeta(megaphoneMeta);\n        }\n        return megaphone;\n    }", "first_line_groundtruth": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&a&lMegaphone\"));", "first_line_prediction": " megaphoneMeta.setDisplayName(CustomColor.translate(\"&7Megaphone\"));", "match": 0}
{"groundtruth": "if (newCart.get().getIdsProducts().isEmpty()){", "prediction": "\n\n            }\n            else {\n                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Acao invalida\");\n            }\n\n            newCart.get().setIdsProducts(products);\n            return ResponseEntity.status(HttpStatus.OK).body(cartRepository.save(newCart.get()));\n        }\n        else {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Carrinho de compras nao encontrado\");\n        }\n    }", "first_line_groundtruth": "if (newCart.get().getIdsProducts().isEmpty()){", "first_line_prediction": "", "match": 0}
{"groundtruth": "Role removed = e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));", "prediction": " if (given != null) {\n             player.addRole(given).queue();\n         }\n    }\n\n    private void attemptSendMCMessage(UUID uuid) {\n        String channelId = DiscordVerifier.getInstance().getConfig().getString(\"discord.command-channel\");\n        if (channelId.isEmpty()) return;\n        String message = DiscordVerifier.getInstance().getConfig().getString(\"discord.command-message\");\n        if (message.isEmpty()) return;\n        Bukkit.getScheduler().runTaskAsynchronously(DiscordVerifier.getInstance(), () -> {\n            Player player = Bukkit.getPlayer(uuid);\n            if (player == null)", "first_line_groundtruth": "Role removed = e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));", "first_line_prediction": " if (given != null) {", "match": 0}
{"groundtruth": ").getAmount() - value);", "prediction": "idProduct).getAmount() - value);\n            }\n\n            return ResponseEntity.status(HttpStatus.OK).body(cartRepository.save(newCart.get()));\n        }\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Carrinho de compras n\u00e3o encontrado\");\n    }", "first_line_groundtruth": ").getAmount() - value);", "first_line_prediction": "idProduct).getAmount() - value);", "match": 0}
{"groundtruth": "+ getConfigManager().getMegaphoneRange()\n                            + \" &7blocks!\")));", "prediction": " + getConfigManager().getMegaphoneRange() + \"&7\")));\n            megaphoneMeta.addItemFlags(ItemMeta.ItemFlag.HIDE_ATTRIBUTES);\n            megaphone.setItemMeta(megaphoneMeta);\n        }\n\n        return megaphone;\n    }", "first_line_groundtruth": "+ getConfigManager().getMegaphoneRange()", "first_line_prediction": " + getConfigManager().getMegaphoneRange() + \"&7\")));", "match": 0}
{"groundtruth": "Optional<CartModel> cart = cartRepository.findByIdClient(idClient);", "prediction": " Optional<CartModel> cart = cartRepository.findByIdClient(idClient);", "first_line_groundtruth": "Optional<CartModel> cart = cartRepository.findByIdClient(idClient);", "first_line_prediction": " Optional<CartModel> cart = cartRepository.findByIdClient(idClient);", "match": 0}
{"groundtruth": "saleModel.addProduct(idProduct, quantidade);", "prediction": " /**\n             * Verifica se o produto esta disponivel\n             */\n            if (productRepository.findById(idProduct).isEmpty()){\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"O produto \" +\n                        productRepository.findById(idProduct).get().getName() + \" nao esta disponivel.\");\n            }\n\n            /**\n             * Verifica se o produto esta disponivel\n             */\n            if (productRepository.findById(idProduct).get().getAmount() < quantidade){\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"O produto \" +\n                        productRepository.findById", "first_line_groundtruth": "saleModel.addProduct(idProduct, quantidade);", "first_line_prediction": " /**", "match": 0}
{"groundtruth": "saleModel.getIdClient());", "prediction": "saleRecordDto.getClientId());\n        if(cart == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Carrinho nao encontrado.\");\n        }\n        saleModel.setCart(cart);\n        saleModel.setSeller(saleRecordDto.getSeller());\n        saleModel.setClient(saleRecordDto.getClient());\n        saleModel.setCreatedAt(new Date());\n        saleModel.setUpdatedAt(new Date());\n        saleRepository.save(saleModel);\n        return ResponseEntity.status(HttpStatus.CREATED).body(saleModel);\n    }", "first_line_groundtruth": "saleModel.getIdClient());", "first_line_prediction": "saleRecordDto.getClientId());", "match": 0}
{"groundtruth": "saleModel.setDate(java.sql.Date.valueOf(date));", "prediction": " try {\n             date = new SimpleDateFormat(\"dd/MM/yyyy\").parse(saleRecordDto.getDate()).toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\n         } catch (ParseException e) {\n             e.printStackTrace();\n         }\n        saleModel.setDate(date);\n\n        saleRepository.save(saleModel);\n        cartRepository.deleteByIdClient(saleModel.getIdClient());\n        return ResponseEntity.status(HttpStatus.CREATED).body(saleModel);\n    }", "first_line_groundtruth": "saleModel.setDate(java.sql.Date.valueOf(date));", "first_line_prediction": " try {", "match": 0}
{"groundtruth": "productRepository.findById(idProduct).get().getValue();", "prediction": "0F;\n                for (Map.Entry<UUID, Integer> entry : products.entrySet()) {\n                    UUID idProductCart = entry.getKey();\n                    int quantidade = entry.getValue();\n\n                    Optional<ProductModel> product = productRepository.findById(idProductCart);\n\n                    if (product.isPresent()){\n                        value += product.get().getValue() * quantidade;\n                    }\n                }\n                newCart.get().setAmount(value);\n            }\n            else if (action.equals(\"remove\")){\n                if (products.containsKey(idProduct)){\n                    products.put(idProduct, products.get(idProduct", "first_line_groundtruth": "productRepository.findById(idProduct).get().getValue();", "first_line_prediction": "0F;", "match": 0}
{"groundtruth": ": thoughts.getPlan().split(\"\\n\")) {", "prediction": " : thoughts.getPlan()) {\n                        System.out.println(agent.getName() + \": Plan: \" + plan);\n                    }\n                }\n                if (thoughts.hasCriticism()) {\n                    System.out.println(agent.getName() + \": Criticism: \" + thoughts.getCriticism());\n                }\n                if (thoughts.hasSpeak()) {\n                    System.out.println(agent.getName() + \": Speak: \" + thoughts.getSpeak());\n                }\n            }\n            if (resp.hasCommand()) {\n                String command = resp.getCommand();\n               ", "first_line_groundtruth": ": thoughts.getPlan().split(\"\\n\")) {", "first_line_prediction": " : thoughts.getPlan()) {", "match": 0}
{"groundtruth": "= agent.chat(\"GENERATE NEXT COMMAND JSON\", true);", "prediction": " = agent.execute(resp.getCommand());\n                            if (resp.hasThoughts()) {\n                                System.out.println(\"Agent says: \\n\" + resp.getThoughts().getText());\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n            if (resp.hasResponse()) {\n                System.out.println(\"Agent says: \\n\" + resp.getResponse());\n            }\n            if (resp.hasCommand()) {\n                System.out.println(\"Agent wants to execute the following command: \\n\" + resp.getCommand());\n                while (true) {\n                    System.", "first_line_groundtruth": "= agent.chat(\"GENERATE NEXT COMMAND JSON\", true);", "first_line_prediction": " = agent.execute(resp.getCommand());", "match": 0}
{"groundtruth": "agent.chat(feedback, false);", "prediction": " agent.chat(\"GENERATE NEXT COMMAND JSON\", true, feedback);\n                        }\n                        break;\n                    } else {\n                        System.out.println(\"Please enter Y or N.\");\n                    }\n                }\n            }\n            if (resp.hasFeedback()) {\n                System.out.println(\"Agent wants to give feedback: \\n\" + resp.getFeedback());\n                while (true) {\n                    System.out.print(\"(Y/N)? \");\n                    String yn = scanner.nextLine().toLowerCase().trim();\n                    if (\"y\".equals(yn) || \"n\".equals(yn)) {\n                        if (\"y\".equals", "first_line_groundtruth": "agent.chat(feedback, false);", "first_line_prediction": " agent.chat(\"GENERATE NEXT COMMAND JSON\", true, feedback);", "match": 0}
{"groundtruth": "+= product.get().getValue() * quantidade;", "prediction": " += product.get().getPrice() * quantidade;\n            }\n        }\n\n        cartModel.setAmount(amount);\n\n        return ResponseEntity.status(HttpStatus.CREATED).body(cartRepository.save(cartModel));\n    }\n\n    /**\n     * Metodo/Rota responsavel por listar todos os carrinhos de compras do sistema\n     * @return Lista com todos os carrinhos de compras do sistema\n     */\n    @GetMapping(\"/cart/list\")\n    public ResponseEntity<List<CartModel>> listCart(){\n        return ResponseEntity.status(HttpStatus.OK).body(cartRepository.findAll", "first_line_groundtruth": "+= product.get().getValue() * quantidade;", "first_line_prediction": " += product.get().getPrice() * quantidade;", "match": 0}
{"groundtruth": "saleModel.setIdSeller(idSeller);", "prediction": " /**\n         * Verifica se o vendedor da venda esta cadastrado\n         */\n        if (productRepository.findByIdSeller(idSeller).isEmpty()){\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"O vendedor da venda n\u00e3o esta cadastrado. \" +\n                    \"Crie um vendedor para realizar a venda.\");\n        }\n\n        /**\n         * Verifica se a data da venda esta no futuro\n         */\n        if (saleModel.getDate().isBefore(LocalDate.now())){\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"A", "first_line_groundtruth": "saleModel.setIdSeller(idSeller);", "first_line_prediction": " /**", "match": 0}
{"groundtruth": "<String> relevantMemory = memory.get(10);", "prediction": "<Map<String, String>> memory = this.memory.getMemory();\n        prompt.addAll(memory);\n\n        // Build user input prompt\n        Prompt userInputPrompt = new Prompt.Builder(\"user_input\")\n                .withRole(\"user\")\n                .formattedWithUserInput(0, userInput)\n                .build();\n        prompt.add(userInputPrompt.getPrompt());\n\n        // Build goal prompt\n        Prompt goalPrompt = new Prompt.Builder(\"goal\")\n                .withRole(\"system\")\n                .formattedWithGoal(0, this.goals.get(0))\n                .build();\n        prompt.add(", "first_line_groundtruth": "<String> relevantMemory = memory.get(10);", "first_line_prediction": "<Map<String, String>> memory = this.memory.getMemory();", "match": 0}
{"groundtruth": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));", "prediction": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));\n        }\n\n        /**\n         * Verifica se a busca das vendas sera pelo cliente\n         */\n        if (((String) request.get(\"form\")).equals(\"client\")){\n            UUID id = UUID.fromString((String) request.get(\"value\"));\n            return ResponseEntity.status(HttpStatus.OK).body(saleRepository.findByIdClient(id));\n        }\n\n        /**\n         * Verifica se a busca das vendas sera por data\n         */\n        if (((String) request.get(\"form\")).equals(\"date\")){\n            SimpleDateFormat", "first_line_groundtruth": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));", "first_line_prediction": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));", "match": 1}
{"groundtruth": "(thoughts.hasCriticism()) {", "prediction": " (thoughts.hasCriticism()) {\n                    System.out.println(agent.getName() + \": \" + thoughts.getCriticism());\n                }\n                if (thoughts.hasSpeak()) {\n                    System.out.println(agent.getName() + \": \" + thoughts.getSpeak());\n                }\n            }\n            System.out.println(\"Type 'quit' to exit.\");\n            String input = scanner.nextLine();\n            if (input.equals(\"quit\")) {\n                break;\n            }\n            resp = agent.chat(input);\n        }\n    }", "first_line_groundtruth": "(thoughts.hasCriticism()) {", "first_line_prediction": " (thoughts.hasCriticism()) {", "match": 0}
{"groundtruth": "thoughts.hasSpeak()) {", "prediction": "thoughts.hasSpeak()) {\n                    System.out.println(agent.getName() + \": \" + thoughts.getSpeak());\n                }\n            }\n            if (resp.hasCommand()) {\n                String command = resp.getCommand();\n                System.out.println(agent.getName() + \": \" + command);\n                resp = agent.execute(command);\n            }\n            if (resp.hasSpeak()) {\n                System.out.println(agent.getName() + \": \" + resp.getSpeak());\n            }\n            if (resp.hasCriticism()) {\n                System.out.println(", "first_line_groundtruth": "thoughts.hasSpeak()) {", "first_line_prediction": "thoughts.hasSpeak()) {", "match": 1}
{"groundtruth": "out.println(agent.getName() + \": (voice) \" + thoughts.getSpeak());", "prediction": "out.println(thoughts.getSpeak());\n                }\n            }\n            System.out.println(\"Type 'quit' to exit.\");\n            String input = scanner.nextLine();\n            if (input.equals(\"quit\")) {\n                break;\n            }\n            resp = agent.chat(input);\n        }\n    }", "first_line_groundtruth": "out.println(agent.getName() + \": (voice) \" + thoughts.getSpeak());", "first_line_prediction": "out.println(thoughts.getSpeak());", "match": 0}
{"groundtruth": "resp.hasCommand()) {", "prediction": "resp.hasCommand()) {\n                String command = resp.getCommand();\n                System.out.println(agent.getName() + \": \" + command);\n                String response = agent.execute(command);\n                if (response != null) {\n                    System.out.println(agent.getName() + \": \" + response);\n                }\n            }\n            resp = agent.chat();\n        }\n    }", "first_line_groundtruth": "resp.hasCommand()) {", "first_line_prediction": "resp.hasCommand()) {", "match": 1}
{"groundtruth": "return openAIModel.chat(prompts);", "prediction": " return openAIModel.chat(prompts, maxTokens);\n    }", "first_line_groundtruth": "return openAIModel.chat(prompts);", "first_line_prediction": " return openAIModel.chat(prompts, maxTokens);", "match": 0}
{"groundtruth": "consumerAccessor.setPickupDelay(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));", "prediction": " var consumerItem = consumer.getItem();\n         var supplierItem = supplier.getItem();\n         var consumerTag = consumer.getItem().getTag();\n         var supplierTag = supplier.getItem().getTag();", "first_line_groundtruth": "consumerAccessor.setPickupDelay(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));", "first_line_prediction": " var consumerItem = consumer.getItem();", "match": 0}
{"groundtruth": ".add(PromptUtils.buildPrompts(role, content));", "prediction": ".add(Map.of(\"role\", role, \"content\", content));\n    }\n\n    public void addNewPrompt(String role, String content, String doc) {\n        this.values.add(Map.of(\"role\", role, \"content\", content, \"doc\", doc));\n    }\n\n    public String listToString(List<Map<String, String>> list) {\n        StringBuilder sb = new StringBuilder();\n        for (Map<String, String> map : list) {\n            sb.append(map.get(\"role\")).append(\": \").append(map.get(\"content\")).append(\"\\n\");\n        }", "first_line_groundtruth": ".add(PromptUtils.buildPrompts(role, content));", "first_line_prediction": ".add(Map.of(\"role\", role, \"content\", content));", "match": 0}
{"groundtruth": "return chat(seedInput.getContent(), false);", "prediction": "\n\n        List<Map<String, String>> prompt = getFullPrompt(seedInput.getContent());\n        String promptString = String.join(\"\\n\", prompt);\n        String responseString = openAIModel.generate(promptString);\n        Response response = new Response(responseString);\n        stagingTool = null;\n        stagingResponse = null;\n        return response;\n    }\n\n    public void addTool(Tool tool) {\n        tools.add(tool);\n    }\n\n    public void addStagingTool(Map<String, Object> stagingTool) {\n        this.stagingTool = stagingTool;\n    }\n\n    public void addStagingResponse", "first_line_groundtruth": "return chat(seedInput.getContent(), false);", "first_line_prediction": "", "match": 0}
{"groundtruth": "var age = accessor.getAge();", "prediction": " if (pickupDelay > 0) {\n             return false;\n         }\n         var age = accessor.getAge();\n         if (age > 0) {\n             return false;\n         }\n         var itemStack = entity.getItem();\n         var itemStack1 = accessor.getStack();\n         if (itemStack1.isEmpty()) {\n             return false;\n         }\n         if (itemStack.isEmpty()) {\n             return false;\n         }\n         if (itemStack.getItem() != itemStack1.getItem()) {\n             return false;\n         }\n         if (itemStack.hasTag() ^ itemStack1.hasTag", "first_line_groundtruth": "var age = accessor.getAge();", "first_line_prediction": " if (pickupDelay > 0) {", "match": 0}
{"groundtruth": "|| Staaaaaaaaaaaack.getItemBlackList().contains(itemStack.getItem());", "prediction": " || itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG_2);\n    }", "first_line_groundtruth": "|| Staaaaaaaaaaaack.getItemBlackList().contains(itemStack.getItem());", "first_line_prediction": " || itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG_2);", "match": 0}
{"groundtruth": "openAIModel.getTokenLimit();", "prediction": "2500;\n        if (tokenCount > tokenLimit) {\n            fullPrompt.remove(fullPrompt.size() - 1);\n        }\n        String response = this.chat(fullPrompt);\n        return new Response(response, this.history.getValues());\n    }\n\n    /**\n     * The chat function is a method that performs a chat interaction between a user and an assistant. Here's a breakdown of what it does:\n     * The prompt parameter is a list of dictionaries, each of which contains a \"role\" and \"content\" field. The \"role\" field indicates the role of the message in the", "first_line_groundtruth": "openAIModel.getTokenLimit();", "first_line_prediction": "2500;", "match": 0}
{"groundtruth": ".summarizer.summarize(extractedText, question);", "prediction": ".summarizer.summarize(extractedText, question);\n            result.put(\"text\", summary);\n            result.put(\"links\", extractedLinks);\n        }\n        return result;\n    }", "first_line_groundtruth": ".summarizer.summarize(extractedText, question);", "first_line_prediction": ".summarizer.summarize(extractedText, question);", "match": 1}
{"groundtruth": "min(consumerAccessor.getAge(), supplierAccessor.getAge()));", "prediction": "max(consumerAccessor.getAge(), supplierAccessor.getAge()));\n        consumerAccessor.setOwner(supplierAccessor.getOwner());\n        consumerAccessor.setDeltaMovement(supplierAccessor.getDeltaMovement());\n        consumerAccessor.setDeltaRotation(supplierAccessor.getDeltaRotation());\n        consumerAccessor.setDeltaRotation(supplierAccessor.getDeltaRotation());\n        consumerAccessor.setDeltaRotation(supplierAccessor.getDeltaRotation());\n        consumerAccessor.setDeltaRotation(supplierAccessor.getDeltaRotation());\n        consumerAccessor.setDeltaRotation(supplierAccessor.getDeltaRotation());\n        consumerAccessor.setDeltaRotation(supplierAccessor.get", "first_line_groundtruth": "min(consumerAccessor.getAge(), supplierAccessor.getAge()));", "first_line_prediction": "max(consumerAccessor.getAge(), supplierAccessor.getAge()));", "match": 0}
{"groundtruth": "(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));", "prediction": "(32767);\n        supplierAccessor.setPickupDelay(32767);\n\n        var consumerItem = consumer.getItem();\n        var supplierItem = supplier.getItem();\n        var consumerCount = consumerItem.getCount();\n        var supplierCount = supplierItem.getCount();\n\n        var consumerExtraCount = getExtraItemCount(consumer);\n        var supplierExtraCount = getExtraItemCount(supplier);\n\n        var consumerStack = consumerItem.copy();\n        var supplierStack = supplierItem.copy();\n\n        consumerStack.setCount(consumerCount + supplierCount);\n        supplierStack.setCount(supplierCount);\n\n        consumer", "first_line_groundtruth": "(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));", "first_line_prediction": "(32767);", "match": 0}
{"groundtruth": "= openAIModel.countTokens(updatedPrompt);", "prediction": " = updatedPrompt.stream().mapToInt(Map::size).sum();\n                if (tokenCount < tokenLimit) {\n                    prompt = updatedPrompt;\n                    relevantMemory = memory.get(10);\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // Build current date and time prompt\n        Prompt currentDatePrompt = new Prompt.Builder(\"current_date\")\n                 .withRole(\"system\")\n                 .formattedWithCurrentDate(0)\n                 .build();\n        prompt.add(currentDatePrompt.getPrompt());\n\n        // Build current date and time prompt\n        Prompt currentLocationPrompt = new Prompt.Builder", "first_line_groundtruth": "= openAIModel.countTokens(updatedPrompt);", "first_line_prediction": " = updatedPrompt.stream().mapToInt(Map::size).sum();", "match": 0}
{"groundtruth": "= openAIModel.chat(fullPrompt, tokenLimit - tokenCount);", "prediction": " = this.chat(fullPrompt, tokenCount, tokenLimit);\n        return new Response(resp);\n    }\n\n    /**\n     * The chat function is a method that performs a chat interaction between a user and an assistant. Here's a breakdown of what it does:\n     * The chat function is called with a list of prompts. The prompts are used to construct the prompt for the chat interaction. The prompt is then passed to the openAIModel to generate a response.\n     * The response is then printed and stored in the assistant's history as a user message and an assistant message.\n     * The response is returned from", "first_line_groundtruth": "= openAIModel.chat(fullPrompt, tokenLimit - tokenCount);", "first_line_prediction": " = this.chat(fullPrompt, tokenCount, tokenLimit);", "match": 0}
{"groundtruth": ".memory.add(humanFeedbackPrompt.getContent());", "prediction": ".memory.add(humanFeedbackPrompt.getPrompt());\n                this.stagingResponse = null;\n                this.stagingTool = null;\n                return new Response(humanFeedbackPrompt.getPrompt());\n            } else {\n                Prompt humanFeedbackPrompt = new Prompt.Builder(\"human_feedback\")\n                         .withRole(\"system\")\n                         .formatted(0, this.stagingResponse, message)\n                         .build();\n                this.memory.add(humanFeedbackPrompt.getPrompt());\n                this.stagingResponse = null;\n                this.stagingTool = null;\n                return new Response(humanFeedbackPrompt.getPrompt());\n            }\n       ", "first_line_groundtruth": ".memory.add(humanFeedbackPrompt.getContent());", "first_line_prediction": ".memory.add(humanFeedbackPrompt.getPrompt());", "match": 0}
{"groundtruth": "int tokenLimit = openAIModel.getTokenLimit() - 1000;", "prediction": " return prompt;\n    }\n\n    private String headerPrompt() {\n        return \"Hi, I am \" + name + \". I am a \" + description + \". I am here to help you \" + String.join(\", \", goals) + \".\";\n    }\n\n    private String prompt(String content, String query) {\n        List<Map<String, String>> prompt = getFullPrompt(query);\n        Prompt promptBuilder = new Prompt.Builder(\"system\")\n                .withRole(\"system\")\n                .formatted(0, content)\n                .build();\n        prompt.add(promptBuilder.getPrompt());\n        return promptBuilder.", "first_line_groundtruth": "int tokenLimit = openAIModel.getTokenLimit() - 1000;", "first_line_prediction": " return prompt;", "match": 0}
{"groundtruth": "return defaultResponsePrompt.getContent();", "prediction": " return defaultResponsePrompt.getPrompt();\n    }\n\n    public String evaluationPrompt() {\n        String evaluation = Prompt.getEvaluation();\n        Prompt evaluationPrompt = new Prompt.Builder(\"evaluation\")\n                 .formatted(0, evaluation)\n                 .build();\n         return evaluationPrompt.getPrompt();\n    }\n\n    public String resourcesPrompt() {\n        String resources = Prompt.getResources();\n        Prompt resourcesPrompt = new Prompt.Builder(\"resources\")\n                 .formatted(0, resources)\n                 .build();\n         return resourcesPrompt.getPrompt();\n    }\n\n    public String toolsPrompt() {\n        String tools = Prompt.getTools();\n        Prompt tools", "first_line_groundtruth": "return defaultResponsePrompt.getContent();", "first_line_prediction": " return defaultResponsePrompt.getPrompt();", "match": 0}
{"groundtruth": "(currentTimePrompt.getPrompt());", "prediction": "(currentTimePrompt.getContent());\n\n        // Build user input prompt\n        Prompt userInputPrompt = new Prompt.Builder(\"user_input\")\n                .withRole(\"user\")\n                .formattedWithUserInput(0)\n                .build();\n        prompt.add(userInputPrompt.getContent());\n\n        // Build user input prompt\n        Prompt userInputPrompt2 = new Prompt.Builder(\"user_input\")\n                .withRole(\"user\")\n                .formattedWithUserInput(1)\n                .build();\n        prompt.add(userInputPrompt2.getContent());\n\n        // Build user input prompt\n        Prompt userInputPrompt3 = new Prompt.", "first_line_groundtruth": "(currentTimePrompt.getPrompt());", "first_line_prediction": "(currentTimePrompt.getContent());", "match": 0}
{"groundtruth": "Prompt.getDefaultResponse();", "prediction": " \"I'm sorry, I didn't understand that. Please try again.\";\n        Prompt defaultResponsePrompt = new Prompt.Builder(\"default_response\")\n                .formatted(0, defaultResponse)\n                .withRole(\"system\")\n                .build();\n        return defaultResponsePrompt.getPrompt();\n    }\n\n    public String evaluationPrompt() {\n        String evaluation = \"I'm sorry, I didn't understand that. Please try again.\";\n        Prompt evaluationPrompt = new Prompt.Builder(\"evaluation\")\n                .formatted(0, evaluation)\n                .withRole(\"system\")\n                .build();\n        return evaluationPrompt.getPrompt();\n    }", "first_line_groundtruth": "Prompt.getDefaultResponse();", "first_line_prediction": " \"I'm sorry, I didn't understand that. Please try again.\";", "match": 0}
{"groundtruth": "return seeMore.getSchedulerHook().runTaskDelayed(() -> updateDistance(player, 0, attempts, distanceMap, taskMap, distanceConsumer), delay);", "prediction": " task = seeMore.getSchedulerHook().runRepeatingTask(() -> {\n                     updateDistance(player, 0, attempts + 1, distanceMap, taskMap, distanceConsumer);\n                 }, delay, delay);\n            } else {\n                distanceConsumer.accept(player, distance);\n            }\n            return task;\n        });\n    }\n\n    private void cleanMaps() {\n        for (Map.Entry<UUID, ScheduledTask> entry : viewDistanceUpdateTasks.entrySet()) {\n            if (entry.getValue().isCancelled()) {\n                viewDistanceUpdateTasks.remove(entry.getKey());\n            }\n        }\n        for (", "first_line_groundtruth": "return seeMore.getSchedulerHook().runTaskDelayed(() -> updateDistance(player, 0, attempts, distanceMap, taskMap, distanceConsumer), delay);", "first_line_prediction": " task = seeMore.getSchedulerHook().runRepeatingTask(() -> {", "match": 0}
{"groundtruth": "viewDistanceController.updateAllPlayers();", "prediction": " viewDistanceController.updateTargetViewDistance();\n        }\n    }\n\n    public SeeMoreConfig getConfig() {\n        return config;\n    }\n\n    public SchedulerHook getSchedulerHook() {\n        return schedulerHook;\n    }\n\n    public ViewDistanceController getViewDistanceController() {\n        return viewDistanceController;\n    }", "first_line_groundtruth": "viewDistanceController.updateAllPlayers();", "first_line_prediction": " viewDistanceController.updateTargetViewDistance();", "match": 0}
{"groundtruth": "updateTask = seeMore.getSchedulerHook().runEntityTaskAsap(() -> {", "prediction": " scheduledTask = seeMore.getSchedulerHook().runTask(() -> {\n                try {\n                    distanceConsumer.accept(player, distance);\n                    taskMap.remove(player.getUniqueId());\n                    retryTask.complete(null);\n                } catch (Throwable t) {\n                    retryTask.completeExceptionally(t);\n                }\n            });\n            return scheduledTask == null ? null : new RegionisedScheduledTask(scheduledTask);\n        });\n    }\n\n    private void cleanMaps() {\n        for (Map.Entry<UUID, ScheduledTask> entry : viewDistanceUpdateTasks.entrySet()) {\n            if (entry.getValue().is", "first_line_groundtruth": "updateTask = seeMore.getSchedulerHook().runEntityTaskAsap(() -> {", "first_line_prediction": " scheduledTask = seeMore.getSchedulerHook().runTask(() -> {", "match": 0}
{"groundtruth": "seeMore.getSeeMoreConfig().updateDelay.get();", "prediction": "1000;\n            }\n        } catch (Throwable ignored) {}\n        if (delay > 0) {\n            ScheduledTask task = viewDistanceUpdateTasks.computeIfAbsent(player.getUniqueId(), uuid -> seeMore.getSchedulerHook().runRepeatingTask(() -> {\n                setTargetViewDistance(player, player.getClientViewDistance(), true);\n            }, delay, delay));\n            task.setDelay(delay);\n        }\n    }\n\n    public void setTargetSendDistance(Player player, int clientViewDistance) {\n        targetSendDistanceMap.put(player.getUniqueId(), Math.max(2", "first_line_groundtruth": "seeMore.getSeeMoreConfig().updateDelay.get();", "first_line_prediction": "1000;", "match": 0}
{"groundtruth": "parsedReport.getAverages().get(test.getTestName()));", "prediction": " parsedReport.getAverage(test.getTestName())\n                    );\n                    reports.sort(averageComparator.reversed());\n                    System.out.println(test.getTestName() + \" average: \" +\n                            NumberFormat.getInstance().format(reports.get(0).getAverage(test.getTestName())));\n                });\n            } else {\n                List<PerformanceReport> reports = Arrays.asList(\n                        new PerformanceReport(gson, Paths.get(files[0].getAbsolutePath())),\n                        new PerformanceReport(gson, Paths.get(files[1].getAbsolutePath()))\n                );\n\n                performanceTests.forEach(test -> {\n                    Comparator", "first_line_groundtruth": "parsedReport.getAverages().get(test.getTestName()));", "first_line_prediction": " parsedReport.getAverage(test.getTestName())", "match": 0}
{"groundtruth": ".out.println(\"Successfully completed \" + test.getTestName() + \" in \" + timeElapsed + \" ms!\");", "prediction": ".out.println(\"Starting test \" + test.getTestName() + \"...\");\n            System.out.println(\"Test took \" + timeElapsed + \"ms to complete.\");\n\n            report.addResult(test.getTestName(), results);\n        });\n\n        report.write(outputDirectory);\n    }", "first_line_groundtruth": ".out.println(\"Successfully completed \" + test.getTestName() + \" in \" + timeElapsed + \" ms!\");", "first_line_prediction": ".out.println(\"Starting test \" + test.getTestName() + \"...\");", "match": 0}
{"groundtruth": "\"results for \" + test.getTestName() + \"!\");", "prediction": " \" results!\");\n                    }\n\n                    ParsedReport slowerReport = slowerOptional.get();\n                    ParsedReport fasterReport = fasterOptional.get();\n\n                    if (reportToAverage.apply(slowerReport) > reportToAverage.apply(fasterReport)) {\n                        System.out.println(\"Test \" + test.getTestName() + \" is slower than \" + slowerReport.getTestName() + \"!\");\n                    } else {\n                        System.out.println(\"Test \" + test.getTestName() + \" is faster than \" + fasterReport.getTestName() + \"!\");\n                    }\n                });\n            } else {\n                throw new", "first_line_groundtruth": "\"results for \" + test.getTestName() + \"!\");", "first_line_prediction": " \" results!\");", "match": 0}
{"groundtruth": "toJson(report.getResults()).getBytes());", "prediction": "toJson(report).getBytes());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Successfully completed performance tests!\");\n    }", "first_line_groundtruth": "toJson(report.getResults()).getBytes());", "first_line_prediction": "toJson(report).getBytes());", "match": 0}
{"groundtruth": "executor.awaitTermination(30, TimeUnit.SECONDS);", "prediction": " executor.awaitTermination(10, TimeUnit.SECONDS);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while waiting for executor to finish\", e);\n    }\n  }", "first_line_groundtruth": "executor.awaitTermination(30, TimeUnit.SECONDS);", "first_line_prediction": " executor.awaitTermination(10, TimeUnit.SECONDS);", "match": 0}
{"groundtruth": "executor.shutdown();", "prediction": " executor.close();\n  }", "first_line_groundtruth": "executor.shutdown();", "first_line_prediction": " executor.close();", "match": 0}
{"groundtruth": ".put(identity.getId(), entry.memberId());", "prediction": ".put(entry.memberId(), identity.getId());\n    }\n\n    assignmentSnapshot = assignmentManager.onElected(members, skipAssignment);\n\n    log.debug(\"Assigned {}\", assignmentSnapshot);\n\n    return memberIds;\n  }\n\n  @Override\n  public void close() {\n    assignmentManager.close();\n  }", "first_line_groundtruth": ".put(identity.getId(), entry.memberId());", "first_line_prediction": ".put(entry.memberId(), identity.getId());", "match": 0}
{"groundtruth": "properties.getConsumerConfig();", "prediction": " new ConsumerConfig(properties.getProperties());\n    clientConfig.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n    clientConfig.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, properties.getBootstrapServers());\n    clientConfig.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, sessionTimeout.toMillis());\n    clientConfig.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, heartbeatInterval.toMillis());\n    clientConfig.put(ConsumerConfig.REBALANCE_TIMEOUT_MS_CONFIG, rebalanceTimeout.toMillis());\n    client", "first_line_groundtruth": "properties.getConsumerConfig();", "first_line_prediction": " new ConsumerConfig(properties.getProperties());", "match": 0}
{"groundtruth": "().getId());", "prediction": "().getId());\n      ByteBuffer assignment = leaderProtocol.serializeAssignment(entry.getValue());\n      groupAssignment.put(memberId, assignment);\n    }\n\n    if (!skipAssignment) {\n      assignmentSnapshot = assignments.get(identity);\n      assignmentManager.onAssigned(assignmentSnapshot, generation());\n    }\n\n    return groupAssignment;\n  }\n\n  @Override\n  public void close() {\n    assignmentManager.close();\n  }", "first_line_groundtruth": "().getId());", "first_line_prediction": "().getId());", "match": 1}
{"groundtruth": "identity.getId() + \"-\" + BD_CLIENT_ID_SEQUENCE.getAndIncrement();", "prediction": " BD_CLIENT_ID_SEQUENCE.getAndIncrement() + \"-\" + identity.toString();\n    this.logContext = new LogContext(clientId);\n    this.time = Time.SYSTEM;\n    this.client = new ConsumerNetworkClient(logContext, clientId, time);\n    this.retryBackoffMs = properties.getRetryBackoffMs();\n    this.leaderProtocol = leaderProtocol;\n    this.metrics = new Metrics();\n    this.rebalanceTimeout = rebalanceTimeout;\n    this.sessionTimeout = sessionTimeout;\n    this.heartbeatInterval = heartbeatInterval;\n\n    final String metricGrpPrefix =\n        properties.get", "first_line_groundtruth": "identity.getId() + \"-\" + BD_CLIENT_ID_SEQUENCE.getAndIncrement();", "first_line_prediction": " BD_CLIENT_ID_SEQUENCE.getAndIncrement() + \"-\" + identity.toString();", "match": 0}
{"groundtruth": "[j].spawn();", "prediction": " = null;\n                    particles[i][j] = null;\n                }\n            }\n        }\n    }\n\n    @Override\n    public void despawn() {\n        ParticleConstructDespawnEvent event = new ParticleConstructDespawnEvent(this);\n        Bukkit.getPluginManager().callEvent(event);\n        if (event.isCancelled()) return;\n        for (int i = 0; i < particles.length; i++) {\n            for (int j = 0; j < particles[0].length; j++) {\n                if (particles[i][j] != null) {\n                    particles[i] = null", "first_line_groundtruth": "[j].spawn();", "first_line_prediction": " = null;", "match": 0}
{"groundtruth": "if (!particleSpawnEvent.isCancelled()) {", "prediction": " if (!particleSpawnEvent.isCancelled()) {\n             getLocation().getWorld().spawnParticle(getType(), getLocation(), 1, note);\n         }\n    }", "first_line_groundtruth": "if (!particleSpawnEvent.isCancelled()) {", "first_line_prediction": " if (!particleSpawnEvent.isCancelled()) {", "match": 0}
{"groundtruth": "[j].clone();", "prediction": " == null ? null : particles[i][j].clone();\n                clonedParticle.setLocation(locations[i][j]);\n                this.particles[i][j] = clonedParticle;\n            }\n        }\n    }\n\n    public void setLocations(Location[][] locations) {\n        if (locations.length != particles.length || locations[0].length != particles[0].length) {\n            throw new IllegalArgumentException(\"Location[][] lengths must be equal to RegularParticle[][] lengths\");\n        }\n\n        for (int i = 0; i < locations.length; i++) {\n            for (int j = 0; j < locations", "first_line_groundtruth": "[j].clone();", "first_line_prediction": " == null ? null : particles[i][j].clone();", "match": 0}
{"groundtruth": "ToyController.instance().setScalarLevel(intensity);", "prediction": "\tif (intensity > 0.5f) {\n\t\t\t\tif (!paused) {\n\t\t\t\t\tpaused = true;\n\t\t\t\t\tLOGGER.info(\"Minetiface paused\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (paused) {\n\t\t\t\t\tpaused = false;\n\t\t\t\t\tLOGGER.info(\"Minetiface resumed\");\n\t\t\t\t}\n\t\t\t}", "first_line_groundtruth": "ToyController.instance().setScalarLevel(intensity);", "first_line_prediction": "\tif (intensity > 0.5f) {", "match": 0}
{"groundtruth": "ToyController.instance().setScalarLevel(0);", "prediction": "\t// TODO: pause game\n\t\t\t\t}\n\t\t\t}\n\t\t}", "first_line_groundtruth": "ToyController.instance().setScalarLevel(0);", "first_line_prediction": "\t// TODO: pause game", "match": 0}
{"groundtruth": "masochistPointsCounter.onHurt(amount);", "prediction": "\tminingPointsCounter.onHurt(amount);", "first_line_groundtruth": "masochistPointsCounter.onHurt(amount);", "first_line_prediction": "\tminingPointsCounter.onHurt(amount);", "match": 0}
{"groundtruth": "abstractPointsCounter.getInstantPoints(), instanPoints);", "prediction": "instanPoints, abstractPointsCounter.getInstantPoints());\n\t\t}", "first_line_groundtruth": "abstractPointsCounter.getInstantPoints(), instanPoints);", "first_line_prediction": "instanPoints, abstractPointsCounter.getInstantPoints());", "match": 0}
{"groundtruth": "skipDownTick += abstractPointsCounter.getSkipDownTicks();", "prediction": "\tskipDownTick = Math.max(abstractPointsCounter.getSkipDownTicks(), skipDownTick);\n\t\t}\n\t\treturn skipDownTick;", "first_line_groundtruth": "skipDownTick += abstractPointsCounter.getSkipDownTicks();", "first_line_prediction": "\tskipDownTick = Math.max(abstractPointsCounter.getSkipDownTicks(), skipDownTick);", "match": 0}
{"groundtruth": "= Math.max(abstractPointsCounter.getPoints(), points);", "prediction": " = Math.max(abstractPointsCounter.getPoints(), points);\n\t\t}\n\t\treturn points;", "first_line_groundtruth": "= Math.max(abstractPointsCounter.getPoints(), points);", "first_line_prediction": " = Math.max(abstractPointsCounter.getPoints(), points);", "match": 0}
{"groundtruth": "ToyController.instance().setLinearLevel(intensity);", "prediction": "\tToyController.instance().setScalarColor(0.5f, 0.5f, 0.5f);\n\t\t} else {\n\t\t\tToyController.instance().setScalarColor(0.5f, 0.5f, 0.5f);\n\t\t}", "first_line_groundtruth": "ToyController.instance().setLinearLevel(intensity);", "first_line_prediction": "\tToyController.instance().setScalarColor(0.5f, 0.5f, 0.5f);", "match": 0}
{"groundtruth": "abstractPointsCounter.onTick();", "prediction": "\tabstractPointsCounter.onTick();\n\t\t}", "first_line_groundtruth": "abstractPointsCounter.onTick();", "first_line_prediction": "\tabstractPointsCounter.onTick();", "match": 0}
{"groundtruth": "masochistPointsCounter.onDeath();", "prediction": "\t// TODO: add a death sound", "first_line_groundtruth": "masochistPointsCounter.onDeath();", "first_line_prediction": "\t// TODO: add a death sound", "match": 0}
{"groundtruth": ", file.genThumbnailPath());", "prediction": ", file.getThumbnailPath());\n    BaseFile newFileMeta = createOrUpdateFileMeta(tags, fileId, file.getPath(), file.getName(),\n        newFile.getSize());\n    BaseFile newFileData = createOrUpdateFile(newFile, tags, fileId, file.getPath(),\n        newFile.getSize());\n    return newFileData;\n  }\n\n  /**\n    * Create a new file to Firestore and Cloud Storage.\n    *\n    * @param file file upload to the server\n    * @param tags list of tags label the new file\n    * @param fileId unique ID of the file\n    * @", "first_line_groundtruth": ", file.genThumbnailPath());", "first_line_prediction": ", file.getThumbnailPath());", "match": 0}
{"groundtruth": "= LdsUtil.getFileBucketPath(basePath, newFileId);", "prediction": " = LdsUtil.getPathId(fileId);\n    FileMeta fileMeta = new FileMeta(fileId, newFileId, fileName, size, tags);\n    firestoreService.createOrUpdateFileMeta(fileMeta);\n    return new BaseFile(fileId, fileBucketPath, fileName, size, tags);\n  }", "first_line_groundtruth": "= LdsUtil.getFileBucketPath(basePath, newFileId);", "first_line_prediction": " = LdsUtil.getPathId(fileId);", "match": 0}
{"groundtruth": "(newFile.checkImageFileType()) {", "prediction": " (file.getContentType().startsWith(\"image\")) {\n      Thumbnails.of(file.getBytes())\n          .size(THUMBNAIL_SIZE)\n          .toFile(newFile.genThumbnailPath());\n    }\n    return newFile;\n  }\n\n  /**\n    * Create or update a file meta in Firestore with the given fileId.\n    *\n    * @param tags list of tags label the file\n    * @param fileId unique ID of the file\n    * @param newFileId unique ID of the new file (for referencing Cloud Storage)\n    * @param name name of the file\n    * @param", "first_line_groundtruth": "(newFile.checkImageFileType()) {", "first_line_prediction": " (file.getContentType().startsWith(\"image\")) {", "match": 0}
{"groundtruth": "newFile.genThumbnailPath());", "prediction": "300, newFile);\n    }\n    return newFile;\n  }\n\n  /**\n    * Create or update a file meta in Firestore with the given fileId.\n    *\n    * @param tags list of tags label the file\n    * @param fileId unique ID of the file\n    * @param newFileId unique ID of the new file (for referencing Cloud Storage)\n    * @param name name of the file\n    * @param size size of the file\n    * @return file data\n    */\n  private BaseFile createOrUpdateFileMeta(\n      List<String> tags, String fileId, String newFileId", "first_line_groundtruth": "newFile.genThumbnailPath());", "first_line_prediction": "300, newFile);", "match": 0}
{"groundtruth": ".orderNo = System.currentTimeMillis() + \"-\" + LdsUtil.getPathId(path);", "prediction": ".size = size;\n  }\n\n  public String getId() {\n    return id;\n  }\n\n  public void setId(String id) {\n    this.id = id;\n  }\n\n  public String getPath() {\n    return path;\n  }\n\n  public void setPath(String path) {\n    this.path = path;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public List<String> getTags() {\n    return tags;\n  }\n\n  public void setTags(List<String> tags) {\n   ", "first_line_groundtruth": ".orderNo = System.currentTimeMillis() + \"-\" + LdsUtil.getPathId(path);", "first_line_prediction": ".size = size;", "match": 0}
{"groundtruth": "storageService.batchDelete(bucketName);", "prediction": " storageService.deleteAll(bucketName);\n  }\n\n  /**\n    * Create a new file in Firestore and Cloud Storage.\n    *\n    * @param file the uploaded file\n    * @param tags list of tags label the file\n    * @param fileId unique id of the file\n    * @param newFileId unique id of the new file\n    * @param size size of the file\n    * @return the uploaded file\n    */\n  private BaseFile createOrUpdateFile(\n      MultipartFile file, List<String> tags, String fileId, String newFileId, long size)\n      throws InterruptedException, ExecutionException, IOException", "first_line_groundtruth": "storageService.batchDelete(bucketName);", "first_line_prediction": " storageService.deleteAll(bucketName);", "match": 0}
{"groundtruth": "resourceBasePath = LdsUtil.getResourceBasePath(basePath);", "prediction": " path = basePath;\n    return documents.stream()\n        .map(\n            doc -> {\n              BaseFile file = new BaseFile();\n              file.setId(doc.getId());\n              file.setName(doc.getString(\"name\"));\n              file.setSize(doc.getLong(\"size\"));\n              file.setPath(path + \"/\" + doc.getId());\n              file.setThumbnailPath(path + \"/\" + doc.getId() + \".jpg\");\n              file.setTags(doc.getArray(\"tags\").getValues().stream().map(String::valueOf).collect(Collectors.toList()));\n              file.setOrderNo(doc", "first_line_groundtruth": "resourceBasePath = LdsUtil.getResourceBasePath(basePath);", "first_line_prediction": " path = basePath;", "match": 0}
{"groundtruth": "BaseFile oldFile = fileService.getFileById(fileId);", "prediction": " fileService.updateFile(fileId, file, getTagList(tags));\n       return ResponseEntity.ok().build();\n     });\n   }", "first_line_groundtruth": "BaseFile oldFile = fileService.getFileById(fileId);", "first_line_prediction": " fileService.updateFile(fileId, file, getTagList(tags));", "match": 0}
{"groundtruth": "(contextValue.getType(), contextValue.getId());", "prediction": "(contextValue);\n    }\n\n    @Override\n    public boolean isCrossContext() {\n      return false;\n    }\n  }\n\n  private static final IParser FHIR_PARSER =\n      FhirContext.forCached(FhirVersionEnum.R4).newJsonParser();\n\n  private static final JsonCqlMapper JSON_CQL_MAPPER = new JsonCqlMapper();\n\n  private static final ModelResolver MODEL_RESOLVER = new R4FhirModelResolver();\n\n  private static final LibraryLoader LIBRARY_LOADER = new InMemoryLibraryLoader();\n\n  private static final TerminologyProvider TERMINOLOGY_PROVIDER =", "first_line_groundtruth": "(contextValue.getType(), contextValue.getId());", "first_line_prediction": "(contextValue);", "match": 0}
{"groundtruth": "enterContext(contextValue.getType());", "prediction": "setContextValue(\n          \"Patient\", \"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789", "first_line_groundtruth": "enterContext(contextValue.getType());", "first_line_prediction": "setContextValue(", "match": 0}
{"groundtruth": "contextValue.getId());", "prediction": "0, contextValue.getId());\n    }\n\n    @Override\n    public boolean isCrossContext() {\n      return false;\n    }\n  }\n\n  private static final IParser FHIR_PARSER =\n      FhirContext.forCached(FhirVersionEnum.R4).newJsonParser();\n\n  private static final JsonCqlMapper JSON_CQL_MAPPER = new JsonCqlMapper();\n\n  private static final ModelResolver MODEL_RESOLVER = new R4FhirModelResolver();\n\n  private static final LibraryLoader LIBRARY_LOADER = new InMemoryLibraryLoader();\n\n  private static final TerminologyProvider TERMINOLOGY", "first_line_groundtruth": "contextValue.getId());", "first_line_prediction": "0, contextValue.getId());", "match": 0}
{"groundtruth": "diceResult.setAmeacas(0);", "prediction": " diceResult.setDesastres(0);\n        } else if (advantage - threat < 0) {\n            diceResult.setVantagens(0);\n            diceResult.setDesastres(threat - advantage);\n        } else {\n            diceResult.setVantagens(0);\n            diceResult.setDesastres(0);\n        }\n\n        if (triumph - despair > 0) {\n            diceResult.setTriunfos(triumph - despair);\n            diceResult.setDesaparecimentos(0);\n        } else if (triumph", "first_line_groundtruth": "diceResult.setAmeacas(0);", "first_line_prediction": " diceResult.setDesastres(0);", "match": 0}
{"groundtruth": "(libraryIds.getVersion()),\n          new CqlTranslatorOptions(TRANSLATOR_OPTIONS),\n          errors);", "prediction": "(libraryIds.getVersion()),\n          errors);\n      if (!errors.isEmpty()) {\n        throw new RuntimeException(\n            \"Failed to resolve library \" + libraryIds.getName() + \" \" + libraryIds.getVersion()\n                + \": \" + errors.get(0).getMessage());\n      }\n    }\n\n    return libraryManager.getLibraries().stream()\n        .map(CompiledLibrary::getLibrary)\n        .collect(toImmutableList());\n  }\n\n  private static ImmutableList<Library> loadLibraries(\n      Path cqlFolder, Collection<CqlLibraryId> cqlLibraryIds, FhirVersionEnum fhirVersion) {\n    Library", "first_line_groundtruth": "(libraryIds.getVersion()),", "first_line_prediction": "(libraryIds.getVersion()),", "match": 1}
{"groundtruth": "diceResult.setFracassos(0);", "prediction": " diceResult.setDesastres(failure);\n        } else {\n            diceResult.setSucessos(success);\n            diceResult.setDesastres(0);\n        }\n        if (triumph - despair > 0) {\n            diceResult.setTriunfos(triumph - despair);\n            diceResult.setDesastres(despair);\n        } else {\n            diceResult.setTriunfos(triumph);\n            diceResult.setDesastres(0);\n        }\n        if (advantage - threat > 0) {\n            diceResult.set", "first_line_groundtruth": "diceResult.setFracassos(0);", "first_line_prediction": " diceResult.setDesastres(failure);", "match": 0}
{"groundtruth": "super.resolveType(value);", "prediction": " super.resolveType(value);\n        });\n  }", "first_line_groundtruth": "super.resolveType(value);", "first_line_prediction": " super.resolveType(value);", "match": 0}
{"groundtruth": "diceResult.setFracassos(failure - success);", "prediction": " diceResult.setFracassos(success - failure);\n        } else {\n            diceResult.setSucessos(success);\n            diceResult.setFracassos(0);\n        }\n\n        if (triumph - despair > 0) {\n            diceResult.setTriumphos(triumph - despair);\n            diceResult.setDespair(0);\n        } else if (triumph - despair < 0) {\n            diceResult.setTriumphos(0);\n            diceResult.setDespair(triumph - despair);\n        } else {\n            dice", "first_line_groundtruth": "diceResult.setFracassos(failure - success);", "first_line_prediction": " diceResult.setFracassos(success - failure);", "match": 0}
{"groundtruth": "withId(libraryIds.getName())\n              .withVersion(libraryIds.getVersion()),\n          new CqlTranslatorOptions(TRANSLATOR_OPTIONS),\n          errors);", "prediction": "withId(libraryIds.getName())\n               .withVersion(libraryIds.getVersion()),\n          errors);\n      if (!errors.isEmpty()) {\n        throw new RuntimeException(\n            \"Failed to resolve library \" + libraryIds.getName() + \" \" + libraryIds.getVersion()\n                + \": \" + errors.get(0).getMessage());\n      }\n    }\n\n    return libraryManager.getLibraries().stream()\n        .map(CompiledLibrary::getLibrary)\n        .collect(toImmutableList());\n  }\n\n  private static ImmutableList<Library> loadLibraries(\n      Path cqlFolder, Collection<CqlLibraryId> cqlLibrary", "first_line_groundtruth": "withId(libraryIds.getName())", "first_line_prediction": "withId(libraryIds.getName())", "match": 1}
{"groundtruth": "diceResult.setSucessos(success - failure);", "prediction": " diceResult.setResultado(\"Voc\u00ea ganhou!\");\n        } else if (success - failure < 0) {\n             diceResult.setResultado(\"Voc\u00ea perdeu!\");\n        } else if (success - failure == 0) {\n             diceResult.setResultado(\"Empate!\");\n        }\n\n        if (success > 0) {\n            diceResult.setResultado(\"Voc\u00ea ganhou!\");\n        } else if (success < 0) {\n            diceResult.setResultado(\"Voc\u00ea perdeu!\");\n        } else if (success == 0) {\n            diceResult", "first_line_groundtruth": "diceResult.setSucessos(success - failure);", "first_line_prediction": " diceResult.setResultado(\"Voc\u00ea ganhou!\");", "match": 0}
{"groundtruth": "service.rollDisVantage(\"Advantage\", dice);", "prediction": " service.rollDisVantage(\"Advantage\", dice);\n    }\n\n    @GetMapping(\"/disadvantage\")\n    public int rollDisadvantage(\n             @RequestParam(name = \"dice\", defaultValue = \"20\") int dice\n    ) {\n        return  service.rollDisVantage(\"Disadvantage\", dice);\n    }", "first_line_groundtruth": "service.rollDisVantage(\"Advantage\", dice);", "first_line_prediction": " service.rollDisVantage(\"Advantage\", dice);", "match": 0}
{"groundtruth": "diceResult.setVantagens(advantage - threat);", "prediction": " diceResult.setAdvantage(advantage - threat);\n             diceResult.setThreats(0);\n        } else if (advantage - threat < 0) {\n             diceResult.setAdvantage(0);\n             diceResult.setThreats(threat - advantage);\n        } else {\n             diceResult.setAdvantage(0);\n             diceResult.setThreats(0);\n        }\n\n        if (triumph - despair > 0) {\n             diceResult.setTriumphs(triumph - despair);\n             diceResult.setDespair(0);\n       ", "first_line_groundtruth": "diceResult.setVantagens(advantage - threat);", "first_line_prediction": " diceResult.setAdvantage(advantage - threat);", "match": 0}
{"groundtruth": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {", "prediction": " openTelemetryService.logRequest(\"healthchecker\");\n     return new ResponseEntity<>(\"OK\", HttpStatus.OK);\n  }\n\n  /**\n   * The upload API.\n   *\n   * @param file the file to be uploaded\n   * @return the file response\n   */\n  @PostMapping(\"/files\")\n  public ResponseEntity<?> uploadFile(@RequestParam(\"file\") MultipartFile file) {\n    openTelemetryService.logRequest(\"uploadFile\");\n    if (file == null) {\n      log.error(\"File is null\");\n      return new ResponseEntity<>(\"File is null\", HttpStatus.BAD_REQUEST);\n    }\n    if (file.isEmpty", "first_line_groundtruth": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {", "first_line_prediction": " openTelemetryService.logRequest(\"healthchecker\");", "match": 0}
{"groundtruth": "diceResult.setDesesperos(0);", "prediction": " diceResult.setDesastres(0);\n        } else if (triumph - despair < 0) {\n            diceResult.setTriunfos(0);\n            diceResult.setDesastres(despair - triumph);\n        } else {\n            diceResult.setTriunfos(0);\n            diceResult.setDesastres(0);\n        }\n\n        return diceResult;\n    }\n\n    public ResultadoSwForceDTO rollSwForceDice(DiceSwDTO dice) {\n        int success = 0;\n        int triumph = 0;\n        int advantage = ", "first_line_groundtruth": "diceResult.setDesesperos(0);", "first_line_prediction": " diceResult.setDesastres(0);", "match": 0}
{"groundtruth": "= HydraulicImpl.instance().mod(modId);", "prediction": " = HydraulicImpl.getInstance().getModManager().getMod(modId);\n\n        if (mod != null) {\n            String modName = mod.getName();\n            String modVersion = mod.getVersion();\n\n            // Get the item name from the identifier\n            String itemName = identifier.substring(identifier.indexOf(\":\") + 1);\n\n            // Get the item from the mod\n            Item item = mod.getItem(itemName);\n\n            if (item != null) {\n                // Get the item's NBT\n                CompoundTag itemNbt = item.getNbt();\n\n                // Get the item's display name\n                String", "first_line_groundtruth": "= HydraulicImpl.instance().mod(modId);", "first_line_prediction": " = HydraulicImpl.getInstance().getModManager().getMod(modId);", "match": 0}
{"groundtruth": "return HydraulicImpl.instance().dataFolder(Constants.MOD_ID)\n                .resolve(\"storage\")\n                .resolve(mod.id());", "prediction": " return HydraulicImpl.instance().modStorage(mod).path();\n    }", "first_line_groundtruth": "return HydraulicImpl.instance().dataFolder(Constants.MOD_ID)", "first_line_prediction": " return HydraulicImpl.instance().modStorage(mod).path();", "match": 0}
{"groundtruth": "forceResult.setLuz(light);", "prediction": " forceResult.setForca(light);\n         forceResult.setDestreza(dark);\n         return forceResult;\n    }", "first_line_groundtruth": "forceResult.setLuz(light);", "first_line_prediction": " forceResult.setForca(light);", "match": 0}
{"groundtruth": "this.hydraulic.server().registryAccess().registryOrThrow(key);", "prediction": " this.hydraulic.registry(key);\n        return registry.getValues();\n    }", "first_line_groundtruth": "this.hydraulic.server().registryAccess().registryOrThrow(key);", "first_line_prediction": " this.hydraulic.registry(key);", "match": 0}
{"groundtruth": "forceResult.setNegro(dark);", "prediction": " forceResult.setEscuridao(dark);\n        return forceResult;\n    }", "first_line_groundtruth": "forceResult.setNegro(dark);", "first_line_prediction": " forceResult.setEscuridao(dark);", "match": 0}
{"groundtruth": ".packManager.initialize();", "prediction": ".platform.onServerStarting(server);\n        this.bootstrap.onServerStarting(server);\n        this.packManager.onServerStarting(server);\n    }\n\n    /**\n     * Called when the server is stopping.\n     *\n     * @param server the Minecraft server instance\n     */\n    public void onServerStopping(@NotNull MinecraftServer server) {\n        this.server = null;\n\n        this.platform.onServerStopping(server);\n        this.bootstrap.onServerStopping(server);\n        this.packManager.onServerStopping(server);\n    }\n\n    /**\n     * Gets the instance of the Hydraulic mod", "first_line_groundtruth": ".packManager.initialize();", "first_line_prediction": ".platform.onServerStarting(server);", "match": 0}
{"groundtruth": "result = boostDice.roll();", "prediction": "roller = boostDice.roll();\n            if (roller == 1) {\n                success++;\n            } else if (roller == 2) {\n                triumph++;\n            } else if (roller == 3) {\n                advantage++;\n            } else if (roller == 4) {\n                failure++;\n            } else if (roller == 5) {\n                despair++;\n            } else if (roller == 6) {\n                threat++;\n            }\n        }\n\n        // Calcular o resultado final.\n        int result = success + triumph + advantage + failure + despair + threat;\n        if (result ==", "first_line_groundtruth": "result = boostDice.roll();", "first_line_prediction": "roller = boostDice.roll();", "match": 0}
{"groundtruth": "this.bootstrap.mods();", "prediction": " this.platform.mods();\n    }\n\n    /**\n     * Gets the mod storage for the specified mod.\n     *\n     * @param modName the name of the mod\n     * @return the mod storage for the specified mod\n     */\n    @Nullable\n    public ModStorage modStorage(@NotNull String modName) {\n        return this.modStorage.get(modName);\n    }\n\n    /**\n     * Gets the data folder directory of this platform.\n     *\n     * @return the data folder directory\n     */\n    @NotNull\n    public Path dataFolder() {\n        return this.platform.dataFolder();\n    }\n\n    /**\n     * Gets", "first_line_groundtruth": "this.bootstrap.mods();", "first_line_prediction": " this.platform.mods();", "match": 0}
{"groundtruth": "logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));", "prediction": " callback.Error(\"ConversationWebsocket onClosed\");\n    }\n\n    @Override\n    public void onClosing(@NotNull WebSocket webSocket, int code, @NotNull String reason) {\n        callback.Error(\"ConversationWebsocket onClosing\");\n    }\n\n    @Override\n    public void onFailure(@NotNull WebSocket webSocket, @NotNull Throwable t, @Nullable Response response) {\n        callback.Error(\"ConversationWebsocket onFailure\");\n    }\n\n    @Override\n    public void onMessage(@NotNull WebSocket webSocket, @NotNull String text) {\n        try {\n            JsonObject json = new JsonParser().parse(text).getAsJsonObject();\n            if (json.has(\"", "first_line_groundtruth": "logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));", "first_line_prediction": " callback.Error(\"ConversationWebsocket onClosed\");", "match": 0}
{"groundtruth": "logger.Debug(String.format(\"[%s] [%s] client send message [%s]\", conversationSignature, question, data));", "prediction": " ws.send(data);\n    }", "first_line_groundtruth": "logger.Debug(String.format(\"[%s] [%s] client send message [%s]\", conversationSignature, question, data));", "first_line_prediction": " ws.send(data);", "match": 0}
{"groundtruth": "logger.Debug(String.format(\"[%s] [%s] websocket is received new message [%s]\", conversationSignature, question, textSpited));", "prediction": " if (textSpited.startsWith(\"[\")) {\n                 JsonObject json = new JsonParser().parse(textSpited).getAsJsonObject();\n                 if (json.has(\"type\")) {\n                     if (json.get(\"type\").getAsString().equals(\"message\")) {\n                         Message message = new GsonBuilder().create().fromJson(json, Message.class);\n                         if (message.getFrom().equals(clientId)) {\n                             if (message.getArguments().size() > 0) {\n                                 for (Argument argument : message.getArguments()) {\n                                     if (argument.getName().equals(\"invocationID\")) {\n                                         if", "first_line_groundtruth": "logger.Debug(String.format(\"[%s] [%s] websocket is received new message [%s]\", conversationSignature, question, textSpited));", "first_line_prediction": " if (textSpited.startsWith(\"[\")) {", "match": 0}
{"groundtruth": "(String.format(\"%s   %s\", country.getEmoji(), country.getName()));", "prediction": "(country.getName());\n    holder.countryCallingCode.setText(country.getCallingCode());\n    holder.countryFlag.setImageResource(country.getFlag());\n\n    // Set the background color of the list item\n    holder.itemView.setBackgroundColor(darkMode ? Color.parseColor(\"#7a7a7a\") : Color.parseColor(\"#d9d9d9\"));\n\n    // Set the selected state of the list item\n    if (selectionTracker != null) {\n      String countryCode = countries.get(position).getCode();\n      if (selectionTracker.isSelected(countryCode)) {\n        holder.", "first_line_groundtruth": "(String.format(\"%s   %s\", country.getEmoji(), country.getName()));", "first_line_prediction": "(country.getName());", "match": 0}
{"groundtruth": "setText(String.format(\"%s   %s\", country.getEmoji(), country.getName()));", "prediction": "setText(country.getName());\n    holder.countryCallingCode.setText(country.getCallingCode());\n    holder.countryFlag.setImageResource(country.getFlag());\n\n    // Set the background color of the list item\n    holder.itemView.setBackgroundColor(darkMode ? Color.parseColor(\"#7a7a7a\") : Color.parseColor(\"#d9d9d9\"));\n\n    // Set the selected state of the list item\n    if (selectionTracker != null) {\n      String countryCode = countries.get(position).getCode();\n      if (selectionTracker.isSelected(countryCode)) {\n        holder", "first_line_groundtruth": "setText(String.format(\"%s   %s\", country.getEmoji(), country.getName()));", "first_line_prediction": "setText(country.getName());", "match": 0}
{"groundtruth": "(country.getCallingCode());", "prediction": "(country.getCallingCode());\n\n    // Set the background color of the list item\n    holder.itemView.setBackgroundColor(darkMode ? Color.parseColor(\"#7a7a7a\") : Color.parseColor(\"#d9d9d9\"));\n  }\n\n  @Override\n  public int getItemCount() {\n    return countries.size();\n  }\n\n  public void setDefaultCountry(int defaultCountry) {\n    this.defaultCountry = defaultCountry;\n  }", "first_line_groundtruth": "(country.getCallingCode());", "first_line_prediction": "(country.getCallingCode());", "match": 1}
{"groundtruth": "country.getCode();", "prediction": " country.getCode();\n      }\n    };\n  }", "first_line_groundtruth": "country.getCode();", "first_line_prediction": " country.getCode();", "match": 0}
{"groundtruth": ", String> available = TraceUtils.listCategories();", "prediction": ", String> map = new TreeMap<String, String>();\n                for (String tag : set) {\n                    map.put(tag, tag);\n                }\n                mPrefs.edit().putStringSet(getContext().getString(R.string.pref_key_tags), set).apply();\n                refreshUi();\n                return true;\n            }\n        });\n\n        mRefreshReceiver = new BroadcastReceiver() {\n            @Override\n            public void onReceive(Context context, Intent intent) {\n                if (ACTION_REFRESH_TAGS.equals(intent.getAction())) {\n                    refreshUi();\n                }\n            }\n        };\n\n        IntentFilter filter =", "first_line_groundtruth": ", String> available = TraceUtils.listCategories();", "first_line_prediction": ", String> map = new TreeMap<String, String>();", "match": 0}
{"groundtruth": "Process perfetto = TraceUtils.exec(cmd, null, false);", "prediction": " Process process = TraceUtils.exec(cmd);\n             BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n             String line;\n             while ((line = reader.readLine()) != null) {\n                 if (line.startsWith(\"  category: \")) {\n                     String category = line.substring(12);\n                     result.put(category, category);\n                 }\n             }\n             return result;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "first_line_groundtruth": "Process perfetto = TraceUtils.exec(cmd, null, false);", "first_line_prediction": " Process process = TraceUtils.exec(cmd);", "match": 0}
{"groundtruth": "TraceUtils.traceStop();", "prediction": " Receiver.updateTracing(context);\n    }\n\n    public static void notifySessionStopped(Context context, String traceId) {\n        Intent intent = new Intent(INTENT_ACTION_NOTIFY_SESSION_STOPPED);\n        intent.putExtra(INTENT_EXTRA_TAGS, traceId);\n        context.sendBroadcast(intent);\n    }\n\n    public static void notifySessionStolen(Context context, String traceId) {\n        Intent intent = new Intent(INTENT_ACTION_NOTIFY_SESSION_STOLEN);\n        intent.putExtra(INTENT_EXTRA_TAGS, traceId);\n        context.sendBroadcast(intent", "first_line_groundtruth": "TraceUtils.traceStop();", "first_line_prediction": " Receiver.updateTracing(context);", "match": 0}
{"groundtruth": "false : TraceUtils.isTracingOn();", "prediction": " false :\n                prefs.getBoolean(context.getString(R.string.pref_key_trace_utils_tracing_on), false);\n\n        boolean tracingIsOff = !prefsTracingOn && !traceUtilsTracingOn;\n        if (tracingIsOff) {\n            Log.i(TAG, \"Tracing is off\");\n            stopTracing(context);\n        } else {\n            Log.i(TAG, \"Tracing is on\");\n            startTracing(context);\n        }\n    }\n\n    public static void startTracing(Context context) {\n        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n        boolean tracingIsOn =\n               ", "first_line_groundtruth": "false : TraceUtils.isTracingOn();", "first_line_prediction": " false :", "match": 0}
{"groundtruth": "(TraceUtils.traceStart(tags, bufferSizeKb, appTracing,\n                longTrace, attachToBugreport, maxLongTraceSizeMb, maxLongTraceDurationMinutes)) {", "prediction": " (attachToBugreport) {\n            TraceUtils.traceStart(tags, bufferSizeKb, appTracing, longTrace,\n                    maxLongTraceSizeMb, maxLongTraceDurationMinutes);\n        } else {\n            TraceUtils.traceStart(tags, bufferSizeKb, appTracing, longTrace,\n                    maxLongTraceSizeMb, maxLongTraceDurationMinutes, false);\n        }\n    }\n\n    private void stopTracingInternal(String outputFilename, boolean notifySessionStopped,\n            boolean notifySessionStolen) {\n        Context context = getApplicationContext();\n        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n        boolean attachToBugreport", "first_line_groundtruth": "(TraceUtils.traceStart(tags, bufferSizeKb, appTracing,", "first_line_prediction": " (attachToBugreport) {", "match": 0}
{"groundtruth": "Process process = TraceUtils.exec(cmd);", "prediction": " Process process = TraceUtils.execWithTimeout(cmd, null, 1000);\n             if (process == null) {\n                 return false;\n             } else if (process.exitValue() != 0) {\n                 Log.e(TAG, \"perfetto is_detached failed with: \" + process.exitValue());\n                 return false;\n             }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        return true;\n    }\n\n    public boolean isTraceDumped() {\n        return Files.exists(Paths.get(TEMP_TRACE_LOCATION));\n    }\n\n   ", "first_line_groundtruth": "Process process = TraceUtils.exec(cmd);", "first_line_prediction": " Process process = TraceUtils.execWithTimeout(cmd, null, 1000);", "match": 0}
{"groundtruth": "(TraceUtils.getOutputFilename(), false, false);", "prediction": "();\n        } else if (intent.getAction().equals(INTENT_ACTION_NOTIFY_SESSION_STOPPED)) {\n            notifySessionStopped(intent.getStringExtra(INTENT_EXTRA_TAGS));\n        } else if (intent.getAction().equals(INTENT_ACTION_NOTIFY_SESSION_STOLEN)) {\n            notifySessionStolen(intent.getStringExtra(INTENT_EXTRA_TAGS));\n        }\n    }\n\n    private void startTracingInternal(Collection<String> tags, int bufferSizeKb,\n            boolean apps, boolean longTrace, int maxLongTraceSizeMb,\n            int maxLongTraceDurationMinutes", "first_line_groundtruth": "(TraceUtils.getOutputFilename(), false, false);", "first_line_prediction": "();", "match": 0}
{"groundtruth": "= TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);", "prediction": " = Runtime.getRuntime().exec(cmd);\n            process.waitFor();\n        } catch (Exception e) {\n            Log.e(TAG, \"Failed to start perfetto trace.\", e);\n            return null;\n        }\n\n        Log.v(TAG, \"Finished perfetto trace.\");\n\n        // The trace file is now in the temp location.\n        File traceFile = new File(TEMP_TRACE_LOCATION);\n        if (!traceFile.exists()) {\n            Log.e(TAG, \"Failed to find trace file.\");\n            return null;\n        }\n\n        // The trace file is now in the temp location.", "first_line_groundtruth": "= TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);", "first_line_prediction": " = Runtime.getRuntime().exec(cmd);", "match": 0}
{"groundtruth": "ps = TraceUtils.exec(\"ps -AT\", null, false);", "prediction": "atemp = TraceUtils.exec(\"atrace --async_dump -o \" + outFile);\n            if (atemp.waitFor() != 0) {\n                Log.e(TAG, \"atraceDump failed with: \" + atemp.exitValue());\n                return false;\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return true;\n    }\n\n    public boolean traceDump(Streamer streamer) {\n        String cmd = \"atrace --async_stop -z -c -o -\";\n\n        Log.v(TAG, \"Dumping async", "first_line_groundtruth": "ps = TraceUtils.exec(\"ps -AT\", null, false);", "first_line_prediction": "atemp = TraceUtils.exec(\"atrace --async_dump -o \" + outFile);", "match": 0}
{"groundtruth": "prefsTracingOn && !TraceUtils.isTracingOn()) {", "prediction": "prefsTracingOn) {\n            Log.i(TAG, \"Tracing is off, not stopping trace.\");\n            return;\n        }\n        // If the user thinks tracing is on and the trace processor agrees, we have no work to do.\n        // We must still start a foreground service, but let's log as an FYI.\n        if (prefsTracingOn) {\n            Log.i(TAG, \"Tracing is on, not stopping trace.\");\n            return;\n        }\n        // If the user thinks tracing is on and the trace processor disagrees, we must stop the\n        // trace.\n        prefs.edit", "first_line_groundtruth": "prefsTracingOn && !TraceUtils.isTracingOn()) {", "first_line_prediction": "prefsTracingOn) {", "match": 0}
{"groundtruth": "TraceUtils.clearSavedTraces();", "prediction": " TraceUtils.clearSavedTraces();\n                                    }\n                                })\n                             .setNegativeButton(R.string.cancel, null)\n                             .show();\n                        return true;\n                    }\n                });\n\n        findPreference(\"clear_saved_traces_and_tags\").setOnPreferenceClickListener(\n                new Preference.OnPreferenceClickListener() {\n                     @Override\n                     public boolean onPreferenceClick(Preference preference) {\n                         new AlertDialog.Builder(getContext())\n                                 .setTitle(R.string.clear_saved_traces_and_tags_question)\n                                 .setMessage(R.string.all_traces_and_tags_will_be_deleted", "first_line_groundtruth": "TraceUtils.clearSavedTraces();", "first_line_prediction": " TraceUtils.clearSavedTraces();", "match": 0}
{"groundtruth": "process = TraceUtils.execWithTimeout(cmd, null, STOP_TIMEOUT_MS);", "prediction": " process = TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);\n            if (process == null) {\n                Log.e(TAG, \"perfetto traceStop failed with: \" + process.exitValue());\n            } else if (process.exitValue() != 0) {\n                Log.e(TAG, \"perfetto traceStop failed with: \" + process.exitValue());\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        Log.v(TAG, \"perfetto traceStop succeeded!\");\n    }\n\n    public", "first_line_groundtruth": "process = TraceUtils.execWithTimeout(cmd, null, STOP_TIMEOUT_MS);", "first_line_prediction": " process = TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);", "match": 0}
{"groundtruth": "), accessor.getAddition(), recipe.getOutput().getItem(),\n\t\t\t\tnull, null\n\t\t).toJson();", "prediction": "recipe),\n\t\t\t\taccessor.getAddition(recipe),\n\t\t\t\trecipe.getOutput().getItem(),\n\t\t\t\trecipe.getOutput().getCount(),\n\t\t\t\trecipe.getGroup(),\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t).toJson();", "first_line_groundtruth": "), accessor.getAddition(), recipe.getOutput().getItem(),", "first_line_prediction": "recipe),", "match": 0}
{"groundtruth": "innerMsg.free();", "prediction": " innerMsg.release();\n        }\n    }", "first_line_groundtruth": "innerMsg.free();", "first_line_prediction": " innerMsg.release();", "match": 0}
{"groundtruth": ").contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {", "prediction": "ArrayList::new).contains(p.getProperty(\"nbt.display.Name\"))) {\n                        int AEsize = ae.length;\n                        String[] newConfig = new String[AEsize + 1];\n                        int h = 0;\n                        while (h < AEsize) {\n                            newConfig[h] = ae[h];\n                            h++;\n                        }\n                        newConfig[h] = p.getProperty(\"nbt.display.Name\");\n                        Rename newRename = new Rename(newConfig);\n                        ArrayList<Rename> listFiles = new ArrayList<>();\n                        listFiles.add(newRename);\n                        try {\n                            FileWriter file", "first_line_groundtruth": ").contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {", "first_line_prediction": "ArrayList::new).contains(p.getProperty(\"nbt.display.Name\"))) {", "match": 0}
{"groundtruth": "System.out.println(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u6210\u529f! \"+conf.getAddress()+\" <<<\");", "prediction": " // \u8fde\u63a5\u6210\u529f\u540e \u5f00\u59cb\u76d1\u542c\u6d88\u606f\n            ch.pipeline().addLast(new ClientChannelHandler());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void onLoseConnect(Future<Void> future){\n        ch = null;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        NettyClient that = (NettyClient) o;\n        return Objects.equals(conf, that.conf);\n    }\n\n    @", "first_line_groundtruth": "System.out.println(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u6210\u529f! \"+conf.getAddress()+\" <<<\");", "first_line_prediction": " // \u8fde\u63a5\u6210\u529f\u540e \u5f00\u59cb\u76d1\u542c\u6d88\u606f", "match": 0}
{"groundtruth": "chIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());", "prediction": " index = loadBalancePolicy.getClientIndex(ncSet.size());\n            ch = linkedHashSetGetByIndex(ncSet, index);\n            return ch;\n        }\n\n        // \u5982\u679c\u4e0a\u8ff0\u64cd\u4f5c ch == null \u6216\u8005 group\u76f8\u7b49 \u90a3\u5c31\u51c6\u5907 \u4ece\u73b0\u6709\u961f\u5217\u4e2d\u9009\u62e9\u4e00\u4f4d\u8fde\u63a5\n        int clientIndex = loadBalancePolicy.getClientIndex(addressSet.size());\n        InetSocketAddress inetSocketAddress =\n                linkedHashSetGetByIndex(addressSet, clientIndex);\n        ch = createClient(serviceName, inetSocketAddress);\n        return put(serviceName, ch);\n    }\n\n    private NettyClient createClient(String serviceName, Inet", "first_line_groundtruth": "chIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());", "first_line_prediction": " index = loadBalancePolicy.getClientIndex(ncSet.size());", "match": 0}
{"groundtruth": "(\"\u7cfb\u7edf\u901a\u77e5 - \u6ce8\u610f: \u670d\u52a1\u5668\u8fde\u63a5\u5173\u95ed! >>> \" + conf.getAddress());", "prediction": "(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u5931\u8d25! <<<\");\n        ch = null;\n    }\n\n    /**\n     * \u5173\u95ed\u8fde\u63a5\n     */\n    public void close(){\n        if(ch != null){\n            ch.close();\n        }\n    }\n\n    /**\n     * \u5173\u95ed\u8fde\u63a5\n     */\n    public void shutdown(){\n        if(ch != null){\n            ch.close();\n        }\n        if(null != conf.getAddress()){\n            conf.getAddress().close();\n        }\n    }\n\n    /**\n     * \u5173\u95ed\u8fde\u63a5\n     */\n    public void shutdownNow(){\n        if(ch != null){\n            ch.close();\n        }\n        if(", "first_line_groundtruth": "(\"\u7cfb\u7edf\u901a\u77e5 - \u6ce8\u610f: \u670d\u52a1\u5668\u8fde\u63a5\u5173\u95ed! >>> \" + conf.getAddress());", "first_line_prediction": "(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u5931\u8d25! <<<\");", "match": 0}
{"groundtruth": "() < lintConf.getClientMaxConnCount()){", "prediction": "() < lintConf.getMaxClientPerGroup()){\n                ch = createClient(serviceName, addressSet);\n                if(ch != null){\n                    return put(serviceName, ch);\n                }\n            }\n        }\n\n        // \u5982\u679c\u4e0a\u8ff0\u64cd\u4f5c ch == null \u6216\u8005 group\u76f8\u7b49 \u90a3\u5c31\u51c6\u5907 \u4ece\u73b0\u6709\u961f\u5217\u4e2d\u9009\u62e9\u4e00\u4f4d\u8fde\u63a5\n        groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());\n        groupName = linkedHashSetGetByIndex(groupNameSet, groupIndex);\n        ncSet = groupPool.get(groupName);\n        if(null != ncSet){\n            // \u5982\u679c\u5f53\u524d\u5f00", "first_line_groundtruth": "() < lintConf.getClientMaxConnCount()){", "first_line_prediction": "() < lintConf.getMaxClientPerGroup()){", "match": 0}
{"groundtruth": "if(null == conf.getAddress()){", "prediction": " Bootstrap bootstrap = new Bootstrap();\n         bootstrap.group(new NioEventLoopGroup())\n                 .channel(NioSocketChannel.class)\n                 .handler(new ChannelInitializer<NioSocketChannel>() {\n                     @Override\n                     protected void initChannel(NioSocketChannel ch) throws Exception {\n                         ChannelPipeline pipeline = ch.pipeline();\n                         pipeline.addLast(new NettyClientHandler(conf));\n                     }\n                 });\n         ChannelFuture channelFuture = bootstrap.connect(new InetSocketAddress(conf.getHost(), conf.getPort())).sync();\n         ch = (NioSocketChannel) channelFuture.channel();\n    }\n\n    public static void main(String[] args", "first_line_groundtruth": "if(null == conf.getAddress()){", "first_line_prediction": " Bootstrap bootstrap = new Bootstrap();", "match": 0}
{"groundtruth": ".writeBytes(innerMsg.getRequestHeader().toBytesArray());", "prediction": ".writeBytes(innerMsg.getRequestHeader().toBytes());\n\n            // \u5199\u51fabody\n            byteBuf.writeBytes(innerMsg.getRequestBody().toBytes());\n        }\n    }", "first_line_groundtruth": ".writeBytes(innerMsg.getRequestHeader().toBytesArray());", "first_line_prediction": ".writeBytes(innerMsg.getRequestHeader().toBytes());", "match": 0}
{"groundtruth": "requestBody.setRes(res);", "prediction": " // \u54cd\u5e94\u7ed3\u679c\n            RequestBody resBody = new RequestBody();\n            resBody.setRes(res);\n            RequestContent resContent = new RequestContent();\n            resContent.setRequestBody(resBody);\n            resContent.setRequestHeader(requestHeader);\n            ctx.writeAndFlush(resContent);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }", "first_line_groundtruth": "requestBody.setRes(res);", "first_line_prediction": " // \u54cd\u5e94\u7ed3\u679c", "match": 0}
{"groundtruth": "NettyClient> closeCallback = conf.getCloseCallback();", "prediction": "NettyClient> closeCallback = conf.getCloseCallback();\n        if(Objects.nonNull(closeCallback)){\n            closeCallback.accept(this);\n        }\n    }", "first_line_groundtruth": "NettyClient> closeCallback = conf.getCloseCallback();", "first_line_prediction": "NettyClient> closeCallback = conf.getCloseCallback();", "match": 1}
{"groundtruth": "bs.connect(conf.getAddress()).sync();", "prediction": " bs.connect(new InetSocketAddress(conf.getAddress(), conf.getPort())).sync();\n            if(f.isSuccess()){\n                ch = (NioSocketChannel) f.channel();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }finally {\n            workGroup.shutdownGracefully();\n        }\n    }\n\n    public void close(){\n        if(ch != null){\n            ch.close();\n        }\n    }\n\n    public static class NettyConf {\n        private String address;\n        private int port;\n\n        public String getAddress() {\n            return address;\n        }\n\n        public void setAddress(String address", "first_line_groundtruth": "bs.connect(conf.getAddress()).sync();", "first_line_prediction": " bs.connect(new InetSocketAddress(conf.getAddress(), conf.getPort())).sync();", "match": 0}
{"groundtruth": ".setLength(requestBody.toBytesArray().length);", "prediction": ".setRequestId(requestBody.getRequestId());\n        requestHeader.setResponseType(requestBody.getResponseType());\n        requestHeader.setResponseCode(requestBody.getResponseCode());\n        requestHeader.setResponseMsg(requestBody.getResponseMsg());\n\n        // \u53d1\u9001\u54cd\u5e94\n        ExecuteThread.execute(new Runnable() {\n            @Override\n            public void run() {\n                ctx.writeAndFlush(content);\n            }\n        });\n    }", "first_line_groundtruth": ".setLength(requestBody.toBytesArray().length);", "first_line_prediction": ".setRequestId(requestBody.getRequestId());", "match": 0}
{"groundtruth": "Objects.hash(conf.getAddress().getHostName(), conf.getAddress().getPort());", "prediction": "31 * Objects.hash(conf);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        NettyClient that = (NettyClient) obj;\n        return Objects.equals(conf, that.conf);\n    }", "first_line_groundtruth": "Objects.hash(conf.getAddress().getHostName(), conf.getAddress().getPort());", "first_line_prediction": "31 * Objects.hash(conf);", "match": 0}
{"groundtruth": "loadBalancePolicy.getClientIndex(addressSet.size());", "prediction": "0;\n                    groupNameSet = new LinkedHashSet<>();\n                    for(InetSocketAddress address : addressSet){\n                        NettyClient nettyClient = new NettyClient(\n                                new NettyConf(lintConf.getNettyConf()),\n                                new ClientFactory(address, clientIndex++)\n                        );\n                        groupNameSet.add(nettyClient.getGroupName());\n                        groupPool.putIfAbsent(nettyClient.getGroupName(), new LinkedHashSet<>());\n                        groupPool.get(nettyClient.getGroupName()).add(nettyClient);\n                    }\n                    servicePool.put(serviceName, groupNameSet);\n                }\n            }finally {\n                r", "first_line_groundtruth": "loadBalancePolicy.getClientIndex(addressSet.size());", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "factory = ClientFactory.getInstance();", "prediction": " clientFactory = ClientFactory.getInstance();\n        NettyClient ch = clientFactory.createClient(conf);\n        return ch;\n    }\n\n    private String getGroupName(InetSocketAddress address){\n        return address.getHostName() + \":\" + address.getPort();\n    }\n\n    private InetSocketAddress linkedHashSetGetByIndex(\n            LinkedHashSet<InetSocketAddress> linkedHashSet, int index){\n        int i = 0;\n        for (InetSocketAddress inetSocketAddress : linkedHashSet) {\n            if(i == index){\n                return inetSocketAddress;\n            }\n            i++;\n        }\n        return null;\n    }\n\n    private String linkedHashSetGetByIndex(", "first_line_groundtruth": "factory = ClientFactory.getInstance();", "first_line_prediction": " clientFactory = ClientFactory.getInstance();", "match": 0}
{"groundtruth": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());", "prediction": " clientIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());\n        InetSocketAddress inetSocketAddress =\n                linkedHashSetGetByIndex(addressSet, clientIndex);\n\n        ch = createClient(serviceName, inetSocketAddress);\n        return put(serviceName, ch);\n    }\n\n    private NettyClient createClient(String serviceName, InetSocketAddress inetSocketAddress){\n        NettyConf conf = new NettyConf();\n        conf.setAddress(inetSocketAddress);\n        conf.setServiceName(serviceName);\n        NettyClient ch = ClientFactory.createClient(conf);\n        return ch;\n    }\n\n    private NettyClient put(String serviceName,", "first_line_groundtruth": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());", "first_line_prediction": " clientIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());", "match": 0}
{"groundtruth": "msg.getMessage());", "prediction": "msg.getMessage());\n        this.code = msg.getCode();\n        this.errorMessage = msg.getMessage();\n    }\n\n    public Integer getCode() {\n        return code;\n    }\n\n    public void setCode(Integer code) {\n        this.code = code;\n    }\n\n    public String getErrorMessage() {\n        return errorMessage;\n    }\n\n    public void setErrorMessage(String errorMessage) {\n        this.errorMessage = errorMessage;\n    }", "first_line_groundtruth": "msg.getMessage());", "first_line_prediction": "msg.getMessage());", "match": 1}
{"groundtruth": "requestHeader.getLength()){", "prediction": " requestHeader.getBodyLength()){\n                buff.resetReaderIndex();\n                return;\n            }\n\n            // \u6807\u8bb0\u8bfb\u53d6\u4f4d\u7f6e\n            buff.markReaderIndex();\n\n            // \u8bfb\u53d6\u6d88\u606f\u4f53\n            byte[] bodyByteArray = new byte[requestHeader.getBodyLength()];\n            buff.readBytes(bodyByteArray);\n\n            RequestContent requestContent = null;\n            try(ByteArrayInputStream in = new ByteArrayInputStream(bodyByteArray);\n                ObjectInputStream ois = new ObjectInputStream(in);\n                 ) {\n\n                requestContent = (RequestContent) ois.readObject();\n            } catch (IOException | ClassNotFoundException e) {\n                e.printStackTrace();\n           ", "first_line_groundtruth": "requestHeader.getLength()){", "first_line_prediction": " requestHeader.getBodyLength()){", "match": 0}
{"groundtruth": "()) && this.getBody().build()) {", "prediction": "())) {\n            CompletableFuture.runAsync(() -> {\n                try {\n                    URL url = new URL(this.getUrl());\n                    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n                    connection.setDoOutput(true);\n                    connection.setRequestMethod(\"POST\");\n                    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n                    connection.setRequestProperty(\"User-Agent\", \"libasynDiscordWebHook-API\");\n                    connection.setRequestProperty(\"Content-Length\", String.valueOf(this.getBody().toString().length()));\n                    connection.setUseCaches(false);\n                    connection.setConnectTimeout", "first_line_groundtruth": "()) && this.getBody().build()) {", "first_line_prediction": "())) {", "match": 0}
{"groundtruth": ".getRequestId(), lintConf.getRequestWaitTimeBySeconds());", "prediction": ".getRequestId(),\n                    lintConf.getRpcTimeout()\n            );\n\n            // \u89e3\u9501\u7ebf\u7a0b\n            CountDownLatchPool.countDown(requestHeader.getRequestId());\n\n            // \u53d6\u51fa\u7ed3\u679c\n            responseMsg = MsgPool.getInstance().get(requestHeader.getRequestId());\n        } catch (Exception e) {\n            throw new RpcException(RpcMsg.EXCEPTION_RPC_ERROR, e);\n        } finally {\n            nc.close();\n        }\n\n        long endTime = System.currentTimeMillis();\n        System.out.println(\"rpc method: \" + methodName + \" cost time: \" + (endTime - startTime) + \"", "first_line_groundtruth": ".getRequestId(), lintConf.getRequestWaitTimeBySeconds());", "first_line_prediction": ".getRequestId(),", "match": 0}
{"groundtruth": ".getBody().toJson().getBytes());", "prediction": ".getBody().toArray().toString().getBytes());\n                    stream.flush();\n                    stream.close();\n\n                    int responseCode = connection.getResponseCode();\n                    if (responseCode != HttpsURLConnection.HTTP_OK) {\n                        throw new Exception(\"Error response code: \" + responseCode);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n    }", "first_line_groundtruth": ".getBody().toJson().getBytes());", "first_line_prediction": ".getBody().toArray().toString().getBytes());", "match": 0}
{"groundtruth": "(embed.toArray().entrySet())));", "prediction": "(embed.toArray().entrySet())));\n\n        if (!embedList.isEmpty()) {\n            result.put(\"embeds\", embedList.toArray());\n        }\n\n        if (this.isForum()) result.put(\"thread\", this.getForumTitle());\n\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"Base(content=\" + this.getContent() + \",username=\" + this.getUsername() + \",avatar=\" + this.getAvatar() + \",textToSpeech=\" + this.isTextToSpeech() + \",embeds=\" + this.getEmbeds() + \",thread=\" +", "first_line_groundtruth": "(embed.toArray().entrySet())));", "first_line_prediction": "(embed.toArray().entrySet())));", "match": 1}
{"groundtruth": "NPCs.search().indexIs(index).first().flatMap(npc ->\n\t\t{", "prediction": " NPCs.search().indexIs(index).first().flatMap(npc ->\n\t\t{\n\t\t\tMousePackets.queueClickPacket();\n\t\t\tNPCPackets.queueNPCAction(npc, actions);\n\t\t\treturn Optional.of(true);\n\t\t}).orElse(false);", "first_line_groundtruth": "NPCs.search().indexIs(index).first().flatMap(npc ->", "first_line_prediction": " NPCs.search().indexIs(index).first().flatMap(npc ->", "match": 0}
{"groundtruth": "return Bank.search().indexIs(index).first().flatMap(item ->\n\t\t{", "prediction": "\treturn Bank.search().indexIs(index).first().flatMap(item ->\n\t\t\t{\n\t\t\tMousePackets.queueClickPacket();\n\t\t\tWidgetPackets.queueWidgetAction(item, actions);\n\t\t\treturn Optional.of(true);\n\t\t\t})\n\t\t\t.orElse(false);", "first_line_groundtruth": "return Bank.search().indexIs(index).first().flatMap(item ->", "first_line_prediction": "\treturn Bank.search().indexIs(index).first().flatMap(item ->", "match": 0}
{"groundtruth": "return repository.findByEmailSent(false);", "prediction": " List<ContactForm> forms = repository.findByEmailSent(false);\n             List<ContactForm> result = new ArrayList<>();\n             for (ContactForm form : forms){\n                 if(form.getEmailSent()){\n                     result.add(form);\n                 }\n             }\n             return result;\n         }\n    }", "first_line_groundtruth": "return repository.findByEmailSent(false);", "first_line_prediction": " List<ContactForm> forms = repository.findByEmailSent(false);", "match": 0}
{"groundtruth": "Players.search().filter(predicate).first().flatMap(Player ->\n\t\t{", "prediction": " Players.search().filter(predicate).first().flatMap(player ->\n\t\t{\n\t\t\tMousePackets.queueClickPacket();\n\t\t\tPlayerPackets.queuePlayerAction(player, actions);\n\t\t\treturn Optional.of(true);\n\t\t}).orElse(false);", "first_line_groundtruth": "Players.search().filter(predicate).first().flatMap(Player ->", "first_line_prediction": " Players.search().filter(predicate).first().flatMap(player ->", "match": 0}
{"groundtruth": "= pluginLoader.getPluginFactories();", "prediction": " = pluginLoader.getFactories();\n        for (String key : factories.keySet()) {\n            PluginFactory factory = factories.get(key);\n            PluginStore.instance.plugins.put(key, factory.createPlugin());\n        }\n    }\n\n    @PreDestroy\n    public void destroy() {\n        log.info(\"Destroying application\");\n        for (String key : PluginStore.instance.plugins.keySet()) {\n            PluginStore.instance.plugins.get(key).onShutdown();\n        }\n    }", "first_line_groundtruth": "= pluginLoader.getPluginFactories();", "first_line_prediction": " = pluginLoader.getFactories();", "match": 0}
{"groundtruth": "BankInventory.search().indexIs(index).first().flatMap(item ->\n\t\t{", "prediction": " BankInventory.search().indexIs(index).first().flatMap(item ->\n\t\t\t{\n\t\t\tMousePackets.queueClickPacket();\n\t\t\tWidgetPackets.queueWidgetAction(item, actions);\n\t\t\treturn Optional.of(true);\n\t\t\t})\n\t\t\t.orElse(false);", "first_line_groundtruth": "BankInventory.search().indexIs(index).first().flatMap(item ->", "first_line_prediction": " BankInventory.search().indexIs(index).first().flatMap(item ->", "match": 0}
{"groundtruth": "handler.onCommand(command, arguments);", "prediction": " handler.onCommand(command, arguments);\n            if (result) {\n                break;\n            }\n        }\n    }", "first_line_groundtruth": "handler.onCommand(command, arguments);", "first_line_prediction": " handler.onCommand(command, arguments);", "match": 0}
{"groundtruth": "NPCs.search().filter(predicate).first().flatMap(npc ->\n\t\t{", "prediction": " NPCs.search().filter(predicate).first().flatMap(npc ->\n\t\t\t{\n\t\t\tMousePackets.queueClickPacket();\n\t\t\tNPCPackets.queueNPCAction(npc, actions);\n\t\t\treturn Optional.of(true);\n\t\t\t})\n\t\t\t.orElse(false);", "first_line_groundtruth": "NPCs.search().filter(predicate).first().flatMap(npc ->", "first_line_prediction": " NPCs.search().filter(predicate).first().flatMap(npc ->", "match": 0}
{"groundtruth": "EasyContactFormsApplication.loadPlugins(pluginsPath);", "prediction": " PluginLoader pluginLoader = new PluginLoader(new File(pluginsPath));\n         Map<String, PluginFactory> factories = pluginLoader.getPluginFactories();\n         for (String key : factories.keySet()) {\n             PluginStore.instance.plugins.put(key, factories.get(key).build());\n         }\n    }\n\n    /**\n     * shuts down the server\n     * @param args command line arguments\n     */\n    private void shutdown(String[] args) {\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            log.error(\"Interrupted while waiting for shutdown\");", "first_line_groundtruth": "EasyContactFormsApplication.loadPlugins(pluginsPath);", "first_line_prediction": " PluginLoader pluginLoader = new PluginLoader(new File(pluginsPath));", "match": 0}
{"groundtruth": "BufferMethods.du(buffer, (Integer) input);", "prediction": "\twriteObject(ObfuscatedNames.bufferArrayField, buffer, input);\n\t\t\t\t\twriteObject(ObfuscatedNames.bufferOffsetField, buffer, input);\n\t\t\t\tbreak;\n\t\t\tcase \"du\":\n\t\t\t\t\twriteObject(ObfuscatedNames.bufferArrayField, buffer, input);\n\t\t\t\t\twriteObject(ObfuscatedNames.bufferOffsetField, buffer, input);\n\t\t\t\tbreak;\n\t\t\tcase \"du\":\n\t\t\t\t\twriteObject(ObfuscatedNames.bufferArrayField, buffer, input);\n\t\t\t\t\twriteObject(ObfuscatedNames.bufferOffsetField, buffer, input);\n\t\t\t\tbreak;\n\t\t\tcase \"du\":\n\t\t\t\t\twrite", "first_line_groundtruth": "BufferMethods.du(buffer, (Integer) input);", "first_line_prediction": "\twriteObject(ObfuscatedNames.bufferArrayField, buffer, input);", "match": 0}
{"groundtruth": "<ContactForm> forms = contactFormService.getContactForms(true);", "prediction": "<ContactForm> notSendMails = contactFormService.getNotSendMails();\n            for(ContactForm contactForm : notSendMails){\n                try {\n                    sendMail(contactForm);\n                } catch (MessagingException e) {\n                    log.error(\"Could not connect to smtp server\");\n                    ApplicationState.smtpAvailable = false;\n                } catch (UnsupportedEncodingException e) {\n                    log.error(\"Could not connect to smtp server\");\n                    ApplicationState.smtpAvailable = false;\n                }\n            }\n        }else{\n            List<ContactForm> allMails = contactFormService.getAllMails();", "first_line_groundtruth": "<ContactForm> forms = contactFormService.getContactForms(true);", "first_line_prediction": "<ContactForm> notSendMails = contactFormService.getNotSendMails();", "match": 0}
{"groundtruth": "lastRange.covers(previous)) {", "prediction": "previous.getEnd() == lastRange.getEnd()) {\n                    lastRange = lastRange.merge(previous);\n                    iterator.remove();\n                } else {\n                    lastRange = previous;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Gets the {@link Optional<Pair>} of {@link TokenRange} and {@link Style} at the given position.\n     *\n     * @param position The current cursor position.\n     *\n     * @return An {@link Optional<Pair>} of {@link TokenRange} and {@link Style} at the given position, or an empty optional if out of bounds.\n     */\n    public Optional", "first_line_groundtruth": "lastRange.covers(previous)) {", "first_line_prediction": "previous.getEnd() == lastRange.getEnd()) {", "match": 0}
{"groundtruth": "Widget bow = HypsApiPlugin.getItem(\"*bow*\");", "prediction": "\tMousePackets.queueClickPacket();\n\t\t\t\t\tWidgetPackets.queueWidgetActionPacket(1, 5046276, -1, 11); //quickPrayer magic\n\t\t\t}\n\t\t\telse if (HypsApiPlugin.getHeadIcon(hunllef) == HeadIcon.RANGE && (!name.contains(\"sword\") && !name.contains(\"mace\")))\n\t\t\t{\n\t\t\t\tMousePackets.queueClickPacket();\n\t\t\t\tWidgetPackets.queueWidgetActionPacket(1, 5046276, -1, 10); //quickPr", "first_line_groundtruth": "Widget bow = HypsApiPlugin.getItem(\"*bow*\");", "first_line_prediction": "\tMousePackets.queueClickPacket();", "match": 0}
{"groundtruth": "<Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();", "prediction": "<Widget> ring_of_health = Inventory.search().withId(RING_OF_WEALTH).first();\n\t\t\t\tif (royal_seed_pod.isPresent() && ring_of_health.isPresent())\n\t\t\t\t{\n\t\t\t\t\tWidgetPackets.queueWidgetAction(ring_of_health.get(), \"Eat\");\n\t\t\t\t\tWidgetPackets.queueWidgetAction(royal_seed_pod.get(), \"Eat\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (previousLevel != level)\n\t\t\t{\n\t\t\t\tpreviousLevel = level;\n\t\t\t\tOptional<Widget> royal_", "first_line_groundtruth": "<Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();", "first_line_prediction": "<Widget> ring_of_health = Inventory.search().withId(RING_OF_WEALTH).first();", "match": 0}
{"groundtruth": "lastRange.addRange(previous);", "prediction": " lastRange = lastRange.merge(previous);\n                } else {\n                    iterator.add(lastRange);\n                    lastRange = previous;\n                }\n            }\n        }\n        iterator.add(lastRange);\n    }\n    \n    /**\n     * Gets the {@link Optional<Pair>} of {@link TokenRange} and {@link Style} at the given position.\n     *\n     * @param position The current cursor position.\n     *\n     * @return An {@link Optional<Pair>} of {@link TokenRange} and {@link Style} at the given position, or an empty optional if out of bounds.\n     */\n    public Optional<", "first_line_groundtruth": "lastRange.addRange(previous);", "first_line_prediction": " lastRange = lastRange.merge(previous);", "match": 0}
{"groundtruth": "tokens.add(range.recalculate());", "prediction": "lastRange = TokenRange.encompassing(this.lastRange, range);\n        return range;\n    }\n    \n    @Override\n    public void accept(final String search) {\n        \n        StringSearcher.search(search, this, FormattingContext.empty());\n    }\n    \n    @Override\n    public void accept(final FormattingContext context) {\n        \n        context.accept(this);\n    }\n    \n    @Override\n    public FormattedCharSequence apply(final String currentString, final Integer offset) {\n        \n        return new FormattedCharSequence(currentString, tokens);\n    }", "first_line_groundtruth": "tokens.add(range.recalculate());", "first_line_prediction": "lastRange = TokenRange.encompassing(this.lastRange, range);", "match": 0}
{"groundtruth": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();", "prediction": "> widget = client.getWidget(WidgetInfo.PVP_WILDERNESS_LEVEL);\n\t\t\t\tif (widget.isPresent())\n\t\t\t\t{\n\t\t\t\t\twidget.get().setText(\"Level: \" + level);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (previousLevel != level)\n\t\t\t{\n\t\t\t\tpreviousLevel = level;\n\t\t\t\tOptional<Widget> widget = client.getWidget(WidgetInfo.PVP_WILDERNESS_LEVEL);\n\t\t\t\tif (widget.isPresent())\n\t\t\t\t{\n\t\t\t\t\twidget.get().setText(\"Level: \" + level);\n\t\t\t\t}\n\t\t\t", "first_line_groundtruth": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();", "first_line_prediction": "> widget = client.getWidget(WidgetInfo.PVP_WILDERNESS_LEVEL);", "match": 0}
{"groundtruth": "> widget = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();", "prediction": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();\n\t\t\t\tOptional<Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();\n\t\t\t\tif (royal_seed_pod.isPresent() || ring_of_wealth.isPresent() || (rowEquipment != null && RING_OF_WEALTH_ITEM_IDS.contains(rowEquipment.getId())))\n\t\t\t\t{\n\t\t\t\t\tteleported = true;\n\t\t\t\t}\n\t\t\t\tif (teleported)\n\t\t\t\t", "first_line_groundtruth": "> widget = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();", "first_line_prediction": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();", "match": 0}
{"groundtruth": "StringSearcher.search(search, this);", "prediction": "", "first_line_groundtruth": "StringSearcher.search(search, this);", "first_line_prediction": "", "match": 0}
{"groundtruth": "basicParameter.getApiUrl() == null) {", "prediction": "basicParameter.isSslEnable()) {\n            builder.setSSLContext(basicParameter.getSslContext());\n        }\n    }", "first_line_groundtruth": "basicParameter.getApiUrl() == null) {", "first_line_prediction": "basicParameter.isSslEnable()) {", "match": 0}
{"groundtruth": "cliRunner.start();", "prediction": " return getConnection(cliRunner.getPort(), cliRunner.getSessionToken(), Optional.of(cliRunner));\n        } catch (Exception e) {\n            LOG.error(\"Failed to initialize connection with engine from automatic provisioning\", e);\n            throw e;\n        }\n    }\n\n    private static Connection getConnection(int port, String sessionToken, Optional<CLIRunner> daggerRunner) throws IOException {\n        Vertx vertx = Vertx.vertx();\n        VertxDynamicGraphQLClientBuilder builder = VertxDynamicGraphQLClientBuilder.newBuilder()\n                .url(\"http://localhost:\" + port + \"/graphql\")\n                .vertx(vertx", "first_line_groundtruth": "cliRunner.start();", "first_line_prediction": " return getConnection(cliRunner.getPort(), cliRunner.getSessionToken(), Optional.of(cliRunner));", "match": 0}
{"groundtruth": "Widget> row = Inventory.search().nameContains(\"Ring of wealth (\").first();", "prediction": "Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();\n\t\t\t\tif (ring_of_wealth.isPresent())\n\t\t\t\t\t{\n\t\t\t\t\tteleported = true;\n\t\t\t\t\tInventoryInteraction.useItem(ring_of_wealth.get(), \"Commune\");\n\t\t\t\t\t}\n\t\t\t\tif (teleported)\n\t\t\t\t\t{\n\t\t\t\t\tteleportedFromSkulledPlayer = true;\n\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\tOptional<Widget> ring_of_wealth_item = Inventory.search().withId(RING_OF", "first_line_groundtruth": "Widget> row = Inventory.search().nameContains(\"Ring of wealth (\").first();", "first_line_prediction": "Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();", "match": 0}
{"groundtruth": "connectParams = cliRunner.getConnectionParams();", "prediction": " params = cliRunner.getConnectionParams();\n            return getConnection(params.port, params.token, Optional.of(cliRunner));\n        } catch (Exception e) {\n            LOG.error(\"Failed to connect to engine\", e);\n            throw e;\n        }\n    }\n\n    private static Connection getConnection(int port, String sessionToken, Optional<CLIRunner> daggerRunner) {\n        Vertx vertx = Vertx.vertx();\n        VertxDynamicGraphQLClientBuilder builder = VertxDynamicGraphQLClientBuilder.newBuilder()\n                .url(\"http://localhost:\" + port + \"/graphql\")\n                .vertx(vertx", "first_line_groundtruth": "connectParams = cliRunner.getConnectionParams();", "first_line_prediction": " params = cliRunner.getConnectionParams();", "match": 0}
{"groundtruth": "(BufferedInputStream in = new BufferedInputStream(fetcher.fetch(checksumMapURL))) {", "prediction": " (InputStream in = fetcher.fetch(checksumMapURL)) {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    String[] parts = line.split(\" \");\n                    checksums.put(parts[0], parts[1]);\n                }\n            }\n        }\n        return checksums;\n    }\n\n    private String extractCLI(String archiveName, String version, Path tmpBin) throws IOException {\n        try (InputStream in = fetcher.fetch(archiveName)) {\n            try (", "first_line_groundtruth": "(BufferedInputStream in = new BufferedInputStream(fetcher.fetch(checksumMapURL))) {", "first_line_prediction": " (InputStream in = fetcher.fetch(checksumMapURL)) {", "match": 0}
{"groundtruth": "parameter.setInit_images(new String[]{", "prediction": "\tparameter.setBase64Image(base64String);\n\t\tSdResponses res = Img2Img.generate(parameter);\n\t\tfor (String image : res.getImages()) {\n\t\t\tBufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(Base64.getDecoder().decode(image)));\n\t\t\tFile output = new File(\"image.png\");\n\t\t\tImageIO.write(bufferedImage, \"png\", output);\n\t\t}", "first_line_groundtruth": "parameter.setInit_images(new String[]{", "first_line_prediction": "\tparameter.setBase64Image(base64String);", "match": 0}
{"groundtruth": "parameter.setDenoisingStrength(new BigDecimal(\"0.55\"));", "prediction": "\tparameter.setScale(new BigDecimal(0.5));\n\t\t\t//\u5982\u9700\u8981\u4ee3\u7406\u5219\u89e3\u5f00\u4e0b\u5217\u4ee3\u7801\u6ce8\u91ca", "first_line_groundtruth": "parameter.setDenoisingStrength(new BigDecimal(\"0.55\"));", "first_line_prediction": "\tparameter.setScale(new BigDecimal(0.5));", "match": 0}
{"groundtruth": "cliRunner.shutdown();", "prediction": " LOG.error(\"Failed to connect to Dagger engine\", ioe);\n             throw ioe;\n        }\n    }\n\n    static Connection getConnection(int port, String sessionToken, Optional<CLIRunner> daggerRunner) throws IOException {\n        Vertx vertx = Vertx.vertx();\n        VertxDynamicGraphQLClientBuilder builder = VertxDynamicGraphQLClientBuilder.newBuilder()\n                .url(\"http://localhost:\" + port + \"/graphql\")\n                .vertx(vertx);\n        DynamicGraphQLClient graphQLClient = builder.build();\n        return new Connection(graphQLClient, vertx, daggerRunner);\n    }\n\n    static", "first_line_groundtruth": "cliRunner.shutdown();", "first_line_prediction": " LOG.error(\"Failed to connect to Dagger engine\", ioe);", "match": 0}
{"groundtruth": "new BufferedInputStream(new DigestInputStream(fetcher.fetch(cliArchiveURL), sha256))) {", "prediction": " fetcher.fetch(cliArchiveURL);\n             DigestInputStream digestIn = new DigestInputStream(in, sha256);\n             ArchiveInputStream archiveIn = getArchiveInputStream(digestIn)) {\n            ArchiveEntry entry;\n            while ((entry = archiveIn.getNextEntry()) != null) {\n                if (entry.isDirectory()) {\n                    continue;\n                }\n                Path destPath = dest.resolve(entry.getName());\n                LOG.info(\"Extracting \" + entry.getName() + \" to \" + destPath);\n                try (OutputStream out = Files.newOutputStream(destPath)) {\n                    byte[] buffer = new", "first_line_groundtruth": "new BufferedInputStream(new DigestInputStream(fetcher.fetch(cliArchiveURL), sha256))) {", "first_line_prediction": " fetcher.fetch(cliArchiveURL);", "match": 0}
{"groundtruth": "(serviceConnection.isEmpty()) tokens.add(token);", "prediction": " (serviceConnection.isEmpty()) {\n                tokens.add(token);\n            }\n        }\n        for (String token : tokens) {\n            map.remove(token);\n            IBinder service = services.remove(token);\n            if (service != null) dhizuku.unbindUserService(token);\n        }\n    }\n\n    static void died(@NonNull IDhizuku dhizuku, @NonNull DhizukuUserServiceArgs args) throws RemoteException {\n        ComponentName name = args.getComponentName();\n        String token = name.flattenToString();\n        DhizukuServiceConnection serviceConnection = map", "first_line_groundtruth": "(serviceConnection.isEmpty()) tokens.add(token);", "first_line_prediction": " (serviceConnection.isEmpty()) {", "match": 0}
{"groundtruth": "args.build());", "prediction": "iDhizukuUserServiceConnection);\n    }\n\n    static void bind(@NonNull IDhizuku dhizuku, @NonNull DhizukuUserServiceArgs args, @NonNull ServiceConnection connection) throws RemoteException {\n        ComponentName name = args.getComponentName();\n        String token = name.flattenToString();\n        IBinder service = services.get(token);\n        if (service == null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());\n        map.put(token, new DhizukuServiceConnection(connection));\n    }\n\n    static void unbind", "first_line_groundtruth": "args.build());", "first_line_prediction": "iDhizukuUserServiceConnection);", "match": 0}
{"groundtruth": ".update(SharedDataModel.getReservation());", "prediction": ".update(SharedDataModel.getReservation());\n        Stage currentStage = (Stage) btnPay.getScene().getWindow();\n        currentStage.close();\n    }\n\n    @javafx.fxml.FXML\n    public void handleCancel(ActionEvent actionEvent) {\n        Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n        currentStage.close();\n    }", "first_line_groundtruth": ".update(SharedDataModel.getReservation());", "first_line_prediction": ".update(SharedDataModel.getReservation());", "match": 1}
{"groundtruth": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());", "prediction": " == null) {\n            service = dhizuku.getService(name);\n            services.put(token, service);\n        }\n        map.put(token, new DhizukuServiceConnection(args));\n        service.linkToDeath(iDhizukuUserServiceConnection, 0);\n    }\n\n    static void stop(@NonNull IDhizuku dhizuku, @NonNull DhizukuUserServiceArgs args) throws RemoteException {\n        ComponentName name = args.getComponentName();\n        String token = name.flattenToString();\n        IBinder service = services.get(token);\n        if (", "first_line_groundtruth": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());", "first_line_prediction": " == null) {", "match": 0}
{"groundtruth": "SharedDataModel.getReservation().state = \"paid\";", "prediction": " Reservation reservation = SharedDataModel.getReservation();\n         ReservationDAO.update(reservation);\n         Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n         currentStage.close();\n    }\n\n    @javafx.fxml.FXML\n    public void handleCancel(ActionEvent actionEvent) {\n        Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n        currentStage.close();\n    }", "first_line_groundtruth": "SharedDataModel.getReservation().state = \"paid\";", "first_line_prediction": " Reservation reservation = SharedDataModel.getReservation();", "match": 0}
{"groundtruth": "customer = CustomerDAO.getCustomerbyID(kundenID);", "prediction": "court = platz;\n    }\n\n    public Reservation(int court, int court_count, int sessions, Customer customer, Date date, int customerID) {\n        this.court = court;\n        this.court_count = court_count;\n        this.sessions = sessions;\n        this.customer = customer;\n        this.date = date;\n        this.cusomerID = customerID;\n    }\n\n    public Reservation(int court, int court_count, int sessions, Customer customer, Date date, int customerID, String state) {\n        this.court = court;\n       ", "first_line_groundtruth": "customer = CustomerDAO.getCustomerbyID(kundenID);", "first_line_prediction": "court = platz;", "match": 0}
{"groundtruth": "(), connectParams.getSessionToken(), Optional.of(cliRunner));", "prediction": "(), connectParams.getSessionToken(), Optional.of(cliRunner));\n        } catch (Exception e) {\n            LOG.error(\"Failed to initialize connection with engine\", e);\n            throw e;\n        }\n    }\n\n    private static Connection getConnection(int port, String sessionToken, Optional<CLIRunner> daggerRunner) {\n        Vertx vertx = Vertx.vertx();\n        VertxDynamicGraphQLClientBuilder builder = VertxDynamicGraphQLClientBuilder.newBuilder()\n                .url(\"http://localhost:\" + port + \"/graphql\")\n                .vertx(vertx);\n        DynamicGraphQLClient graphQLClient = builder.build();", "first_line_groundtruth": "(), connectParams.getSessionToken(), Optional.of(cliRunner));", "first_line_prediction": "(), connectParams.getSessionToken(), Optional.of(cliRunner));", "match": 1}
{"groundtruth": "Schema.initialize(in);", "prediction": " new Schema(in);\n            CodegenVisitor codegenVisitor = new CodegenVisitor(dest, outputEncoding);\n            schema.accept(new SchemaVisitor(codegenVisitor));\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"Failed to read schema\", e);\n        }\n    }\n\n    private InputStream daggerSchema() throws IOException {\n        if (online) {\n            return onlineSchema();\n        } else {\n            return localSchema();\n        }\n    }\n\n    private InputStream onlineSchema() throws IOException {\n        URL url = new URL(introspectionQuertyURL);\n        try (InputStream in = url.openStream()) {\n           ", "first_line_groundtruth": "Schema.initialize(in);", "first_line_prediction": " new Schema(in);", "match": 0}
{"groundtruth": "().info(String.format(\"Generating scala %s\", type.getName()));", "prediction": "().info(\"Visiting scalar: \" + type.getName());\n                    codegen.visit(type);\n                }\n\n                @Override\n                public void visitObject(Type type) {\n                    getLog().info(\"Visiting object: \" + type.getName());\n                    codegen.visit(type);\n                }\n\n                @Override\n                public void visitEnum(Type type) {\n                    getLog().info(\"Visiting enum: \" + type.getName());\n                    codegen.visit(type);\n                }\n            });\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"Failed to read schema\", e);\n        }\n    }\n\n    private", "first_line_groundtruth": "().info(String.format(\"Generating scala %s\", type.getName()));", "first_line_prediction": "().info(\"Visiting scalar: \" + type.getName());", "match": 0}
{"groundtruth": "= \"```\" + (isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";", "prediction": " = Pattern.compile(\"\\\\{toplist\\\\}\", Pattern.CASE_INSENSITIVE).matcher(description).replaceAll(topList.getTopListString(isHigherBetter));\n\n        //{toplist_position} placeholder\n        String replacement2  = Pattern.compile(\"\\\\{toplist_position\\\\}\", Pattern.CASE_INSENSITIVE).matcher(replacement1).replaceAll(topList.getTopListPositionString(isHigherBetter));\n\n        //{toplist_position_with_prefix} placeholder\n        String replacement3  = Pattern.compile(\"\\\\{toplist_position_with_prefix\\\\}\", Pattern.", "first_line_groundtruth": "= \"```\" + (isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";", "first_line_prediction": " = Pattern.compile(\"\\\\{toplist\\\\}\", Pattern.CASE_INSENSITIVE).matcher(description).replaceAll(topList.getTopListString(isHigherBetter));", "match": 0}
{"groundtruth": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());", "prediction": "maxNameLength + 3) + \"s %d%s\", i++, name, intValue, leaderboardConfig.getMetric());\n                }\n            } else {\n                DecimalFormat df = new DecimalFormat(\"#.\" + new String(\"0\".repeat(numberOfFloatingPoints)));\n                df.setRoundingMode(RoundingMode.HALF_UP);\n                formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %s%s\", i++, name, df.format(score), leaderboardConfig.getMetric());\n            }\n            sb.append(formattedEntry);\n       ", "first_line_groundtruth": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());", "first_line_prediction": "maxNameLength + 3) + \"s %d%s\", i++, name, intValue, leaderboardConfig.getMetric());", "match": 0}
{"groundtruth": "(isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";", "prediction": " topList.getTopListString(isForWebhook) + \"```\";\n        description = description.replace(\"{toplist}\", replacement1);\n\n        //{rank} placeholder\n        String replacement2 = \"```\" +  topList.getRankString(isForWebhook) + \"```\";\n        description = description.replace(\"{rank}\", replacement2);\n\n        //{rank} placeholder\n        String replacement3 = \"```\" +  topList.getRankString(isForWebhook) + \"```\";\n        description = description.replace(\"{rank}\", replacement3);\n\n        //{rank} placeholder\n        String replacement4 = \"```", "first_line_groundtruth": "(isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";", "first_line_prediction": " topList.getTopListString(isForWebhook) + \"```\";", "match": 0}
{"groundtruth": ") + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());", "prediction": ") + \"s %d\", i, name, intValue);\n                } else {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %d\", i, name, intValue);\n                }\n            } else {\n                DecimalFormat df = new DecimalFormat(\"#.\" + String.join(\"\", new String[]{\"0\", Integer.toString(numberOfFloatingPoints)}));\n                formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %s\", i, name, df.format(score));\n            }\n            sb", "first_line_groundtruth": ") + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());", "first_line_prediction": ") + \"s %d\", i, name, intValue);", "match": 0}
{"groundtruth": "if (leaderboard.getConfig().getFloatingpoints() > 0){", "prediction": " if (placeholderType.equals(\"name\")) {\n                     replacement = entry.getKey();\n                 } else if (placeholderType.equals(\"score\")) {\n                     replacement = String.format(\"%.\" + numberOfFloatingPoints + \"f\", intValue);\n                 }\n                 description = description.replace(placeholder, replacement);\n            }\n        }\n\n        //{top-1-name} {top-1-score} placeholders\n        pattern = Pattern.compile(\"\\\\{top-(\\\\d+)-(name|score|time)\\\\}\");\n        matcher = pattern.matcher(description);\n        while (matcher.find()) {\n            int position = Integer.parseInt", "first_line_groundtruth": "if (leaderboard.getConfig().getFloatingpoints() > 0){", "first_line_prediction": " if (placeholderType.equals(\"name\")) {", "match": 0}
{"groundtruth": ", Double> playerScores = topList.getTopListAsMap();", "prediction": ", Double> toplistmap = topList.getTopListMap();\n        for (Map.Entry<String, Double> entry : toplistmap.entrySet()) {\n            String name = entry.getKey();\n            double score = entry.getValue();\n            int intValue = (int) score;\n            String formattedEntry = \"\";\n            if (numberOfFloatingPoints <= 0) {\n                if (isForWebhook) {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %d%s\\\\u000A\", i++, name, intValue,", "first_line_groundtruth": ", Double> playerScores = topList.getTopListAsMap();", "first_line_prediction": ", Double> toplistmap = topList.getTopListMap();", "match": 0}
{"groundtruth": "this.leaderboardversion = mainConfig.getPluginVersion();", "prediction": " this.leaderboardversion = mainConfig.getLeaderboardversion();\n        customConfig = new CustomConfig(name);\n        config = customConfig.get();\n        load();\n    }\n\n    //Load leaderboardConfig\n    public void load() {\n        config.addDefault(\"placeholder\", placeholder);\n        config.addDefault(\"top\", top);\n        config.addDefault(\"delay\", delay);\n        config.addDefault(\"refreshOnSent\", refreshOnSent);\n        config.addDefault(\"metric\", metric);\n        config.addDefault(\"higherisbetter\", higherisbetter);\n        config.addDefault(\"floatingpoints\", floating", "first_line_groundtruth": "this.leaderboardversion = mainConfig.getPluginVersion();", "first_line_prediction": " this.leaderboardversion = mainConfig.getLeaderboardversion();", "match": 0}
{"groundtruth": "= customConfig.get();", "prediction": " = customConfig.get();\n        placeholder = config.getString(\"placeholder\");\n        top = config.getInt(\"top\");\n        delay = config.getString(\"delay\");\n        refreshOnSent = config.getBoolean(\"refreshOnSent\");\n        metric = config.getString(\"metric\");\n        higherisbetter = config.getBoolean(\"higherisbetter\");\n        floatingpoints = config.getInt(\"floatingpoints\");\n        webhookurl = config.getString(\"webhookurl\");\n        webhookAvatarUrl = config.getString(\"webhookAvatarUrl\");\n        webhookUserName = config.getString(\"webhookUserName\");\n        embedTitle = config.getString(\"embedTitle\");\n        embed", "first_line_groundtruth": "= customConfig.get();", "first_line_prediction": " = customConfig.get();", "match": 0}
{"groundtruth": "customConfig.setup();", "prediction": " config = customConfig.get();\n        load();\n    }\n\n    //Load leaderboardConfig\n    public void load() {\n        config.addDefault(\"placeholder\", placeholder);\n        config.addDefault(\"top\", top);\n        config.addDefault(\"delay\", delay);\n        config.addDefault(\"refreshOnSent\", refreshOnSent);\n        config.addDefault(\"metric\", metric);\n        config.addDefault(\"higherisbetter\", higherisbetter);\n        config.addDefault(\"floatingpoints\", floatingpoints);\n        config.addDefault(\"webhookurl\", webhookurl);\n        config.addDefault(\"webhookAvatarUrl\", webhook", "first_line_groundtruth": "customConfig.setup();", "first_line_prediction": " config = customConfig.get();", "match": 0}
{"groundtruth": "if (cache.isDiffernt()){", "prediction": " cache.setCache();\n                    break;\n                case \"hourly\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORHOUR){\n                        Cache cache = new Cache(leaderboard);\n                        cache.setCache();\n                    }\n                    break;\n                case \"daily\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORDAY){\n                        Cache cache = new Cache(leaderboard);\n                        cache.setCache();\n                    }\n                    break;\n                case \"weekly\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORWEEK){\n                        Cache cache = new", "first_line_groundtruth": "if (cache.isDiffernt()){", "first_line_prediction": " cache.setCache();", "match": 0}
{"groundtruth": "content = jsonData.getDataAttributes().get(\"content\");", "prediction": " message = jsonData.getMessage();\n\n        return message;\n    }", "first_line_groundtruth": "content = jsonData.getDataAttributes().get(\"content\");", "first_line_prediction": " message = jsonData.getMessage();", "match": 0}
{"groundtruth": "(descriptionGenerator.getDescription(false));", "prediction": "(descriptionGenerator.getDescription(false));\n        topList = leaderboard.getTopList();\n        return discordsrvEmbed;\n    }\n\n    public TopList getTopList() {\n        return topList;\n    }", "first_line_groundtruth": "(descriptionGenerator.getDescription(false));", "first_line_prediction": "(descriptionGenerator.getDescription(false));", "match": 1}
{"groundtruth": "customConfig.reload();", "prediction": "\n\n    }\n\n    //load methode\n    public void load() {\n        placeholder = config.getString(\"placeholder\");\n        top = config.getInt(\"top\");\n        delay = config.getString(\"delay\");\n        refreshOnSent = config.getBoolean(\"refresh-database-onsent\");\n        metric = config.getString(\"metric\");\n        higherisbetter = config.getBoolean(\"higherisbetter\");\n        floatingpoints = config.getInt(\"floatingpoints\");\n        webhookurl = config.getString(\"webhook-url\");\n        webhookAvatarUrl = config.getString(\"webhook-avatar-url\");\n        webhookUserName = config.getString(\"webhook-user", "first_line_groundtruth": "customConfig.reload();", "first_line_prediction": "", "match": 0}
{"groundtruth": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");", "prediction": " productName = jsonData.getDataAttributes().get(\"productName\");\n        String productPrice = jsonData.getDataAttributes().get(\"productPrice\");\n        String productImage = jsonData.getDataAttributes().get(\"productImage\");\n        String productLink = jsonData.getDataAttributes().get(\"productLink\");\n        String productLink2 = jsonData.getDataAttributes().get(\"productLink2\");\n        String productLink3 = jsonData.getDataAttributes().get(\"productLink3\");\n        String productLink4 = jsonData.getDataAttributes().get(\"productLink4\");\n        String productLink5 = jsonData.getDataAttributes().", "first_line_groundtruth": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");", "first_line_prediction": " productName = jsonData.getDataAttributes().get(\"productName\");", "match": 0}
{"groundtruth": "info = jsonData.getDataAttributes().get(\"info\");", "prediction": "ect = jsonData.getDataAttributes().get(\"ect\");\n        String ect_type = jsonData.getDataAttributes().get(\"ect_type\");\n        String ect_value = jsonData.getDataAttributes().get(\"ect_value\");\n        String ect_unit = jsonData.getDataAttributes().get(\"ect_unit\");\n        String ect_currency = jsonData.getDataAttributes().get(\"ect_currency\");\n        String ect_amount = jsonData.getDataAttributes().get(\"ect_amount\");\n        String ect_date = jsonData.getDataAttributes().get(\"ect_date\");\n        String", "first_line_groundtruth": "info = jsonData.getDataAttributes().get(\"info\");", "first_line_prediction": "ect = jsonData.getDataAttributes().get(\"ect\");", "match": 0}
{"groundtruth": "discordsrvEmbed.setEmbedImage(image);", "prediction": "\n\n        if (image != null && !image.isEmpty()) {\n            discordsrvEmbed.setEmbedImage(image);\n        }\n        if (thumb != null && !thumb.isEmpty()) {\n            discordsrvEmbed.setEmbedThumbnail(thumb);\n        }\n\n        String description = getDescription(false);\n        if (description != null && !description.isEmpty()) {\n            discordsrvEmbed.setEmbedDescription(description);\n        }\n\n        return discordsrvEmbed;\n    }\n\n    public String getDescription(boolean isForWebhook) {\n        String description = String.join(isForWebhook ? \"\\\\u000A\" : \"\\n\",", "first_line_groundtruth": "discordsrvEmbed.setEmbedImage(image);", "first_line_prediction": "", "match": 0}
{"groundtruth": "sentence = jsonData.getDataAttributes().get(\"sentence\");", "prediction": "ects = jsonData.getDataAttributes().get(\"ects\");\n        String customerName = jsonData.getDataAttributes().get(\"customerName\");\n        String customerEmail = jsonData.getDataAttributes().get(\"customerEmail\");\n        String customerPhone = jsonData.getDataAttributes().get(\"customerPhone\");\n        String customerAddress = jsonData.getDataAttributes().get(\"customerAddress\");\n        String customerCity = jsonData.getDataAttributes().get(\"customerCity\");\n        String customerState = jsonData.getDataAttributes().get(\"customerState\");\n        String customerZip = jsonData.getDataAttributes().get(\"customerZip\");\n        String", "first_line_groundtruth": "sentence = jsonData.getDataAttributes().get(\"sentence\");", "first_line_prediction": "ects = jsonData.getDataAttributes().get(\"ects\");", "match": 0}
{"groundtruth": "cache.setCache();", "prediction": "\n                    }\n                    break;\n                case \"hourly\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORHOUR){\n                        leaderboard.send();\n                    }\n                    break;\n                case \"daily\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORDAY){\n                        leaderboard.send();\n                    }\n                    break;\n                case \"weekly\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORWEEK){\n                        leaderboard.send();\n                    }\n                    break;\n                case \"monthly\":\n                    if (currentTime.getTime() - lastsent.getTime", "first_line_groundtruth": "cache.setCache();", "first_line_prediction": "", "match": 0}
{"groundtruth": "adminPublish.close();", "prediction": " adminPublish.close();\n        } catch (IOException e) {\n            LOG.error(\"Error closing admin client\", e);\n        }\n    }\n\n    @Test\n    public void testPublishPage() throws ClientException, IOException, URISyntaxException {\n\n        // the page to test\n        String PAGE = \"/content/test/en/home\";\n\n        // the page to test\n        String PAGE_2 = \"/content/test/en/home/jcr:content/root/responsivegrid/column/column-1\";\n\n        // the page to test\n        String PAGE_3 = \"/content/test/en/home/jcr:", "first_line_groundtruth": "adminPublish.close();", "first_line_prediction": " adminPublish.close();", "match": 0}
{"groundtruth": "jsonData.getTemplateId()) {", "prediction": "language) {\n            case \"en\":\n                promptGuide = \"You are a copywriter AI that can write and edit existing content. You always respond in HTML format for consumption by a rich text editor. Your goal is to produce the content that is requested as instructed without ever identifying yourself or the changes you have made. It should only ever contain content that was requested:  PROMPT: \";\n                break;\n            case \"es\":\n                promptGuide = \"You are a copywriter AI that can write and edit existing content. You always respond in HTML format for consumption by a rich text editor. Your goal is to produce the content", "first_line_groundtruth": "jsonData.getTemplateId()) {", "first_line_prediction": "language) {", "match": 0}
{"groundtruth": "String topic = jsonData.getDataAttributes().get(\"topic\");", "prediction": "\n\n        String prompt = \"\";\n        if (StringUtils.isNotBlank(content)) {\n            prompt += content;\n        }\n        if (StringUtils.isNotBlank(tone)) {\n            prompt += tone;\n        }\n        if (StringUtils.isNotBlank(companyName)) {\n            prompt += companyName;\n        }\n        if (StringUtils.isNotBlank(product)) {\n            prompt += product;\n        }\n        if (StringUtils.isNotBlank(outline)) {\n            prompt += outline;\n        }\n        if (StringUtils.isNotBlank(cta)) {\n            prompt += cta;\n        }\n        if (StringUtils.isNotBlank(title)) {\n            prompt += title;\n        }\n       ", "first_line_groundtruth": "String topic = jsonData.getDataAttributes().get(\"topic\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");", "prediction": "ect = jsonData.getDataAttributes().get(\"ect\");\n        String ectDescription = jsonData.getDataAttributes().get(\"ectDescription\");\n        String ectTitle = jsonData.getDataAttributes().get(\"ectTitle\");\n        String ectDescription2 = jsonData.getDataAttributes().get(\"ectDescription2\");\n        String ectTitle2 = jsonData.getDataAttributes().get(\"ectTitle2\");\n        String ectDescription3 = jsonData.getDataAttributes().get(\"ectDescription3\");\n        String ectTitle3 = jsonData.getDataAttributes().get(\"ectTitle3\");\n        String ectDescription4", "first_line_groundtruth": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");", "first_line_prediction": "ect = jsonData.getDataAttributes().get(\"ect\");", "match": 0}
{"groundtruth": ".addHeader(\"Authorization\", \"Bearer\" + \" \" + config.getOpenAIAPIKey());", "prediction": ".setHeader(\"Authorization\", \"Bearer \" + key);\n        request.setHeader(\"Content-Type\", \"application/json\");\n        request.setEntity(new StringEntity(requestBody));\n\n        HttpResponse response = client.execute(request);\n        String responseBody = EntityUtils.toString(response.getEntity());\n\n        ChatGptResponse chatGptResponse = MAPPER.readValue(responseBody, ChatGptResponse.class);\n        if (chatGptResponse.isError()) {\n            Logger.error(\"Error occurred while generating message: \" + chatGptResponse.getError());\n            return null;\n        }\n\n        Data data =", "first_line_groundtruth": ".addHeader(\"Authorization\", \"Bearer\" + \" \" + config.getOpenAIAPIKey());", "first_line_prediction": ".setHeader(\"Authorization\", \"Bearer \" + key);", "match": 0}
{"groundtruth": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");", "prediction": "ect = jsonData.getDataAttributes().get(\"ect\");\n        String customerName = jsonData.getDataAttributes().get(\"customerName\");\n        String customerEmail = jsonData.getDataAttributes().get(\"customerEmail\");\n        String customerPhone = jsonData.getDataAttributes().get(\"customerPhone\");\n        String customerAddress = jsonData.getDataAttributes().get(\"customerAddress\");\n        String customerCity = jsonData.getDataAttributes().get(\"customerCity\");\n        String customerState = jsonData.getDataAttributes().get(\"customerState\");\n        String customerZip = jsonData.getDataAttributes().get(\"customerZip\");\n        String customerCountry", "first_line_groundtruth": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");", "first_line_prediction": "ect = jsonData.getDataAttributes().get(\"ect\");", "match": 0}
{"groundtruth": "audience = jsonData.getDataAttributes().get(\"audience\");", "prediction": "ect = jsonData.getDataAttributes().get(\"ect\");\n        String description = jsonData.getDataAttributes().get(\"description\");\n        String productName = jsonData.getDataAttributes().get(\"productName\");\n        String productDescription = jsonData.getDataAttributes().get(\"productDescription\");\n        String productPrice = jsonData.getDataAttributes().get(\"productPrice\");\n        String productImage = jsonData.getDataAttributes().get(\"productImage\");\n        String productUrl = jsonData.getDataAttributes().get(\"productUrl\");\n        String productBrand = jsonData.getDataAttributes().get(\"productBrand\");\n        String productCategory = json", "first_line_groundtruth": "audience = jsonData.getDataAttributes().get(\"audience\");", "first_line_prediction": "ect = jsonData.getDataAttributes().get(\"ect\");", "match": 0}
{"groundtruth": "String tone = jsonData.getDataAttributes().get(\"tone\");", "prediction": "\n\n        return content;\n    }", "first_line_groundtruth": "String tone = jsonData.getDataAttributes().get(\"tone\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "String product = jsonData.getDataAttributes().get(\"product\");", "prediction": "\n\n        String prompt = \"\";\n        if (StringUtils.isNotBlank(content)) {\n            prompt += content;\n        }\n        if (StringUtils.isNotBlank(tone)) {\n            prompt += \" \" + tone;\n        }\n        if (StringUtils.isNotBlank(companyName)) {\n            prompt += \" \" + companyName;\n        }\n\n        return prompt;\n    }", "first_line_groundtruth": "String product = jsonData.getDataAttributes().get(\"product\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "client.getResourceRefs(path);", "prediction": " client.getRefs(path);\n        LOG.info(\"Found {} references\", references.size());\n        for (URI reference : references) {\n            LOG.info(\"Checking reference {}\", reference.toString());\n            SlingHttpResponse response = client.doGet(reference.toString());\n            assertEquals(\"Request to [\" + reference.toString() + \"] does not return expected returncode 200\",\n                    200, response.getStatusCode());\n            LOG.info(\"Checking response body\");\n            assertTrue(\"Response body is empty\", response.getBody().length() > 0);\n            LOG.info(\"Checking response content type\");\n            assertTrue", "first_line_groundtruth": "client.getResourceRefs(path);", "first_line_prediction": " client.getRefs(path);", "match": 0}
{"groundtruth": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");", "prediction": "\n\n        String prompt = \"\";\n        if (StringUtils.isNotBlank(content)) {\n            prompt += content;\n        }\n        if (StringUtils.isNotBlank(tone)) {\n            prompt += \" \" + tone;\n        }\n        if (StringUtils.isNotBlank(companyName)) {\n            prompt += \" \" + companyName;\n        }\n        if (StringUtils.isNotBlank(product)) {\n            prompt += \" \" + product;\n        }\n        if (StringUtils.isNotBlank(outline)) {\n            prompt += \" \" + outline;\n        }\n        if (StringUtils.isNotBlank(cta)) {\n            prompt += \" \" + cta;\n        }\n        if (", "first_line_groundtruth": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);", "prediction": " SqlUtils.updateLastSent(leaderboardname, currenttimestamp);\n    }\n\n    public void deleteDataIfNeeded(){\n        String leaderboardname = leaderboard.getName();\n        SqlUtils.deleteData(leaderboardname);\n    }\n\n    public boolean isAlredySent(){\n        String leaderboardname = leaderboard.getName();\n        Timestamp lastsent = SqlUtils.getLastSent(leaderboardname);\n        if (lastsent == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Timestamp getLastSent(){\n        String leaderboardname = leaderboard.getName();\n        Timestamp lastsent = SqlUtils.getLast", "first_line_groundtruth": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);", "first_line_prediction": " SqlUtils.updateLastSent(leaderboardname, currenttimestamp);", "match": 0}
{"groundtruth": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();", "prediction": " String leaderboardname = leaderboard.getName();\n         SqlUtils.deleteScheduleData(leaderboardname);\n    }", "first_line_groundtruth": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();", "first_line_prediction": " String leaderboardname = leaderboard.getName();", "match": 0}
{"groundtruth": "SqlUtils.isScheduleAlredySent(leaderboardname);", "prediction": " SqlUtils.isScheduleAlredySent(leaderboardname);\n        return isalredysent;\n    }\n\n    public void deleteDataIfNeeded(){\n        String leaderboardname = leaderboard.getName();\n        SqlUtils.deleteScheduleData(leaderboardname);\n    }", "first_line_groundtruth": "SqlUtils.isScheduleAlredySent(leaderboardname);", "first_line_prediction": " SqlUtils.isScheduleAlredySent(leaderboardname);", "match": 0}
{"groundtruth": "SqlUtils.deleteAllValues(tablename, ColumnName);", "prediction": " SqlUtils.deleteDataFromTable(tablename, ColumnName);\n        }\n    }", "first_line_groundtruth": "SqlUtils.deleteAllValues(tablename, ColumnName);", "first_line_prediction": " SqlUtils.deleteDataFromTable(tablename, ColumnName);", "match": 0}
{"groundtruth": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){", "prediction": " (currentTime.getTime() - lastsent.getTime() >= SECSFORHOUR){\n                        leaderboard.send();\n                        lastsent = currentTime;\n                    }\n                    break;\n                case \"daily\":\n                    if  (currentTime.getTime() - lastsent.getTime() >= SECSFORDAY){\n                        leaderboard.send();\n                        lastsent = currentTime;\n                    }\n                    break;\n                case \"weekly\":\n                    if  (currentTime.getTime() - lastsent.getTime() >= SECSFORWEEK){\n                        leaderboard.send();\n                        lastsent = currentTime;\n                    }\n                    break;\n                case \"monthly\":\n                    if  (", "first_line_groundtruth": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){", "first_line_prediction": " (currentTime.getTime() - lastsent.getTime() >= SECSFORHOUR){", "match": 0}
{"groundtruth": "webhook.execute();", "prediction": " webhook.send();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String getOrDefault(String value, String defaultValue) {\n        if (value == null || value.equals(\"\") || value.equals(\"-\")) {\n            return defaultValue;\n        }\n        return value;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public LeaderboardConfig getConfig() {\n        return leaderboardConfig;\n    }\n\n    public TopList getTopList() {\n        return topList;\n    }", "first_line_groundtruth": "webhook.execute();", "first_line_prediction": " webhook.send();", "match": 0}
{"groundtruth": "= mainConfig.getDembedTitle();", "prediction": " = mainConfig.getEmbedTitle();\n        String dembedColor  = mainConfig.getEmbedColor();\n        String dembedFooter = mainConfig.getEmbedFooter();\n        String dembedAuthor = mainConfig.getEmbedAuthor();\n        String dembedDescription = mainConfig.getEmbedDescription();\n        String dembedThumbnail = mainConfig.getEmbedThumbnail();\n        String dembedImage = mainConfig.getEmbedImage();\n        String dembedUrl = mainConfig.getEmbedUrl();\n        String dembedAuthorUrl = mainConfig.getEmbedAuthorUrl();\n        String dembedAuthorIcon = mainConfig.getEmbedAuthor", "first_line_groundtruth": "= mainConfig.getDembedTitle();", "first_line_prediction": " = mainConfig.getEmbedTitle();", "match": 0}
{"groundtruth": "webhook.setAvatarUrl(webhookAvatarUrl);", "prediction": " webhook.setAvatarUrl(webhookAvatarUrl);\n        }\n        if (webhookUserName != null && !webhookUserName.equals(\"\") && !webhookUserName.equals(\"-\")){\n             webhook.setUserName(webhookUserName);\n        }\n        if (embedTitle != null && !embedTitle.equals(\"\") && !embedTitle.equals(\"-\")){\n             webhook.setEmbedTitle(embedTitle);\n        }\n        if (embedUrl != null && !embedUrl.equals(\"\") && !embedUrl.equals(\"-\")){\n             webhook.setEmbedUrl(embedUrl);\n        }\n        if (embedColour != null && !embedColour.equals(\"\") &&", "first_line_groundtruth": "webhook.setAvatarUrl(webhookAvatarUrl);", "first_line_prediction": " webhook.setAvatarUrl(webhookAvatarUrl);", "match": 0}
{"groundtruth": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();", "prediction": " dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();\n        String dembedImage = mainConfig.getDembedImage();\n        String dembedThumbnail = mainConfig.getDembedThumbnail();\n        String dembedColour = mainConfig.getDembedColour();\n        String dembedFooter = mainConfig.getDembedFooter();\n        String dembedMetric = mainConfig.getDembedMetric();\n        String dembedDelay = mainConfig.getDembedDelay();\n        String dembedRefreshOnSent = mainConfig.getDembedRefreshOnSent();\n        String dembedFloatingPoints = mainConfig.getD", "first_line_groundtruth": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();", "first_line_prediction": " dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();", "match": 0}
{"groundtruth": "dembedImage = mainConfig.getDembedImage();", "prediction": " dembedImage = mainConfig.getDembedImage();\n        String dembedThumbnail = mainConfig.getDembedThumbnail();\n        String storageType = mainConfig.getStorageType();\n        String mysqlAddress = mainConfig.getMysqlAddress();\n        String mysqlDatabase = mainConfig.getMysqlDatabase();\n        String mysqlUsername = mainConfig.getMysqlUsername();\n        String mysqlPassword = <PASSWORD>();\n        int scheduleDelayMins = mainConfig.getScheduleDelayMins();\n        String pluginVersion = mainConfig.getPluginVersion();\n        boolean firstTime = mainConfig.isFirstTime();\n        String slashcommand = main", "first_line_groundtruth": "dembedImage = mainConfig.getDembedImage();", "first_line_prediction": " dembedImage = mainConfig.getDembedImage();", "match": 0}
{"groundtruth": "String description = descriptionGenerator.getDescription(true);", "prediction": " /*******************\n         *  Embed Description\n         *******************/\n        if (embedDescription != null && !embedDescription.equals(\"\") && !embedDescription.equals(\"-\")){\n            embed.setDescription(embedDescription);\n        }\n        else{\n            embed.setDescription(descriptionGenerator.generateDescription());\n        }\n\n        /*******************\n         *  Embed Fields\n         *******************/\n        if (placeholder != null && !placeholder.equals(\"\") && !placeholder.equals(\"-\")){\n            embed.addField(placeholder, topList.getTopListAsString(false), false);\n        }\n        else{\n            embed.addField(\"Top 10\", topList.get", "first_line_groundtruth": "String description = descriptionGenerator.getDescription(true);", "first_line_prediction": " /*******************", "match": 0}
{"groundtruth": "String delay = leaderboardConfig.getDelay();", "prediction": "\n\n        //getting webhook values from main config\n        String webhookurl = mainConfig.getWebhookurl();\n        String webhookAvatarUrl = mainConfig.getWebhookAvatarUrl();\n        String webhookUserName = mainConfig.getWebhookUserName();\n        String webhookDelay = mainConfig.getWebhookDelay();\n        String webhookEmbedTitle = mainConfig.getWebhookEmbedTitle();\n        String webhookEmbedDescription = mainConfig.getWebhookEmbedDescription();\n        String webhookEmbedColour = mainConfig.getWebhookEmbedColour();\n        String webhookEmbedFooter = mainConfig.getWebhookEmbedFooter();\n        String webhookEmbedImage = mainConfig.getWebhookEmbedImage();", "first_line_groundtruth": "String delay = leaderboardConfig.getDelay();", "first_line_prediction": "", "match": 0}
{"groundtruth": "String placeholder = leaderboardConfig.getPlaceholder();", "prediction": " return name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public LeaderboardConfig getLeaderboardConfig() {\n        return leaderboardConfig;\n    }\n\n    public TopList getTopList() {\n        return topList;\n    }\n\n    public void sendTopList(String webhookurl, String webhookAvatarUrl, boolean isWebhookFormat) {\n        if (isWebhookFormat) {\n            DiscordWebhook webhook = new DiscordWebhook(webhookurl, webhookAvatarUrl);\n            webhook.send(topList.getTopListAsString(isWebhookFormat));\n        } else {\n            Bukkit.broadcastMessage(topList", "first_line_groundtruth": "String placeholder = leaderboardConfig.getPlaceholder();", "first_line_prediction": " return name;", "match": 0}
{"groundtruth": "String dembedFooter = mainConfig.getDembedFooter();", "prediction": "\n\n        //getting default values from leaderboard config\n        LeaderboardConfig leaderboardConfig = new LeaderboardConfig(name);\n        String placeholder = leaderboardConfig.getPlaceholder();\n        int top = leaderboardConfig.getTop();\n        String delay = leaderboardConfig.getWebhookDelay();\n\n        //getting default values from main config\n        String storageType = mainConfig.getStorageType();\n        String mysqlAddress = mainConfig.getMysqlAddress();\n        String mysqlDatabase = mainConfig.getMysqlDatabase();\n        String mysqlUsername = mainConfig.getMysqlUsername();\n        String mysqlPassword = mainConfig.getMysqlPassword();\n        int", "first_line_groundtruth": "String dembedFooter = mainConfig.getDembedFooter();", "first_line_prediction": "", "match": 0}
{"groundtruth": "embedTitle = leaderboardConfig.getEmbedTitle();", "prediction": " webhookDelay = leaderboardConfig.getWebhookDelay();\n        String webhookEmbedTitle = leaderboardConfig.getWebhookEmbedTitle();\n        String webhookEmbedDescription = leaderboardConfig.getWebhookEmbedDescription();\n        String webhookEmbedUrl = leaderboardConfig.getWebhookEmbedUrl();\n        String webhookEmbedColour = leaderboardConfig.getWebhookEmbedColour();\n        String webhookEmbedFooter = leaderboardConfig.getWebhookEmbedFooter();\n        String webhookEmbedImage = leaderboardConfig.getWebhookEmbedImage();\n        String webhookEmbedThumbnail = leaderboardConfig.getWebhookEmbedThumbnail();\n\n        //getting the top list\n        Map<String, Double", "first_line_groundtruth": "embedTitle = leaderboardConfig.getEmbedTitle();", "first_line_prediction": " webhookDelay = leaderboardConfig.getWebhookDelay();", "match": 0}
{"groundtruth": "database.getConnection().prepareStatement(\n                        \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                );", "prediction": " database.getConnection().prepareStatement(\"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NULL\");\n                preparedStatement.executeUpdate();\n                preparedStatement.close();\n            } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n                preparedStatement =  database.getConnection().prepareStatement(\"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NULL\");\n                preparedStatement.executeUpdate();\n                preparedStatement.close();\n            }\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.", "first_line_groundtruth": "database.getConnection().prepareStatement(", "first_line_prediction": " database.getConnection().prepareStatement(\"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NULL\");", "match": 0}
{"groundtruth": "database.getConnection().prepareStatement(\n                        \"REPLACE INTO Schedule (Leaderboard, LastSent) VALUES (?, ?)\"\n                );", "prediction": " database.getConnection().prepareStatement(\"INSERT INTO Schedule (Leaderboard, LastSent) VALUES (?, ?) ON DUPLICATE KEY UPDATE LastSent = VALUES(LastSent)\");\n                preparedStatement.setString(1, leaderboard);\n                preparedStatement.setTimestamp(2, timestamp);\n                preparedStatement.executeUpdate();\n                preparedStatement.close();\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 13]\");\n            }\n        }\n   ", "first_line_groundtruth": "database.getConnection().prepareStatement(", "first_line_prediction": " database.getConnection().prepareStatement(\"INSERT INTO Schedule (Leaderboard, LastSent) VALUES (?, ?) ON DUPLICATE KEY UPDATE LastSent = VALUES(LastSent)\");", "match": 0}
{"groundtruth": "SqlUtils.addUserDataToDatabase(placeholderColumnName, uuid, username, value);", "prediction": " database.addUserDataToDB(this);\n        });\n    }\n\n    //All Players One Placeholder\n    public void addUserDataToDBAllPlayersThisPlaceholder(){\n        CompletableFuture.runAsync(() -> {\n            database.addUserDataToDBAllPlayersThisPlaceholder(this);\n        });\n    }\n\n    //All Players All Placeholders\n    public void addUserDataToDBAllPlayers(){\n        CompletableFuture.runAsync(() -> {\n            database.addUserDataToDBAllPlayers(this);\n        });\n    }\n\n    //All Players All Placeholders\n    public void addUserDataToDBAllPlayersThisPlaceholderAndLeaderboard(){\n        CompletableFuture.run", "first_line_groundtruth": "SqlUtils.addUserDataToDatabase(placeholderColumnName, uuid, username, value);", "first_line_prediction": " database.addUserDataToDB(this);", "match": 0}
{"groundtruth": "String embedColour = leaderboardConfig.getEmbedColour();", "prediction": " String embedColour = leaderboardConfig.getEmbedColour();\n        String embedFooter = leaderboardConfig.getEmbedFooter();\n        String embedImage = leaderboardConfig.getEmbedImage();\n        String embedThumbnail = leaderboardConfig.getEmbedThumbnail();\n        String embedDescription = leaderboardConfig.getEmbedDescription();\n        String metric = leaderboardConfig.getMetric();\n        boolean higherisbetter = leaderboardConfig.isHigherisbetter();\n        int floatingpoints = leaderboardConfig.getFloatingpoints();\n\n        //getting webhook delay\n        WebhookDelay webhookDelay = WebhookDelay.valueOf(delay);\n\n        //getting webhook", "first_line_groundtruth": "String embedColour = leaderboardConfig.getEmbedColour();", "first_line_prediction": " String embedColour = leaderboardConfig.getEmbedColour();", "match": 0}
{"groundtruth": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();", "prediction": " String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();\n        String webhookUserName = leaderboardConfig.getWebhookUserName();\n        String embedUrl = leaderboardConfig.getEmbedUrl();\n        String embedColour = leaderboardConfig.getEmbedColour();\n        String embedFooter = leaderboardConfig.getEmbedFooter();\n        String embedImage = leaderboardConfig.getEmbedImage();\n        String embedThumbnail = leaderboardConfig.getEmbedThumbnail();\n        String metric = leaderboardConfig.getMetric();\n        boolean higherisbetter = leaderboardConfig.isHigherisbetter();\n        int floatingpoints = leaderboardConfig.", "first_line_groundtruth": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();", "first_line_prediction": " String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();", "match": 0}
{"groundtruth": "UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.getStorageType());", "prediction": " Exception(\"Storage Type not supported\");\n            }\n            int rowsUpdated = preparedStatement.executeUpdate();\n            preparedStatement.close();\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while deleting all values in database  [code : 16]\");\n        }\n    }\n\n    public static void deleteAllValues(String tableName) {\n        PreparedStatement preparedStatement;\n        MainConfig mainConfig = new MainConfig();\n        Database database = new Database();\n        try {\n            if (mainConfig.getStorage", "first_line_groundtruth": "UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.getStorageType());", "first_line_prediction": " Exception(\"Storage Type not supported\");", "match": 0}
{"groundtruth": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) AS count FROM Schedule WHERE Leaderboard = ?\");", "prediction": " preparedStatement = database.getConnection().prepareStatement(\"SELECT * FROM Schedule WHERE Leaderboard = ?\");\n             preparedStatement.setString(1, leaderboard);\n             ResultSet rs = preparedStatement.executeQuery();\n             if (rs.next()){\n                 preparedStatement.close();\n                 return true;\n             }\n             preparedStatement.close();\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 13.2]\");\n        }\n        return false;\n    }\n\n   ", "first_line_groundtruth": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) AS count FROM Schedule WHERE Leaderboard = ?\");", "first_line_prediction": " preparedStatement = database.getConnection().prepareStatement(\"SELECT * FROM Schedule WHERE Leaderboard = ?\");", "match": 0}
{"groundtruth": "preparedStatement = database.getConnection().prepareStatement(\n                        \"UPDATE \" + tableName + \" SET \" + columnName + \" = NULL\"\n                );", "prediction": " preparedStatement = database.getConnection().prepareStatement(\n                         \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                 );\n            }\n            int rowsUpdated = preparedStatement.executeUpdate();\n            preparedStatement.close();\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while deleting all values in table \" + tableName + \" [code : 04]\");\n        }\n    }\n\n    public static void deleteAllValues(String tableName) {\n        PreparedStatement preparedStatement;\n       ", "first_line_groundtruth": "preparedStatement = database.getConnection().prepareStatement(", "first_line_prediction": " preparedStatement = database.getConnection().prepareStatement(", "match": 0}
{"groundtruth": "database.getConnection().prepareStatement(\"SELECT \" + \"LastSent\" + \" FROM Schedule WHERE Leaderboard = ?\");", "prediction": " database.getConnection().prepareStatement(\"SELECT LastSent FROM Schedule WHERE Leaderboard = ?\");\n            preparedStatement.setString(1, leaderboard);\n            ResultSet rs = preparedStatement.executeQuery();\n            if (rs.next()) {\n                lastsent = rs.getTimestamp(\"LastSent\");\n            }\n            preparedStatement.close();\n        }catch (SQLException ex){\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 15]\");\n        }\n        return lastsent;\n    }\n\n    public static", "first_line_groundtruth": "database.getConnection().prepareStatement(\"SELECT \" + \"LastSent\" + \" FROM Schedule WHERE Leaderboard = ?\");", "first_line_prediction": " database.getConnection().prepareStatement(\"SELECT LastSent FROM Schedule WHERE Leaderboard = ?\");", "match": 0}
{"groundtruth": "outputEGLSurface = outputEglCore.createOffsetScreenSurface(renderWidth, renderHeight);", "prediction": " outputEglCore.makeCurrent(outputEglCore.createWindowSurface());\n\n        // create output surface\n        outputEGLSurface = outputEglCore.createPbufferSurface();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.d(TAG, \"onDestroy\");\n\n        outputEglCore.destroySurface(outputEGLSurface);\n        outputEglCore.release();\n    }", "first_line_groundtruth": "outputEGLSurface = outputEglCore.createOffsetScreenSurface(renderWidth, renderHeight);", "first_line_prediction": " outputEglCore.makeCurrent(outputEglCore.createWindowSurface());", "match": 0}
{"groundtruth": "quadRenderer.drawTexture(texId, renderWidth, renderHeight);", "prediction": " sharedTexture.draw();\n                }\n            }\n        });\n    }\n\n    private void startOffscreenService() {\n        Intent intent = new Intent(this, OffscreenService.class);\n        startService(intent);\n        bindService(intent, aidlConnection, BIND_AUTO_CREATE);\n    }\n\n    private void stopOffscreenService() {\n        unbindService(aidlConnection);\n        stopService(new Intent(this, OffscreenService.class));\n    }\n\n    private void createRenderResources() {\n        // create shared texture\n        sharedTexture = new SharedTexture(renderWidth, renderHeight);\n\n        // create render", "first_line_groundtruth": "quadRenderer.drawTexture(texId, renderWidth, renderHeight);", "first_line_prediction": " sharedTexture.draw();", "match": 0}
{"groundtruth": ", leaderboard.getConfig().getPlaceholder());", "prediction": ", leaderboard.getPlaceholder());\n            userData.addToDatabase();\n        }\n    }\n\n    public void addUserDataToDBAllPlaceholders(OfflinePlayer offlinePlayer){\n        MainConfig mainConfig = new MainConfig();\n        List<String> leaderboardnamelist = mainConfig.getLeaderboardsList();\n        for (String lbname : leaderboardnamelist){\n            Leaderboard leaderboard = new Leaderboard(lbname);\n            UserData userData = new UserData(offlinePlayer, leaderboard.getPlaceholder());\n            userData.addToDatabase();\n        }\n    }", "first_line_groundtruth": ", leaderboard.getConfig().getPlaceholder());", "first_line_prediction": ", leaderboard.getPlaceholder());", "match": 0}
{"groundtruth": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent WHEN NOT MATCHED THEN INSERT (Leaderboard, LastSent) VALUES (data.Leaderboard, data.LastSent);", "prediction": " database.getConnection().prepareStatement(\"UPDATE Leaderboard SET LastSent = ? WHERE Name = ?\");\n                preparedStatement.setTimestamp(1, timestamp);\n                preparedStatement.setString(2, leaderboard);\n                preparedStatement.executeUpdate();\n                preparedStatement.close();\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while setting LastSent to database [code : 11]\");\n                ex.printStackTrace();\n            }\n        } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql", "first_line_groundtruth": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent WHEN NOT MATCHED THEN INSERT (Leaderboard, LastSent) VALUES (data.Leaderboard, data.LastSent);", "first_line_prediction": " database.getConnection().prepareStatement(\"UPDATE Leaderboard SET LastSent = ? WHERE Name = ?\");", "match": 0}
{"groundtruth": "ServerCountryFlags.updateAPILanguage(null);", "prediction": " cfg.locale = \"en_US\";\n        }\n\n        if (cfg.useKm) {\n            cfg.locale = \"en_US\";\n        }\n\n        if (cfg.showDistance) {\n            cfg.showDistance = true;\n        }\n\n        if (cfg.showDistrict) {\n            cfg.showDistrict = true;\n        }\n\n        if (cfg.showISP) {\n            cfg.showISP = true;\n        }\n\n        if (cfg.mapButton) {\n            cfg.mapButton = true;\n        }\n\n        if (cfg.mapButtonRight) {\n            cfg.mapButtonRight = true;\n       ", "first_line_groundtruth": "ServerCountryFlags.updateAPILanguage(null);", "first_line_prediction": " cfg.locale = \"en_US\";", "match": 0}
{"groundtruth": "String databaseName = mainConfig.getStorageType();", "prediction": " if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")){\n\n                preparedStatement = database.getConnection().prepareStatement(\"SELECT PlayerName, \" + placeholderColumnName + \" FROM UserData ORDER BY \" + placeholderColumnName + \" DESC LIMIT \" + top + \";\");\n                ResultSet resultSet = preparedStatement.executeQuery();\n\n                while (resultSet.next()) {\n                    String name = resultSet.getString(\"PlayerName\");\n                    double score = resultSet.getDouble(placeholderColumnName);\n                    if (ishigherbetter) {\n                        score = -score;\n                    }\n                    topPlayerScores.put(name, score);\n                }\n                resultSet.close();\n               ", "first_line_groundtruth": "String databaseName = mainConfig.getStorageType();", "first_line_prediction": " if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")){", "match": 0}
{"groundtruth": ".setRequestsLeft(requestsLeft - APITimeoutManager.getRequestsSent());", "prediction": ".setCooldown(requestsLeft, secondsLeft);\n\t\t\t}", "first_line_groundtruth": ".setRequestsLeft(requestsLeft - APITimeoutManager.getRequestsSent());", "first_line_prediction": ".setCooldown(requestsLeft, secondsLeft);", "match": 0}
{"groundtruth": "userData.addUserDataToDBAllPlayersThisPlaceholder();", "prediction": " PlayerUtils.syncOfflinePlayerData(userData);\n                });\n            } catch (Exception e) {\n                p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Invalid Placeholder Name !\");\n            }\n        }\n        //Delete Command\n        if (args[0].equalsIgnoreCase(\"delete\")) {\n            if (!sender.hasPermission(\"dl.delete\") && !sender.hasPermission(\"dl.admin\")) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"No Permission ! [dl.delete], [dl", "first_line_groundtruth": "userData.addUserDataToDBAllPlayersThisPlaceholder();", "first_line_prediction": " PlayerUtils.syncOfflinePlayerData(userData);", "match": 0}
{"groundtruth": "APITimeoutManager.setSecondsLeftUntilReset(secondsLeft);", "prediction": "\tAPITimeoutManager.setSecondsLeft(secondsLeft - APITimeoutManager.getSecondsSent());\n\t\t\t}", "first_line_groundtruth": "APITimeoutManager.setSecondsLeftUntilReset(secondsLeft);", "first_line_prediction": "\tAPITimeoutManager.setSecondsLeft(secondsLeft - APITimeoutManager.getSecondsSent());", "match": 0}
{"groundtruth": "(APITimeoutManager.isOnCooldown()) {", "prediction": " (ip.isEmpty()) {\n\t\t\treturn new APIResponse(localLocation);\n\t\t}", "first_line_groundtruth": "(APITimeoutManager.isOnCooldown()) {", "first_line_prediction": " (ip.isEmpty()) {", "match": 0}
{"groundtruth": "APITimeoutManager.decrementRequestsSent();", "prediction": "", "first_line_groundtruth": "APITimeoutManager.decrementRequestsSent();", "first_line_prediction": "", "match": 0}
{"groundtruth": "APITimeoutManager.incrementRequestsSent();", "prediction": "\tURL url = new URL(apiUrlStr);\n\t\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\t\tconnection.setConnectTimeout(1000);\n\t\t\t\tconnection.setReadTimeout(1000);\n\t\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\t\tconnection.setDoInput(true);\n\t\t\t\tconnection.setDoOutput(false);\n\t\t\t\tconnection.connect();", "first_line_groundtruth": "APITimeoutManager.incrementRequestsSent();", "first_line_prediction": "\tURL url = new URL(apiUrlStr);", "match": 0}
{"groundtruth": "request.setReturnCode(500);", "prediction": "\t//return the default error page\n\t\t\t\treturn error404;\n\t\t\t}\n\t\t\n\t\treturn error500;", "first_line_groundtruth": "request.setReturnCode(500);", "first_line_prediction": "\t//return the default error page", "match": 0}
{"groundtruth": ">= server.getMaximumHeaderParameterCount())\n\t\t\t\t\treturn parameters;", "prediction": " > 0)\n\t\t\t\t\tparameters.put(key.toString(), value.toString());\n\t\t\t\tkeyFlag = true;\n\t\t\t\tvalue.setLength(0);\n\t\t\t}\n\t\t\telse\n\t\t\t\tvalue.append(c);\n\t\t}\n\t\t\n\t\treturn parameters;", "first_line_groundtruth": ">= server.getMaximumHeaderParameterCount())", "first_line_prediction": " > 0)", "match": 0}
{"groundtruth": "request.getContentType());", "prediction": " \"text/html; charset=UTF-8\");\n\t\t\n\t\t//default date\n\t\tif(!headers.containsKey(\"Date\"))\n\t\t\theaders.put(\"Date\", ZonedDateTime.now().format(DateTimeFormatter.RFC_1123_DATE_TIME));\n\t\t\n\t\t//default server\n\t\tif(!headers.containsKey(\"Server\"))\n\t\t\theaders.put(\"Server\", \"HTTPdLib\");\n\t\t\n\t\t//default connection\n\t\tif(!headers.containsKey(\"Connection\"))\n\t\t\theaders.put(\"Connection\", \"close\");\n\t\t\n\t\t//default cache-control\n\t\tif(!headers.containsKey(\"Cache-Control\"))", "first_line_groundtruth": "request.getContentType());", "first_line_prediction": " \"text/html; charset=UTF-8\");", "match": 0}
{"groundtruth": "if(cookies.size() >= server.getMaximumCookieCount())\n\t\t\t\t\t\tbreak;", "prediction": "\tif(cookies.size() >= server.getMaximumHeaderParameterSize())\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tvalue.append(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn cookies;", "first_line_groundtruth": "if(cookies.size() >= server.getMaximumCookieCount())", "first_line_prediction": "\tif(cookies.size() >= server.getMaximumHeaderParameterSize())", "match": 0}
{"groundtruth": "size() >= server.getMaximumHeaderParameterSize())\n\t\t\t\t\t\tbreak;", "prediction": "size() >= server.getMaximumHeaderParameterCount())\n\t\t\t\t\t\treturn parameters;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t///end of value\n\t\t\t\telse if(c == '\\n' || c == '\\r')\n\t\t\t\t{\n\t\t\t\t\tif(key.length() > 0 && value.length() > 0)\n\t\t\t\t\t\tparameters.put(key.toString(), value.toString());\n\t\t\t\t\t\n\t\t\t\t\tkey = new StringBuilder();\n\t\t\t\t\tvalue = new StringBuilder();\n\t\t\t\t\tkeyFlag = true;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t///looking for value\n\t\t\t\telse if(value.length() < server.getMaximumHeaderParameterSize())", "first_line_groundtruth": "size() >= server.getMaximumHeaderParameterSize())", "first_line_prediction": "size() >= server.getMaximumHeaderParameterCount())", "match": 0}
{"groundtruth": "if(value.length() < server.getMaximumHeaderParameterSize())\n\t\t\t\tvalue.append(c);", "prediction": " if(c == ':')\n\t\t\t\tkeyFlag = true;\n\t\t\telse\n\t\t\t\tvalue.append(c);\n\t\t}\n\t\t\n\t\treturn parameters;", "first_line_groundtruth": "if(value.length() < server.getMaximumHeaderParameterSize())", "first_line_prediction": " if(c == ':')", "match": 0}
{"groundtruth": "buffer.writeBody(bytes);", "prediction": "\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e)\n\t\t\t\t\t{\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tclient.setState(100);\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 100:\n\t\t\t\t\t\t///TODO\n\t\t\t\t\t\t// if the client is still connected, send the response\n\t\t\t\t\t\t// if the client is not connected, close the connection\n\t\t\t\t\t\t// if the client is not connected, close the connection\n\t\t\t\t\t\t// if the client is not connected, close the connection\n\t\t\t\t\t\t// if the client is not connected, close the connection\n\t\t\t\t\t\t// if the client is not connected, close the connection\n\t\t\t\t\t", "first_line_groundtruth": "buffer.writeBody(bytes);", "first_line_prediction": "", "match": 0}
{"groundtruth": "buffer.writeHeader(bytes);", "prediction": "\t///get the request\n\t\t\t\t\t\trequestBuilder.build(bytes);\n\t\t\t\t\t\t}\n\t\t\t\t\tcatch(Exception e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(requestBuilder.request != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t///add the request to the queue\n\t\t\t\t\t\t\trequestListener.onRequest(requestBuilder.request);\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\t///advance to stage 0\n\t\t\t\t\tclient.setState(0);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});", "first_line_groundtruth": "buffer.writeHeader(bytes);", "first_line_prediction": "\t///get the request", "match": 0}
{"groundtruth": "= decoder.decodeParameters(new String(buffer.bodyBuffer.toByteArray(), StandardCharsets.UTF_8));", "prediction": " = decoder.decodeParameters(path.substring(path.indexOf('=') + 1));\n\t\t\telse\n\t\t\t\tpost = new HashMap<>();\n\t\t\t\n\t\t\t// decode cookies\n\t\t\tcookies = decoder.decodeCookies(parameters.get(\"Cookie\"));\n\t\t\t\n\t\t\treturn new Request(client.getRemoteIP(), methodType, path, version, parameters, cookies, get, post);\n\t\t}\n\t\t\n\t\treturn null;", "first_line_groundtruth": "= decoder.decodeParameters(new String(buffer.bodyBuffer.toByteArray(), StandardCharsets.UTF_8));", "first_line_prediction": " = decoder.decodeParameters(path.substring(path.indexOf('=') + 1));", "match": 0}
{"groundtruth": "client.setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));", "prediction": "\t///TODO\n\t\t\t\t\t\t\t// if it's a get request, we will need to download X bytes and then process them\n\t\t\t\t\t\t\t// this same piece of code is how we handle multi-form uploads and single form uploads\n\t\t\t\t\t\t\t// keep-alive is also handled in that same chunk of code\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tclient.setState(0);\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 10:\n\t\t\t\t\t\t//TODO\n\t\t\t\t\t\t// if it's a post request, we will need to download X bytes and then process them\n\t\t\t\t\t\t// this same piece of code is how we handle multi-form uploads and single form uploads\n\t\t\t\t\t", "first_line_groundtruth": "client.setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));", "first_line_prediction": "\t///TODO", "match": 0}
{"groundtruth": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request,\n\t\t\t\t\t\t\t\t\trequestListener.request(buffer.request)));", "prediction": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));\n\t\t\t\t\t\t\n\t\t\t\t\t\tclient.setState(100);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 100:\n\t\t\t\t\t\t///TODO\n\t\t\t\t\t\t// if the client is still connected, send the response\n\t\t\t\t\t\t// if the client is not connected, close the connection\n\t\t\t\t\t\t// if the client is not connected, close the connection\n\t\t\t\t\t\t// if the client is not connected, close the connection\n\t\t\t\t\t\t// if the client is not connected, close the connection\n\t\t\t\t\t\t//", "first_line_groundtruth": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request,", "first_line_prediction": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));", "match": 0}
{"groundtruth": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));", "prediction": "\tcookies = decoder.decodeCookies(parameters.get(\"Cookie\"));\n\t\t\telse\n\t\t\t\tcookies = new HashMap<>();\n\t\t\t\n\t\t\treturn new Request(client, method, path, version, get, post, cookies);\n\t\t}\n\t\t\n\t\treturn null;", "first_line_groundtruth": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));", "first_line_prediction": "\tcookies = decoder.decodeCookies(parameters.get(\"Cookie\"));", "match": 0}
{"groundtruth": "List<String> exps = RegexHelper.find(text, \"\\\\$\\\\{", "prediction": " // \u89e3\u6790\u53d8\u91cf\n        text = RegexHelper.replace(text, \"\\\\$\\\\{([^\\\\}]+)\\\\}\", (m) -> {\n            String key = m.group(1);\n            Expression expression = elMap.get(key);\n            if (null == expression) {\n                return m.group();\n            }\n            return expression.parse(m.group(), map);\n        });\n        return text;\n    }\n\n    /**\n     * \u89e3\u6790\u53d8\u91cf\n     *\n     * @param text \u8981\u89e3\u6790\u7684\u6587\u672c\n     * @param map  \u4f20\u5165\u7684\u53c2\u6570\n     * @return String\n     */\n    public static String parse(String", "first_line_groundtruth": "List<String> exps = RegexHelper.find(text, \"\\\\$\\\\{", "first_line_prediction": " // \u89e3\u6790\u53d8\u91cf", "match": 0}
{"groundtruth": "webAgent.url(url).execute(map);", "prediction": " webAgent.webAgent(WebAgent.defaultAgent().referer(url).useAgent(webAgent.getConfig().getAgent()).url(url)).execute(map);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    return null;\n                }\n            }).thenApply(parserFunction);\n            cfList.add(cf);\n            cf.thenAccept(consumer);\n        }\n        CompletableFuture.allOf(cfList.toArray(new CompletableFuture[]{})).join();\n        return list;\n    }", "first_line_groundtruth": "webAgent.url(url).execute(map);", "first_line_prediction": " webAgent.webAgent(WebAgent.defaultAgent().referer(url).useAgent(webAgent.getConfig().getAgent()).url(url)).execute(map);", "match": 0}
{"groundtruth": "data = webAgent.execute(map);", "prediction": " webAgent = this.webAgent;\n        Function<WebAgent, R> parserFunction = this.parserFunction;\n        int pageIndex = 1;\n        int total = 0;\n        while (true) {\n            map.put(pageIndexKey, pageIndex);\n            map.put(totalKey, total);\n            R result = execute(map);\n            if (result == null) {\n                break;\n            }\n            JsonHelper jsonHelper = new JsonHelper(result);\n            total = jsonHelper.getInt(totalKey);\n            list.add(result);\n            pageIndex++;\n        }\n        return list;", "first_line_groundtruth": "data = webAgent.execute(map);", "first_line_prediction": " webAgent = this.webAgent;", "match": 0}
{"groundtruth": "!result.getStatusCode().equals(200)) {", "prediction": "result.getStatusCode() != 200) {\n            log.error(\"http\u72b6\u6001\u7801\u4e0d\u4e3a200\uff1a{}\", result.getStatusCode());\n            throw new RuntimeException(\"http\u72b6\u6001\u7801\u4e0d\u4e3a200\uff1a\" + result.getStatusCode());\n        }\n    }\n\n    public void contentType() {\n        log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n        if (result.getContentType() == null || result.getContentType().isEmpty()) {\n            log.error(\"http\u54cd\u5e94\u7c7b\u578b\u4e3a\u7a7a\uff1a{}\", result.getContentType());\n            throw new RuntimeException(\"http\u54cd\u5e94\u7c7b\u578b\u4e3a\u7a7a\uff1a\" + result.getContentType());\n        }\n   ", "first_line_groundtruth": "!result.getStatusCode().equals(200)) {", "first_line_prediction": "result.getStatusCode() != 200) {", "match": 0}
{"groundtruth": "Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\uff01\");", "prediction": " return new DateHelper(LocalDateTime.ofInstant(timeStamp, ZoneId.systemDefault()));\n    }\n\n    /**\n     * \u521d\u59cb\u5bf9\u8c61\n     *\n     * @param timeStamp \u65f6\u95f4", "first_line_groundtruth": "Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\uff01\");", "first_line_prediction": " return new DateHelper(LocalDateTime.ofInstant(timeStamp, ZoneId.systemDefault()));", "match": 0}
{"groundtruth": "text = text.replace(el, elMap.get(tag).execute(argsMap));", "prediction": " text = text.replace(el, elMap.get(tag).parser(argsMap, map));\n                } else {\n                    text = text.replace(el, MapUtil.get(argsMap, tag, \"\"));\n                }\n            }\n        }\n        return text;\n    }", "first_line_groundtruth": "text = text.replace(el, elMap.get(tag).execute(argsMap));", "first_line_prediction": " text = text.replace(el, elMap.get(tag).parser(argsMap, map));", "match": 0}
{"groundtruth": "return parent.type();", "prediction": " return UnreflectType.of(source);\n    }\n\n    @Override\n    public String toString() {\n        return type().toString() + \" \" + Parameters.toString(source.getParameters());\n    }", "first_line_groundtruth": "return parent.type();", "first_line_prediction": " return UnreflectType.of(source);", "match": 0}
{"groundtruth": "UnreflectType.of(source.getGenericReturnType());", "prediction": " UnreflectType.of(source.getReturnType());\n    }\n\n    @Override\n    public String name() {\n        return source.getName();\n    }\n\n    @Override\n    public Method source() {\n        return source;\n    }\n\n    @Override\n    public String toString() {\n        return type().toString() + \" \" + name() + \" \" + parameters().toString();\n    }", "first_line_groundtruth": "UnreflectType.of(source.getGenericReturnType());", "first_line_prediction": " UnreflectType.of(source.getReturnType());", "match": 0}
{"groundtruth": "if (result.getStatusCode() == 400) {", "prediction": " {\n                log.warn(\"\u672a\u77e5\u9519\u8bef\uff01\");\n            }\n        }\n    }\n\n    public void contentType() {\n        log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n        if (!result.getContentType().startsWith(\"text/html\")) {\n            log.warn(\"\u54cd\u5e94\u7c7b\u578b\u4e0d\u6b63\u786e\uff01\");\n        }\n    }", "first_line_groundtruth": "if (result.getStatusCode() == 400) {", "first_line_prediction": " {", "match": 0}
{"groundtruth": "(T) accessor.invoke(null, args);", "prediction": " accessor.invoke(delegate.source(), args);\n    }", "first_line_groundtruth": "(T) accessor.invoke(null, args);", "first_line_prediction": " accessor.invoke(delegate.source(), args);", "match": 0}
{"groundtruth": "UnreflectType.of(source);", "prediction": " UnreflectType.of(source);\n    }\n\n    @Override\n    public String name() {\n        return source.getSimpleName();\n    }\n\n    @Override\n    public ConstructorAccess<T> constructor(Constructor<?> constructor) {\n        return new ReflectionConstructorAccess<>(constructor, object);\n    }\n\n    @Override\n    public StreamEx<ConstructorAccess<T>> constructors() {\n        return StreamEx.of(source.getDeclaredConstructors())\n                .map(constructor -> new ReflectionConstructorAccess<>(constructor, object));\n    }\n\n    @Override\n    public StreamEx<FieldAccess<T>> fields() {\n        return StreamEx.of(source.", "first_line_groundtruth": "UnreflectType.of(source);", "first_line_prediction": " UnreflectType.of(source);", "match": 0}
{"groundtruth": "return (T) JdkInternals.allocateInstance(toClass());", "prediction": " return Unreflect.allocate(toClass());\n    }\n\n    /**\n     * Returns the type of the represented class.\n     *\n     * @return the type of the represented class\n     */\n    public Class<?> toClass() {\n        return typeToken.getRawType();\n    }\n\n    /**\n     * Returns the type of the represented class.\n     *\n     * @return the type of the represented class\n     */\n    public Type getType() {\n        return typeToken.getType();\n    }\n\n    /**\n     * Returns the type of the represented class.\n     *\n     * @return the type of the represented class\n     */\n    public TypeToken<?> getType", "first_line_groundtruth": "return (T) JdkInternals.allocateInstance(toClass());", "first_line_prediction": " return Unreflect.allocate(toClass());", "match": 0}
{"groundtruth": "return new BytecodeFieldAccess((ReflectionFieldAccess) delegate.bind(object), accessor);", "prediction": " return withObject(object);\n     }", "first_line_groundtruth": "return new BytecodeFieldAccess((ReflectionFieldAccess) delegate.bind(object), accessor);", "first_line_prediction": " return withObject(object);", "match": 0}
{"groundtruth": "return UnreflectType.of(source.getGenericType());", "prediction": " return UnreflectType.of(source.getGenericType());\n    }\n\n    @Override\n    public String name() {\n        return source.getName();\n    }\n\n    @Override\n    public String toString() {\n        return type().toString() + \" \" + name();\n    }", "first_line_groundtruth": "return UnreflectType.of(source.getGenericType());", "first_line_prediction": " return UnreflectType.of(source.getGenericType());", "match": 0}
{"groundtruth": "webAgent.getConfig().getUrl()).set(pageIndexKey, String.valueOf(i)).getUrl();", "prediction": "data.getUrl()).set(pageIndexKey, i).getUrl();\n            cfList.add(CompletableFuture.supplyAsync(() -> webAgent.execute(url)).thenApply(parserFunction));\n            cfList.get(i).thenAccept(consumer);\n        }\n        cfList.forEach(CompletableFuture::join);\n        return list;\n    }\n\n    public WebAgent getWebAgent() {\n        return webAgent;\n    }\n\n    public Function<WebAgent, R> getParserFunction() {\n        return parserFunction;\n    }", "first_line_groundtruth": "webAgent.getConfig().getUrl()).set(pageIndexKey, String.valueOf(i)).getUrl();", "first_line_prediction": "data.getUrl()).set(pageIndexKey, i).getUrl();", "match": 0}
{"groundtruth": "().toClass().getSimpleName() + Parameters.toString(parameters().toList());", "prediction": "().toString() + \" \" + name() + Parameters.toString(parameters().toList());\n    }", "first_line_groundtruth": "().toClass().getSimpleName() + Parameters.toString(parameters().toList());", "first_line_prediction": "().toString() + \" \" + name() + Parameters.toString(parameters().toList());", "match": 0}
{"groundtruth": "int totalRows = json.get(totalKey, Integer.class);", "prediction": " //\u83b7\u53d6\u603b\u9875\u6570\n        Integer total = json.getInt(totalKey);\n        //\u83b7\u53d6\u603b\u9875\u6570\n        Integer pageCount = total / pageSize + (total % pageSize == 0 ? 0 : 1);\n        //\u83b7\u53d6\u5f53\u524d\u9875\u7801\n        Integer pageIndex = json.getInt(pageIndexKey);\n        //\u83b7\u53d6\u5f53\u524d\u9875\u7801\n        Integer begin = (pageIndex - 1) * pageSize;\n        //\u83b7\u53d6\u5f53\u524d\u9875\u7801\n        Integer end = pageIndex * pageSize;\n        //\u83b7\u53d6\u5f53\u524d\u9875\u7801\n        Integer count = end - begin;\n        //\u83b7\u53d6\u5f53\u524d\u9875\u7801\n        Integer endCount = end - begin +", "first_line_groundtruth": "int totalRows = json.get(totalKey, Integer.class);", "first_line_prediction": " //\u83b7\u53d6\u603b\u9875\u6570", "match": 0}
{"groundtruth": "(result.getStatusCode() == 401) {", "prediction": " (result.getStatusCode() == 403) {\n                log.warn(\"\u8bbf\u95ee\u88ab\u7981\u6b62\uff01\");\n            } else if (result.getStatusCode() == 400) {\n                log.warn(\"\u8bf7\u6c42\u9519\u8bef\uff01\");\n            } else if (result.getStatusCode() == 301) {\n                log.warn(\"\u6c38\u4e45\u91cd\u5b9a\u5411\uff01\");\n            } else if (result.getStatusCode() == 302) {\n                log.warn(\"\u4e34\u65f6\u91cd\u5b9a\u5411\uff01\");\n            } else if (result.getStatusCode() == 307) {\n                log.warn(\"\u4e34\u65f6\u91cd", "first_line_groundtruth": "(result.getStatusCode() == 401) {", "first_line_prediction": " (result.getStatusCode() == 403) {", "match": 0}
{"groundtruth": ".warn(\"\u672a\u652f\u6301\u7684\u72b6\u6001\u7801: {", "prediction": ".warn(\"\u672a\u77e5\u9519\u8bef\uff01\");\n            }\n        }\n    }\n\n    public void contentType() {\n        log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n        if (!result.getContentType().startsWith(\"text/html\")) {\n            log.warn(\"\u54cd\u5e94\u7c7b\u578b\u4e0d\u6b63\u786e\uff01\");\n        }\n    }", "first_line_groundtruth": ".warn(\"\u672a\u652f\u6301\u7684\u72b6\u6001\u7801: {", "first_line_prediction": ".warn(\"\u672a\u77e5\u9519\u8bef\uff01\");", "match": 0}
{"groundtruth": "Assert.isTrue(data.get(0) instanceof JSONArray, \"\u6570\u636e\u683c\u5f0f\u4e0d\u5339\u914d\uff01\");", "prediction": " String temp = \"insert into %s (%s) values %s;\";\n        List<String> list = new ArrayList<>();\n        for (int i = 0; i < data.size(); i++) {\n            JSONObject row = data.getJSONObject(i);\n            String values = Arrays.stream(columns).map(c -> {\n                String val = row.getString(c);\n                //\u79d1\u5b66\u8ba1\u6570\u8f6c\u6362\n                if (val.matches(RegexHelper.REGEX_SCIENTIFIC_NOTATION)) {\n                    return String.format(\"'%s'\", null == val ? \"\" : new BigDecimal(val).toPlainString", "first_line_groundtruth": "Assert.isTrue(data.get(0) instanceof JSONArray, \"\u6570\u636e\u683c\u5f0f\u4e0d\u5339\u914d\uff01\");", "first_line_prediction": " String temp = \"insert into %s (%s) values %s;\";", "match": 0}
{"groundtruth": "String type = result.getContentType();", "prediction": " log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n         if (!result.getContentType().startsWith(\"text/html\")) {\n             log.warn(\"\u54cd\u5e94\u7c7b\u578b\u4e0d\u6b63\u786e\uff01\");\n         }\n    }", "first_line_groundtruth": "String type = result.getContentType();", "first_line_prediction": " log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());", "match": 0}
{"groundtruth": "return webAgent.execute(map);", "prediction": " result = parserFunction.apply(webAgent);\n            } catch (Exception e) {\n                log.error(\"\u89e3\u6790\u51fd\u6570\u6267\u884c\u5931\u8d25\uff1a{}\", webAgent.getUrl(), e);\n                throw new RuntimeException(e);\n            }\n            return result;\n        });\n        if (null != map) {\n            cf.thenAccept(r -> {\n                JsonHelper jsonHelper = JsonHelper.of(r);\n                jsonHelper.set(map);\n            });\n        }\n        return cf.join();\n    }\n\n    public static <R> EasyCrawl<R> of(WebAgent webAgent) {\n        return new EasyCrawl<", "first_line_groundtruth": "return webAgent.execute(map);", "first_line_prediction": " result = parserFunction.apply(webAgent);", "match": 0}
{"groundtruth": "if (result.getStatusCode() >= 500) {", "prediction": " log.error(\"http\u72b6\u6001\u7801\u4e0d\u4e3a200\uff0c\u8bf7\u68c0\u67e5\uff1a{}\", result.getStatusCode());\n        }\n    }\n\n    public void contentType() {\n        log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n        if (!result.getContentType().startsWith(\"text/html\")) {\n            log.error(\"http\u54cd\u5e94\u7c7b\u578b\u4e0d\u4e3atext/html\uff0c\u8bf7\u68c0\u67e5\uff1a{}\", result.getContentType());\n        }\n    }", "first_line_groundtruth": "if (result.getStatusCode() >= 500) {", "first_line_prediction": " log.error(\"http\u72b6\u6001\u7801\u4e0d\u4e3a200\uff0c\u8bf7\u68c0\u67e5\uff1a{}\", result.getStatusCode());", "match": 0}
{"groundtruth": "JsonHelper json = data.getJson();", "prediction": " int pageIndex = 1;\n        while (true) {\n            String url = data.getUrl();\n            String page = data.getText();\n            int total = Integer.parseInt(data.getText(totalKey));\n            int pageIndexNow = Integer.parseInt(data.getText(pageIndexKey));\n            if (pageIndexNow >= total) {\n                break;\n            }\n            if (pageIndexNow == pageIndex) {\n                break;\n            }\n            pageIndex = pageIndexNow;\n            String pageUrl = UrlHelper.replace(url, pageIndexKey, pageIndex);\n            WebAgent pageData = webAgent", "first_line_groundtruth": "JsonHelper json = data.getJson();", "first_line_prediction": " int pageIndex = 1;", "match": 0}
{"groundtruth": "isTrue(headHelper.fileContent(), \"\u975e\u6587\u4ef6\u6d41\u8bf7\u6c42\uff0c\u65e0\u6cd5\u8f93\u51fa\u6587\u4ef6\uff01\");", "prediction": "notNull(headHelper, \"\u8fd4\u56de\u5bf9\u8c61\u4e3a\u7a7a\uff01\u6216\u8005\u7a0b\u5e8f\u8fd8\u672a\u6267\u884cexecute\u65b9\u6cd5\uff01\");\n        String fileName = headHelper.getFileName();\n        Assert.notNull(fileName, \"\u8fd4\u56de\u5bf9\u8c61\u4e3a\u7a7a\uff01\u6216\u8005\u7a0b\u5e8f\u8fd8\u672a\u6267\u884cexecute\u65b9\u6cd5\uff01\");\n        String folder = this.config.getFolder();\n        Assert.notNull(folder, \"\u8fd4\u56de\u5bf9\u8c61\u4e3a\u7a7a\uff01\u6216\u8005\u7a0b\u5e8f\u8fd8\u672a\u6267\u884cexecute\u65b9\u6cd5\uff01\");\n        String filePath = folder + File.separator + fileName;\n        File file = new File(filePath);\n        try {\n            file.createNewFile();\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(", "first_line_groundtruth": "isTrue(headHelper.fileContent(), \"\u975e\u6587\u4ef6\u6d41\u8bf7\u6c42\uff0c\u65e0\u6cd5\u8f93\u51fa\u6587\u4ef6\uff01\");", "first_line_prediction": "notNull(headHelper, \"\u8fd4\u56de\u5bf9\u8c61\u4e3a\u7a7a\uff01\u6216\u8005\u7a0b\u5e8f\u8fd8\u672a\u6267\u884cexecute\u65b9\u6cd5\uff01\");", "match": 0}
{"groundtruth": "setBody(transcoding(result.getBodyAsByes(), charset));", "prediction": "setCharset(charset);\n            }\n        }\n        return result;\n    }", "first_line_groundtruth": "setBody(transcoding(result.getBodyAsByes(), charset));", "first_line_prediction": "setCharset(charset);", "match": 0}
{"groundtruth": "wa = this.webAgent.execute(data);", "prediction": " webAgent = this.webAgent.execute(data);\n        this.result = webAgent.getResult();\n        return this;\n    }\n\n    @Override\n    public AgentResult getResult() {\n        return this.result;\n    }\n\n    @Override\n    public JsonHelper getJson() {\n        return this.webAgent.getJson();\n    }\n\n    @Override\n    public String getText() {\n        return this.webAgent.getText();\n    }\n\n    @Override\n    public File getFile() {\n        return this.webAgent.getFile();\n    }\n\n    @Override\n    public WebAgent addInterceptor(AfterInterceptor interceptor) {\n        this.", "first_line_groundtruth": "wa = this.webAgent.execute(data);", "first_line_prediction": " webAgent = this.webAgent.execute(data);", "match": 0}
{"groundtruth": "hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;", "prediction": "hct.getHue()) <= 49;\n    final boolean chromaPasses = hct.getChroma() >= 16.;\n    return huePasses && chromaPasses;\n  }", "first_line_groundtruth": "hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;", "first_line_prediction": "hct.getHue()) <= 49;", "match": 0}
{"groundtruth": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);", "prediction": " this.a2 = TonalPalette.fromHueAndChroma(hue, chroma);\n       this.a3 = TonalPalette.fromHueAndChroma(hue, chroma);\n       this.n1 = TonalPalette.fromHueAndChroma(hue, chroma);\n       this.n2 = TonalPalette.fromHueAndChroma(hue, chroma);\n       this.error = TonalPalette.fromHueAndChroma(hue, chroma);\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);", "first_line_groundtruth": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);", "first_line_prediction": " this.a2 = TonalPalette.fromHueAndChroma(hue, chroma);", "match": 0}
{"groundtruth": "ColorUtils.yFromLstar(tone);", "prediction": "100.0 - tone;\n    return ColorUtils.lstarFromY(darkY * ratio + tone);\n  }", "first_line_groundtruth": "ColorUtils.yFromLstar(tone);", "first_line_prediction": "100.0 - tone;", "match": 0}
{"groundtruth": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2));", "prediction": "1.0 + (t1 - t2) / (1.0 - t2);\n  }\n\n  /**\n   * Calculates the luminance of a color given its XYZ values.\n   *\n   * <p>The luminance is defined as Y in XYZ, relative luminance. However, relative luminance is\n   * linear to number of photons, not to perception of lightness. Perceptual luminance, L* in\n   * L*a*b*, T in HCT, is. Designers prefer color spaces with perceptual luminance since they're\n   * accurate to the eye", "first_line_groundtruth": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2));", "first_line_prediction": "1.0 + (t1 - t2) / (1.0 - t2);", "match": 0}
{"groundtruth": "Math.round(hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;", "prediction": "0.0 <= hct.getHue() && hct.getHue() <= 360.0;\n    final boolean chromaPasses = 0.0 <= hct.getChroma() && hct.getChroma() <= 100.0;\n    final boolean isYellow = hct.getLuminance() >= 50.0;\n    return huePasses && chromaPasses && isYellow;\n  }", "first_line_groundtruth": "Math.round(hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;", "first_line_prediction": "0.0 <= hct.getHue() && hct.getHue() <= 360.0;", "match": 0}
{"groundtruth": ".from(hct.getHue(), hct.getChroma(), 70.0);", "prediction": ".fromHct(hct.getHue(), hct.getChroma() * 1.25);\n    }\n    return hct;\n  }", "first_line_groundtruth": ".from(hct.getHue(), hct.getChroma(), 70.0);", "first_line_prediction": ".fromHct(hct.getHue(), hct.getChroma() * 1.25);", "match": 0}
{"groundtruth": "round(hct.getChroma()) > 16.0;", "prediction": "round(hct.getChroma()) >= 100.0 && Math.round(hct.getChroma()) <= 120.0;\n    return huePasses && chromaPasses;\n  }", "first_line_groundtruth": "round(hct.getChroma()) > 16.0;", "first_line_prediction": "round(hct.getChroma()) >= 100.0 && Math.round(hct.getChroma()) <= 120.0;", "match": 0}
{"groundtruth": "hct.getChroma();", "prediction": "1.0;\n    if (isContent) {\n      chroma = 0.9;\n    }\n    a1 = TonalPalette.fromHct(new Hct(hue, chroma, 0.1));\n    a2 = TonalPalette.fromHct(new Hct(hue, chroma, 0.2));\n    a3 = TonalPalette.fromHct(new Hct(hue, chroma, 0.3));\n    n1 = TonalPalette.fromHct(new Hct(hue, chroma, 0.4));\n    n", "first_line_groundtruth": "hct.getChroma();", "first_line_prediction": "1.0;", "match": 0}
{"groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);", "prediction": "a1 = TonalPalette.fromHct(hct.withHue(hue - 120));\n      this.a2 = TonalPalette.fromHct(hct.withHue(hue - 60));\n      this.a3 = TonalPalette.fromHct(hct.withHue(hue));\n      this.n1 = TonalPalette.fromHct(hct.withHue(hue + 60));\n      this.n2 = TonalPalette.fromHct(hct.withHue(hue + 120));\n      this.", "first_line_groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);", "first_line_prediction": "a1 = TonalPalette.fromHct(hct.withHue(hue - 120));", "match": 0}
{"groundtruth": "hct.getTone()) < 65.0;", "prediction": "hct.getTone()) <= 49.0;\n    return huePasses && chromaPasses && tonePasses;\n  }", "first_line_groundtruth": "hct.getTone()) < 65.0;", "first_line_prediction": "hct.getTone()) <= 49.0;", "match": 0}
{"groundtruth": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2.);", "prediction": ".a3 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n      this.n2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);\n      this.error = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.", "first_line_groundtruth": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2.);", "first_line_prediction": ".a3 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);", "match": 0}
{"groundtruth": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;", "prediction": "100.0 - tone;\n    if (Math.abs(returnValue - tone) > CONTRAST_RATIO_EPSILON) {\n      return -1.0;\n    }\n    return returnValue;\n  }", "first_line_groundtruth": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;", "first_line_prediction": "100.0 - tone;", "match": 0}
{"groundtruth": "hue = hct.getHue();", "prediction": " hue = hct.getHue();\n    double  chroma = hct.getChroma();\n    double  luma = hct.getLuma();\n    double  saturation = hct.getSaturation();\n    double  brightness = hct.getBrightness();\n    double  contrast = hct.getContrast();\n    double  tonalHue = hue;\n    double  tonalChroma = chroma;\n    double  tonalLuma = luma;\n    double  tonalSaturation = saturation;\n    double  tonalBrightness = brightness;\n    double  tonalContrast = contrast", "first_line_groundtruth": "hue = hct.getHue();", "first_line_prediction": " hue = hct.getHue();", "match": 0}
{"groundtruth": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 4.));", "prediction": " = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n      this.n2  = TonalPalette.fromHueAndChroma(hue + 120., chroma / 2.);\n      this.error = TonalPalette.fromHueAndChroma(hue + 180., chroma / 2.);\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);\n      this", "first_line_groundtruth": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 4.));", "first_line_prediction": " = TonalPalette.fromHueAndChroma(hue, chroma / 2.);", "match": 0}
{"groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma));", "prediction": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2.);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, chroma / 12.);\n      this.n2 = TonalPalette.fromHueAndChroma(hue, chroma / 6.);\n    }\n    this.error = Tonal", "first_line_groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma));", "first_line_prediction": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);", "match": 0}
{"groundtruth": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));", "prediction": " this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 2.));\n      this.error = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / ", "first_line_groundtruth": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));", "first_line_prediction": " this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 2.));", "match": 0}
{"groundtruth": "= TonalPalette.fromHueAndChroma(hue, 16.);", "prediction": " = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 3.));\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60., max(48., chroma / 2.));\n      this.n1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 12.));\n      this.n2 = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 6.));\n    }\n    this.error = T", "first_line_groundtruth": "= TonalPalette.fromHueAndChroma(hue, 16.);", "first_line_prediction": " = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 3.));", "match": 0}
{"groundtruth": "ColorUtils.blueFromArgb(argb);", "prediction": "0xFF & (argb >> 8);\n    int green = 0xFF & (argb >> 16);\n    return String.format(\"#%02x%02x%02x\", red, green, blue);\n  }\n\n  /**\n   * ARGB representation of color, ex. 0xffff0000 for red.\n   *\n   * @param hex Hex string representing a color.\n   */\n  public static int argbFromHex(String hex) {\n    int red = Integer.parseInt(hex.substring(1, 3), 16);\n    int green =", "first_line_groundtruth": "ColorUtils.blueFromArgb(argb);", "first_line_prediction": "0xFF & (argb >> 8);", "match": 0}
{"groundtruth": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 24.);", "prediction": "a3 = TonalPalette.fromHueAndChroma(hue, 24.);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, 10.);\n      this.n2 = TonalPalette.fromHueAndChroma(hue, 12.);\n    }\n    this.error = TonalPalette.fromHueAndChroma(hue, 10.);\n  }", "first_line_groundtruth": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 24.);", "first_line_prediction": "a3 = TonalPalette.fromHueAndChroma(hue, 24.);", "match": 0}
{"groundtruth": "MathUtils.clampInt(0, 255, (int) Math.round(delinearized * 255.0));", "prediction": "255 * (int) Math.round(delinearized);\n  }", "first_line_groundtruth": "MathUtils.clampInt(0, 255, (int) Math.round(delinearized * 255.0));", "first_line_prediction": "255 * (int) Math.round(delinearized);", "match": 0}
{"groundtruth": "return new TonalPalette(hct.getHue(), hct.getChroma(), hct);", "prediction": " return new TonalPalette(hct);\n  }\n\n  private TonalPalette(Hct hct) {\n    this.keyColor = hct;\n    this.hue = hct.getHue();\n    this.chroma = hct.getChroma();\n    this.cache = new HashMap<>();\n  }\n\n  /**\n    * Returns an ARGB integer (i.e. a hex code).\n    *\n    * @param scheme Defines the conditions of the user interface, for example, whether or not it is\n    *     dark mode or light mode, and what the desired contrast level is.\n    */\n  public", "first_line_groundtruth": "return new TonalPalette(hct.getHue(), hct.getChroma(), hct);", "first_line_prediction": " return new TonalPalette(hct);", "match": 0}
{"groundtruth": ".n1 = TonalPalette.fromHueAndChroma(hue, 4.);", "prediction": ".n1 = TonalPalette.fromHueAndChroma(hue, 10.);\n      this.n2 = TonalPalette.fromHueAndChroma(hue, 12.);\n    }\n    this.error = TonalPalette.fromHueAndChroma(hue, 10.);\n  }", "first_line_groundtruth": ".n1 = TonalPalette.fromHueAndChroma(hue, 4.);", "first_line_prediction": ".n1 = TonalPalette.fromHueAndChroma(hue, 10.);", "match": 0}
{"groundtruth": "return MathUtils.matrixMultiply(new double[] {", "prediction": " double[][] matrix = SRGB_TO_XYZ;\n    double x = matrix[0][0] * r + matrix[0][1] * g + matrix[0][2] * b;\n    double y = matrix[1][0] * r + matrix[1][1] * g + matrix[1][2] * b;\n    double z = matrix[2][0] * r + matrix[2][1] * g + matrix[2][2] * b;\n    return new double[] {x, y, z};\n  }", "first_line_groundtruth": "return MathUtils.matrixMultiply(new double[] {", "first_line_prediction": " double[][] matrix = SRGB_TO_XYZ;", "match": 0}
{"groundtruth": "differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {", "prediction": "degreesBetween(hct.getHue(), chosenHct.getHue()) == differenceDegrees) {\n            hasDuplicateHue = true;\n            break;\n          }\n        }\n        if (!hasDuplicateHue) {\n          chosenColors.add(hct);\n        }\n      }\n      if (chosenColors.size() >= desired) {\n        break;\n      }\n    }\n\n    // If the desired number of colors is not available, return the fallback color.\n    if (chosenColors.size() < desired) {\n      chosenColors.add(Hct.fromInt(fallbackColorArgb));\n    }\n\n    // Return the colors in", "first_line_groundtruth": "differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {", "first_line_prediction": "degreesBetween(hct.getHue(), chosenHct.getHue()) == differenceDegrees) {", "match": 0}
{"groundtruth": ") Math.floor(hct.getHue());", "prediction": ") hct.getHue();\n      huePopulation[hue]++;\n      populationSum += entry.getValue();\n    }\n\n    // Sort the colors by hue, then by chroma.\n    Collections.sort(colorsHct, new Comparator<Hct>() {\n      @Override\n      public int compare(Hct hct1, Hct hct2) {\n        int hue1 = (int) hct1.getHue();\n        int hue2 = (int) hct2.getHue();\n        if (hue1 < hue2) {\n          return -1;\n        } else if (hue1 > hue2", "first_line_groundtruth": ") Math.floor(hct.getHue());", "first_line_prediction": ") hct.getHue();", "match": 0}
{"groundtruth": "= Math.abs(smallestDeltaHct.getChroma() - chroma);", "prediction": " = smallestDeltaHct.getDelta();\n    for (double tone = startTone; tone <= 100.0; tone += 10.0) {\n      Hct hct = Hct.from(hue, chroma, tone);\n      double delta = hct.getDelta();\n      if (delta < smallestDelta) {\n        smallestDelta = delta;\n        smallestDeltaHct = hct;\n      }\n    }\n    return smallestDeltaHct;\n  }\n\n  /**\n    * Get the HCT color for a given tone.\n    *\n    * @param tone 0 <= tone <= ", "first_line_groundtruth": "= Math.abs(smallestDeltaHct.getChroma() - chroma);", "first_line_prediction": " = smallestDeltaHct.getDelta();", "match": 0}
{"groundtruth": "= MathUtils.sanitizeDegreesInt(i);", "prediction": " = i % 360;\n        hueExcitedProportions[neighborHue] += proportion;\n      }\n    }\n\n    // Sort the HCT colors by hue, and then by chroma.\n    Collections.sort(colorsHct, new Comparator<Hct>() {\n      @Override\n      public int compare(Hct hct1, Hct hct2) {\n        int hueComparison = (int) Math.signum(hct1.getHue() - hct2.getHue());\n        if (hueComparison != 0) {\n          return hueComparison;\n        }\n        return (int", "first_line_groundtruth": "= MathUtils.sanitizeDegreesInt(i);", "first_line_prediction": " = i % 360;", "match": 0}
{"groundtruth": "if (MathUtils.differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {", "prediction": " if (chosenHct.getHue() == hct.getHue()) {\n             hasDuplicateHue = true;\n             break;\n           }\n        }\n        if (!hasDuplicateHue) {\n          chosenColors.add(hct);\n        }\n      }\n      if (chosenColors.size() >= desired) {\n        break;\n      }\n    }\n\n    // If the desired number of colors is not available, return the fallback color.\n    if (chosenColors.size() < desired) {\n      chosenColors.add(Hct.fromInt(fallbackColorArgb));\n    }\n\n    // Return the colors in the order of most", "first_line_groundtruth": "if (MathUtils.differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {", "first_line_prediction": " if (chosenHct.getHue() == hct.getHue()) {", "match": 0}
{"groundtruth": "filter && (hct.getChroma() < CUTOFF_CHROMA || proportion <= CUTOFF_EXCITED_PROPORTION)) {", "prediction": "proportion < CUTOFF_EXCITED_PROPORTION) {\n        continue;\n      }\n      double chroma = hct.getChroma();\n      if (chroma < CUTOFF_CHROMA) {\n        continue;\n      }\n      double usage = colorsToPopulation.get(hct.getInt());\n      if (usage < 1) {\n        continue;\n      }\n      scoredHcts.add(new ScoredHCT(hct, proportion, usage));\n    }\n\n    // Sort the colors by chroma, then usage.\n    Collections.sort(scoredHcts,", "first_line_groundtruth": "filter && (hct.getChroma() < CUTOFF_CHROMA || proportion <= CUTOFF_EXCITED_PROPORTION)) {", "first_line_prediction": "proportion < CUTOFF_EXCITED_PROPORTION) {", "match": 0}
{"groundtruth": "MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));", "prediction": "360 - (int) Math.floor(hct.getHue());\n      double proportion = huePopulation[hue] / populationSum;\n      double chroma = hct.getChroma();\n      double score =\n          WEIGHT_PROPORTION * proportion + WEIGHT_CHROMA_ABOVE * chroma + WEIGHT_CHROMA_BELOW * (1. - chroma);\n      scoredHcts.add(new ScoredHCT(hct, score));\n    }\n\n    // Sort the colors by score, and then by hue.\n    Collections.sort(scored", "first_line_groundtruth": "MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));", "first_line_prediction": "360 - (int) Math.floor(hct.getHue());", "match": 0}
{"groundtruth": "smallestDeltaHct = Hct.from(hue, chroma, startTone);", "prediction": " hct = Hct.from(hue, chroma, startTone);\n    return hct;\n  }\n\n  /**\n    * Get the tone that matches the given color.\n    *\n    * @param argb ARGB representation of a color\n    * @return Tone matching the given color\n    */\n  public static int getTone(int argb) {\n    return Hct.fromInt(argb).getTone();\n  }\n\n  /**\n    * Get the tone that matches the given color.\n    *\n    * @param hct HCT representation of a color\n    * @return Tone matching the given color\n   ", "first_line_groundtruth": "smallestDeltaHct = Hct.from(hue, chroma, startTone);", "first_line_prediction": " hct = Hct.from(hue, chroma, startTone);", "match": 0}
{"groundtruth": "= MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));", "prediction": " = (int) Math.floor(hct.getHue());\n      double proportion = huePopulation[hue] / populationSum;\n      double chroma = hct.getChroma();\n      double score =\n          WEIGHT_PROPORTION * proportion +\n          WEIGHT_CHROMA_ABOVE * (chroma - CUTOFF_CHROMA) +\n          WEIGHT_CHROMA_BELOW * (CUTOFF_CHROMA - chroma);\n      scoredHcts.add(new ScoredHCT(hct, score));\n    }\n\n    // Sort the colors by score", "first_line_groundtruth": "= MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));", "first_line_prediction": " = (int) Math.floor(hct.getHue());", "match": 0}
{"groundtruth": "= Hct.fromInt(entry.getKey());", "prediction": " = Hct.fromArgb(entry.getKey());\n      colorsHct.add(hct);\n      huePopulation[hct.getHue()] += entry.getValue();\n      populationSum += entry.getValue();\n    }\n\n    // Sort the colors by hue, and then by chroma.\n    Collections.sort(colorsHct, new Comparator<Hct>() {\n      @Override\n      public int compare(Hct hct1, Hct hct2) {\n        int hueDiff = hct1.getHue() - hct2.getHue();\n        if (hueDiff != 0) {\n         ", "first_line_groundtruth": "= Hct.fromInt(entry.getKey());", "first_line_prediction": " = Hct.fromArgb(entry.getKey());", "match": 0}
{"groundtruth": "hct.getChroma() < TARGET_CHROMA ? WEIGHT_CHROMA_BELOW : WEIGHT_CHROMA_ABOVE;", "prediction": "1.0 - Math.max(0.0, Math.min(1.0, (hct.getChroma() - CUTOFF_CHROMA) / (1.0 - CUTOFF_CHROMA)));\n      double chromaAboveWeight =\n          WEIGHT_CHROMA_ABOVE * (hct.getChroma() - CUTOFF_CHROMA) / (1.0 - CUTOFF_CHROMA);\n      double chromaBelowWeight =\n          WEIGHT_CHROMA_BELOW * (CUTOFF_CHROMA - h", "first_line_groundtruth": "hct.getChroma() < TARGET_CHROMA ? WEIGHT_CHROMA_BELOW : WEIGHT_CHROMA_ABOVE;", "first_line_prediction": "1.0 - Math.max(0.0, Math.min(1.0, (hct.getChroma() - CUTOFF_CHROMA) / (1.0 - CUTOFF_CHROMA)));", "match": 0}
{"groundtruth": "= TonalPalette.fromHueAndChroma(25, 84.);", "prediction": " = TonalPalette.fromHueAndChroma(hue, 12.);\n  }", "first_line_groundtruth": "= TonalPalette.fromHueAndChroma(25, 84.);", "first_line_prediction": " = TonalPalette.fromHueAndChroma(hue, 12.);", "match": 0}
{"groundtruth": "ColorUtils.labFromArgb(color.toInt());", "prediction": " Lab.fromHct(color);\n    double[] lch = Lch.fromLab(lab);\n    double[] xyz = Xyz.fromLch(lch);\n    double[] lab2 = Xyz.toLab(xyz);\n    double[] lch2 = Lab.toLch(lab2);\n    double[] lab3 = Lch.fromLch(lch2);\n    double[] xyz3 = Xyz.fromLab(lab3);\n    double[] lab4 = Xyz.toLab(xyz3);\n    double[] lch4 = Lab.toLch(lab", "first_line_groundtruth": "ColorUtils.labFromArgb(color.toInt());", "first_line_prediction": " Lab.fromHct(color);", "match": 0}
{"groundtruth": "(), hct.getChroma(), hct);", "prediction": "(), hct.getChroma());\n  }\n\n  /**\n    * Create tones using a HCT color.\n    *\n    * @param hue Hue of the color.\n    * @param chroma Chroma of the color.\n    * @return Tones matching that color's hue and chroma.\n    */\n  public static TonalPalette fromHueAndChroma(double hue, double chroma) {\n    return new TonalPalette(hue, chroma);\n  }\n\n  private TonalPalette(double hue, double chroma) {\n    this.hue = hue;\n    this.chroma = chrom", "first_line_groundtruth": "(), hct.getChroma(), hct);", "first_line_prediction": "(), hct.getChroma());", "match": 0}
{"groundtruth": "(hue, input.getChroma(), input.getTone());", "prediction": "Hsv(hue, 1., 1.);\n      hcts.add(colorAtHue);\n    }\n    precomputedHctsByHue = hcts;\n    return hcts;\n  }", "first_line_groundtruth": "(hue, input.getChroma(), input.getTone());", "first_line_prediction": "Hsv(hue, 1., 1.);", "match": 0}
{"groundtruth": "int red = ColorUtils.redFromArgb(argb);", "prediction": " return String.format(\"#%02x%02x%02x\", (argb >> 16) & 0xff, (argb >> 8) & 0xff, argb & 0xff);\n  }", "first_line_groundtruth": "int red = ColorUtils.redFromArgb(argb);", "first_line_prediction": " return String.format(\"#%02x%02x%02x\", (argb >> 16) & 0xff, (argb >> 8) & 0xff, argb & 0xff);", "match": 0}
{"groundtruth": "hctAdd = Hct.from(hue, chroma, startTone + delta);", "prediction": " hct = Hct.from(hue, chroma, startTone + delta);\n      final double deltaChroma = Math.abs(hct.getChroma() - chroma);\n      if (deltaChroma < smallestDelta) {\n        smallestDelta = deltaChroma;\n        smallestDeltaHct = hct;\n      }\n    }\n    return smallestDeltaHct;\n  }\n\n  /**\n    * Get the HCT for a given tone.\n    *\n    * @param tone Tone to get.\n    * @return HCT for the given tone.\n    */\n  public Hct getHct(int", "first_line_groundtruth": "hctAdd = Hct.from(hue, chroma, startTone + delta);", "first_line_prediction": " hct = Hct.from(hue, chroma, startTone + delta);", "match": 0}
{"groundtruth": "== Math.round(smallestDeltaHct.getChroma())) {", "prediction": " == Math.round(smallestDeltaHct.getChroma())) {\n        return smallestDeltaHct;\n      }\n      Hct deltaHct = Hct.from(hue, chroma, startTone + delta);\n      double deltaChroma = Math.abs(deltaHct.getChroma() - chroma);\n      if (deltaChroma < smallestDelta) {\n        smallestDelta = deltaChroma;\n        smallestDeltaHct = deltaHct;\n      }\n    }\n    return smallestDeltaHct;\n  }\n\n  /**\n    * Get the color at a given tone.\n    *\n    * @", "first_line_groundtruth": "== Math.round(smallestDeltaHct.getChroma())) {", "first_line_prediction": " == Math.round(smallestDeltaHct.getChroma())) {", "match": 0}
{"groundtruth": "input.getHue(), coldestHue, warmestHue);", "prediction": "coldestHue, warmestHue);\n\n    // If the start hue is coldest to the warmest hue, then the complement is the warmest hue.\n    // Otherwise, the complement is the coldest hue.\n    double complementHue = startHueIsColdestToWarmest ? warmestHue : coldestHue;\n\n    // The complement is the hue that is closest to the input color's hue, but not too close to the\n    // input color's hue.\n    double complementTemp = getTempsByHct().get(getHctByHue(complementHue));\n\n    // The complement is", "first_line_groundtruth": "input.getHue(), coldestHue, warmestHue);", "first_line_prediction": "coldestHue, warmestHue);", "match": 0}
{"groundtruth": "coldestHue = getColdest().getHue();", "prediction": " temp = input.getTemp();\n    double  hue = input.getHue();\n    double  chroma = input.getChroma();\n    double  luma = input.getLuma();\n    double  chromaDelta = chroma / 2;\n    double  hueDelta = hue / 2;\n    double  chromaDelta2 = chromaDelta * chromaDelta;\n    double  hueDelta2 = hueDelta * hueDelta;\n    double  chromaDelta3 = chromaDelta2 * chromaDelta;\n    double  hueDelta3 = hueDelta2 * hueDelta;\n    double ", "first_line_groundtruth": "coldestHue = getColdest().getHue();", "first_line_prediction": " temp = input.getTemp();", "match": 0}
{"groundtruth": "round(input.getHue()));", "prediction": "round(startHue));\n    for (int i = 0; i < 100; i++) {\n      double hue = answer.getHue() + directionOfRotation * 60.;\n      if (hue < 0.) {\n        hue += 360.;\n      }\n      if (hue > 360.) {\n        hue -= 360.;\n      }\n      Hct potentialSolution = Hct.from(hue, answer.getChroma(), answer.getTone());\n      double error = potentialSolution.getTemp() - coldestTemp;\n      if (error < smallestError", "first_line_groundtruth": "round(input.getHue()));", "first_line_prediction": "round(startHue));", "match": 0}
{"groundtruth": "color = Hct.from(this.hue, this.chroma, tone).toInt();", "prediction": " color = keyColor.toInt();\n       for (int i = 0; i < tone; i++) {\n         color = Hct.from(hue, chroma, color).toInt();\n       }\n       cache.put(tone, color);\n    }\n    return color;\n  }", "first_line_groundtruth": "color = Hct.from(this.hue, this.chroma, tone).toInt();", "first_line_prediction": " color = keyColor.toInt();", "match": 0}
{"groundtruth": ".getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));", "prediction": ".getChroma(), recastInVc.getLStarInViewingConditions(vc));\n  }\n\n  /**\n    * Set the internal state of this color.\n    *\n    * @param argb ARGB representation of a color.\n    */\n  private void setInternalState(int argb) {\n    this.argb = argb;\n    this.hue = ColorUtils.getHue(argb);\n    this.chroma = ColorUtils.getChroma(argb);\n    this.tone = ColorUtils.getTone(argb);\n  }", "first_line_groundtruth": ".getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));", "first_line_prediction": ".getChroma(), recastInVc.getLStarInViewingConditions(vc));", "match": 0}
{"groundtruth": "hue = MathUtils.sanitizeDegreesInt(startHue + i);", "prediction": "ithHue = (startHue + i) % 360;\n      Hct ithHct = getHctsByHue().get(ithHue);\n      double tempDelta = getRelativeTemperature(ithHct) - lastTemp;\n      absoluteTotalTempDelta += tempDelta;\n      lastTemp = getRelativeTemperature(ithHct);\n      if (absoluteTotalTempDelta >= count) {\n        break;\n      }\n      allColors.add(ithHct);\n    }\n\n    List<Hct> analogousColors = new ArrayList<>();\n    for (int i = 0; i < divisions; i", "first_line_groundtruth": "hue = MathUtils.sanitizeDegreesInt(startHue + i);", "first_line_prediction": "ithHue = (startHue + i) % 360;", "match": 0}
{"groundtruth": "Cam16.fromInt(toInt());", "prediction": " Cam16.fromIntInViewingConditions(argb, vc);\n    // 2. Use XYZ coordinates to find L* in specified VC.\n    double lStar = Xyz.fromCam16(cam16).inViewingConditions(vc).lStar();\n    // 3. Use L* to find HCT in specified VC.\n    Hct hct = Hct.fromLStar(lStar, vc);\n    return hct;\n  }\n\n  private void setInternalState(int argb) {\n    this.argb = argb;\n    this.hue = Color", "first_line_groundtruth": "Cam16.fromInt(toInt());", "first_line_prediction": " Cam16.fromIntInViewingConditions(argb, vc);", "match": 0}
{"groundtruth": "recastInVc.getHue(), recastInVc.getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));", "prediction": " recastInVc.getHue(),\n         recastInVc.getChroma(),\n         ColorUtils.yToLstar(viewedInVc[1]));\n  }\n\n  private void setInternalState(int argb) {\n    this.argb = argb;\n    hue = HctSolver.hueFromInt(argb);\n    chroma = HctSolver.chromaFromInt(argb);\n    tone = HctSolver.toneFromInt(argb);\n  }", "first_line_groundtruth": "recastInVc.getHue(), recastInVc.getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));", "first_line_prediction": " recastInVc.getHue(),", "match": 0}
{"groundtruth": "= MathUtils.sanitizeDegreesDouble(\n          startHue + directionOfRotation * hueAddend);", "prediction": " = startHue + hueAddend;\n      double temp = getTempsByHct().get(getHctsByHue().get((int) Math.round(hue)));\n      double error = Math.abs(temp - complementRelativeTemp);\n      if (error < smallestError) {\n        smallestError = error;\n        answer = getHctsByHue().get((int) Math.round(hue));\n      }\n    }\n\n    precomputedComplement = answer;\n    return answer;\n  }\n\n  /**\n    * A color that is the complement of the input color.\n    *\n    * <p>In art, this", "first_line_groundtruth": "= MathUtils.sanitizeDegreesDouble(", "first_line_prediction": " = startHue + hueAddend;", "match": 0}
{"groundtruth": "fromCam = Cam16.fromInt(from);", "prediction": "icsCam = Cam16.fromInt(to);\n    double hue = MathUtils.lerp(ucsCam.getHue(), icsCam.getHue(), amount);\n    return Cam16.from(hue, ucsCam.getChroma(), ucsCam.getTone()).toInt();\n  }", "first_line_groundtruth": "fromCam = Cam16.fromInt(from);", "first_line_prediction": "icsCam = Cam16.fromInt(to);", "match": 0}
{"groundtruth": "= Cam16.fromInt(ucs);", "prediction": " = Cam16.fromInt(ucs);\n    return ucsCam.toInt();\n  }\n\n  /**\n    * Blends chroma from one color into another. The hue and tone of the original color are\n    * maintained.\n    *\n    * @param from ARGB representation of color\n    * @param to ARGB representation of color\n    * @param amount how much blending to perform; 0.0 >= and <= 1.0\n    * @return from, with a chroma blended towards to. Hue and tone are constant.\n    */\n  public static int hctChroma(int from", "first_line_groundtruth": "= Cam16.fromInt(ucs);", "first_line_prediction": " = Cam16.fromInt(ucs);", "match": 0}
{"groundtruth": ".toRadians(MathUtils.sanitizeDegreesDouble(hue - 50.)));", "prediction": ".toRadians(hue))\n             * Math.cos(Math.toRadians(hue));\n  }\n\n  /**\n    * Returns the temperature of the warmest color in the color wheel.\n    */\n  public Hct getWarmest() {\n    return getHctsByHue().get(0);\n  }\n\n  /**\n    * Returns the temperature of the coldest color in the color wheel.\n    */\n  public Hct getColdest() {\n    return getHctsByHue().get(360);\n  }\n\n  /**\n    * Returns the temperature of the color with the given hue.\n    */\n  public", "first_line_groundtruth": ".toRadians(MathUtils.sanitizeDegreesDouble(hue - 50.)));", "first_line_prediction": ".toRadians(hue))", "match": 0}
{"groundtruth": "tone = ColorUtils.lstarFromArgb(argb);", "prediction": "tone = cam.getTone();\n  }", "first_line_groundtruth": "tone = ColorUtils.lstarFromArgb(argb);", "first_line_prediction": "tone = cam.getTone();", "match": 0}
{"groundtruth": "hue = MathUtils.sanitizeDegreesDouble(Math.toDegrees(Math.atan2(lab[2], lab[1])));", "prediction": " l = lab[0];\n    double a = lab[1];\n    double b = lab[2];\n    double c = Math.sqrt(a * a + b * b);\n    double h = Math.atan2(b, a);\n    double hPrime = h / (2 * Math.PI);\n    double hPrimeSquared = hPrime * hPrime;\n    double hPrimeCubed = hPrimeSquared * hPrime;\n    double hPrimeCubedSquared = hPrimeCubed * hPrimeCubed;\n    double hPrimeCubedSquaredPlusOne = hPrimeCubedSquared + 1;", "first_line_groundtruth": "hue = MathUtils.sanitizeDegreesDouble(Math.toDegrees(Math.atan2(lab[2], lab[1])));", "first_line_prediction": " l = lab[0];", "match": 0}
{"groundtruth": "fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "prediction": "1.0, ucsCam.getTone());\n    return blended.toInt();\n  }\n\n  /**\n    * Blends chroma from one color into another. The hue and tone of the original color are\n    * maintained.\n    *\n    * @param from ARGB representation of color\n    * @param to ARGB representation of color\n    * @param amount how much blending to perform; 0.0 >= and <= 1.0\n    * @return from, with a chroma blended towards to. Hue and tone are constant.\n    */\n  public static int hctChroma(int", "first_line_groundtruth": "fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "first_line_prediction": "1.0, ucsCam.getTone());", "match": 0}
{"groundtruth": "ucsCam.getHue(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "prediction": "ucsCam.getHue(), fromCam.getChroma(), fromCam.getTone());\n    return blended.toInt();\n  }", "first_line_groundtruth": "ucsCam.getHue(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "first_line_prediction": "ucsCam.getHue(), fromCam.getChroma(), fromCam.getTone());", "match": 0}
{"groundtruth": "HctSolver.solveToInt(hue, chroma, tone);", "prediction": "0;\n    if (hue < 0) {\n      hue = 0;\n    } else if (hue > 360) {\n      hue = 360;\n    }\n    if (chroma < 0) {\n      chroma = 0;\n    } else if (chroma > 100) {\n      chroma = 100;\n    }\n    if (tone < 0) {\n      tone = 0;\n    } else if (tone > 100) {\n      tone = 100;\n    }\n    if (hue == 0 &&", "first_line_groundtruth": "HctSolver.solveToInt(hue, chroma, tone);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "toCam.getAstar();", "prediction": "0;\n    double toB = 0;\n    double fromJstar = fromJ * amount + toJ * (1.0 - amount);\n    double fromAstar = fromA * amount + toA * (1.0 - amount);\n    double fromBstar = fromB * amount + toB * (1.0 - amount);\n    double toJstar = toJ * amount + fromJ * (1.0 - amount);\n    double toAstar = toA * amount + fromA * (1.0 - amount);\n    double toBstar = toB * amount + fromB", "first_line_groundtruth": "toCam.getAstar();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "hue = cam.getHue();", "prediction": " hue = cam.getHue();\n     chroma = cam.getChroma();\n     tone = cam.getTone();\n  }", "first_line_groundtruth": "hue = cam.getHue();", "first_line_prediction": " hue = cam.getHue();", "match": 0}
{"groundtruth": "fromCam.getBstar();", "prediction": "0.0;\n    double toJ = toCam.getJstar();\n    double toA = toCam.getAstar();\n    double toB = 0.0;\n    double fromC = fromCam.getCstar();\n    double toC = toCam.getCstar();\n    double fromK = fromCam.getKstar();\n    double toK = toCam.getKstar();\n    double fromL = fromCam.getLstar();\n    double toL = toCam.getLstar();\n    double fromR = fromCam.getRstar();\n    double toR = toCam.getR", "first_line_groundtruth": "fromCam.getBstar();", "first_line_prediction": "0.0;", "match": 0}
{"groundtruth": "return Cam16.fromUcs(jstar, astar, bstar).toInt();", "prediction": " return Cam16.from(jstar, fromCam.getChroma(), fromCam.getTone()).toInt();\n  }", "first_line_groundtruth": "return Cam16.fromUcs(jstar, astar, bstar).toInt();", "first_line_prediction": " return Cam16.from(jstar, fromCam.getChroma(), fromCam.getTone()).toInt();", "match": 0}
{"groundtruth": "double fromJ = fromCam.getJstar();", "prediction": " // Transform ARGB int to XYZ\n    int red = (from & 0x00ff0000) >> 16;\n    int green = (from & 0x0000ff00) >> 8;\n    int blue = (from & 0x000000ff);\n    double redL = ColorUtils.linearized(red);\n    double greenL = ColorUtils.linearized(green);\n    double blueL = ColorUtils.linearized(blue);\n    double x = 0.41233895 * redL", "first_line_groundtruth": "double fromJ = fromCam.getJstar();", "first_line_prediction": " // Transform ARGB int to XYZ", "match": 0}
{"groundtruth": "toB = toCam.getBstar();", "prediction": " toB = toCam.getBstar();\n    double fromJstar = fromJ * (1.0 - amount) + toJ * amount;\n    double fromAstar = fromA * (1.0 - amount) + toA * amount;\n    double fromBstar = fromB * (1.0 - amount) + toB * amount;\n    return Cam16.from(fromJstar, fromAstar, fromBstar).toInt();\n  }", "first_line_groundtruth": "toB = toCam.getBstar();", "first_line_prediction": " toB = toCam.getBstar();", "match": 0}
{"groundtruth": "Hct.fromInt(designColor);", "prediction": " Hct.fromInt(designColor);\n    Hct toHct =  Hct.fromInt(sourceColor);\n    double hue = fromHct.getHue() + toHct.getHue();\n    return Hct.from(hue, fromHct.getChroma(), fromHct.getLuma()).toInt();\n  }\n\n  /**\n    * Blend the design color's HCT hue towards the key color's HCT hue, in a way that leaves the\n    * original color recognizable and recognizably shifted towards the key color.\n    *\n    * @param designColor ARGB representation", "first_line_groundtruth": "Hct.fromInt(designColor);", "first_line_prediction": " Hct.fromInt(designColor);", "match": 0}
{"groundtruth": "differenceDegrees = MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());", "prediction": " fromHue = fromHct.getHue();\n    double  toHue = toHct.getHue();\n    double  deltaHue = toHue - fromHue;\n    double  deltaChroma = toHct.getChroma() - fromHct.getChroma();\n    double  deltaHueChroma = deltaHue * deltaChroma;\n    double  deltaHueChromaSquared = deltaHueChroma * deltaHueChroma;\n    double  deltaHueChromaCubed = deltaHueChromaSquared * deltaHueChroma;\n    double  deltaHueChromaSquaredCubed = deltaHueChrom", "first_line_groundtruth": "differenceDegrees = MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());", "first_line_prediction": " fromHue = fromHct.getHue();", "match": 0}
{"groundtruth": "(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "prediction": "(), fromCam.getChroma(), fromCam.getTone());\n    return blended.toInt();\n  }\n\n  /**\n    * Blends chroma from one color into another. The hue and tone of the original color are\n    * maintained.\n    *\n    * @param from ARGB representation of color\n    * @param to ARGB representation of color\n    * @param amount how much blending to perform; 0.0 >= and <= 1.0\n    * @return from, with a chroma blended towards to. Hue and tone are constant.\n    */\n  public static int hctChrom", "first_line_groundtruth": "(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "first_line_prediction": "(), fromCam.getChroma(), fromCam.getTone());", "match": 0}
{"groundtruth": "* viewingConditions.getNbb();", "prediction": " / (1.0 + u);\n\n    // chroma\n    double c = Math.sqrt(ac * ac + 1.0);\n\n    // lightness\n    double j = 0.5 * (1.0 + ac);\n\n    // brightness\n    double q = 0.5 * (1.0 - ac);\n\n    // colorfulness\n    double m = 0.5 * (1.0 + 0.5 * (ac - 1.0));\n\n    // saturation\n    double s = 0.5 * (1.0 + 0.5 * (ac + 1", "first_line_groundtruth": "* viewingConditions.getNbb();", "first_line_prediction": " / (1.0 + u);", "match": 0}
{"groundtruth": "= MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());", "prediction": " = toHct.getHue() - fromHct.getHue();\n    double differenceDegreesAbs = Math.abs(differenceDegrees);\n    double differenceDegreesSign = Math.signum(differenceDegrees);\n    double differenceDegreesClamped = MathUtils.clamp(differenceDegreesAbs, -180., 180.);\n    double differenceDegreesClampedSign = MathUtils.clamp(differenceDegreesSign, -1., 1.);\n    double differenceDegreesClampedAbs = Math.abs(differenceDegreesClamped);\n    double differenceDegreesClampedSignSign = differenceDegreesClampedSign * differenceDegreesClamped", "first_line_groundtruth": "= MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());", "first_line_prediction": " = toHct.getHue() - fromHct.getHue();", "match": 0}
{"groundtruth": "fromHct.getHue()\n                + rotationDegrees * MathUtils.rotationDirection(fromHct.getHue(), toHct.getHue()));", "prediction": "180.0 + fromHct.getHue() + rotationDegrees, 360.0);\n    return fromHct.withHue(outputHue).toInt();\n  }\n\n  /**\n    * Blend the design color's HCT hue towards the key color's HCT hue, in a way that leaves the\n    * original color recognizable and recognizably shifted towards the key color.\n    *\n    * @param designColor ARGB representation of an arbitrary color.\n    * @param sourceColor ARGB representation of the main theme color.\n    * @return The design color with a hue shifted towards the system", "first_line_groundtruth": "fromHct.getHue()", "first_line_prediction": "180.0 + fromHct.getHue() + rotationDegrees, 360.0);", "match": 0}
{"groundtruth": "viewingConditions.getAw() + 4.0)\n            * viewingConditions.getFlRoot();", "prediction": "1.0 + viewingConditions.getAw() / viewingConditions.getC());\n\n    // CAM16 chroma\n    double m =\n        viewingConditions.getC()\n             * viewingConditions.getZ()\n             * Math.pow(\n                viewingConditions.getAw() / viewingConditions.getC(),\n                viewingConditions.getC() * viewingConditions.getZ());\n    double s =\n        viewingConditions.getC()\n             * viewingConditions.getZ()\n             * Math.pow(\n                viewingConditions.getAw() / viewingConditions.getC(),\n                viewingConditions.getC() * viewingConditions.getZ());\n\n    // CAM16 J coordinate\n    double", "first_line_groundtruth": "viewingConditions.getAw() + 4.0)", "first_line_prediction": "1.0 + viewingConditions.getAw() / viewingConditions.getC());", "match": 0}
{"groundtruth": "ColorUtils.argbFromXyz(xyz[0], xyz[1], xyz[2]);", "prediction": "0xff000000 | (int) (255.999 * xyz[0]) << 16 | (int) (255.999 * xyz[1]) << 8 | (int) (255.999 * xyz[2]);\n  }\n\n  /**\n    * @return ARGB representation of the color, in defined viewing conditions.\n    * @param viewingConditions Information about the environment where the color will be viewed.\n    * @param out Array to write the color to.\n    */\n  double[] xyzInViewingConditions(Viewing", "first_line_groundtruth": "ColorUtils.argbFromXyz(xyz[0], xyz[1], xyz[2]);", "first_line_prediction": "0xff000000 | (int) (255.999 * xyz[0]) << 16 | (int) (255.999 * xyz[1]) << 8 | (int) (255.999 * xyz[2]);", "match": 0}
{"groundtruth": "viewingConditions.getC() * viewingConditions.getZ());", "prediction": "1.0 / viewingConditions.getA());\n    double q =\n        viewingConditions.getAw() * viewingConditions.getAw() * viewingConditions.getAw() * j;\n\n    // CAM16 chroma\n    double m =\n        viewingConditions.getAw() * viewingConditions.getAw() * viewingConditions.getAw() * j;\n    double s =\n        viewingConditions.getAw() * viewingConditions.getAw() * viewingConditions.getAw() * j;\n\n    // CAM16 J, a, and b\n    double jstar =\n        viewingConditions.getAw() * viewingConditions.", "first_line_groundtruth": "viewingConditions.getC() * viewingConditions.getZ());", "first_line_prediction": "1.0 / viewingConditions.getA());", "match": 0}
{"groundtruth": "outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();", "prediction": "outputHue, fromHct.getChroma(), fromHct.getLuma()).toInt();\n  }\n\n  /**\n    * Blend the design color's HCT hue towards the key color's HCT hue, in a way that leaves the\n    * original color recognizable and recognizably shifted towards the key color.\n    *\n    * @param designColor ARGB representation of an arbitrary color.\n    * @param sourceColor ARGB representation of the main theme color.\n    * @return The design color with a hue shifted towards the system's color, a slightly\n    *     warmer/cooler variant of the design", "first_line_groundtruth": "outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();", "first_line_prediction": "outputHue, fromHct.getChroma(), fromHct.getLuma()).toInt();", "match": 0}
{"groundtruth": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();", "prediction": "fromHueAndChroma(outputHue, fromHct.getChroma()).toInt();\n  }\n\n  /**\n    * Blend the design color's HCT hue towards the key color's HCT hue, in a way that leaves the\n    * original color recognizable and recognizably shifted towards the key color.\n    *\n    * @param designColor ARGB representation of an arbitrary color.\n    * @param sourceColor ARGB representation of the main theme color.\n    * @return The design color with a hue shifted towards the system's color, a slightly\n    *     warmer/cooler variant of the design color's", "first_line_groundtruth": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();", "first_line_prediction": "fromHueAndChroma(outputHue, fromHct.getChroma()).toInt();", "match": 0}
{"groundtruth": "viewingConditions.getRgbD()[0] * rT;", "prediction": "0.950456 * rT + 1.000000 * gT + 1.088835 * bT;\n    double gD = 0.105731 * rT + 0.105731 * gT + 0.894269 * bT;\n    double bD = 0.100417 * rT + 0.089933 * gT + 0.108737 * bT;\n\n    //", "first_line_groundtruth": "viewingConditions.getRgbD()[0] * rT;", "first_line_prediction": "0.950456 * rT + 1.000000 * gT + 1.088835 * bT;", "match": 0}
{"groundtruth": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);", "prediction": "1.0 - rAF - gAF;\n\n    // Convert to CAM16\n    double[] xyz = new double[] {rAF, gAF, bAF};\n    double[] cam16 = XYZ_TO_CAM16.apply(xyz);\n\n    // Convert to CAM16-UCS\n    double[] cam16Ucs = CAM16_TO_CAM16UCS.apply(cam16);\n\n    // Convert to CAM16-UCS\n    double[] cam16Ucs2 = CAM16_TO_CAM16UCS.apply(cam1", "first_line_groundtruth": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);", "first_line_prediction": "1.0 - rAF - gAF;", "match": 0}
{"groundtruth": "* viewingConditions.getZ());", "prediction": " // 1.0 / 2.2\n            );\n    double q =\n        viewingConditions.getAw() * viewingConditions.getAw() * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewing", "first_line_groundtruth": "* viewingConditions.getZ());", "first_line_prediction": " // 1.0 / 2.2", "match": 0}
{"groundtruth": "double blueL = ColorUtils.linearized(blue);", "prediction": " double blueL = ColorUtils.linearized(blue);\n    double[] xyz = CAM16RGB_TO_XYZ[0][0] * redL + CAM16RGB_TO_XYZ[0][1] * greenL + CAM16RGB_TO_XYZ[0][2] * blueL;\n    double[] xyz2 = CAM16RGB_TO_XYZ[1][0] * redL + CAM16RGB_TO_XYZ[1][1] * greenL + CAM16RGB_TO_XYZ[1][2] * blueL;\n    double[]", "first_line_groundtruth": "double blueL = ColorUtils.linearized(blue);", "first_line_prediction": " double blueL = ColorUtils.linearized(blue);", "match": 0}
{"groundtruth": "eHue * viewingConditions.getNc() * viewingConditions.getNcb();", "prediction": "1.0 / viewingConditions.getC() * Math.pow(eHue, 0.25);\n    double m = 1.0 + 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "first_line_groundtruth": "eHue * viewingConditions.getNc() * viewingConditions.getNcb();", "first_line_prediction": "1.0 / viewingConditions.getC() * Math.pow(eHue, 0.25);", "match": 0}
{"groundtruth": "* viewingConditions.getFlRoot();", "prediction": " * viewingConditions.getZ();\n\n    // CAM16 colorfulness\n    double m =\n        viewingConditions.getC()\n             * viewingConditions.getZ()\n             * Math.pow(\n                 viewingConditions.getAw() / viewingConditions.getAw0(),\n                 viewingConditions.getC() * viewingConditions.getZ());\n    double s =\n        viewingConditions.getC()\n             * viewingConditions.getZ()\n             * Math.pow(\n                 viewingConditions.getAw() / viewingConditions.getAw0(),\n                 viewingConditions.getC() * viewingConditions.getZ());\n\n    // CAM16 J, a, and b\n    double j", "first_line_groundtruth": "* viewingConditions.getFlRoot();", "first_line_prediction": " * viewingConditions.getZ();", "match": 0}
{"groundtruth": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42);", "prediction": "rix = rD * viewingConditions.getRgbX()[0] + gD * viewingConditions.getRgbX()[1] + bD * viewingConditions.getRgbX()[2];\n    double gix = rD * viewingConditions.getRgbX()[3] + gD * viewingConditions.getRgbX()[4] + bD * viewingConditions.getRgbX()[5];\n    double bix = rD * viewingConditions.getRgbX()[6] + gD * viewingConditions.getRgbX()[7] + bD * viewingConditions.getRgbX()[8];\n\n    //", "first_line_groundtruth": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42);", "first_line_prediction": "rix = rD * viewingConditions.getRgbX()[0] + gD * viewingConditions.getRgbX()[1] + bD * viewingConditions.getRgbX()[2];", "match": 0}
{"groundtruth": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));", "prediction": " // 50% saturation\n            * Math.pow(\n                viewingConditions.getAw() / viewingConditions.getAwMax(),\n                viewingConditions.getC() * viewingConditions.getZ());\n\n    // CAM16 color\n    double r = (rA + 100.0 * q) / 100.0;\n    double g = (gA + 100.0 * q) / 100.0;\n    double b = (bA + 100.0 * q) / 100.0;\n\n    // CAM16 color\n   ", "first_line_groundtruth": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));", "first_line_prediction": " // 50% saturation", "match": 0}
{"groundtruth": "double redL = ColorUtils.linearized(red);", "prediction": " // Convert to XYZ\n    double[] xyz = new double[3];\n    xyz[0] = (red * 0.4124564 + green * 0.3575761 + blue * 0.1804375) / 0.95047;\n    xyz[1] = (red * 0.2126729 + green * 0.7151522 + blue * 0.0721750) / 1.00000;\n   ", "first_line_groundtruth": "double redL = ColorUtils.linearized(red);", "first_line_prediction": " // Convert to XYZ", "match": 0}
{"groundtruth": "m = c * viewingConditions.getFlRoot();", "prediction": "ql = 1.0 - q;\n    double qb = 1.0 - q;\n    double qc = 1.0 - q;\n    double qd = 1.0 - q;\n    double qe = 1.0 - q;\n    double qf = 1.0 - q;\n    double qg = 1.0 - q;\n    double qh = 1.0 - q;\n    double qi = 1.0 - q;\n    double qj = 1.0 - q;\n    double qk = 1.0 - q", "first_line_groundtruth": "m = c * viewingConditions.getFlRoot();", "first_line_prediction": "ql = 1.0 - q;", "match": 0}
{"groundtruth": "viewingConditions.getAw(),\n                viewingConditions.getC() * viewingConditions.getZ());", "prediction": "100.0,\n                viewingConditions.getJab()\n                    ? viewingConditions.getJabPower()\n                    : viewingConditions.getJabPower() + 1.0)\n            / viewingConditions.getJabPower();\n    double q =\n        viewingConditions.getJab()\n            ? viewingConditions.getJabPower() * viewingConditions.getJabPower()\n            : viewingConditions.getJabPower() + 1.0;\n\n    // CAM16 chroma\n    double m =\n        viewingConditions.getJab()\n            ? viewingConditions.getJabPower() * viewing", "first_line_groundtruth": "viewingConditions.getAw(),", "first_line_prediction": "100.0,", "match": 0}
{"groundtruth": "pow(0.29, viewingConditions.getN()), 0.73) * Math.pow(t, 0.9);", "prediction": "pow(t, 0.25), 0.42)\n            * viewingConditions.getFl()\n            * viewingConditions.getFl()\n            * viewingConditions.getFl();\n    double jstar = 100.0 * Math.pow(alpha / viewingConditions.getAw(), 0.42);\n    double astar = 100.0 * Math.pow(alpha / viewingConditions.getAw(), 0.42);\n    double bstar = 100.0 * Math.pow(alpha / viewingConditions.getAw(), 0.4", "first_line_groundtruth": "pow(0.29, viewingConditions.getN()), 0.73) * Math.pow(t, 0.9);", "first_line_prediction": "pow(t, 0.25), 0.42)", "match": 0}
{"groundtruth": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));", "prediction": "1.0 - Math.pow(m, 2.0)) / (1.0 + Math.pow(m, 2.0))) * viewingConditions.getFlRoot();\n\n    // CAM16 color\n    double r = (rA + rAF) / 2.0;\n    double g = (gA + gAF) / 2.0;\n    double b = (bA + bAF) / 2.0;\n\n    // CAM16 color\n    double[] rgb = {r, g, b};\n\n    // CAM16 color\n    return new Cam16(", "first_line_groundtruth": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));", "first_line_prediction": "1.0 - Math.pow(m, 2.0)) / (1.0 + Math.pow(m, 2.0))) * viewingConditions.getFlRoot();", "match": 0}
{"groundtruth": "viewingConditions.getFlRoot();", "prediction": "0.0228;\n    double m = c * 0.0228;\n    double s =\n        50.0 * Math.sqrt((c * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));\n    double jstar = (1.0 + 100.0 * 0.007) * j / (1.0 + 0.007 * j);\n    double astar = m * Math.cos(Math.toRadians(h));\n    double bstar = m * Math.sin(Math", "first_line_groundtruth": "viewingConditions.getFlRoot();", "first_line_prediction": "0.0228;", "match": 0}
{"groundtruth": "Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());", "prediction": "0.007\n             * Math.pow(t, 0.9)\n             * Math.pow(1.0 + 0.007 * getJ(), 0.9);\n    double a = ac * Math.cos(eHue);\n    double b = ac * Math.sin(eHue);\n\n    double[] xyz =\n        ColorUtils.xyzFromLch(\n            getJ(), getChroma(), getHue(), viewingConditions, returnArray);\n    xyz[0] = xyz[0] * a + xyz[1] * b + xyz[2];\n    return xyz;", "first_line_groundtruth": "Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());", "first_line_prediction": "0.007", "match": 0}
{"groundtruth": ") / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());", "prediction": "viewingConditions) / 100.0, viewingConditions.getN())\n             * Math.pow(t, 0.9);\n    double a = ac * Math.cos(eHue);\n    double b = ac * Math.sin(eHue);\n\n    double[] xyz =\n        ColorUtils.xyzFromLch(\n            getJ(viewingConditions), getChroma(), getHue(), viewingConditions, returnArray);\n    xyz[0] = xyz[0] * a + xyz[1] * b + xyz[2];\n    return xyz;\n  }\n\n  /**\n    * @return AR", "first_line_groundtruth": ") / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());", "first_line_prediction": "viewingConditions) / 100.0, viewingConditions.getN())", "match": 0}
{"groundtruth": "(100.0 / viewingConditions.getFl()) * Math.pow(gCBase, 1.0 / 0.42);", "prediction": "100.0 * Math.pow(gCBase, 1.0 / 0.42);\n    double bCBase = max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    double bC =\n        Math.signum(bA) * 100.0 * Math.pow(bCBase, 1.0 / 0.42);\n\n    double r = rC * rA;\n    double g = gC * gA;\n    double b", "first_line_groundtruth": "(100.0 / viewingConditions.getFl()) * Math.pow(gCBase, 1.0 / 0.42);", "first_line_prediction": "100.0 * Math.pow(gCBase, 1.0 / 0.42);", "match": 0}
{"groundtruth": "double c = m2 / viewingConditions.getFlRoot();", "prediction": " // CAM16-UCS components\n    double j = (1.0 + 100.0 * 0.007) * jstar / (1.0 + 0.007 * jstar);\n    double q =\n        4.0\n             / viewingConditions.getC()\n             * Math.sqrt(j / 100.0)\n             * (viewingConditions.getAw() + 4.0)\n             * viewingConditions.getFlRoot();\n    double c = m2 * viewingConditions.getFlRoot();\n    double s =\n        50", "first_line_groundtruth": "double c = m2 / viewingConditions.getFlRoot();", "first_line_prediction": " // CAM16-UCS components", "match": 0}
{"groundtruth": "ac / viewingConditions.getNbb());", "prediction": "1.0 - eHue) * (50000.0 / 13.0) * viewingConditions.getNc() * viewingConditions.getNcb();\n    double p3 =\n        viewingConditions.getAw()\n            * Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());\n    double p4 =\n        viewingConditions.getAw()\n            * Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());\n   ", "first_line_groundtruth": "ac / viewingConditions.getNbb());", "first_line_prediction": "1.0 - eHue) * (50000.0 / 13.0) * viewingConditions.getNc() * viewingConditions.getNcb();", "match": 0}
{"groundtruth": "return QuantizerWsmeans.quantize(pixels, wuClusters, maxColors);", "prediction": " // TODO: implement the Wsmeans algorithm\n    QuantizerWsmeans wsmeans = new QuantizerWsmeans();\n    QuantizerResult wsmeansResult = wsmeans.quantize(pixels, maxColors, wuClusters);\n\n    return wsmeansResult.colorToCount;\n  }", "first_line_groundtruth": "return QuantizerWsmeans.quantize(pixels, wuClusters, maxColors);", "first_line_prediction": " // TODO: implement the Wsmeans algorithm", "match": 0}
{"groundtruth": "/ viewingConditions.getRgbD()[0];", "prediction": " * (1.0 + 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "first_line_groundtruth": "/ viewingConditions.getRgbD()[0];", "first_line_prediction": " * (1.0 + 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "match": 0}
{"groundtruth": "- Math.pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 0.9);", "prediction": " - Math.pow(0.29, viewingConditions.getN()), 0.73), 0.9)\n            * Math.pow(getJ() / 100.0, 0.9);\n    double u = 1.0 + 0.305 * t;\n    double a = getAstar() * u;\n    double b = getBstar() * u;\n    double x = a * viewingConditions.getC() / (u + 0.305);\n    double y = b * viewingConditions.getC() / (u + 0.", "first_line_groundtruth": "- Math.pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 0.9);", "first_line_prediction": " - Math.pow(0.29, viewingConditions.getN()), 0.73), 0.9)", "match": 0}
{"groundtruth": "lab = ColorUtils.labFromArgb(argb);", "prediction": "ary = new double[3];\n    ary[0] = ColorUtils.getLuminance(argb);\n    ary[1] = ColorUtils.getA(argb);\n    ary[2] = ColorUtils.getB(argb);\n    return ary;\n  }\n\n  /**\n    * Convert a 3-element array of L*a*b* coordinates to a color represented in ARGB.\n    */\n  @Override\n  public int toInt(double[] ary) {\n    return ColorUtils.argb(ary[0], ary[1], ary[2]);", "first_line_groundtruth": "lab = ColorUtils.labFromArgb(argb);", "first_line_prediction": "ary = new double[3];", "match": 0}
{"groundtruth": "errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);", "prediction": "errorPalette = TonalPalette.fromHueAndChroma(sourceColorHct.getHue(), 0.0);\n  }\n\n  public static DynamicScheme from(\n      int sourceColorArgb,\n      Variant variant,\n      boolean isDark,\n      double contrastLevel,\n      TonalPalette primaryPalette,\n      TonalPalette secondaryPalette,\n      TonalPalette tertiaryPalette,\n      TonalPalette neutralPalette,\n      TonalPalette neutralVariantPalette) {\n    return new DynamicScheme(\n        Hct.from(sourceColorArgb),\n        variant,\n        isDark,\n        contrastLevel,\n        primaryPalette,\n        secondary", "first_line_groundtruth": "errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);", "first_line_prediction": "errorPalette = TonalPalette.fromHueAndChroma(sourceColorHct.getHue(), 0.0);", "match": 0}
{"groundtruth": "ColorUtils.whitePointD65(),\n        (200.0 / Math.PI * ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);", "prediction": "1.0, 11.72, lstar, 2.0, false);\n  }\n\n  /**\n    * Create sRGB-like viewing conditions with a custom background lstar.\n    *\n    * <p>Default viewing conditions have a lstar of 50, midgray.\n    */\n  public static ViewingConditions defaultWithBackgroundLstar() {\n    return ViewingConditions.defaultWithBackgroundLstar(50.0);\n  }\n\n  /**\n    * Create sRGB-like viewing conditions with a custom background lstar.\n    *\n    * <p>Default viewing conditions have a l", "first_line_groundtruth": "ColorUtils.whitePointD65(),", "first_line_prediction": "1.0, 11.72, lstar, 2.0, false);", "match": 0}
{"groundtruth": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);", "prediction": "0;\n    }\n    int index = 0;\n    for (int i = 0; i < hues.length; i++) {\n      if (hues[i] == sourceHue) {\n        index = i;\n        break;\n      }\n    }\n    double rotatedHue = hues[index];\n    for (int i = 0; i < rotations.length; i++) {\n      rotatedHue = MathUtils.rotateHue(rotatedHue, rotations[i]);\n    }\n    return rotatedHue;\n  }\n\n  /**\n   * Given a set of hues and set of hue rotations", "first_line_groundtruth": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "gC / viewingConditions.getRgbD()[1];", "prediction": "0.0;\n    double bF = 0.0;\n    if (rF > 0.0031308) {\n      rF = 1.055 * Math.pow(rF, 1.0 / 2.4) - 0.055;\n    }\n    if (gF > 0.0031308) {\n      gF = 1.055 * Math.pow(gF, 1.0 / 2.4) - 0.055;\n    }\n    if", "first_line_groundtruth": "gC / viewingConditions.getRgbD()[1];", "first_line_prediction": "0.0;", "match": 0}
{"groundtruth": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);", "prediction": "0xff000000 | ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);\n  }", "first_line_groundtruth": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);", "first_line_prediction": "0xff000000 | ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);", "match": 0}
{"groundtruth": "n = (ColorUtils.yFromLstar(backgroundLstar) / whitePoint[1]);", "prediction": "ql = 1.0 + (0.015 * k4F * k4F * k4F * k4F);\n    double flRoot = Math.sqrt(fl);\n    double n = 1.0 + (0.045 * k4F * k4F * k4F * k4F);\n    double nbb = 1.0 + (0.015 * k4F * k4F * k4F * k4F);\n    double ncb = 1.0 + (0.015 * k4F * k", "first_line_groundtruth": "n = (ColorUtils.yFromLstar(backgroundLstar) / whitePoint[1]);", "first_line_prediction": "ql = 1.0 + (0.015 * k4F * k4F * k4F * k4F);", "match": 0}
{"groundtruth": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42);", "prediction": "rCBase + 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "first_line_groundtruth": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42);", "first_line_prediction": "rCBase + 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "match": 0}
{"groundtruth": "d = MathUtils.clampDouble(0.0, 1.0, d);", "prediction": " // Transform 'cone'/'rgb' responses to 'lab' responses\n    double[] lab = Cam16.CAM16RGB_TO_LAB;\n    double[] rgb = new double[3];\n    rgb[0] = (rW * lab[0]) + (gW * lab[1]) + (bW * lab[2]);\n    rgb[1] = (rW * lab[3]) + (gW * lab[4]) + (bW * lab[5]);\n    rgb[2] = (rW * lab[6]) + (gW * lab[7", "first_line_groundtruth": "d = MathUtils.clampDouble(0.0, 1.0, d);", "first_line_prediction": " // Transform 'cone'/'rgb' responses to 'lab' responses", "match": 0}
{"groundtruth": "sourceColorArgb = sourceColorHct.toInt();", "prediction": "sourceColorHct = sourceColorHct;\n    this.sourceColorArgb = sourceColorHct.toArgb();\n    this.variant = variant;\n    this.isDark = isDark;\n    this.contrastLevel = contrastLevel;\n    this.primaryPalette = primaryPalette;\n    this.secondaryPalette = secondaryPalette;\n    this.tertiaryPalette = tertiaryPalette;\n    this.neutralPalette = neutralPalette;\n    this.neutralVariantPalette = neutralVariantPalette;\n    this.errorPalette =\n        TonalPalette.fromHct(\n            DislikeAnalyzer.fixIfDisliked(", "first_line_groundtruth": "sourceColorArgb = sourceColorHct.toInt();", "first_line_prediction": "sourceColorHct = sourceColorHct;", "match": 0}
{"groundtruth": ": MathUtils.lerp(0.525, 0.59, ((f - 0.8) * 10.0));", "prediction": " : MathUtils.lerp(0.59, 0.31, ((f - 0.9) * 10.0));\n    double n = 1.0 + (c * 0.055);\n    double[] rgbD = new double[3];\n    rgbD[0] = rW * n;\n    rgbD[1] = gW * n;\n    rgbD[2] = bW * n;\n    // Transform 'cone'/'rgb' responses to 'linear'/'xyz' responses\n    double[][] matrixInv = Cam16.CAM1", "first_line_groundtruth": ": MathUtils.lerp(0.525, 0.59, ((f - 0.8) * 10.0));", "first_line_prediction": " : MathUtils.lerp(0.59, 0.31, ((f - 0.9) * 10.0));", "match": 0}
{"groundtruth": "final double sourceHue = sourceColorHct.getHue();", "prediction": " int sourceHue = (int) Math.round(sourceColorHct.getHue());\n     int firstHue = (int) Math.round(hues[0]);\n     int lastHue = (int) Math.round(hues[hues.length - 1]);\n     int rotationIndex = MathUtils.getRotationIndex(sourceHue, firstHue, lastHue);\n     return hues[rotationIndex] + rotations[rotationIndex];\n  }", "first_line_groundtruth": "final double sourceHue = sourceColorHct.getHue();", "first_line_prediction": " int sourceHue = (int) Math.round(sourceColorHct.getHue());", "match": 0}
{"groundtruth": "MathUtils.lerp(this.low, this.normal, (contrastLevel - -1) / 1);", "prediction": "1.0;\n    } else if (contrastLevel < 0.5) {\n      return this.normal;\n    } else if (contrastLevel < 1.0) {\n      return this.medium;\n    } else {\n      return this.high;\n    }\n  }\n\n  /**\n    * Returns the contrast ratio at a given contrast level.\n    *\n    * @param contrastLevel The contrast level. 0.0 is the default (normal); -1.0 is the lowest; 1.0\n    *     is the highest.\n    * @return The contrast ratio, a number between 1.0", "first_line_groundtruth": "MathUtils.lerp(this.low, this.normal, (contrastLevel - -1) / 1);", "first_line_prediction": "1.0;", "match": 0}
{"groundtruth": "(CorePalette.of(argb));", "prediction": "(CorePalette.fromArgb(argb));\n  }\n\n  /** Creates a light theme Scheme from a source color in HCT, i.e. a color in HSL. */\n  public static Scheme light(Hct sourceColorHct) {\n    return lightFromCorePalette(CorePalette.fromHct(sourceColorHct));\n  }\n\n  /** Creates a light theme Scheme from a source color in HCT, i.e. a color in HSL. */\n  public static Scheme light(Hct sourceColorHct, boolean isDark) {\n    return lightFromCorePalette(CorePalette.from", "first_line_groundtruth": "(CorePalette.of(argb));", "first_line_prediction": "(CorePalette.fromArgb(argb));", "match": 0}
{"groundtruth": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);", "prediction": "1.0;\n    } else if (contrastLevel < 1.0) {\n      return MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0.5) / 0.5);\n    } else {\n      return MathUtils.lerp(this.medium, this.high, (contrastLevel - 1.0) / 0.5);\n    }\n  }", "first_line_groundtruth": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);", "first_line_prediction": "1.0;", "match": 0}
{"groundtruth": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);", "prediction": "1.0;\n    } else {\n      return MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);\n    }\n  }", "first_line_groundtruth": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);", "first_line_prediction": "1.0;", "match": 0}
{"groundtruth": "lightFromCorePalette(CorePalette.contentOf(argb));", "prediction": " lightFromCorePalette(CorePalette.ofContent(argb));\n  }", "first_line_groundtruth": "lightFromCorePalette(CorePalette.contentOf(argb));", "first_line_prediction": " lightFromCorePalette(CorePalette.ofContent(argb));", "match": 0}
{"groundtruth": "ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);", "prediction": "100.0),\n        lstar,\n        2.0,\n        false);\n  }\n\n  /**\n    * Create sRGB-like viewing conditions with a custom background lstar.\n    *\n    * <p>Default viewing conditions have a lstar of 50, midgray.\n    */\n  public static ViewingConditions defaultWithBackgroundLstar() {\n    return ViewingConditions.defaultWithBackgroundLstar(50.0);\n  }\n\n  /**\n    * Create sRGB-like viewing conditions with a custom background lstar.\n    *\n    * <p>Default viewing conditions have a lstar of ", "first_line_groundtruth": "ColorUtils.yFromLstar(50.0) / 100.f),", "first_line_prediction": "100.0),", "match": 0}
{"groundtruth": "pointProvider.toInt(clusters[i]);", "prediction": "0;\n      while (argbToPopulation.containsKey(possibleNewCluster)) {\n        possibleNewCluster++;\n      }\n      argbToPopulation.put(possibleNewCluster, count);\n    }\n\n    Map<Integer, Integer> argbToColor = new LinkedHashMap<>();\n    for (int i = 0; i < clusterCount; i++) {\n      int count = pixelCountSums[i];\n      if (count == 0) {\n        continue;\n      }\n\n      int possibleNewCluster = 0;\n      while (argbToColor.containsKey(possibleNewCluster)) {\n        possibleNewCluster++;\n      }", "first_line_groundtruth": "pointProvider.toInt(clusters[i]);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "distance = pointProvider.distance(clusters[i], clusters[j]);", "prediction": "rix = clusters[i][0] - clusters[j][0];\n          double riy = clusters[i][1] - clusters[j][1];\n          double riz = clusters[i][2] - clusters[j][2];\n          double r = rix * rix + riy * riy + riz * riz;\n          double distance = Math.sqrt(r);\n          distanceToIndexMatrix[i][j].index = j;\n          distanceToIndexMatrix[i][j].distance = distance;\n          distanceToIndexMatrix[j][i].index = i;\n          distanceTo", "first_line_groundtruth": "distance = pointProvider.distance(clusters[i], clusters[j]);", "first_line_prediction": "rix = clusters[i][0] - clusters[j][0];", "match": 0}
{"groundtruth": "pointProvider.fromInt(inputPixel);", "prediction": " pointProvider.getPoint(inputPixel);\n        pixels[pointCount] = inputPixel;\n        pixelToCount.put(inputPixel, 1);\n        pointCount++;\n      } else {\n        pixelToCount.put(inputPixel, pixelCount + 1);\n      }\n    }\n\n    // Initialize the clusters.\n    int[] clusters = new int[maxColors];\n    for (int i = 0; i < clusters.length; i++) {\n      clusters[i] = i;\n    }\n\n    // Initialize the distances.\n    Distance[] distances = new Distance[pointCount];\n    for (int i =", "first_line_groundtruth": "pointProvider.fromInt(inputPixel);", "first_line_prediction": " pointProvider.getPoint(inputPixel);", "match": 0}
{"groundtruth": "(Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {", "prediction": " (answer < 50) {\n          answer = 50;\n        } else {\n          answer = 60;\n        }\n      }\n\n      return answer;\n    }\n  }\n\n  /** Returns the contrast curve of the color. */\n  @NonNull\n  public ContrastCurve getContrastCurve() {\n    return contrastCurve;\n  }\n\n  /** Returns the background color of the color. */\n  @Nullable\n  public DynamicColor getBackground() {\n    return background;\n  }\n\n  /** Returns the name of the color. */\n  @NonNull\n  public String getName() {\n    return name;\n  }\n\n  /** Returns the palette of", "first_line_groundtruth": "(Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {", "first_line_prediction": " (answer < 50) {", "match": 0}
{"groundtruth": "if (Contrast.ratioOfTones(upper, answer) >= desiredRatio\n            && Contrast.ratioOfTones(lower, answer) >= desiredRatio) {", "prediction": " // If the background is darker, use the lower tone.\n        if (scheme.isDark) {\n          answer = lower;\n        } else {\n          answer = upper;\n        }\n      }\n\n      return answer;\n    }\n  }\n\n  /** Returns the contrast curve for the given scheme. */\n  public ContrastCurve getContrastCurve(@NonNull DynamicScheme scheme) {\n    return contrastCurve.apply(scheme);\n  }\n\n  /** Returns the contrast curve for the given scheme. */\n  public ContrastCurve getContrastCurve() {\n    return contrastCurve;\n  }\n\n  /** Returns the background color for the given scheme. */\n ", "first_line_groundtruth": "if (Contrast.ratioOfTones(upper, answer) >= desiredRatio", "first_line_prediction": " // If the background is darker, use the lower tone.", "match": 0}
{"groundtruth": "= Contrast.lighter(upper, desiredRatio);", "prediction": " = Contrast.ratioOfTones(upper, desiredRatio);\n        double darkOption = Contrast.ratioOfTones(lower, desiredRatio);\n\n        if (lightOption >= 0 && darkOption >= 0) {\n          answer = MathUtils.clampDouble(0, 100, (lightOption + darkOption) / 2);\n        } else if (lightOption >= 0) {\n          answer = MathUtils.clampDouble(0, 100, lightOption);\n        } else if (darkOption >= 0) {\n          answer = MathUtils.clampDouble(0", "first_line_groundtruth": "= Contrast.lighter(upper, desiredRatio);", "first_line_prediction": " = Contrast.ratioOfTones(upper, desiredRatio);", "match": 0}
{"groundtruth": "().quantize(pixels, colorCount);", "prediction": "().quantize(pixels, colorCount);\n    return new QuantizerResult(mapResult.colorToCount);\n  }\n\n  @Override\n  public QuantizerResult quantize(int[] pixels, int[] startingClusters) {\n    QuantizerResult mapResult = new QuantizerMap().quantize(pixels, startingClusters);\n    return new QuantizerResult(mapResult.colorToCount);\n  }\n\n  @Override\n  public QuantizerResult quantize(int[] pixels, int maxColors) {\n    QuantizerResult mapResult = new QuantizerMap().quantize(pixels, maxColors);\n    return new QuantizerResult", "first_line_groundtruth": "().quantize(pixels, colorCount);", "first_line_prediction": "().quantize(pixels, colorCount);", "match": 1}
{"groundtruth": "pointProvider.distance(point, clusters[j]);", "prediction": "0;\n          for (int k = 0; k < 3; k++) {\n            distance += Math.pow(point[k] - previousCluster[k], 2);\n          }\n          distance = Math.sqrt(distance);\n          if (distance < minimumDistance) {\n            minimumDistance = distance;\n            newClusterIndex = j;\n          }\n        }\n\n        if (newClusterIndex == -1) {\n          continue;\n        }\n\n        int newClusterCount = counts[i];\n        int previousClusterCount = counts[previousClusterIndex];\n        counts[i] = previousClusterCount + newClusterCount;", "first_line_groundtruth": "pointProvider.distance(point, clusters[j]);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "red = ColorUtils.redFromArgb(pixel);", "prediction": " r = ColorUtils.red(pixel);\n      int  g = ColorUtils.green(pixel);\n      int  b = ColorUtils.blue(pixel);\n      int index = getIndex(r, g, b);\n      weights[index] += count;\n      momentsR[index] += count * r;\n      momentsG[index] += count * g;\n      momentsB[index] += count * b;\n      moments[index] += count;\n    }\n  }\n\n  void createMoments() {\n    for (int i = 0; i < TOTAL_SIZE; i++)", "first_line_groundtruth": "red = ColorUtils.redFromArgb(pixel);", "first_line_prediction": " r = ColorUtils.red(pixel);", "match": 0}
{"groundtruth": "previousDistance = pointProvider.distance(point, previousCluster);", "prediction": " previousClusterDistance = pointProvider.distance(point, previousCluster);\n        int newClusterIndex = indexMatrix[previousClusterIndex][previousClusterIndex];\n        double[] newCluster = clusters[newClusterIndex];\n        double newClusterDistance = pointProvider.distance(point, newCluster);\n        if (newClusterDistance < previousClusterDistance) {\n          clusterIndices[i] = newClusterIndex;\n          pointsMoved++;\n        }\n      }\n\n      if (pointsMoved == 0) {\n        break;\n      }\n    }\n\n    int[] colors = new int[clusterCount];\n    for (int i = 0; i", "first_line_groundtruth": "previousDistance = pointProvider.distance(point, previousCluster);", "first_line_prediction": " previousClusterDistance = pointProvider.distance(point, previousCluster);", "match": 0}
{"groundtruth": ") -> palette, (s) -> hct.getTone());", "prediction": ") -> palette, (s) -> hct.chroma());\n  }\n\n  /**\n    * Create a DynamicColor from a hex code.\n    *\n    * <p>Result has no background; thus no support for increasing/decreasing contrast for a11y.\n    *\n    * @param name The name of the dynamic color.\n    * @param argb The source color from which to extract the hue and chroma.\n    * @param isBackground Whether this dynamic color is a background, with some other color as the\n    *     foreground.\n    */\n  @NonNull\n  public static DynamicColor fromArgb(\n     ", "first_line_groundtruth": ") -> palette, (s) -> hct.getTone());", "first_line_prediction": ") -> palette, (s) -> hct.chroma());", "match": 0}
{"groundtruth": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);", "prediction": " WebhookVerifier(WebhookSigner.gitHubSha1(secret), WebhookSigner.Encoder.BASE64);", "first_line_groundtruth": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);", "first_line_prediction": " WebhookVerifier(WebhookSigner.gitHubSha1(secret), WebhookSigner.Encoder.BASE64);", "match": 0}
{"groundtruth": "return MathUtils.signum(component) * 400.0 * af / (af + 27.13);", "prediction": " return (af <= 0.008856) ? (component / 903.3) : (Math.pow(af, 1.0 / 3.0) * 116.0 - 16.0);\n  }\n\n  static double trueLinearized(double component) {\n    double linearized = 0.0;\n    if (component <= 0.04045) {\n      linearized = component / 12.92;\n    } else {\n      linearized = Math.pow((component + 0.055", "first_line_groundtruth": "return MathUtils.signum(component) * 400.0 * af / (af + 27.13);", "first_line_prediction": " return (af <= 0.008856) ? (component / 903.3) : (Math.pow(af, 1.0 / 3.0) * 116.0 - 16.0);", "match": 0}
{"groundtruth": "ResponseUtil.errorNotFound();", "prediction": " ResponseUtil.errorParsingEntity(\"Unauthenticated!! Invalid token\");\n        }\n    }\n\n    @GetMapping(value = \"/{transactionId}\")\n    public ResponseEntity<Map<String,Object>> getTransactionById(@RequestHeader(\"Authorization\") String authHeader,\n                                                                 @PathVariable(\"transactionId\") String transactionId) {\n\n        try {\n            //? Extract the token\n            String token = authHeader.substring(7);\n            //? Verify the JWT\n            FirebaseToken decodedToken = firebaseAuthService.verifyToken(token);\n            //? Get transaction by id\n            Transaction transaction = transactionService.getTransactionById(decodedToken.getUid(),transaction", "first_line_groundtruth": "ResponseUtil.errorNotFound();", "first_line_prediction": " ResponseUtil.errorParsingEntity(\"Unauthenticated!! Invalid token\");", "match": 0}
{"groundtruth": "Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n              ? fInitialTone\n              : DynamicColor.foregroundTone(bgTone, fContrast);", "prediction": " Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n               ? fInitialTone\n               : DynamicColor.foregroundTone(bgTone, fContrast);\n\n      // 2nd round: solve to max, each\n      double nMaxContrast = nearer.contrastCurve.getContrast(scheme.contrastLevel);\n      double fMaxContrast = farther.contrastCurve.getContrast(scheme.contrastLevel);\n      double nMaxTone = nearer.tone.apply(scheme);\n      double fMaxTone = farther.tone.apply(scheme);\n      double nMinContrast = farther.", "first_line_groundtruth": "Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast", "first_line_prediction": " Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast", "match": 0}
{"groundtruth": "Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast\n              ? nInitialTone\n              : DynamicColor.foregroundTone(bgTone, nContrast);", "prediction": "0.5 * (nInitialTone + (nContrast - nInitialTone) * (1 - delta) * expansionDir);\n      // Initial and adjusted tones for `farther`\n      double fInitialTone = farther.tone.apply(scheme);\n      @Var\n      double fTone =\n          0.5 * (fInitialTone + (fContrast - fInitialTone) * (1 + delta) * expansionDir);\n\n      // 2nd round: solve to max, each\n      double nContrast2 = nearer.contrastCurve.getContrast(scheme.contrastLevel);\n      double fContrast2 =", "first_line_groundtruth": "Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast", "first_line_prediction": "0.5 * (nInitialTone + (nContrast - nInitialTone) * (1 - delta) * expansionDir);", "match": 0}
{"groundtruth": "ResponseUtil.handleDashboardInfo(dashboardInfo);", "prediction": " ResponseUtil.successGetOne(dashboardInfo);\n        } catch (FirebaseAuthException | ExecutionException | InterruptedException | ParseException e) {\n            return ResponseUtil.errorNotFound();\n        }\n    }\n\n    @GetMapping(value=\"/range\")\n    public ResponseEntity<?> getDashBoardByRange(@RequestHeader(\"Authorization\") String authHeader,\n                                                  @RequestParam(defaultValue = \"\", required = false) String creationDate,\n                                                  @RequestParam(defaultValue = \"\", required = false) String creationMonth,\n                                                  @RequestParam(defaultValue = \"\", required = false) String creationYear,\n                                                  @RequestParam(defaultValue = \"\", required = false) String startAmount,\n                                                  @", "first_line_groundtruth": "ResponseUtil.handleDashboardInfo(dashboardInfo);", "first_line_prediction": " ResponseUtil.successGetOne(dashboardInfo);", "match": 0}
{"groundtruth": "if(TransactionUtil.isValidYear(creationYear)){", "prediction": " if(TransactionUtil.isValidYear(creationYear)){\n            query = query.whereEqualTo(\"creationYear\",Integer.parseInt(creationYear));\n        }\n        else {\n            throw new NullPointerException(\"A valid date/month/year must be passed\");\n        }\n\n        //? Get the data from the query\n        QuerySnapshot querySnapshot = query.get().get();\n\n        //? Get the data from the query\n        List<Transaction> transactions = querySnapshot.toObjects(Transaction.class);\n\n        //? Get the total amount of the transactions\n        AtomicDouble totalAmount = new AtomicDouble(0.0);\n        transactions.forEach(", "first_line_groundtruth": "if(TransactionUtil.isValidYear(creationYear)){", "first_line_prediction": " if(TransactionUtil.isValidYear(creationYear)){", "match": 0}
{"groundtruth": "ColorUtils.blueFromArgb(pixel);", "prediction": " ColorUtils.blueFromArgb(pixel);\n      int index = getIndex(red, green, blue);\n      weights[index] += count;\n      momentsR[index] += count * red;\n      momentsG[index] += count * green;\n      momentsB[index] += count * blue;\n      moments[index] += count;\n    }\n  }\n\n  void createMoments() {\n    for (int i = 0; i < TOTAL_SIZE; i++) {\n      momentsR[i] /= weights[i];\n      momentsG[i] /= weights[i];", "first_line_groundtruth": "ColorUtils.blueFromArgb(pixel);", "first_line_prediction": " ColorUtils.blueFromArgb(pixel);", "match": 0}
{"groundtruth": "Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {", "prediction": "decreasingContrast) {\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      } else {\n        answer = DynamicColor.backgroundTone(bgTone, desiredRatio);\n      }\n\n      return answer;\n    }\n  }\n\n  /** Returns the contrast curve for the color. */\n  @NonNull\n  public ContrastCurve getContrastCurve() {\n    return contrastCurve;\n  }\n\n  /** Returns the background color. */\n  @Nullable\n  public DynamicColor getBackground() {\n    return background;\n  }\n\n  /** Returns the foreground color. */\n  @Nullable\n  public DynamicColor getForeground() {\n    return foreground;", "first_line_groundtruth": "Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {", "first_line_prediction": "decreasingContrast) {", "match": 0}
{"groundtruth": "= DateUtil.getUnixTimeFromDate(startDate);", "prediction": " = DateUtil.convertDateToUnixTimeStamp(startDate);\n        String endUnixTimeStamp = DateUtil.convertDateToUnixTimeStamp(endDate);\n\n        //? Query By ProfileId\n        Query query = transactionCollectionRef.whereEqualTo(\"profileId\", profileId);\n\n        //? Build time query by range\n        query = TransactionQueryBuilder.buildQueryByTimeRange(query,startDate,endDate,null,null,null);\n\n        //? Query in the db\n        QuerySnapshot querySnapshot = query.get().get();\n        List<QueryDocumentSnapshot> transactionDocuments = querySnapshot.getDocuments();\n\n        //? Handle if empty\n        if", "first_line_groundtruth": "= DateUtil.getUnixTimeFromDate(startDate);", "first_line_prediction": " = DateUtil.convertDateToUnixTimeStamp(startDate);", "match": 0}
{"groundtruth": "MathUtils.matrixMultiply(linrgb, SCALED_DISCOUNT_FROM_LINRGB);", "prediction": " {\n        linrgb[0] / 100.0,\n        linrgb[1] / 100.0,\n        linrgb[2] / 100.0,\n    };\n    double[] discount = new double[3];\n    for (int i = 0; i < 3; i++) {\n      discount[i] = scaledDiscount[i] * 0.950456;\n    }\n    double[] transformed = new double[3];\n    for (int i = 0; i < 3; i++) {\n      transformed[i]", "first_line_groundtruth": "MathUtils.matrixMultiply(linrgb, SCALED_DISCOUNT_FROM_LINRGB);", "first_line_prediction": " {", "match": 0}
{"groundtruth": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "prediction": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {\n            System.out.println(\"Inside start and end date\");\n            query = query.whereGreaterThan(\"creationDate\",startDate).whereLessThan(\"creationDate\",endDate);\n        }\n        //? Check if creationDate is passed and valid\n        else if(DateUtil.isValidDate(creationDate)) {\n            System.out.println(\"Inside creation date\");\n            query = query.whereEqualTo(\"creationDate\",creationDate);\n        }\n        //? Check if creationMonth and creationYear is passed and valid\n        else if(TransactionUtil.isValid", "first_line_groundtruth": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "first_line_prediction": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "match": 1}
{"groundtruth": "alpha = MathUtils.clampInt(0, 255, (int) Math.round(percentage * 255));", "prediction": "ialpha = (int) (255 * percentage);\n    return Color.argb(ialpha, Color.red(argb), Color.green(argb), Color.blue(argb));\n  }\n\n  /**\n    * Returns a HCT object.\n    *\n    * @param scheme Defines the conditions of the user interface, for example, whether or not it is\n    *     dark mode or light mode, and what the desired contrast level is.\n    */\n  @NonNull\n  public Hct getHct(@NonNull DynamicScheme scheme) {\n    TonalPalette palette = this.palette.apply(scheme", "first_line_groundtruth": "alpha = MathUtils.clampInt(0, 255, (int) Math.round(percentage * 255));", "first_line_prediction": "ialpha = (int) (255 * percentage);", "match": 0}
{"groundtruth": "(TransactionUtil.idValidAmount(amount)) {", "prediction": "(TransactionUtil.isValidAmount(amount)) {\n            timeQuery = timeQuery.whereEqualTo(\"amount\",amount);\n        }\n        //? Check if type is passed and valid\n        else if(TransactionUtil.isValidType(type)) {\n            timeQuery = timeQuery.whereEqualTo(\"type\",type);\n        }\n        //? Check if tag is passed and valid\n        else if(TransactionUtil.isValidTag(tag)) {\n            timeQuery = timeQuery.whereEqualTo(\"tag\",tag);\n        }\n        //? Check if remarks is passed and valid\n        else if(TransactionUtil.isValidRemarks(remarks))", "first_line_groundtruth": "(TransactionUtil.idValidAmount(amount)) {", "first_line_prediction": "(TransactionUtil.isValidAmount(amount)) {", "match": 0}
{"groundtruth": "fTone = MathUtils.clampDouble(0, 100, nTone + delta * expansionDir);", "prediction": " // If a color is good enough, it is not adjusted.\n         // Initial and adjusted tones for `farther`\n        double fInitialTone = farther.tone.apply(scheme);\n        @Var\n        double fTone =\n            Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n                 ? fInitialTone\n                 : DynamicColor.foregroundTone(bgTone, fContrast);\n        if ((fTone - nTone) * expansionDir < delta) {\n          // 3rd round: expand farther to match delta.\n          // If a color is good enough, it is not", "first_line_groundtruth": "fTone = MathUtils.clampDouble(0, 100, nTone + delta * expansionDir);", "first_line_prediction": " // If a color is good enough, it is not adjusted.", "match": 0}
{"groundtruth": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "prediction": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)) {\n            System.out.println(\"Inside start and end date\");\n            query = query.whereGreaterThan(\"creationDate\", startDate).whereLessThan(\"creationDate\", endDate);\n        }\n        //? Check if creationDate is passed and valid\n        else if(DateUtil.isValidDate(creationDate)) {\n            System.out.println(\"Inside creation date\");\n            query = query.whereEqualTo(\"creationDate\", creationDate);\n        }\n        //? Check if creationMonth and creationYear is passed and valid\n        else if(TransactionUtil.isValidMonth(", "first_line_groundtruth": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "first_line_prediction": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "match": 1}
{"groundtruth": "MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);", "prediction": " MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);\n        }\n      }\n\n      // If constraint is not satisfied, try another round.\n      if ((fTone - nTone) * expansionDir < delta) {\n        // 4th round: expand farther to match delta.\n        fTone = MathUtils.clampDouble(0, 100, nTone + delta * expansionDir);\n        // If constraint is not satisfied, try another round.\n        if ((fTone - nTone) * expansionDir < delta) {\n          // 5th round: contract", "first_line_groundtruth": "MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);", "first_line_prediction": " MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);", "match": 0}
{"groundtruth": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate)){", "prediction": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate))\n                return ResponseUtil.errorInvalidDate();\n\n            //? Get Dashboard By Date Range for a profile\n            Map<String,Object> dashboardInfo = dashboardService.getDashboardByDateRange(\n                    decodedToken.getUid(),\n                    startDate,\n                    endDate\n            );\n\n            //? Return response\n            return ResponseUtil.handleDashboardInfo(dashboardInfo);\n\n        } catch (FirebaseAuthException | ExecutionException | InterruptedException | ParseException e) {\n            System.out.println(\"Error: \"+e);\n            return new ResponseEntity<>(\"Unauthenticated!! Invalid token", "first_line_groundtruth": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate)){", "first_line_prediction": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate))", "match": 0}
{"groundtruth": "TonalPalette.fromInt(argb);", "prediction": " TonalPalette.fromHct(hct);\n    return new DynamicColor(\n        name,\n        palette,\n        hct.chroma,\n        /* isBackground= */ false,\n        /* background= */ null,\n        /* secondBackground= */ null,\n        /* contrastCurve= */ null,\n        /* toneDeltaPair= */ null);\n  }\n\n  /**\n    * Create a DynamicColor from a hex code.\n    *\n    * <p>Result has no background; thus no support for increasing/decreasing contrast for a11y.\n    *\n    * @param name The name of the dynamic color.\n    *", "first_line_groundtruth": "TonalPalette.fromInt(argb);", "first_line_prediction": " TonalPalette.fromHct(hct);", "match": 0}
{"groundtruth": "whereGreaterThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(startDate))\n                    .whereLessThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(endDate));", "prediction": "whereGreaterThan(\"creationDate\", startDate).whereLessThan(\"creationDate\", endDate);\n        }\n        //? Check if creationDate is passed and valid\n        else if(DateUtil.isValidDate(creationDate)) {\n            query = query.whereEqualTo(\"creationDate\", creationDate);\n        }\n        //? Check if creationMonth and creationYear is passed and valid\n        else if(TransactionUtil.isValidMonth(creationMonth) && TransactionUtil.isValidYear(creationYear)) {\n            query = query\n                     .whereEqualTo(\"creationMonth\", creationMonth)\n                     .whereEqualTo(\"creationYear\", Integer.parseInt(creationYear));\n       ", "first_line_groundtruth": "whereGreaterThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(startDate))", "first_line_prediction": "whereGreaterThan(\"creationDate\", startDate).whereLessThan(\"creationDate\", endDate);", "match": 0}
{"groundtruth": "&& TransactionUtil.isValidYear(creationYear)) {", "prediction": " && TransactionUtil.isValidYear(creationYear)) {\n            query = query\n                    .whereEqualTo(\"creationMonth\",creationMonth)\n                    .whereEqualTo(\"creationYear\",Integer.parseInt(creationYear));\n        }\n        //? Check if time range was passed\n        else if(DateUtil.isValidDate(creationDate) && DateUtil.isValidDate(creationDate)){\n            query = query.whereGreaterThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(creationDate))\n                    .whereLessThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(creationDate));\n        }\n        //? Check if time range was", "first_line_groundtruth": "&& TransactionUtil.isValidYear(creationYear)) {", "first_line_prediction": " && TransactionUtil.isValidYear(creationYear)) {", "match": 0}
{"groundtruth": "ResponseUtil.errorLimitExceeded();", "prediction": " ResponseUtil.errorParsingEntity(\"Query limit exceeds the limit\");\n\n        //? Extract the token\n        String token = authHeader.substring(7);\n        //? Verify the JWT\n        FirebaseToken decodedToken = firebaseAuthService.verifyToken(token);\n        //? Get all transactions for a profile\n        List<Transaction> transactions = transactionService.getAllTransactions(decodedToken.getUid(),limit);\n        //? Handle if empty\n        if (transactions.isEmpty()) {\n            return ResponseUtil.errorParsingEntity(\"No transactions found\");\n        }\n        //? Parse documents\n        return ResponseUtil.successParsingEntity(TransactionUtil.parse", "first_line_groundtruth": "ResponseUtil.errorLimitExceeded();", "first_line_prediction": " ResponseUtil.errorParsingEntity(\"Query limit exceeds the limit\");", "match": 0}
{"groundtruth": "(TransactionUtil.idValidAmount(transactionAmount)) {", "prediction": " (TransactionUtil.idValidAmount(transactionAmount)) {\n            query = query.whereEqualTo(\"transactionAmount\", Double.parseDouble(transactionAmount));\n        }\n        else {\n            throw new NullPointerException(\"A valid start/end amount must be passed\");\n        }\n        System.out.println(\"End of build query by amount range\");\n        return query;\n    }", "first_line_groundtruth": "(TransactionUtil.idValidAmount(transactionAmount)) {", "first_line_prediction": " (TransactionUtil.idValidAmount(transactionAmount)) {", "match": 0}
{"groundtruth": "DateUtil.isValidDate(endDate)){", "prediction": "DateUtil.isValidDate(endDate))\n                return ResponseUtil.errorInvalidDate();\n\n            //? Get Dashboard By Date Range for a profile\n            Map<String,Object> dashboardInfo = dashboardService.getDashboardByDateRange(\n                    decodedToken.getUid(),\n                    startDate,\n                    endDate\n            );\n\n            //? Return response\n            return ResponseUtil.handleDashboardInfo(dashboardInfo);\n\n        } catch (FirebaseAuthException | ExecutionException | InterruptedException | ParseException e) {\n            System.out.println(\"Error: \"+e);\n            return new ResponseEntity<>(\"Unauthenticated!! Invalid token\", HttpStatus.UNAUTHORIZED);\n        }\n    }", "first_line_groundtruth": "DateUtil.isValidDate(endDate)){", "first_line_prediction": "DateUtil.isValidDate(endDate))", "match": 0}
{"groundtruth": "ResponseUtil.errorParsingEntity(\"Required Date must be passed in query and should be in dd-MM-yyyy format\");", "prediction": " new ResponseEntity<>(\"Invalid Date!!\", HttpStatus.BAD_REQUEST);\n            }\n\n            //? Get Dashboard By Date Range for a profile\n            Map<String,Object> dashboardInfo = dashboardService.getDashboardByDateRange(\n                    decodedToken.getUid(),\n                    startDate,\n                    endDate\n            );\n\n            //? Return response\n            return ResponseUtil.handleDashboardInfo(dashboardInfo);\n\n        } catch (FirebaseAuthException | ExecutionException | InterruptedException | ParseException e) {\n            System.out.println(\"Error: \"+e);\n            return new ResponseEntity<>(\"Unauthenticated!! Invalid token\", HttpStatus.UNAUTHORIZED);\n        }\n    }", "first_line_groundtruth": "ResponseUtil.errorParsingEntity(\"Required Date must be passed in query and should be in dd-MM-yyyy format\");", "first_line_prediction": " new ResponseEntity<>(\"Invalid Date!!\", HttpStatus.BAD_REQUEST);", "match": 0}
{"groundtruth": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");", "prediction": " return ResponseUtil.errorBadRequest(\"Date must be passed in query and should be in dd-MM-yyyy format\");\n            }\n\n            //? Check if valid amount format\n            if (!TransactionUtil.isValidAmount(transaction.getAmount())) {\n                return ResponseUtil.errorBadRequest(\"Amount must be passed in query and should be in Rs. 0.00 format\");\n            }\n\n            //? Check if valid type format\n            if (!TransactionUtil.isValidType(transaction.getType())) {\n                return ResponseUtil.errorBadRequest(\"Type must be passed in query and should be in INCOME or EXPENSE format\");\n            }", "first_line_groundtruth": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");", "first_line_prediction": " return ResponseUtil.errorBadRequest(\"Date must be passed in query and should be in dd-MM-yyyy format\");", "match": 0}
{"groundtruth": "(this.isNumber() && other.isNumber()) {", "prediction": " (this.equals(other)) {\n            result = Value.TRUE;\n        }\n        return result;\n    }", "first_line_groundtruth": "(this.isNumber() && other.isNumber()) {", "first_line_prediction": " (this.equals(other)) {", "match": 0}
{"groundtruth": "other.assertNumber();", "prediction": " this.assertNumber(other);\n        return Value.of(action.apply(this.asInteger(), other.asInteger()));\n    }", "first_line_groundtruth": "other.assertNumber();", "first_line_prediction": " this.assertNumber(other);", "match": 0}
{"groundtruth": "ResponseUtil.errorUnauthorized();", "prediction": " ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");\n        }\n    }\n\n    @PutMapping(value = \"/update\")\n    public ResponseEntity<Map<String,Object>> updateTransaction(@RequestHeader(\"Authorization\") String authHeader,\n                                                @RequestBody Transaction transaction) {\n        try {\n            //? Extract the token\n            String token = authHeader.substring(7);\n\n            //? Verify the JWT\n            FirebaseToken decodedToken = firebaseAuthService.verifyToken(token);\n\n            //? Check if valid date format\n            if (!DateUtil.isValidDate(transaction.getCreationDate())) {", "first_line_groundtruth": "ResponseUtil.errorUnauthorized();", "first_line_prediction": " ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");", "match": 0}
{"groundtruth": "userDetail.getAuthorities());", "prediction": " userDetail.getAuthorities());\n        return createToken(claims);\n    }\n\n    /**\n     * \u89e3\u6790\u4ee4\u724c\n     *\n     * @param token \u4ee4\u724c\n     * @return \u89e3\u6790\u540e\u7684\u7528\u6237\u4fe1\u606f\n     */\n    public static Claims getClaimsFromToken(String token) {\n        Claims claims = null;\n        try {\n            claims = Jwts.parser()\n                    .setSigningKey(SECRET)\n                    .parseClaimsJws(token.replace(authTokenStart, \"\"))\n                    .getBody();\n        } catch (Exception e) {\n            log.error(\"\u89e3\u6790\u4ee4\u724c\u5931\u8d25\", e);\n        }", "first_line_groundtruth": "userDetail.getAuthorities());", "first_line_prediction": " userDetail.getAuthorities());", "match": 0}
{"groundtruth": "getSourceIndex(), body.getDestinationIndex());", "prediction": "getSourceIndex(), body.getDestinationIndex());", "first_line_groundtruth": "getSourceIndex(), body.getDestinationIndex());", "first_line_prediction": "getSourceIndex(), body.getDestinationIndex());", "match": 1}
{"groundtruth": "return ResponseUtil.successAddOne();", "prediction": " return ResponseUtil.successPostOne(transaction);\n\n        } catch (FirebaseAuthException | ExecutionException | InterruptedException | ParseException e) {\n            return ResponseUtil.errorNotFound();\n        }\n    }", "first_line_groundtruth": "return ResponseUtil.successAddOne();", "first_line_prediction": " return ResponseUtil.successPostOne(transaction);", "match": 0}
{"groundtruth": "body.getSourceIndex(), body.getDestinationIndex());", "prediction": " body.getSourceIndex(), body.getDestinationIndex());", "first_line_groundtruth": "body.getSourceIndex(), body.getDestinationIndex());", "first_line_prediction": " body.getSourceIndex(), body.getDestinationIndex());", "match": 0}
{"groundtruth": "DeluxeMenuCommand> command = parser.parse(commandArgs);", "prediction": "DeluxeMenuCommand> command = parser.parse(commandArgs);\n        if (command.isEmpty()) {\n            logger.warn(\"Could not parse command '\" + input + \"'\");\n            return Optional.empty();\n        }\n\n        if (decorators != null) {\n            var decoratorParser = decoratorParsers.get(commandType);\n            if (decoratorParser == null) {\n                logger.warn(\"No decorator parser registered for type '\" + commandType + \"' in input '\" + input + \"'\");\n                return Optional.empty();\n            }\n\n            var decoratorArgs = decoratorParser.parse(decorators);\n            if (decoratorArgs.isEmpty()) {", "first_line_groundtruth": "DeluxeMenuCommand> command = parser.parse(commandArgs);", "first_line_prediction": "DeluxeMenuCommand> command = parser.parse(commandArgs);", "match": 1}
{"groundtruth": "= helixWrapper.fetchChatters(channelId, accessToken);", "prediction": " = helixWrapper.getVips(channelId, accessToken);\n    Set<Chatter> chatters = helixWrapper.getChatters(channelId, accessToken);\n    return mapToUsers(chatters);\n  }\n\n  public Set<UserDto> getModerators(String channelId, String accessToken) {\n    Set<Moderator> moderators = helixWrapper.getModerators(channelId, accessToken);\n    return mapToUsers(moderators);\n  }\n\n  public Set<UserDto> getVips(String channelId, String accessToken) {\n    Set<ChannelVip> vips = helixWrapper", "first_line_groundtruth": "= helixWrapper.fetchChatters(channelId, accessToken);", "first_line_prediction": " = helixWrapper.getVips(channelId, accessToken);", "match": 0}
{"groundtruth": "channel.isAccessTokenExpired()) {", "prediction": "channel.getAccessToken() != null) {\n      return channel.getAccessToken();\n    }\n\n    String code = channel.getCode();\n    if (code == null) {\n      throw new InvalidCodeException(\"code is not yet registered\");\n    }\n\n    OAuth2Credential credential =\n        new OAuth2Credential(\n            null,\n            code,\n            null,\n            null,\n            null,\n            null,\n            getRequiredScopeNames());\n    String accessToken = identityProvider.getAccessToken(credential);\n    channel.setAccessToken(accessToken);\n    channelRepository.save(channel);\n    return accessToken;\n  }\n\n  public Set<String> getScopes(", "first_line_groundtruth": "channel.isAccessTokenExpired()) {", "first_line_prediction": "channel.getAccessToken() != null) {", "match": 0}
{"groundtruth": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);", "prediction": "Moderator> moderators = helixWrapper.fetchModerators(channelId, accessToken);\n    return mapToUsers(moderators);\n  }\n\n  public Set<UserDto> getVips(String channelId, String accessToken) {\n    Set<ChannelVip> vips = helixWrapper.fetchVips(channelId, accessToken);\n    return mapToUsers(vipsToChatters(vips));\n  }", "first_line_groundtruth": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);", "first_line_prediction": "Moderator> moderators = helixWrapper.fetchModerators(channelId, accessToken);", "match": 0}
{"groundtruth": "channel.getScopeNames());", "prediction": "0);\n    Optional<OAuth2Credential> optionalFullCredential =\n        identityProvider.getAdditionalCredentialInformation(channelCredential);\n    if (optionalFullCredential.isEmpty()) {\n      throw new InvalidTokenRequestException(\"could not request credential details\");\n    }\n\n    OAuth2Credential fullCredential = optionalFullCredential.get();\n    channel.setAccessToken(fullCredential.getToken());\n    channel.setRefreshToken(fullCredential.getRefreshToken());\n    channel.setExpiresAt(fullCredential.getExpiresAt());\n    channelRepository.save(channel);\n  }", "first_line_groundtruth": "channel.getScopeNames());", "first_line_prediction": "0);", "match": 0}
{"groundtruth": "sum += x.getSubTotal();", "prediction": "\tsum += x.getPrice() * x.getQuantity();\n\t\t}\n\t\treturn sum;", "first_line_groundtruth": "sum += x.getSubTotal();", "first_line_prediction": "\tsum += x.getPrice() * x.getQuantity();", "match": 0}
{"groundtruth": "setDescription(game.getDescription());", "prediction": "setName(game.getName());\n                updateToGame.setCost(game.getCost());\n                updateToGame.setDiscount(game.getDiscount());\n                updateToGame.setDiscountAmount(game.getDiscountAmount());\n                updateToGame.setDayTime(game.getDayTime());\n                updateToGame.setGames(game.getGames());\n                updateToGame.setGames(game.getGames());\n                updateToGame.setGames(game.getGames());\n                updateToGame.setGames(game.getGames());\n                updateToGame.setGames(game.getGames());\n               ", "first_line_groundtruth": "setDescription(game.getDescription());", "first_line_prediction": "setName(game.getName());", "match": 0}
{"groundtruth": "setId(game.getId());", "prediction": "setGameName(game.getGameName());\n                updateToGame.setPrice(game.getPrice());\n                updateToGame.setDiscount(game.getDiscount());\n                updateToGame.setDiscountAmount(game.getDiscountAmount());\n                updateToGame.setDayTime(game.getDayTime());\n                updateToGame.setGameType(game.getGameType());\n                updateToGame.setGameImage(game.getGameImage());\n                updateToGame.setGameDescription(game.getGameDescription());\n                updateToGame.setGameGenre(game.getGameGenre());\n                update", "first_line_groundtruth": "setId(game.getId());", "first_line_prediction": "setGameName(game.getGameName());", "match": 0}
{"groundtruth": "(game.getId() == id){", "prediction": "(game.getId()==id){\n                games.remove(game);\n                System.out.println(\"Game deleted\");\n            }\n        }\n    }\n\n    @Override\n    public void updateGame(int id, Game game) {\n        for (Game game1 : games) {\n            if(game1.getId()==id){\n                game1.setName(game.getName());\n                game1.setCost(game.getCost());\n                game1.setCountOwner(game.getCountOwner());\n                System.out.println(\"Game updated\");\n            }\n        }\n    }\n\n    @Override\n    public List<Game> getGames", "first_line_groundtruth": "(game.getId() == id){", "first_line_prediction": "(game.getId()==id){", "match": 0}
{"groundtruth": "game.setCountOwner(game.getCountOwner() + 1);", "prediction": " System.out.println(\"Game \" + game.getName() + \" sold to \" + customer.getName());\n             customer.addGame(game);\n        }\n    }", "first_line_groundtruth": "game.setCountOwner(game.getCountOwner() + 1);", "first_line_prediction": " System.out.println(\"Game \" + game.getName() + \" sold to \" + customer.getName());", "match": 0}
{"groundtruth": "(!(customer.getGames().contains(game))){", "prediction": "(game.getCountOwner()==campaignService.getCampaigns().size()){\n            System.out.println(\"Campaign is sold\");\n            campaignService.getCampaigns().remove(campaignService.getCampaigns().size()-1);\n        }\n    }", "first_line_groundtruth": "(!(customer.getGames().contains(game))){", "first_line_prediction": "(game.getCountOwner()==campaignService.getCampaigns().size()){", "match": 0}
{"groundtruth": ".equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {", "prediction": " == customer.getSurName() &&\n                    customer2.getPhone() == customer.getPhone()) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": ".equals(customer.getSurName()) &&", "first_line_prediction": " == customer.getSurName() &&", "match": 0}
{"groundtruth": "(game1.getId()==id){", "prediction": "(game1.getId()==id){\n                updateToGame = game1;\n                updateToGame.setCost(game.getCost());\n                updateToGame.setName(game.getName());\n                updateToGame.setCountOwner(game.getCountOwner());\n                updateToGame.setCountSold(game.getCountSold());\n                updateToGame.setDiscountAmount(game.getDiscountAmount());\n                updateToGame.setDayTime(game.getDayTime());\n                updateToGame.setGameType(game.getGameType());\n                updateToGame.setPrice(game.getPrice());", "first_line_groundtruth": "(game1.getId()==id){", "first_line_prediction": "(game1.getId()==id){", "match": 1}
{"groundtruth": "customer2.getSurName().equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {", "prediction": " customer2.getSurname().equals(customer.getSurname()) &&\n                     customer2.getPhone().equals(customer.getPhone())) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": "customer2.getSurName().equals(customer.getSurName()) &&", "first_line_prediction": " customer2.getSurname().equals(customer.getSurname()) &&", "match": 0}
{"groundtruth": ") == customer.getBirthYear()) {", "prediction": "customer.getBirthYear())) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": ") == customer.getBirthYear()) {", "first_line_prediction": "customer.getBirthYear())) {", "match": 0}
{"groundtruth": "customer2.getBirthYear() == customer.getBirthYear()) {", "prediction": " customer2.getPhone().equals(customer.getPhone())) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": "customer2.getBirthYear() == customer.getBirthYear()) {", "first_line_prediction": " customer2.getPhone().equals(customer.getPhone())) {", "match": 0}
{"groundtruth": ".getName() + \" sold to \" + customer.getName()+\" cost: \"+game.getCost());", "prediction": ".getName() + \" sold to \" + customer.getName());\n        }\n    }", "first_line_groundtruth": ".getName() + \" sold to \" + customer.getName()+\" cost: \"+game.getCost());", "first_line_prediction": ".getName() + \" sold to \" + customer.getName());", "match": 0}
{"groundtruth": "p1.getCategories().add(cat2);", "prediction": "\n\t\tUser user1 = new User(null, \"admin\", \"admin\", \"<EMAIL>\", \"123456\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"", "first_line_groundtruth": "p1.getCategories().add(cat2);", "first_line_prediction": "", "match": 0}
{"groundtruth": "setDiscountAmount(campaign.getDiscountAmount());", "prediction": "setDiscountAmount(campaign.getDiscountAmount());\n                updateToCampaign.setStartDate(campaign.getStartDate());\n                updateToCampaign.setEndDate(campaign.getEndDate());\n                updateToCampaign.setGames(campaign.getGames());\n                System.out.println(\"Campaign updated\");\n            }\n        }\n    }\n\n    @Override\n    public List<Campaign> getCampaigns() {\n        return campaigns;\n    }", "first_line_groundtruth": "setDiscountAmount(campaign.getDiscountAmount());", "first_line_prediction": "setDiscountAmount(campaign.getDiscountAmount());", "match": 1}
{"groundtruth": "()+\" cost: \"+game.getCost());", "prediction": "());\n        }\n    }", "first_line_groundtruth": "()+\" cost: \"+game.getCost());", "first_line_prediction": "());", "match": 0}
{"groundtruth": "(campaign1.getId()==id){", "prediction": "(campaign1.getId()==id){\n                updateToCampaign = campaign1;\n                updateToCampaign.setId(campaign.getId());\n                updateToCampaign.setDescription(campaign.getDescription());\n                updateToCampaign.setCost(campaign.getCost());\n                updateToCampaign.setName(campaign.getName());\n                updateToCampaign.setStartDate(campaign.getStartDate());\n                updateToCampaign.setEndDate(campaign.getEndDate());\n                updateToCampaign.setCountOwner(campaign.getCountOwner());\n                updateToCampaign.setCountSold(campaign.getCountSold());\n                System.out.println(\"Campaign updated\");", "first_line_groundtruth": "(campaign1.getId()==id){", "first_line_prediction": "(campaign1.getId()==id){", "match": 1}
{"groundtruth": "(campaign.getGames().get(id));", "prediction": "(campaign.getGame());\n                updateToCampaign.setDiscountAmount(campaign.getDiscountAmount());\n                updateToCampaign.setStartDate(campaign.getStartDate());\n                updateToCampaign.setEndDate(campaign.getEndDate());\n                updateToCampaign.setGames(campaign.getGames());\n                System.out.println(\"Campaign updated.\");\n            }\n        }\n        if(updateToCampaign == null){\n            System.out.println(\"Campaign not found.\");\n        }\n    }\n\n    @Override\n    public List<Campaign> getCampaigns() {\n        return campaigns;\n    }", "first_line_groundtruth": "(campaign.getGames().get(id));", "first_line_prediction": "(campaign.getGame());", "match": 0}
{"groundtruth": "p2.getCategories().add(cat3);", "prediction": "", "first_line_groundtruth": "p2.getCategories().add(cat3);", "first_line_prediction": "", "match": 0}
{"groundtruth": "System.out.println(user2.getName() +\" is updated to \" + customer.getName());", "prediction": " userToUpdate = user2;\n                 userToUpdate.setName(customer.getName());\n                 userToUpdate.setEmail(customer.getEmail());\n                 userToUpdate.setPassword(customer.getPassword());\n                 userToUpdate.setPhone(customer.getPhone());\n                 userToUpdate.setAddress(customer.getAddress());\n                 userToUpdate.setBirthDate(customer.getBirthDate());\n                 userToUpdate.setGender(customer.getGender());\n                 userToUpdate.setGames(customer.getGames());\n                 userToUpdate.setCountOwner(customer.getCountOwner());\n                 userToUpdate.setCountSold(customer.getCountSold());\n                ", "first_line_groundtruth": "System.out.println(user2.getName() +\" is updated to \" + customer.getName());", "first_line_prediction": " userToUpdate = user2;", "match": 0}
{"groundtruth": ".out.println(user2.getName() +\" is updated to \" + customer.getName());", "prediction": ".out.println(\"User is found and updated.\");\n                userToUpdate = user2;\n                userToUpdate.setName(customer.getName());\n                userToUpdate.setEmail(customer.getEmail());\n                userToUpdate.setPassword(<PASSWORD>());\n                userToUpdate.setPhone(customer.getPhone());\n                userToUpdate.setAddress(customer.getAddress());\n                userToUpdate.setBirthDate(customer.getBirthDate());\n                userToUpdate.setGender(customer.getGender());\n                userToUpdate.setCountOwner(customer.getCountOwner());\n                userToUpdate.setGames(customer.getGames());\n            }\n        }\n    }", "first_line_groundtruth": ".out.println(user2.getName() +\" is updated to \" + customer.getName());", "first_line_prediction": ".out.println(\"User is found and updated.\");", "match": 0}
{"groundtruth": "p3.getCategories().add(cat3);", "prediction": "", "first_line_groundtruth": "p3.getCategories().add(cat3);", "first_line_prediction": "", "match": 0}
{"groundtruth": "p4.getCategories().add(cat3);", "prediction": "", "first_line_groundtruth": "p4.getCategories().add(cat3);", "first_line_prediction": "", "match": 0}
{"groundtruth": ", p1.getPrice());", "prediction": ");\n\t\tOrderItem oi2 = new OrderItem(o1, p2, 1);\n\t\tOrderItem oi3 = new OrderItem(o1, p3, 1);\n\t\tOrderItem oi4 = new OrderItem(o1, p4, 1);\n\t\tOrderItem oi5 = new OrderItem(o1, p5, 1);", "first_line_groundtruth": ", p1.getPrice());", "first_line_prediction": ");", "match": 0}
{"groundtruth": "setSurName(customer.getSurName());", "prediction": "setBirthYear(customer.getBirthYear());\n                userToUpdate.setGender(customer.getGender());\n                userToUpdate.setAddress(customer.getAddress());\n                userToUpdate.setPhoneNumber(customer.getPhoneNumber());\n                userToUpdate.setCountOwner(customer.getCountOwner());\n                userToUpdate.setGames(customer.getGames());\n                break;\n            }\n        }\n        if (userToUpdate == null) {\n            System.out.println(\"User is not in database.\");\n        }\n    }", "first_line_groundtruth": "setSurName(customer.getSurName());", "first_line_prediction": "setBirthYear(customer.getBirthYear());", "match": 0}
{"groundtruth": "2, p5.getPrice());", "prediction": "1, p5.getPrice());", "first_line_groundtruth": "2, p5.getPrice());", "first_line_prediction": "1, p5.getPrice());", "match": 0}
{"groundtruth": "userToUpdate.setBirthYear(customer.getBirthYear());", "prediction": " userToUpdate.setBirthYear(customer.getBirthYear());\n                break;\n            }\n        }\n        if (userToUpdate == null) {\n            System.out.println(\"User is not in database.\");\n        }\n    }", "first_line_groundtruth": "userToUpdate.setBirthYear(customer.getBirthYear());", "first_line_prediction": " userToUpdate.setBirthYear(customer.getBirthYear());", "match": 0}
{"groundtruth": "setTc(customer.getTc());", "prediction": "setGender(customer.getGender());\n                userToUpdate.setPhone(customer.getPhone());\n                userToUpdate.setAddress(customer.getAddress());\n                userToUpdate.setCountOwner(customer.getCountOwner());\n                userToUpdate.setGames(customer.getGames());\n                break;\n            }\n        }\n        if (userToUpdate == null) {\n            System.out.println(\"User is not in database.\");\n        }\n    }", "first_line_groundtruth": "setTc(customer.getTc());", "first_line_prediction": "setGender(customer.getGender());", "match": 0}
{"groundtruth": ", p3, 2, p3.getPrice());", "prediction": ", p2, 1, p2.getPrice());\n\t\tOrderItem oi4 = new OrderItem(o2, p4, 1, p4.getPrice());\n\t\tOrderItem oi5 = new OrderItem(o3, p5, 1, p5.getPrice());", "first_line_groundtruth": ", p3, 2, p3.getPrice());", "first_line_prediction": ", p2, 1, p2.getPrice());", "match": 0}
{"groundtruth": "p5.getCategories().add(cat2);", "prediction": "", "first_line_groundtruth": "p5.getCategories().add(cat2);", "first_line_prediction": "", "match": 0}
{"groundtruth": "(ClientCommandInternals.executeCommand(command)) {", "prediction": " (ClientCommandInternals.isActiveDispatcher()) {\n            cir.setReturnValue(ClientCommandInternals.getActiveDispatcher().execute(command, this));\n        }\n    }", "first_line_groundtruth": "(ClientCommandInternals.executeCommand(command)) {", "first_line_prediction": " (ClientCommandInternals.isActiveDispatcher()) {", "match": 0}
{"groundtruth": "ClientCommandInternals.finalizeInit();", "prediction": "", "first_line_groundtruth": "ClientCommandInternals.finalizeInit();", "first_line_prediction": "", "match": 0}
{"groundtruth": "ClientCommandInternals.getActiveDispatcher();", "prediction": " ClientCommandInternals.activeDispatcher;\n    }\n\n    /**\n     * Creates a literal command node.\n     *\n     * <p>The literal command node is a command that can be executed by the client.\n     *\n     * <p>The literal command node is a command that can be executed by the client.\n     *\n     * <p>The literal command node is a command that can be executed by the client.\n     *\n     * <p>The literal command node is a command that can be executed by the client.\n     *\n     * <p>The literal command node is a command that can be executed by the client", "first_line_groundtruth": "ClientCommandInternals.getActiveDispatcher();", "first_line_prediction": " ClientCommandInternals.activeDispatcher;", "match": 0}
{"groundtruth": "activeDispatcher.register(ClientCommandManager.literal(API_COMMAND_NAME).then(help));", "prediction": " activeDispatcher.getRoot();\n            mainNode.addChild(help.build());\n\n            activeDispatcher.findAmbiguities(AmbiguityConsumer.ignore());\n        }\n    }\n\n    private static int executeRootHelp(CommandContext<FabricClientCommandSource> context) {\n        List<String> children = Iterables.transform(activeDispatcher.getRoot().getChildren(), CommandNode::getName);\n        context.getSource().sendFeedback(Text.join(children, \"\\n\"), false);\n        return 1;\n    }\n\n    private static int executeArgumentHelp(CommandContext<FabricClientCommandSource> context) {\n        String command = context.", "first_line_groundtruth": "activeDispatcher.register(ClientCommandManager.literal(API_COMMAND_NAME).then(help));", "first_line_prediction": " activeDispatcher.getRoot();", "match": 0}
{"groundtruth": "register(ClientCommandManager.literal(SHORT_API_COMMAND_NAME).redirect(mainNode));", "prediction": "findAmbiguities(mainNode, (AmbiguityConsumer<FabricClientCommandSource>) (context, builder) -> {\n                List<ParsedCommandNode<FabricClientCommandSource>> nodes = builder.build();\n                if (nodes.size() > 1) {\n                    context.getSource().sendError(Text.translatable(\"command.dispatcher.ambiguity\", Iterables.getLast(nodes).getCommand()));\n                }\n            });\n        }\n    }\n\n    private static int executeRootHelp(CommandContext<FabricClientCommandSource> context) {\n        context.getSource().sendFeedback(Text.translatable(\"command.help", "first_line_groundtruth": "register(ClientCommandManager.literal(SHORT_API_COMMAND_NAME).redirect(mainNode));", "first_line_prediction": "findAmbiguities(mainNode, (AmbiguityConsumer<FabricClientCommandSource>) (context, builder) -> {", "match": 0}
{"groundtruth": "LiteralArgumentBuilder<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\");", "prediction": " activeDispatcher.register(API_COMMAND_NAME, ClientCommandManager.getCommandNode());", "first_line_groundtruth": "LiteralArgumentBuilder<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\");", "first_line_prediction": " activeDispatcher.register(API_COMMAND_NAME, ClientCommandManager.getCommandNode());", "match": 0}
{"groundtruth": "HelpCommandAccessor.getFailedException().create();", "prediction": " CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand();\n        }\n\n        ParsedCommandNode<FabricClientCommandSource> node = nodes.get(0);\n        return executeHelp(node, context);\n    }\n\n    private static int executeHelp(CommandNode<FabricClientCommandSource> node, CommandContext<FabricClientCommandSource> context) {\n        HelpCommandAccessor helpAccessor = (HelpCommandAccessor) node;\n        List<Text> text = helpAccessor.getHelpText(context.getSource());\n\n        if (text.isEmpty()) {\n            context.getSource().sendError(Texts.toText(\"", "first_line_groundtruth": "HelpCommandAccessor.getFailedException().create();", "first_line_prediction": " CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand();", "match": 0}
{"groundtruth": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");", "prediction": " + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\"));\n\t\t}\n\t\treturn stats.getModifier(stats.getIntelligence());", "first_line_groundtruth": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");", "first_line_prediction": " + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\"));", "match": 0}
{"groundtruth": "type.getSubRace();", "prediction": " type.getSubRace();", "first_line_groundtruth": "type.getSubRace();", "first_line_prediction": " type.getSubRace();", "match": 0}
{"groundtruth": "type.getSubRace()).containsKey(\"strength\")){", "prediction": "type.getSubRace()).get(\"strength\") != null){\n\t\t\t\t\treturn type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\tcase \"dexterity\":\n\t\t\t\tif (type.getAbilityScoreIncrease(type.getSubRace()).get(\"dexterity\") != null){\n\t\t\t\t\treturn type.getAbilityScoreIncrease(type.getSubRace()).get(\"dexterity\");\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\tcase \"constitution\":\n\t\t\t\tif (type.getAbilityScoreIncrease(type.getSubRace()).get(\"", "first_line_groundtruth": "type.getSubRace()).containsKey(\"strength\")){", "first_line_prediction": "type.getSubRace()).get(\"strength\") != null){", "match": 0}
{"groundtruth": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");", "prediction": "getAbilityScoreIncrease(stats.getStrength(), true);\n\t\t\t\t}\n\t\t\t\treturn stats.getAbilityScoreIncrease(stats.getStrength(), false);\n\t\t\tcase \"dexterity\":\n\t\t\t\tif (type.getAbilityScoreIncrease(type.getSubRace()).containsKey(\"dexterity\")){\n\t\t\t\t\treturn stats.getAbilityScoreIncrease(stats.getDexterity(), true);\n\t\t\t\t}\n\t\t\t\treturn stats.getAbilityScoreIncrease(stats.getDexterity(), false);\n\t\t\tcase \"constitution\":\n\t\t\t\tif (type.getAbilityScoreIncrease(type.getSubRace()).containsKey(\"", "first_line_groundtruth": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");", "first_line_prediction": "getAbilityScoreIncrease(stats.getStrength(), true);", "match": 0}
{"groundtruth": "type.getSpeed();", "prediction": "10 + stats.getModifier(stats.getDexterity());", "first_line_groundtruth": "type.getSpeed();", "first_line_prediction": "10 + stats.getModifier(stats.getDexterity());", "match": 0}
{"groundtruth": "stats.getModifier(stats.getCharisma());", "prediction": "0;\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}", "first_line_groundtruth": "stats.getModifier(stats.getCharisma());", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "stats.getModifier(stats.getStrength());", "prediction": "0;\n\t\t\tcase \"dexterity\":\n\t\t\t\tif (type.getAbilityScoreIncrease(type.getSubRace()).containsKey(\"dexterity\")){\n\t\t\t\t\treturn stats.getModifier(stats.getDexterity()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"dexterity\");\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\tcase \"constitution\":\n\t\t\t\tif (type.getAbilityScoreIncrease(type.getSubRace()).containsKey(\"constitution\")){\n\t\t\t\t\treturn stats.getModifier(stats.getConstitution()) + (int) type.getAbility", "first_line_groundtruth": "stats.getModifier(stats.getStrength());", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "return stats.getSavingThrow(stats.getStrength(), true);", "prediction": "\treturn stats.getModifier(stats.getStrength()) + 10;\n\t\t\tcase \"dexterity\":\n\t\t\t\t\treturn stats.getModifier(stats.getDexterity()) + 10;\n\t\t\tcase \"constitution\":\n\t\t\t\t\treturn stats.getModifier(stats.getConstitution()) + 10;\n\t\t\tcase \"intelligence\":\n\t\t\t\t\treturn stats.getModifier(stats.getIntelligence()) + 10;\n\t\t\tcase \"wisdom\":\n\t\t\t\t\treturn stats.getModifier(stats.getWisdom()) + 10;\n\t\t\tcase \"char", "first_line_groundtruth": "return stats.getSavingThrow(stats.getStrength(), true);", "first_line_prediction": "\treturn stats.getModifier(stats.getStrength()) + 10;", "match": 0}
{"groundtruth": "stats.getCharisma(), false);", "prediction": "stats.getCharisma(), true);\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}", "first_line_groundtruth": "stats.getCharisma(), false);", "first_line_prediction": "stats.getCharisma(), true);", "match": 0}
{"groundtruth": "return stats.getSavingThrow(stats.getDexterity(), false);", "prediction": "\treturn stats.getSavingThrow(stats.getDexterity(), true);\n\t\t\tcase \"constitution\":\n\t\t\t\treturn stats.getSavingThrow(stats.getConstitution(), true);\n\t\t\tcase \"intelligence\":\n\t\t\t\treturn stats.getSavingThrow(stats.getIntelligence(), true);\n\t\t\tcase \"wisdom\":\n\t\t\t\treturn stats.getSavingThrow(stats.getWisdom(), true);\n\t\t\tcase \"charisma\":\n\t\t\t\treturn stats.getSavingThrow(stats.getCharisma(), true);\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}", "first_line_groundtruth": "return stats.getSavingThrow(stats.getDexterity(), false);", "first_line_prediction": "\treturn stats.getSavingThrow(stats.getDexterity(), true);", "match": 0}
{"groundtruth": "(stats.getIntelligence(), true);", "prediction": "(stats.getIntelligence(), false);\n\t\t\tcase \"wisdom\":\n\t\t\t\treturn stats.getSavingThrow(stats.getWisdom(), false);\n\t\t\tcase \"charisma\":\n\t\t\t\treturn stats.getSavingThrow(stats.getCharisma(), false);\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}", "first_line_groundtruth": "(stats.getIntelligence(), true);", "first_line_prediction": "(stats.getIntelligence(), false);", "match": 0}
{"groundtruth": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(command));", "prediction": "readResult, \"Select response: \" + Utils.bytesToHex(responseSelect));\n\n                if (responseSelect[0] == 0x90) {\n                    // now we run the read command\n                    byte[] commandRead = readApdu();\n                    byte[] responseRead = isoDep.transceive(commandRead);\n                    writeToUiAppend(readResult, \"Read response: \" + Utils.bytesToHex(responseRead));\n\n                    if (responseRead[0] == 0x90) {\n                        // now we run the write command\n                        byte[] commandWrite = writeApdu(responseRead);\n                       ", "first_line_groundtruth": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(command));", "first_line_prediction": "readResult, \"Select response: \" + Utils.bytesToHex(responseSelect));", "match": 0}
{"groundtruth": "writeToUiAppend(readResult, \"select CC: \" + Utils.bytesToHex(command));", "prediction": " writeToUiAppend(readResult, \"selectApdu with selectCapabilityContainer: \" + Utils.bytesToHex(command));\n                writeToUiAppend(readResult, \"selectApdu response: \" + Utils.bytesToHex(responseSelectCc));\n\n                if (responseSelectCc == null) {\n                    writeToUiAppend(readResult, \"selectApdu with selectCapabilityContainer fails (null)\");\n                } else {\n                    writeToUiAppend(readResult, \"responseSelectCc length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));\n                    System.out.", "first_line_groundtruth": "writeToUiAppend(readResult, \"select CC: \" + Utils.bytesToHex(command));", "first_line_prediction": " writeToUiAppend(readResult, \"selectApdu with selectCapabilityContainer: \" + Utils.bytesToHex(command));", "match": 0}
{"groundtruth": "readResult, \"selectApdu response: \" + Utils.bytesToHex(responseSelect));", "prediction": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(responseSelect));\n\n                // now we run the read command\n                command = readApdu();\n                responseSelect = isoDep.transceive(command);\n                writeToUiAppend(readResult, \"readApdu: \" + Utils.bytesToHex(command));\n                writeToUiAppend(readResult, \"readApdu: \" + Utils.bytesToHex(responseSelect));\n\n                // now we run the write command\n                command = writeApdu();\n                responseSelect = isoDep.transceive(command);\n                writeToUiAppend(", "first_line_groundtruth": "readResult, \"selectApdu response: \" + Utils.bytesToHex(responseSelect));", "first_line_prediction": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(responseSelect));", "match": 0}
{"groundtruth": "(\"sendBinaryFromCc response: \" + Utils.bytesToHex(responseSendBinaryFromCc));", "prediction": "(\"responseSendBinaryFromCc: \" + Utils.bytesToHex(responseSendBinaryFromCc));\n\n                if (!Utils.isSucceed(responseSendBinaryFromCc)) {\n                    writeToUiAppend(readResult, \"responseSendBinaryFromCc is not 90 00 - aborted\");\n                    System.out.println(\"responseSendBinaryFromCc is not 90 00 - aborted \");\n                    return;\n                }\n\n                // Sending ReadBinary from CC...\n                String sendBinareFromCc2 = \"00b000000f\";\n                command = Utils.hexStringToByteArray(", "first_line_groundtruth": "(\"sendBinaryFromCc response: \" + Utils.bytesToHex(responseSendBinaryFromCc));", "first_line_prediction": "(\"responseSendBinaryFromCc: \" + Utils.bytesToHex(responseSendBinaryFromCc));", "match": 0}
{"groundtruth": "System.out.println(\"capabilityContainerHeader: \" + Utils.bytesToHex(capabilityContainerHeader));", "prediction": " // Capability Container data:\n                byte[] capabilityContainerData = Arrays.copyOfRange(responseSendBinaryFromCc, responseSendBinaryFromCc.length - 2, responseSendBinaryFromCc.length);\n                writeToUiAppend(readResult, \"capabilityContainerData length: \" + capabilityContainerData.length + \" data: \" + Utils.bytesToHex(capabilityContainerData));\n\n                // Capability Container data:\n                byte[] capabilityContainerData2 = Arrays.copyOfRange(responseSendBinaryFromCc, responseSendBinaryFromCc.length - 2, responseSendBinaryFromCc.length);\n                writeToUi", "first_line_groundtruth": "System.out.println(\"capabilityContainerHeader: \" + Utils.bytesToHex(capabilityContainerHeader));", "first_line_prediction": " // Capability Container data:", "match": 0}
{"groundtruth": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));", "prediction": "(\"responseSelect length: \" + responseSelect.length + \" data: \" + Utils.bytesToHex(responseSelect));\n                    if (responseSelect.length == 2 && responseSelect[0] == 0x90 && responseSelect[1] == 0x00) {\n                        // success\n                        // now we run the read command\n                        byte[] commandRead = readApdu();\n                        byte[] responseRead = isoDep.transceive(commandRead);\n                        writeToUiAppend(readResult, \"readApdu: \" + Utils.bytesToHex(commandRead));\n                        writeToUiAppend(read", "first_line_groundtruth": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));", "first_line_prediction": "(\"responseSelect length: \" + responseSelect.length + \" data: \" + Utils.bytesToHex(responseSelect));", "match": 0}
{"groundtruth": ",\"ndefLen: \" + Utils.bytesToHex(ndefLen) + \" len (dec): \" + ndefLenInt);", "prediction": ", \"ndefLen: \" + Utils.bytesToHex(ndefLen));\n                writeToUiAppend(readResult, \"cmdLen: \" + Utils.bytesToHex(cmdLen));\n                writeToUiAppend(readResult, \"ndefLenInt: \" + ndefLenInt);\n                System.out.println(\"ndefLen: \" + Utils.bytesToHex(ndefLen));\n                System.out.println(\"cmdLen: \" + Utils.bytesToHex(cmdLen));\n                System.out.println(\"ndefLenInt: \" + ndefLenInt);\n\n                if (ndefLenInt > 0", "first_line_groundtruth": ",\"ndefLen: \" + Utils.bytesToHex(ndefLen) + \" len (dec): \" + ndefLenInt);", "first_line_prediction": ", \"ndefLen: \" + Utils.bytesToHex(ndefLen));", "match": 0}
{"groundtruth": "writeToUiAppend(readResult, \"responseSelect length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));", "prediction": " if (responseSelectCc == null) {\n                    writeToUiAppend(readResult, \"select CC fails (null)\");\n                } else {\n                    writeToUiAppend(readResult, \"responseSelectCc length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));\n                    System.out.println(\"responseSelectCc: \" + Utils.bytesToHex(responseSelectCc));\n                }\n\n                if (!Utils.isSucceed(responseSelectCc)) {\n                    writeToUiAppend(readResult, \"responseSelectCc is not 90 00 - aborted\");\n                   ", "first_line_groundtruth": "writeToUiAppend(readResult, \"responseSelect length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));", "first_line_prediction": " if (responseSelectCc == null) {", "match": 0}
{"groundtruth": "= \"00b000\" + Utils.bytesToHex(cmdLenNew);", "prediction": " = \"00b00000\" + ndefLenIntRequest;\n                command = Utils.hexStringToByteArray(sendReadBinaryNdefData);\n                byte[] responseSendBinaryNdefData = isoDep.transceive(command);\n                writeToUiAppend(readResult, \"sendBinaryNdefData: \" + Utils.bytesToHex(command));\n                writeToUiAppend(readResult, \"sendBinaryNdefData response: \" + Utils.bytesToHex(responseSendBinaryNdefData));\n                writeToUiAppend(readResult, \"sendBinaryNdefData response length: \" + response", "first_line_groundtruth": "= \"00b000\" + Utils.bytesToHex(cmdLenNew);", "first_line_prediction": " = \"00b00000\" + ndefLenIntRequest;", "match": 0}
{"groundtruth": "] cmdLenNew = Utils.convertIntToByteArray(ndefLenIntRequest, 2);", "prediction": " ] cmdLenNew = Utils.intToByteArray(ndefLenIntRequest);\n                byte[] cmdLenNew2 = Arrays.copyOfRange(cmdLenNew, 0, 2);\n                byte[] cmdLenNew3 = Arrays.copyOfRange(cmdLenNew, 2, cmdLenNew.length);\n                byte[] cmdLenNew4 = Arrays.copyOfRange(cmdLenNew, 4, cmdLenNew.length);\n                byte[] cmdLenNew5 = Arrays.copyOfRange(cmdLenNew, 6, cmdLenNew.length);\n                byte[] cmdLenNew6 = Arrays.copyOf", "first_line_groundtruth": "] cmdLenNew = Utils.convertIntToByteArray(ndefLenIntRequest, 2);", "first_line_prediction": " ] cmdLenNew = Utils.intToByteArray(ndefLenIntRequest);", "match": 0}
{"groundtruth": "writeToUiAppend(readResult,\"ndefLen new (dec): \" + ndefLenIntRequest + \" data: \" + Utils.bytesToHex(cmdLenNew) );", "prediction": " //byte[] cmdLenNew = Utils.hexStringToByteArray(sendReadBinaryNlen);\n                byte[] cmdLenNew = Arrays.copyOfRange(cmdLen, 0, 2);\n                cmdLenNew[0] = cmdLenNew[0] & 0x00;\n                cmdLenNew[1] = cmdLenNew[1] & 0x00;\n                cmdLenNew[1] = cmdLenNew[1] | 0x02;\n                cmdLenNew[0] = cmdLenNew[0] | 0x02;\n                cmdLenNew", "first_line_groundtruth": "writeToUiAppend(readResult,\"ndefLen new (dec): \" + ndefLenIntRequest + \" data: \" + Utils.bytesToHex(cmdLenNew) );", "first_line_prediction": " //byte[] cmdLenNew = Utils.hexStringToByteArray(sendReadBinaryNlen);", "match": 0}
{"groundtruth": "if (!Utils.isSucceed(responseSelect)) {", "prediction": " // now we run the read command\n                byte[] commandRead = readBinaryApdu(0, 10);\n                byte[] responseRead = isoDep.transceive(commandRead);\n                writeToUiAppend(readResult, \"readBinaryApdu: \" + Utils.bytesToHex(commandRead));\n                writeToUiAppend(readResult, \"readBinaryApdu response: \" + Utils.bytesToHex(responseRead));\n\n                if (responseRead == null) {\n                    writeToUiAppend(readResult, \"readBinaryApdu fails (null)\");\n                } else {\n                    writeToUiAppend(readResult,", "first_line_groundtruth": "if (!Utils.isSucceed(responseSelect)) {", "first_line_prediction": " // now we run the read command", "match": 0}
{"groundtruth": "Utils.getTimestamp();", "prediction": " Calendar.getInstance().getTime().toString();\n                    dataToSend.setText(messageWithTimestamp);\n                } else if (rbUrl.isChecked()) {\n                    dataToSend.setText(dataToSendString + \" on \" +\n                             Calendar.getInstance().getTime().toString());\n                } else if (rbTimestamp.isChecked()) {\n                    dataToSend.setText(dataToSendString);\n                }\n            }\n        });\n\n        rbTimestamp.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n                if (isChecked) {\n                    tvTimestamp.setVisibility(View", "first_line_groundtruth": "Utils.getTimestamp();", "first_line_prediction": " Calendar.getInstance().getTime().toString();", "match": 0}
{"groundtruth": "] cmdLen = Utils.hexStringToByteArray(sendReadBinaryNlen);", "prediction": " ] ndefData = Arrays.copyOfRange(responseSendBinaryNlen, 2, responseSendBinaryNlen.length);\n                writeToUiAppend(readResult, \"ndefLen length: \" + ndefLen.length + \" data: \" + Utils.bytesToHex(ndefLen));\n                writeToUiAppend(readResult, \"ndefData length: \" + ndefData.length + \" data: \" + Utils.bytesToHex(ndefData));\n                System.out.println(\"ndefLen: \" + Utils.bytesToHex(ndefLen));\n                System.out.println(\"ndefData:", "first_line_groundtruth": "] cmdLen = Utils.hexStringToByteArray(sendReadBinaryNlen);", "first_line_prediction": " ] ndefData = Arrays.copyOfRange(responseSendBinaryNlen, 2, responseSendBinaryNlen.length);", "match": 0}
{"groundtruth": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getID().toString());", "prediction": "(\"id\", identifierBroadcastMessageEntry.getKey().toString());\n            arrayOfMessagePresets.add(object);\n        }\n        config.add(\"message_presets\", arrayOfMessagePresets);\n\n        try {\n            Files.writeString(getConfigurationFile().toPath(), gson.toJson(config));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void loadConfig() {\n        Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().disableHtmlEscaping().create();\n        try {\n            JsonObject config = gson.fromJson(new FileReader(getConfigurationFile()), JsonObject.class);", "first_line_groundtruth": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getID().toString());", "first_line_prediction": "(\"id\", identifierBroadcastMessageEntry.getKey().toString());", "match": 0}
{"groundtruth": "resource.canBeOpened() ) {", "prediction": " resource.exists() ) {\n            loadProperties( resource );\n        } else if ( !quiet ) {\n            getLog().warn( String.format( \"File '%s' does not exist\", resource.getFilename() ) );\n        }\n    }\n\n    private void loadProperties( Resource resource ) throws MojoExecutionException {\n        try (InputStream is = resource.getInputStream()) {\n            Properties properties = new Properties();\n            properties.load( is );\n            for ( String key : properties.stringPropertyNames() ) {\n                String value = properties.getProperty( key );\n                if ( keyPrefix != null ) {\n                    key = keyPrefix", "first_line_groundtruth": "resource.canBeOpened() ) {", "first_line_prediction": " resource.exists() ) {", "match": 0}
{"groundtruth": "<Path> pathStream = pathParser.streamFilesMatchingAntPath(antPattern)) {", "prediction": "<Path> paths = pathParser.findFilesByPattern(project.getBasedir().toPath(), antPattern)) {\n                paths.forEach(path -> load(new FileResource(path.toFile())));\n            } catch (IOException e) {\n                throw new MojoExecutionException(\"Failed to load properties from files by pattern\", e);\n            }\n        }\n    }\n\n    private void loadUrls() throws MojoExecutionException {\n        for ( String url : urls ) {\n            load( new UrlResource( url ) );\n        }\n    }\n\n    private void load( Resource resource ) throws MojoExecutionException {\n        try (InputStream is =", "first_line_groundtruth": "<Path> pathStream = pathParser.streamFilesMatchingAntPath(antPattern)) {", "first_line_prediction": "<Path> paths = pathParser.findFilesByPattern(project.getBasedir().toPath(), antPattern)) {", "match": 0}
{"groundtruth": "circularDefinitionPreventer.throwCircularDefinitionException();", "prediction": " throw new IllegalArgumentException(\"Circular property definition detected: \" + key);\n        }\n\n        String value = mavenProjectProperties.getProperty(key);\n        if (value == null) {\n            value = environment.getProperty(key);\n        }\n        if (value == null) {\n            return key;\n        }\n\n        if (value.startsWith(\"${\")) {\n            String resolvedValue = getPropertyValue(value.substring(2, value.length() - 1), mavenProjectProperties, environment, circularDefinitionPreventer);\n            return StringUtils.replace(value, \"${\" + key + \"}\", resolvedValue);\n        }\n\n        return value;\n    }", "first_line_groundtruth": "circularDefinitionPreventer.throwCircularDefinitionException();", "first_line_prediction": " throw new IllegalArgumentException(\"Circular property definition detected: \" + key);", "match": 0}
{"groundtruth": "( InputStream stream = resource.getInputStream() ) {", "prediction": " (InputStream is = resource.openStream()) {\n                Properties properties = new Properties();\n                properties.load( is );\n                for ( String key : properties.stringPropertyNames() ) {\n                    String value = properties.getProperty( key );\n                    if ( keyPrefix != null ) {\n                        key = keyPrefix + \".\" + key;\n                    }\n                    resolver.setProperty( key, value );\n                }\n            }\n        } catch ( IOException e ) {\n            missing( resource );\n        }\n    }\n\n    private void missing( Resource resource ) throws MojoExecutionException {\n        if ( quiet ) {\n            getLog().debug( \"Skipping loading properties", "first_line_groundtruth": "( InputStream stream = resource.getInputStream() ) {", "first_line_prediction": " (InputStream is = resource.openStream()) {", "match": 0}
{"groundtruth": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer.cloneWithAdditionalKey(key));", "prediction": " newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer);\n            if (newValue == null) {\n                return null;\n            }\n            buffer.appendResolvedPart(newValue);\n        }\n\n        return buffer.getResolved();\n    }\n\n    private String fromPropertiesThenSystemThenEnvironment(String key, Properties mavenProjectProperties, Properties environment) {\n        String value = mavenProjectProperties.getProperty(key);\n        if (value != null) {\n            return value;\n        }\n        value = System.getProperty(key);\n        if (value != null) {\n            return value;\n        }\n        value = environment", "first_line_groundtruth": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer.cloneWithAdditionalKey(key));", "first_line_prediction": " newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer);", "match": 0}
{"groundtruth": "circularDefinitionPreventer.isPropertyAlreadyVisited(key)) {", "prediction": "StringUtils.isEmpty(key)) {\n            return null;\n        }\n\n        String value = mavenProjectProperties.getProperty(key);\n        if (value != null) {\n            return value;\n        }\n\n        value = environment.getProperty(key);\n        if (value != null) {\n            return value;\n        }\n\n        value = System.getProperty(key);\n        if (value != null) {\n            return value;\n        }\n\n        value = System.getenv(key);\n        if (value != null) {\n            return value;\n        }\n\n        value = mavenProjectProperties.getProperty(key);\n        if (value != null) {\n           ", "first_line_groundtruth": "circularDefinitionPreventer.isPropertyAlreadyVisited(key)) {", "first_line_prediction": "StringUtils.isEmpty(key)) {", "match": 0}
{"groundtruth": "size = queryResult.getValueListSize();", "prediction": " count = 0;\n          while (queryResult.next()) {\n            count++;\n            if (count % batch_size == 0) {\n              Instant statementStartTime = Instant.now();\n              queryResult =\n                  connection.executeQuery(\n                      StringUtils.replaceParameters(statement, values).getStatement());\n              writeStatementEvent(\n                  statementStartTime, statement.getId(), Status.SUCCESS, /* payload= */ null);\n            }\n          }\n        }\n      } catch (Exception e) {\n        LOGGER.error(\"Exception executing file: \" + file.getId());\n        writeFileEvent(fileStartTime, file.getId(), Status.FAILURE", "first_line_groundtruth": "size = queryResult.getValueListSize();", "first_line_prediction": " count = 0;", "match": 0}
{"groundtruth": "(file.getStatements().size() != 1) {", "prediction": " (file.getStatement() instanceof StatementExec) {\n        StatementExec statement = (StatementExec) file.getStatement();\n        Instant statementStartTime = Instant.now();\n        try {\n          queryResult = connection.execute(StringUtils.replaceParameters(statement, values).getStatement());\n        } catch (Exception e) {\n          LOGGER.error(\"Exception executing statement: \" + statement.getId());\n          writeStatementEvent(\n              statementStartTime,\n              statement.getId(),\n              Status.FAILURE,\n              e.getMessage() + \"; \" + e.getStackTrace());\n          throw e;\n        }\n        writeStatementEvent(\n            statementStartTime,", "first_line_groundtruth": "(file.getStatements().size() != 1) {", "first_line_prediction": " (file.getStatement() instanceof StatementExec) {", "match": 0}
{"groundtruth": ".putAll(queryResult.getStringMappings(j, localMax));", "prediction": ".put(\n                statement.getResultSet().getResultSetName(),\n                queryResult.getStringMappings(j, localMax));\n            Instant statementStartTime = Instant.now();\n            connection.executeQuery(\n                StringUtils.replaceParameters(statement, localValues).getStatement());\n            writeStatementEvent(\n                statementStartTime, statement.getId(), Status.SUCCESS, /* payload= */ null);\n          }\n        }\n      } catch (Exception e) {\n        writeStatementEvent(\n            fileStartTime, statement.getId(), Status.FAILURE, e.getMessage());\n        throw new ClientException(e);\n      }\n    }\n  }", "first_line_groundtruth": ".putAll(queryResult.getStringMappings(j, localMax));", "first_line_prediction": ".put(", "match": 0}
{"groundtruth": "statement.getId(),\n                Status.FAILURE,\n                e.getMessage() + \";", "prediction": " statement.getId(),\n                 Status.FAILURE,\n                 /* payload= */ e.getMessage() + \"; \" + e.getStackTrace());\n            throw e;\n          }\n          writeStatementEvent(\n              statementStartTime,\n              statement.getId(),\n              Status.SUCCESS,\n              /* payload= */ null);\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"Cannot read query in file: \" + file, e);\n      }\n      writeFileEvent(fileStartTime, file.getId(), Status.SUCCESS);\n    }\n  }\n\n  private void writeFileEvent(Instant fileStartTime, String fileId, Status status) {\n   ", "first_line_groundtruth": "statement.getId(),", "first_line_prediction": " statement.getId(),", "match": 0}
{"groundtruth": "statement.getId(), StringUtils.format(statement.getStatement(), parameterValues));", "prediction": " statement.getStatement(),\n         statement.getStatementType(),\n         statement.getStatementId(),\n         statement.getStatementStartTime(),\n         statement.getStatementEndTime(),\n         statement.getStatementDuration(),\n         statement.getStatementResult(),\n         statement.getStatementResultMessage(),\n         statement.getStatementResultType(),\n         statement.getStatementResultSize(),\n         statement.getStatementResultRowCount(),\n         statement.getStatementResultColumns(),\n         statement.getStatementResultColumnTypes(),\n         statement.getStatementResultColumnNames(),\n         statement.getStatementResultColumnValues(),\n         statement.getStatementResultColumnValuesTypes(),\n         statement.get", "first_line_groundtruth": "statement.getId(), StringUtils.format(statement.getStatement(), parameterValues));", "first_line_prediction": " statement.getStatement(),", "match": 0}
{"groundtruth": "(prompt.getOption()) {", "prediction": "(prompt.getOption(), prompt.getIndex()) {\n                @Override\n                public String addStatement(String code) {\n                    return prompt.getSnippet().replace(\"{query}\", code);\n                }\n            };\n            actionManager.registerAction(idPrefix + prompt.getIndex(), oldAction);\n            actionGroup.add(oldAction);\n        }\n        popupMenu.add(actionGroup);\n    }\n\n    public void clear(DefaultActionGroup popupMenu, DefaultActionGroup actionGroup) {\n        for (AnAction action : popupMenu.getChildren(null)) {\n            popupMenu.remove(action);\n        }\n        for (AnAction action", "first_line_groundtruth": "(prompt.getOption()) {", "first_line_prediction": "(prompt.getOption(), prompt.getIndex()) {", "match": 0}
{"groundtruth": "if (queryResult == null || queryResult.containsEmptyResultColumnOnly()) {", "prediction": " // Execute second query that uses the iterable input from the first query.\n          Instant statementStartTime2 = Instant.now();\n          for (int i = 0; i < batch_size; i++) {\n            queryResult.next();\n            writeStatementEvent(\n                statementStartTime2, statement.getId(), Status.SUCCESS, /* payload= */ null);\n          }\n        } else {\n          // Execute second query that uses the iterable input from the first query.\n          Instant statementStartTime = Instant.now();\n          for (int i = 0; i < batch_size; i++) {\n            queryResult.next();\n            write", "first_line_groundtruth": "if (queryResult == null || queryResult.containsEmptyResultColumnOnly()) {", "first_line_prediction": " // Execute second query that uses the iterable input from the first query.", "match": 0}
{"groundtruth": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {", "prediction": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),o.getIndex()))) {\n            return false;\n        }\n        return prompts.add(o);\n    }\n\n    public void remove(Prompt o) {\n        prompts.remove(o);\n    }\n\n    public void remove(int index) {\n        prompts.remove(index);\n    }\n\n    public void remove(String option) {\n        prompts.removeIf(prompt -> prompt.getOption().equals(option));\n    }\n\n    public void remove(int[] selectedRows) {\n        Arrays.sort", "first_line_groundtruth": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {", "first_line_prediction": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),o.getIndex()))) {", "match": 0}
{"groundtruth": "+ statement.getId());", "prediction": " + statement.getId());\n            writeStatementEvent(\n                statementStartTime, statement.getId(), Status.FAILURE, e.getMessage() + \"; \" + e.getStackTrace());\n            throw e;\n          }\n          writeStatementEvent(\n              statementStartTime, statement.getId(), Status.SUCCESS, /* payload= */ null);\n        }\n      } catch (Exception e) {\n        LOGGER.error(\"Exception executing file: \" + file.getId());\n        writeFileEvent(fileStartTime, file.getId(), Status.FAILURE, e.getMessage() + \"; \" + e.getStackTrace());\n        throw e;\n      }\n      writeFileEvent", "first_line_groundtruth": "+ statement.getId());", "first_line_prediction": " + statement.getId());", "match": 0}
{"groundtruth": "(rowIndex).setSnippet(str);", "prediction": "(rowIndex).setSnippet(str);\n                }\n            } else {\n                //\u5220\u9664prompts\u4e2d\u7684\u503c\n                prompts.remove(rowIndex);\n            }\n            fireTableCellUpdated(rowIndex, columnIndex);\n        }\n\n        @Override\n        public Object getValueAt(int rowIndex, int columnIndex) {\n            if (columnIndex == NAME_COLUMN) {\n                return prompts.get(rowIndex).getOption();\n            } else if (columnIndex == VALUE_COLUMN) {\n                return prompts.get(rowIndex).getSnippet();\n            }\n            return null;\n        }\n\n        @Override\n        public String getColumnName(int column) {\n           ", "first_line_groundtruth": "(rowIndex).setSnippet(str);", "first_line_prediction": "(rowIndex).setSnippet(str);", "match": 1}
{"groundtruth": "file.getId(),\n            Status.FAILURE,\n            /* payload= */ e.getMessage() + \";", "prediction": "0,\n            Status.FAILURE,\n            /* payload= */ null);\n        throw e;\n      }\n      writeFileEvent(fileStartTime, file.getId(), Status.SUCCESS);\n    }\n  }", "first_line_groundtruth": "file.getId(),", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());", "prediction": " stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());\n        }\n        return stringStringHashMap;\n    }\n\n    public void remove(String option) {\n        prompts.removeIf(prompt -> prompt.getOption().equals(option));\n    }\n\n    public void remove(int index) {\n        prompts.removeIf(prompt -> prompt.getIndex() == index);\n    }\n\n    public void remove(Prompt prompt) {\n        prompts.remove(prompt);\n    }\n\n    public void removeAll() {\n        prompts.clear();\n    }\n\n    public void removeAll(List<Prompt> prompts) {", "first_line_groundtruth": "stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());", "first_line_prediction": " stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());", "match": 0}
{"groundtruth": "readValue(StringUtils.replaceEnvVars(new File(filePath)), objectType);", "prediction": "readValue(replaceEnvVars(new File(filePath)), objectType);\n  }", "first_line_groundtruth": "readValue(StringUtils.replaceEnvVars(new File(filePath)), objectType);", "first_line_prediction": "readValue(replaceEnvVars(new File(filePath)), objectType);", "match": 0}
{"groundtruth": ".put(prompt.getOption(), prompt.getSnippet());", "prediction": ".put(prompt.getOption(), prompt.getSnippet());\n        }\n        return stringStringHashMap;\n    }\n\n    public void remove(String option) {\n        prompts.removeIf(prompt -> prompt.getOption().equals(option));\n    }\n\n    public void remove(int index) {\n        prompts.removeIf(prompt -> prompt.getIndex() == index);\n    }\n\n    public void remove(Prompt prompt) {\n        prompts.remove(prompt);\n    }\n\n    public void removeAll() {\n        prompts.clear();\n    }\n\n    public void removeAll(List<Prompt> prompts) {\n        this.", "first_line_groundtruth": ".put(prompt.getOption(), prompt.getSnippet());", "first_line_prediction": ".put(prompt.getOption(), prompt.getSnippet());", "match": 1}
{"groundtruth": "getId(), StringUtils.format(statement.getStatement(), parameterValues));", "prediction": "getStatement(),\n        parameterValues.entrySet().stream()\n            .map(e -> ImmutableFileExec.of(e.getKey(), e.getValue().toString()))\n            .collect(Collectors.toList()));\n  }\n\n  public static FileExec replaceParameters(FileExec file, Map<String, Object> parameterValues) {\n    if (parameterValues == null || parameterValues.isEmpty()) {\n      // Nothing to do\n      return file;\n    }\n    return ImmutableFileExec.of(\n        file.getFile(),\n        parameterValues.entrySet().stream()\n            .map(e -> ImmutableFileExec.of(e.getKey(), e", "first_line_groundtruth": "getId(), StringUtils.format(statement.getStatement(), parameterValues));", "first_line_prediction": "getStatement(),", "match": 0}
{"groundtruth": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {", "prediction": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),o.getIndex()))) {\n            return false;\n        }\n        return prompts.add(o);\n    }\n\n    public void remove(Prompt o) {\n        prompts.remove(o);\n    }\n\n    public void remove(int index) {\n        prompts.remove(index);\n    }\n\n    public void remove(String option) {\n        prompts.removeIf(prompt -> prompt.getOption().equals(option));\n    }\n\n    public void remove(int[] selectedRows) {\n        Arrays.", "first_line_groundtruth": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {", "first_line_prediction": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),o.getIndex()))) {", "match": 0}
{"groundtruth": "prompts.get(rowIndex).setOption(str);", "prediction": " prompts.get(rowIndex).setName(str);\n                } else {\n                    prompts.get(rowIndex).setValue(str);\n                }\n                //\u5237\u65b0\u8868\u683c\n                fireTableCellUpdated(rowIndex, columnIndex);\n            }\n        }\n\n        @Override\n        public Object getValueAt(int rowIndex, int columnIndex) {\n            if (columnIndex == NAME_COLUMN) {\n                return prompts.get(rowIndex).getName();\n            } else {\n                return prompts.get(rowIndex).getValue();\n            }\n        }\n\n        @Override\n        public String getColumnName(int column) {\n            if (column == NAME_COLUMN) {\n               ", "first_line_groundtruth": "prompts.get(rowIndex).setOption(str);", "first_line_prediction": " prompts.get(rowIndex).setName(str);", "match": 0}
{"groundtruth": "actionManager.unregisterAction(idPrefix + prompt.getOption());", "prediction": " actionManager.unregisterAction(idPrefix + prompt.getOption());\n            }\n            BasePilotPluginAction newAction = new BasePilotPluginAction(prompt.getOption(), prompt.getIndex()) {\n                @Override\n                public String addStatement(String code) {\n                    return prompt.getSnippet().replace(\"{query}\", code);\n                }\n            };\n            actionManager.registerAction(idPrefix + prompt.getIndex(), newAction);\n            actionGroup.add(newAction);\n        }\n        popupMenu.add(actionGroup);\n    }\n\n    public void clear(DefaultActionGroup popupMenu, DefaultActionGroup actionGroup) {\n        for (", "first_line_groundtruth": "actionManager.unregisterAction(idPrefix + prompt.getOption());", "first_line_prediction": " actionManager.unregisterAction(idPrefix + prompt.getOption());", "match": 0}
{"groundtruth": "appSettingsStorage.unregisterActions();", "prediction": " appSettingsStorage.loadState(form.getState());\n    }\n\n    @Override\n    public void reset() {\n        appSettingsStorage.loadState(state);\n    }\n\n    @Override\n    public void disposeUIResources() {\n        form = null;\n    }", "first_line_groundtruth": "appSettingsStorage.unregisterActions();", "first_line_prediction": " appSettingsStorage.loadState(form.getState());", "match": 0}
{"groundtruth": "(idPrefix + prompt.getOption());", "prediction": "(idPrefix + prompt.getIndex());\n            if (oldAction != null) {\n                actionManager.unregisterAction(idPrefix + prompt.getIndex());\n            }\n            BasePilotPluginAction newAction = new BasePilotPluginAction(prompt.getOption(), prompt.getIndex()) {\n                @Override\n                public String addStatement(String code) {\n                    return prompt.getSnippet().replace(\"{query}\", code);\n                }\n            };\n            actionManager.registerAction(idPrefix + prompt.getIndex(), newAction);\n            actionGroup.add(newAction);\n        }\n        popupMenu.add(actionGroup);\n    }\n\n    public void", "first_line_groundtruth": "(idPrefix + prompt.getOption());", "first_line_prediction": "(idPrefix + prompt.getIndex());", "match": 0}
{"groundtruth": "ddlFileStatements = SQLParser.getStatements(ddlFile).getStatements();", "prediction": " ddlStatements =\n          SQLParser.getStatements(ddlFile).getStatements().stream()\n              .map(s -> StringUtils.replaceParameters(s, parameterValues))\n              .collect(Collectors.toUnmodifiableList());\n      for (StatementExec statement : ddlStatements) {\n        connection.execute(statement.getStatement());\n      }\n    }\n  }\n\n  public void writeTaskEvent(Instant startTime, String taskId, Status status) {\n    writeTaskEvent(startTime, taskId, status, null);\n  }\n\n  public void writeTaskEvent(Instant startTime, String taskId, Status status, String message) {\n    events", "first_line_groundtruth": "ddlFileStatements = SQLParser.getStatements(ddlFile).getStatements();", "first_line_prediction": " ddlStatements =", "match": 0}
{"groundtruth": "form.getSettings().clone();", "prediction": " form.getState();\n        appSettingsStorage.registerActions();\n    }\n\n    @Override\n    public void reset() {\n        state = appSettingsStorage.getState();\n        form.setState(state);\n    }\n\n    @Override\n    public void disposeUIResources() {\n        form = null;\n    }", "first_line_groundtruth": "form.getSettings().clone();", "first_line_prediction": " form.getState();", "match": 0}
{"groundtruth": "connection.execute(currentQuery);", "prediction": " connection.execute(currentQuery);\n      }\n    }\n  }\n\n  public void writeStatementEvent(\n      long startTime, String statementId, Status status, String message) {\n    eventsStream.add(\n        new EventInfo(\n            startTime,\n            statementId,\n            status,\n            message));\n  }\n\n  public void writeFileEvent(\n      long startTime,\n      String fileId,\n      Status status,\n      String message,\n      List<StatementExec> statements) {\n    eventsStream.add(\n        new EventInfo(\n            startTime,\n            fileId,\n            status,\n            message,\n            statements));\n  }\n\n  public void writeFile", "first_line_groundtruth": "connection.execute(currentQuery);", "first_line_prediction": " connection.execute(currentQuery);", "match": 0}
{"groundtruth": "task.getTimeTravelPhaseId() != null) {", "prediction": "task.getCustomTaskExecutorArguments() instanceof CustomTaskExecutorArguments) {\n      CustomTaskExecutorArguments customTaskExecutorArguments =\n          (CustomTaskExecutorArguments) task.getCustomTaskExecutorArguments();\n      values.putAll(customTaskExecutorArguments.getRuntimeParameters());\n    }\n    return values;\n  }\n\n  private TaskExecutor getTaskExecutor(TaskExec task) {\n    String taskExecutorClassName = task.getTaskExecutorClassName();\n    try {\n      Class<?> taskExecutorClass = Class.forName(taskExecutorClassName);\n      Constructor<?> taskExecutorConstructor = taskExecutorClass.getConstructor();\n      return (TaskExecutor) task", "first_line_groundtruth": "task.getTimeTravelPhaseId() != null) {", "first_line_prediction": "task.getCustomTaskExecutorArguments() instanceof CustomTaskExecutorArguments) {", "match": 0}
{"groundtruth": ".forName(task.getCustomTaskExecutor())\n                .getDeclaredConstructor(\n                    SQLTelemetryRegistry.class, String.class, CustomTaskExecutorArguments.class);", "prediction": ".forName(task.getCustomTaskExecutor()).getConstructor(SQLTelemetryRegistry.class, String.class);\n        return (TaskExecutor) constructor.newInstance(this.telemetryRegistry, this.experimentStartTime);\n      } catch (Exception e) {\n        throw new RuntimeException(\"Failed to instantiate custom task executor: \" + task.getCustomTaskExecutor(), e);\n      }\n    }\n  }\n\n  private void writeTaskEvent(Instant startTime, String taskId, Status status) {\n    EventInfo eventInfo =\n        ImmutableEventInfo.builder()\n            .eventType(EventType.TASK)\n            .status(status)\n            .startTime(", "first_line_groundtruth": ".forName(task.getCustomTaskExecutor())", "first_line_prediction": ".forName(task.getCustomTaskExecutor()).getConstructor(SQLTelemetryRegistry.class, String.class);", "match": 0}
{"groundtruth": "+ task.getId());", "prediction": " + task.getId());\n          writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE, e.getMessage());\n          throw e;\n        }\n        writeTaskEvent(taskStartTime, task.getId(), Status.SUCCESS);\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"Exception executing session: \" + session.getId());\n      writeSessionEvent(sessionStartTime, Status.FAILURE, e.getMessage());\n      throw e;\n    }\n    writeSessionEvent(sessionStartTime, Status.SUCCESS);\n    return true;\n  }\n\n  private TaskExecutor getTaskExecutor(TaskExec task) throws ClientException {", "first_line_groundtruth": "+ task.getId());", "first_line_prediction": " + task.getId());", "match": 0}
{"groundtruth": "\"Unable to load custom task class: \" + task.getCustomTaskExecutor(), e);", "prediction": " \"Failed to instantiate custom task executor: \" + task.getCustomTaskExecutor(), e);\n      }\n    }\n  }\n\n  private void writeSessionEvent(Instant startTime, String sessionId, Status status) {\n    EventInfo eventInfo =\n        ImmutableEventInfo.builder()\n            .withStartTime(startTime)\n            .withEndTime(Instant.now())\n            .withEventType(EventType.SESSION)\n            .withStatus(status)\n            .withSessionId(sessionId)\n            .build();\n    this.telemetryRegistry.writeEvent(eventInfo);\n  }\n\n  private void writeTaskEvent(Instant startTime, String taskId, Status status)", "first_line_groundtruth": "\"Unable to load custom task class: \" + task.getCustomTaskExecutor(), e);", "first_line_prediction": " \"Failed to instantiate custom task executor: \" + task.getCustomTaskExecutor(), e);", "match": 0}
{"groundtruth": "return instance.getState();", "prediction": " return instance.getState();\n    }\n\n    public void addDefaultPrompts(Prompts prompts) {\n        prompts.addPrompt(new Prompt(\"select\", 0));\n        prompts.addPrompt(new Prompt(\"select\", 1));\n        prompts.addPrompt(new Prompt(\"select\", 2));\n        prompts.addPrompt(new Prompt(\"select\", 3));\n        prompts.addPrompt(new Prompt(\"select\", 4));\n        prompts.addPrompt(new Prompt(\"select\", 5));\n        prompts.addPrompt(new Prompt(\"select\", 6));", "first_line_groundtruth": "return instance.getState();", "first_line_prediction": " return instance.getState();", "match": 0}
{"groundtruth": ", eventInfo.getEndTime()));", "prediction": ", Instant.now()));\n          experimentMetadata.put(\"phase_\" + phase.getId() + \"_end_time\", DateTimeFormatter.U_FORMATTER.format(Instant.now()));\n          experimentMetadata.put(\"phase_\" + phase.getId() + \"_duration\", ChronoUnit.SECONDS.between(phaseStartTime, Instant.now()));\n          experimentMetadata.put(\"phase_\" + phase.getId() + \"_status\", eventInfo.getStatus().toString());\n          experimentMetadata.put(\"phase_\" + phase.getId() + \"_status_code\", eventInfo.getStatusCode());\n          experimentMetadata.put(\"phase_\" + phase", "first_line_groundtruth": ", eventInfo.getEndTime()));", "first_line_prediction": ", Instant.now()));", "match": 0}
{"groundtruth": "if (phase.getSessions().size() > maxConcurrentSessions) {", "prediction": " maxConcurrentSessions = Math.max(maxConcurrentSessions, phase.getSessions().size());\n    }\n    ExecutorService executorService = Executors.newFixedThreadPool(maxConcurrentSessions);\n    List<Future<SessionExec>> futures = new ArrayList<>();\n    for (PhaseExec phase : workload.getPhases()) {\n      for (SessionExec session : phase.getSessions()) {\n        futures.add(\n            executorService.submit(\n                () -> {\n                  try {\n                    return executeSession(session);\n                  } catch (Exception e) {\n                    throw new RuntimeException(e);\n                  }\n                }));\n      }\n    }\n    executorService.shutdown", "first_line_groundtruth": "if (phase.getSessions().size() > maxConcurrentSessions) {", "first_line_prediction": " maxConcurrentSessions = Math.max(maxConcurrentSessions, phase.getSessions().size());", "match": 0}
{"groundtruth": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);", "prediction": " writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE, e.getMessage());\n          throw e;\n        }\n        writeTaskEvent(taskStartTime, task.getId(), Status.SUCCESS);\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"Exception executing session: \" + session.getId());\n      writeSessionEvent(sessionStartTime, session.getId(), Status.FAILURE, e.getMessage());\n      throw e;\n    }\n    writeSessionEvent(sessionStartTime, session.getId(), Status.SUCCESS);\n    return true;\n  }\n\n  private Map<String, Object> updateRuntimeParameterValues(Task", "first_line_groundtruth": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);", "first_line_prediction": " writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE, e.getMessage());", "match": 0}
{"groundtruth": ".info(\"Running \" + phase.getId() + \" phase...\");", "prediction": ".info(\"Starting phase: {}\", phase.getId());\n          final Instant phaseStartTime = Instant.now();\n          final List<Future<SessionExec>> futures = new ArrayList<>();\n          for (SessionExec session : phase.getSessions()) {\n            futures.add(\n                executor.submit(\n                    () -> {\n                      try {\n                        return executeSession(\n                            session,\n                            experimentMetadata,\n                            phaseIdToEndTime,\n                            repetitionStartTime);\n                      } catch (Exception e) {\n                        throw new RuntimeException(e);\n                      }\n                    }));\n          }\n          for (Future<SessionExec> future : futures) {\n            try {\n              future.", "first_line_groundtruth": ".info(\"Running \" + phase.getId() + \" phase...\");", "first_line_prediction": ".info(\"Starting phase: {}\", phase.getId());", "match": 0}
{"groundtruth": "settings = AppSettingsStorage.getInstance().getState();", "prediction": " appSettings = AppSettingsStorage.getInstance(project).getSettings();\n        GPTClient gptClient = new GPTClient(appSettings.getApiKey());\n        List<CompletionChoice> choices = gptClient.complete(statement);\n        if (choices.isEmpty()) {\n            NotifyUtils.notifyMessage(project,\"no result from gpt\", NotificationType.INFORMATION);\n            return;\n        }\n        String result = choices.get(0).getText();\n        CommandProcessor.getInstance().executeCommand(project, () -> {\n            Document document = editor.getDocument();\n            int startOffset = document.getSelectionModel().getSelectionStart", "first_line_groundtruth": "settings = AppSettingsStorage.getInstance().getState();", "first_line_prediction": " appSettings = AppSettingsStorage.getInstance(project).getSettings();", "match": 0}
{"groundtruth": "String reportFileName = contributionFilesService.getFileName(start, finish);", "prediction": " // @TODO handle empty list\n        return contributionFilesService.processFiles(contributionFiles, start, finish, contributionFilesService.getFileName(start, finish));\n    }", "first_line_groundtruth": "String reportFileName = contributionFilesService.getFileName(start, finish);", "first_line_prediction": " // @TODO handle empty list", "match": 0}
{"groundtruth": "phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, eventInfo.getEndTime()));", "prediction": " phase.getId(),\n               ChronoUnit.SECONDS.between(phaseStartTime, Instant.now()));\n          experimentMetadata.put(\"phase_\" + phase.getId() + \"_end_time\", DateTimeFormatter.U_FORMATTER.format(Instant.now()));\n          experimentMetadata.put(\"phase_\" + phase.getId() + \"_status\", eventInfo.getStatus().toString());\n          experimentMetadata.put(\"phase_\" + phase.getId() + \"_status_code\", eventInfo.getStatusCode());\n          experimentMetadata.put(\"phase_\" + phase.getId() + \"_status_message\", eventInfo.getStatusMessage());\n          experiment", "first_line_groundtruth": "phase.getId(),", "first_line_prediction": " phase.getId(),", "match": 0}
{"groundtruth": "(next.getOption()));", "prediction": "(next.getOption()));\n        _prompts.addAll(prompts.getPrompts());\n    }\n\n    public static Prompts addDefaultPrompts(Prompts _prompts) {\n        _prompts.add(new Prompt(\"prompt.default.alias.name\", \"prompt.default.alias.value\"));\n        _prompts.add(new Prompt(\"prompt.default.alias.name2\", \"prompt.default.alias.value2\"));\n        _prompts.add(new Prompt(\"prompt.default.alias.name3\", \"prompt.default.", "first_line_groundtruth": "(next.getOption()));", "first_line_prediction": "(next.getOption()));", "match": 1}
{"groundtruth": ", session.getId(), Status.FAILURE);", "prediction": ", session.getId(), Status.FAILURE);\n      throw e;\n    }\n    writeSessionEvent(sessionStartTime, session.getId(), Status.SUCCESS);\n    return true;\n  }\n\n  private Map<String, Object> updateRuntimeParameterValues(TaskExec task) {\n    Map<String, Object> values = new HashMap<>(runtimeParameterValues);\n    if (task.getCustomTaskExecutorArguments() instanceof CustomTaskExecutorArguments) {\n      CustomTaskExecutorArguments customTaskExecutorArguments =\n          (CustomTaskExecutorArguments) task.getCustomTaskExecutorArguments();\n      values.putAll(customTaskExecutorArguments.getRuntimeParameters", "first_line_groundtruth": ", session.getId(), Status.FAILURE);", "first_line_prediction": ", session.getId(), Status.FAILURE);", "match": 1}
{"groundtruth": "fdcFileMapper.processRequest(files.toArray(new String[0]), getFileName(start, finish));", "prediction": " fdcFileMapper.processRequest(files.toArray(new String[0]), start, finish);\n    }\n\n    public String getFileName(LocalDate start, LocalDate finish) {\n        return String.format(FILE_NAME_TEMPLATE, start, finish);\n    }", "first_line_groundtruth": "fdcFileMapper.processRequest(files.toArray(new String[0]), getFileName(start, finish));", "first_line_prediction": " fdcFileMapper.processRequest(files.toArray(new String[0]), start, finish);", "match": 0}
{"groundtruth": "experiment.execute();", "prediction": " experiment.run();\n  }\n\n  /** Create command line options. */\n  private static Options createOptions() {\n    final Options options = new Options();\n    options.addOption(\n        Option.builder(OPT_INPUT_TASK_LIBRARY_FILE)\n            .longOpt(OPT_INPUT_TASK_LIBRARY_FILE)\n            .hasArg()\n            .desc(\"Task library file\")\n            .build());\n    options.addOption(\n        Option.builder(OPT_INPUT_WORKLOAD_FILE)\n            .longOpt(OPT_INPUT_WORKLOAD_FILE)\n            .hasArg()\n            .desc(\"Workload file", "first_line_groundtruth": "experiment.execute();", "first_line_prediction": " experiment.run();", "match": 0}
{"groundtruth": "<String> contributionFiles = contributionFilesService.getFiles(start, finish);", "prediction": "<String> contributionFiles = contributionFilesService.getFiles(start, finish);\n        // @TODO handle empty list\n        return contributionFilesService.processFiles(contributionFiles, start, finish, contributionFilesService.getFileName(start, finish));\n    }", "first_line_groundtruth": "<String> contributionFiles = contributionFilesService.getFiles(start, finish);", "first_line_prediction": "<String> contributionFiles = contributionFilesService.getFiles(start, finish);", "match": 1}
{"groundtruth": "(Prompt.of(\"\u6b65\u9aa4\u6ce8\u91ca\", \"\u5e2e\u6211\u7ed9\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u6b65\u9aa4\u6dfb\u52a0\u6ce8\u91ca\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{", "prediction": "(Prompt.of(\"Explain\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"Explain\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"Explain\", \"help me add comments to the key steps of the following code", "first_line_groundtruth": "(Prompt.of(\"\u6b65\u9aa4\u6ce8\u91ca\", \"\u5e2e\u6211\u7ed9\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u6b65\u9aa4\u6dfb\u52a0\u6ce8\u91ca\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{", "first_line_prediction": "(Prompt.of(\"Explain\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));", "match": 0}
{"groundtruth": "contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);", "prediction": " contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);\n    }", "first_line_groundtruth": "contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);", "first_line_prediction": " contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);", "match": 0}
{"groundtruth": ", phase.getId(), Status.SUCCESS);", "prediction": ", phase.getId(), Status.SUCCESS);\n          } catch (Exception e) {\n            eventInfo = writePhaseEvent(phaseStartTime, phase.getId(), Status.FAILURE);\n            throw e;\n          }\n          experimentMetadata.put(\"phase_\" + phase.getId(), eventInfo);\n        }\n        // Write experiment metadata\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.writeValue(config.getExperimentMetadataFile(), experimentMetadata);\n        // Write experiment end time\n        Instant experimentEndTime = Instant.now();\n        writeExperimentEvent(repetitionStartTime, experimentEndTime, Status.SUCCESS);\n      } catch (Exception e) {\n        write", "first_line_groundtruth": ", phase.getId(), Status.SUCCESS);", "first_line_prediction": ", phase.getId(), Status.SUCCESS);", "match": 1}
{"groundtruth": "( getFdcValue(DateUtils.convertXmlGregorianToString(o),true));", "prediction": " String.format(FDC_FORMAT, (Objects.nonNull(o)?DateUtils.convertXmlGregorianToString(o):EMPTY_CHARACTER));\n    }\n\n    private String getFdcValue(String o){\n        return  String.format(FDC_FORMAT, (Objects.nonNull(o)?o:EMPTY_CHARACTER));\n    }\n\n    private File createCsvFile(String fileName) throws IOException {\n        File file = new File(fileName);\n        if (file.exists()) {\n            file.delete();\n        }\n        file.createNewFile();\n        return file;\n    }\n\n    private void setFilePermissions", "first_line_groundtruth": "( getFdcValue(DateUtils.convertXmlGregorianToString(o),true));", "first_line_prediction": " String.format(FDC_FORMAT, (Objects.nonNull(o)?DateUtils.convertXmlGregorianToString(o):EMPTY_CHARACTER));", "match": 0}
{"groundtruth": "Prompt.of(\"emptyForYou\", \"balabala{", "prediction": "Prompt.of(\"\u4f18\u5316\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"\u4f18\u5316\u4ee3\u7801\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"\u4f18\u5316\u4ee3\u7801\u7247\u6bb5\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"\u4f18\u5316\u4ee3\u7801\u7247\u6bb5\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u4e00\u6bb5", "first_line_groundtruth": "Prompt.of(\"emptyForYou\", \"balabala{", "first_line_prediction": "Prompt.of(\"\u4f18\u5316\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));", "match": 0}
{"groundtruth": "(task.getCustomTaskExecutor() == null) {", "prediction": " (task.getCustomTaskExecutorArguments() != null) {\n      try {\n        Class<?> clazz = Class.forName(task.getCustomTaskExecutorArguments().getClassName());\n        Constructor<?> constructor = clazz.getConstructor(CustomTaskExecutorArguments.class);\n        return (TaskExecutor) constructor.newInstance(task.getCustomTaskExecutorArguments());\n      } catch (Exception e) {\n        throw new RuntimeException(\n            \"Cannot instantiate custom task executor: \" + task.getCustomTaskExecutorArguments(), e);\n      }\n    } else {\n      return new TaskExecutor();\n    }\n  }\n\n  private void writeSessionEvent(Instant", "first_line_groundtruth": "(task.getCustomTaskExecutor() == null) {", "first_line_prediction": " (task.getCustomTaskExecutorArguments() != null) {", "match": 0}
{"groundtruth": "return fdcFilesService.processFiles(contributionFiles, start, end);", "prediction": " return fdcFilesService.processFiles(\n                contributionFiles,\n                start,\n                end\n         );\n    }", "first_line_groundtruth": "return fdcFilesService.processFiles(contributionFiles, start, end);", "first_line_prediction": " return fdcFilesService.processFiles(", "match": 0}
{"groundtruth": "form.getGptKey();", "prediction": " form.getRootPane();\n    }", "first_line_groundtruth": "form.getGptKey();", "first_line_prediction": " form.getRootPane();", "match": 0}
{"groundtruth": "add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{", "prediction": "add(new Prompt(\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"", "first_line_groundtruth": "add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{", "first_line_prediction": "add(new Prompt(\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"", "match": 0}
{"groundtruth": ".add(Prompt.of(\"List Steps\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{", "prediction": ".add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet", "first_line_groundtruth": ".add(Prompt.of(\"List Steps\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{", "first_line_prediction": ".add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));", "match": 0}
{"groundtruth": ".add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{", "prediction": ".add(Prompt.of(\"List Steps with Comments\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"List Steps with Comments and Comments\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"List Steps with Comments and Comments and Comments\", \"help me add comments to the key steps of the following code snippet and return the optimized", "first_line_groundtruth": ".add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{", "first_line_prediction": ".add(Prompt.of(\"List Steps with Comments\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. Here is the code snippet:{query}\"));", "match": 0}
{"groundtruth": "(AppSettings.getProject(), \"Test connection failed!\", NotificationType.ERROR);", "prediction": "(AppSettings.getProject(), \"Test connection failed!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.ERROR);\n            }\n        });\n    }\n\n    private boolean checkSettings() {\n        if (StringUtils.isBlank(gptKey.getText())) {\n            NotifyUtils.notifyMessage(AppSettings.getProject(), \"Please input your OpenAI API key\", NotificationType.ERROR);\n            return true;\n        }\n        if (StringUtils.isBlank(gptModel.getText())) {\n            NotifyUtils.notifyMessage(AppSettings.getProject(), \"Please input your OpenAI model\", NotificationType.ERROR);\n            return true", "first_line_groundtruth": "(AppSettings.getProject(), \"Test connection failed!\", NotificationType.ERROR);", "first_line_prediction": "(AppSettings.getProject(), \"Test connection failed!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.ERROR);", "match": 0}
{"groundtruth": "String, String> stringStringMap = prompts.asMap();", "prediction": "String, Prompt> promptsMap = prompts.getPromptsMap();\n        for (Prompt prompt : _prompts) {\n            promptsMap.put(prompt.getOption(), prompt);\n        }\n    }\n\n    public static Prompts addDefaultPrompts(Prompts _prompts) {\n        _prompts.add(new Prompt(\"prompt.option.name\", \"prompt.option.index\"));\n        _prompts.add(new Prompt(\"prompt.option.name\", \"prompt.option.index\"));\n        _prompts.add(new Prompt(\"prompt.", "first_line_groundtruth": "String, String> stringStringMap = prompts.asMap();", "first_line_prediction": "String, Prompt> promptsMap = prompts.getPromptsMap();", "match": 0}
{"groundtruth": "gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");", "prediction": "", "first_line_groundtruth": "gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "notifyMessage(AppSettings.getProject(), \"Test connection successfully!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.INFORMATION);", "prediction": "notifySuccess(\"GPT\u6d4b\u8bd5\u6210\u529f\", \"GPT\u6d4b\u8bd5\u6210\u529f\");\n            } else {\n                NotifyUtils.notifyError(\"GPT\u6d4b\u8bd5\u5931\u8d25\", \"GPT\u6d4b\u8bd5\u5931\u8d25\");\n            }\n        });\n    }\n\n    private boolean checkSettings() {\n        if (StringUtils.isBlank(gptKey.getText())) {\n            NotifyUtils.notifyError(\"GPT API Key\u4e0d\u80fd\u4e3a\u7a7a\", \"GPT API Key\u4e0d\u80fd\u4e3a\u7a7a\");\n            return true;\n        }\n        if (StringUtils.isBlank(gptModel.getText())) {\n            NotifyUtils.notifyError(\"GPT Model\u4e0d\u80fd\u4e3a\u7a7a\", \"GPT Model\u4e0d\u80fd\u4e3a\u7a7a\");\n            return true;\n        }\n       ", "first_line_groundtruth": "notifyMessage(AppSettings.getProject(), \"Test connection successfully!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.INFORMATION);", "first_line_prediction": "notifySuccess(\"GPT\u6d4b\u8bd5\u6210\u529f\", \"GPT\u6d4b\u8bd5\u6210\u529f\");", "match": 0}
{"groundtruth": "= original.clone();", "prediction": " = original;\n        this.promptsTable = new PromptsTable(original.prompts);\n        this.promptsPane.add(promptsTable.getRootPane(), BorderLayout.CENTER);\n        this.promptsTable.getSelectionModel().addListSelectionListener(e -> {\n            if (e.getValueIsAdjusting()) return;\n            if (promptsTable.getSelectedRowCount() == 0) {\n                isReplace.setSelected(false);\n            } else {\n                isReplace.setSelected(true);\n            }\n        });\n        this.promptsTable.getSelectionModel().setSelection", "first_line_groundtruth": "= original.clone();", "first_line_prediction": " = original;", "match": 0}
{"groundtruth": "campaign.getGames().get(id));", "prediction": "campaign.getGame());\n                updateToCampaign.setDiscountAmount(campaign.getDiscountAmount());\n                updateToCampaign.setDayTime(campaign.getDayTime());\n            }\n        }\n        System.out.println(\"Campaign updated\");\n    }\n\n    @Override\n    public List<Campaign> getCampaigns() {\n        return campaigns;\n    }", "first_line_groundtruth": "campaign.getGames().get(id));", "first_line_prediction": "campaign.getGame());", "match": 0}
{"groundtruth": "setBirthYear(customer.getBirthYear());", "prediction": "setPhone(customer.getPhone());\n                userToUpdate.setAddress(customer.getAddress());\n                userToUpdate.setBirthDate(customer.getBirthDate());\n                userToUpdate.setGender(customer.getGender());\n                userToUpdate.setUsername(customer.getUsername());\n                break;\n            }\n        }\n    }", "first_line_groundtruth": "setBirthYear(customer.getBirthYear());", "first_line_prediction": "setPhone(customer.getPhone());", "match": 0}
{"groundtruth": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");", "prediction": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");\n                }\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            } finally {\n                FileUtils.closeQuietly(is);\n            }\n\n            is = file.getInputStream(); //\u6e90\u6587\u4ef6layout\u4e0b\u9762\u7684xml\n            List<StringEntity> strings = extraClassEntity(is, file.getNameWithoutExtension().toLowerCase(), oldContent,\n                    selectionModel.getSelectionEndPosition().line,selectedText);\n            if (strings != null) {\n                for (StringEntity string : strings)", "first_line_groundtruth": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");", "first_line_prediction": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");", "match": 1}
{"groundtruth": "println(user2.getName() +\" is updated to \" + customer.getName());", "prediction": "println(\"User is found and updated.\");\n                userToUpdate = user2;\n                userToUpdate.setFirstName(customer.getFirstName());\n                userToUpdate.setLastName(customer.getLastName());\n                userToUpdate.setEmail(customer.getEmail());\n                userToUpdate.setPassword(customer.getPassword());\n                userToUpdate.setPhone(customer.getPhone());\n                userToUpdate.setAddress(customer.getAddress());\n                userToUpdate.setCity(customer.getCity());\n                userToUpdate.setCountry(customer.getCountry());\n                userToUpdate.setZipCode(customer.getZipCode());\n                userToUpdate.setGender", "first_line_groundtruth": "println(user2.getName() +\" is updated to \" + customer.getName());", "first_line_prediction": "println(\"User is found and updated.\");", "match": 0}
{"groundtruth": "if(campaign1.getId()==id){", "prediction": " if(campaign1.getId()==id){\n                 updateToCampaign = campaign1;\n                 updateToCampaign.setId(campaign.getId());\n                 updateToCampaign.setDescription(campaign.getDescription());\n                 updateToCampaign.setDiscountAmount(campaign.getDiscountAmount());\n                 updateToCampaign.setDiscountType(campaign.getDiscountType());\n                 updateToCampaign.setStartDate(campaign.getStartDate());\n                 updateToCampaign.setEndDate(campaign.getEndDate());\n                 updateToCampaign.setGames(campaign.getGames());\n                 System.out.println(\"Campaign updated.\");\n             }\n        }\n        if(updateToCampaign", "first_line_groundtruth": "if(campaign1.getId()==id){", "first_line_prediction": " if(campaign1.getId()==id){", "match": 0}
{"groundtruth": "(campaign.getId() == id){", "prediction": "(campaign.getId()==id){\n                campaigns.remove(campaign);\n                System.out.println(\"Campaign deleted\");\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void updateCampaign(int id, Campaign campaign) {\n        for (Campaign campaign1 : campaigns) {\n            if(campaign1.getId()==id){\n                campaigns.remove(campaign1);\n                campaigns.add(campaign);\n                System.out.println(\"Campaign updated\");\n                break;\n            }\n        }\n    }\n\n    @Override\n    public List<Campaign> getCampaigns() {\n        return campaigns;\n    }", "first_line_groundtruth": "(campaign.getId() == id){", "first_line_prediction": "(campaign.getId()==id){", "match": 0}
{"groundtruth": "\"\\\"=\\\"\" + string.getValue() + \"\\\";", "prediction": " \"\\\"=\\\"\"+string.getValue()+\"\\\"\");\n                        }\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } finally {\n                    FileUtils.closeQuietly(is);\n                }\n            }\n        }\n    }\n\n    /**\n     * \u626b\u63cf.m\u6587\u4ef6\n     * @param is\n     * @param className\n     * @param oldContent\n     * @return\n     */\n    private List<StringEntity> extraClassEntity(InputStream is, String className, StringBuilder oldContent,Map<String,String> strDistinctMap){\n        List<StringEntity> strings = Lists.newArrayList();\n        try {\n            BufferedReader br = new", "first_line_groundtruth": "\"\\\"=\\\"\" + string.getValue() + \"\\\";", "first_line_prediction": " \"\\\"=\\\"\"+string.getValue()+\"\\\"\");", "match": 0}
{"groundtruth": "!(customer.getGames().contains(game))){", "prediction": "game.getCountOwner()==campaignService.getCampaigns().size()){\n            System.out.println(\"Campaign is sold\");\n            campaignService.getCampaigns().remove(campaignService.getCampaigns().size()-1);\n        }\n    }", "first_line_groundtruth": "!(customer.getGames().contains(game))){", "first_line_prediction": "game.getCountOwner()==campaignService.getCampaigns().size()){", "match": 0}
{"groundtruth": "while (iterator.temProximo()) {", "prediction": "\n\t\twhile (iterator.hasNext()) {\n\t\t\tSystem.out.println(iterator.next().execute());\n\t\t}", "first_line_groundtruth": "while (iterator.temProximo()) {", "first_line_prediction": "", "match": 0}
{"groundtruth": ".println(playlist1.execute());", "prediction": ".println(playlist1.execute());", "first_line_groundtruth": ".println(playlist1.execute());", "first_line_prediction": ".println(playlist1.execute());", "match": 1}
{"groundtruth": "listener.onChangeMode();", "prediction": "\tlistener.onChangeMode();\n\t\t}", "first_line_groundtruth": "listener.onChangeMode();", "first_line_prediction": "\tlistener.onChangeMode();", "match": 0}
{"groundtruth": "= playlistItem.execute();", "prediction": " = playlistItem.execute();\n\t\t\tSystem.out.println(content);", "first_line_groundtruth": "= playlistItem.execute();", "first_line_prediction": " = playlistItem.execute();", "match": 0}
{"groundtruth": "playlist1.insert(playlist2);", "prediction": "\n\t\tPlaylist playlist3 = new Playlist(\"Minha playlist 3\");\n\t\tplaylist3.insert(musicaComNotaLetraOriginalTraduzida);\n\t\tplaylist3.insert(musicaComNotaLetraOriginal);", "first_line_groundtruth": "playlist1.insert(playlist2);", "first_line_prediction": "", "match": 0}
{"groundtruth": "iterator = player.createIterator();", "prediction": "\tSystem.out.println(\"RepeatAll\");\n\t\t\t}\n\t\t\telse if (numero % 3 == 0){\n\t\t\t\tplayer.setMode(PlayerMode.RandomMode);\n\t\t\t\t\tSystem.out.println(\"RandomMode\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tplayer.setMode(PlayerMode.PlayerMode);\n\t\t\t\t\tSystem.out.println(\"PlayerMode\");\n\t\t\t}\n\t\t}", "first_line_groundtruth": "iterator = player.createIterator();", "first_line_prediction": "\tSystem.out.println(\"RepeatAll\");", "match": 0}
{"groundtruth": "playlistItem = iterator.proximo();", "prediction": " item = iterator.proximo();\n\t\t\tSystem.out.println(item.getNome());\n\t\t\tThread.sleep(1000);\n\t\t}", "first_line_groundtruth": "playlistItem = iterator.proximo();", "first_line_prediction": " item = iterator.proximo();", "match": 0}
{"groundtruth": "(\"\\n::::::::::::\\nModo: %s, est\u00e1 ativado!\\n\", player.getMode());", "prediction": "(\"Modem alterado para %s\\n\", player.getMode());", "first_line_groundtruth": "(\"\\n::::::::::::\\nModo: %s, est\u00e1 ativado!\\n\", player.getMode());", "first_line_prediction": "(\"Modem alterado para %s\\n\", player.getMode());", "match": 0}
{"groundtruth": "player.createIterator();", "prediction": " player.createIterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tSystem.out.println(iterator.next().execute());\n\t\t}", "first_line_groundtruth": "player.createIterator();", "first_line_prediction": " player.createIterator();", "match": 0}
{"groundtruth": "MessageUtils.showNotify(\"\u8bf7\u9009\u62e9\u5e03\u5c40\u6587\u4ef6\");", "prediction": " return;\n            }\n            List<StringEntity> strings;\n            StringBuilder oldContent = new StringBuilder();\n            try {\n                oldContent.append(new String(file.contentsToByteArray(), \"utf-8\"));\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n            InputStream is = null;\n            try {\n                is = file.getInputStream();\n                strings = extraLayoutEntity(is, file.getNameWithoutExtension().toLowerCase(), oldContent, valueKeyMap);\n                if (strings != null) {\n                    for (StringEntity string : strings) {\n                        sb.append(\"\\n    <string name", "first_line_groundtruth": "MessageUtils.showNotify(\"\u8bf7\u9009\u62e9\u5e03\u5c40\u6587\u4ef6\");", "first_line_prediction": " return;", "match": 0}
{"groundtruth": "tokens.addAll(Lexer.tokenize(s));", "prediction": " tokens.addAll(Lexer.tokenize(s));\n\n            reader.close();\n        } catch (IOException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n            System.exit(1);\n        }\n\n        return tokens;\n    }\n\n    // Returns a file path to a file to be compiled\n    private static String selectFile() {\n        File file = new File(\"src/core/test.txt\");\n        if (!file.exists()) {\n            System.out.println(\"Error: File does not exist\");\n            System.exit(1);\n        }\n        return file.getAbsolutePath();\n    }\n\n   ", "first_line_groundtruth": "tokens.addAll(Lexer.tokenize(s));", "first_line_prediction": " tokens.addAll(Lexer.tokenize(s));", "match": 0}
{"groundtruth": "+ \": \"+ selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";", "prediction": " + \" \" + comment;\n            else currComment = currComment + \"\\n\" + formattedDate + \" \" + comment;\n            collision.setComment(currComment);\n            collision.setUpdatedAt(currentDate);\n            collision.setEngineer(selectedEngineer);\n            collisionDAO.save(collision);\n        }\n    }\n\n    public Page<Collision> findAll(Pageable pageable) {\n        return collisionsRepository.findAll(pageable);\n    }\n\n    public Page<Collision> findAllByProject(Pageable pageable, Project project) {\n        return collisionsRepository.findAllByProject(pageable, project);\n    }", "first_line_groundtruth": "+ \": \"+ selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";", "first_line_prediction": " + \" \" + comment;", "match": 0}
{"groundtruth": "> foundCollision = collisionsRepository.findByIdFetchEngineer(id);", "prediction": "> foundCollision = collisionsRepository.findById(id);\n\n        return foundCollision.orElse(null);\n    }\n\n    public Collision findByIdsForValidation(String elemId1, String elemId2, Project project) {\n        return collisionsRepository.findByIdsForValidation(elemId1, elemId2, project);\n    }\n\n    public Collision save(Collision collision) {\n        return collisionsRepository.save(collision);\n    }\n\n    public void delete(Collision collision) {\n        collisionsRepository.delete(collision);\n    }\n\n    public Page<Collision> findByProjectBase(Project project, Pageable pageable) {\n        return collisions", "first_line_groundtruth": "> foundCollision = collisionsRepository.findByIdFetchEngineer(id);", "first_line_prediction": "> foundCollision = collisionsRepository.findById(id);", "match": 0}
{"groundtruth": "originalEngineer = engineersService.findOne(id);", "prediction": " engineer = engineersService.findOne(id);\n        engineer.setFirstName(updatedEngineer.getFirstName());\n        engineer.setLastName(updatedEngineer.getLastName());\n        engineer.setBirthDate(updatedEngineer.getBirthDate());\n        engineer.setAddress(updatedEngineer.getAddress());\n        engineer.setPhone(updatedEngineer.getPhone());\n        engineer.setEmail(updatedEngineer.getEmail());\n        engineer.setRole(updatedEngineer.getRole());\n        engineer.setProjects(updatedEngineer.getProjects());\n        engineer.setEngineerDetails(updatedEngineer.getEngine", "first_line_groundtruth": "originalEngineer = engineersService.findOne(id);", "first_line_prediction": " engineer = engineersService.findOne(id);", "match": 0}
{"groundtruth": "\"engineers\", engineersService.findAll());", "prediction": "project);\n        List<Engineer> engineers = engineersService.findAll();\n        model.addAttribute(\"engineers\", engineers);\n        return \"projects/new\";\n    }\n\n    @PostMapping(\"/new\")\n    public String create(@Valid @ModelAttribute(\"project\") Project project,\n                          BindingResult bindingResult,\n                          Model model) {\n        if (bindingResult.hasErrors()) {\n            List<Engineer> engineers = engineersService.findAll();\n            model.addAttribute(\"engineers\", engineers);\n            return \"projects/new\";\n        }\n\n        projectService.save(project);\n        return \"redirect:/projects", "first_line_groundtruth": "\"engineers\", engineersService.findAll());", "first_line_prediction": "project);", "match": 0}
{"groundtruth": ".findByIdFetchCollisions(engineerDetails.getEngineer().getId());", "prediction": " .findOne(engineerDetails.getEngineer().getId());\n\n        model.addAttribute(\"engineer\", engineer);\n\n        return \"account\";\n    }\n\n    @GetMapping(\"/projects\")\n    public String showProjects(Model model) {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        EngineerDetails engineerDetails = (EngineerDetails) authentication.getPrincipal();\n\n        model.addAttribute(\"projects\", projectService.findAllByEngineer(engineerDetails.getEngineer()));\n\n        return \"projects/index\";\n    }\n\n    @GetMapping(\"/projects/new\")\n    public String newProject(Model model) {\n        model.", "first_line_groundtruth": ".findByIdFetchCollisions(engineerDetails.getEngineer().getId());", "first_line_prediction": " .findOne(engineerDetails.getEngineer().getId());", "match": 0}
{"groundtruth": "Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);", "prediction": " collisionDAO.addComment(id, selectedEngineer, comment);\n    }\n\n    public Page<Collision> findAll(Pageable pageable) {\n        return collisionsRepository.findAll(pageable);\n    }\n\n    public Page<Collision> findAllByProject(Project project, Pageable pageable) {\n        return collisionsRepository.findAllByProject(project, pageable);\n    }\n\n    public Page<Collision> findAllByProjectBase(Project project, Pageable pageable) {\n        return collisionsRepository.findAllByProjectBase(project, pageable);\n    }\n\n    public Page<Collision> findAllByProjectBaseAndEngineer(", "first_line_groundtruth": "Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);", "first_line_prediction": " collisionDAO.addComment(id, selectedEngineer, comment);", "match": 0}
{"groundtruth": "= engineersService.findByIdFetchCollisions(id);", "prediction": " = engineersService.findOne(id);\n        model.addAttribute(\"engineer\", engineer);\n        return \"engineers/show\";\n    }\n\n    @GetMapping(\"/new\")\n    public String newEngineer(Model model) {\n        model.addAttribute(\"engineer\", new Engineer());\n        return \"engineers/new\";\n    }\n\n    @PostMapping\n    public String create(@Valid Engineer engineer, BindingResult bindingResult, Model model) {\n        model.addAttribute(\"engineer\", engineer);\n        if (bindingResult.hasErrors()) return \"engineers/new\";\n        engineersService.save(engineer);\n        return \"redirect", "first_line_groundtruth": "= engineersService.findByIdFetchCollisions(id);", "first_line_prediction": " = engineersService.findOne(id);", "match": 0}
{"groundtruth": "\"engineer\", engineersService.findOne(id));", "prediction": "engineersService.findById(id));\n        return \"engineers/edit\";\n    }\n\n    @PostMapping(\"/{id}\")\n    public String update(@Valid @ModelAttribute(\"engineer\") Engineer engineer,\n                         BindingResult bindingResult,\n                         @PathVariable(\"id\") int id) {\n        if (bindingResult.hasErrors()) return \"engineers/edit\";\n\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        String authority = authentication.getAuthorities().stream().findFirst().orElse(null).getAuthority();\n        if (!authority.equals(\"ROLE_ADMIN\")) {\n            engineer.setEngineerDetails(new", "first_line_groundtruth": "\"engineer\", engineersService.findOne(id));", "first_line_prediction": "engineersService.findById(id));", "match": 0}
{"groundtruth": "collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {", "prediction": " collisionsRepository.release(id);\n    }\n\n    public Page<Collision> findByProjectBase(Project project, Pageable pageable) {\n        return collisionsRepository.findByProjectBase(project, pageable);\n    }\n\n    public List<Collision> findAllByProjectBase(Project project) {\n        return collisionsRepository.findAllByProjectBase(project);\n    }\n\n    public void assign(int id, Engineer engineer) {\n        collisionDAO.assign(id, engineer);\n    }\n\n    public void markAsFake(int id) {\n        collisionDAO.markAsFake(id);\n    }", "first_line_groundtruth": "collisionsRepository.findByIdFetchEngineer(id).ifPresent(", "first_line_prediction": " collisionsRepository.release(id);", "match": 0}
{"groundtruth": "(engineerDAO.index());", "prediction": "((List<Engineer>) engineersRepository.findAll());\n        Collections.sort(engineers, new Comparator<Engineer>() {\n            @Override\n            public int compare(Engineer o1, Engineer o2) {\n                return o2.getCollisions().size() - o1.getCollisions().size();\n            }\n        });\n        return engineers;\n    }\n\n    public List<Engineer> findAllSortedByProjectsCount() {\n        List<Engineer> engineers = new ArrayList<>((List<Engineer>) engineersRepository.findAll());\n        Collections.sort(engineers, new Comparator<Engineer", "first_line_groundtruth": "(engineerDAO.index());", "first_line_prediction": "((List<Engineer>) engineersRepository.findAll());", "match": 0}
{"groundtruth": "model.addAttribute(\"comments\", collision.getComments());", "prediction": " model.addAttribute(\"engineer\", collisionOwner);\n        model.addAttribute(\"collisions\", collisionsService.findAllByProject(project_id));\n        model.addAttribute(\"reports\", service.findAllByProject(project_id));\n        model.addAttribute(\"authority\", authority);\n        return \"collisions/show\";\n    }\n\n    @GetMapping(\"/new\")\n    public String newCollision(Model model,\n                                @PathVariable(\"project_id\") int project_id,\n                                @ModelAttribute(\"engineer\") Engineer engineer) {\n        model.addAttribute(\"engineer\", engineer);\n        model.addAttribute(\"collisions\", collisionsService.findAllBy", "first_line_groundtruth": "model.addAttribute(\"comments\", collision.getComments());", "first_line_prediction": " model.addAttribute(\"engineer\", collisionOwner);", "match": 0}
{"groundtruth": "= collisionsService.findOneAndEngineer(id);", "prediction": " = collisionsService.findOne(id);\n        List<Engineer> engineers = engineersService.findAll();\n        model.addAttribute(\"engineers\", engineers);\n        model.addAttribute(\"project\", projectService.findOne(project_id));\n        model.addAttribute(\"collision\", collision);\n        model.addAttribute(\"engineer\", engineer);\n        model.addAttribute(\"authority\", authority);\n        return \"collisions/show\";\n    }\n\n    @GetMapping(\"/new\")\n    public String newCollision(@PathVariable(\"project_id\") int project_id,\n                                Model model,\n                                @ModelAttribute(\"engineer\") Engineer engineer) {\n       ", "first_line_groundtruth": "= collisionsService.findOneAndEngineer(id);", "first_line_prediction": " = collisionsService.findOne(id);", "match": 0}
{"groundtruth": "(id, engineerDetails.getEngineer(), comment);", "prediction": "(id, comment, engineerDetails.getEngineer());\n        return \"redirect:/projects/\" + project_id + \"/collisions/\" + id;\n    }\n\n    @PostMapping(\"/{id}/upload-report\")\n    public String uploadReport(@PathVariable(\"id\") int id,\n                               @RequestParam(\"report\") MultipartFile report,\n                               @PathVariable(\"project_id\") int project_id) throws IOException {\n        service.saveReport(id, report);\n        return \"redirect:/projects/\" + project_id + \"/collisions/\" + id;\n    }", "first_line_groundtruth": "(id, engineerDetails.getEngineer(), comment);", "first_line_prediction": "(id, comment, engineerDetails.getEngineer());", "match": 0}
{"groundtruth": "Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);", "prediction": "Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);\n\n        return foundEngineer.orElse(null);\n    }\n\n    public void save(Engineer engineer) {\n        engineer.setPassword(passwordEncoder.encode(engineer.getPassword()));\n        engineersRepository.save(engineer);\n    }\n\n    public void update(Engineer engineer) {\n        engineer.setPassword(passwordEncoder.encode(engineer.getPassword()));\n        engineersRepository.save(engineer);\n    }\n\n    public void delete(int id) {\n        engineersRepository.deleteById(id);\n    }\n\n   ", "first_line_groundtruth": "Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);", "first_line_prediction": "Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);", "match": 1}
{"groundtruth": "handle = getHandle(mapper.getLayout(target.getClass()));", "prediction": " handle = getHandle(mapper.getLayout(fieldType));\n            }\n            handle.set(target, segment);\n        } else if(fieldType.equals(MemorySegment.class)){\n            var offset = model.offset();\n            if(offset == null){\n                throw new IllegalArgumentException(\"Field \" + model.name() + \" is not a pointer\");\n            }\n            field.set(target, segment.asSlice(offset));\n        } else if(fieldType.equals(Array.class)){\n            var offset = model.offset();\n            if(offset == null){\n                throw new IllegalArgumentException(\"Field \" + model.name() +", "first_line_groundtruth": "handle = getHandle(mapper.getLayout(target.getClass()));", "first_line_prediction": " handle = getHandle(mapper.getLayout(fieldType));", "match": 0}
{"groundtruth": "mapper.getLayout(target.getClass()).byteOffset(MemoryLayout.PathElement.groupElement(model.name()));", "prediction": "0L;\n        if(model.isPointer()){\n            offset = Pointer.getAddress(segment);\n        }\n        return segment.asSlice(offset, mapper.sizeOf(model.type()));\n    }", "first_line_groundtruth": "mapper.getLayout(target.getClass()).byteOffset(MemoryLayout.PathElement.groupElement(model.name()));", "first_line_prediction": "0L;", "match": 0}
{"groundtruth": "var structDef = mapper.getOrDefineStruct(fieldType);", "prediction": " // If it's an object, we determine if it's a nested struct or a pointer to a struct,\n             // and we populate it with the offset of the field (nested) *or* the memory address\n             // contained in the field (pointer) as the object's self-pointer segment\n            if(model.isPointer()){\n                field.set(target, segmentForField(mapper, target, segment));\n            }else{\n                field.set(target, segmentForField(mapper, target, segment));\n            }\n        }\n    }\n\n    protected MemorySegment segmentForField(NativeMapper mapper, T target, Memory", "first_line_groundtruth": "var structDef = mapper.getOrDefineStruct(fieldType);", "first_line_prediction": " // If it's an object, we determine if it's a nested struct or a pointer to a struct,", "match": 0}
{"groundtruth": "instance.getCore().debug(\"Plugin is not setup / ProxyProtocol is off / Player is on DirectConnectWhitelist (return)\");", "prediction": " channel.close();\n                     instance.getCore().debug(\"Close connection IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (close / return)\");\n                     return;\n                }\n\n                instance.getCore().debug(\"Adding handler...\");\n                if (Config.isProxyProtocol()) {\n                    instance.getCore().debug(\"Plugin is setup & ProxyProtocol is on (Added proxyProtocolHandler)\");\n                }\n                addKeepAlivePacketHandler(channel, ((InetSocketAddress) channel.remoteAddress()).getAddress().getHostAddress(), instance);\n                instance.getCore().debug(\"Added KeepAlivePacketHandler\");\n            }\n        };", "first_line_groundtruth": "instance.getCore().debug(\"Plugin is not setup / ProxyProtocol is off / Player is on DirectConnectWhitelist (return)\");", "first_line_prediction": " channel.close();", "match": 0}
{"groundtruth": "instance.getCore().debug(\"Adding Handler...\");", "prediction": " // Get the network manager\n                    Object networkManager = getNetworkManager(channel);\n\n                    // Get the socket address\n                    SocketAddress socketAddress = getSocketAddress(networkManager);\n\n                    // Get the player address\n                    String playerAddress = getPlayerAddress(socketAddress);\n\n                    // Add the proxy protocol handler\n                    addProxyProtocolHandler(channel, playerAddress);\n                } catch (Exception ex) {\n                    instance.getCore().debug(\"An unknown error has occurred\", ex);\n                }\n            }\n        };\n\n        // Handle login channels\n        beginInitProtocol = new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel channel", "first_line_groundtruth": "instance.getCore().debug(\"Adding Handler...\");", "first_line_prediction": " // Get the network manager", "match": 0}
{"groundtruth": ".getEventManager(), neoProtectVelocity.getLogger()));", "prediction": "\n                                                                                                  .getPluginManager()\n                                                                                                  .getPlugin(\"NeoProtect\")));\n    }\n\n    private void removePlayer(Player player) {\n        Channel channel = player.getCurrentServer()\n                                 .flatMap(server -> server.getPlayer(player.getUsername()))\n                                 .flatMap(player1 -> player1.getCurrentServer())\n                                 .flatMap(server -> server.getChannel())\n                                 .orElse(null);\n        if (channel != null) {\n            channel.pipeline()\n                    .remove(\"packetevents\");\n        }\n    }", "first_line_groundtruth": ".getEventManager(), neoProtectVelocity.getLogger()));", "first_line_prediction": "", "match": 0}
{"groundtruth": "core.severe(exception.getMessage(), exception);", "prediction": " core.severe(request + \" failed cause (\" + exception + \")\");\n        }\n        return null;\n    }\n\n    protected Request.Builder defaultBuilder() {\n        return new Request.Builder();\n    }\n\n    protected String getSubDirectory(RequestType type, Object... value) {\n        StringBuilder builder = new StringBuilder();\n        builder.append(type.toString().substring(4));\n        for (Object o : value) {\n            builder.append(\"/\").append(o);\n        }\n        return builder.toString();\n    }\n\n    protected boolean isAPIInvalid(String apiKey) {\n        return apiKey == null || apiKey.isEmpty();\n    }", "first_line_groundtruth": "core.severe(exception.getMessage(), exception);", "first_line_prediction": " core.severe(request + \" failed cause (\" + exception + \")\");", "match": 0}
{"groundtruth": "instance.getCore().debug(\"Player connected over IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (warning)\");", "prediction": " instance.getCore().debug(\"Close connection IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (close / return)\");\n                    return;\n                }\n\n                instance.getCore().debug(\"Adding handler...\");\n                if (Config.isProxyProtocol()) {\n                    addProxyProtocolHandler(channel, ((InetSocketAddress) channel.remoteAddress()).getAddress().getHostAddress());\n                }\n            }\n        };\n\n        // Handle future channels\n        beginInitProtocol = new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel channel) {\n                if (!Config.isProxyProtocol() | !instance.", "first_line_groundtruth": "instance.getCore().debug(\"Player connected over IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (warning)\");", "first_line_prediction": " instance.getCore().debug(\"Close connection IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (close / return)\");", "match": 0}
{"groundtruth": "core.severe(\"Failed to load API-Key. Key is null or not valid\");", "prediction": " core.warn(localization.get(language, \"error.invalid.api.key\"));\n        }\n\n        if (backendID.length() != 32) {\n            core.warn(localization.get(language, \"error.invalid.backend.id\"));\n        }\n\n        if (geyserBackendID.length() != 32) {\n            core.warn(localization.get(language, \"error.invalid.geyser.backend.id\"));\n        }\n\n        if (gameShieldID.length() != 32) {\n            core.warn(localization.get(language, \"error", "first_line_groundtruth": "core.severe(\"Failed to load API-Key. Key is null or not valid\");", "first_line_prediction": " core.warn(localization.get(language, \"error.invalid.api.key\"));", "match": 0}
{"groundtruth": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, ex);", "prediction": " instance.getCore().debug(\"Exception while connecting: \" + ex.getMessage());\n                }\n            }\n        };\n\n        // Handle future channels\n        beginInitProtocol = new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel channel) {\n                if (!Config.isProxyProtocol() | !instance.getCore().isSetup() | instance.getCore().getDirectConnectWhitelist().contains(((InetSocketAddress) channel.remoteAddress()).getAddress().getHostAddress())) {\n                    instance.getCore().debug(\"Plugin is not setup / ProxyProtocol is off / Player is on DirectConnectWhitelist (return)\");\n                    return;", "first_line_groundtruth": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, ex);", "first_line_prediction": " instance.getCore().debug(\"Exception while connecting: \" + ex.getMessage());", "match": 0}
{"groundtruth": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");", "prediction": "\n\n        if (updateIP) {\n            core.info(\"Auto-Update of IP is enabled\");\n        } else {\n            core.info(\"Auto-Update of IP is disabled\");\n        }\n\n        if (debugMode) {\n            core.info(\"DebugMode is enabled\");\n        } else {\n            core.info(\"DebugMode is disabled\");\n        }\n\n        if (geyserServerIP.isEmpty()) {\n            core.severe(\"Failed to load GeyserServerIP. IP is null\");\n            return;\n        }\n\n        core.info(\"GeyserServerIP loaded successful '\" + geyserServerIP +", "first_line_groundtruth": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "core.severe(\"Failed to load GameshieldID. ID is null\");", "prediction": " core.severe(\"Failed to load gameshield.serverId. Key is null or not valid\");\n             return;\n        }\n        if (backendID.isEmpty()) {\n            core.severe(\"Failed to load gameshield.backendId. Key is null or not valid\");\n            return;\n        }\n        if (geyserBackendID.isEmpty()) {\n            core.severe(\"Failed to load gameshield.geyserBackendId. Key is null or not valid\");\n            return;\n        }\n        if (geyserServerIP.isEmpty()) {\n            core.severe(\"Failed to load geyser", "first_line_groundtruth": "core.severe(\"Failed to load GameshieldID. ID is null\");", "first_line_prediction": " core.severe(\"Failed to load gameshield.serverId. Key is null or not valid\");", "match": 0}
{"groundtruth": "core.info(\"API-Key loaded successful '\" + \"******************************\" + APIKey.substring(32) + \"'\");", "prediction": "\n\n        if (geyserBackendID.isEmpty()) {\n            core.severe(\"Failed to load GeyserBackendID. ID is null\");\n            return;\n        }\n\n        if (geyserServerIP.isEmpty()) {\n            core.severe(\"Failed to load GeyserServerIP. IP is null\");\n            return;\n        }\n\n        if (updateIP) {\n            if (backendID.isEmpty()) {\n                core.severe(\"Failed to load BackendID. ID is null\");\n                return;\n            }\n            if (geyserBackendID.isEmpty()) {\n                core.severe(\"Failed", "first_line_groundtruth": "core.info(\"API-Key loaded successful '\" + \"******************************\" + APIKey.substring(32) + \"'\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "core.info(\"GameshieldID loaded successful '\" + gameShieldID + \"'\");", "prediction": "\n\n        if (updateIP) {\n            core.info(\"Auto-Update of IP is enabled\");\n        } else {\n            core.info(\"Auto-Update of IP is disabled\");\n        }\n\n        if (debugMode) {\n            core.info(\"DebugMode is enabled\");\n        } else {\n            core.info(\"DebugMode is disabled\");\n        }\n\n        if (geyserServerIP.isEmpty()) {\n            core.severe(\"Failed to load GeyserServerIP. IP is null\");\n            return;\n        }\n\n        core.info(\"GeyserServerIP loaded successful '\" + geyserServerIP +", "first_line_groundtruth": "core.info(\"GameshieldID loaded successful '\" + gameShieldID + \"'\");", "first_line_prediction": "", "match": 0}
{"groundtruth": ".equals(core.getRestAPI().getStatsServer())) {", "prediction": "\n                    .startsWith(baseURL + getSubDirectory(RequestType.GET_GAMESHIELD_INFO, Config.getGameShieldID()))) {\n                core.severe(\"Connection to NeoProtect API failed\");\n            }\n            return null;\n        }\n    }\n\n    protected Request.Builder defaultBuilder() {\n        return new Request.Builder();\n    }\n\n    protected String getSubDirectory(RequestType type, Object... value) {\n        Formatter formatter = new Formatter();\n        for (Object o : value) {\n            formatter.format(\"%s/\", o);\n        }\n        return type.getSubDirectory() + formatter.toString();\n    }\n\n   ", "first_line_groundtruth": ".equals(core.getRestAPI().getStatsServer())) {", "first_line_prediction": "", "match": 0}
{"groundtruth": "(Config.getAPIKey());", "prediction": "(null);\n    }\n\n    protected Request.Builder defaultBuilder(String apiKey) {\n        return new Request.Builder().addHeader(\"User-Agent\", \"NeoProtect/\" + Config.getVersion() + \" (https://github.com/CubeAttack/NeoProtect)\");\n    }\n\n    protected String getSubDirectory(RequestType type, Object... value) {\n        Formatter formatter = new Formatter();\n        formatter.format(\"%s/%s\", type.getSubDirectory(), value[0]);\n        return formatter.toString();\n    }\n\n    public static class ResponseManager {\n\n        private final Response response;\n\n        public ResponseManager(Response response) {\n           ", "first_line_groundtruth": "(Config.getAPIKey());", "first_line_prediction": "(null);", "match": 0}
{"groundtruth": "instance.getCore().severe(\"Error: The server was unable to set the IP address from the 'HAProxyMessage'. Therefore we closed the channel.\", exception);", "prediction": " exception.printStackTrace();\n            }\n\n            super.channelRead(ctx, msg);\n        }\n    }\n\n    private boolean isIPInRange(String ipRange, String ip) {\n        String[] ipRangeParts = ipRange.split(\"\\\\.\");\n        String[] ipParts = ip.split(\"\\\\.\");\n\n        for (int i = 0; i < 4; i++) {\n            int ipRangePart = Integer.parseInt(ipRangeParts[i]);\n            int ipPart = Integer.parseInt(ipParts[i]);\n\n            if (ipRangePart > ipPart)\n                return false;\n\n            if (ipRangePart < ip", "first_line_groundtruth": "instance.getCore().severe(\"Error: The server was unable to set the IP address from the 'HAProxyMessage'. Therefore we closed the channel.\", exception);", "first_line_prediction": " exception.printStackTrace();", "match": 0}
{"groundtruth": "instance.getCore().info(\"Proceeding with the server channel injection...\");", "prediction": " // Get the MinecraftServer instance\n            Object minecraftServer = getMinecraftServer.get(Bukkit.getServer());\n\n            // Get the network managers\n            networkManagers = getNetworkMarkers == null ? (List<Object>) Reflection.getField(minecraftServer, networkManagersFieldAccessor).get(minecraftServer) : getNetworkMarkers.invoke(minecraftServer);\n\n            // Get the server channel handler\n            serverChannelHandler = new ServerChannelInitializer(this);\n\n            // Get the beginInitProtocol\n            beginInitProtocol = Reflection.getField(networkManager, ChannelInitializer.class, 0).get(networkManager);\n\n            // Get the endInit", "first_line_groundtruth": "instance.getCore().info(\"Proceeding with the server channel injection...\");", "first_line_prediction": " // Get the MinecraftServer instance", "match": 0}
{"groundtruth": "instance.getCore().info(\"Late bind injection successful.\");", "prediction": " instance.getCore().info(\"Server channel injection successfully delayed.\");\n                }\n            }.runTaskLater(instance, 1L);\n        }\n    }\n\n    /**\n     * Register the channel handler.\n     * <p>\n     * This method is called by the constructor.\n     *\n     * @throws IllegalArgumentException - if the server channel handler is already registered.\n     */\n    private void registerChannelHandler() throws IllegalArgumentException {\n        if (serverChannelHandler != null)\n            throw new IllegalArgumentException(\"Server channel handler is already registered.\");\n\n        serverChannelHandler = new ServerChannelInitializer();\n        serverChannelHandler.setChannelInitializer(new ChannelInitializer<", "first_line_groundtruth": "instance.getCore().info(\"Late bind injection successful.\");", "first_line_prediction": " instance.getCore().info(\"Server channel injection successfully delayed.\");", "match": 0}
{"groundtruth": "Reflection.getField(serverConnection.getClass(), List.class, i).get(serverConnection);", "prediction": " networkManagers.get(i);\n            if (list.size() > 0) {\n                networkManagers = list;\n                looking = false;\n            }\n        }\n\n        // Add the channel handler to the pipeline\n        for (Object networkManager : networkManagers) {\n            if (networkManager == null) {\n                continue;\n            }\n\n            Channel channel = (Channel) socketAddressFieldAccessor.get(networkManager);\n            channel.pipeline().addLast(beginInitProtocol);\n        }\n    }\n\n    private boolean isIPInRange(String ipRange, String ip) {\n        String[] split = ipRange.split(\"/\");\n        String", "first_line_groundtruth": "Reflection.getField(serverConnection.getClass(), List.class, i).get(serverConnection);", "first_line_prediction": " networkManagers.get(i);", "match": 0}
{"groundtruth": "instance.getCore().info(\"Delaying server channel injection due to late bind.\");", "prediction": " instance.getCore().info(\"Proceeding with the server channel injection...\");\n             registerChannelHandler();\n        }\n\n        instance.getCore().info(\"Proceeding with the proxy protocol injection...\");\n        registerProxyProtocol();\n    }\n\n    /**\n     * Registers the proxy protocol handler.\n     */\n    private void registerProxyProtocol() {\n        instance.getCore().info(\"Registering the proxy protocol handler...\");\n        serverChannelHandler = new ServerChannelInitializer(instance);\n        instance.getCore().info(\"Registered the proxy protocol handler!\");\n    }\n\n    /**\n     * Registers the server channel handler.\n     */\n    private void registerChannelHandler() {", "first_line_groundtruth": "instance.getCore().info(\"Delaying server channel injection due to late bind.\");", "first_line_prediction": " instance.getCore().info(\"Proceeding with the server channel injection...\");", "match": 0}
{"groundtruth": "this.instance.getCore().info(\"Found the server channel and added the handler. Injection successfully!\");", "prediction": " // We need to synchronize against this list\n                networkManagers = Reflection.isNewerPackage() || Reflection.VERSION.contains(\"16\") ? networkManagersFieldAccessor.get(serverConnection) : (List<Object>) getNetworkMarkers.invoke(null, serverConnection);\n            }\n        }\n    }\n\n    private boolean isIPInRange(String ipRange, String ip) {\n        String[] split = ipRange.split(\"/\");\n        String[] split2 = split[0].split(\"\\\\.\");\n        String[] split3 = split[1].split(\"\\\\.\");\n\n        int[] ip1 = new int[4];\n        int[] ip", "first_line_groundtruth": "this.instance.getCore().info(\"Found the server channel and added the handler. Injection successfully!\");", "first_line_prediction": " // We need to synchronize against this list", "match": 0}
{"groundtruth": "if (instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getServer().getOnlineMode())) {", "prediction": " if (instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {\n            Stats stats = instance.getStats();\n            String infos =\n                    \"\u00a7bOsName\u00a77: \" + System.getProperty(\"os.name\") + \" \\n\" +\n                            \"\u00a7bJavaVersion\u00a77: \" + System.getProperty(\"java.version\") + \" \\n\" +\n\n                            \"\u00a7bPluginVersion\u00a77: \" + stats.getPluginVersion() + \" \\n\" +\n                            \"\u00a7bVersionStatus\u00a77: \" + instance.", "first_line_groundtruth": "if (instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getServer().getOnlineMode())) {", "first_line_prediction": " if (instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "match": 0}
{"groundtruth": "instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "prediction": "instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {\n                    Stats stats = instance.getStats();\n                    String infos =\n                            \"\u00a7bOsName\u00a77: \" + System.getProperty(\"os.name\") + \" \\n\" +\n                                    \"\u00a7bJavaVersion\u00a77: \" + System.getProperty(\"java.version\") + \" \\n\" +\n\n                                    \"\u00a7bPluginVersion\u00a77: \" + stats.getPluginVersion() + \" \\n\" +\n                                    \"\u00a7bVersionStatus\u00a77: \" + instance.getCore", "first_line_groundtruth": "instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "first_line_prediction": "instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "match": 1}
{"groundtruth": ".forLanguageTag(Config.getLanguage()), new File(\"plugins/NeoProtect/languages/\"));", "prediction": ".ENGLISH.toLanguageTag(), languageEN, languageDE, languageRU, languageUA);\n        this.restAPIRequests = new RestAPIRequests(this);\n\n        if (this.versionResult.isUpdateAvailable()) {\n            this.plugin.getLogger().log(Level.INFO, \"A new version of NeoProtect is available. Please update to the latest version.\");\n        }\n    }\n\n    public void startDebug() {\n        if (isDebugRunning) return;\n        isDebugRunning = true;\n        new Thread(() -> {\n            while (isDebugRunning) {\n                try {\n                    Thread.sleep(100", "first_line_groundtruth": ".forLanguageTag(Config.getLanguage()), new File(\"plugins/NeoProtect/languages/\"));", "first_line_prediction": ".ENGLISH.toLanguageTag(), languageEN, languageDE, languageRU, languageUA);", "match": 0}
{"groundtruth": ").isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "prediction": "player).isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {\n                    Stats stats = instance.getStats();\n                    String infos =\n                            \"\u00a7bOsName\u00a77: \" + System.getProperty(\"os.name\") + \" \\n\" +\n                                    \"\u00a7bJavaVersion\u00a77: \" + System.getProperty(\"java.version\") + \" \\n\" +\n\n                                    \"\u00a7bPluginVersion\u00a77: \" + stats.getPluginVersion() + \" \\n\" +\n                                    \"\u00a7bVersionStatus\u00a77: \" + instance.getCore().getVersionResult", "first_line_groundtruth": ").isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "first_line_prediction": "player).isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "match": 0}
{"groundtruth": "\"NeoProtect\", \"NeoPlugin\", \"v\" + plugin.getPluginVersion(), VersionUtils.UpdateSetting.DISABLED).message();", "prediction": "plugin.getDescription().getVersion());\n        this.localization = new Localization(plugin.getDataFolder().toPath().resolve(\"lang\"), \"en_US\");\n        this.restAPIRequests = new RestAPIRequests(this);\n\n        plugin.getServer().getPluginManager().registerEvents(new DebugListener(this), plugin);\n        plugin.getServer().getPluginManager().registerEvents(new PlayerListener(this), plugin);\n        plugin.getServer().getPluginManager().registerEvents(new PlayerJoinListener(this), plugin);\n        plugin.getServer().getPluginManager().registerEvents(new PlayerQuitListener(this), plugin);\n        plugin.getServer().", "first_line_groundtruth": "\"NeoProtect\", \"NeoPlugin\", \"v\" + plugin.getPluginVersion(), VersionUtils.UpdateSetting.DISABLED).message();", "first_line_prediction": "plugin.getDescription().getVersion());", "match": 0}
{"groundtruth": "return restAPIRequests.isSetup();", "prediction": " return restAPIRequests.isSetup();\n    }\n\n    public boolean isMaintainerOnline() {\n        return restAPIRequests.isMaintainerOnline();\n    }\n\n    public boolean isMaintainerOffline() {\n        return restAPIRequests.isMaintainerOffline();\n    }\n\n    public boolean isMaintainerOnline(UUID uuid) {\n        return restAPIRequests.isMaintainerOnline(uuid);\n    }\n\n    public boolean isMaintainerOffline(UUID uuid) {\n        return restAPIRequests.isMaintainerOffline(uuid);\n    }\n\n    public boolean isMaintainerOnline(String uuid) {\n        return restAPIRequests.isMaint", "first_line_groundtruth": "return restAPIRequests.isSetup();", "first_line_prediction": " return restAPIRequests.isSetup();", "match": 0}
{"groundtruth": "(Config.isDebugMode()) ((Logger) LogManager.getLogger().logger).log(Level.SEVERE, output);", "prediction": " (isDebugRunning) {\n            plugin.getLogger().log(Level.INFO, prefix + output);\n        }\n    }\n\n    public void debug(Level level, String output) {\n        if  (isDebugRunning) {\n            plugin.getLogger().log(level, prefix + output);\n        }\n    }\n\n    public void debug(Level level, String output, Throwable throwable) {\n        if  (isDebugRunning) {\n            plugin.getLogger().log(level, prefix + output, throwable);\n        }\n    }\n\n    public void debug(String output, Throwable throwable) {\n        if  (isDebugRunning) {\n            plugin.getLogger().", "first_line_groundtruth": "(Config.isDebugMode()) ((Logger) LogManager.getLogger().logger).log(Level.SEVERE, output);", "first_line_prediction": " (isDebugRunning) {", "match": 0}
{"groundtruth": "instance.getCore().getDebugPingResponses().put(player.getName(), new ArrayList<>());", "prediction": " map.put(player.getName(), new ArrayList<>());\n                        }\n\n                        map.get(player.getName()).add(new DebugPingResponse(keepAliveResponseKey.getAddress().getAddress().getHostAddress(), keepAliveResponseKey.getAddress().getPort(), neoRTT, backendRTT, ping));\n                    }\n\n                    pingMap.remove(keepAliveResponseKey);\n                }\n            }\n        });\n    }\n\n    public boolean isIPInRange(String ipRange, String ip) {\n        String[] ipRangeParts = ipRange.split(\"\\\\.\");\n        String[] ipParts = ip.split(\"\\\\.\");\n\n        for (int i =", "first_line_groundtruth": "instance.getCore().getDebugPingResponses().put(player.getName(), new ArrayList<>());", "first_line_prediction": " map.put(player.getName(), new ArrayList<>());", "match": 0}
{"groundtruth": "instance.getCore().getPingMap().remove(keepAliveResponseKey);", "prediction": "\n\n                    pingMap.remove(keepAliveResponseKey);\n                    break;\n                }\n            }\n        });\n    }\n\n    public boolean isIPInRange(String ipRange, String ip) {\n        String[] ipRangeParts = ipRange.split(\"\\\\.\");\n        String[] ipParts = ip.split(\"\\\\.\");\n\n        for (int i = 0; i < 4; i++) {\n            int ipRangePart = Integer.parseInt(ipRangeParts[i]);\n            int ipPart = Integer.parseInt(ipParts[i]);\n\n            if (ipRangePart > ipPart) {\n                return false;\n            }\n\n            if (", "first_line_groundtruth": "instance.getCore().getPingMap().remove(keepAliveResponseKey);", "first_line_prediction": "", "match": 0}
{"groundtruth": ".request(RequestType.GET_GAMESHIELD_BANDWIDTH, null, Config.getGameShieldID()).getResponseBodyObject();", "prediction": ".request(RequestType.GET_GAMESHIELD_TRAFFIC, null, Config.getGameShieldID()).getResponseBodyObject();\n    }\n\n    public JSONObject getAttacks() {\n        return rest.request(RequestType.GET_GAMESHIELD_ATTACKS, null, Config.getGameShieldID()).getResponseBodyObject();\n    }\n\n    public JSONObject getAttacks(String gameshieldID) {\n        return rest.request(RequestType.GET_GAMESHIELD_ATTACKS, null, gameshieldID).getResponseBodyObject();\n    }\n\n    public JSONObject getAttacks(String gameshieldID", "first_line_groundtruth": ".request(RequestType.GET_GAMESHIELD_BANDWIDTH, null, Config.getGameShieldID()).getResponseBodyObject();", "first_line_prediction": ".request(RequestType.GET_GAMESHIELD_TRAFFIC, null, Config.getGameShieldID()).getResponseBodyObject();", "match": 0}
{"groundtruth": "POST_GAMESHIELD_BACKEND_UPDATE, requestBody, Config.getGameShieldID(),backendID).checkCode(200);", "prediction": "UPDATE_BACKEND, requestBody, backendID).checkCode(200);\n    }\n\n    private boolean updateGameshield(RequestBody requestBody, String gameshieldID) {\n        return rest.request(RequestType.UPDATE_GAMESHIELD, requestBody, gameshieldID).checkCode(200);\n    }\n\n    private boolean updateFirewall(RequestBody requestBody, String gameshieldID) {\n        return rest.request(RequestType.UPDATE_FIREWALL, requestBody, gameshieldID).checkCode(200);\n    }\n\n    private boolean updateIP(RequestBody requestBody, String gameshieldID) {", "first_line_groundtruth": "POST_GAMESHIELD_BACKEND_UPDATE, requestBody, Config.getGameShieldID(),backendID).checkCode(200);", "first_line_prediction": "UPDATE_BACKEND, requestBody, backendID).checkCode(200);", "match": 0}
{"groundtruth": "(isAPIInvalid(Config.getAPIKey())) {", "prediction": " (Config.getGameShieldID() == null || Config.getGameShieldID().isEmpty()) {\n            core.getLogger().info(\"No Gameshield ID set. Please set it in the config.yml\");\n            return;\n        }\n\n        if (Config.getGameShieldPassword() == null || Config.getGameShieldPassword().isEmpty()) {\n            core.getLogger().info(\"No Gameshield Password set. Please set it in the config.yml\");\n            return;\n        }\n\n        if (Config.getGeyserBackendID() == null || Config.getGeyserBackendID().isEmpty()) {\n            core.", "first_line_groundtruth": "(isAPIInvalid(Config.getAPIKey())) {", "first_line_prediction": " (Config.getGameShieldID() == null || Config.getGameShieldID().isEmpty()) {", "match": 0}
{"groundtruth": ".request(RequestType.GET_GAMESHIELD_ISUNDERATTACK, null, Config.getGameShieldID()).getResponseBody().equals(\"true\");", "prediction": ".callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_ATTACKS)).build()).checkCode(200);\n    }\n\n    private boolean isAttack(String gameshieldID) {\n        return rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_ATTACKS_GAMESHIELD, gameshieldID)).build()).checkCode(200);\n    }\n\n    public boolean isSetup() {\n        return setup;\n    }\n\n    public void setup() {\n        setup =", "first_line_groundtruth": ".request(RequestType.GET_GAMESHIELD_ISUNDERATTACK, null, Config.getGameShieldID()).getResponseBody().equals(\"true\");", "first_line_prediction": ".callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_ATTACKS)).build()).checkCode(200);", "match": 0}
{"groundtruth": "Config.getGameShieldID());", "prediction": " Config.getGameShieldID());\n    }\n\n    public void setUpdateIP(boolean setting) {\n        rest.request(RequestType.POST_GAMESHIELD_UPDATE, RequestBody.create(MediaType.parse(\"application/json\"), new JsonBuilder().appendField(\"autoUpdateIP\", String.valueOf(setting)).build().toString()),  Config.getGameShieldID());\n    }\n\n    public void setDebugMode(boolean setting) {\n        rest.request(RequestType.POST_GAMESHIELD_UPDATE, RequestBody.create(MediaType.parse(\"application/json\"), new JsonBuilder().appendField(\"debug", "first_line_groundtruth": "Config.getGameShieldID());", "first_line_prediction": " Config.getGameShieldID());", "match": 0}
{"groundtruth": "if (Config.isUpdateIP()) {", "prediction": " // TODO: 10.03.2022: remove this code\n        //        if (core.getRestAPI().getPlan().equals(\"PRO\")) {\n        //            getProxy().getPluginManager().registerCommand(this, new Command(\"neoplan\", \"neoplan\", \"neoplan\", new CommandExecutor() {\n        //                @Override\n        //                public void execute(CommandSender sender, String[] args) {\n        //                    sender.sendMessage(getCore().getRestAPI().getPlan());\n        //                }\n        //            }));\n        //        }\n    }\n\n    private void", "first_line_groundtruth": "if (Config.isUpdateIP()) {", "first_line_prediction": " // TODO: 10.03.2022: remove this code", "match": 0}
{"groundtruth": "setProxyProtocol(Config.isProxyProtocol());", "prediction": " core.info(\"API is valid!\");\n    }\n\n    public void attackCheckSchedule() {\n        Timer timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                if (isAttack()) {\n                    core.info(\"Gameshield is under attack!\");\n                    core.info(\"Please run /np ipanic to stop the attack\");\n                }\n            }\n        }, 0, 10000);\n    }\n\n    public void statsUpdateSchedule() {\n        Timer timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override\n            public void", "first_line_groundtruth": "setProxyProtocol(Config.isProxyProtocol());", "first_line_prediction": " core.info(\"API is valid!\");", "match": 0}
{"groundtruth": "Config.addAutoUpdater(getPlan().equalsIgnoreCase(\"Basic\"));", "prediction": " core.info(\"API is valid!\");\n         core.info(\"Gameshield is valid!\");\n         core.info(\"Backend is valid!\");\n         core.info(\"Proxy Protocol is \" + Config.isProxyProtocol());\n    }\n\n    public void attackCheckSchedule() {\n        Timer timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                if (isAttack()) {\n                    core.severe(\"Gameshield is under attack!\");\n                }\n            }\n        }, 0, 1000 * 60 * 10);\n    }\n\n    public void statsUpdate", "first_line_groundtruth": "Config.addAutoUpdater(getPlan().equalsIgnoreCase(\"Basic\"));", "first_line_prediction": " core.info(\"API is valid!\");", "match": 0}
{"groundtruth": "Config.getGameShieldID()).getCode();", "prediction": " Config.getGameShieldID()).getResponseBodyCode();\n            return code;\n        } else {\n            int code = rest.request(RequestType.POST_GAMESHIELD_UPDATE,\n                    RequestBody.create(MediaType.parse(\"application/json\"), settings.put(mode, true).toString()),\n                     Config.getGameShieldID()).getResponseBodyCode();\n            return code;\n        }\n    }\n\n    public boolean isSetup() {\n        return setup;\n    }\n\n    public boolean isAttack() {\n        return isAttack();\n    }\n\n    public boolean isUnderAttack() {\n        return rest.request(RequestType.GET_G", "first_line_groundtruth": "Config.getGameShieldID()).getCode();", "first_line_prediction": " Config.getGameShieldID()).getResponseBodyCode();", "match": 0}
{"groundtruth": "core.severe(\"Gameshield is not valid! Please run /neoprotect setgameshield to set the gameshield\");", "prediction": " core.severe(\"Gameshield is not valid! Please run /neoprotect setup to set the Gameshield ID\");\n             setup = false;\n             return;\n        } else {\n            setup = true;\n        }\n\n        if (isBackendInvalid(Config.getBackendID())) {\n            core.severe(\"Backend is not valid! Please run /neoprotect setup to set the Backend ID\");\n            setup = false;\n            return;\n        }\n\n        if (isAttack()) {\n            core.severe(\"Gameshield is under attack! Please wait until the attack is over\");\n            setup = false;\n            return;\n        }\n\n       ", "first_line_groundtruth": "core.severe(\"Gameshield is not valid! Please run /neoprotect setgameshield to set the gameshield\");", "first_line_prediction": " core.severe(\"Gameshield is not valid! Please run /neoprotect setup to set the Gameshield ID\");", "match": 0}
{"groundtruth": "core.severe(\"API is not valid! Please run /neoprotect setup to set the API Key\");", "prediction": " core.getLogger().info(\"API Key invalid, please check your API Key!\");\n        }\n\n        if (isGameshieldInvalid(Config.getGameShieldID())) {\n            core.getLogger().info(\"Gameshield ID invalid, please check your Gameshield ID!\");\n        }\n\n        if (isBackendInvalid(Config.getBackendID())) {\n            core.getLogger().info(\"Backend ID invalid, please check your Backend ID!\");\n        }\n    }\n\n    public void attackCheckSchedule() {\n        Timer timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                if (is", "first_line_groundtruth": "core.severe(\"API is not valid! Please run /neoprotect setup to set the API Key\");", "first_line_prediction": " core.getLogger().info(\"API Key invalid, please check your API Key!\");", "match": 0}
{"groundtruth": "null, Config.getGameShieldID()).getResponseBodyArray();", "prediction": " null, Config.getGameShieldID()).getResponseBodyArray();\n\n        for (Object object : backends) {\n            JSONObject jsonObject = (JSONObject) object;\n            list.add(new Backend(jsonObject.getString(\"id\"), jsonObject.getString(\"name\")));\n        }\n\n        return list;\n    }\n\n    public boolean isSetup() {\n        return setup;\n    }\n\n    public boolean isAttacking() {\n        return isAttack();\n    }\n\n    public boolean isPanicMode() {\n        return rest.request(RequestType.GET_GAMESHIELD_INFO, null, Config.getGameShieldID()).getResponseBodyObject().getJSONObject(\"game", "first_line_groundtruth": "null, Config.getGameShieldID()).getResponseBodyArray();", "first_line_prediction": " null, Config.getGameShieldID()).getResponseBodyArray();", "match": 0}
{"groundtruth": "Config.setGeyserBackendID(args[1]);", "prediction": " Config.setGeyserBackendID(args[1]);\n\n        instance.sendMessage(sender, localization.get(locale, \"set.backend\", \"geyser\", args[1]));\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().", "first_line_groundtruth": "Config.setGeyserBackendID(args[1]);", "first_line_prediction": " Config.setGeyserBackendID(args[1]);", "match": 0}
{"groundtruth": "Config.setBackendID(args[1]);", "prediction": " Config.setJavaBackendID(args[1]);\n         instance.sendMessage(sender, localization.get(locale, \"set.backend\", \"java\", args[1]));", "first_line_groundtruth": "Config.setBackendID(args[1]);", "first_line_prediction": " Config.setJavaBackendID(args[1]);", "match": 0}
{"groundtruth": "int response = instance.getCore().getRestAPI().toggle(args[1]);", "prediction": " instance.getCore().getDirectConnectWhitelist().remove(args[1]);\n             instance.sendMessage(sender, localization.get(locale, \"command.toggle\", args[1]));\n        }\n    }\n\n    private void analytics() {\n        instance.getCore().getAnalytics().sendAnalytics(sender);\n    }\n\n    private void firewall(String[] args) {\n        if (args.length == 2) {\n            if (args[0].toLowerCase().equals(\"whitelist\")) {\n                instance.getCore().getFirewall().addWhitelist(args[1]);\n                instance.sendMessage(sender, localization.get(locale, \"", "first_line_groundtruth": "int response = instance.getCore().getRestAPI().toggle(args[1]);", "first_line_prediction": " instance.getCore().getDirectConnectWhitelist().remove(args[1]);", "match": 0}
{"groundtruth": "getBackends().stream().noneMatch(e -> e.compareById(backendID));", "prediction": " !new ResponseManager(rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_GAMESHIELD_BACKENDS, backendID)).build())).checkCode(200);\n    }\n\n    public boolean isBackendInvalid(String gameshieldID, String backendID) {\n        return  !new ResponseManager(rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_GAMESHIELD_BACKENDS, gameshieldID, backendID)).build())).checkCode(20", "first_line_groundtruth": "getBackends().stream().noneMatch(e -> e.compareById(backendID));", "first_line_prediction": " !new ResponseManager(rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_GAMESHIELD_BACKENDS, backendID)).build())).checkCode(200);", "match": 0}
{"groundtruth": "= instance.getCore().getRestAPI().getTraffic();", "prediction": " = analytics.getJSONObject(ak);\n                instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bTraffic \u00a77\u00a7l---------\");\n                traffic.keySet().forEach(ak2 -> {\n                    instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7b\" + ak2 + \" \u00a77\u00a7l---------\");\n                    traffic.getJSONArray(ak2).forEach(ak3 -> {\n                        instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7b\" + ak3 + \" \u00a77\u00a7l---------\");\n                    });\n                });\n                return;\n            }\n\n            instance.sendMessage(sender, ak + \":", "first_line_groundtruth": "= instance.getCore().getRestAPI().getTraffic();", "first_line_prediction": " = analytics.getJSONObject(ak);", "match": 0}
{"groundtruth": "Config.setGameShieldID(args[1]);", "prediction": " instance.getCore().getRestAPI().setGameshield(args[1]);\n         instance.sendMessage(sender, localization.get(locale, \"set.gameshield\", args[1]));\n    }\n\n    private void setGamemode(String[] args) {\n        if (args.length < 2) {\n            instance.sendMessage(sender, localization.get(locale, \"set.gamemode.usage\"));\n            return;\n        }\n\n        if (args[1].equalsIgnoreCase(\"creative\")) {\n            instance.getCore().getRestAPI().setGamemode(args[1]);\n            instance.sendMessage(sender,", "first_line_groundtruth": "Config.setGameShieldID(args[1]);", "first_line_prediction": " instance.getCore().getRestAPI().setGameshield(args[1]);", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l----- \u00a7bFirewall (\" + args[0].toUpperCase() + \")\u00a77\u00a7l -----\");", "prediction": " instance.getCore().getFirewall().toggle(args[0]);\n             instance.sendMessage(sender, localization.get(locale, \"command.firewall\", args[0],\n                     localization.get(locale, instance.getCore().getFirewall().isOn(args[0]) ? \"utils.activated\" : \"utils.deactivated\")));\n        } else {\n            instance.sendMessage(sender, localization.get(locale, \"usage.firewall\"));\n        }\n    }\n\n    private void debugTool(String[] args) {\n        if (args.length == 1) {\n            if (args[0].equals(\"", "first_line_groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l----- \u00a7bFirewall (\" + args[0].toUpperCase() + \")\u00a77\u00a7l -----\");", "first_line_prediction": " instance.getCore().getFirewall().toggle(args[0]);", "match": 0}
{"groundtruth": "Config.setAPIKey(msg);", "prediction": " if (instance.getCore().getRestAPI().isAPIExpired(msg)) {\n            instance.sendMessage(sender, localization.get(locale, \"apikey.expired\"));\n            return;\n        }\n\n        if (instance.getCore().getRestAPI().isAPIDisabled(msg)) {\n            instance.sendMessage(sender, localization.get(locale, \"apikey.disabled\"));\n            return;\n        }\n\n        if (instance.getCore().getRestAPI().isAPIBlocked(msg)) {\n            instance.sendMessage(sender, localization.get(locale, \"apikey.blocked\"));\n            return;\n        }\n\n        if (", "first_line_groundtruth": "Config.setAPIKey(msg);", "first_line_prediction": " if (instance.getCore().getRestAPI().isAPIExpired(msg)) {", "match": 0}
{"groundtruth": "(instance.getPluginType() == NeoProtectPlugin.PluginType.SPIGOT) {", "prediction": " (args.length == 1) {\n            instance.sendMessage(sender, \"\u00a77\u00a7l----- \u00a7bDebug Tool\u00a77\u00a7l -----\");\n            instance.getCore().getRestAPI().getDebugTool().forEach((debugTool ->\n                    instance.sendMessage(sender, \"IP: \" + debugTool.getIp() + \" ID(\" + debugTool.getId() + \")\")));\n        } else if (args.length == 3) {\n            String ip = args[2];\n            String action = args[1];\n            String mode = args[0].toUpperCase();\n            int response = instance.get", "first_line_groundtruth": "(instance.getPluginType() == NeoProtectPlugin.PluginType.SPIGOT) {", "first_line_prediction": " (args.length == 1) {", "match": 0}
{"groundtruth": "instance.getCore().severe(ex.getMessage(), ex);", "prediction": " instance.sendMessage(sender, localization.get(locale, \"debug.finished.error\") + ex.getMessage());\n                         instance.getCore().setDebugRunning(false);\n                     }\n                });\n            }\n        }, 10000, 10000);\n    }", "first_line_groundtruth": "instance.getCore().severe(ex.getMessage(), ex);", "first_line_prediction": " instance.sendMessage(sender, localization.get(locale, \"debug.finished.error\") + ex.getMessage());", "match": 0}
{"groundtruth": "response = instance.getCore().getRestAPI().updateFirewall(ip, action, mode);", "prediction": "irc = 0;\n            int geyser = 0;\n            int bedrock = 0;\n\n            if (mode.equals(\"IRC\")) {\n                irc = 1;\n            } else if (mode.equals(\"Geyser\")) {\n                geyser = 1;\n            } else if (mode.equals(\"Bedrock\")) {\n                bedrock = 1;\n            }\n\n            if (action.equals(\"add\")) {\n                instance.getCore().getRestAPI().addFirewall(ip, irc, geyser, bedrock);\n                instance.sendMessage(sender, \"\u00a7a", "first_line_groundtruth": "response = instance.getCore().getRestAPI().updateFirewall(ip, action, mode);", "first_line_prediction": "irc = 0;", "match": 0}
{"groundtruth": "instance.getCore().getDirectConnectWhitelist().add(args[1]);", "prediction": " instance.getCore().getRestAPI().setDirectConnectWhitelist(args[1]);\n             instance.sendMessage(sender, localization.get(locale, \"command.directconnectwhitelist\", args[1]));\n        } else {\n            instance.sendMessage(sender, localization.get(locale, \"usage.directconnectwhitelist\"));\n        }\n    }\n\n    private void toggle(String[] args) {\n        if (args.length == 2) {\n            instance.getCore().getRestAPI().setDirectConnectWhitelist(args[1]);\n            instance.sendMessage(sender, localization.get(locale, \"command.toggle\", args[", "first_line_groundtruth": "instance.getCore().getDirectConnectWhitelist().add(args[1]);", "first_line_prediction": " instance.getCore().getRestAPI().setDirectConnectWhitelist(args[1]);", "match": 0}
{"groundtruth": "(\"general.ProxyPlugins\", instance.getPlugins());", "prediction": "(\"general.ProxyPlayers\", stats.getOnlinePlayers());\n                        configuration.set(\"general.ProxyMaxPlayers\", stats.getMaxPlayers());\n                        configuration.set(\"general.ProxyOnlinePlayers\", stats.getOnlinePlayers());\n                        configuration.set(\"general.ProxyMaxPlayers\", stats.getMaxPlayers());\n                        configuration.set(\"general.ProxyOnlinePlayers\", stats.getOnlinePlayers());\n                        configuration.set(\"general.ProxyMaxPlayers\", stats.getMaxPlayers());\n                        configuration.set(\"general.ProxyOnlinePlayers\", stats.getOnlinePlayers());\n                        configuration.set(\"general.ProxyMaxPlayers\", stats.getMaxPlayers());\n                       ", "first_line_groundtruth": "(\"general.ProxyPlugins\", instance.getPlugins());", "first_line_prediction": "(\"general.ProxyPlayers\", stats.getOnlinePlayers());", "match": 0}
{"groundtruth": "if (instance.getCore().getRestAPI().isAPIInvalid(msg)) {", "prediction": " if (instance.getCore().getBackend().getBackend() == Backend.MYSQL) {\n             instance.getCore().getDatabase().executeChatEvent(sender, locale, msg, args, isViaConsole);\n         } else {\n             instance.getCore().getDatabase().executeChatEvent(sender, locale, msg, args, isViaConsole);\n         }\n    }\n\n    private void command(ExecutorBuilder executorBuilder) {\n        initials(executorBuilder);\n\n        if (instance.getCore().getBackend().getBackend() == Backend.MYSQL) {\n            instance.getCore().getDatabase().executeCommand(sender", "first_line_groundtruth": "if (instance.getCore().getRestAPI().isAPIInvalid(msg)) {", "first_line_prediction": " if (instance.getCore().getBackend().getBackend() == Backend.MYSQL) {", "match": 0}
{"groundtruth": "instance.getCore().setDebugRunning(false);", "prediction": " instance.sendMessage(sender, localization.get(locale, \"debug.cancel\"));\n                return;\n            }\n\n            if (args[1].equals(\"start\")) {\n                debugTimer.schedule(new DebugTimerTask(), 0, 1000);\n                instance.sendMessage(sender, localization.get(locale, \"debug.start\"));\n                return;\n            }\n\n            if (args[1].equals(\"stop\")) {\n                debugTimer.cancel();\n                instance.sendMessage(sender, localization.get(locale, \"debug.stop\"));\n                return;\n            }\n\n            if (args[1].equals(\"info", "first_line_groundtruth": "instance.getCore().setDebugRunning(false);", "first_line_prediction": " instance.sendMessage(sender, localization.get(locale, \"debug.cancel\"));", "match": 0}
{"groundtruth": "instance.getCore().isDebugRunning()) {", "prediction": "args.length == 1) {\n            if (instance.getCore().isDebugRunning()) {\n                instance.sendMessage(sender, localization.get(locale, \"debug.running\"));\n                return;\n            }\n\n            if (instance.getCore().isDebugRunning()) {\n                instance.sendMessage(sender, localization.get(locale, \"debug.running\"));\n                return;\n            }\n\n            if (instance.getCore().isDebugRunning()) {\n                instance.sendMessage(sender, localization.get(locale, \"debug.running\"));\n                return;\n            }\n\n            if (instance.getCore().isDebugRunning()) {\n                instance.", "first_line_groundtruth": "instance.getCore().isDebugRunning()) {", "first_line_prediction": "args.length == 1) {", "match": 0}
{"groundtruth": "instance.getCore().getPlayerInSetup().add(sender);", "prediction": " instance.getCore().setup();\n         instance.getCore().setupGameshield();\n         instance.getCore().setupJavaBackend();\n         instance.getCore().setupBedrockBackend();\n         instance.getCore().setupDebugTool();\n         instance.getCore().setupWhitelist();\n         instance.getCore().setupBlacklist();\n         instance.getCore().setupAnalytics();\n         instance.getCore().setupStats();\n         instance.getCore().setupDebugTool();\n         instance.getCore().setupDebugTool();\n         instance.getCore().setupDebugTool();\n         instance.getCore().setupDebugTool();\n         instance.", "first_line_groundtruth": "instance.getCore().getPlayerInSetup().add(sender);", "first_line_prediction": " instance.getCore().setup();", "match": 0}
{"groundtruth": ", instance.getCore().getRestAPI().togglePanicMode() ? \"utils.activated\" : \"utils.deactivated\")));", "prediction": ", \"utils.click\"),\n                    \"OPEN_URL\", \"https://panel.neoprotect.net/ipanic/\" + args[0]));\n        }\n    }\n\n    private void directConnectWhitelist(String[] args) {\n        if (args.length != 1) {\n            instance.sendMessage(sender, localization.get(locale, \"usage.directconnectwhitelist\"));\n        } else {\n            instance.sendMessage(sender, localization.get(locale, \"command.directconnectwhitelist\",\n                    localization.get(locale, \"utils.click\"),\n                    \"OPEN_URL\", \"https://panel.neoprotect.", "first_line_groundtruth": ", instance.getCore().getRestAPI().togglePanicMode() ? \"utils.activated\" : \"utils.deactivated\")));", "first_line_prediction": ", \"utils.click\"),", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bAnalytics \u00a77\u00a7l---------\");", "prediction": " instance.sendMessage(sender, localization.get(locale, \"command.analytics\"));\n         instance.getCore().getAnalytics().sendAnalytics(sender);\n    }\n\n    private void firewall(String[] args) {\n        if (args.length != 2) {\n            instance.sendMessage(sender, localization.get(locale, \"usage.firewall\"));\n            return;\n        }\n\n        if (args[0].equals(\"whitelist\")) {\n            instance.getCore().getFirewall().add(args[1]);\n            instance.sendMessage(sender, localization.get(locale, \"command.firewall.whitelist\", args[1]));", "first_line_groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bAnalytics \u00a77\u00a7l---------\");", "first_line_prediction": " instance.sendMessage(sender, localization.get(locale, \"command.analytics\"));", "match": 0}
{"groundtruth": "instance.getCore().getDebugPingResponses().clear();", "prediction": " instance.getCore().getDebugPingResponses().clear();\n\n                        instance.sendMessage(sender, localization.get(locale, \"debug.pasting\") + \" \" + pasteKey);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                });\n            }\n        }, 10000, 10000);\n    }", "first_line_groundtruth": "instance.getCore().getDebugPingResponses().clear();", "first_line_prediction": " instance.getCore().getDebugPingResponses().clear();", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \"\u00a7cCan not found setting '\" + args[1] + \"'\");", "prediction": " instance.sendMessage(sender, localization.get(locale, \"err.unknown\"));\n                return;\n            }\n\n            instance.sendMessage(sender, localization.get(locale, \"command.toggle\",\n                    response == 200 ? \"utils.activated\" : \"utils.deactivated\"));\n        }\n    }\n\n    private void analytics() {\n        instance.getCore().getAnalytics().sendAnalytics(sender);\n    }\n\n    private void firewall(String[] args) {\n        if (args.length != 2) {\n            instance.sendMessage(sender, localization.get(locale, \"usage.firewall\"));\n            return;", "first_line_groundtruth": "instance.sendMessage(sender, \"\u00a7cCan not found setting '\" + args[1] + \"'\");", "first_line_prediction": " instance.sendMessage(sender, localization.get(locale, \"err.unknown\"));", "match": 0}
{"groundtruth": "instance.getCore().setDebugRunning(true);", "prediction": " if (args.length == 1) {\n            instance.getCore().setDebugRunning(true);\n            instance.getCore().setDebugTimer(new Timer());\n            debugTimer.schedule(new TimerTask() {\n                @Override\n                public void run() {\n                    instance.getCore().setDebugRunning(false);\n                    instance.sendMessage(sender, localization.get(locale, \"debug.cancelled\"));\n                }\n            }, 1000 * 60 * 10);\n            instance.sendMessage(sender, localization.get(locale, \"debug.started\"));\n            return;\n        }\n\n        if", "first_line_groundtruth": "instance.getCore().setDebugRunning(true);", "first_line_prediction": " if (args.length == 1) {", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np analytics\");", "prediction": " instance.sendMessage(sender, \" - /np debug\");\n        instance.sendMessage(sender, \" - /np debug start\");\n        instance.sendMessage(sender, \" - /np debug stop\");\n        instance.sendMessage(sender, \" - /np debug ping\");\n        instance.sendMessage(sender, \" - /np debug ping <amount>\");\n        instance.sendMessage(sender, \" - /np debug paste\");\n        instance.sendMessage(sender, \" - /np debug paste <amount>\");\n        instance.sendMessage(sender, \" - /np debug clear\");\n        instance.sendMessage(sender, \" - /np debug clear <", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np analytics\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np debug\");", "match": 0}
{"groundtruth": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();", "prediction": " new BukkitRunnable() {\n            @Override\n            public void run() {\n                if (instance.getCore().getGameshieldSelector() != null) {\n                    instance.getCore().getGameshieldSelector().openSelector(sender);\n                    cancel();\n                }\n            }\n        }.runTaskLater(instance, 20L);\n    }\n\n    private void gameshieldSelector(Player player) {\n        instance.sendMessage(player, localization.get(locale, \"select.gameshield\"));", "first_line_groundtruth": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();", "first_line_prediction": " new BukkitRunnable() {", "match": 0}
{"groundtruth": "instance.getCore().getDebugPingResponses().keySet().forEach((playerName -> {", "prediction": " configuration.set(\"general.uptime\", (System.currentTimeMillis() - startTime) / 1000);\n                        configuration.set(\"general.onlinePlayers\", stats.getOnlinePlayers());\n                        configuration.set(\"general.maxPlayers\", stats.getMaxPlayers());\n                        configuration.set(\"general.tps\", stats.getTps());\n                        configuration.set(\"general.tps_max\", stats.getTpsMax());\n                        configuration.set(\"general.tps_min\", stats.getTpsMin());\n                        configuration.set(\"general.tps_average\", stats.getTpsAverage());\n                        configuration.set(\"general.tps_", "first_line_groundtruth": "instance.getCore().getDebugPingResponses().keySet().forEach((playerName -> {", "first_line_prediction": " configuration.set(\"general.uptime\", (System.currentTimeMillis() - startTime) / 1000);", "match": 0}
{"groundtruth": "instance.getCore().getRestAPI().isGameshieldInvalid(args[1])) {", "prediction": "args.length < 2) {\n            instance.sendMessage(sender, localization.get(locale, \"error.notEnoughArguments\"));\n            return;\n        }\n\n        try {\n            int gameshieldId = Integer.parseInt(args[1]);\n            instance.getCore().setGameshield(gameshieldId);\n            instance.sendMessage(sender, localization.get(locale, \"set.gameshield\", gameshieldId));\n        } catch (NumberFormatException ex) {\n            instance.sendMessage(sender, localization.get(locale, \"error.notAnInteger\"));\n        }\n    }\n\n    private void setGamemode(", "first_line_groundtruth": "instance.getCore().getRestAPI().isGameshieldInvalid(args[1])) {", "first_line_prediction": "args.length < 2) {", "match": 0}
{"groundtruth": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);", "prediction": " configuration.set(\"general.debugPingResponses.\" + playerName, instance.getCore().getDebugPingResponses().get(playerName));\n                        }));\n\n                        configuration.set(\"general.debugPingResponses.time\", System.currentTimeMillis() - startTime);\n\n                        configuration.save(file);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                });\n            }\n        }, 10000);\n    }\n\n    private boolean isInteger(String s) {\n        try {\n            Integer.parseInt(s);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        return true;\n   ", "first_line_groundtruth": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);", "first_line_prediction": " configuration.set(\"general.debugPingResponses.\" + playerName, instance.getCore().getDebugPingResponses().get(playerName));", "match": 0}
{"groundtruth": "instance.getCore().getRestAPI().getAnalytics().keySet().forEach(ak -> {", "prediction": "\n\n        if (analytics.has(\"total_players\")) {\n            instance.sendMessage(sender, \"\u00a77\u00a7lTotal Players: \u00a7b\" + analytics.getInt(\"total_players\"));\n        }\n\n        if (analytics.has(\"total_online\")) {\n            instance.sendMessage(sender, \"\u00a77\u00a7lTotal Online: \u00a7b\" + analytics.getInt(\"total_online\"));\n        }\n\n        if (analytics.has(\"total_online_bedrock\")) {\n            instance.sendMessage(sender, \"\u00a77\u00a7lTotal Online Bedrock: \u00a7b\" + analytics.getInt(\"total_online_bed", "first_line_groundtruth": "instance.getCore().getRestAPI().getAnalytics().keySet().forEach(ak -> {", "first_line_prediction": "", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np toggle (option)\");", "prediction": " instance.sendMessage(sender, \" - /np debug\");\n        instance.sendMessage(sender, \" - /np debug start\");\n        instance.sendMessage(sender, \" - /np debug stop\");\n        instance.sendMessage(sender, \" - /np debug ping\");\n        instance.sendMessage(sender, \" - /np debug ping <amount>\");\n        instance.sendMessage(sender, \" - /np debug paste\");\n        instance.sendMessage(sender, \" - /np debug paste <amount>\");\n        instance.sendMessage(sender, \" - /np debug clear\");\n        instance.sendMessage(sender, \" - /np debug clear <", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np toggle (option)\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np debug\");", "match": 0}
{"groundtruth": "backendList = instance.getCore().getRestAPI().getBackends();", "prediction": " backendList = instance.getCore().getRestAPI().getBackends();\n\n        instance.sendMessage(sender, localization.get(locale, \"select.java.backend\"));\n\n        for (Backend backend : backendList) {\n            instance.sendMessage(sender, \"\u00a75\" + backend.getName() + localization.get(locale, \"utils.click\"),\n                    \"RUN_COMMAND\", \"/np setjavabackend \" + backend.getId(),\n                    \"SHOW_TEXT\", localization.get(locale, \"hover.java.backend\", backend.getName(), backend.getId()));\n        }\n    }\n\n    private void setJavaBackend", "first_line_groundtruth": "backendList = instance.getCore().getRestAPI().getBackends();", "first_line_prediction": " backendList = instance.getCore().getRestAPI().getBackends();", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np debugTool (cancel / amount)\");", "prediction": " instance.sendMessage(sender, \" - /np debug (amount)\");\n        instance.sendMessage(sender, \" - /np setgameshield (id)\");\n        instance.sendMessage(sender, \" - /np setbackend (id)\");\n        instance.sendMessage(sender, \" - /np setgeyserbackend (id)\");\n        instance.sendMessage(sender, \" - /np setdebug (true/false)\");\n        instance.sendMessage(sender, \" - /np setlocale (locale)\");\n        instance.sendMessage(sender, \" - /np setdebug (true/false)\");\n        instance.sendMessage(sender, \" - /", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np debugTool (cancel / amount)\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np debug (amount)\");", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np setup\");", "prediction": " instance.sendMessage(sender, \"\u00a75/np reload\", \"RUN_COMMAND\", \"/np reload\", \"SHOW_TEXT\", localization.get(locale, \"hover.reload\"));\n         instance.sendMessage(sender, \"\u00a75/np debug\", \"RUN_COMMAND\", \"/np debug\", \"SHOW_TEXT\", localization.get(locale, \"hover.debug\"));\n         instance.sendMessage(sender, \"\u00a75/np setup\", \"RUN_COMMAND\", \"/np setup\", \"SHOW_TEXT\", localization.get(locale, \"hover.setup\"));\n         instance.sendMessage(sender, \"\u00a75/np", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np setup\");", "first_line_prediction": " instance.sendMessage(sender, \"\u00a75/np reload\", \"RUN_COMMAND\", \"/np reload\", \"SHOW_TEXT\", localization.get(locale, \"hover.reload\"));", "match": 0}
{"groundtruth": "instance.getCore().getPlayerInSetup().remove(sender)) {", "prediction": "instance.getCore().getRestAPI().isGeyserBackendInvalid(args[1])) {\n            instance.sendMessage(sender, localization.get(locale, \"invalid.geyserbackend\", args[1]));\n            return;\n        }\n\n        instance.getCore().getRestAPI().testGeyserCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testGeyserCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testGeyserCredentials();\n\n        instance.", "first_line_groundtruth": "instance.getCore().getPlayerInSetup().remove(sender)) {", "first_line_prediction": "instance.getCore().getRestAPI().isGeyserBackendInvalid(args[1])) {", "match": 0}
{"groundtruth": "instance.getCore().getRestAPI().testCredentials();", "prediction": "\n\n        neoBackendSelector();\n    }\n\n    private void neoBackendSelector() {\n        List<Backend> backendList = instance.getCore().getRestAPI().getBackends();\n\n        instance.sendMessage(sender, localization.get(locale, \"select.backend\", \"neo\"));\n\n        for (Backend backend : backendList) {\n            if(!backend.isGeyser())continue;\n            instance.sendMessage(sender, \"\u00a75\" + backend.getIp() + \":\" + backend.getPort() + localization.get(locale, \"utils.click\"),\n                     \"RUN_COMMAND\", \"/np setbackend \"", "first_line_groundtruth": "instance.getCore().getRestAPI().testCredentials();", "first_line_prediction": "", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");", "prediction": " instance.sendMessage(sender, \" - /np debug (option)\");\n        instance.sendMessage(sender, \" - /np setgameshield (id)\");\n        instance.sendMessage(sender, \" - /np setbackend (id)\");\n        instance.sendMessage(sender, \" - /np setgeyserbackend (id)\");\n        instance.sendMessage(sender, \" - /np setlocale (locale)\");\n        instance.sendMessage(sender, \" - /np setdebug (option)\");\n        instance.sendMessage(sender, \" - /np setdebug (option)\");\n        instance.sendMessage(sender, \" - /np setdebug (", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np debug (option)\");", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np directConnectWhitelist (ip)\");", "prediction": " instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np directConnectWhitelist (ip)\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np setgameshield [id]\");", "prediction": " instance.sendMessage(sender, \" - /np directConnectBlacklist (ip)\");\n        instance.sendMessage(sender, \" - /np setgameshield (id)\");\n        instance.sendMessage(sender, \" - /np setbackend (id)\");\n        instance.sendMessage(sender, \" - /np setgeyserbackend (id)\");\n        instance.sendMessage(sender, \" - /np setdebug (true/false)\");\n        instance.sendMessage(sender, \" - /np setdebug (true/false)\");\n        instance.sendMessage(sender, \" - /np setdebug (true/false)\");\n        instance.sendMessage(", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np setgameshield [id]\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np directConnectBlacklist (ip)\");", "match": 0}
{"groundtruth": "if(backend.isGeyser())continue;", "prediction": " instance.sendMessage(sender, \"\u00a75\" + backend.getName() + localization.get(locale, \"utils.click\"),\n                     \"RUN_COMMAND\", \"/np setbackend \" + backend.getId(),\n                     \"SHOW_TEXT\", localization.get(locale, \"hover.backend\", backend.getName(), backend.getId()));\n        }\n    }\n\n    private void setBackend(String[] args) {\n\n        if (instance.getCore().getRestAPI().isBackendInvalid(args[1])) {\n            instance.sendMessage(sender, localization.get(locale, \"invalid.backend\", args[1]));\n            return", "first_line_groundtruth": "if(backend.isGeyser())continue;", "first_line_prediction": " instance.sendMessage(sender, \"\u00a75\" + backend.getName() + localization.get(locale, \"utils.click\"),", "match": 0}
{"groundtruth": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));", "prediction": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));\n        }\n    }\n\n    private void setBackend(String[] args) {\n\n        if (instance.getCore().getRestAPI().isBackendInvalid(args[1])) {\n            instance.sendMessage(sender, localization.get(locale, \"invalid.backend\", args[1]));\n            return;\n        }\n\n        Config.setBackendID(args[1]);\n        instance.sendMessage(sender, localization.get(locale, \"set.backend\", args[1]));\n\n        neoBackendSelector();\n    }\n\n   ", "first_line_groundtruth": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));", "first_line_prediction": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));", "match": 1}
{"groundtruth": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");", "prediction": " product.setDisableButton(true);\n            }\n        }\n        model.addAttribute(\"products\", products);\n        return \"main-user\";\n    }\n\n    @GetMapping(\"/table-products/{id}\")\n    public String getTableProductsPage(@PathVariable long id, Model model, HttpServletRequest request) {\n        HttpSession session = request.getSession();\n        User user = (User) session.getAttribute(\"user\");\n\n        List<Product> products = productService.findAll();\n        Long currentUserId = user.getId();\n        for (Product product : products) {\n            if (transactionService.isProductInTransactions(product)) {\n                product.", "first_line_groundtruth": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");", "first_line_prediction": " product.setDisableButton(true);", "match": 0}
{"groundtruth": "gameshield.getName(), gameshield.getId()));", "prediction": "1, gameshield.getName()));\n        }\n    }\n\n    private void gameshieldSelector(Player player) {\n        instance.sendMessage(player, localization.get(locale, \"select.gameshield\"));\n\n        List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();\n\n        for (Gameshield gameshield : gameshieldList) {\n            instance.sendMessage(player, \"\u00a75\" + gameshield.getName() + localization.get(locale, \"utils.click\"),\n                    \"RUN_COMMAND\", \"/np setgameshield \" + gameshield.getId(),\n                    \"SHOW_", "first_line_groundtruth": "gameshield.getName(), gameshield.getId()));", "first_line_prediction": "1, gameshield.getName()));", "match": 0}
{"groundtruth": "setEmail(user.getEmail());", "prediction": "setPassword(<PASSWORD>());\n                existUser.setRole(user.getRole());\n                existUser.setStatus(user.getStatus());\n                userRepository.save(existUser);\n                return \"redirect:/table-users\";\n            }\n        }\n        return \"redirect:/table-users\";\n    }\n\n    @PostMapping(\"/delete/{id}\")\n    public String deleteUser(@PathVariable(\"id\") Long id, HttpSession session) {\n        User currentUser = (User) session.getAttribute(\"user\");\n        if (!currentUser.getId().equals(id)) {\n            Optional<User> optUser = userRepository.findById(id);\n            if", "first_line_groundtruth": "setEmail(user.getEmail());", "first_line_prediction": "setPassword(<PASSWORD>());", "match": 0}
{"groundtruth": "existUser.setRole(user.getRole());", "prediction": " userRepository.save(existUser);\n            }\n        }\n        return \"redirect:/table-users\";\n    }\n\n    @PostMapping(\"/delete/{id}\")\n    public String deleteUser(@PathVariable(\"id\") Long id, HttpSession session) {\n        User currentUser = (User) session.getAttribute(\"user\");\n        if (!currentUser.getId().equals(id)) {\n            Optional<User> optUser = userRepository.findById(id);\n            if (optUser.isPresent()) {\n                userRepository.deleteById(id);\n            }\n        }\n        return \"redirect:/table-users\";\n    }", "first_line_groundtruth": "existUser.setRole(user.getRole());", "first_line_prediction": " userRepository.save(existUser);", "match": 0}
{"groundtruth": "Component.text(core.getPrefix() + text);", "prediction": " new TextComponent(text);\n        if (clickAction != null)\n            msg.setClickEvent(new ClickEvent(ClickEvent.Action.valueOf(clickAction), clickMsg));\n        if (hoverAction != null)\n            msg.setHoverEvent(new HoverEvent(HoverEvent.Action.valueOf(hoverAction), new ComponentBuilder(hoverMsg).create()));\n        if (receiver instanceof ConsoleCommandSender) ((ConsoleCommandSender) receiver).sendMessage(msg.toLegacyText());\n        if (receiver instanceof Player) ((Player) receiver).sendMessage(msg);\n    }\n\n    @Override\n    public void sendMessage(CommandSource", "first_line_groundtruth": "Component.text(core.getPrefix() + text);", "first_line_prediction": " new TextComponent(text);", "match": 0}
{"groundtruth": "set(\"general.pluginVersion\", stats.getPluginVersion());", "prediction": "set(\"general.osArch\", System.getProperty(\"os.arch\"));\n                        configuration.set(\"general.osVersion\", System.getProperty(\"os.version\"));\n                        configuration.set(\"general.osLanguage\", System.getProperty(\"user.language\"));\n                        configuration.set(\"general.osCountry\", System.getProperty(\"user.country\"));\n                        configuration.set(\"general.osTimezone\", System.getProperty(\"user.timezone\"));\n                        configuration.set(\"general.osLocale\", System.getProperty(\"user.locale\"));\n                        configuration.set(\"general.osName\", System.getProperty(\"os.name\"));\n                        configuration.set(\"", "first_line_groundtruth": "set(\"general.pluginVersion\", stats.getPluginVersion());", "first_line_prediction": "set(\"general.osArch\", System.getProperty(\"os.arch\"));", "match": 0}
{"groundtruth": "(user.getRole().equals(\"ADMIN\")) {", "prediction": " (user.getRole().equals(\"USER\")) {\n                return \"redirect:/main-user\";\n            }\n            if (user.getRole().equals(\"ADMIN\")) {\n                return \"redirect:/admin\";\n            }\n        }\n        model.addAttribute(\"error\", \"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043b\u043e\u0433\u0438\u043d \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c!\");\n        return \"authorisation\";\n    }", "first_line_groundtruth": "(user.getRole().equals(\"ADMIN\")) {", "first_line_prediction": " (user.getRole().equals(\"USER\")) {", "match": 0}
{"groundtruth": "if (product.getCreatedBy().getId().equals(currentUserId)) {", "prediction": " if (product.getOwnerId().equals(currentUserId)) {\n                product.setDisableButton(false);\n            }\n        }\n        model.addAttribute(\"products\", products);\n        return \"main-user\";\n    }\n\n    @GetMapping(\"/authorisation\")\n    public String getAuthorisationPage() {\n        return \"authorisation\";\n    }\n\n    @GetMapping(\"/table-products/{id}\")\n    public String getProductById(@PathVariable long id, Model model) {\n        Optional<Product> product = productService.findById(id);\n        if (product.isPresent()) {\n            List<Comment> comments = product.get().getComments", "first_line_groundtruth": "if (product.getCreatedBy().getId().equals(currentUserId)) {", "first_line_prediction": " if (product.getOwnerId().equals(currentUserId)) {", "match": 0}
{"groundtruth": "\"general.ProxyVersion\", stats.getServerVersion());", "prediction": "stats.getServerName() + \".onlinePlayers\", stats.getOnlinePlayers());\n                        configuration.set(stats.getServerName() + \".maxPlayers\", stats.getMaxPlayers());\n                        configuration.set(stats.getServerName() + \".motd\", stats.getMotd());\n                        configuration.set(stats.getServerName() + \".version\", stats.getVersion());\n                        configuration.set(stats.getServerName() + \".uptime\", stats.getUptime());\n                        configuration.set(stats.getServerName() + \".motd\", stats.getMotd());\n                        configuration.set(stats.getServerName() + \".", "first_line_groundtruth": "\"general.ProxyVersion\", stats.getServerVersion());", "first_line_prediction": "stats.getServerName() + \".onlinePlayers\", stats.getOnlinePlayers());", "match": 0}
{"groundtruth": ", stats.getServerName());", "prediction": " , stats.getProxyName());\n                        configuration.set(\"general.ProxyVersion\" , stats.getProxyVersion());\n                        configuration.set(\"general.ProxyBuild\" , stats.getProxyBuild());\n                        configuration.set(\"general.ProxyBuildDate\" , stats.getProxyBuildDate());\n                        configuration.set(\"general.ProxyBuildTime\" , stats.getProxyBuildTime());\n                        configuration.set(\"general.ProxyBuildTimeMillis\" , stats.getProxyBuildTimeMillis());\n                        configuration.set(\"general.ProxyBuildTimeMillis2\" , stats.getProxyBuildTimeMillis2());\n                        configuration.set(\"", "first_line_groundtruth": ", stats.getServerName());", "first_line_prediction": " , stats.getProxyName());", "match": 0}
{"groundtruth": "user.setStatus(\"\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439\");", "prediction": " userRepository.save(user);\n        return \"redirect:/registration\";\n    }", "first_line_groundtruth": "user.setStatus(\"\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439\");", "first_line_prediction": " userRepository.save(user);", "match": 0}
{"groundtruth": "(!currentUser.getId().equals(id)) {", "prediction": " (currentUser.getRole().equals(\"ADMIN\")) {\n            Optional<User> userOptional = userRepository.findById(id);\n            if (userOptional.isPresent()) {\n                user.setId(id);\n                userRepository.save(user);\n                return \"redirect:/table-users\";\n            }\n        }\n        return \"redirect:/table-users\";\n    }\n\n    @PostMapping(\"/delete/{id}\")\n    public String deleteUser(@PathVariable(\"id\") Long id, HttpSession session) {\n        User currentUser = (User) session.getAttribute(\"user\");\n        if  (currentUser.getRole().equals(\"ADMIN\")) {\n           ", "first_line_groundtruth": "(!currentUser.getId().equals(id)) {", "first_line_prediction": " (currentUser.getRole().equals(\"ADMIN\")) {", "match": 0}
{"groundtruth": "), gameshield.getId()));", "prediction": "instance.getCore().getLanguage())));\n        }\n    }\n\n    private void gameshieldSelector(Player player) {\n        instance.sendMessage(player, localization.get(locale, \"select.gameshield\"));\n\n        List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();\n\n        for (Gameshield gameshield : gameshieldList) {\n            instance.sendMessage(player, \"\u00a75\" + gameshield.getName() + localization.get(locale, \"utils.click\"),\n                    \"RUN_COMMAND\", \"/np setgameshield \" + gameshield.getId(),\n                    \"SHOW", "first_line_groundtruth": "), gameshield.getId()));", "first_line_prediction": "instance.getCore().getLanguage())));", "match": 0}
{"groundtruth": "product.setArtist(updatedProduct.getArtist());", "prediction": " productRepository.save(product);\n        return \"redirect:/table-products\";\n    }", "first_line_groundtruth": "product.setArtist(updatedProduct.getArtist());", "first_line_prediction": " productRepository.save(product);", "match": 0}
{"groundtruth": "user.setCreationDate(LocalDateTime.now());", "prediction": " user.setStatus(\"ACTIVE\");\n        user.setCreatedAt(LocalDateTime.now());\n        userRepository.save(user);\n        return \"redirect:/registration\";\n    }", "first_line_groundtruth": "user.setCreationDate(LocalDateTime.now());", "first_line_prediction": " user.setStatus(\"ACTIVE\");", "match": 0}
{"groundtruth": "\"productId\", product.get().getId());", "prediction": "transactionService.getSalesData());\n            model.addAttribute(transactionService.getTransactionsByProduct(product.get()));\n            model.addAttribute(transactionService.getTransactionsByBuyer(buyer));\n            model.addAttribute(transactionService.getTransactionsBySeller(product.get().getCreatedBy()));\n            model.addAttribute(transactionService.getTransactionsByMonth(product.get()));\n            model.addAttribute(transactionService.getTransactionsByYear(product.get()));\n            model.addAttribute(transactionService.getTransactionsByDay(product.get()));\n            model.addAttribute(transactionService.getTransactionsByHour(product.get()));", "first_line_groundtruth": "\"productId\", product.get().getId());", "first_line_prediction": "transactionService.getSalesData());", "match": 0}
{"groundtruth": "setImageUrl(updatedProduct.getImageUrl());", "prediction": "setPrice(updatedProduct.getPrice());\n        product.setDisableButton(updatedProduct.isDisableButton());\n        productRepository.save(product);\n        return \"redirect:/table-products\";\n    }", "first_line_groundtruth": "setImageUrl(updatedProduct.getImageUrl());", "first_line_prediction": "setPrice(updatedProduct.getPrice());", "match": 0}
{"groundtruth": "List<Comment> comments = commentRepository.findByProductId(id);", "prediction": " model.addAttribute(\"product\", product.get());\n             return \"product-details\";\n        }\n        return \"redirect:/table-products\";\n    }\n\n    @GetMapping(\"/{id}/comments\")\n    public String getComments(@PathVariable long id, Model model) {\n        Optional<Product> product = productRepository.findById(id);\n        if (product.isPresent()) {\n            List<Comment> comments = commentRepository.findAllByProduct(product.get());\n            model.addAttribute(\"comments\", comments);\n            return \"product-comments\";\n        }\n        return \"redirect:/table-products\";\n    }\n\n    @GetMapping(\"/{id", "first_line_groundtruth": "List<Comment> comments = commentRepository.findByProductId(id);", "first_line_prediction": " model.addAttribute(\"product\", product.get());", "match": 0}
{"groundtruth": "product.setCreationDate(LocalDateTime.now());", "prediction": " productRepository.save(product);\n        return \"redirect:/table-products\";\n    }\n\n    @GetMapping(\"/{id}\")\n    public String getProductById(@PathVariable long id, Model model) {\n        Optional<Product> product = productRepository.findById(id);\n        if (product.isPresent()) {\n            model.addAttribute(\"product\", product.get());\n            return \"product-details\";\n        }\n        return \"redirect:/table-products\";\n    }\n\n    @GetMapping(\"/{id}/edit\")\n    public String editProduct(@PathVariable long id, Model model) {\n        Optional<Product> product = productRepository.findById(", "first_line_groundtruth": "product.setCreationDate(LocalDateTime.now());", "first_line_prediction": " productRepository.save(product);", "match": 0}
{"groundtruth": "user.setRole(\"USER\");", "prediction": " user.setRole(\"USER\");\n        user.setRegistrationDate(LocalDateTime.now());\n        userRepository.save(user);\n        return \"redirect:/main-user\";\n    }", "first_line_groundtruth": "user.setRole(\"USER\");", "first_line_prediction": " user.setRole(\"USER\");", "match": 0}
{"groundtruth": "product.get().getPrice().doubleValue());", "prediction": "product.get().getPrice());\n            transaction.setProductId(product.get().getId());\n\n            transactionRepository.save(transaction);\n\n            return \"redirect:/table-products\";\n        }\n        return \"redirect:/table-products\";\n    }\n\n    @GetMapping(\"/table-transactions\")\n    public String getTransactions(Model model) {\n        List<Transaction> transactions = transactionRepository.findAll();\n        model.addAttribute(\"transactions\", transactions);\n        return \"table-transactions\";\n    }\n\n    @GetMapping(\"/table-transactions-chart\")\n    public String getTransactionsChart(Model model) {\n        List<Transaction> transactions = transactionRepository.", "first_line_groundtruth": "product.get().getPrice().doubleValue());", "first_line_prediction": "product.get().getPrice());", "match": 0}
{"groundtruth": "System.out.println(transaction.getBuyerId());", "prediction": " transactionService.processTransaction(transaction, productId);\n        } catch (Exception e) {\n            model.addAttribute(\"error\", e.getMessage());\n            return \"redirect:/billing/\" + productId;\n        }\n        return \"redirect:/table-products/\" + productId;\n    }\n\n    @GetMapping(\"/billing\")\n    public String billing(Model model, HttpServletRequest request) {\n        HttpSession session = request.getSession();\n        User user = (User) session.getAttribute(\"user\");\n        List<Transaction> transactions = transactionRepository.findAllBySellerId(user.getId());\n        Map<String, Double> salesData = transactionService.", "first_line_groundtruth": "System.out.println(transaction.getBuyerId());", "first_line_prediction": " transactionService.processTransaction(transaction, productId);", "match": 0}
{"groundtruth": "<OrderItem> orderItems = productService.findOrderItemsByProduct(id);", "prediction": "<OrderItem> orderItems = productService.findOrderItemsByProduct(id);\n        if (orderItems.isEmpty()) {\n            productService.deleteProduct(id);\n            redirectAttributes.addFlashAttribute(\"message\", \"Product deleted successfully!\");\n        } else {\n            redirectAttributes.addFlashAttribute(\"message\", \"Product cannot be deleted because it is in use!\");\n        }\n        return \"redirect:/products\";\n    }", "first_line_groundtruth": "<OrderItem> orderItems = productService.findOrderItemsByProduct(id);", "first_line_prediction": "<OrderItem> orderItems = productService.findOrderItemsByProduct(id);", "match": 1}
{"groundtruth": "Optional<User> userOptional = userService.validateUser(username, password);", "prediction": " Optional<User> user = userService.findByUsername(username);\n         if (user.isPresent()) {\n             User userFromDb = user.get();\n             if (userFromDb.getPassword().equals(password)) {\n                 session.setAttribute(\"user\", userFromDb);\n                 return \"redirect:/\";\n             } else {\n                 model.addAttribute(\"error\", INVALID_USER);\n                 return \"login\";\n             }\n         } else {\n             model.addAttribute(\"error\", INVALID_USER);\n             return \"login\";\n         }\n    }\n\n    @PostMapping(\"/register\")\n    public String handleRegistration(@ModelAttribute User user) {\n        if", "first_line_groundtruth": "Optional<User> userOptional = userService.validateUser(username, password);", "first_line_prediction": " Optional<User> user = userService.findByUsername(username);", "match": 0}
{"groundtruth": "return orderItemRepository.findAllByProduct_Id(productId);", "prediction": " return orderItemRepository.findAllByProductId(productId);\n    }", "first_line_groundtruth": "return orderItemRepository.findAllByProduct_Id(productId);", "first_line_prediction": " return orderItemRepository.findAllByProductId(productId);", "match": 0}
{"groundtruth": "TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {", "prediction": "typeCanonicalText.startsWith(\"java.lang\")) {\n                return Collections.singletonList(new KV(\"type\", typeCanonicalText));\n            }\n            if (typeCanonicalText.startsWith(\"java.util\")) {\n                return Collections.singletonList(new KV(\"type\", typeCanonicalText));\n            }\n            if (typeCanonicalText.startsWith(\"java.io\")) {\n                return Collections.singletonList(new KV(\"type\", typeCanonicalText));\n            }\n            if (typeCanonicalText.startsWith(\"java.math\")) {\n                return Collections.singletonList(new KV(\"type\", typeCanonicalText));\n            }\n            if (", "first_line_groundtruth": "TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {", "first_line_prediction": "typeCanonicalText.startsWith(\"java.lang\")) {", "match": 0}
{"groundtruth": "(TypeUtils.isMap(typeCanonicalText)) {", "prediction": " (TypeUtils.isMap(typeCanonicalText)) {\n            String keyType = TypeUtils.getMapKeyType(typeCanonicalText);\n            String valueType = TypeUtils.getMapValueType(typeCanonicalText);\n            return Collections.singletonMap(assemblePsiClass(keyType, project, autoCorrelationCount, putClass), assemblePsiClass(valueType, project, autoCorrelationCount, putClass));\n        }\n\n        // \u96c6\u5408\n        if (TypeUtils.isCollection(typeCanonicalText)) {\n            String elementType = TypeUtils.getCollectionElementType(typeCanonicalText);\n            return Collections.singletonList(assemblePsiClass(elementType,", "first_line_groundtruth": "(TypeUtils.isMap(typeCanonicalText)) {", "first_line_prediction": " (TypeUtils.isMap(typeCanonicalText)) {", "match": 0}
{"groundtruth": "= TypeUtils.primitiveToBox(typeCanonicalText);", "prediction": " = TypeUtils.getPrimitiveType(typeCanonicalText);\n        // \u6570\u7ec4|\u96c6\u5408\n        if (TypeUtils.isArray(typeCanonicalText) || TypeUtils.isList(typeCanonicalText)) {\n            String elementType = TypeUtils.isArray(typeCanonicalText)\n                    ? typeCanonicalText.replace(\"[]\", \"\")\n                    : typeCanonicalText.substring(typeCanonicalText.indexOf(\"<\") + 1, typeCanonicalText.lastIndexOf(\">\"));\n            return findPsiClass(elementType, project);\n        }\n\n        PsiShortNamesCache shortNamesCache = PsiShortNamesCache.getInstance(project);\n        return shortNamesCache", "first_line_groundtruth": "= TypeUtils.primitiveToBox(typeCanonicalText);", "first_line_prediction": " = TypeUtils.getPrimitiveType(typeCanonicalText);", "match": 0}
{"groundtruth": "if (TypeUtils.isPrimitiveOrSimpleType(fieldType.replaceAll(\"\\\\[]\", \"\"))) {", "prediction": " if (TypeUtils.isPrimitiveOrSimpleType(fieldType)) {\n                map.put(field.getName(), TypeUtils.getExampleValue(fieldType, false));\n                continue;\n            }\n            map.put(field.getName(), assemblePsiClass(fieldType, project, autoCorrelationCount, putClass));\n        }\n        return map;\n    }\n\n    public static PsiClass findPsiClass(String typeCanonicalText, Project project) {\n        PsiShortNamesCache shortNamesCache = PsiShortNamesCache.getInstance(project);\n        GlobalSearchScope scope = GlobalSearchScope.allScope(project);\n        return shortNamesCache.", "first_line_groundtruth": "if (TypeUtils.isPrimitiveOrSimpleType(fieldType.replaceAll(\"\\\\[]\", \"\"))) {", "first_line_prediction": " if (TypeUtils.isPrimitiveOrSimpleType(fieldType)) {", "match": 0}
{"groundtruth": "instance.getCore().getDebugPingResponses().put(player.getUsername(), new ArrayList<>());", "prediction": " map.put(player.getUsername(), new ArrayList<>());\n                        }\n\n                        ArrayList<DebugPingResponse> debugPingResponses = map.get(player.getUsername());\n\n                        debugPingResponses.add(new DebugPingResponse(ping, neoRTT, backendRTT));\n\n                        instance.getCore().debug(\"DebugPingResponse added\");\n                    }\n\n                    pingMap.remove(keepAliveResponseKey);\n                }\n            }\n        });\n    }\n\n    public boolean isIPInRange(String ipRange, String ip) {\n        String[] ipRangeParts = ipRange.split(\"\\\\.\");\n        String[] ipParts = ip.split(\"\\\\", "first_line_groundtruth": "instance.getCore().getDebugPingResponses().put(player.getUsername(), new ArrayList<>());", "first_line_prediction": " map.put(player.getUsername(), new ArrayList<>());", "match": 0}
{"groundtruth": "TypeUtils.getExampleValue(typeCanonicalText, false);", "prediction": "1;\n            }\n            // \u679a\u4e3e\n            if (TypeUtils.isEnum(typeCanonicalText)) {\n                return Collections.singletonList(assemblePsiEnum(typeCanonicalText, project, autoCorrelationCount, putClass));\n            }\n            // \u81ea\u5b9a\u4e49\u7c7b\u578b\n            return Collections.singletonList(assemblePsiClass(typeCanonicalText, project, autoCorrelationCount, putClass));\n        }\n\n        // \u6570\u7ec4|\u96c6\u5408\n        if (TypeUtils.isArray(typeCanonicalText) || TypeUtils.isList(typeCanonicalText)) {\n            String elementType = TypeUtils.isArray(typeCanonicalText)\n                    ? typeCanonicalText.", "first_line_groundtruth": "TypeUtils.getExampleValue(typeCanonicalText, false);", "first_line_prediction": "1;", "match": 0}
{"groundtruth": ".equals(date) && booking.getTime().equals(time)) {", "prediction": " == date && booking.getTime() == time) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": ".equals(date) && booking.getTime().equals(time)) {", "first_line_prediction": " == date && booking.getTime() == time) {", "match": 0}
{"groundtruth": ".getId() == tableId && booking.getDate().equals(date) && booking.getTime().equals(time)) {", "prediction": " != null && booking.getTable().getId() == tableId &&\n                    booking.getDate().equals(date) && booking.getTime().equals(time)) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": ".getId() == tableId && booking.getDate().equals(date) && booking.getTime().equals(time)) {", "first_line_prediction": " != null && booking.getTable().getId() == tableId &&", "match": 0}
{"groundtruth": "staffRepository.findByLogin(login) != null;", "prediction": " staffRepository.existsByLogin(login);\n    }", "first_line_groundtruth": "staffRepository.findByLogin(login) != null;", "first_line_prediction": " staffRepository.existsByLogin(login);", "match": 0}
{"groundtruth": "staff.setApparatusEmployed(new java.sql.Date(currentDate.getTime()));", "prediction": " staff.setRole(\"\u041c\u0415\u041d\u0415\u0414\u0416\u0415\u0420\");\n         staff.setPassword(staff.getPassword());\n         staff.setCreated(currentDate);\n         staff.setLastLogin(currentDate);\n         staffService.addStaff(staff);\n         model.addAttribute(\"staff\", staffService.getAllStaff());\n         model.addAttribute(\"newStaff\", new Staff());\n         model.addAttribute(\"currentUser\", getCurrentUser());\n         return \"redirect:/staff\";\n    }\n\n    @GetMapping(\"/staff/delete\")\n    public String deleteStaff(@RequestParam(\"id\") int id, Model model) {\n        staffService.deleteStaff(id", "first_line_groundtruth": "staff.setApparatusEmployed(new java.sql.Date(currentDate.getTime()));", "first_line_prediction": " staff.setRole(\"\u041c\u0415\u041d\u0415\u0414\u0416\u0415\u0420\");", "match": 0}
{"groundtruth": "dishService.editDishDetails(id, name, description, recipe);", "prediction": " if (dishService.checkIfDishIsOrdered(id)) {\n         } else {\n            dishService.editDishDetails(id, name, description, recipe);\n         }\n        return \"redirect:/menu\";\n    }", "first_line_groundtruth": "dishService.editDishDetails(id, name, description, recipe);", "first_line_prediction": " if (dishService.checkIfDishIsOrdered(id)) {", "match": 0}
{"groundtruth": "DishType dishType = dishTypeRepository.findByName(typeName);", "prediction": " DishType dishType = dishTypeRepository.findByName(typeName);\n         if (dishType != null) {\n             Dish dish = new Dish();\n             dish.setName(name);\n             dish.setCost(cost);\n             dish.setType(dishType);\n             dishRepository.save(dish);\n         }\n    }\n\n    public Dish getDishById(int id) {\n        return dishRepository.findById(id).orElse(null);\n    }\n\n    public void editDishDetails(int id, String name, String description, String recipe) {\n        Optional<", "first_line_groundtruth": "DishType dishType = dishTypeRepository.findByName(typeName);", "first_line_prediction": " DishType dishType = dishTypeRepository.findByName(typeName);", "match": 0}
{"groundtruth": "(dishService.checkIfDishIsOrdered(id)) {", "prediction": " (dishService.getDishById(id) != null) {\n            dishService.editDishDetails(id, name, cost, typeName);\n        }\n        return \"redirect:/menu\";\n    }\n\n    @PostMapping(\"/menu/add\")\n    public String addDish(@RequestParam(\"name\") String name, @RequestParam(\"cost\") double cost,\n                           @RequestParam(\"type\") String typeName, @RequestParam(\"image\") MultipartFile image) throws IOException {\n        DishType dishType = dishTypeRepository.findByName(typeName);\n        if (dishType != null) {\n            dishService.", "first_line_groundtruth": "(dishService.checkIfDishIsOrdered(id)) {", "first_line_prediction": " (dishService.getDishById(id) != null) {", "match": 0}
{"groundtruth": "orderedDish.setStatus(status);", "prediction": " orderedDish.setStatus(status);\n             orderedDishRepository.save(orderedDish);\n        }\n        return \"redirect:/kitchen\";\n    }\n\n    @PostMapping(\"/update-status-manager/{id}\")\n    public String updateStatusManager(@PathVariable(\"id\") int id, @RequestParam(\"status\") String status) {\n        Optional<Order> optionalOrder = orderRepository.findById(id);\n        if (optionalOrder.isPresent()) {\n            Order order = optionalOrder.get();\n            order.setStatus(status);\n            order.getOrderedDishes().forEach(dish -> dish.setStatus(status));\n            if", "first_line_groundtruth": "orderedDish.setStatus(status);", "first_line_prediction": " orderedDish.setStatus(status);", "match": 0}
{"groundtruth": "<OrderedDish> dishesInOrder = orderedDishRepository.findAllByOrder(orderedDish.getOrder());", "prediction": "<OrderedDish> orderedDishes = orderedDishRepository.findAll();\n            List<OrderedDish> acceptedDishes = orderedDishes.stream()\n                    .filter(dish -> dish.getStatus().equals(\"\u041f\u0440\u0438\u043d\u044f\u0442\"))\n                    .collect(Collectors.toList());\n            return \"redirect:/kitchen\";\n        }\n        return \"redirect:/kitchen\";\n    }", "first_line_groundtruth": "<OrderedDish> dishesInOrder = orderedDishRepository.findAllByOrder(orderedDish.getOrder());", "first_line_prediction": "<OrderedDish> orderedDishes = orderedDishRepository.findAll();", "match": 0}
{"groundtruth": "if (dishService.checkIfDishIsOrdered(id)) {", "prediction": " dishService.deleteDish(id);\n         return \"redirect:/menu\";\n    }\n\n    @PostMapping(\"/menu/add\")\n    public String addDish(@RequestParam(\"name\") String name, @RequestParam(\"cost\") double cost,\n                           @RequestParam(\"type\") String typeName, @RequestParam(\"image\") MultipartFile image) throws IOException {\n        dishService.addDish(name, cost, typeName, image);\n        return \"redirect:/menu\";\n    }", "first_line_groundtruth": "if (dishService.checkIfDishIsOrdered(id)) {", "first_line_prediction": " dishService.deleteDish(id);", "match": 0}
{"groundtruth": "model.addAttribute(\"staff\", staffService.getAllStaff());", "prediction": " return \"staff\";\n        }\n        staffService.addStaff(staff);\n        return \"redirect:/staff\";\n    }\n\n    @GetMapping(\"/staff/edit\")\n    public String editStaff(Model model) {\n        model.addAttribute(\"staff\", staffService.getStaffById(session.getAttribute(\"staffId\")));\n        return \"edit-staff\";\n    }\n\n    @PostMapping(\"/staff/edit\")\n    public String editStaff(@ModelAttribute Staff staff, Model model) {\n        staffService.editStaff(staff);\n        return \"redirect:/staff\";\n    }\n\n    @GetMapping(\"/staff/delete\")\n    public String deleteStaff(Model", "first_line_groundtruth": "model.addAttribute(\"staff\", staffService.getAllStaff());", "first_line_prediction": " return \"staff\";", "match": 0}
{"groundtruth": "<Tables> allTables = tableBookingService.getAllTables();", "prediction": "<TableBooking> bookings = tableBookingService.getAllBookings();\n        model.addAttribute(\"bookings\", bookings);\n\n        List<Tables> allTables = tableBookingService.getAllTables();\n        model.addAttribute(\"tables\", allTables);\n\n        Date currentDate = Date.valueOf(LocalDate.now());\n        Date maxDate = Date.valueOf(LocalDate.now().plusDays(3));\n\n        model.addAttribute(\"currentDate\", currentDate);\n        model.addAttribute(\"maxDate\", maxDate);\n\n        List<LocalTime> times = new ArrayList<>();\n        for (LocalTime timeOption = LocalTime.of(1", "first_line_groundtruth": "<Tables> allTables = tableBookingService.getAllTables();", "first_line_prediction": "<TableBooking> bookings = tableBookingService.getAllBookings();", "match": 0}
{"groundtruth": "= orderedDish.getOrder();", "prediction": " = orderedDish.getOrder();\n                order.setStatus(status);\n                orderRepository.save(order);\n            }\n        }\n        return \"redirect:/kitchen\";\n    }", "first_line_groundtruth": "= orderedDish.getOrder();", "first_line_prediction": " = orderedDish.getOrder();", "match": 0}
{"groundtruth": "loginExists(staff.getLogin())) {", "prediction": "loginExists(staff.getLogin())) {\n            model.addAttribute(\"error\", \"Login already exists\");\n            return \"staff\";\n        }\n        staffService.addStaff(staff);\n        model.addAttribute(\"staff\", staffService.getAllStaff());\n        model.addAttribute(\"newStaff\", new Staff());\n        model.addAttribute(\"currentUser\", getCurrentUser());\n        return \"staff\";\n    }\n\n    @GetMapping(\"/staff/edit\")\n    public String editStaff(@RequestParam int id, Model model) {\n        model.addAttribute(\"staff\", staffService.getStaffById(id));\n        model.addAttribute(\"newStaff\", new Staff());\n       ", "first_line_groundtruth": "loginExists(staff.getLogin())) {", "first_line_prediction": "loginExists(staff.getLogin())) {", "match": 1}
{"groundtruth": "!config.getMajorRules().isEmpty() || !config.getMinorRules().isEmpty()) {", "prediction": "config.getMajorUpdatePatterns() != null) {\n                for (String pattern : config.getMajorUpdatePatterns()) {\n                    majorUpdatePatterns.add(Pattern.compile(pattern, patternFlags));\n                }\n            }\n\n            if (config.getMinorUpdatePatterns() != null) {\n                for (String pattern : config.getMinorUpdatePatterns()) {\n                    minorUpdatePatterns.add(Pattern.compile(pattern, patternFlags));\n                }\n            }\n        }\n\n        tagPattern = Pattern.compile(tagRegex, patternFlags);\n    }\n\n    public Version getVersion(List<ChangeSet> changeSets) {\n        Version", "first_line_groundtruth": "!config.getMajorRules().isEmpty() || !config.getMinorRules().isEmpty()) {", "first_line_prediction": "config.getMajorUpdatePatterns() != null) {", "match": 0}
{"groundtruth": ").isEmpty() || !config.getMinorRules().isEmpty()) {", "prediction": "null).isEmpty()) {\n                majorUpdatePatterns.clear();\n                for (String regex : config.getMajorRules(null)) {\n                    majorUpdatePatterns.add(Pattern.compile(regex, patternFlags));\n                }\n            }\n\n            if (!config.getMinorRules(null).isEmpty()) {\n                minorUpdatePatterns.clear();\n                for (String regex : config.getMinorRules(null)) {\n                    minorUpdatePatterns.add(Pattern.compile(regex, patternFlags));\n                }\n            }\n        }\n\n        tagPattern = Pattern.compile(tagRegex, patternFlags);\n    }\n\n    public Version getVersion(String", "first_line_groundtruth": ").isEmpty() || !config.getMinorRules().isEmpty()) {", "first_line_prediction": "null).isEmpty()) {", "match": 0}
{"groundtruth": "semverConfigVersionTag = config.getVersionTag();", "prediction": " customVersionTagRegex = config.getVersionTagRegex();\n            String  customMajorRulesRegex = config.getMajorRulesRegex();\n            String  customMinorRulesRegex = config.getMinorRulesRegex();\n\n            if (customVersionTagRegex != null) {\n                tagRegex = customVersionTagRegex;\n            }\n            if (customMajorRulesRegex != null) {\n                majorUpdatePatterns.add(Pattern.compile(customMajorRulesRegex, patternFlags));\n            }\n            if (customMinorRulesRegex != null) {\n                minorUpdatePatterns.add(Pattern.compile(customMinorRulesRegex, patternFlags));\n            }\n       ", "first_line_groundtruth": "semverConfigVersionTag = config.getVersionTag();", "first_line_prediction": " customVersionTagRegex = config.getVersionTagRegex();", "match": 0}
{"groundtruth": "commitHistory.getChanges()) {", "prediction": " commitHistory.getChangeSets()) {\n            Version.Element element = Version.Element.valueOf(change.getRevision().getShortRevision());\n            if (element.ordinal() > maxElement.ordinal()) {\n                maxElement = element;\n            }\n        }\n        return maxElement;\n    }\n\n    public Version.Element getStepFromLastVersionTag(CommitHistory commitHistory) {\n        Version.Element maxElement = getMaxElementSinceLastVersionTag(commitHistory);\n        return Version.Element.valueOf(maxElement.name().toLowerCase());\n    }\n\n    public Version.Element getStepFromCommits(CommitHistory commitHistory) {", "first_line_groundtruth": "commitHistory.getChanges()) {", "first_line_prediction": " commitHistory.getChangeSets()) {", "match": 0}
{"groundtruth": "userRepository.getUserByUserId(userId);", "prediction": " null;\n        }\n    }\n\n    public User createUser(User user) {\n        user.setId(UUID.randomUUID().toString());\n        userRepository.save(user);\n        return user;\n    }\n\n    public User updateUser(User user) {\n        userRepository.save(user);\n        return user;\n    }\n\n    public void deleteUser(String userId) {\n        userRepository.deleteById(userId);\n    }", "first_line_groundtruth": "userRepository.getUserByUserId(userId);", "first_line_prediction": " null;", "match": 0}
{"groundtruth": "= versionRules.getTagPattern().matcher(tag);", "prediction": " = versionRules.getTagPattern().matcher(tag);\n                        if (matcher.matches()) {\n                            return matcher.group(1);\n                        }\n                        return null;\n                     })\n                     .filter(Objects::nonNull)\n                     .collect(Collectors.toList());\n\n                if (!versionTags.isEmpty()) {\n                    latestVersionTag = versionTags.get(versionTags.size() - 1);\n                }\n            }\n        }\n    }", "first_line_groundtruth": "= versionRules.getTagPattern().matcher(tag);", "first_line_prediction": " = versionRules.getTagPattern().matcher(tag);", "match": 0}
{"groundtruth": "List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> {", "prediction": " List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                 .filter(res -> reservationsId.contains(res.getReservationId()))\n                 .collect(Collectors.toList());\n         reservations.forEach(res -> {\n             res.setStatus(Status.RESERVED);\n             reservationRepository.save(res);\n         });\n         return reservations;\n    }\n\n    public List<Reservation> getReservationsByHostIdStatusReserved(String hostId) {\n        List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                 .filter(res -> res.getHost().getHost", "first_line_groundtruth": "List<Reservation> reservations = reservationRepository.getAllReservations().stream()", "first_line_prediction": " List<Reservation> reservations = reservationRepository.getAllReservations().stream()", "match": 0}
{"groundtruth": "= commitHistory.getLastVersionTag();", "prediction": " = versionRules.getLatestVersionTag(commitHistory);\n        String latestVersionCommit = versionRules.getLatestVersionCommit(commitHistory);\n\n        LOG.debug(\"Latest Version Tag      : {}\", latestVersionTag);\n        LOG.debug(\"Latest Version Commit   : {}\", latestVersionCommit);\n\n        if (latestVersionTag != null) {\n            usingTag = true;\n            version = Version.valueOf(latestVersionTag);\n        } else {\n            version = Version.valueOf(versionString);\n        }\n\n        LOG.debug(\"Using tag: {}\", usingTag);\n        LOG.debug(\"Version: {}\", version);\n\n        Version nextVersion", "first_line_groundtruth": "= commitHistory.getLastVersionTag();", "first_line_prediction": " = versionRules.getLatestVersionTag(commitHistory);", "match": 0}
{"groundtruth": "User existingUser = userRepository.getUserByUserId(userId);", "prediction": " return userRepository.getUserByUserId(userId);\n    }\n\n    public User createUser(User user) {\n        user.setId(UUID.randomUUID().toString());\n        userRepository.save(user);\n        return user;\n    }\n\n    public User updateUser(User user) {\n        userRepository.save(user);\n        return user;\n    }\n\n    public void deleteUser(String userId) {\n        userRepository.deleteById(userId);\n    }", "first_line_groundtruth": "User existingUser = userRepository.getUserByUserId(userId);", "first_line_prediction": " return userRepository.getUserByUserId(userId);", "match": 0}
{"groundtruth": "ArrayList<>(userRepository.getAllUsers());", "prediction": " ArrayList<>(userRepository.getAllUsers());\n    }", "first_line_groundtruth": "ArrayList<>(userRepository.getAllUsers());", "first_line_prediction": " ArrayList<>(userRepository.getAllUsers());", "match": 0}
{"groundtruth": "orgGroupSendHeaders.setXAcsDingtalkAccessToken(accessTokenService.getAccessToken());", "prediction": " // 1. get access token\n        if (accessTokenService.isExpired()) {\n            accessTokenService.refreshAccessToken();\n        }\n        // 2. send message\n        OrgGroupSendRequest orgGroupSendRequest = new OrgGroupSendRequest();\n        orgGroupSendRequest.setOpenConversationId(openConversationId);\n        orgGroupSendRequest.setMsgtype(\"text\");\n        orgGroupSendRequest.setText(new JSONObject().fluentPut(\"content\", text));\n        OrgGroupSendResponse orgGroupSendResponse = robotClient.orgGroupSend(orgGroupSendRequest, orgGroupSendHeaders);\n        return orgGroupSendResponse.", "first_line_groundtruth": "orgGroupSendHeaders.setXAcsDingtalkAccessToken(accessTokenService.getAccessToken());", "first_line_prediction": " // 1. get access token", "match": 0}
{"groundtruth": "= deepCopy(object.getApplication());", "prediction": " = deepCopy(object.getApplication());\n        final Map<String, Entity> dataizations = deepCopy(object.getDataizations());\n        final Map<String, Entity> localBinds = deepCopy(object.getLocalBinds());\n        final Map<String, Entity> localBinds2 = deepCopy(object.getLocalBinds2());\n        final Map<String, Entity> localBinds3 = deepCopy(object.getLocalBinds3());\n        final Map<String, Entity> localBinds4 = deepCopy(object.getLocalBinds4());\n        final Map<String, Entity> localBinds", "first_line_groundtruth": "= deepCopy(object.getApplication());", "first_line_prediction": " = deepCopy(object.getApplication());", "match": 0}
{"groundtruth": "locator = ((Locator) binding.getValue()).getPath();", "prediction": "ary = new ArrayList<>();\n                        ary.add(binding.getKey());\n                        final String name = String.format(\"\u03bd%d\", Flatter.counter);\n                        Flatter.counter += 1;\n                        this.box.put(name, ary);\n                        bindings.put(binding.getKey(), new FlatObject(name, \"\u03be\"));\n                        found = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }", "first_line_groundtruth": "locator = ((Locator) binding.getValue()).getPath();", "first_line_prediction": "ary = new ArrayList<>();", "match": 0}
{"groundtruth": "box.get(object.getName()));", "prediction": "box.content());\n        final Map<String, Entity> flat = new HashMap<>();\n        final Queue<String> queue = new LinkedList<>();\n        queue.offer(key);\n        while (!queue.isEmpty()) {\n            final String name = queue.poll();\n            final Entity entity = bindings.get(name);\n            if (entity instanceof NestedObject) {\n                queue.offer(name);\n            } else {\n                flat.put(name, entity);\n            }\n        }\n        final FlatObject flatObject = new FlatObject(object.getName(), object.getLocator());\n        final Map<String, Entity> application = new HashMap", "first_line_groundtruth": "box.get(object.getName()));", "first_line_prediction": "box.content());", "match": 0}
{"groundtruth": "robotGroupMessagesService.send(openConversationId, \"hello\");", "prediction": " robotGroupMessagesService.send(openConversationId, msg);\n                } catch (Exception e) {\n                    log.error(\"RobotMsgCallbackConsumer_execute robotGroupMessagesService.send error, openConversationId={}, msg={}\",\n                            openConversationId, msg, e);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"RobotMsgCallbackConsumer_execute error, message={}\", message, e);\n        }\n        return null;\n    }", "first_line_groundtruth": "robotGroupMessagesService.send(openConversationId, \"hello\");", "first_line_prediction": " robotGroupMessagesService.send(openConversationId, msg);", "match": 0}
{"groundtruth": "tokenizer.getToken();", "prediction": "tokenizer.getToken();\n        if (token instanceof BracketToken) {\n            return this.readBracket();\n        }\n        if (token instanceof StringToken) {\n            return this.readString();\n        }\n        throw new IllegalStateException(\n            String.format(\"Unexpected token: %s\", token)\n        );\n    }\n\n    /**\n     * Reads a bracket entity.\n     * @return The parsed entity.\n     */\n    private Entity readBracket() {\n        final BracketToken token = (BracketToken) this.tokenizer.getToken();\n        final BracketToken.BracketType type = token.getType();\n        if (type == BracketToken", "first_line_groundtruth": "tokenizer.getToken();", "first_line_prediction": "tokenizer.getToken();", "match": 1}
{"groundtruth": ").getName();", "prediction": "\n                        .copy()).getName();\n                    if (!uses.contains(value)) {\n                        queue.add(value);\n                    }\n                }\n            }\n        }\n        for (final Map.Entry<String, Map<String, Entity>> entry : this.box.content().entrySet()) {\n            for (final Map.Entry<String, Entity> binding : entry.getValue().entrySet()) {\n                if (binding.getValue() instanceof FlatObject) {\n                    final String value = ((FlatObject) binding.getValue()\n                        .copy()).getName();\n                    if (!uses.contains(value)) {\n                        entry.getValue().remove(binding", "first_line_groundtruth": ").getName();", "first_line_prediction": "", "match": 0}
{"groundtruth": "(storage.getName());", "prediction": "Visible(false);\n        player.setCustomName(Text.of(\"Member: \" + player.getGameProfile().getName()));\n    }", "first_line_groundtruth": "(storage.getName());", "first_line_prediction": "Visible(false);", "match": 0}
{"groundtruth": "((FlatObject) binding.getValue()).getLocator())\n                    );", "prediction": "0)\n                    );\n                }\n            }\n        }\n    }", "first_line_groundtruth": "((FlatObject) binding.getValue()).getLocator())", "first_line_prediction": "0)", "match": 0}
{"groundtruth": "this.tokenizer.next();", "prediction": " result.put(name, this.one());\n        }\n        return result;\n    }", "first_line_groundtruth": "this.tokenizer.next();", "first_line_prediction": " result.put(name, this.one());", "match": 0}
{"groundtruth": ".add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));", "prediction": ".add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));\n                builder.add(BlockRegistry.get(member.crossedFence()), beautifyName(member.crossedFence()));\n                builder.add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));\n                builder.add(BlockRegistry.get(member.rack()), beautifyName(member.rack()));\n            }\n        }\n\n        private String beautifyName(String name) {\n            return name.replaceAll(\"_\", \" \").replaceAll(\"Block\", \"Block \").", "first_line_groundtruth": ".add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));", "first_line_prediction": ".add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));", "match": 1}
{"groundtruth": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");", "prediction": ".add(BlockRegistry.get(member.raft()), beautifyName(member.raft()));\n                builder.add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));\n                builder.add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));\n                builder.add(BlockRegistry.get(member.crossedFence()), beautifyName(member.crossedFence()));\n                builder.add(BlockRegistry.get(member.rack()), beautifyName(member.rack()));\n            }\n        }\n    }", "first_line_groundtruth": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");", "first_line_prediction": ".add(BlockRegistry.get(member.raft()), beautifyName(member.raft()));", "match": 0}
{"groundtruth": ".add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));", "prediction": ".add(BlockRegistry.get(member.crossedFence()), beautifyName(member.crossedFence()));\n                builder.add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));\n                builder.add(BlockRegistry.get(member.rack()), beautifyName(member.rack()));\n            }\n        }\n\n        private String beautifyName(String name) {\n            return name.replaceAll(\"_\", \" \").replaceAll(\"Block\", \"Block \").replaceAll(\"Item\", \"Item \").replaceAll(\"BlockEntity\", \"Block Entity \").replaceAll(\"BlockEntityType\", \"Block Entity Type", "first_line_groundtruth": ".add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));", "first_line_prediction": ".add(BlockRegistry.get(member.crossedFence()), beautifyName(member.crossedFence()));", "match": 0}
{"groundtruth": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));", "prediction": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));\n            }\n        }\n\n        private String beautifyName(String name) {\n            return name.replaceAll(\"_\", \" \").replaceAll(\"Block\", \"Block \").replaceAll(\"Item\", \"Item \").replaceAll(\"BlockEntity\", \"Block Entity \").replaceAll(\"BlockEntityType\", \"Block Entity Type \").replaceAll(\"BlockEntityTypeBuilder\", \"Block Entity Type Builder \").replaceAll(\"BlockEntityTypeBuilder.Builder\", \"Block Entity Type Builder Builder \").replaceAll(\"BlockEntityTypeBuilder.of\", \"Block Entity Type Builder Of \").replaceAll(\"BlockEntityTypeBuilder.create\", \"", "first_line_groundtruth": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));", "first_line_prediction": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));", "match": 1}
{"groundtruth": "beautifyName(member.raft()));", "prediction": "1);\n                builder.add(BlockRegistry.get(member.brokenRaft()), 1);\n                builder.add(BlockRegistry.get(member.crossedFence()), 1);\n                builder.add(BlockRegistry.get(member.fence()), 1);\n                builder.add(BlockRegistry.get(member.rack()), 1);\n            }\n        }\n\n        private String beautifyName(String name) {\n            return name.replaceAll(\"_\", \" \").toLowerCase();\n        }\n    }", "first_line_groundtruth": "beautifyName(member.raft()));", "first_line_prediction": "1);", "match": 0}
{"groundtruth": "fence()), beautifyName(member.fence()));", "prediction": "crossedFence()), beautifyName(member.crossedFence()));\n                builder.add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));\n                builder.add(BlockRegistry.get(member.rack()), beautifyName(member.rack()));\n            }\n        }\n\n        private String beautifyName(String name) {\n            return name.replaceAll(\"_\", \" \").replaceAll(\"Block\", \"Block \").replaceAll(\"Item\", \"Item \").replaceAll(\"BlockEntity\", \"Block Entity \").replaceAll(\"BlockEntityType\", \"Block Entity Type \").replaceAll(\"BlockEntityTypeBuilder\", \"Block Entity", "first_line_groundtruth": "fence()), beautifyName(member.fence()));", "first_line_prediction": "crossedFence()), beautifyName(member.crossedFence()));", "match": 0}
{"groundtruth": "member.rack()), beautifyName(member.rack()));", "prediction": "member.rack()), beautifyName(member.rack()));\n            }\n        }\n\n        private String beautifyName(String name) {\n            return name.replaceAll(\"_\", \" \").replaceAll(\"Block\", \"Block \").replaceAll(\"Item\", \"Item \").replaceAll(\"BlockEntity\", \"Block Entity \").replaceAll(\"BlockEntityType\", \"Block Entity Type \").replaceAll(\"BlockEntityTypeBuilder\", \"Block Entity Type Builder \").replaceAll(\"BlockEntityTypeBuilder.Builder\", \"Block Entity Type Builder Builder \").replaceAll(\"BlockEntityTypeBuilder.of\", \"Block Entity Type Builder Of \").replaceAll(\"BlockEntityTypeBuilder.create\", \"Block Entity Type Builder Create \").", "first_line_groundtruth": "member.rack()), beautifyName(member.rack()));", "first_line_prediction": "member.rack()), beautifyName(member.rack()));", "match": 1}
{"groundtruth": ".get(member.crossedFence()), beautifyName(member.crossedFence()));", "prediction": ".get(member.crossedFence()), beautifyName(member.crossedFence()));\n                builder.add(BlockRegistry.get(member.rack()), beautifyName(member.rack()));\n            }\n        }\n    }", "first_line_groundtruth": ".get(member.crossedFence()), beautifyName(member.crossedFence()));", "first_line_prediction": ".get(member.crossedFence()), beautifyName(member.crossedFence()));", "match": 1}
{"groundtruth": ", beautifyName(member.brokenRaft()));", "prediction": " + \".broken\", beautifyName(member.brokenRaft()));\n                builder.add(BlockRegistry.get(member.crossedFence()) + \".crossed\", beautifyName(member.crossedFence()));\n                builder.add(BlockRegistry.get(member.fence()) + \".fenced\", beautifyName(member.fence()));\n                builder.add(BlockRegistry.get(member.rack()) + \".rack\", beautifyName(member.rack()));\n            }\n        }\n\n        private String beautifyName(String name) {\n            return name.replaceAll(\"_\", \" \").replaceAll(\"", "first_line_groundtruth": ", beautifyName(member.brokenRaft()));", "first_line_prediction": " + \".broken\", beautifyName(member.brokenRaft()));", "match": 0}
{"groundtruth": "Logger.writeError(\"Invalid server response\");", "prediction": "\tLogger.writeInfo(\"Server is not responding\");\n\t\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t} catch (IOException ex){\n\t\t\tLogger.writeError(\"Error connecting to server\");\n\t\t\tSystem.exit(0);\n\t\t}", "first_line_groundtruth": "Logger.writeError(\"Invalid server response\");", "first_line_prediction": "\tLogger.writeInfo(\"Server is not responding\");", "match": 0}
{"groundtruth": "(\"position fen \"+b.getFEN());", "prediction": "(\"position fen \"+b.getFen());\n\t\twriteCommand(\"go depth 1\");\n\t\tString line = getOutput(1000);\n\t\tif (line.startsWith(\"bestmove\")){\n\t\t\treturn line.substring(8);\n\t\t} else {\n\t\t\treturn null;\n\t\t}", "first_line_groundtruth": "(\"position fen \"+b.getFEN());", "first_line_prediction": "(\"position fen \"+b.getFen());", "match": 0}
{"groundtruth": "username = jwtUtil.verifyToken(token);", "prediction": " username = jwtUtil.getUsernameFromToken(token);\n\t\t\t\tif (username == null) {\n\t\t\t\t\tthrow new RefreshTokenMismatchException();\n\t\t\t\t}", "first_line_groundtruth": "username = jwtUtil.verifyToken(token);", "first_line_prediction": " username = jwtUtil.getUsernameFromToken(token);", "match": 0}
{"groundtruth": "getIncrementTime(), b.getIncrementTime()));", "prediction": "getIncrement(Color.WHITE), b.getIncrement(Color.BLACK)));\n\t\treturn getOutput(1000);", "first_line_groundtruth": "getIncrementTime(), b.getIncrementTime()));", "first_line_prediction": "getIncrement(Color.WHITE), b.getIncrement(Color.BLACK)));", "match": 0}
{"groundtruth": "Color.WHITE), b.getTime(Color.BLACK), b.getIncrementTime(), b.getIncrementTime()));", "prediction": "Color.WHITE), b.getTime(Color.BLACK), b.getIncrement(Color.WHITE), b.getIncrement(Color.BLACK)));\n\t\treturn getOutput(1000);", "first_line_groundtruth": "Color.WHITE), b.getTime(Color.BLACK), b.getIncrementTime(), b.getIncrementTime()));", "first_line_prediction": "Color.WHITE), b.getTime(Color.BLACK), b.getIncrement(Color.WHITE), b.getIncrement(Color.BLACK)));", "match": 0}
{"groundtruth": "cm.reply();", "prediction": "", "first_line_groundtruth": "cm.reply();", "first_line_prediction": "", "match": 0}
{"groundtruth": "user = userDetailsService.loadUserByUsername((String)auth.getPrincipal());", "prediction": " userDetails = userDetailsService.loadUserByUsername(auth.getUsername());", "first_line_groundtruth": "user = userDetailsService.loadUserByUsername((String)auth.getPrincipal());", "first_line_prediction": " userDetails = userDetailsService.loadUserByUsername(auth.getUsername());", "match": 0}
{"groundtruth": "ecoproveedor.calcularPuntosTotales();", "prediction": "0;\n        for(Producto p : ecoproveedor.getListaProductos()){\n            puntos += p.getPuntuacion();\n        }\n        ecoproveedor.setPuntuacion(puntos);\n        repository.save(ecoproveedor);\n    }", "first_line_groundtruth": "ecoproveedor.calcularPuntosTotales();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "auth.eraseCredentials();", "prediction": "\t// \uc778", "first_line_groundtruth": "auth.eraseCredentials();", "first_line_prediction": "\t// \uc778", "match": 0}
{"groundtruth": "builder.add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.chinese + \"\u7b4f\");", "prediction": " builder.add(BlockRegistry.get(member.brokenRaft()), member.chinese + \"", "first_line_groundtruth": "builder.add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.chinese + \"\u7b4f\");", "first_line_prediction": " builder.add(BlockRegistry.get(member.brokenRaft()), member.chinese + \"", "match": 0}
{"groundtruth": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();", "prediction": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();\n\t\tfor (int i = 0; i < pawns; i++){\n\t\t\tif (i == 0){\n\t\t\t\tif (color == Color.WHITE){\n\t\t\t\t\tcaptures.add(pieces.get(i));\n\t\t\t\t} else {\n\t\t\t\t\tcaptures.add(pieces.get(i+1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (color == Color.WHITE){\n\t\t\t\t\tcaptures.add(pieces.get(i+1));\n\t\t\t", "first_line_groundtruth": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();", "first_line_prediction": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();", "match": 1}
{"groundtruth": "Flotage.id(id), block);", "prediction": " Flotage.id(id), block);\n    }\n\n    private static BlockMember member(String id) {\n        return Arrays.stream(BlockMember.values())\n                .filter(member -> member.id().equals(id))\n                .findFirst()\n                .orElseThrow();\n    }\n\n    private static BlockMember member(Block block) {\n        return Arrays.stream(BlockMember.values())\n                .filter(member -> member.block().equals(block))\n                .findFirst()\n                .orElseThrow();\n    }\n\n    private static BlockMember member(AbstractBlock.Settings settings) {\n        return Arrays.stream(BlockMember", "first_line_groundtruth": "Flotage.id(id), block);", "first_line_prediction": " Flotage.id(id), block);", "match": 0}
{"groundtruth": "().getNamespace(), \"block/\" + member.log().getPath());", "prediction": "());\n        return new TextureMap(id, new Identifier(id.getNamespace(), \"textures/block/\" + id.getPath() + \".png\"));\n    }\n\n    @Override\n    public void generateItemModels(ItemModelGenerator generator) {\n        itemGenerator = generator;\n        for (BlockMember member : BlockMember.values()) {\n            itemMember(member);\n        }\n    }", "first_line_groundtruth": "().getNamespace(), \"block/\" + member.log().getPath());", "first_line_prediction": "());", "match": 0}
{"groundtruth": "() && p.getColor() == piece.getColor()){", "prediction": "()){\n\t\t\t\t\tidentical.add(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (Piece p : identical){\n\t\t\t\tp.setX(p.getX() + (p.getX() - p1[0]));\n\t\t\t\tp.setY(p.getY() + (p.getY() - p1[1]));\n\t\t\t}\n\t\t\tpiece.setX(p2[0]);\n\t\t\tpiece.setY(p2[1]);\n\t\t\t\n\t\t\tif (prom != null){\n\t\t\t\tpromote(piece.getColor(), Piece.Pieces.valueOf(prom));\n\t\t\t}\n\t\t\t\n\t\t\tif", "first_line_groundtruth": "() && p.getColor() == piece.getColor()){", "first_line_prediction": "()){", "match": 0}
{"groundtruth": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();", "prediction": "piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();\n\t\tint bishops = (int)pieces.stream(piece -> piece.getType().getName() == Piece.PIECE_BISHOP).count();\n\t\tint queens = (int)pieces.stream(piece -> piece.getType().getName() == Piece.PIECE_QUEEN).count();\n\t\tint kings = (int)pieces.stream(piece -> piece.getType().getName() == Piece.PIECE_KING).count();\n\t\tint total = pawns", "first_line_groundtruth": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();", "first_line_prediction": "piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();", "match": 0}
{"groundtruth": "if (piece == null || piece.getColor() != this.player) return false;", "prediction": "\tif (piece == null) return false;\n\t\t\tif (piece.getColor() != this.player) return false;\n\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN && piece.getY() == 1 && piece.getX() == p1[1]) return false;\n\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN && piece.getY() == 6 && piece.getX() == p1[1]) return false;\n\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN &&", "first_line_groundtruth": "if (piece == null || piece.getColor() != this.player) return false;", "first_line_prediction": "\tif (piece == null) return false;", "match": 0}
{"groundtruth": "> pieces = getPiecesOnBoard().stream().filter(piece -> piece.getColor() == color).toList();", "prediction": "> pieces = getPiecesOnBoard().stream().filter(p -> p.getColor() == color).collect(Collectors.toList());\n\t\tfor (Piece piece : pieces){\n\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN){\n\t\t\t\tif (piece.getY() == 1){\n\t\t\t\t\tthis.blackCaptured.add(piece);\n\t\t\t\t} else if (piece.getY() == 6){\n\t\t\t\t\tthis.whiteCaptured.add(piece);\n\t\t\t\t}\n\t\t\t}\n\t\t}", "first_line_groundtruth": "> pieces = getPiecesOnBoard().stream().filter(piece -> piece.getColor() == color).toList();", "first_line_prediction": "> pieces = getPiecesOnBoard().stream().filter(p -> p.getColor() == color).collect(Collectors.toList());", "match": 0}
{"groundtruth": "p.getColor() == piece.getColor()){", "prediction": " p.getColor() == piece.getColor()){\n\t\t\t\t\tidentical.add(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (Piece p : identical){\n\t\t\t\tp.setX(p.getX() + p1[0] - p2[0]);\n\t\t\t\tp.setY(p.getY() + p1[1] - p2[1]);\n\t\t\t}\n\t\t\tpiece.setX(p2[0]);\n\t\t\tpiece.setY(p2[1]);\n\t\t\t\n\t\t\tif (prom != null){\n\t\t\t\tpromote(piece.getColor(), Piece.Pieces.valueOf(", "first_line_groundtruth": "p.getColor() == piece.getColor()){", "first_line_prediction": " p.getColor() == piece.getColor()){", "match": 0}
{"groundtruth": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){", "prediction": ".WHITE){\n\t\t\t\tthis.whiteChecks.addAll(boardPiece.getChecks(newLegalMoves));\n\t\t\t} else {\n\t\t\t\tthis.blackChecks.addAll(boardPiece.getChecks(newLegalMoves));\n\t\t\t}\n\t\t}", "first_line_groundtruth": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){", "first_line_prediction": ".WHITE){", "match": 0}
{"groundtruth": "if (MapUtils.isNotEmpty(this.properties.getConfig())) {", "prediction": " // check args length\n        if (args.length != FEIGN_ARGS_LEN) {\n            throw new IllegalArgumentException(\"args length must be \" + FEIGN_ARGS_LEN);\n        }\n\n        // check args type\n        if (!(args[FEIGN_REQUEST_ARGS_INDEX] instanceof Request)) {\n            throw new IllegalArgumentException(\"args[0] must be Request\");\n        }\n        if (!(args[FEIGN_REQUEST_OPTION_ARGS_INDEX] instanceof Options)) {\n            throw new IllegalArgumentException(\"args[1] must be Options\");\n        }\n\n        Request request = (Request) args[FEIGN_REQUEST_ARGS_", "first_line_groundtruth": "if (MapUtils.isNotEmpty(this.properties.getConfig())) {", "first_line_prediction": " // check args length", "match": 0}
{"groundtruth": "pos) == recipe.getMode()) {", "prediction": "1, tile.getPos())) {\n                    if (tile.processTime >= tile.processTimeTotal) {\n                        tile.processTime = 0;\n                        tile.clean();\n                        flag = true;\n                    } else {\n                        tile.processTime++;\n                    }\n                } else {\n                    tile.processTime = 0;\n                    tile.clean();\n                    flag = true;\n                }\n            } else {\n                tile.processTime = 0;\n                tile.clean();\n                flag = true;\n            }\n        }\n\n        if (flag) {\n            tile.markDirty();\n            world.updateListeners(pos, state,", "first_line_groundtruth": "pos) == recipe.getMode()) {", "first_line_prediction": "1, tile.getPos())) {", "match": 0}
{"groundtruth": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();", "prediction": "\n\t\t\t\t.filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK)\n\t\t\t\t.filter(piece -> piece.getColor() == color)\n\t\t\t\t.count();\n\t\tint knights = (int)pieces.stream()\n\t\t\t\t.filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT)\n\t\t\t\t.filter(piece -> piece.getColor() == color)\n\t\t\t\t.count();\n\t\tint bishops = (int)pieces.stream()\n\t\t\t\t.filter(piece -> piece.getType().getName() == Piece.PI", "first_line_groundtruth": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();", "first_line_prediction": "", "match": 0}
{"groundtruth": ".wrapperTimeoutOptions(this.properties.getHostConfig(uri.getHost()), uri);", "prediction": ".options(uri);\n                } else if (args.length == FEIGN_ARGS_LEN + 1) {\n                    Request request = (Request) args[FEIGN_REQUEST_ARGS_INDEX];\n                    URI uri = URI.create(request.url());\n                    options = this.options(uri);\n                    args[FEIGN_REQUEST_OPTION_ARGS_INDEX] = options;\n                }\n                if (options != null) {\n                    TimeoutProperty timeoutProperty = this.properties.getConfig().get(options.key());\n                    if (timeoutProperty != null) {\n                        options.readTimeout(timeoutProperty.get", "first_line_groundtruth": ".wrapperTimeoutOptions(this.properties.getHostConfig(uri.getHost()), uri);", "first_line_prediction": ".options(uri);", "match": 0}
{"groundtruth": "[capture.getX()][capture.getY()] = null;", "prediction": "[p2[0]][p1[1]] = null;\n\t\t\t}\n\t\t\t\n\t\t\tthis.board[p1[0]][p1[1]] = null;\n\t\t\tthis.board[p2[0]][p2[1]] = piece;\n\t\t\t\n\t\t\tif (prom != null){\n\t\t\t\tpromote(piece.getColor(), piece.getType());\n\t\t\t}\n\t\t\t\n\t\t\tif (capture != null){\n\t\t\t\tcapture(capture);\n\t\t\t}\n\t\t\t\n\t\t\tif (identical.size() > 0){\n\t\t\t\tfor (Piece p : identical){\n\t\t\t\t\tthis.board[p.getX()][", "first_line_groundtruth": "[capture.getX()][capture.getY()] = null;", "first_line_prediction": "[p2[0]][p1[1]] = null;", "match": 0}
{"groundtruth": "add(BlockRegistry.get(member.crossedFence()), member.chinese + \"\u5341\u5b57\u6805\u680f\");", "prediction": "add(BlockRegistry.get(member.crossedFence()), \"\u7b80\u6613\" + member.chinese + \"", "first_line_groundtruth": "add(BlockRegistry.get(member.crossedFence()), member.chinese + \"\u5341\u5b57\u6805\u680f\");", "first_line_prediction": "add(BlockRegistry.get(member.crossedFence()), \"\u7b80\u6613\" + member.chinese + \"", "match": 0}
{"groundtruth": "display.getMode().toString()));", "prediction": " display.getWorkingMode().toString()));\n        widgets.add(Widgets.createTextWidget(text, new Point(bgBounds.x + 39, bgBounds.y + 18)));\n\n        widgets.add(Widgets.createSlot(new Point(bgBounds.x + 7, bgBounds.y + 29))\n                 .entries(display.getOutputEntries().get(0)).disableBackground());\n\n        widgets.add(Widgets.createTexturedWidget(GUI_TEXTURE, new Rectangle(bgBounds.x + 7, bgBounds.y + 29, 18, 1", "first_line_groundtruth": "display.getMode().toString()));", "first_line_prediction": " display.getWorkingMode().toString()));", "match": 0}
{"groundtruth": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u7f6e\u7269\u67b6\");", "prediction": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u67b6\");\n            }\n        }\n    }", "first_line_groundtruth": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u7f6e\u7269\u67b6\");", "first_line_prediction": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u67b6\");", "match": 0}
{"groundtruth": "member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");", "prediction": "member.fence()), member.chinese + \"", "first_line_groundtruth": "member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");", "first_line_prediction": "member.fence()), member.chinese + \"", "match": 0}
{"groundtruth": "inventory.getStack(0).getNbt();", "prediction": " itemStack.getNbt();\n        nbtCompound.putInt(\"processtime\", this.processtime);\n        nbtCompound.putString(\"mode\", this.mode.toString());\n        return itemStack;\n    }\n\n    @Override\n    public boolean fits(int width, int height) {\n        return true;\n    }\n\n    @Override\n    public ItemStack getOutput() {\n        return this.result;\n    }\n\n    @Override\n    public Identifier getId() {\n        return this.id;\n    }\n\n    @Override\n    public RecipeSerializer<?> getSerializer() {\n        return BlockRegistry.RACK_RECIPE_SERIALIZER", "first_line_groundtruth": "inventory.getStack(0).getNbt();", "first_line_prediction": " itemStack.getNbt();", "match": 0}
{"groundtruth": "add(Widgets.withTooltip(arrow, Text.translatable(\"tip.flotage.rack.processtime\", display.getProcesstime() / 20), text));", "prediction": "add(Widgets.createTextWidget(text, new Point(bgBounds.x + 39, bgBounds.y + 18)));\n\n        widgets.add(Widgets.createSlot(new Point(bgBounds.x + 7, bgBounds.y + 29))\n                 .entries(display.getOutputEntries().get(0)).disableBackground());\n\n        widgets.add(Widgets.createTexturedWidget(GUI_TEXTURE, new Rectangle(bgBounds.x + 7, bgBounds.y + 29, 18, 18), 10, 9));\n\n        widgets", "first_line_groundtruth": "add(Widgets.withTooltip(arrow, Text.translatable(\"tip.flotage.rack.processtime\", display.getProcesstime() / 20), text));", "first_line_prediction": "add(Widgets.createTextWidget(text, new Point(bgBounds.x + 39, bgBounds.y + 18)));", "match": 0}
{"groundtruth": "add(BlockRegistry.get(member.crossedFence()));", "prediction": "add(BlockRegistry.get(member.axe()));\n            pickaxe.add(BlockRegistry.get(member.pickaxe()));\n        }\n    }", "first_line_groundtruth": "add(BlockRegistry.get(member.crossedFence()));", "first_line_prediction": "add(BlockRegistry.get(member.axe()));", "match": 0}
{"groundtruth": ".board.getPlayer() != this.viewPoint && (this.engineMove || !this.overTheBoard)){", "prediction": ".currentSelection != null){\n\t\t\t\t\t\tif (this.currentSelection.equals(not)){\n\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.currentSelection = not;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.currentSelection = not;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.currentSelection != null){\n\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.currentSelection != null){\n\t\t\t\t\tif (this.currentSelection.equals(\"a1\") || this.currentSelection.equals(\"h1", "first_line_groundtruth": ".board.getPlayer() != this.viewPoint && (this.engineMove || !this.overTheBoard)){", "first_line_prediction": ".currentSelection != null){", "match": 0}
{"groundtruth": "this.client.getColor();", "prediction": "0;\n\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t\tthis.currentMoves = null;\n\t\t\t\t\t\t\tthis.draggingPiece = null;\n\t\t\t\t\t\t\tthis.dragX = 0;\n\t\t\t\t\t\t\tthis.dragY = 0;\n\t\t\t\t\t\t\tthis.promotionPiece = null;\n\t\t\t\t\t\t\tthis.engineMove = false;\n\t\t\t\t\t\t\tthis.overTheBoard = false;\n\t\t\t\t\t\t\tthis.gameFinished = false;\n\t\t\t\t\t\t\tthis.engine.setEngine(this.client);\n\t\t\t\t\t\t\tthis.engine.start();\n\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\t\t\tLogger.write", "first_line_groundtruth": "this.client.getColor();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "this.client.getMessage();", "prediction": " this.client.getMessage();\n\t\t\t\t\t\t\t\t\tif (message != null){\n\t\t\t\t\t\t\t\t\t\tif (message.startsWith(\"move\")){\n\t\t\t\t\t\t\t\t\t\t\tString[] split = message.split(\" \");\n\t\t\t\t\t\t\t\t\t\t\tif (split.length == 4){\n\t\t\t\t\t\t\t\t\t\t\t\tString not = split[2];\n\t\t\t\t\t\t\t\t\t\t\t\tint x = Integer.parseInt(split[3]);\n\t\t\t\t\t\t\t\t\t\t\t\tint y = Integer.parseInt(split[1]);\n\t\t\t\t\t\t\t\t\t\t\t\tif (this.board.getBoard()[x][y] != null){\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.board.getBoard()[x][y].setX(x);\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.board.getBoard()[x][", "first_line_groundtruth": "this.client.getMessage();", "first_line_prediction": " this.client.getMessage();", "match": 0}
{"groundtruth": "(this.board.getFEN()+\"\\n\\n\"+this.board.getPGN());", "prediction": "();\n\t\t\t\t\tdata.setEditable(false);\n\t\t\t\t\tdata.setWrapText(true);\n\t\t\t\t\tdata.setPromptText(\"Server data\");\n\t\t\t\t\tdata.setMaxWidth(400);\n\t\t\t\t\tdata.setMaxHeight(400);\n\t\t\t\t\tButton startClient = new Button(\"Start client\");\n\t\t\t\t\tstartClient.setOnAction(ev -> {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tString ip = cip.getText().equals(\"\") ? \"192.168.1.247\" : cip.getText();\n\t\t\t\t\t\t\tint port = cport.getText().equals(\"\") ? ", "first_line_groundtruth": "(this.board.getFEN()+\"\\n\\n\"+this.board.getPGN());", "first_line_prediction": "();", "match": 0}
{"groundtruth": "if (this.board.getBoard()[x][y].getColor() == this.viewPoint){", "prediction": " if (this.board.getBoard()[x][y] != null){\n\t\t\t\t\t\t\t\tthis.premoves.add(new Premove(not, getNotation(e), null));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (this.currentSelection.equals(not)){\n\t\t\t\t\t\t\tif (this.board.getBoard()[x][y] == null && !getPremoves().contains(not)){\n\t\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t\t} else  if (this.board.getBoard()[x][y] != null){\n\t\t\t\t\t\t\t\tthis.premoves.add(new Premove(not", "first_line_groundtruth": "if (this.board.getBoard()[x][y].getColor() == this.viewPoint){", "first_line_prediction": " if (this.board.getBoard()[x][y] != null){", "match": 0}
{"groundtruth": "out.println(this.board.getFEN());", "prediction": "out.println(\"Double click\");\n\t\t\t\t\tif (this.currentSelection != null){\n\t\t\t\t\t\tif (this.currentSelection.length() == 2){\n\t\t\t\t\t\t\tif (this.currentSelection.charAt(0) == 'p' || this.currentSelection.charAt(0) == 'P'){\n\t\t\t\t\t\t\t\tthis.board.getBoard()[(int)(e.getX()/SQUARE_SIZE)][(int)((e.getY()-SPACE)/SQUARE_SIZE)] = new Piece(this.viewPoint, Piece.Pieces.PAWN);\n\t\t\t\t\t\t\t\tthis.board.getBoard()[(int)(e", "first_line_groundtruth": "out.println(this.board.getFEN());", "first_line_prediction": "out.println(\"Double click\");", "match": 0}
{"groundtruth": "(this.board.getBoard()[x][y] == null && !getPremoves().contains(not)){", "prediction": " (this.board.getPiece(x, y) != null){\n\t\t\t\t\t\t\t\tthis.currentSelection = not;\n\t\t\t\t\t\t\t\tthis.currentMoves = this.board.getMoves(this.currentSelection);\n\t\t\t\t\t\t\t\tthis.currentHold = null;\n\t\t\t\t\t\t\t\tthis.moveStart = null;\n\t\t\t\t\t\t\t\tthis.moveEnd = null;\n\t\t\t\t\t\t\t\tthis.draggingPiece = null;\n\t\t\t\t\t\t\t\tthis.dragX = 0;\n\t\t\t\t\t\t\t\tthis.dragY = 0;\n\t\t\t\t\t\t\t\tthis.promotionPiece = null;\n\t\t\t\t\t\t\t\tthis.hold.clear();\n\t\t\t\t\t\t\t\tthis.hold.put(not, this", "first_line_groundtruth": "(this.board.getBoard()[x][y] == null && !getPremoves().contains(not)){", "first_line_prediction": " (this.board.getPiece(x, y) != null){", "match": 0}
{"groundtruth": "this.board.getBoard()[x][y] != null){", "prediction": "this.currentHold != null){\n\t\t\t\t\t\t\tshowMoves = makeUserMove(not, x, y, true, \"Q\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (showMoves){\n\t\t\t\t\t\t\tthis.currentMoves = getValidMoves(this.board.getBoard()[x][y]);\n\t\t\t\t\t\t\tthis.currentHold = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (e.getButton() == MouseButton.SECONDARY){\n\t\t\t\tif (this.currentSelection != null){\n\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t} else if (this.currentHold != null){", "first_line_groundtruth": "this.board.getBoard()[x][y] != null){", "first_line_prediction": "this.currentHold != null){", "match": 0}
{"groundtruth": "this.gameFinished = this.board.isGameFinished();", "prediction": "\n\t\t\t\t\t\t\t\t\t\t\tif (this.board.getBoard()[Integer.parseInt(message.split(\" \")[0])][Integer.parseInt(message.split(\" \")[1])] != null){\n\t\t\t\t\t\t\t\t\t\t\t\tthis.overTheBoard = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif (this.board.getGameTime() == 0){\n\t\t\t\t\t\t\t\t\t\t\t\tthis.gameFinished = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlistener.start();\n\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t", "first_line_groundtruth": "this.gameFinished = this.board.isGameFinished();", "first_line_prediction": "", "match": 0}
{"groundtruth": ")+\"\\n\\n\"+this.board.getPGN());", "prediction": "this.viewPoint));\n\t\t\t\t\tdata.setEditable(false);\n\t\t\t\t\tButton load = new Button(\"Load\");\n\t\t\t\t\tload.setOnAction(ev -> {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tString fen = data.getText();\n\t\t\t\t\t\t\tthis.board = new Board(fen, 180000, 0);\n\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t\tthis.currentMoves = null;\n\t\t\t\t\t\t\tthis.currentHold = null;\n\t\t\t\t\t\t\tthis.premoves.clear();\n\t\t\t\t\t\t\tthis.overTheBoard = true;\n\t\t\t\t\t\t\tthis.engineMove = false;\n\t\t\t\t\t\t\tthis", "first_line_groundtruth": ")+\"\\n\\n\"+this.board.getPGN());", "first_line_prediction": "this.viewPoint));", "match": 0}
{"groundtruth": "= Piece.getType(prom);", "prediction": " = piece.getType().getName() == Piece.PIECE_PAWN ? Piece.Pieces.QUEEN : Piece.Pieces.ROOK;\n\t\t\t\t\tpromote(piece.getColor(), promotion);\n\t\t\t\t\tcastle = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (castle){\n\t\t\t\tthis.whiteRightCastleAllowed = true;\n\t\t\t\tthis.whiteLeftCastleAllowed = true;\n\t\t\t\tthis.blackRightCastleAllowed = true;\n\t\t\t\tthis.blackLeftCastleAllowed = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (identical.size() > 0){\n\t\t\t\tfor (Piece p : identical){", "first_line_groundtruth": "= Piece.getType(prom);", "first_line_prediction": " = piece.getType().getName() == Piece.PIECE_PAWN ? Piece.Pieces.QUEEN : Piece.Pieces.ROOK;", "match": 0}
{"groundtruth": "= this.board.getValidMoves(this.board.getBoard()[x][y]);", "prediction": " = this.board.getMoves(this.currentSelection);\n\t\t\t\t\t\t\tthis.currentHold = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (e.getButton() == MouseButton.SECONDARY){\n\t\t\t\tif (this.currentSelection != null){\n\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\tthis.currentMoves = null;\n\t\t\t\t\tthis.currentHold = null;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tcanvas.setOnMouseDragged(e -> {\n\t\t\tif (Server.clients.size() == 1) return;\n\t\t\tif (", "first_line_groundtruth": "= this.board.getValidMoves(this.board.getBoard()[x][y]);", "first_line_prediction": " = this.board.getMoves(this.currentSelection);", "match": 0}
{"groundtruth": "!this.client.isConnected()){", "prediction": "this.client.isConnected()){\n\t\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tButton quit = new Button(\"Quit\");\n\t\t\t\t\tquit.setOnAction(ev -> {\n\t\t\t\t\t\talert.close();\n\t\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t});\n\t\t\t\t\tlayout.add(sip, 0, 0);\n\t\t\t\t\tlayout.add(sport, 1, 0);\n\t\t\t\t\tlayout.add(cip, 0, 1);\n\t\t\t\t\tlayout.add(cport", "first_line_groundtruth": "!this.client.isConnected()){", "first_line_prediction": "this.client.isConnected()){", "match": 0}
{"groundtruth": "println(this.board.getPGN());", "prediction": "println(this.board.getBoard());\n\t\t\t\t\tSystem.out.println(this.board.getBoard()[(int)(e.getX()/SQUARE_SIZE)][(int)((e.getY()-SPACE)/SQUARE_SIZE)]);\n\t\t\t\t\tSystem.out.println(this.board.getBoard()[(int)(e.getX()/SQUARE_SIZE)][(int)((e.getY()-SPACE)/SQUARE_SIZE)].getColor());\n\t\t\t\t\tSystem.out.println(this.board.getBoard()[(int)(e.getX()/SQUARE_SIZE)][(int)((e.getY()-SPACE", "first_line_groundtruth": "println(this.board.getPGN());", "first_line_prediction": "println(this.board.getBoard());", "match": 0}
{"groundtruth": "this.board.getGameTime(), this.board.getIncrementTime());", "prediction": "0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tButton quit = new Button(\"Quit\");\n\t\t\t\t\tquit.setOnAction(ev -> {\n\t\t\t\t\t\talert.close();\n\t\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t});\n\t\t\t\t\tlayout.add(sip, 0, 0);\n\t\t\t\t\tlayout.add(sport, 1, 0);\n\t\t\t\t\tlayout.add(cip, 0, 1);\n\t\t\t\t\tlayout.add(cport, 1,", "first_line_groundtruth": "this.board.getGameTime(), this.board.getIncrementTime());", "first_line_prediction": "0);", "match": 0}
{"groundtruth": "getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) != null){", "prediction": "prom != null){\n\t\t\t\tint[] p3 = convertNotation(prom);\n\t\t\t\tsetPiece(new Piece(piece.getType(), piece.getColor(), p3[0], p3[1]), p2[0], p2[1]);\n\t\t\t}\n\t\t\t\n\t\t\tif (capture != null){\n\t\t\t\tthis.board[capture.getX()][capture.getY()] = capture;\n\t\t\t\tcapture.setX(p2[0]);\n\t\t\t\tcapture.setY(p2[1]);\n\t\t\t}\n\t\t\t\n\t\t\tif (identical.size() > 0){\n\t\t\t\tfor (Piece p :", "first_line_groundtruth": "getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) != null){", "first_line_prediction": "prom != null){", "match": 0}
{"groundtruth": "if (booking.isApproved()) {", "prediction": " logService.deletedApproved(booking);\n        bookingRepository.deleteById(id);\n    }\n\n    public void approve(Long id) {\n        Booking booking = bookingRepository.findById(id).get();\n        booking.setApproved(true);\n        bookingRepository.save(booking);\n        logService.insertedApproved(booking);\n    }\n\n    public void insertPending(Booking booking) {\n        bookingRepository.save(booking);\n        logService.insertedPending(booking);\n    }\n\n    @Async\n    public void insertPendingAsync(Booking booking) {\n        bookingRepository.save(booking);\n        logService.insertedPending(booking", "first_line_groundtruth": "if (booking.isApproved()) {", "first_line_prediction": " logService.deletedApproved(booking);", "match": 0}
{"groundtruth": "return jdbcProcessors.path(driver, generatedHost, generatedDatabase);", "prediction": " final OddrnPath path = jdbcProcessors.url(generatedHost, generatedDatabase, generatedUser);\n         if (path == null) {\n             throw new IllegalArgumentException(\"Invalid JDBC url.\");\n         }", "first_line_groundtruth": "return jdbcProcessors.path(driver, generatedHost, generatedDatabase);", "first_line_prediction": " final OddrnPath path = jdbcProcessors.url(generatedHost, generatedDatabase, generatedUser);", "match": 0}
{"groundtruth": "bookingRepository.deleteByTimeFinalBefore(LocalDateTime.now());", "prediction": " List<Booking> pending = findPending();\n         for (Booking booking : pending) {\n             if (isBusy(booking)) {\n                 approveBooking(booking);\n             }\n         }\n    }", "first_line_groundtruth": "bookingRepository.deleteByTimeFinalBefore(LocalDateTime.now());", "first_line_prediction": " List<Booking> pending = findPending();", "match": 0}
{"groundtruth": "booking.setTimeRequest(LocalDateTime.now());", "prediction": "\n\n        booking.setTimeInit(initialTime);\n        booking.setTimeFinal(finalTime);\n\n        bookingRepository.save(booking);\n    }", "first_line_groundtruth": "booking.setTimeRequest(LocalDateTime.now());", "first_line_prediction": "", "match": 0}
{"groundtruth": "b.getId());", "prediction": "b);\n        });\n    }\n\n    public void insertPending(Booking booking) {\n        logService.insertedPending(booking);\n        bookingRepository.insertPending(booking);\n    }\n\n    @Async\n    public void insertPendingAsync(Booking booking) {\n        insertPending(booking);\n    }\n\n    @Scheduled(fixedDelay = 10000)\n    public void deleteExpired() {\n        LocalDateTime now = LocalDateTime.now();\n        bookingRepository.deleteByTimeFinalBefore(now);\n    }\n\n    public void insertApproved(Booking booking) {\n        logService.insertedApproved(booking);\n        bookingRepository.insertApproved(booking", "first_line_groundtruth": "b.getId());", "first_line_prediction": "b);", "match": 0}
{"groundtruth": "protectionRune = CustomItems.createProtectionRune();", "prediction": " protectionRune = CustomItems.createProtectionRune();\n                    protectionRune.setAmount(1);\n                    player.getInventory().addItem(protectionRune);\n                }, 20L);\n            } else {\n                player.sendMessage(\"\u00a7cYou need at least \"+requiredLevels+\" levels to buy a Protection Rune!\");\n            }\n        }\n    }", "first_line_groundtruth": "protectionRune = CustomItems.createProtectionRune();", "first_line_prediction": " protectionRune = CustomItems.createProtectionRune();", "match": 0}
{"groundtruth": "bookingService.save(login, subject, lab, date, timeInit, timeFinal);", "prediction": "\n\n        Booking booking = new Booking();\n        LocalDateTime initialTime = LocalDateTime.parse(date + \"T\" + timeInit + \":00\");\n        LocalDateTime finalTime = LocalDateTime.parse(date + \"T\" + timeFinal + \":00\");\n        booking.setProfessor(bookingService.getProfessorByLogin(login));\n        booking.setSubject(subjectService.getSubject(subject));\n        booking.setLab(labService.getLab(lab));\n        booking.setTimeRequest(LocalDateTime.now());\n        booking.setTimeInit(initialTime);\n        booking.setTimeFinal(finalTime);\n       ", "first_line_groundtruth": "bookingService.save(login, subject, lab, date, timeInit, timeFinal);", "first_line_prediction": "", "match": 0}
{"groundtruth": "ItemStack protectionRune = CustomItems.createProtectionRune();", "prediction": " ItemStack protectionRune = new ItemStack(CustomItems.PROTECTION_RUNE);\n         ItemMeta protectionRuneMeta = protectionRune.getItemMeta();\n         if (protectionRuneMeta != null) {\n             protectionRuneMeta.setDisplayName(\"\u00a76Protection Rune\");\n             protectionRune.setItemMeta(protectionRuneMeta);\n         }\n         shop.setItem(PROTECTION_RUNE_SLOT, protectionRune);", "first_line_groundtruth": "ItemStack protectionRune = CustomItems.createProtectionRune();", "first_line_prediction": " ItemStack protectionRune = new ItemStack(CustomItems.PROTECTION_RUNE);", "match": 0}
{"groundtruth": "(professorService.getProfessorByLogin(login));", "prediction": "(professorService.findByLogin(login));\n        booking.setSubject(subjectService.findBySubject(subject));\n        booking.setLab(labService.findByLab(lab));\n        booking.setTimeInit(initialTime);\n        booking.setTimeFinal(finalTime);\n        bookingRepository.save(booking);\n    }", "first_line_groundtruth": "(professorService.getProfessorByLogin(login));", "first_line_prediction": "(professorService.findByLogin(login));", "match": 0}
{"groundtruth": "int count = bookingRepository.isBusy(b.getLab().getId(), b.getTimeInit(), b.getTimeFinal());", "prediction": " if (b.isApproved()) {\n                 return false;\n             } else {\n                 return true;\n             }\n        }).orElse(false);\n    }\n\n    public void approve(Long id) {\n        Booking booking = bookingRepository.findById(id).get();\n        booking.setApproved(true);\n        bookingRepository.save(booking);\n        logService.insertedApproved(booking);\n    }\n\n    public void insert(Booking booking) {\n        bookingRepository.save(booking);\n        logService.insertedPending(booking);\n    }\n\n    @Async\n    public void processPending() {\n        List<Booking> pending = findPending();", "first_line_groundtruth": "int count = bookingRepository.isBusy(b.getLab().getId(), b.getTimeInit(), b.getTimeFinal());", "first_line_prediction": " if (b.isApproved()) {", "match": 0}
{"groundtruth": "booking.setTimeInit(initialTime);", "prediction": "\n\n        if (isBusy(booking)) {\n            booking.setTimeInit(initialTime);\n            booking.setTimeFinal(finalTime);\n            bookingRepository.save(booking);\n        } else {\n            booking.setTimeInit(initialTime);\n            booking.setTimeFinal(finalTime);\n            bookingRepository.save(booking);\n            logService.insertedPending(booking);\n        }\n    }", "first_line_groundtruth": "booking.setTimeInit(initialTime);", "first_line_prediction": "", "match": 0}
{"groundtruth": ".BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());", "prediction": ".BOLD + \"Max Enhancement\");\n        } else {\n            return Component.text(Utils.getEnhancementInfo(enhancementLevel).getEnhanceColor() + \"\" + ChatColor.BOLD + \"Enhancement \" + enhancementLevel);\n        }\n    }\n\n    public static EnhancementInfo getEnhancementInfo(int enhancementLevel) {\n        if (enhancementLevel > 15) {\n            return new EnhancementInfo(ChatColor.RED, \"Max Enhancement\");\n        } else {\n            return new EnhancementInfo(ChatColor.GREEN, \"Enhancement \" + enhancementLevel);\n        }\n    }\n\n   ", "first_line_groundtruth": ".BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());", "first_line_prediction": ".BOLD + \"Max Enhancement\");", "match": 0}
{"groundtruth": "), b.getTimeInit(), b.getTimeFinal());", "prediction": " ), b.getTime_initial( ), b.getTime_final( ));\n            return count > 0;\n        }).orElse(false);\n    }\n\n    public Booking save(Booking booking) {\n        if (booking.isApproved()) {\n            logService.insertedApproved(booking);\n        } else {\n            logService.insertedPending(booking);\n        }\n        return bookingRepository.save(booking);\n    }\n\n    @Async\n    public void approve(Long id) {\n        Booking booking = bookingRepository.findById(id).get();\n        booking.setApproved(true);\n        bookingRepository.save(booking);\n        log", "first_line_groundtruth": "), b.getTimeInit(), b.getTimeFinal());", "first_line_prediction": " ), b.getTime_initial( ), b.getTime_final( ));", "match": 0}
{"groundtruth": ", b.getTimeInit(), b.getTimeFinal());", "prediction": " + \"\", b.getTimeStart(), b.getTimeEnd());\n            return count > 0;\n        }).orElse(false);\n    }\n\n    public Booking save(Booking booking) {\n        if (booking.isApproved()) {\n            logService.insertedApproved(booking);\n        } else {\n            logService.insertedPending(booking);\n        }\n        return bookingRepository.save(booking);\n    }\n\n    @Async\n    public void approve(Long id) {\n        Booking booking = bookingRepository.findById(id).get();\n        booking.setApproved(true);\n        bookingRepository.save(booking);\n        logService.inserted", "first_line_groundtruth": ", b.getTimeInit(), b.getTimeFinal());", "first_line_prediction": " + \"\", b.getTimeStart(), b.getTimeEnd());", "match": 0}
{"groundtruth": "setSubject(subjectService.getSubject(subject));", "prediction": "setSubject(subjectService.getSubjectByName(subject));\n        booking.setLab(labService.getLabByName(lab));\n        booking.setTimeInit(initialTime);\n        booking.setTimeFinal(finalTime);\n        bookingRepository.save(booking);\n    }", "first_line_groundtruth": "setSubject(subjectService.getSubject(subject));", "first_line_prediction": "setSubject(subjectService.getSubjectByName(subject));", "match": 0}
{"groundtruth": "(Environment.getProgram(), taintFunction);", "prediction": "(taintFunction);\n        if (decompileResults == null) {\n            System.out.println(\"Error: decompile function failed\");\n            return;\n        }\n\n        PcodeOpASTIterator pcodeOpASTIterator = decompileResults.getDecompiledFunction().getListing().getPcodeOpASTIterator();\n        while (pcodeOpASTIterator.hasNext()) {\n            PcodeOpAST tmp = pcodeOpASTIterator.next();\n            if (tmp.getMnemonic().equals(\"CALL\")) {\n                PcodeOpAST[] inputs = tmp.getInputs();\n                for (PcodeOpAST input: inputs)", "first_line_groundtruth": "(Environment.getProgram(), taintFunction);", "first_line_prediction": "(taintFunction);", "match": 0}
{"groundtruth": "analyzer.startAnalyzing();", "prediction": "\n\n            // analyzer.analyze();\n            // analyzer.save();\n            // analyzer.saveMeta();\n            // analyzer.saveConnect();\n            // analyzer.saveMetaConnect();\n            // analyzer.saveMetaConnectResult();\n            // analyzer.saveMetaConnectResult(true);\n            // analyzer.saveMetaConnectResult(false);\n            // analyzer.saveMetaConnectResult(true, true);\n            // analyzer.saveMetaConnectResult(true, false);\n            // analyzer.saveMetaConnectResult(false, true);\n            // analyzer.saveMetaConnectResult(false, false);\n            // analyzer.saveMetaConnectResult(true,", "first_line_groundtruth": "analyzer.startAnalyzing();", "first_line_prediction": "", "match": 0}
{"groundtruth": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), connAdd);", "prediction": "qlConnect = null;\n        Function qlConnectSlot = null;\n        Function qlConnectSignal = null;\n        Function qlConnectSignalSlot = null;\n        Function qlConnectSignalSlotSlot = null;\n        Function qlConnectSignalSlotSlotSlot = null;\n        Function qlConnectSignalSlotSlotSlotSlot = null;\n        Function qlConnectSignalSlotSlotSlotSlotSlot = null;\n        Function qlConnectSignalSlotSlotSlotSlotSlotSlot = null;\n        Function qlConnectSignalSlotSlotSlotSlotSlotSlotSlot = null;\n        Function qlConnectSignalSlotSlotSlotSlotSlotSlotSlotSlot", "first_line_groundtruth": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), connAdd);", "first_line_prediction": "qlConnect = null;", "match": 0}
{"groundtruth": ".decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));", "prediction": ".decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalExp));\n            if (decompileResults == null)\n                return;\n            highFunction = decompileResults.getHighFunction();\n            Iterator<PcodeOpAST> pcodeOpASTIterator2 = highFunction.getPcodeOps(signalExp);\n            PcodeOpAST pcodeAST2 = null;\n            while (pcodeOpASTIterator2.hasNext()) {\n                PcodeOpAST tmp = pcodeOpASTIterator2.next();\n                if (tmp.getMnemonic().equals(\"CALL\")) {\n                    pcodeAST2", "first_line_groundtruth": ".decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));", "first_line_prediction": ".decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalExp));", "match": 0}
{"groundtruth": "decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));", "prediction": "decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalExp));\n            if (decompileResults == null)\n                return;\n            highFunction = decompileResults.getHighFunction();\n            Iterator<PcodeOpAST> pcodeOpASTIterator2 = highFunction.getPcodeOps(signalExp);\n            PcodeOpAST pcodeAST2 = null;\n            while (pcodeOpASTIterator2.hasNext()) {\n                PcodeOpAST tmp = pcodeOpASTIterator2.next();\n                if (tmp.getMnemonic().equals(\"CALL\")) {\n                    pcodeAST2 =", "first_line_groundtruth": "decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));", "first_line_prediction": "decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalExp));", "match": 0}
{"groundtruth": "= FileUtil.readFromFile(configPath);", "prediction": " = FileUtil.readFromFile(configPath);\n            JSONObject json = new JSONObject(config);\n            Configs.ANALYZE_CONNECT = json.getBoolean(\"analyzeConnect\");\n            Configs.ANALYZE_META = json.getBoolean(\"analyzeMeta\");\n            Configs.ANALYZE_ALL = json.getBoolean(\"analyzeAll\");\n            Configs.ANALYZE_ALL_META = json.getBoolean(\"analyzeAllMeta\");\n            Configs.ANALYZE_ALL_CONNECT = json.getBoolean(\"analyzeAllConnect\");\n            Configs.ANALYZE_ALL_META_CONNECT = json.getBoolean(\"", "first_line_groundtruth": "= FileUtil.readFromFile(configPath);", "first_line_prediction": " = FileUtil.readFromFile(configPath);", "match": 0}
{"groundtruth": "jo.getProperty(name).cast(JSFunction.class);", "prediction": " context.createJSFunction(object, simpleMethod);\n      JSValue result = function.call(context, parameters);\n      return resultAdapter.fromJSValue(context, result);\n    });\n  }\n\n  @Override\n  public boolean isInstance(Object value) {\n    return rawType.isInstance(value);\n  }\n\n  @Override\n  public boolean isAssignable(Type type) {\n    return rawType.isAssignableFrom(JavaTypes.getRawType(type));\n  }\n\n  @Override\n  public boolean isNullable() {\n    return true;\n  }\n\n  @Override\n  public boolean isPrimitive() {\n    return false;\n  }", "first_line_groundtruth": "jo.getProperty(name).cast(JSFunction.class);", "first_line_prediction": " context.createJSFunction(object, simpleMethod);", "match": 0}
{"groundtruth": "DecompileResults decompileResults = Decompiler.decompileFuncRegister(Environment.getProgram(), currentFunc);", "prediction": " // locate block at the target function\n        CodeBlock[] currentBlocks = BlockUtil.locateBlockWithAddress(program, currentFunc.getEntryPoint());\n        if (currentBlocks == null || currentBlocks.length == 0) {\n            System.out.println(\"Error: block not found for address: \" + currentFunc.getEntryPoint());\n            return;\n        }\n\n        CodeBlock currentBlock = currentBlocks[0];\n        List<CodeBlockReference> refs = currentBlock.getReferencesFrom();\n        for (CodeBlockReference ref: refs) {\n            if (ref.getReferenceType() == CodeBlockReference.REF_", "first_line_groundtruth": "DecompileResults decompileResults = Decompiler.decompileFuncRegister(Environment.getProgram(), currentFunc);", "first_line_prediction": " // locate block at the target function", "match": 0}
{"groundtruth": "enhancementLevel).getEnhanceColor() + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());", "prediction": "enhancementLevel).getEnhanceColor() + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());\n        }\n    }\n\n    public static EnhancementInfo getEnhancementInfo(int enhancementLevel) {\n        if (enhancementLevel > 15) {\n            return new EnhancementInfo(ChatColor.GREEN, \"Enhancement\");\n        } else {\n            return new EnhancementInfo(ChatColor.YELLOW, \"Enhancement\");\n        }\n    }\n\n    public static void applyEnchantments(Enhancing plugin, ItemStack item, int enhancementLevel) {\n        if (isWeapon(item))", "first_line_groundtruth": "enhancementLevel).getEnhanceColor() + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());", "first_line_prediction": "enhancementLevel).getEnhanceColor() + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());", "match": 0}
{"groundtruth": "getFunctionWith(Environment.getProgram(), inputs[0].getAddress());", "prediction": "getFunctionWith(Environment.getProgram(), op.getSeqnum().getTarget());\n                    String funcName = func.getName();\n                    jsonArray.put(funcName);\n                }\n                else if (mnem.equals(\"STORE\")) {\n                    String expOfSrc = PCodeUtil.evaluateVarNode(inputs[2]);\n                    if (expOfSrc!= null && expOfSrc.contains(taintExpression)) {\n                        String expToAdd = PCodeUtil.evaluateVarNode(inputs[1]);\n                        jsonArray.put(expToAdd);\n                    }\n                }\n                else if (mnem.equals(\"LOAD\"))", "first_line_groundtruth": "getFunctionWith(Environment.getProgram(), inputs[0].getAddress());", "first_line_prediction": "getFunctionWith(Environment.getProgram(), op.getSeqnum().getTarget());", "match": 0}
{"groundtruth": "CustomItems.createBlackStoneWeapon();", "prediction": " CustomItems.createWeapon(amount);\n            } else if (itemType.equals(\"armor\")) {\n                itemToGive =  CustomItems.createArmor(amount);\n            } else if (itemType.equals(\"memoryfragment\")) {\n                itemToGive =  CustomItems.createMemoryFragment(amount);\n            } else {\n                player.sendMessage(\"Invalid item type. Please enter a valid item type.\");\n                return true;\n            }\n\n            if (itemToGive == null) {\n                player.sendMessage(\"An error occurred while creating the item.\");\n                return true;\n            }\n\n            player.getInventory().addItem(item", "first_line_groundtruth": "CustomItems.createBlackStoneWeapon();", "first_line_prediction": " CustomItems.createWeapon(amount);", "match": 0}
{"groundtruth": "jo.getJavaObject();", "prediction": " Proxy.newProxyInstance(rawType.getClassLoader(), new Class<?>[] { rawType }, (proxy, method, args) -> {\n      JavaMethod methodInfo = methods.get(method.getName());\n      if (methodInfo == null) return null;\n      return methodInfo.invoke(object, context, args);\n    });\n\n    return new JSValueHolder(object, JS_VALUE_HOLDER_TAG);\n  }\n\n  @Override\n  public boolean isNullable() {\n    return true;\n  }\n\n  @Override\n  public boolean isPrimitive() {\n    return false;\n  }\n\n  @Override\n  public boolean isAssignable(", "first_line_groundtruth": "jo.getJavaObject();", "first_line_prediction": " Proxy.newProxyInstance(rawType.getClassLoader(), new Class<?>[] { rawType }, (proxy, method, args) -> {", "match": 0}
{"groundtruth": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();", "prediction": " protectionStone = CustomItems.createProtectionStone();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), protectionStone);\n        }\n    }\n\n    private boolean isHostileMob(LivingEntity entity) {\n        return entity instanceof Player || entity instanceof Monster || entity instanceof Animals;\n    }\n\n    private boolean shouldDropBlackStone() {\n        return random.nextDouble() < blackStoneDropChance;\n    }\n\n    private boolean shouldDropConcentratedBlackStone() {\n        return random.nextDouble() < concentratedBlackStoneDropChance;\n    }\n\n    private boolean shouldDropProtectionStone() {", "first_line_groundtruth": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();", "first_line_prediction": " protectionStone = CustomItems.createProtectionStone();", "match": 0}
{"groundtruth": "CustomItems.createConcentratedMagicalBlackStoneWeapon();", "prediction": " CustomItems.createCobaltBlackStoneWeapon();\n            } else if (itemType.equals(\"carmor\")) {\n                itemToGive =  CustomItems.createCobaltBlackStoneArmor();\n            } else if (itemType.equals(\"protectionrune\")) {\n                itemToGive = CustomItems.createProtectionRune();\n            } else if (itemType.equals(\"memoryfragment\")) {\n                itemToGive = CustomItems.createMemoryFragment();\n            } else {\n                player.sendMessage(\"Invalid item type. Please enter a valid item type.\");\n                return true;\n            }\n\n            itemToGive.setAmount(", "first_line_groundtruth": "CustomItems.createConcentratedMagicalBlackStoneWeapon();", "first_line_prediction": " CustomItems.createCobaltBlackStoneWeapon();", "match": 0}
{"groundtruth": "itemToGive = CustomItems.createProtectionRune();", "prediction": " itemToGive = CustomItems.createProtectionRune();\n            } else {\n                player.sendMessage(\"Invalid item type. Please enter a valid item type.\");\n                return true;\n            }\n\n            itemToGive.setAmount(amount);\n            targetPlayer.getInventory().addItem(itemToGive);\n            player.sendMessage(\"You have given \" + amount + \" \" + itemType + \" to \" + targetPlayer.getName() + \".\");\n            return true;\n        }\n\n        player.sendMessage(\"Usage: /giveitems <player> <item type> <amount>\");\n        return true;\n    }", "first_line_groundtruth": "itemToGive = CustomItems.createProtectionRune();", "first_line_prediction": " itemToGive = CustomItems.createProtectionRune();", "match": 0}
{"groundtruth": "? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();", "prediction": " ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), blackStone);\n        }\n        if (isHostileMob(entity) && shouldDropProtectionStone()) {\n            ItemStack protectionStone = CustomItems.createProtectionRune();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), protectionStone);\n        }\n    }\n\n    private boolean isHostileMob(LivingEntity entity) {\n        return entity instanceof Player || entity instanceof Monster || entity instanceof Animals;", "first_line_groundtruth": "? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();", "first_line_prediction": " ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();", "match": 0}
{"groundtruth": "25, enhanceGUI.createEnhanceButton());", "prediction": "25, EnhanceGUI.createEnhanceButton());\n        }, 20L);\n    }\n\n    private void enhanceItem(Player player, Inventory inventory, int itemSlot, int blackStoneSlot) {\n        ItemStack itemToEnhance = inventory.getItem(itemSlot);\n        ItemStack blackStone = inventory.getItem(blackStoneSlot);\n\n        if (itemToEnhance == null || itemToEnhance.getType() == Material.AIR || blackStone == null || blackStone.getType() == Material.AIR) {\n            return;\n        }\n\n        ItemMeta blackStoneMeta = blackStone.getItemMeta();\n        if", "first_line_groundtruth": "25, enhanceGUI.createEnhanceButton());", "first_line_prediction": "25, EnhanceGUI.createEnhanceButton());", "match": 0}
{"groundtruth": ".nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();", "prediction": ".nextBoolean() ? CustomItems.createProtectionStone() : CustomItems.createProtectionStone();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), protectionStone);\n        }\n    }\n\n    private boolean isHostileMob(LivingEntity entity) {\n        return entity instanceof Player || entity instanceof Monster || entity instanceof Animals;\n    }\n\n    private boolean shouldDropBlackStone() {\n        return random.nextDouble() < blackStoneDropChance;\n    }\n\n    private boolean shouldDropConcentratedBlackStone() {\n        return random.nextDouble() < concentratedBlackStoneDropChance;\n   ", "first_line_groundtruth": ".nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();", "first_line_prediction": ".nextBoolean() ? CustomItems.createProtectionStone() : CustomItems.createProtectionStone();", "match": 0}
{"groundtruth": "add(inputBox1.getVBox());", "prediction": "add(inputBox1);\n\n        //Crear la segunda instancia de InputBox con el valor de ComboBox \"EUR\"\n        counter++;\n        InputBox inputBox2 = new InputBox();\n        inputBox2.setId(counter);\n        inputBox2.getComboBox().setValue(\"EUR\");\n        inputBox2.getTextField().setText(\"1\");\n        inputBoxes.add(inputBox2);\n        subContainer.getChildren().add(inputBox2);\n\n        //Crear la tercera instancia de InputBox con el valor de ComboBox \"GBP\"\n        counter++;\n        InputBox inputBox3 =", "first_line_groundtruth": "add(inputBox1.getVBox());", "first_line_prediction": "add(inputBox1);", "match": 0}
{"groundtruth": "nextBoolean() ? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();", "prediction": "nextBoolean() ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), blackStone);\n        }\n        if (isHostileMob(entity) && shouldDropProtectionStone()) {\n            ItemStack protectionStone = CustomItems.createProtectionRune();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), protectionStone);\n        }\n    }\n\n    private boolean isHostileMob(LivingEntity entity) {\n        return entity instanceof Player || entity instanceof Monster || entity instanceof", "first_line_groundtruth": "nextBoolean() ? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();", "first_line_prediction": "nextBoolean() ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();", "match": 0}
{"groundtruth": "inputBox1.setInitialConversion(false);", "prediction": "\n\n    }\n\n    public static void setMainContainer(VBox mainContainer) {\n        MainController.mainContainer = mainContainer;\n    }\n\n    public static void setSubContainer(VBox subContainer) {\n        MainController.subContainer = subContainer;\n    }\n\n    public static void setInputBoxes(List<InputBox> inputBoxes) {\n        MainController.inputBoxes = inputBoxes;\n    }\n\n    public static List<InputBox> getInputBoxes() {\n        return inputBoxes;\n    }\n\n    public static void setCounter(int counter) {\n        MainController.counter = counter;\n    }\n\n    public static int", "first_line_groundtruth": "inputBox1.setInitialConversion(false);", "first_line_prediction": "", "match": 0}
{"groundtruth": "inputBox1.startConversion();", "prediction": "\n\n    }\n\n    public static void setMainContainer(VBox mainContainer) {\n        MainController.mainContainer = mainContainer;\n    }\n\n    public static void setSubContainer(VBox subContainer) {\n        MainController.subContainer = subContainer;\n    }\n\n    public static void setInputBoxes(List<InputBox> inputBoxes) {\n        MainController.inputBoxes = inputBoxes;\n    }\n\n    public static void setBaseIndex(int baseIndex) {\n        MainController.baseIndex = baseIndex;\n    }", "first_line_groundtruth": "inputBox1.startConversion();", "first_line_prediction": "", "match": 0}
{"groundtruth": "inputBox1.setInitialConversion(true);", "prediction": " initialConversion();\n    }\n\n    public static void initialConversion() {\n        for (InputBox inputBox : inputBoxes) {\n            inputBox.startConversion();\n        }\n    }\n\n    public static void startConversion() {\n        for (InputBox inputBox : inputBoxes) {\n            inputBox.startConversion();\n        }\n    }\n\n    public static void handleDeleteButton() {\n        for (InputBox inputBox : inputBoxes) {\n            inputBox.handleDeleteButton();\n        }\n    }\n\n    public static void handleDeleteButton(int id) {\n        for (InputBox inputBox : inputBoxes) {\n            if (input", "first_line_groundtruth": "inputBox1.setInitialConversion(true);", "first_line_prediction": " initialConversion();", "match": 0}
{"groundtruth": "professorService.deleteById(id);", "prediction": " professorService.deleteById(id);\n    }\n\n    @GetMapping(\"/findAll\")\n    public List<Professor> findAll(){\n        return professorService.findAll();\n    }\n\n    @GetMapping(\"/findSubjectsByProfessor/{id}\")\n    public List<Professor> findSubjectsByProfessorId(@PathVariable Long id){\n        return professorService.findSubjectsByProfessorId(id);\n    }\n\n    @GetMapping(\"/{id}\")\n    public Professor find(@PathVariable long id){\n        return professorService.find(id);\n    }", "first_line_groundtruth": "professorService.deleteById(id);", "first_line_prediction": " professorService.deleteById(id);", "match": 0}
{"groundtruth": "List<Booking> bookings = bookingRepository.findByProfessor(id);", "prediction": " List<BookingDTO> bookings = new ArrayList<>();\n         List<Booking> bookingsList = bookingRepository.findBookingsByProfessorId(id);\n         for (Booking booking : bookingsList) {\n             BookingDTO bookingDTO = new BookingDTO(booking);\n             bookingDTO.setProfessor(professorClient.findById(booking.getProfessorId()).get());\n             bookingDTO.setLab(labClient.findById(booking.getLabId()).get());\n             bookings.add(bookingDTO);\n         }\n         return bookings;\n    }\n\n    public List<BookingDTO> findById", "first_line_groundtruth": "List<Booking> bookings = bookingRepository.findByProfessor(id);", "first_line_prediction": " List<BookingDTO> bookings = new ArrayList<>();", "match": 0}
{"groundtruth": "bookingRepository.approve(id);", "prediction": "\n\n        if (b.isApproved()) {\n            return ResponseEntity.status(HttpStatus.CONFLICT).body(\"This booking is already approved.\");\n        }\n\n        b.setApproved(true);\n        bookingRepository.update(b);\n        logService.updatedApproved(bookingRepository.findById(b.getId()).get());\n        return ResponseEntity.ok(\"Booking approved.\");\n    }\n\n    public List<BookingDTO> findAll() {\n        List<BookingDTO> bookings = new ArrayList<>();\n        for (Booking booking : bookingRepository.findAll()) {\n            bookings.add(new BookingDTO(booking));\n        }\n        return book", "first_line_groundtruth": "bookingRepository.approve(id);", "first_line_prediction": "", "match": 0}
{"groundtruth": "InputBox.setBaseIndex(1);", "prediction": "\n\n    }\n\n    public static void setMainContainer(VBox mainContainer) {\n        MainController.mainContainer = mainContainer;\n    }\n\n    public static void setSubContainer(VBox subContainer) {\n        MainController.subContainer = subContainer;\n    }\n\n    public static void setInputBoxes(List<InputBox> inputBoxes) {\n        MainController.inputBoxes = inputBoxes;\n    }\n\n    public static List<InputBox> getInputBoxes() {\n        return inputBoxes;\n    }\n\n    public static void setCounter(int counter) {\n        MainController.counter = counter;\n    }\n\n    public static int", "first_line_groundtruth": "InputBox.setBaseIndex(1);", "first_line_prediction": "", "match": 0}
{"groundtruth": "newComponent.getVBox().setId(String.valueOf(counter));", "prediction": " //Crear la instancia de InputBox con el valor de ComboBox \"PEN\"\n        newComponent.getComboBox().setValue(\"PEN\");\n        newComponent.getTextField().setText(\"1\");\n        newComponent.setInitialConversion(false);\n        newComponent.startConversion();\n        newComponent.setInitialConversion(false);\n        newComponent.getComboBox().setValue(\"USD\");\n        newComponent.getTextField().setText(\"1\");\n        newComponent.startConversion();\n        newComponent.setInitialConversion(false);\n        newComponent.getComboBox().setValue(\"PEN\");\n        newComponent.getTextField().setText(\"1\");\n        newComponent", "first_line_groundtruth": "newComponent.getVBox().setId(String.valueOf(counter));", "first_line_prediction": " //Crear la instancia de InputBox con el valor de ComboBox \"PEN\"", "match": 0}
{"groundtruth": "String exchangeRate = conversion.getExchangeRate();", "prediction": "\n\n        if (result != null) {\n            Platform.runLater(() -> {\n                inputBox.setResult(result);\n                inputBox.setResultColor(Color.GREEN);\n                inputBox.setResultLabel(\"Resultado:\");\n                inputBox.setResultLabelColor(Color.GREEN);\n                inputBox.setResultLabelVisible(true);\n                inputBox.setResultLabelVisible(false);\n                inputBox.setResultLabelVisible(true);\n                inputBox.setResultLabelVisible(false);\n                inputBox.setResultLabelVisible(true);\n                inputBox.setResultLabelVisible(false);\n               ", "first_line_groundtruth": "String exchangeRate = conversion.getExchangeRate();", "first_line_prediction": "", "match": 0}
{"groundtruth": "Errors.noConexion();", "prediction": " return \"no hay internet\";\n        }\n    }\n\n    public String convertOffline(String exchangeRate, String currencyInput) {\n        Conversion.exchangeRate = exchangeRate;\n        OkHttpClient client = new OkHttpClient().newBuilder().build();\n        String responseStr;\n        try {\n            Request request = new Request.Builder()\n                    .url(String.format(\"https://api.exchangerate.host/latest?base=%s\", currencyInput))\n                    .build();\n            Response response = client.newCall(request).execute();\n            assert response.body() != null;\n            responseStr = response.body().string();", "first_line_groundtruth": "Errors.noConexion();", "first_line_prediction": " return \"no hay internet\";", "match": 0}
{"groundtruth": "inputBox.getComboBox().getValue());", "prediction": "1);\n        if (result != null) {\n            inputBox.setResult(result);\n            inputBox.setResultColor(Color.GREEN);\n            isFound = true;\n        } else {\n            inputBox.setResult(\"No se encontr\u00f3 la conversi\u00f3n\");\n            inputBox.setResultColor(Color.RED);\n            isFound = false;\n        }\n    }\n\n    public boolean isFound() {\n        return isFound;\n    }", "first_line_groundtruth": "inputBox.getComboBox().getValue());", "first_line_prediction": "1);", "match": 0}
{"groundtruth": "String resultOffline = conversion.convertOffline(exchangeRateOffline, baseTextField);", "prediction": " Platform.runLater(() -> {\n                             inputBox.setTextField(\"offline\");\n                             inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" | Fecha: \" + date);\n                         });\n                    }\n                });\n            });\n        }\n    }", "first_line_groundtruth": "String resultOffline = conversion.convertOffline(exchangeRateOffline, baseTextField);", "first_line_prediction": " Platform.runLater(() -> {", "match": 0}
{"groundtruth": "inputBox.setTextField(resultOffline);", "prediction": " Platform.runLater(() -> {\n                             inputBox.setTextField(resultOffline);\n                             inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" | Fecha: \" + date);\n                         });\n                    }\n                });\n            });\n        }\n    }", "first_line_groundtruth": "inputBox.setTextField(resultOffline);", "first_line_prediction": " Platform.runLater(() -> {", "match": 0}
{"groundtruth": "startsWith(baseComboBox) && key.toString().endsWith(inputBox.getComboBox().getValue())) {", "prediction": "contains(baseComboBox + \"->\" + inputBox.getComboBox().getValue())) {\n                        properties.remove(key);\n                    }\n                });\n                try (OutputStream outputStream = new FileOutputStream(\"app.properties\")) {\n                    properties.store(outputStream, \"Application Properties\");\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n                inputBox.setTextField(\"offline\");\n                inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRate);\n            });\n        }\n    }", "first_line_groundtruth": "startsWith(baseComboBox) && key.toString().endsWith(inputBox.getComboBox().getValue())) {", "first_line_prediction": "contains(baseComboBox + \"->\" + inputBox.getComboBox().getValue())) {", "match": 0}
{"groundtruth": "inputBox.getComboBox().getValue() + \" : \" + exchangeRate);", "prediction": " inputBox.getComboBox().getValue() + \" = \" + exchangeRate);\n                }\n            );\n        } else {\n            Platform.runLater(() -> {\n                    inputBox.setTextField(result);\n                    inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" +  inputBox.getComboBox().getValue() + \" = \" + \"offline\");\n                }\n            );\n        }\n    }", "first_line_groundtruth": "inputBox.getComboBox().getValue() + \" : \" + exchangeRate);", "first_line_prediction": " inputBox.getComboBox().getValue() + \" = \" + exchangeRate);", "match": 0}
{"groundtruth": "inputBox.getLabel2().setTextFill(Color.RED);", "prediction": " inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" | Fecha: \" + date);\n                    }\n                });\n            });\n        }\n    }", "first_line_groundtruth": "inputBox.getLabel2().setTextFill(Color.RED);", "first_line_prediction": " inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" | Fecha: \" + date);", "match": 0}
{"groundtruth": "inputBox.setTextField(result);", "prediction": " inputBox.getTextField().setText(result);\n                     inputBox.getTextField().setStyle(\"-fx-text-fill: \" + Color.web(exchangeRate));\n                 }\n            );\n        } else {\n            Platform.runLater(() -> {\n                     inputBox.getTextField().setText(\"offline\");\n                     inputBox.getTextField().setStyle(\"-fx-text-fill: red\");\n                 }\n            );\n        }\n    }", "first_line_groundtruth": "inputBox.setTextField(result);", "first_line_prediction": " inputBox.getTextField().setText(result);", "match": 0}
{"groundtruth": "inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" ) \u26a0\");", "prediction": " inputBox.setLabel2(\" | Modo sin conexi\u00f3n", "first_line_groundtruth": "inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" ) \u26a0\");", "first_line_prediction": " inputBox.setLabel2(\" | Modo sin conexi\u00f3n", "match": 0}
{"groundtruth": "inputBox.setLabel2(\" | No hay datos guardados \u26a0\");", "prediction": " inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \"", "first_line_groundtruth": "inputBox.setLabel2(\" | No hay datos guardados \u26a0\");", "first_line_prediction": " inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \"", "match": 0}
{"groundtruth": "Node node : MainController.getVBox().getChildren()) {", "prediction": "InputBox inputBox : inputBoxes) {\n            if (inputBox.getId() == Integer.parseInt(activeInput)) {\n                inputBox.textField.setText(\"\");\n                inputBox.comboBox.setValue(\"USD\");\n                inputBox.textField.requestFocus();\n                break;\n            }\n        }\n    }\n\n    public void startConversion() {\n        if (textField.getText().equals(\"\")) {\n            return;\n        }\n        if (initialConversion) {\n            return;\n        }\n        initialConversion = true;\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        executorService.execute(() -> {\n            try {\n                String active", "first_line_groundtruth": "Node node : MainController.getVBox().getChildren()) {", "first_line_prediction": "InputBox inputBox : inputBoxes) {", "match": 0}
{"groundtruth": "= Utils.addCurrencies();", "prediction": " = Utils.getCurrencies();\n        for (String currency : currencies) {\n            comboBox.getItems().add(currency);\n        }\n\n        comboBox.setPromptText(\"Select a currency\");\n\n        vBox.setAlignment(Pos.CENTER);\n        vBox.setPadding(new Insets(0.0, 0.0, 0.0, 0.0));\n\n        inputBoxes.add(this);\n        vBox.setId(String.valueOf(counter));\n        vBox.setPrefHeight(54.0);\n        vBox.setPrefWidth(350.0);", "first_line_groundtruth": "= Utils.addCurrencies();", "first_line_prediction": " = Utils.getCurrencies();", "match": 0}
{"groundtruth": "modified |= mySettingsComponent.isAutoPopup() != settings.autoPopup;", "prediction": " return modified;\n    }\n\n    @Override\n    public void apply() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        settings.OPENAI_API_KEY = mySettingsComponent.get_OPENAI_API_KEY();\n    }\n\n    @Override\n    public void reset() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        mySettingsComponent.set_OPENAI_API_KEY(settings.OPENAI_API_KEY);\n    }\n\n    @Override\n    public void disposeUIResources() {\n        mySettingsComponent = null;\n    }", "first_line_groundtruth": "modified |= mySettingsComponent.isAutoPopup() != settings.autoPopup;", "first_line_prediction": " return modified;", "match": 0}
{"groundtruth": "Utils.obtenerCodigoPais(item);", "prediction": " item.substring(0, 3);\n                    Image image = new Image(Utils.getImagePath(countryCode));\n                    imageView.setImage(image);\n                    setGraphic(imageView);\n                }\n            }\n        });\n\n        comboBox.setItems(currencies);\n\n        inputBoxes.add(this);\n        vBox.setAlignment(Pos.CENTER);\n        vBox.setPadding(new Insets(0.0, 0.0, 0.0, 0.0));\n        vBox.setSpacing(10.0);\n\n        vBox.setAlignment(Pos.CENTER);\n        vBox.", "first_line_groundtruth": "Utils.obtenerCodigoPais(item);", "first_line_prediction": " item.substring(0, 3);", "match": 0}
{"groundtruth": "|= mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;", "prediction": " |= !mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);\n        modified |= mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;\n        return modified;\n    }\n\n    @Override\n    public void apply() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        settings.OPENAI_API_KEY = mySettingsComponent.get_OPENAI_API_KEY();\n        settings.autoPopup = mySettingsComponent.isAutoPopup();\n        settings.autoAddComments = mySettingsComponent.isAutoAddComments();\n        settings.autoReplaceCode", "first_line_groundtruth": "|= mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;", "first_line_prediction": " |= !mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);", "match": 0}
{"groundtruth": "modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;", "prediction": " modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;\n         modified |= mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;\n         modified |= !mySettingsComponent.get_customRefactor().equals(settings.customRefactor);\n        return modified;\n    }\n\n    @Override\n    public void apply() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        settings.OPENAI_API_KEY = mySettingsComponent.get_OPENAI_API_KEY();\n        settings.autoPopup = mySettingsComponent.isAutoPopup();\n        settings.autoAdd", "first_line_groundtruth": "modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;", "first_line_prediction": " modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;", "match": 0}
{"groundtruth": "modified = !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);", "prediction": " modified = false;\n        if (settings.OPENAI_API_KEY != special_key) {\n            modified = true;\n        }\n        return modified;\n    }\n\n    @Override\n    public void apply() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        settings.OPENAI_API_KEY = special_key;\n        settings.customRefactor = mySettingsComponent.getCustomRefactor();\n        settings.save();\n    }\n\n    @Override\n    public void reset() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        settings.OPENAI_API_KEY = special_key;\n       ", "first_line_groundtruth": "modified = !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);", "first_line_prediction": " modified = false;", "match": 0}
{"groundtruth": "!mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);", "prediction": " !mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);\n        return modified;\n    }\n\n    @Override\n    public void apply() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        settings.OPENAI_API_KEY = mySettingsComponent.get_OPENAI_API_KEY();\n        settings.autoPopup = mySettingsComponent.isAutoPopup();\n        settings.autoAddComments = mySettingsComponent.isAutoAddComments();\n        settings.autoReplaceCode = mySettingsComponent.isAutoReplaceCode();\n        settings.autoSaveToNewFile = mySettingsComponent.is", "first_line_groundtruth": "!mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);", "first_line_prediction": " !mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);", "match": 0}
{"groundtruth": ".setText(Utils.addSymbol(baseComboBox) + \"0\");", "prediction": ".setText(\"Valor\");\n        label1.setAlignment(Pos.CENTER_LEFT);\n        label1.setPrefWidth(100.0);\n        label1.setPrefHeight(25.0);\n        label1.setAlignment(Pos.CENTER_LEFT);\n        label1.setAlignment(Pos.CENTER_LEFT);\n        label1.setAlignment(Pos.CENTER_LEFT);\n        label1.setAlignment(Pos.CENTER_LEFT);\n        label1.setAlignment(Pos.CENTER_LEFT);\n        label1.setAlignment(Pos.CENTER_LEFT);\n        label1.set", "first_line_groundtruth": ".setText(Utils.addSymbol(baseComboBox) + \"0\");", "first_line_prediction": ".setText(\"Valor\");", "match": 0}
{"groundtruth": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;", "prediction": " mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;\n        modified |= !mySettingsComponent.get_customRefactor().equals(settings.customRefactor);\n        return modified;\n    }\n\n    @Override\n    public void apply() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        settings.OPENAI_API_KEY = mySettingsComponent.get_OPENAI_API_KEY();\n        settings.autoPopup = mySettingsComponent.isAutoPopup();\n        settings.autoAddComments = mySettingsComponent.isAutoAddComments();\n        settings.autoReplaceCode = mySettingsComponent", "first_line_groundtruth": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;", "first_line_prediction": " mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;", "match": 0}
{"groundtruth": "label1.setText(Utils.addSymbol(baseComboBox) + formattedNumber);", "prediction": " textField.setText(formattedNumber);\n        }\n    }\n\n    public void startConversion() {\n        if (textField.getText().equals(\"\") || comboBox.getValue().equals(\"\")) {\n            return;\n        }\n        if (initialConversion) {\n            return;\n        }\n        initialConversion = true;\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        executorService.execute(() -> {\n            try {\n                String text = textField.getText();\n                String currency = comboBox.getValue();\n                String symbol = Utils.addSymbol(currency);\n                String url = \"https://free.currconv.com/api/", "first_line_groundtruth": "label1.setText(Utils.addSymbol(baseComboBox) + formattedNumber);", "first_line_prediction": " textField.setText(formattedNumber);", "match": 0}
{"groundtruth": "ok(this.orderService.getCustomerOrders(id));", "prediction": "ok(this.orderService.getCustomerOrders(id));\n    }\n\n    @GetMapping(\"/summary/{id}\")\n    public ResponseEntity<OrderSummary> getSummary(@PathVariable int id) {\n        return ResponseEntity.ok(this.orderService.getSummary(id));\n    }\n\n    @PostMapping\n    public ResponseEntity<OrderEntity> add(@RequestBody RandomOrderDto randomOrderDto) {\n        if (randomOrderDto.getIdOrder() == null || !this.orderService.exists(randomOrderDto.getIdOrder())) {\n            return ResponseEntity.ok(this.orderService.save(randomOrderDto));\n        }\n        return ResponseEntity", "first_line_groundtruth": "ok(this.orderService.getCustomerOrders(id));", "first_line_prediction": "ok(this.orderService.getCustomerOrders(id));", "match": 1}
{"groundtruth": "ok(this.pizzaService.getCheapest(price));", "prediction": "ok(this.pizzaService.getCheapest(price));\n    }\n\n    @PostMapping\n    public ResponseEntity<PizzaEntity> save(@RequestBody PizzaEntity pizza) {\n        return ResponseEntity.ok(this.pizzaService.save(pizza));\n    }\n\n    @PutMapping(\"/{idPizza}\")\n    public ResponseEntity<PizzaEntity> update(@PathVariable int idPizza, @RequestBody PizzaEntity pizza) {\n        return ResponseEntity.ok(this.pizzaService.update(idPizza, pizza));\n    }\n\n    @DeleteMapping(\"/{idPizza}\")\n    public ResponseEntity<Void>", "first_line_groundtruth": "ok(this.pizzaService.getCheapest(price));", "first_line_prediction": "ok(this.pizzaService.getCheapest(price));", "match": 1}
{"groundtruth": "orderRepository.findAllByMethodIn(methods);", "prediction": "orderRepository.findAllByMethodIn(methods);\n    }\n\n    public List<OrderEntity> getCustomerOrders(String id) {\n        return this.orderRepository.findAllByCustomer_Id(id);\n    }\n\n    public OrderSummary getSummary(int id) {\n        return this.orderRepository.findSummary(id);\n    }\n\n    @Transactional\n    public boolean saveRandomOrder(RandomOrderDto dto) {\n        return this.orderRepository.saveRandomOrder(dto);\n    }", "first_line_groundtruth": "orderRepository.findAllByMethodIn(methods);", "first_line_prediction": "orderRepository.findAllByMethodIn(methods);", "match": 1}
{"groundtruth": "orderRepository.findCustomerOrders(idCustomer);", "prediction": "orderRepository.findAllByCustomer_IdCustomer(idCustomer);\n    }\n\n    public OrderSummary getSummary(int id) {\n        return this.orderRepository.findSummary(id);\n    }\n\n    @Transactional\n    public boolean saveRandomOrder(RandomOrderDto dto) {\n        return this.orderRepository.saveRandomOrder(dto);\n    }", "first_line_groundtruth": "orderRepository.findCustomerOrders(idCustomer);", "first_line_prediction": "orderRepository.findAllByCustomer_IdCustomer(idCustomer);", "match": 0}
{"groundtruth": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);", "prediction": " this.pizzaRepository.findAllByIngredientsContainingIgnoreCase(ingredient);\n    }\n\n    public List<PizzaEntity> getWithout(String ingredient) {\n        return  this.pizzaRepository.findAllByIngredientsNotContainingIgnoreCase(ingredient);\n    }\n\n    public List<PizzaEntity> getCheapest(double price) {\n        return  this.pizzaRepository.findAllByPriceLessThanEqual(price);\n    }\n\n    public PizzaEntity save(PizzaEntity pizza) {\n        return this.pizzaRepository.save(pizza);\n    }\n\n    public PizzaEntity update(PizzaEntity pizza", "first_line_groundtruth": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);", "first_line_prediction": " this.pizzaRepository.findAllByIngredientsContainingIgnoreCase(ingredient);", "match": 0}
{"groundtruth": "orderRepository.findSummary(orderId);", "prediction": "orderRepository.findSummary(orderId);\n    }\n\n    public boolean saveRandomOrder(RandomOrderDto dto) {\n        return this.orderRepository.saveRandomOrder(dto);\n    }", "first_line_groundtruth": "orderRepository.findSummary(orderId);", "first_line_prediction": "orderRepository.findSummary(orderId);", "match": 1}
{"groundtruth": "return this.pizzaRepository.findFirstByAvailableTrueAndNameIgnoreCase(name).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));", "prediction": " return this.pizzaRepository.findByName(name);\n    }\n\n    public PizzaEntity getById(int idPizza) {\n        return this.pizzaRepository.findById(idPizza).orElse(null);\n    }\n\n    public PizzaEntity add(PizzaEntity pizza) {\n        return this.pizzaRepository.save(pizza);\n    }\n\n    public PizzaEntity update(PizzaEntity pizza) {\n        return this.pizzaRepository.save(pizza);\n    }\n\n    public void delete(int idPizza) {\n        this.pizzaRepository.deleteById(idPizza", "first_line_groundtruth": "return this.pizzaRepository.findFirstByAvailableTrueAndNameIgnoreCase(name).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));", "first_line_prediction": " return this.pizzaRepository.findByName(name);", "match": 0}
{"groundtruth": ".pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);", "prediction": ".pizzaRepository.findAllByAvailableTrueAndPriceLessThanEqual(price);\n    }\n\n    public PizzaEntity save(PizzaEntity pizza) {\n        return this.pizzaRepository.save(pizza);\n    }\n\n    public PizzaEntity update(PizzaEntity pizza) {\n        return this.pizzaRepository.save(pizza);\n    }\n\n    public void updatePrice(UpdatePizzaPriceDto newPizzaPrice) {\n        this.pizzaRepository.updatePrice(newPizzaPrice);\n    }\n\n    public boolean saveRandomOrder(RandomOrderDto randomOrderDto) {\n        return this.p", "first_line_groundtruth": ".pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);", "first_line_prediction": ".pizzaRepository.findAllByAvailableTrueAndPriceLessThanEqual(price);", "match": 0}
{"groundtruth": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();", "prediction": " return mergePluginManagement;\n    }\n\n    public void setMergePluginManagement(Boolean mergePluginManagement) {\n        this.mergePluginManagement = mergePluginManagement;\n    }\n\n    public boolean isMergePlugins() {\n        return mergePlugins;\n    }\n\n    public void setMergePlugins(Boolean mergePlugins) {\n        this.mergePlugins = mergePlugins;\n    }\n\n    public boolean isMergeReporting() {\n        return mergeReporting;\n    }\n\n    public void setMergeReporting(Boolean mergeReporting) {\n        this.mergeReporting = mergeReporting;\n    }\n\n    public boolean isMergeProperties() {\n        return mergeProperties;\n    }\n\n    public void", "first_line_groundtruth": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();", "first_line_prediction": " return mergePluginManagement;", "match": 0}
{"groundtruth": "null ? mergePlugins : mixins.isMergePlugins();", "prediction": " null ? mergePlugins : mixins.isMergePlugins();\n    }\n\n    public void setMergePlugins(Boolean mergePlugins) {\n        this.mergePlugins = mergePlugins;\n    }\n\n    public boolean isMergeReporting() {\n        return mergeReporting != null ? mergeReporting : mixins.isMergeReporting();\n    }\n\n    public void setMergeReporting(Boolean mergeReporting) {\n        this.mergeReporting = mergeReporting;\n    }\n\n    public boolean isMergeProperties() {\n        return mergeProperties != null ? mergeProperties : mixins.isMergeProperties();\n    }\n\n    public void setMergeProperties(Boolean mergeProperties) {\n        this.mergeProperties", "first_line_groundtruth": "null ? mergePlugins : mixins.isMergePlugins();", "first_line_prediction": " null ? mergePlugins : mixins.isMergePlugins();", "match": 0}
{"groundtruth": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();", "prediction": " null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();\n    }\n\n    public void setMergeDistributionManagement(Boolean mergeDistributionManagement) {\n        this.mergeDistributionManagement = mergeDistributionManagement;\n    }\n\n    public boolean isMergeScm() {\n        return mergeScm != null ? mergeScm : mixins.isMergeScm();\n    }\n\n    public void setMergeScm(Boolean mergeScm) {\n        this.mergeScm = mergeScm;\n    }\n\n    public boolean isMergeRepositories() {\n        return mergeRepositories != null ? mergeRepositories : mixins.isMergeRepositories();\n    }\n\n    public void", "first_line_groundtruth": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();", "first_line_prediction": " null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();", "match": 0}
{"groundtruth": "!= null ? activateProfiles : mixins.isActivateProfiles();", "prediction": " != null ? activateProfiles : mixins.isActivateProfiles();\n    }\n\n    public void setActivateProfiles(Boolean activateProfiles) {\n        this.activateProfiles = activateProfiles;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getKey() {\n        return key;\n    }\n\n    public void setKey(String key) {\n        this.key = key;\n    }\n\n    public void execute(MavenSession session, MavenProject project, Model model) throws MavenExecutionException {\n        if (groupId == null || artifactId", "first_line_groundtruth": "!= null ? activateProfiles : mixins.isActivateProfiles();", "first_line_prediction": " != null ? activateProfiles : mixins.isActivateProfiles();", "match": 0}
{"groundtruth": "mixins.getDefaultMixinType();", "prediction": " mixins.getDefaultMixinType();\n        }\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getKey() {\n        if (key == null) {\n            key = groupId + \":\" + artifactId + \":\" + version;\n        }\n        return key;\n    }\n\n    public void setKey(String key) {\n        this.key = key;\n    }\n\n    public void execute(MavenSession session, MavenProject project, Model model) throws MavenExecutionException {\n        if (isActivateProfiles()) {\n            project.setActivation(project.getActivation().clone", "first_line_groundtruth": "mixins.getDefaultMixinType();", "first_line_prediction": " mixins.getDefaultMixinType();", "match": 0}
{"groundtruth": "recurse != null ? recurse : mixins.isRecurse();", "prediction": " recurse != null ? recurse : mixins.isRecurse();\n    }\n\n    public void setRecurse(Boolean recurse) {\n        this.recurse = recurse;\n    }\n\n    public boolean isActivateProfiles() {\n        return  activateProfiles != null ? activateProfiles : mixins.isActivateProfiles();\n    }\n\n    public void setActivateProfiles(Boolean activateProfiles) {\n        this.activateProfiles = activateProfiles;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getKey() {\n        return key;\n    }", "first_line_groundtruth": "recurse != null ? recurse : mixins.isRecurse();", "first_line_prediction": " recurse != null ? recurse : mixins.isRecurse();", "match": 0}
{"groundtruth": "!= null ? mergeRepositories : mixins.isMergeRepositories();", "prediction": " != null ? mergeRepositories : mixins.isMergeRepositories();\n    }\n\n    public void setMergeRepositories(Boolean mergeRepositories) {\n        this.mergeRepositories = mergeRepositories;\n    }\n\n    public boolean isMergePluginRepositories() {\n        return mergePluginRepositories != null ? mergePluginRepositories : mixins.isMergePluginRepositories();\n    }\n\n    public void setMergePluginRepositories(Boolean mergePluginRepositories) {\n        this.mergePluginRepositories = mergePluginRepositories;\n    }\n\n    public boolean isRecurse() {\n        return recurse != null ? recurse : mixins.isRecurse();\n    }\n\n    public void setRecurse(Boolean recurse)", "first_line_groundtruth": "!= null ? mergeRepositories : mixins.isMergeRepositories();", "first_line_prediction": " != null ? mergeRepositories : mixins.isMergeRepositories();", "match": 0}
{"groundtruth": "ok(eventService.getUserEvents(userId));", "prediction": "ok(eventService.getUserEvents(userId));\n        }\n        return ResponseEntity.ok(eventService.getUserEventsByRole(userId, role));\n    }\n\n    @PostMapping\n    @PreAuthorize(Constants.HAS_ROLE_CORE_AND_ABOVE)\n    public ResponseEntity<Event> createEvent(@RequestBody Event event) {\n        Event createdEvent = eventService.createEvent(event);\n        return ResponseEntity.status(HttpStatus.CREATED).body(createdEvent);\n    }\n\n    @PutMapping(\"/{eventId}\")\n    @PreAuthorize(Constants.HAS_ROLE_CORE_AND_ABOVE)\n    public ResponseEntity", "first_line_groundtruth": "ok(eventService.getUserEvents(userId));", "first_line_prediction": "ok(eventService.getUserEvents(userId));", "match": 1}
{"groundtruth": "attendanceRepository.findByUserIdAndRole(userId, role).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );", "prediction": " attendanceRepository.findByUserIdAndRole(userId, role).forEach(\n                attendance -> events.add(attendance.getEvent())\n         );\n        return events;\n    }\n\n    public Event createEvent(Event event) {\n        return eventRepository.save(event);\n    }\n\n    public Event updateEvent(Event event, Integer eventId) {\n        Optional<Event> eventOptional = eventRepository.findById(eventId);\n        if (eventOptional.isEmpty()) {\n            throw new AcmException(\"Event doesn't not exist with id :\" + eventId, HttpStatus.NOT_FOUND);\n        }\n        Event updatedEvent = eventOptional", "first_line_groundtruth": "attendanceRepository.findByUserIdAndRole(userId, role).forEach(", "first_line_prediction": " attendanceRepository.findByUserIdAndRole(userId, role).forEach(", "match": 0}
{"groundtruth": "eventService.getSingleEvent(eventId);", "prediction": " eventService.getSingleEvent(eventId);\n        return ResponseEntity.ok(event);\n    }\n\n    @PostMapping\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<Event> createEvent(@RequestBody Event event){\n        // TODO : Return pageable response\n        Event createdEvent = eventService.createEvent(event);\n        return ResponseEntity.ok(createdEvent);\n    }\n\n    @PutMapping(\"/{eventId}\")\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<Event> updateEvent(@PathVariable Integer eventId, @RequestBody Event event){\n        // TODO : Return pageable response", "first_line_groundtruth": "eventService.getSingleEvent(eventId);", "first_line_prediction": " eventService.getSingleEvent(eventId);", "match": 0}
{"groundtruth": "String username = jwtService.extractUsername(jwtToken);", "prediction": " UserDetails userDetails = userService.loadUserByUsername(jwtService.getUsernameFromToken(jwtToken));\n         if(userDetails == null) {\n             filterChain.doFilter(request, response);\n             return;\n         }\n         UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(\n                 userDetails, null, userDetails.getAuthorities()\n         );\n         authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n         SecurityContextHolder.getContext().setAuthentication(authentication);\n         filterChain.doFilter(request, response);\n    }", "first_line_groundtruth": "String username = jwtService.extractUsername(jwtToken);", "first_line_prediction": " UserDetails userDetails = userService.loadUserByUsername(jwtService.getUsernameFromToken(jwtToken));", "match": 0}
{"groundtruth": "attendanceRepository.findByUserId(userId).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );", "prediction": " userRepository.findById(userId).ifPresent(user -> {\n             events = eventRepository.findByBranchAndUserId(user.getBranch(), user.getId());\n         });\n        return events;\n    }\n\n    public List<Event> getUserEventsByRole(Integer userId, String role) {\n        List<Event> events = new ArrayList<>();\n        userRepository.findById(userId).ifPresent(user -> {\n            events = eventRepository.findByBranchAndUserIdAndRole(user.getBranch(), user.getId(), role);\n        });\n        return events;\n    }\n\n    public Event createEvent(Event event) {\n        return event", "first_line_groundtruth": "attendanceRepository.findByUserId(userId).forEach(", "first_line_prediction": " userRepository.findById(userId).ifPresent(user -> {", "match": 0}
{"groundtruth": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);", "prediction": " return this.pizzaRepository.findAllByIngredientsContainingIgnoreCase(ingredient);\n    }\n\n    public List<PizzaEntity> getWithout(String ingredient) {\n        return this.pizzaRepository.findAllByIngredientsNotContainingIgnoreCase(ingredient);\n    }\n\n    public List<PizzaEntity> getCheapest(double price) {\n        return this.pizzaRepository.findAllByPriceLessThanEqual(price);\n    }\n\n    public PizzaEntity get(int idPizza) {\n        return this.pizzaRepository.findById(idPizza).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));\n   ", "first_line_groundtruth": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);", "first_line_prediction": " return this.pizzaRepository.findAllByIngredientsContainingIgnoreCase(ingredient);", "match": 0}
{"groundtruth": ".orderRepository.findCustomerOrders(idCustomer);", "prediction": ".orderRepository.findAllByCustomer_IdCustomer(idCustomer);\n    }\n\n    public OrderSummary getSummary(int id) {\n        return this.orderRepository.findSummary(id);\n    }\n\n    @Transactional\n    public boolean saveRandomOrder(RandomOrderDto dto) {\n        return this.orderRepository.saveRandomOrder(dto);\n    }", "first_line_groundtruth": ".orderRepository.findCustomerOrders(idCustomer);", "first_line_prediction": ".orderRepository.findAllByCustomer_IdCustomer(idCustomer);", "match": 0}
{"groundtruth": "this.pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);", "prediction": " this.pizzaRepository.findAllByAvailableTrueAndPriceLessThanEqual(price);\n    }\n\n    public PizzaEntity save(PizzaEntity pizza) {\n        return this.pizzaRepository.save(pizza);\n    }\n\n    public PizzaEntity update(PizzaEntity pizza) {\n        return this.pizzaRepository.save(pizza);\n    }\n\n    public void updatePrice(UpdatePizzaPriceDto newPizzaPrice) {\n        this.pizzaRepository.updatePrice(newPizzaPrice);\n    }\n\n    public void delete(Long id) {\n        this.pizzaRepository.deleteById(", "first_line_groundtruth": "this.pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);", "first_line_prediction": " this.pizzaRepository.findAllByAvailableTrueAndPriceLessThanEqual(price);", "match": 0}
{"groundtruth": "this.orderService.getCustomerOrders(id));", "prediction": "this.orderService.getCustomerOrders(id));\n    }\n\n    @GetMapping(\"/summary/{id}\")\n    public ResponseEntity<OrderSummary> getSummary(@PathVariable int id) {\n        return ResponseEntity.ok(this.orderService.getSummary(id));\n    }\n\n    @PostMapping\n    public ResponseEntity<OrderEntity> add(@RequestBody RandomOrderDto randomOrderDto) {\n        return ResponseEntity.ok(this.orderService.add(randomOrderDto));\n    }", "first_line_groundtruth": "this.orderService.getCustomerOrders(id));", "first_line_prediction": "this.orderService.getCustomerOrders(id));", "match": 1}
{"groundtruth": "loader.mergeMixins();", "prediction": " loader.mergeMixins();\n        }\n    }", "first_line_groundtruth": "loader.mergeMixins();", "first_line_prediction": " loader.mergeMixins();", "match": 0}
{"groundtruth": "!= null && !encryptor.isEncrypted(propValue)) {", "prediction": " != null && encryptor.isEncrypted(propValue)) {\n\t\t\t\tpropValue = encryptor.decrypt(propValue).toString();\n\t\t\t}", "first_line_groundtruth": "!= null && !encryptor.isEncrypted(propValue)) {", "first_line_prediction": " != null && encryptor.isEncrypted(propValue)) {", "match": 0}
{"groundtruth": "mDiracSound.getMusic() == 1;", "prediction": " mDiracSound.isEnabled();\n    }\n\n    public void setMusic(int music) {\n        mDiracSound.setMusic(music);\n    }\n\n    public void setScenario(int scenario) {\n        mDiracSound.setScenario(scenario);\n    }\n\n    public void setHeadsetType(int type) {\n        mDiracSound.setHeadsetType(type);\n    }\n\n    public void setHifiMode(int mode) {\n        mDiracSound.setHifiMode(mode);\n    }\n\n    public void setLevel(int band, float level) {\n        mDiracSound.setLevel(", "first_line_groundtruth": "mDiracSound.getMusic() == 1;", "first_line_prediction": " mDiracSound.isEnabled();", "match": 0}
{"groundtruth": "return customerRepository.findCustomerByName(name);", "prediction": " return customerRepository.findCustomerByName(name);\n    }\n\n    public List<Customer> findCustomerByPhone(String phone) {\n         return customerRepository.findCustomerByPhone(phone);\n    }", "first_line_groundtruth": "return customerRepository.findCustomerByName(name);", "first_line_prediction": " return customerRepository.findCustomerByName(name);", "match": 0}
{"groundtruth": "encryptor.decrypt(encryptedValue).toString();", "prediction": " encryptor.decrypt(encryptedValue);\n    }\n\n    private static boolean isTransformationAnnotated(Field field) {\n        return isTypeAnnotated(field) && isTransformationAnnotationPresent(field);\n    }\n\n    private static boolean isTransformationAnnotationPresent(Field field) {\n        return field.isAnnotationPresent(Transformation.class);\n    }\n\n    private static Transformation getTransformationField(Field field) {\n        return field.getAnnotation(Transformation.class);\n    }\n\n    private static Transformation getTransformationField(Field field, Transformation transformationAnnotation) {\n        return new Transformation(transformationAnnotation.property(), transformationAnnotation.transformer());\n    }\n\n    private static boolean", "first_line_groundtruth": "encryptor.decrypt(encryptedValue).toString();", "first_line_prediction": " encryptor.decrypt(encryptedValue);", "match": 0}
{"groundtruth": "= encryptor.decrypt(value).toString();", "prediction": " = encryptor.decrypt(value).toString();\n\t\t\t}\n\t\t\treturn value;\n\t\t} catch (ApiException e) {\n\t\t\tthrow new HibernateException(e);\n\t\t}", "first_line_groundtruth": "= encryptor.decrypt(value).toString();", "first_line_prediction": " = encryptor.decrypt(value).toString();", "match": 0}
{"groundtruth": "return getFriendlyString().compareTo(o.getFriendlyString());", "prediction": " return version.compareTo(o.getFriendlyString());\n    }", "first_line_groundtruth": "return getFriendlyString().compareTo(o.getFriendlyString());", "first_line_prediction": " return version.compareTo(o.getFriendlyString());", "match": 0}
{"groundtruth": "mod.getMetadata().getId() + \"->\" + value;", "prediction": " \"OldEntry{\" +\n                    \"mod=\" + mod +\n                    \", value='\" + value + '\\'' +\n                    '}';\n        }\n\n        @Override\n        public <T> T getOrCreate(Class<T> type) throws Exception {\n            if (object == null) {\n                object = mod.getEntrypoint(value, type);\n            }\n            return type.cast(object);\n        }\n\n        @Override\n        public boolean isOptional() {\n            return false;\n        }\n\n        @Override\n        public ModContainer getModContainer() {\n            return mod;\n        }\n    }\n\n    private static class NewEntry implements Entry {\n        private final ModContainer", "first_line_groundtruth": "mod.getMetadata().getId() + \"->\" + value;", "first_line_prediction": " \"OldEntry{\" +", "match": 0}
{"groundtruth": "if (encryptor.isEncrypted(value)) {", "prediction": "", "first_line_groundtruth": "if (encryptor.isEncrypted(value)) {", "first_line_prediction": "", "match": 0}
{"groundtruth": "return VersionParser.parseSemantic(s);", "prediction": " return VersionParser.parseSemantic(s);\n    }", "first_line_groundtruth": "return VersionParser.parseSemantic(s);", "first_line_prediction": " return VersionParser.parseSemantic(s);", "match": 0}
{"groundtruth": "return o.hasWildcard() ? 0 : -1;", "prediction": " return -1;\n             } else {\n                 return 1;\n             }\n        }\n\n        Optional<String> buildA = getBuildKey();\n        Optional<String> buildB = o.getBuildKey();\n\n        if (buildA.isPresent() || buildB.isPresent()) {\n            if (buildA.isPresent() && buildB.isPresent()) {\n                StringTokenizer buildATokenizer = new StringTokenizer(buildA.get(), \".\");\n                StringTokenizer buildBTokenizer = new StringTokenizer(buildB.get(), \".\");\n\n                while (buildATokenizer.hasMoreElements()) {\n                    if (buildBTokenizer.hasMore", "first_line_groundtruth": "return o.hasWildcard() ? 0 : -1;", "first_line_prediction": " return -1;", "match": 0}
{"groundtruth": "String name = wrapper.getName();", "prediction": " classTable.put(wrapper.getName(), wrapper);\n        }\n    }\n\n    public List<String> getChildren(String parent) {\n        return pointerTable.getOrDefault(parent, new ArrayList<>());\n    }\n\n    public T getWrapper(String name) {\n        return classTable.get(name);\n    }", "first_line_groundtruth": "String name = wrapper.getName();", "first_line_prediction": " classTable.put(wrapper.getName(), wrapper);", "match": 0}
{"groundtruth": "return VersionParser.parse(string, false);", "prediction": " return VersionParser.parse(string);\n    }", "first_line_groundtruth": "return VersionParser.parse(string, false);", "first_line_prediction": " return VersionParser.parse(string);", "match": 0}
{"groundtruth": "().getMetadata().getId(), ex);", "prediction": "().getMetadata().getId(), ex);\n            }\n        }\n        return instance;\n    }\n\n    @Override\n    public ModContainer getProvider() {\n        return entry.getModContainer();\n    }\n\n    @Override\n    public String toString() {\n        return \"EntrypointContainerImpl{\" +\n                \"key='\" + key + '\\'' +\n                \", type=\" + type +\n                \", entry=\" + entry +\n                \", instance=\" + instance +\n                '}';\n    }", "first_line_groundtruth": "().getMetadata().getId(), ex);", "first_line_prediction": "().getMetadata().getId(), ex);", "match": 1}
{"groundtruth": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);", "prediction": " exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);\n                }\n            }\n        }\n\n        if (exception != null) {\n            throw exception;\n        }\n\n        return results;\n    }\n\n    public <T> T getEntrypoint(String key, Class<T> type) {\n        List<Entry> entries = entryMap.get(key);\n        if (entries == null) return null;\n\n        EntrypointException exception = null;\n        T result = null;\n\n        for (Entry entry : entries) {\n            try {\n                T entryResult = entry.getOrCreate(type", "first_line_groundtruth": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);", "first_line_prediction": " exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);", "match": 0}
{"groundtruth": "(ForgePatch.getGameDir());", "prediction": "(new File(System.getProperty(\"user.dir\")));\n    }\n\n    @Override\n    public void setGameDir(File gameDir) {\n        this.gameDir = gameDir.toPath();\n        this.configDir = this.gameDir.resolve(\"config\");\n    }\n\n    @Override\n    public Path getConfigDir() {\n        return configDir;\n    }\n\n    @Override\n    public Path getGameDir() {\n        return gameDir;\n    }\n\n    @Override\n    public void setGameInstance(Object gameInstance) {\n        this.gameInstance = gameInstance;\n    }\n\n    @Override\n    public Object getGameInstance", "first_line_groundtruth": "(ForgePatch.getGameDir());", "first_line_prediction": "(new File(System.getProperty(\"user.dir\")));", "match": 0}
{"groundtruth": "userDAO.getById(id);", "prediction": " userDAO.findById(id);\n    }\n\n    @Override\n    public void update(BotUser user) {\n        userDAO.update(user);\n    }\n\n    @Override\n    public void delete(BotUser user) {\n        userDAO.delete(user);\n    }\n\n    @Override\n    public void deleteAll() {\n        userDAO.deleteAll();\n    }\n\n    @Override\n    public List<BotUser> findByName(String name) {\n        return userDAO.findByName(name);\n    }\n\n    @Override\n    public long getUserCount() {\n        return userDAO.getUserCount();\n    }", "first_line_groundtruth": "userDAO.getById(id);", "first_line_prediction": " userDAO.findById(id);", "match": 0}
{"groundtruth": "parent.getVersionComponentCount();", "prediction": "3;\n    }\n\n    @Override\n    public int getVersionComponent(int index) {\n        if (index < 0 || index >= getVersionComponentCount()) {\n            throw new IndexOutOfBoundsException(\"Index \" + index + \" is out of bounds!\");\n        }\n        if (index == 0) {\n            return parent.getMajor();\n        } else if (index == 1) {\n            return parent.getMinor();\n        } else {\n            return parent.getPatch();\n        }\n    }\n\n    @Override\n    public int getMajor() {\n        return parent.getMajor();\n    }\n\n    @Override\n    public int get", "first_line_groundtruth": "parent.getVersionComponentCount();", "first_line_prediction": "3;", "match": 0}
{"groundtruth": "userDAO.getCount();", "prediction": " userDAO.getCount();\n    }", "first_line_groundtruth": "userDAO.getCount();", "first_line_prediction": " userDAO.getCount();", "match": 0}
{"groundtruth": "parent = SemanticVersion.parse(version);", "prediction": " this(version, storeX, null);\n    }\n\n    public SemanticVersionImpl(String version, boolean storeX, SemanticVersion parent) throws VersionParsingException {\n        if (version == null || version.isEmpty()) {\n            throw new VersionParsingException(\"Version must be a non-empty string!\");\n        }\n        this.parent = parent;\n        String[] split = version.split(\"\\\\.\");\n        if (split.length < 2) {\n            throw new VersionParsingException(\"Invalid version string '\" + version + \"'!\");\n        }\n        int major = Integer.parseInt(split[0]);\n        int minor = Integer.parseInt", "first_line_groundtruth": "parent = SemanticVersion.parse(version);", "first_line_prediction": " this(version, storeX, null);", "match": 0}
{"groundtruth": "userDAO.getByName(name);", "prediction": " userDAO.getByName(name);\n    }\n\n    @Override\n    public long getUserCount() {\n        return userDAO.getCount();\n    }", "first_line_groundtruth": "userDAO.getByName(name);", "first_line_prediction": " userDAO.getByName(name);", "match": 0}
{"groundtruth": "documentDAO.getCount();", "prediction": "0;\n    }", "first_line_groundtruth": "documentDAO.getCount();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "return mod.getMetadata().getId() + \"->(0.3.x)\" + value;", "prediction": " return mod.getMetadata().getId() + \"->\" + value;\n        }\n\n        @Override\n        public synchronized <T> T getOrCreate(Class<T> type) throws Exception {\n            Object instance = instanceMap.get(type);\n            if (instance == null) {\n                instance = type.cast(mod.getEntrypoint(value).getOrCreate(type));\n                instanceMap.put(type, instance);\n            }\n            return type.cast(instance);\n        }\n\n        @Override\n        public boolean isOptional() {\n            return false;\n        }\n\n        @Override\n        public ModContainer getModContainer() {\n            return mod", "first_line_groundtruth": "return mod.getMetadata().getId() + \"->(0.3.x)\" + value;", "first_line_prediction": " return mod.getMetadata().getId() + \"->\" + value;", "match": 0}
{"groundtruth": "controllerInfo.getMethod();", "prediction": " controllerInfo.getMethod();\n                PsiUtilBase.ensureValid(targetMethod);\n                targetMethod.navigate(true);\n                // \u5b9a\u4f4d\u5230\u5bf9\u5e94\u7684\u884c\n                Editor editor = EditorFactory.getInstance().createEditor(targetMethod.getTextRange(), null, file.getProject());\n                editor.getCaretModel().moveToOffset(targetMethod.getTextOffset());\n                editor.getScrollingModel().scrollToCaret(ScrollType.CENTER_UP);\n            }\n        }\n    }\n\n    private boolean isMatched(ControllerInfo info, String searchText) {\n        return info.getControllerName().contains(searchText);\n    }", "first_line_groundtruth": "controllerInfo.getMethod();", "first_line_prediction": " controllerInfo.getMethod();", "match": 0}
{"groundtruth": "if(controllerInfo.getRequestMethod().toLowerCase().contains(lowerCase)){", "prediction": " return controllerInfo.getControllerName().toLowerCase().contains(lowerCase) ||\n                 controllerInfo.getControllerMethod().toLowerCase().contains(lowerCase);\n    }", "first_line_groundtruth": "if(controllerInfo.getRequestMethod().toLowerCase().contains(lowerCase)){", "first_line_prediction": " return controllerInfo.getControllerName().toLowerCase().contains(lowerCase) ||", "match": 0}
{"groundtruth": "if(controllerInfo.getPath().toLowerCase().contains(lowerCase)){", "prediction": " return controllerInfo.getControllerName().toLowerCase().contains(lowerCase);\n    }", "first_line_groundtruth": "if(controllerInfo.getPath().toLowerCase().contains(lowerCase)){", "first_line_prediction": " return controllerInfo.getControllerName().toLowerCase().contains(lowerCase);", "match": 0}
{"groundtruth": "getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){", "prediction": "getControllerClass().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        return false;\n    }", "first_line_groundtruth": "getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){", "first_line_prediction": "getControllerClass().toLowerCase().contains(lowerCase)){", "match": 0}
{"groundtruth": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){", "prediction": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        return false;\n    }", "first_line_groundtruth": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){", "first_line_prediction": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){", "match": 1}
{"groundtruth": "controllerInfo.getSwaggerNotes() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){", "prediction": "controllerInfo.getRemarks() != null && controllerInfo.getRemarks().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        return false;\n    }", "first_line_groundtruth": "controllerInfo.getSwaggerNotes() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){", "first_line_prediction": "controllerInfo.getRemarks() != null && controllerInfo.getRemarks().toLowerCase().contains(lowerCase)){", "match": 0}
{"groundtruth": "= controllerInfo.getMethod().getContainingFile();", "prediction": " = PsiUtilBase.findFile(controllerInfo.getPsiClass());\n        if (file instanceof PsiJavaFile) {\n            Editor editor = EditorFactory.getInstance().createEditor(file.getViewProvider().getVirtualFile(), null, EditorFactory.getInstance().getEditorFactory(project).getNotepadComponent());\n            editor.getCaretModel().moveToOffset(controllerInfo.getStartOffset());\n            editor.getScrollingModel().scrollToCaret(ScrollType.CENTER_UP);\n        }\n    }\n\n    private boolean isMatched(ControllerInfo info, String searchText) {\n        return info.getPath().contains(searchText);", "first_line_groundtruth": "= controllerInfo.getMethod().getContainingFile();", "first_line_prediction": " = PsiUtilBase.findFile(controllerInfo.getPsiClass());", "match": 0}
{"groundtruth": "(feignInfo.getMethod());", "prediction": "(feignInfo.getMethod());\n                }\n            }\n        }\n        return elementList;\n    }\n\n    /**\n     * \u5224\u65ad\u65b9\u6cd5\u662f\u5426\u5339\u914d\n     *\n     * @param feignInfo  feign\u4fe1\u606f\n     * @param controllerMethod  controller\u65b9\u6cd5\n     * @return boolean\n     */\n    private boolean isMethodMatch(ControllerInfo feignInfo, PsiMethod controllerMethod) {\n        String path = feignInfo.getPath();\n        if (StringUtils.isNotBlank(path)) {\n            return path.equals(controllerMethod.getName());\n        }\n        return false;\n    }\n\n    /**\n     * \u5224\u65ad\u65b9\u6cd5\u662f\u5426\u5339\u914d\n     *\n     * @", "first_line_groundtruth": "(feignInfo.getMethod());", "first_line_prediction": "(feignInfo.getMethod());", "match": 1}
{"groundtruth": "if(controllerInfo.getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){", "prediction": " return false;\n    }", "first_line_groundtruth": "if(controllerInfo.getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){", "first_line_prediction": " return false;", "match": 0}
{"groundtruth": "relocation.getPattern(),\n                        relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));", "prediction": " relocation.getOldName(),\n                         relocation.getNewName(),\n                         relocation.getOldPackages(),\n                         relocation.getNewPackages()\n                ));\n            }\n\n            final Object jarRelocator = this.jarRelocatorConstructor.newInstance(\n                    in.toFile(),\n                    out.toFile(),\n                    rules\n            );\n\n            this.jarRelocatorRunMethod.invoke(jarRelocator);\n        } catch (final ReflectiveOperationException e) {\n            throw new RuntimeException(e);\n        }\n    }", "first_line_groundtruth": "relocation.getPattern(),", "first_line_prediction": " relocation.getOldName(),", "match": 0}
{"groundtruth": "relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));", "prediction": "0,\n                        relocation.getExcludes()\n                ));\n            }\n\n            final Object jarRelocator = this.jarRelocatorConstructor.newInstance(\n                    in.toFile(),\n                    out.toFile(),\n                    rules\n            );\n\n            this.jarRelocatorRunMethod.invoke(jarRelocator);\n        } catch (final ReflectiveOperationException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * Creates a new relocation instance for the provided pattern and\n     * relocated pattern.\n     *\n     * @param pattern      the pattern to match\n     * @param relocatedPattern the relocated pattern to", "first_line_groundtruth": "relocation.getIncludes(),", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "database.getConnection().close();", "prediction": " // Closing server socket\n            serverSocket.close();\n        }\n    }", "first_line_groundtruth": "database.getConnection().close();", "first_line_prediction": " // Closing server socket", "match": 0}
{"groundtruth": "relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));", "prediction": " relocation.getReplacement(),\n                         relocation.getRepositories(),\n                         relocation.getClassifiers()\n                ));\n            }\n\n            final Object jarRelocator = this.jarRelocatorConstructor.newInstance(\n                    in.toFile(),\n                    out.toFile(),\n                    rules\n            );\n\n            this.jarRelocatorRunMethod.invoke(jarRelocator);\n        } catch (final ReflectiveOperationException e) {\n            throw new RuntimeException(e);\n        }\n    }", "first_line_groundtruth": "relocation.getRelocatedPattern(),", "first_line_prediction": " relocation.getReplacement(),", "match": 0}
{"groundtruth": "genre.setTitle(resultSet.getString(\"title\"));", "prediction": " genre.setId(resultSet.getInt(\"id\"));\n             genre.setTitle(resultSet.getString(\"title\"));\n             genre.setDescription(resultSet.getString(\"description\"));\n        }\n\n        return genre;\n    }\n\n    public List<Genre> getAllGenres() throws SQLException {\n        String query = \"SELECT * FROM genres\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n\n        ResultSet resultSet = statement.executeQuery();\n\n        List<Genre> genres = new ArrayList<>();\n\n        while(resultSet.next()){\n            Genre genre = new Genre();\n            genre.setId(resultSet.getInt(\"id\"));\n            genre.setTitle(resultSet", "first_line_groundtruth": "genre.setTitle(resultSet.getString(\"title\"));", "first_line_prediction": " genre.setId(resultSet.getInt(\"id\"));", "match": 0}
{"groundtruth": "genre.setId(resultSet.getInt(\"id\"));", "prediction": " return genre;\n        }\n        return null;\n    }\n\n    public List<Genre> getAllGenres() throws SQLException {\n        String query = \"SELECT * FROM genres\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n        ResultSet resultSet = statement.executeQuery();\n\n        List<Genre> genres = new ArrayList<>();\n\n        while(resultSet.next()){\n            Genre genre = new Genre();\n            genre.setTitle(resultSet.getString(\"title\"));\n            genre.setDescription(resultSet.getString(\"description\"));\n            genres.add(genre);\n        }\n        return genres;\n    }\n\n    public void updateGenre(Genre", "first_line_groundtruth": "genre.setId(resultSet.getInt(\"id\"));", "first_line_prediction": " return genre;", "match": 0}
{"groundtruth": "comment.setText(res.getString(\"text\"));", "prediction": " comment.setId(res.getInt(\"id\"));\n             comment.setText(res.getString(\"text\"));\n             comment.setUser(res.getInt(\"user\"));\n             comment.setMusic(res.getInt(\"music\"));\n             comments.add(comment);\n        }\n        return comments;\n    }\n\n    public void deleteComment(int commentId) throws SQLException {\n        String query = \"DELETE FROM comments WHERE id=?\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n        statement.setInt(1, commentId);\n\n        statement.executeUpdate();\n    }", "first_line_groundtruth": "comment.setText(res.getString(\"text\"));", "first_line_prediction": " comment.setId(res.getInt(\"id\"));", "match": 0}
{"groundtruth": "comment.setId(res.getInt(\"id\"));", "prediction": " comments.add(comment);\n        }\n        return comments;\n    }", "first_line_groundtruth": "comment.setId(res.getInt(\"id\"));", "first_line_prediction": " comments.add(comment);", "match": 0}
{"groundtruth": "playlist.setUser(res.getInt(\"user\"));", "prediction": " playlist.setDescription(res.getString(\"description\"));\n            playlist.setUser(res.getInt(\"user\"));\n            playlist.setPublic(res.getBoolean(\"is_public\"));\n            playlists.add(playlist);\n        }\n        return playlists;\n    }\n\n    public void addMusicToPlaylist(int playlistId, int musicId) throws SQLException {\n        String query = \"INSERT INTO playlist_music (playlist, music) VALUES (?,?)\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n        statement.setInt(1, playlistId);\n        statement.setInt(2, musicId);\n\n        statement.executeUpdate();", "first_line_groundtruth": "playlist.setUser(res.getInt(\"user\"));", "first_line_prediction": " playlist.setDescription(res.getString(\"description\"));", "match": 0}
{"groundtruth": "String json = request.getJson();", "prediction": " Response response = new Response();\n         response.setStatusCode(401);\n         response.setMessage(\"You are not authorized to perform this action!\");\n         return response;\n    }\n\n    public Response createNewArtist(Request request){\n         Response response = new Response();\n         response.setStatusCode(401);\n         response.setMessage(\"You are not authorized to perform this action!\");\n         return response;\n    }\n\n    public Response login(Request request){\n        Response response = new Response();\n        response.setStatusCode(401);\n        response.setMessage(\"You are not authorized to perform this action!\");\n        return response;\n    }", "first_line_groundtruth": "String json = request.getJson();", "first_line_prediction": " Response response = new Response();", "match": 0}
{"groundtruth": "playlist.setPublic(res.getBoolean(\"is_public\"));", "prediction": " playlists.add(playlist);\n        }\n        return playlists;\n    }\n\n    public void addMusicToPlaylist(int playlistId, int musicId) throws SQLException {\n        String query = \"INSERT INTO playlist_musics (playlist, music) VALUES (?,?)\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n        statement.setInt(1, playlistId);\n        statement.setInt(2, musicId);\n\n        statement.executeUpdate();\n    }\n\n    public List<Music> getMusicsOfPlaylist(int playlistId) throws SQLException {\n        String query = \"SELECT * FROM playlist_musics WHERE", "first_line_groundtruth": "playlist.setPublic(res.getBoolean(\"is_public\"));", "first_line_prediction": " playlists.add(playlist);", "match": 0}
{"groundtruth": ".setArtistObj(crudArtist.getArtistById(music.getArtist()));", "prediction": ".setArtist(crudArtist.getArtistById(music.getArtist()));\n\n            CrudAlbum crudAlbum = new CrudAlbum(database);\n            music.setAlbum(crudAlbum.getAlbumById(music.getAlbum()));\n\n            return music;\n        }\n        return null;\n    }\n\n    public List<Music> getMusicsByArtist(int artistId) throws SQLException {\n        String query = \"SELECT * FROM musics WHERE artist=?\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n        statement.setInt(1,artistId);\n        ResultSet res = statement.executeQuery();\n\n        List<", "first_line_groundtruth": ".setArtistObj(crudArtist.getArtistById(music.getArtist()));", "first_line_prediction": ".setArtist(crudArtist.getArtistById(music.getArtist()));", "match": 0}
{"groundtruth": "response.setMessage(\"Username already exists!\");", "prediction": " response.setStatusCode(409);\n                 response.setMessage(\"Username already exists!\");\n            }\n            else{\n                user.setPassword(user.getUsername());\n                crudUser.createUser(user);\n                response.setStatusCode(201);\n                response.setMessage(\"User created!\");\n            }\n        } catch (SQLException e) {\n            response.setStatusCode(500);\n            response.setMessage(\"Error creating user!\");\n        }\n\n        return response;\n    }\n\n    public Response createNewArtist(Request request){\n        String json = request.getJson();\n        Gson gson = new Gson();\n        Artist artist = gson", "first_line_groundtruth": "response.setMessage(\"Username already exists!\");", "first_line_prediction": " response.setStatusCode(409);", "match": 0}
{"groundtruth": "String command = request.getCommand();", "prediction": " // the below code fragment can be found in:\n         // src/main/java/com/ap/spotify/server/Server.java\n         //         if (request.getCommand().equals(\"login\")) {\n         //             login(request);\n         //         } else if (request.getCommand().equals(\"logout\")) {\n         //             logout(request);\n         //         } else if (request.getCommand().equals(\"register\")) {\n         //             register(request);\n         //         } else if (request.getCommand().equals(\"get_user_info\")) {\n         //             getUserInfo(request);", "first_line_groundtruth": "String command = request.getCommand();", "first_line_prediction": " // the below code fragment can be found in:", "match": 0}
{"groundtruth": "(buffer.asInputStream())\n                .build()\n            );", "prediction": "(buffer.toString())\n                     .headers(headers)\n                     .build()\n            );\n        }\n    }", "first_line_groundtruth": "(buffer.asInputStream())", "first_line_prediction": "(buffer.toString())", "match": 0}
{"groundtruth": "a.getVariable());", "prediction": " a.getValue()).concat(b.getValue().toString());\n            return stringA;\n        }\n\n        if (a.isString() && b.isNumber()) {\n            String stringA = ((String)  a.getValue()).concat(b.getValue().toString());\n            return stringA;\n        }\n\n        if (a.isNumber() && b.isString()) {\n            String stringB = ((String)  b.getValue()).concat(a.getValue().toString());\n            return stringB;\n        }\n\n        return null;\n    }", "first_line_groundtruth": "a.getVariable());", "first_line_prediction": " a.getValue()).concat(b.getValue().toString());", "match": 0}
{"groundtruth": "response.setStatusCode(201);", "prediction": " response.setStatusCode(200);\n            }\n        } catch (SQLException e) {\n            response.setMessage(\"Error in creating user!\");\n            response.setStatusCode(500);\n        }\n        return response;\n    }\n\n    public Response createNewArtist(Request request){\n        String json = request.getJson();\n        Gson gson = new Gson();\n        Artist artist = gson.fromJson(json, Artist.class);\n        CrudUser crudUser = new CrudUser(database);\n        CrudArtist crudArtist = new CrudArtist(database);\n        Response response = new Response();\n\n        try {\n           ", "first_line_groundtruth": "response.setStatusCode(201);", "first_line_prediction": " response.setStatusCode(200);", "match": 0}
{"groundtruth": "a.isString() && b.isString()) {", "prediction": "a.isNumber() && b.isVariable()) {\n            Number numberA = a.toNumber();\n            Object numberB = b.toVariable();\n\n            if (numberA instanceof Double || numberB instanceof Double) {\n                return numberA.doubleValue() + numberB;\n            } else if (numberA instanceof Float || numberB instanceof Float) {\n                return numberA.floatValue() + numberB;\n            } else if (numberA instanceof Long || numberB instanceof Long) {\n                return numberA.longValue() + numberB;\n            } else {\n                return numberA.intValue() + numberB;\n            }", "first_line_groundtruth": "a.isString() && b.isString()) {", "first_line_prediction": "a.isNumber() && b.isVariable()) {", "match": 0}
{"groundtruth": "loggedInAccount = gson.fromJson(response.getJson(), Artist.class);", "prediction": " role = \"artist\";\n                }\n            }\n            else if(crudUser.doesUserExist(account.getUsername())){\n                response = crudUser.login(account.getUsername(), account.getPassword());\n                if(response.getStatusCode() == 200){\n                    isLoggedIn = true;\n                    role = \"user\";\n                }\n            }\n            else{\n                response.setMessage(\"Username does not exist!\");\n                response.setStatusCode(400);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            response.setMessage(\"Error while logging in!\");\n            System.out.println(response.getMessage", "first_line_groundtruth": "loggedInAccount = gson.fromJson(response.getJson(), Artist.class);", "first_line_prediction": " role = \"artist\";", "match": 0}
{"groundtruth": "(a.isString() && b.isString()) {", "prediction": " (a.isNumber() && b.isVariable()) {\n            Number numberA = a.toNumber();\n            Object numberB = b.toVariable();\n\n            if (numberA instanceof Double || numberB instanceof Double) {\n                return numberA.doubleValue() + numberB;\n            } else if (numberA instanceof Float || numberB instanceof Float) {\n                return numberA.floatValue() + numberB;\n            } else if (numberA instanceof Long || numberB instanceof Long) {\n                return numberA.longValue() + numberB;\n            } else {\n                return numberA.intValue() + numberB;\n           ", "first_line_groundtruth": "(a.isString() && b.isString()) {", "first_line_prediction": " (a.isNumber() && b.isVariable()) {", "match": 0}
{"groundtruth": "response.setMessage(\"Error while creating the user!\");", "prediction": " response.setMessage(\"Error in creating user!\");\n             response.setStatusCode(500);\n        }\n        return response;\n    }\n\n    public Response createNewArtist(Request request){\n        String json = request.getJson();\n        Gson gson = new Gson();\n        Artist artist = gson.fromJson(json, Artist.class);\n        CrudUser crudUser = new CrudUser(database);\n        CrudArtist crudArtist = new CrudArtist(database);\n        Response response = new Response();\n\n        try {\n            if(crudArtist.doesArtistExist(artist.getUsername()) || crudUser.doesUser", "first_line_groundtruth": "response.setMessage(\"Error while creating the user!\");", "first_line_prediction": " response.setMessage(\"Error in creating user!\");", "match": 0}
{"groundtruth": "[i] = new Token(tokenMethod.getMethod().process(a));", "prediction": "[i] = new Token(method.process(a));\n                }\n                continue;\n            }\n            if (token instanceof TokenString) {\n                TokenString tokenString = (TokenString) token;\n                resultTokens[i] = tokenString;\n            }\n        }\n\n        for (int i = 0; i < resultTokens.length; i++) {\n            if (resultTokens[i] == null) {\n                resultTokens[i] = new TokenString(\"\");\n            }\n        }\n\n        return resultTokens;\n    }\n\n    private List<Instruction> getInstructions(List<Token> tokens) {\n        List<Instruction", "first_line_groundtruth": "[i] = new Token(tokenMethod.getMethod().process(a));", "first_line_prediction": "[i] = new Token(method.process(a));", "match": 0}
{"groundtruth": "((TokenMethod) token).getMethod());", "prediction": "methods.get(token.getVariable().toString()));\n            }\n        }\n        return operators;\n    }\n\n    private int getHighPriority(List<Instruction> operators) {\n        int maxPriority = 0;\n        for (Instruction instruction : operators) {\n            if (instruction.getPriority() > maxPriority) {\n                maxPriority = instruction.getPriority();\n            }\n        }\n        return maxPriority;\n    }\n\n    private List<Token> tokenize(String input) {\n        List<Token> tokens = new ArrayList<>();\n        for (String token : input.split(\" \")) {\n            if (token.isEmpty()) continue;", "first_line_groundtruth": "((TokenMethod) token).getMethod());", "first_line_prediction": "methods.get(token.getVariable().toString()));", "match": 0}
{"groundtruth": ".setAttribute(\"user_reg\", teacher.getName());", "prediction": ".setAttribute(\"t_name\",t_name);\n\t\t\tresp.sendRedirect(\"teacher_home.jsp\");\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"something\");\n\t\t\tresp.sendRedirect(\"teacher_login.jsp\");\n\t\t}", "first_line_groundtruth": ".setAttribute(\"user_reg\", teacher.getName());", "first_line_prediction": ".setAttribute(\"t_name\",t_name);", "match": 0}
{"groundtruth": "(response.getStatusCode() == 200) {", "prediction": " (response.getStatusCode() == 200){\n            StaticData.loggedInAccount = gson.fromJson(response.getJson(), User.class);\n            StaticData.role = \"user\";\n            System.out.println(\"Login successful!\");\n            Stage stage = (Stage) ((Node) e.getSource()).getScene().getWindow();\n            stage.close();\n            FXMLLoader loader = new FXMLLoader(HelloApplication.class.getResource(\"views/MusicView.fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage1 = new Stage();\n            stage1.setScene(scene", "first_line_groundtruth": "(response.getStatusCode() == 200) {", "first_line_prediction": " (response.getStatusCode() == 200){", "match": 0}
{"groundtruth": "album.setReleaseDate(new java.sql.Date(new java.util.Date().getTime()));", "prediction": " Request request = new Request(\"newAlbum\");\n         request.setJson(new Gson().toJson(album));\n         try {\n             StaticData.objOut.writeObject(request);\n             StaticData.objOut.flush();\n             Response response = (Response) StaticData.objIn.readObject();\n             Alert alert = new Alert(Alert.AlertType.INFORMATION);\n             alert.setTitle(\"Save\");\n             alert.setHeaderText(String.valueOf(response.getStatusCode()));\n             alert.setContentText(response.getMessage());\n             alert.show();\n         } catch (IOException | ClassNotFoundException e) {\n             throw new RuntimeException(", "first_line_groundtruth": "album.setReleaseDate(new java.sql.Date(new java.util.Date().getTime()));", "first_line_prediction": " Request request = new Request(\"newAlbum\");", "match": 0}
{"groundtruth": ".setText(String.valueOf(album.getArtist()));", "prediction": ".setText(album.getArtist());\n        dateTxt.setText(album.getDate());\n        popularityTxt.setText(String.valueOf(album.getPopularity()));\n        genreCombo.setValue(album.getGenre());\n        coverImg.setImage(new Image(album.getCover()));\n    }\n\n    public void save(ActionEvent event){\n        Request request = new Request(\"editAlbum\");\n        request.setJson(new Gson().toJson(album));\n\n        try {\n            StaticData.objOut.writeObject(request);\n            StaticData.objOut.flush();\n\n            Response response = (Response) StaticData.obj", "first_line_groundtruth": ".setText(String.valueOf(album.getArtist()));", "first_line_prediction": ".setText(album.getArtist());", "match": 0}
{"groundtruth": "u.setName(rs.getString(3));", "prediction": "\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\treturn u;", "first_line_groundtruth": "u.setName(rs.getString(3));", "first_line_prediction": "\t}", "match": 0}
{"groundtruth": "u.setPassword(rs.getString(4));", "prediction": "", "first_line_groundtruth": "u.setPassword(rs.getString(4));", "first_line_prediction": "", "match": 0}
{"groundtruth": "genre.getId() == albumId){", "prediction": "genre.getId() == album.getGenre()){\n                        albumGenre = genre;\n                    }\n                }\n                genreCombo.setValue(albumGenre);\n            }\n        } catch (IOException | ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void saveAlbum(ActionEvent event){\n        album.setTitle(titleTxt.getText());\n        album.setArtist(Integer.parseInt(artistTxt.getText()));\n        album.setGenre(genreCombo.getValue().getId());\n        album.setReleaseDate(new java.sql.Date(new java.util.Date().getTime()));\n        if(!pathTxt", "first_line_groundtruth": "genre.getId() == albumId){", "first_line_prediction": "genre.getId() == album.getGenre()){", "match": 0}
{"groundtruth": "u.setMail(rs.getString(1));", "prediction": "\tu.setMail(rs.getString(1));\n\t\t\t\t\tu.setPassword(rs.getString(2));\n\t\t\t\t\tu.setFullname(rs.getString(3));\n\t\t\t\t\tu.setReg(rs.getString(4));\n\t\t\t\t\tu.setPhone(rs.getString(5));\n\t\t\t\t\tu.setAddress(rs.getString(6));\n\t\t\t\t\tu.setGender(rs.getString(7));\n\t\t\t\t\tu.setCourse(rs.getString(8));\n\t\t\t\t\tu.setSpeciality(rs.getString(9));\n\t\t\t\t\tu.setExperience(rs.getString", "first_line_groundtruth": "u.setMail(rs.getString(1));", "first_line_prediction": "\tu.setMail(rs.getString(1));", "match": 0}
{"groundtruth": "u.setPass(rs.getString(2));", "prediction": "\tu.setPassword(rs.getString(2));\n\t\t\t\t\tu.setFullname(rs.getString(3));\n\t\t\t\t\tu.setReg(rs.getString(4));\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn u;", "first_line_groundtruth": "u.setPass(rs.getString(2));", "first_line_prediction": "\tu.setPassword(rs.getString(2));", "match": 0}
{"groundtruth": "u.setReg(rs.getString(3));", "prediction": "\tu.setReg(rs.getString(2));\n\t\t\t\t\tu.setPassword(rs.getString(3));\n\t\t\t}", "first_line_groundtruth": "u.setReg(rs.getString(3));", "first_line_prediction": "\tu.setReg(rs.getString(2));", "match": 0}
{"groundtruth": "return reduce.get(0).getVariable();", "prediction": " return reduce.get(0).getVariable();\n        }\n        return process(reduce, operators);\n    }\n\n    private List<Token> tokenize(String input) {\n        List<Token> tokens = new ArrayList<>();\n        StringBuilder builder = new StringBuilder();\n        boolean isString = false;\n        for (char c : input.toCharArray()) {\n            if (c == '\"') {\n                isString = !isString;\n            }\n            if (c == ' ' && !isString) {\n                tokens.add(new TokenString(builder.toString()));\n                builder.setLength(0);\n            } else {\n                builder.append(", "first_line_groundtruth": "return reduce.get(0).getVariable();", "first_line_prediction": " return reduce.get(0).getVariable();", "match": 0}
{"groundtruth": "u.setFullname(rs.getString(1));", "prediction": "\tu.setReg(rs.getString(1));\n\t\t\t\t\tu.setPassword(rs.getString(2));\n\t\t\t\t\tu.setFullname(rs.getString(3));\n\t\t\t}", "first_line_groundtruth": "u.setFullname(rs.getString(1));", "first_line_prediction": "\tu.setReg(rs.getString(1));", "match": 0}
{"groundtruth": "genre.getId() == music.getGenre()){", "prediction": "genre.getId() == music.getGenre()){\n                        musicGenre = genre;\n                    }\n                }\n                genreMenu.setValue(musicGenre);\n            }\n        } catch (IOException | ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n\n        Request request2 = new Request(\"getAlbums\");\n        try {\n            StaticData.objOut.writeObject(request2);\n            StaticData.objOut.flush();\n            Response response2 = (Response) StaticData.objIn.readObject();\n            System.out.println(response2.getMessage());\n            if(response2.getStatusCode() == 2", "first_line_groundtruth": "genre.getId() == music.getGenre()){", "first_line_prediction": "genre.getId() == music.getGenre()){", "match": 1}
{"groundtruth": "Operator operator = tokenOperator.getOperation();", "prediction": " if (tokenOperator.getPriority() <= maxPriority) {\n                     Token left = resultTokens[i - 1];\n                     Token right = resultTokens[i + 1];\n                     if (left != null && right != null) {\n                         resultTokens[i] = tokenOperator.process(left, right);\n                     }\n                 }\n            }\n        }\n\n        return resultTokens[0].getValue();\n    }\n\n    private List<Token> tokenize(String input) {\n        List<Token> tokens = new ArrayList<>();\n        String[] split = input.split(\" \");\n        for (String s : split) {\n            tokens.", "first_line_groundtruth": "Operator operator = tokenOperator.getOperation();", "first_line_prediction": " if (tokenOperator.getPriority() <= maxPriority) {", "match": 0}
{"groundtruth": "Token(operator.getName() + resultTokens[i + 1].getVariable());", "prediction": " TokenString(\"null\");\n                    continue;\n                }\n                Token b = getSafeToken(resultTokens, i + 1);\n                if (b == null) {\n                    setSafeToken(resultTokens, i, null);\n                    resultTokens[i - 1] = new  TokenString(\"null\");\n                    continue;\n                }\n                if (operator.validate(a, b)) {\n                    setSafeToken(resultTokens, i, null);\n                    resultTokens[i - 1] = new  TokenString(\"null\");\n                    resultTokens[i + 1] = new  TokenString(\"null\");\n                    continue", "first_line_groundtruth": "Token(operator.getName() + resultTokens[i + 1].getVariable());", "first_line_prediction": " TokenString(\"null\");", "match": 0}
{"groundtruth": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());", "prediction": " = new Token(operator.getName() + resultTokens[i + 1].getVariable());\n                    continue;\n                }\n\n                Token b = getSafeToken(resultTokens, i + 1);\n                if (b == null) {\n                    setSafeToken(resultTokens, i, null);\n                    resultTokens[i - 1] = new Token(operator.getName() + resultTokens[i - 1].getVariable());\n                    continue;\n                }\n\n                if (b instanceof TokenOperator) {\n                    setSafeToken(resultTokens, i, null);\n                    setSafeToken(resultTokens, i + 1", "first_line_groundtruth": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());", "first_line_prediction": " = new Token(operator.getName() + resultTokens[i + 1].getVariable());", "match": 0}
{"groundtruth": "a.getVariable().toString().isEmpty()) {", "prediction": " !(a instanceof TokenMethod)) {\n                    setSafeToken(resultTokens, i, null);\n                    setSafeToken(resultTokens, i - 1, null);\n                    resultTokens[i + 1] = new Token(operator.getName() + resultTokens[i + 1].getVariable());\n                    continue;\n                }\n\n                Token b = getSafeToken(resultTokens, i + 1);\n                if (b == null) {\n                    setSafeToken(resultTokens, i, null);\n                    resultTokens[i + 1] = new Token(operator.getName() + resultTokens[i + ", "first_line_groundtruth": "a.getVariable().toString().isEmpty()) {", "first_line_prediction": " !(a instanceof TokenMethod)) {", "match": 0}
{"groundtruth": "album.getId() == music.getArtist()){", "prediction": "album.getId() == music.getAlbumId()){\n                        musicAlbum = album;\n                    }\n                }\n\n                albumMenu.setValue(musicAlbum);\n            }\n        } catch (IOException | ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void saveMusic(ActionEvent event){\n        if(titleTxt.getText().isEmpty()){\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n            alert.setTitle(\"Error\");\n            alert.setHeaderText(\"Please enter a title\");\n            alert.showAndWait();\n            return;\n        }\n\n        if(pathTxt.getText().isEmpty()){\n           ", "first_line_groundtruth": "album.getId() == music.getArtist()){", "first_line_prediction": "album.getId() == music.getAlbumId()){", "match": 0}
{"groundtruth": "(album.getId() == music.getArtist()){", "prediction": "(album.getId() == music.getAlbumId()){\n                        musicAlbum = album;\n                    }\n                }\n\n                albumMenu.setValue(musicAlbum);\n            }\n        } catch (IOException | ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void saveMusic(ActionEvent event){\n        if(titleTxt.getText().isEmpty()){\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n            alert.setTitle(\"Error\");\n            alert.setHeaderText(\"Please enter a title\");\n            alert.showAndWait();\n        } else if(pathTxt.getText().isEmpty()){\n            Alert alert", "first_line_groundtruth": "(album.getId() == music.getArtist()){", "first_line_prediction": "(album.getId() == music.getAlbumId()){", "match": 0}
{"groundtruth": "playlistName.setText(playlist.getTitle());", "prediction": " playlistName.setText(playlist.getTitle());\n                 for(int i = 0; i < musics.size(); i++){\n                     Music music = new Gson().fromJson(new Gson().toJson(musics.get(i)), Music.class);\n                     musicsList.add(music.getTitle() + \".mp3\");\n                     Button button = new Button(music.getTitle());\n                     button.setMaxWidth(Double.MAX_VALUE);\n                     button.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {\n                         @Override\n                         public void handle(MouseEvent event) {\n                             try {\n                                 StaticData", "first_line_groundtruth": "playlistName.setText(playlist.getTitle());", "first_line_prediction": " playlistName.setText(playlist.getTitle());", "match": 0}
{"groundtruth": "final GptTurboModel model = GptTurboDto.convertToGptTurboModel(dto);", "prediction": " List<String> completions = chatServiceimpl.completions(dto.getPrompt());\n             return Result.data(completions);\n        } catch (Exception e) {\n            log.error(\"error\", e);\n            return Result.error(e.getMessage());\n        }\n    }", "first_line_groundtruth": "final GptTurboModel model = GptTurboDto.convertToGptTurboModel(dto);", "first_line_prediction": " List<String> completions = chatServiceimpl.completions(dto.getPrompt());", "match": 0}
{"groundtruth": "(genre.getId() == music.getGenre()){", "prediction": "(genre.getId() == music.getGenre()){\n                        musicGenre = genre;\n                    }\n                }\n                genreMenu.setValue(musicGenre);\n            }\n        } catch (IOException | ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n\n        Request request2 = new Request(\"getAlbums\");\n        try {\n            StaticData.objOut.writeObject(request2);\n            StaticData.objOut.flush();\n            Response response2 = (Response) StaticData.objIn.readObject();\n            System.out.println(response2.getMessage());\n            if(response2.getStatusCode() == ", "first_line_groundtruth": "(genre.getId() == music.getGenre()){", "first_line_prediction": "(genre.getId() == music.getGenre()){", "match": 1}
{"groundtruth": "() + \"_\" + getIdentityResolver().getIdentityKey(), getConfiguration());", "prediction": "(), configuration);\n    }", "first_line_groundtruth": "() + \"_\" + getIdentityResolver().getIdentityKey(), getConfiguration());", "first_line_prediction": "(), configuration);", "match": 0}
{"groundtruth": "el.getTypename();", "prediction": " el.getType();\n            var value =  el.getValue();\n            var name =  el.getName();\n            var id =  el.getId();\n            var entity = new JsonObject();\n            entity.addProperty(\"type\", type);\n            entity.addProperty(\"value\", value);\n            entity.addProperty(\"name\", name);\n            entity.addProperty(\"id\", id);\n            entities.getAsJsonArray().add(entity);\n        }\n\n        json.add(\"entities\", entities);\n        json.add(\"variables\", variables);\n\n        return response().withBody(json(json))\n                .withContentType(MediaType.APPLICATION_JSON_UTF_", "first_line_groundtruth": "el.getTypename();", "first_line_prediction": " el.getType();", "match": 0}
{"groundtruth": "dslParser.parse(arrangement);", "prediction": " dslParser.parse(arrangement);\n    }\n\n    public void arrange(List<String> arrangement) {\n        dslParser.parse(arrangement);\n    }\n\n    public void arrange(String[] arrangement) {\n        dslParser.parse(arrangement);\n    }\n\n    public void arrange(List<String> arrangement, ThreadPoolExecutor executor) {\n        dslParser.parse(arrangement, executor);\n    }\n\n    public void arrange(String[] arrangement, ThreadPoolExecutor executor) {\n        dslParser.parse(arrangement, executor);\n    }\n\n    public void arrange(List<String>", "first_line_groundtruth": "dslParser.parse(arrangement);", "first_line_prediction": " dslParser.parse(arrangement);", "match": 0}
{"groundtruth": "body.getVariables().getRepresentations();", "prediction": " new ArrayList<Map<String, Object>>();\n        for (RepresentationsItem item : body.getRepresentations()) {\n            HashMap<String, Object> map = new HashMap<>();\n            map.put(\"id\", item.getId());\n            map.put(\"name\", item.getName());\n            map.put(\"description\", item.getDescription());\n            map.put(\"price\", item.getPrice());\n            map.put(\"category\", item.getCategory());\n            map.put(\"image\", item.getImage());\n            map.put(\"taste\", item.getTaste());\n            map.put(\"size\", item.getSize());", "first_line_groundtruth": "body.getVariables().getRepresentations();", "first_line_prediction": " new ArrayList<Map<String, Object>>();", "match": 0}
{"groundtruth": "query = body.getQuery().replaceFirst(\".+?\\\\)\", \"\");", "prediction": "ql = body.getQuery();\n        var operationName = body.getOperationName();\n\n        Document document = new Parser().parseDocument(ql);\n        List<OperationDefinition> operationDefinitions = document.getDefinitionsOfType(OperationDefinition.class);\n\n        if (operationDefinitions.size() == 0) {\n            return response().withStatusCode(400);\n        }\n\n        OperationDefinition operationDefinition = operationDefinitions.get(0);\n        if (operationDefinition.getName() == null) {\n            operationDefinition.setName(\"Query\");\n        }\n\n        if (operationName != null && !operationName.equals(operationDefinition.getName", "first_line_groundtruth": "query = body.getQuery().replaceFirst(\".+?\\\\)\", \"\");", "first_line_prediction": "ql = body.getQuery();", "match": 0}
{"groundtruth": "response.getJson(), Music.class);", "prediction": "new Gson().toJson(response.getMusic()), Music.class);\n            musicTitleLbl.setText(music.getTitle());\n            sound = new Media(music.getUri());\n            MediaPlayer mediaPlayer = new MediaPlayer(sound);\n            mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE);\n            mediaPlayer.play();\n            mediaPlayer.setVolume(volumeSlider.getValue());\n            musicTimeline.setProgress(0);\n            musicTimeline.setMin(0);\n            musicTimeline.setMax(music.getDuration());\n            musicTimeline.setShowTickLabels(true);\n            musicTimeline.setShowTickMarks", "first_line_groundtruth": "response.getJson(), Music.class);", "first_line_prediction": "new Gson().toJson(response.getMusic()), Music.class);", "match": 0}
{"groundtruth": "System.out.println(\"test\" + response.getMessage());", "prediction": " music = new Gson().fromJson(response.getJson(), Music.class);\n            } catch (IOException | ClassNotFoundException e) {\n                throw new RuntimeException(e);\n            }\n\n            try {\n                String musicFile = \"src/main/resources/com/ap/spotify/downloads/\" + musics.get(songIndex);\n                sound = new Media(new File(musicFile).toURI().toString());\n            }\n            catch (Exception e){\n                download();\n                String musicFile = \"src/main/resources/com/ap/spotify/downloads/\" + musics.get(songIndex);\n                sound =", "first_line_groundtruth": "System.out.println(\"test\" + response.getMessage());", "first_line_prediction": " music = new Gson().fromJson(response.getJson(), Music.class);", "match": 0}
{"groundtruth": "int status = ProcessUtils.runAndWait(cmd, tempDir);", "prediction": "\n\n            ProcessBuilder builder = new ProcessBuilder(cmd.split(\" \"));\n            builder.directory(tempDir);\n            builder.redirectErrorStream(true);\n            Process process = builder.start();\n            ProcessUtils.waitForProcess(process);\n\n            File finalFile = new File(tempDir, this.getJARName());\n            FileUtils.copyFile(finalFile, new File(options.cwd, this.getJARName()));\n        }\n    }\n\n    public int run(RunOptions options, StdListener listener) throws IOException, InterruptedException {\n        if (this.software.getInstaller() == null) {\n            this.download(", "first_line_groundtruth": "int status = ProcessUtils.runAndWait(cmd, tempDir);", "first_line_prediction": "", "match": 0}
{"groundtruth": "setHeaderText(response1.getMessage());", "prediction": "setHeaderText(\"Music added to playlist!\");\n                            alert.setContentText(\"You can now listen to the music in the playlist!\");\n                            alert.showAndWait();\n                        } catch (IOException | ClassNotFoundException e) {\n                            throw new RuntimeException(e);\n                        }\n                    }\n                });\n                addToPlaylistVbox.getChildren().add(button);\n            }\n        } catch (IOException | ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private void putMusic(Music music){\n        musicName.setText(music.getName());\n        artist.setText(music.getArtist());\n        genre.setText(music.", "first_line_groundtruth": "setHeaderText(response1.getMessage());", "first_line_prediction": "setHeaderText(\"Music added to playlist!\");", "match": 0}
{"groundtruth": "FileUtils.writeFile(new File(cwd, \"eula.txt\"), \"eula=true\");", "prediction": " cmd += \" --eula\";\n        }\n\n        if (options.cwd != null) {\n            cmd += \" --cwd \" + options.cwd.getAbsolutePath();\n        }\n\n        return ProcessUtils.runAndWait(cmd, cwd, listener);\n    }", "first_line_groundtruth": "FileUtils.writeFile(new File(cwd, \"eula.txt\"), \"eula=true\");", "first_line_prediction": " cmd += \" --eula\";", "match": 0}
{"groundtruth": "Logger.info(\"Process exited with code: \" + exitCode);", "prediction": " if (exitCode != 0) {\n                 Logger.error(\"Error running artifact\");\n             }\n            return exitCode;\n        } catch (MCDException e) {\n            Logger.error(\"Error running artifact: \" + e.getMessage());\n            return 1;\n        }\n    }", "first_line_groundtruth": "Logger.info(\"Process exited with code: \" + exitCode);", "first_line_prediction": " if (exitCode != 0) {", "match": 0}
{"groundtruth": "(album.getCoverPicPath() != null) {", "prediction": " (album.getCoverPicPath() != null) {\n                        try {\n                            albumCover = new ImageView(Test.class.getResource(\"cloud/\").toExternalForm() + album.getCoverPicPath());\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    albumCover.setFitHeight(110);\n                    albumCover.setPreserveRatio(false);\n                    albumCover.setFitWidth(130);\n                    albumCover.setFitHeight(130);\n\n                    Label title = new Label(album.getTitle());\n                    title.setPrefWidth(Double.MAX_", "first_line_groundtruth": "(album.getCoverPicPath() != null) {", "first_line_prediction": " (album.getCoverPicPath() != null) {", "match": 0}
{"groundtruth": "setNumero(endereco.getNumero());", "prediction": "setCep(endereco.getCep());\n        enderecoSalvo.setNumero(endereco.getNumero());\n        enderecoSalvo.setBairro(endereco.getBairro());\n        enderecoSalvo.setCidade(endereco.getCidade());\n        enderecoSalvo.setUf(endereco.getUf());\n        enderecoSalvo.setComplemento(endereco.getComplemento());\n    }\n\n    public void removerEndereco(UUID uuid) {\n        if(!enderecoMap.containsKey(uuid)) {\n           ", "first_line_groundtruth": "setNumero(endereco.getNumero());", "first_line_prediction": "setCep(endereco.getCep());", "match": 0}
{"groundtruth": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);", "prediction": " endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);\n        enderecoRepository.save(endereco);\n\n        return ResponseEntity.ok().body(endereco);\n    }\n\n    private List<String> validar(EnderecoForm enderecoForm) {\n        Set<ConstraintViolation<EnderecoForm>> violations = validator.validate(enderecoForm);\n        return violations.stream()\n                .map(ConstraintViolation::getMessage)\n                .collect(Collectors.toList());\n    }", "first_line_groundtruth": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);", "first_line_prediction": " endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);", "match": 0}
{"groundtruth": "setComplemento(endereco.getComplemento());", "prediction": "setBairro(endereco.getBairro());\n        enderecoSalvo.setCidade(endereco.getCidade());\n        enderecoSalvo.setUf(endereco.getUf());\n        enderecoSalvo.setComplemento(endereco.getComplemento());\n    }\n\n    public void removerEndereco(UUID uuid) {\n        if(!enderecoMap.containsKey(uuid)) {\n            throw new EnderecoNaoEncontradoException(String.format(\"Endere\u00e7o com uuid:%s n\u00e3o encontrado.\", uuid));\n        }\n        endere", "first_line_groundtruth": "setComplemento(endereco.getComplemento());", "first_line_prediction": "setBairro(endereco.getBairro());", "match": 0}
{"groundtruth": "DownloadUtils.download(this.url, finalFile, ignoreExist);", "prediction": " if (finalFile.exists() && !ignoreExist) {\n            return;\n        }\n        DownloadUtils.download(this.url, finalFile, false);\n    }\n\n    public void install(File directory) throws IOException {\n        File finalFile = new File(directory, this.getJARName());\n        if (!finalFile.exists()) {\n            throw new IOException(\"File \" + finalFile.getAbsolutePath() + \" does not exist!\");\n        }\n        ProcessUtils.run(new String[] { \"java\", \"-jar\", finalFile.getAbsolutePath() }, new StdListener());\n    }\n\n    public void uninstall(File directory)", "first_line_groundtruth": "DownloadUtils.download(this.url, finalFile, ignoreExist);", "first_line_prediction": " if (finalFile.exists() && !ignoreExist) {", "match": 0}
{"groundtruth": "FileUtils.deleteRecursive(tempDir);", "prediction": " FileUtils.delete(installerFile);\n        }\n    }\n\n    public void run(RunOptions options) throws IOException, InterruptedException {\n        String cmd = this.software.getExecute().replace(\"{version}\", version).replace(\"{java}\", options.java);\n        StdListener listener = options.listener;\n        ProcessUtils.runAndWait(cmd, options.cwd, listener);\n    }", "first_line_groundtruth": "FileUtils.deleteRecursive(tempDir);", "first_line_prediction": " FileUtils.delete(installerFile);", "match": 0}
{"groundtruth": "installerFile = DownloadUtils.downloadTemp(this.url);", "prediction": "uberJar = new File(options.cwd, this.getJARName());\n            File installerJar = new File(installer.getDirectory(), installer.getJAR());\n            FileUtils.copyFile(installerJar, uberJar);\n            ProcessUtils.run(installer.getCommand(), options.cwd, options.listener);\n        }\n    }\n\n    public void run(RunOptions options, StdListener listener) throws IOException, InterruptedException {\n        ProcessUtils.run(this.software.getCommand(), options.cwd, options.listener);\n    }", "first_line_groundtruth": "installerFile = DownloadUtils.downloadTemp(this.url);", "first_line_prediction": "uberJar = new File(options.cwd, this.getJARName());", "match": 0}
{"groundtruth": "FileUtils.writeFile(new File(options.cwd, \".mcdeploy\"), this.getJARName());", "prediction": " if (options.run) {\n            ProcessUtils.runAndWait(options.java + \" \" + this.software.getID() + \".jar\", options.cwd);\n        }\n    }\n\n    public void uninstall(RunOptions options) throws IOException, InterruptedException {\n        if (options.run) {\n            ProcessUtils.runAndWait(options.java + \" -jar \" + this.software.getID() + \".jar --uninstall\", options.cwd);\n        }\n    }\n\n    public void update(RunOptions options) throws IOException, InterruptedException {\n        this.uninstall(options);\n        this.install(options);\n   ", "first_line_groundtruth": "FileUtils.writeFile(new File(options.cwd, \".mcdeploy\"), this.getJARName());", "first_line_prediction": " if (options.run) {", "match": 0}
{"groundtruth": "FileUtils.readFile(dotMCDFile);", "prediction": " dotMCDFile.exists() ? dotMCDFile.getName() : \"server.jar\";\n        }\n        options.setFile(this.file);\n\n        try {\n            Logger.info(\"Fetching for versions...\");\n            mcd.prepare();\n            Logger.info(\"Preparing for download artifact: \" + options.file);\n            mcd.install(options.file, options);\n            Logger.info(\"Installed successfully.\");\n        } catch (MCDException e) {\n            Logger.crit(e.getMessage());\n        }\n\n        return 0;\n    }", "first_line_groundtruth": "FileUtils.readFile(dotMCDFile);", "first_line_prediction": " dotMCDFile.exists() ? dotMCDFile.getName() : \"server.jar\";", "match": 0}
{"groundtruth": "modelMapper.getMapper().map(enderecoForm, Endereco.class);", "prediction": " enderecoRepository.getEnderecoPorUUID(uuid);\n        endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);\n        endereco = enderecoRepository.atualizarEndereco(endereco);\n        return ResponseEntity.ok().body(endereco);\n    }\n\n    @Operation(summary = \"Excluir endere\u00e7o\", description = \"Excluir endere\u00e7o\", tags = { \"Endere\u00e7o\" })\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"Sucesso\", content = @Content", "first_line_groundtruth": "modelMapper.getMapper().map(enderecoForm, Endereco.class);", "first_line_prediction": " enderecoRepository.getEnderecoPorUUID(uuid);", "match": 0}
{"groundtruth": "DebugChannel channel = Preconditions.checkNonNull(getChannel(key));", "prediction": " DebugChannel channel = getChannel(key);\n        if (channel == null) return false;\n\n        if (channel.getListeners().add(player)) {\n            player.sendMessage(Component.text(\"Subscribed to debug channel: \").append(channel.getFriendlyName()));\n            return true;\n        }\n\n        return false;\n    }", "first_line_groundtruth": "DebugChannel channel = Preconditions.checkNonNull(getChannel(key));", "first_line_prediction": " DebugChannel channel = getChannel(key);", "match": 0}
{"groundtruth": "List<Endereco> enderecoPelosCEP = enderecoRepository.getEnderecosPeloCEP(cep);", "prediction": " Optional<Endereco> endereco = enderecoRepository.findByCep(cep);", "first_line_groundtruth": "List<Endereco> enderecoPelosCEP = enderecoRepository.getEnderecosPeloCEP(cep);", "first_line_prediction": " Optional<Endereco> endereco = enderecoRepository.findByCep(cep);", "match": 0}
{"groundtruth": "listaEnderecos = enderecoRepository.getEnderecoList();", "prediction": " enderecos = enderecoRepository.findAll();\n        return ResponseEntity.ok().body(enderecos);\n    }\n\n    private List<String> validar(EnderecoForm enderecoForm) {\n        Set<ConstraintViolation<EnderecoForm>> violacoes = validator.validate(enderecoForm);\n        return violacoes.stream().map(ConstraintViolation::getMessage).collect(Collectors.toList());\n    }", "first_line_groundtruth": "listaEnderecos = enderecoRepository.getEnderecoList();", "first_line_prediction": " enderecos = enderecoRepository.findAll();", "match": 0}
{"groundtruth": "return R.error(\"\u672a\u77e5\u9519\u8bef\");", "prediction": " return R.error(\"\u8c03\u7528\u5931\u8d25\");\n    }", "first_line_groundtruth": "return R.error(\"\u672a\u77e5\u9519\u8bef\");", "first_line_prediction": " return R.error(\"\u8c03\u7528\u5931\u8d25\");", "match": 0}
{"groundtruth": ").put(\"name\", source.name()).put(\"version\", source.version()));", "prediction": "\n                \"name\", source.getPurl(), \"version\", source.getVersion()));\n  }\n\n  private ObjectNode createNode(PackageRef source, Set<com.redhat.exhort.api.PackageRef> allDeps) {\n    ObjectNode node = mapper.createObjectNode();\n    node.put(\"id\", getId(source));\n    node.set(\n        \"info\",\n        mapper.createObjectNode(\n            \"name\", source.getPurl(), \"version\", source.getVersion()));\n    node.set(\"dependencies\", createDependencies(source, allDeps));\n    return node;\n  }\n\n  private String getId(PackageRef source", "first_line_groundtruth": ").put(\"name\", source.name()).put(\"version\", source.version()));", "first_line_prediction": "", "match": 0}
{"groundtruth": ").purl().getType());", "prediction": "0).getPackageManager());\n        }\n      }\n      return new DependencyTree(root, deps);\n    } catch (IOException | InvalidSPDXAnalysisException e) {\n      LOGGER.error(\"Failed to parse SBOM\", e);\n      throw new ClientErrorException(Response.Status.BAD_REQUEST);\n    }\n  }\n\n  private Map<PackageRef, DirectDependency> buildDeps(SpdxWrapper wrapper) throws InvalidSPDXAnalysisException {\n    Map<PackageRef, DirectDependency> deps = new HashMap<>();\n    for (SpdxPackage pkg : wrapper.packages) {\n      if (pkg.getName().isPresent()) {\n       ", "first_line_groundtruth": ").purl().getType());", "first_line_prediction": "0).getPackageManager());", "match": 0}
{"groundtruth": "().map(v -> v.purl().getType()).distinct().toList();", "prediction": "().map(PackageRef::getType).collect(Collectors.toList());\n        if (types.size() > 1) {\n          throw new IllegalArgumentException(\n              \"It is not supported to submit mixed Package Manager types. Found: \" + types);\n        }\n        List<String> invalidTypes =\n            types.stream().filter(Predicate.not(Constants.PKG_MANAGERS::contains)).toList();\n        if (!invalidTypes.isEmpty()) {\n          throw new IllegalArgumentException(\n              \"Unsupported package types received: \" + invalidTypes);\n        }\n        packageManager = types.get(0);\n      }\n\n      for (Component component", "first_line_groundtruth": "().map(v -> v.purl().getType()).distinct().toList();", "first_line_prediction": "().map(PackageRef::getType).collect(Collectors.toList());", "match": 0}
{"groundtruth": "severity(SeverityUtils.fromScore(score));", "prediction": "severity(SeverityUtils.fromValue(data.get(\"severity\").asText()))\n         .unique(false);\n  }", "first_line_groundtruth": "severity(SeverityUtils.fromScore(score));", "first_line_prediction": "severity(SeverityUtils.fromValue(data.get(\"severity\").asText()))", "match": 0}
{"groundtruth": "tree.root(), allDeps);", "prediction": "allDeps);\n    depGraph.set(\"root\", rootNode);\n    return rootNode;\n  }\n\n  private ObjectNode createNode(Set<com.redhat.exhort.api.PackageRef> allDeps) {\n    ObjectNode rootNode = mapper.createObjectNode();\n    rootNode.set(\"name\", mapper.valueToTree(allDeps.iterator().next().name()));\n    rootNode.set(\"version\", mapper.valueToTree(allDeps.iterator().next().version()));\n    rootNode.set(\"type\", mapper.valueToTree(allDeps.iterator().next().type()));\n    root", "first_line_groundtruth": "tree.root(), allDeps);", "first_line_prediction": "allDeps);", "match": 0}
{"groundtruth": "\"/*?\" + stonecutter.currentActive() + \" {", "prediction": " \"/*?\");\n                editor.getSelectionModel().setSelection(selectionStart, selectionStart + 4);\n            });\n        }\n\n        private void clickNewElse(ActionEvent e) {\n            StackingPopupDispatcher.getInstance().closeActivePopup();\n            String selectionText = editor.getSelectionModel().getSelectedText();\n            if (selectionText == null)\n                return;\n            WriteCommandAction.runWriteCommandAction(project, null, null, () -> {\n                int selectionStart = editor.getSelectionModel().getSelectionStart(),\n                        selectionEnd = editor.getSelectionModel().getSelectionEnd(),\n                        startLine = editor.getDocument().getLineNumber(selectionStart", "first_line_groundtruth": "\"/*?\" + stonecutter.currentActive() + \" {", "first_line_prediction": " \"/*?\");", "match": 0}
{"groundtruth": "(\"pkgs\", addPackages(depGraph, req.tree()));", "prediction": "(\"nodes\", mapper.valueToTree(req.tree().getAll()));\n    depGraph.set(\"edges\", mapper.valueToTree(req.tree().getEdges()));\n\n    return mapper.writeValueAsString(depGraph);\n  }\n\n  public String fromDependencyTree(DependencyTree tree) throws JsonProcessingException {\n    ObjectNode depGraph = mapper.createObjectNode();\n    depGraph.put(\"schemaVersion\", \"1.2.0\");\n    depGraph.set(\n        \"pkgManager\",\n        mapper.createObjectNode().put(\"name\", toSnykPackageManager(tree.getPkgManager())));\n\n    depGraph.", "first_line_groundtruth": "(\"pkgs\", addPackages(depGraph, req.tree()));", "first_line_prediction": "(\"nodes\", mapper.valueToTree(req.tree().getAll()));", "match": 0}
{"groundtruth": ").missingTokens.isEmpty() ? \"\" : stonecutter.tokenCache().missingTokens.iterator().next());", "prediction": "editor).identifier);\n        tReader.setText(stonecutter.tokenCache(editor).reader);\n        tWriter.setText(stonecutter.tokenCache(editor).writer);\n    }\n\n    private void initValidation() {\n        tIdentifier.addDocumentListener(e -> {\n            if (tIdentifier.getText().isEmpty()) {\n                highlighters.forEach(RangeHighlighter::dispose);\n                highlighters.clear();\n                return;\n            }\n            highlighters.add(editor.getDocument().createRangeHighlighter(\n                    e.getOffset(),\n                    e.getOffset() + tIdentifier.getText().length(),\n                   ", "first_line_groundtruth": ").missingTokens.isEmpty() ? \"\" : stonecutter.tokenCache().missingTokens.iterator().next());", "first_line_prediction": "editor).identifier);", "match": 0}
{"groundtruth": "().add(createPkg(tree.root()));", "prediction": "();\n    pkgs.addAll(nodes);\n    depGraph.set(\"pkgs\", pkgs);\n    return depGraph;\n  }\n\n  private ObjectNode createNode(com.redhat.exhort.api.PackageRef pkg, Set<com.redhat.exhort.api.PackageRef> allDeps) {\n    ObjectNode node = mapper.createObjectNode();\n    node.put(\"name\", pkg.getPurl());\n    node.put(\"version\", pkg.getVersion());\n    node.put(\"type\", toSnykPackageManager(pkg.getPkgManager()));\n    node.set(\"deps\", addDeps(pkg", "first_line_groundtruth": "().add(createPkg(tree.root()));", "first_line_prediction": "();", "match": 0}
{"groundtruth": "c -> PackageRef.builder().purl(c.getPurl()).build())));", "prediction": " c -> toPackageRef(c.getPurl()))));\n      }\n      List<Component> components = bom.getComponents();\n      if (components != null) {\n        for (Component component : components) {\n          if (component.getDependencies() != null) {\n            for (String dependency : component.getDependencies()) {\n              PackageRef ref = toPackageRef(dependency);\n              direct.computeIfAbsent(ref, k -> DirectDependency.builder()).addDependency(ref);\n            }\n          }\n        }\n      }\n      treeBuilder.setPackageManager(packageManager);\n      treeBuilder.setDirectDependencies(direct);", "first_line_groundtruth": "c -> PackageRef.builder().purl(c.getPurl()).build())));", "first_line_prediction": " c -> toPackageRef(c.getPurl()))));", "match": 0}
{"groundtruth": "&& !req.tree().getAll().isEmpty();", "prediction": " && req.tree().root() != null;\n  }\n\n  public String buildRequest(GraphRequest req) throws JsonProcessingException {\n    if (!hasDependencies(req)) {\n      return null;\n    }\n\n    DependencyTree tree = req.tree();\n    ObjectNode depGraph = mapper.createObjectNode();\n    ArrayNode pkgs = mapper.createArrayNode();\n    ArrayNode nodes = mapper.createArrayNode();\n    Map<String, ObjectNode> nodeMap = new HashMap<>();\n\n    // the below code fragment can be found in:\n    // src/main/java/com/redhat/exhort/integration/providers", "first_line_groundtruth": "&& !req.tree().getAll().isEmpty();", "first_line_prediction": " && req.tree().root() != null;", "match": 0}
{"groundtruth": "ref.name()).append(\"@\").append(ref.version()).toString();", "prediction": "Constants.SNYK_PACKAGE_PREFIX)\n         .append(ref.name())\n         .append(Constants.SNYK_PACKAGE_VERSION_SEPARATOR)\n         .append(ref.version())\n         .toString();\n  }\n\n  private String toSnykPackageManager(String pkgManager) {\n    return pkgManager.toLowerCase();\n  }", "first_line_groundtruth": "ref.name()).append(\"@\").append(ref.version()).toString();", "first_line_prediction": "Constants.SNYK_PACKAGE_PREFIX)", "match": 0}
{"groundtruth": "PackageRef.builder().purl(pkgRef).build();", "prediction": " PackageRef.parse(pkgRef);\n            JsonNode data = n.get(\"data\");\n            if (data != null) {\n              JsonNode issues = data.get(\"issues\");\n              if (issues != null) {\n                List<Issue> issuesList = new ArrayList<>();\n                issues.forEach(\n                    i -> {\n                      String id = i.get(\"id\").asText();\n                      JsonNode issueData = i.get(\"issueData\");\n                      if (issueData != null) {\n                        JsonNode cvss = issueData.get(\"cvss\");\n                        if (cvss != null) {\n                          String cvssScore = cvss", "first_line_groundtruth": "PackageRef.builder().purl(pkgRef).build();", "first_line_prediction": " PackageRef.parse(pkgRef);", "match": 0}
{"groundtruth": "stonecutter.tokenCache().tokensByVersion.get(cVersion.getSelectedItem()).values());", "prediction": "stonecutter.tokens().getTokens().values());\n            tTokens.setModel(new AbstractTableModel() {\n                @Override\n                public int getRowCount() {\n                    return loadedTokens.size();\n                }\n\n                @Override\n                public int getColumnCount() {\n                    return 2;\n                }\n\n                @Override\n                public Object getValueAt(int rowIndex, int columnIndex) {\n                    return loadedTokens.get(rowIndex).name;\n                }\n            });\n        }\n\n        private void versionChanged(ActionEvent e) {\n            WriteCommandAction.runWriteCommandAction(project, null, null, () -> {\n                stonecutter.currentActive", "first_line_groundtruth": "stonecutter.tokenCache().tokensByVersion.get(cVersion.getSelectedItem()).values());", "first_line_prediction": "stonecutter.tokens().getTokens().values());", "match": 0}
{"groundtruth": "CharUtil.isBlankChar(str.charAt(i))) {", "prediction": "Character.isWhitespace(str.charAt(i))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public static boolean isNotBlank(CharSequence str) {\n        return !isBlank(str);\n    }\n\n    public static String trim(String str) {\n        return str == null ? null : str.trim();\n    }\n\n    public static String trimToNull(String str) {\n        return str == null ? null : str.trim();\n    }\n\n    public static String trimToEmpty(String str) {\n        return str == null ? \"\" : str.trim();\n    }\n\n    public static String", "first_line_groundtruth": "CharUtil.isBlankChar(str.charAt(i))) {", "first_line_prediction": "Character.isWhitespace(str.charAt(i))) {", "match": 0}
{"groundtruth": "(stonecutter.currentActive());", "prediction": "(stonecutter.version);\n        bTokens.setText(stonecutter.tokens);\n\n        bVersions.addActionListener(this::clickVersions);\n        bTokens.addActionListener(this::clickTokens);\n\n        bVersions.addActionListener(this::clickVersions);\n        bTokens.addActionListener(this::clickTokens);\n\n        bVersions.addActionListener(this::clickVersions);\n        bTokens.addActionListener(this::clickTokens);\n\n        bVersions.addActionListener(this::clickVersions);\n        bTokens.addActionListener(this::clickTokens);\n\n        bVersions.addActionListener(this::clickVersions);\n        bTokens.addActionListener(this::clickTokens", "first_line_groundtruth": "(stonecutter.currentActive());", "first_line_prediction": "(stonecutter.version);", "match": 0}
{"groundtruth": "(ref.name(), issues);", "prediction": "(pkgRef, issues);\n            }\n          } catch (Exception e) {\n            LOGGER.error(\"Failed to parse response: \" + pkgRef, e);\n          }\n        });\n    return reports;\n  }\n\n  private Issue toIssue(JsonNode vulnerability) {\n    String id = vulnerability.get(\"id\").asText();\n    JsonNode data = vulnerability.get(\"data\");\n    JsonNode cvss = data.get(\"cvss\");\n    String cvssV3 = cvss.get(\"v3\").asText();\n    JsonNode references = data.get(\"references\");\n    JsonNode referencesArray = references.get(\"reference\");\n   ", "first_line_groundtruth": "(ref.name(), issues);", "first_line_prediction": "(pkgRef, issues);", "match": 0}
{"groundtruth": "(moduleByRoot.get((setup.gradleProject().getChildProjects().get(version)).getProjectDir()), setup);", "prediction": "(setup.module(), setup);\n    }\n\n    private void exploreGradleProject(ExternalProject externalProject, Function<File, Module> moduleByRoot) {\n        File root = externalProject.getRootDir();\n        File buildFile = new File(root, \"build.gradle\");\n        if (!buildFile.exists())\n            return;\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(buildFile))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                if (line.startsWith(\"stonecutter.active\")) {\n                    String[] split = line.split(\"=\");\n                    if (", "first_line_groundtruth": "(moduleByRoot.get((setup.gradleProject().getChildProjects().get(version)).getProjectDir()), setup);", "first_line_prediction": "(setup.module(), setup);", "match": 0}
{"groundtruth": "conditionResult = stonecutter.testVersion(expression);", "prediction": " conditionResult = Boolean.parseBoolean(expression);\n                    conditions.push(conditionResult);\n                }\n            }\n        }\n    }\n\n    private String read(String pattern, Reader input, StringBuilder output) throws IOException {\n        StringBuilder builder = new StringBuilder();\n        int c;\n        while ((c = input.read()) != -1) {\n            if (c == '/') {\n                if (input.read() == '/') {\n                    while ((c = input.read()) != -1 && c != '\\n')\n                        builder.append((char) c);\n                } else if (input.read() == '*') {\n                    while ((", "first_line_groundtruth": "conditionResult = stonecutter.testVersion(expression);", "first_line_prediction": " conditionResult = Boolean.parseBoolean(expression);", "match": 0}
{"groundtruth": "add(ref.purl().getType());", "prediction": "add(ref.type());\n    }\n    for (PackageRef child : tree.dependencies()) {\n      types.add(child.type());\n    }\n    Predicate<String> isNot = types::contains;\n    Predicate<String> isNotRoot = isNot.negate();\n    Predicate<String> isNotTransitive = isNot.and(isNotRoot);\n    Predicate<String> isNotRootOrTransitive = isNotRoot.or(isNotTransitive);\n    for (PackageRef child : tree.dependencies()) {\n      if (child.type().equals(ref.type())) {\n        throw new IllegalArgumentException", "first_line_groundtruth": "add(ref.purl().getType());", "first_line_prediction": "add(ref.type());", "match": 0}
{"groundtruth": "(ref.name()).append(\"@\").append(ref.version()).toString();", "prediction": "(Constants.SNYK_PACKAGE_PREFIX)\n         .append(ref.name())\n         .append(Constants.SNYK_PACKAGE_VERSION_SEPARATOR)\n         .append(ref.version())\n         .toString();\n  }\n\n  private String toSnykPackageManager(String pkgManager) {\n    return pkgManager.toLowerCase();\n  }", "first_line_groundtruth": "(ref.name()).append(\"@\").append(ref.version()).toString();", "first_line_prediction": "(Constants.SNYK_PACKAGE_PREFIX)", "match": 0}
{"groundtruth": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY);", "prediction": ".of(param));\n        this.delJob = RetryJob.wrap(DelJob.of(param));\n    }\n\n    @Override\n    public void run() {\n        copyJob.run();\n        rollBackJob.run();\n        delJob.run();\n    }\n\n    public static MoveJob of(DualSideParam param) {\n        return new MoveJob(param);\n    }", "first_line_groundtruth": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY);", "first_line_prediction": ".of(param));", "match": 0}
{"groundtruth": "findExternalProject(entry.getValue().gradleProject(), entry.getKey()).keySet()) {", "prediction": "getSourceSets(entry.getKey()).keySet())\n                if (sourceSetName.equals(\"main\"))\n                    continue;\n                else\n                    byVersioned.remove(entry.getKey());\n    }\n\n    private void exploreGradleProject(ExternalProject externalProject, Function<File, Module> moduleByRoot) {\n        if (externalProject.isRoot())\n            return;\n\n        File projectDir = externalProject.getProjectDir();\n        Module module = moduleByRoot.apply(projectDir);\n        if (module == null)\n            return;\n\n        StonecutterSetup setup = new StonecutterSetup(project, module, externalProject);", "first_line_groundtruth": "findExternalProject(entry.getValue().gradleProject(), entry.getKey()).keySet()) {", "first_line_prediction": "getSourceSets(entry.getKey()).keySet())", "match": 0}
{"groundtruth": "job.setJobIndex(listIndexHolder.getAndIncrement());", "prediction": " {\n                if (jobList.get(listIndexHolder.getAndIncrement()).run(job)) {\n                    jobList.get(listIndexHolder.getAndIncrement()).run(job);\n                } else {\n                    jobList.get(listIndexHolder.getAndIncrement()).run(job);\n                }\n            };\n        };\n        List<IJob> jobList = inputs.stream()\n                .map(input -> {\n                    inputCT.incrementAndGet();\n                    return CloneJob.of(SingleSideParam.builder()\n                            .input(input)\n                            .output(output)\n                            .filePredicate(filePredicate)", "first_line_groundtruth": "job.setJobIndex(listIndexHolder.getAndIncrement());", "first_line_prediction": " {", "match": 0}
{"groundtruth": "(StrUtil.isBlank(str)) {", "prediction": " (str == null || str.length() == 0) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static boolean isInteger(CharSequence str) {\n        if (str == null || str.length() == 0) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.", "first_line_groundtruth": "(StrUtil.isBlank(str)) {", "first_line_prediction": " (str == null || str.length() == 0) {", "match": 0}
{"groundtruth": "req.tree() != null && !req.tree().getAll().isEmpty();", "prediction": " req.tree() != null && req.tree().getAll().size() > 0;\n  }\n\n  public String buildDependenciesRequest(GraphRequest req) throws JsonProcessingException {\n    if (!hasDependencies(req)) {\n      return null;\n    }\n\n    ObjectNode depGraph = mapper.createObjectNode();\n    ArrayNode pkgs = mapper.createArrayNode();\n    ArrayNode nodes = mapper.createArrayNode();\n\n    depGraph.set(\"pkgs\", pkgs);\n    depGraph.set(\n        \"graph\",\n        mapper.createObjectNode().put(\"rootNodeId\", getId(req.tree().root())).set(\"", "first_line_groundtruth": "req.tree() != null && !req.tree().getAll().isEmpty();", "first_line_prediction": " req.tree() != null && req.tree().getAll().size() > 0;", "match": 0}
{"groundtruth": "filePipe.close();", "prediction": " filePipe.close();\n        }\n    }", "first_line_groundtruth": "filePipe.close();", "first_line_prediction": " filePipe.close();", "match": 0}
{"groundtruth": "deleteJob.run();", "prediction": " try {\n             InputStream inputStream = input.open(path);\n             output.write(inputStream, path);\n         } catch (IOException e) {\n             log.error(e.getMessage(), e);\n         } finally {\n             deleteJob.run();\n         }\n    }", "first_line_groundtruth": "deleteJob.run();", "first_line_prediction": " try {", "match": 0}
{"groundtruth": "PackageRef ref = tree.root();", "prediction": " Set<PackageRef> direct = new HashSet<>();\n     Set<PackageRef> transitive = new HashSet<>();\n     DependencyTree.traverse(tree, (ref, deps) -> {\n       direct.add(ref);\n       transitive.addAll(deps);\n     });\n     Predicate<PackageRef> isDirect = direct::contains;\n     Predicate<PackageRef> isTransitive = transitive::contains;\n     DependencyTree.traverse(tree, (ref, deps) -> {\n       if (isDirect.test(ref)) {\n         deps.removeIf(isTransitive);\n       } else {\n         deps.removeIf(", "first_line_groundtruth": "PackageRef ref = tree.root();", "first_line_prediction": " Set<PackageRef> direct = new HashSet<>();", "match": 0}
{"groundtruth": "deleteJob = RetryJob.fastFailWrap(DelJob.of(param.outputSideParam()));", "prediction": "deleteJob = RetryJob.wrap(DelJob.of(param.inputSideParam()), RetryJob.NEVER_RETRY);\n    }\n\n    public static CopyJob of(DualSideParam param) {\n        return new CopyJob(param);\n    }\n\n    @Override\n    public void run() {\n        try (InputStream inputStream = input.read(path)) {\n            output.write(path, inputStream);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            deleteJob.run();\n        }\n    }", "first_line_groundtruth": "deleteJob = RetryJob.fastFailWrap(DelJob.of(param.outputSideParam()));", "first_line_prediction": "deleteJob = RetryJob.wrap(DelJob.of(param.inputSideParam()), RetryJob.NEVER_RETRY);", "match": 0}
{"groundtruth": "stonecutter.versions())\n                versionModel.add(version);", "prediction": " stonecutter.currentActive().getVersions())\n                versionModel.addElement(version);\n            cVersion.setModel(versionModel);\n            cVersion.addActionListener(e -> {\n                if (cVersion.getSelectedItem() == null)\n                    return;\n                bTokens.setEnabled(true);\n                bNewToken.setEnabled(true);\n                bCreateFlag.setEnabled(true);\n                bTokens.setText(\"Tokens for \" + cVersion.getSelectedItem());\n                tTokens.setModel(new TokensTableModel(stonecutter.currentActive().getTokens(cVersion.getSelectedItem())));\n            });\n\n            bNewToken.addActionListener(", "first_line_groundtruth": "stonecutter.versions())", "first_line_prediction": " stonecutter.currentActive().getVersions())", "match": 0}
{"groundtruth": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_FULL).equals(MIRROR_MODE_APPEND);", "prediction": " = Boolean.parseBoolean(param.getMirrorParam().get(MIRROR_MODE_PARAM));\n        this.cloneResultStorePath = param.getMirrorParam().get(CLONE_FLAG_STORE_PATH_PARAM);\n    }\n\n    public static CloneJob of(DualSideParam param) {\n        return new CloneJob(param);\n    }\n\n    @Override\n    public void run() {\n        if (isAppend) {\n            cloneAppend();\n        } else {\n            cloneFull();\n        }\n    }\n\n    private void cloneFull() {\n        try {\n            if (Files.exists(Paths.get(path)))", "first_line_groundtruth": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_FULL).equals(MIRROR_MODE_APPEND);", "first_line_prediction": " = Boolean.parseBoolean(param.getMirrorParam().get(MIRROR_MODE_PARAM));", "match": 0}
{"groundtruth": "return ActivityJDBC.instance().update(ctx.body().asPojo(Activity.class).setId(id));", "prediction": " return ActivityJDBC.instance().update(found.getId(), found.getIdUserCreate(), found.getIdParticipantList(), found.getCreatedAt(), found.getUpdatedAt(), found.getComment(), found.getCommentUrl(), found.getCommentHtml(), found.getCommentMarkdown(), found.getCommentHtmlUrl(), found.getCommentHtmlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found", "first_line_groundtruth": "return ActivityJDBC.instance().update(ctx.body().asPojo(Activity.class).setId(id));", "first_line_prediction": " return ActivityJDBC.instance().update(found.getId(), found.getIdUserCreate(), found.getIdParticipantList(), found.getCreatedAt(), found.getUpdatedAt(), found.getComment(), found.getCommentUrl(), found.getCommentHtml(), found.getCommentMarkdown(), found.getCommentHtmlUrl(), found.getCommentHtmlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found.getCommentHtmlUrlMarkdown(), found", "match": 0}
{"groundtruth": "(request.getLogin(), request.getPassword()).onComplete(ar -> {", "prediction": "(request.getUsername(), request.getPassword()).compose(user -> {\n            if(user == null) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.UNAUTHORIZED.code(), \"Invalid username or password\"));\n            return auth.authenticate(new JsonObject().put(\"sub\", user.getId()));\n        }).onFailure(ctx::fail).onSuccess(authResult -> {\n            ctx.response().putHeader(HttpHeaders.CONTENT_TYPE.toString(), \"application/json;charset=utf-8\").end(authResult.principal().encode());\n        });\n    }\n\n    private static void apiChangePassword", "first_line_groundtruth": "(request.getLogin(), request.getPassword()).onComplete(ar -> {", "first_line_prediction": "(request.getUsername(), request.getPassword()).compose(user -> {", "match": 0}
{"groundtruth": "ActivityJDBC.instance().getById(id).compose(found -> {", "prediction": " ActivityJDBC.instance().update(id, ctx.user().principal().getLong(\"sub\")).onComplete(ar -> {\n            if(ar.failed()) ctx.fail(ar.cause());\n            ctx.response().end();\n         });\n    }\n\n    private static void apiDelete(RoutingContext ctx) {\n        Long id = Long.valueOf(ctx.request().getParam(\"id\"));\n        ActivityJDBC.instance().delete(id).onComplete(ar -> {\n            if(ar.failed()) ctx.fail(ar.cause());\n            ctx.response().end();\n         });\n    }", "first_line_groundtruth": "ActivityJDBC.instance().getById(id).compose(found -> {", "first_line_prediction": " ActivityJDBC.instance().update(id, ctx.user().principal().getLong(\"sub\")).onComplete(ar -> {", "match": 0}
{"groundtruth": "UserJDBC.instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {", "prediction": " UserJDBC.instance().getByEmail(request.getEmail()).compose(user -> {\n             if(user == null) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.UNAUTHORIZED.code(), \"User not found\"));\n             return auth.authenticate(new JsonObject().put(\"email\", request.getEmail()).put(\"password\", request.getPassword()));\n         }).compose(authResult -> {\n             if(authResult.failed()) return Future.failedFuture(authResult.cause());\n             ctx.response().putHeader(HttpHeaders.CONTENT_TYPE.toString(), \"application/json;charset=utf-8", "first_line_groundtruth": "UserJDBC.instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {", "first_line_prediction": " UserJDBC.instance().getByEmail(request.getEmail()).compose(user -> {", "match": 0}
{"groundtruth": "task.getOutputDir().set(task.getInputDir().get());", "prediction": " task.getOutputDir().set(new File(versionProject.getBuildDir(), \"chiseledSrc\"));\n            }\n        });\n    }\n\n    public void afterEvaluate(Project project) {\n        for (String version : setup.versions()) {\n            Project versionProject = project.project(version);\n            StonecutterBuildGradle.Version versionData = versionProject.getExtensions().getByType(StonecutterBuildGradle.class).current();\n            StonecutterTask task = project.getTasks().create(\"Set active version to \" + versionData.version(), StonecutterTask.class);\n            task", "first_line_groundtruth": "task.getOutputDir().set(task.getInputDir().get());", "first_line_prediction": " task.getOutputDir().set(new File(versionProject.getBuildDir(), \"chiseledSrc\"));", "match": 0}
{"groundtruth": "instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {", "prediction": "instance().getByEmail(request.email).compose(user -> {\n            if(user == null) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.BAD_REQUEST.code(), \"User not found\"));\n            return auth.authenticate(request.email, request.password);\n        }).onFailure(ctx::fail).onSuccess(user -> {\n            JsonObject json = new JsonObject();\n            json.put(\"id\", user.principal().getLong(\"sub\"));\n            json.put(\"email\", user.principal().getString(\"email\"));\n            json.put(\"name\", user.principal().getString(\"name\"));", "first_line_groundtruth": "instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {", "first_line_prediction": "instance().getByEmail(request.email).compose(user -> {", "match": 0}
{"groundtruth": "task.getInputDir().set(afterEvaluate.file(\"./src\"));", "prediction": " task.getInputDir().set(versionProject.file(\"./src\"));\n                task.getOutputDir().set(new File(versionProject.getBuildDir(), \"chiseledSrc\"));\n            }\n        });\n    }\n\n    public void afterEvaluate(Project project) {\n        File loaderCopy = new File(project.getRootDir(), \".gradle/stonecutter\");\n        loaderCopy.mkdirs();\n        loaderCopy = new File(loaderCopy, \"fabric-loader.jar\");\n        if (!loaderCopy.exists())\n            loaderSearch: for (Configuration configuration : project.getConfigurations())\n                for (Dependency dependency : configuration.", "first_line_groundtruth": "task.getInputDir().set(afterEvaluate.file(\"./src\"));", "first_line_prediction": " task.getInputDir().set(versionProject.file(\"./src\"));", "match": 0}
{"groundtruth": ".getOutputDir().set(task.getInputDir().get());", "prediction": ".getOutputDir().set(new File(versionProject.getBuildDir(), \"chiseledSrc\"));\n            }\n        });\n    }\n\n    public void afterEvaluate(Project project) {\n        for (String version : setup.versions()) {\n            Project versionProject = project.project(version);\n            StonecutterBuildGradle.Version versionData = versionProject.getExtensions().getByType(StonecutterBuildGradle.class).current();\n            StonecutterTask task = project.getTasks().create(\"Set active version to \" + versionData.version(), StonecutterTask.class);\n            task.", "first_line_groundtruth": ".getOutputDir().set(task.getInputDir().get());", "first_line_prediction": ".getOutputDir().set(new File(versionProject.getBuildDir(), \"chiseledSrc\"));", "match": 0}
{"groundtruth": "switch (matchPlayer.getTeam()) {", "prediction": " if(matchPlayer.getTeam() == MatchTeam.RED) {\n                 redPlayers.add(matchPlayer);\n             } else {\n                 bluePlayers.add(matchPlayer);\n             }\n        }\n\n        red = new MatchTeam(redPlayers);\n        blue = new MatchTeam(bluePlayers);\n\n        rounds = new LinkedList<>();\n\n        JsonArray roundData = object.getAsJsonObject(\"rounds\").getAsJsonArray(\"all_rounds\");\n\n        for (JsonElement roundElement : roundData) {\n            rounds.add(new MatchRound(valorantAPI).fetchData(roundElement.getAsJsonObject()));\n        }\n\n        fetched = true;", "first_line_groundtruth": "switch (matchPlayer.getTeam()) {", "first_line_prediction": " if(matchPlayer.getTeam() == MatchTeam.RED) {", "match": 0}
{"groundtruth": "(valorantAPI.sendRestRequest(\"/v2/match/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));", "prediction": "(valorantAPI.sendRestRequest(\"/v1/matches/\" + region.getQuery() + \"/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));\n    }\n\n    public MatchPlayer getPlayer(String playerId) {\n        for (MatchPlayer player : players) {\n            if (player.getPlayerId().equals(playerId)) {\n                return player;\n            }\n        }\n\n        return null;\n    }\n\n    public MatchPlayer getPlayer(ValorantPlayer player) {\n        for (MatchPlayer matchPlayer : players) {\n            if (matchPlayer.getPlayerId().equals(player.getPlayerId())) {\n                return", "first_line_groundtruth": "(valorantAPI.sendRestRequest(\"/v2/match/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));", "first_line_prediction": "(valorantAPI.sendRestRequest(\"/v1/matches/\" + region.getQuery() + \"/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));", "match": 0}
{"groundtruth": "JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject().getAsJsonObject(\"data\");", "prediction": " return new ServerStatus(this).fetchData();\n    }\n\n    public List<StatusEntry> getServerStatusEntries(Region region) throws IOException {\n        return getServerStatus(region).getEntries();\n    }\n\n    public List<Update> getServerStatusUpdates(Region region) throws IOException {\n        return getServerStatus(region).getUpdates();\n    }\n\n    public List<WebsiteArticle> getWebsiteArticles(Region region) throws IOException {\n        return new WebsiteArticle(this).fetchData();\n    }\n\n    public List<Bundle> getBundles(Region region) throws IOException {\n        return new Bundle(this).fetchData", "first_line_groundtruth": "JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject().getAsJsonObject(\"data\");", "first_line_prediction": " return new ServerStatus(this).fetchData();", "match": 0}
{"groundtruth": "+ region.getQuery() + \"?name=\" + data[0] + \"&tag=\" + data[1]).getAsJsonArray();", "prediction": " + region.getQuery() + \"/\" + data[0] + \"/\" + data[1]).getAsJsonArray();\n        }\n\n        List<LeaderboardPlayer> leaderboard = new LinkedList<>();\n        for (JsonElement element : leaderboardData) {\n            leaderboard.add(new LeaderboardPlayer(this).fetchData(element.getAsJsonObject()));\n        }\n        return leaderboard;\n    }\n\n    public List<LeaderboardPlayer> getLeaderboard(Region region) throws IOException {\n        return getLeaderboard(region, null);\n    }\n\n    public List<LeaderboardPlayer> getLeaderboard() throws IOException {\n        return getLeader", "first_line_groundtruth": "+ region.getQuery() + \"?name=\" + data[0] + \"&tag=\" + data[1]).getAsJsonArray();", "first_line_prediction": " + region.getQuery() + \"/\" + data[0] + \"/\" + data[1]).getAsJsonArray();", "match": 0}
{"groundtruth": "commands.getOrderById(orderId),\n                HttpStatus.OK);", "prediction": " commands.getOrder(orderId),\n                 HttpStatus.OK);\n    }\n\n    @GetMapping(\"status/{status}\")\n    public ResponseEntity<List<Order>> getOrdersByStatus(@PathVariable OrderStatus status){\n        return new ResponseEntity<>(\n                commands.getOrdersByStatus(status),\n                HttpStatus.OK);\n    }\n\n    @GetMapping(\"book/{bookId}\")\n    public ResponseEntity<List<Order>> getOrdersByBookId(@PathVariable Long bookId){\n        return new ResponseEntity<>(\n                commands.getOrdersByBookId(bookId),\n                HttpStatus.OK);\n    }\n\n    @GetMapping(\"book/{bookId}/status/{status}\")\n    public", "first_line_groundtruth": "commands.getOrderById(orderId),", "first_line_prediction": " commands.getOrder(orderId),", "match": 0}
{"groundtruth": "= commands.createRequest(body.get(\"bookId\"))\n                .toString();", "prediction": " = commands.createRequest(body.get(\"bookId\"), body.get(\"userId\"))\n                .toString();\n        response.put(\"operationResult\", result);\n        return new ResponseEntity<>(response, HttpStatus.OK);\n    }\n\n    @PostMapping(\"status\")\n    public ResponseEntity<Map<String, String>> changeRequestStatus(@RequestBody Map<String, RequestStatus> body) {\n        Map<String, String> response = new HashMap<>();\n        String result = commands.changeStatusOfRequest(body.get(\"requestId\"), body.get(\"status\"))\n                .toString();\n        response.put(\"operationResult\", result);\n        return", "first_line_groundtruth": "= commands.createRequest(body.get(\"bookId\"))", "first_line_prediction": " = commands.createRequest(body.get(\"bookId\"), body.get(\"userId\"))", "match": 0}
{"groundtruth": "> booksToOrder = bookService.getBooksByIds(ids);", "prediction": "> books = bookService.getBooksByIds(ids);\n        if (books.stream().anyMatch(book -> book.getStatus() == BookStatus.OUT_OF_STOCK)) {\n            createRequestFromBook(books.stream()\n                    .filter(book -> book.getStatus() == BookStatus.OUT_OF_STOCK)\n                    .findFirst()\n                    .orElseThrow());\n        }\n        Order order = entityFactory.buildOrder(books);\n        orderService.saveOrder(order);\n        return ResultOfOperation.CreateOrder.ORDER_CREATED;\n    }\n\n    /**\n     * return list of orders,", "first_line_groundtruth": "> booksToOrder = bookService.getBooksByIds(ids);", "first_line_prediction": "> books = bookService.getBooksByIds(ids);", "match": 0}
{"groundtruth": "<>(commands.getNumberOfRequestsOnBook(bookId),\n                HttpStatus.OK);", "prediction": "<>(commands.getNumberOfRequestsOnBook(bookId),\n                HttpStatus.OK);\n    }\n\n    @GetMapping(\"book/{bookId}/request\")\n    public ResponseEntity<List<Request>> getRequestsOnBook(@PathVariable Long bookId) {\n        return new ResponseEntity<>(commands.getRequestsOnBook(bookId),\n                HttpStatus.OK);\n    }\n\n    @GetMapping(\"book/{bookId}/request/{requestId}\")\n    public ResponseEntity<Request> getRequestById(@PathVariable Long bookId, @PathVariable Long requestId) {\n        return new ResponseEntity<>(commands.getRequestById(requestId),\n                HttpStatus.OK);\n    }\n\n    @DeleteMapping(\"", "first_line_groundtruth": "<>(commands.getNumberOfRequestsOnBook(bookId),", "first_line_prediction": "<>(commands.getNumberOfRequestsOnBook(bookId),", "match": 1}
{"groundtruth": "dependency.getVersion(),\n                dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );", "prediction": " dependency.getVersion(),\n                dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope());\n    }\n\n    private static BiConsumer<String, String> nodeChanger(PomTransformer.NodeGavtcs nodeGavtcs) {\n        return (attribute, value) -> {\n            if (nodeGavtcs.hasAttribute(attribute)) {\n                nodeGavtcs.setAttribute(attribute, value);\n            } else {\n                nodeGavtcs.addAttribute(attribute, value);\n            }\n        };\n    }", "first_line_groundtruth": "dependency.getVersion(),", "first_line_prediction": " dependency.getVersion(),", "match": 0}
{"groundtruth": "dependency.getClassifier(),\n                dependency.getScope()\n        );", "prediction": " dependency.getClassifier(),\n                dependency.getScope());\n    }\n\n    private static BiConsumer<String, String> nodeChanger(PomTransformer.NodeGavtcs nodeGavtcs) {\n        return (key, value) -> {\n            if (nodeGavtcs.hasProperty(key)) {\n                nodeGavtcs.setProperty(key, value);\n            } else {\n                nodeGavtcs.addProperty(key, value);\n            }\n        };\n    }", "first_line_groundtruth": "dependency.getClassifier(),", "first_line_prediction": " dependency.getClassifier(),", "match": 0}
{"groundtruth": "pomFile).execute(() -> dependencyCommand().accept(pomFile, dependency));", "prediction": "pomFile, dependency);\n\n            getLog().info(String.format(\"dependency: %s has been added to the \\\"%s\\\" file\", dependency, pomFile));\n        } catch (RuntimeException ex) {\n            throw new MojoFailureException(\n                    String.format(\"cannot add the dependency: %s to the \\\"%s\\\" file: %s\", dependency, pomFile, ex.getMessage()),\n                    ex\n            );\n        }\n    }\n\n    private Dependency buildDependency() {\n        Dependency dependency = new Dependency();\n        dependency.setGav(gav);\n        dependency.setType(type);\n        dependency.setClassifier(classifier);\n       ", "first_line_groundtruth": "pomFile).execute(() -> dependencyCommand().accept(pomFile, dependency));", "first_line_prediction": "pomFile, dependency);", "match": 0}
{"groundtruth": "List<jenaTripleParser> result = serviceJena.getTriples(filePath, url, ontologyContentEncoded64) ;", "prediction": "\tList<String> result = serviceJena.rdfToTriples(ontologyContentEncoded64);\n        \t\t\t\treturn ResponseEntity.ok(result);\n        \t\t} catch (Exception e) {\n        \t\t\t\treturn ResponseEntity.badRequest().body(e.getMessage());\n        \t\t}\n    }\n    \n    @PostMapping(\"/sparql\")\n    public ResponseEntity<?> sparqlQuery(@RequestBody jenaTripleParserInput request ){\n    \t\n        // extract input parameters from the request object\n        String filePath = request.getFilePath();\n        String url = request.getUrl();\n        String ontologyContentEncoded64 = request.getOntologyContentEncoded64", "first_line_groundtruth": "List<jenaTripleParser> result = serviceJena.getTriples(filePath, url, ontologyContentEncoded64) ;", "first_line_prediction": "\tList<String> result = serviceJena.rdfToTriples(ontologyContentEncoded64);", "match": 0}
{"groundtruth": "dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );", "prediction": " dependency.getType(),\n                 dependency.getClassifier(),\n                 dependency.getScope());\n    }\n\n    private static BiConsumer<String, String> nodeChanger(PomTransformer.NodeGavtcs nodeGavtcs) {\n        return (attribute, value) -> {\n            if (nodeGavtcs.hasAttribute(attribute)) {\n                nodeGavtcs.setAttribute(attribute, value);\n            } else {\n                nodeGavtcs.addAttribute(attribute, value);\n            }\n        };\n    }", "first_line_groundtruth": "dependency.getType(),", "first_line_prediction": " dependency.getType(),", "match": 0}
{"groundtruth": "SWRLService.SWRLruleReclassification(filePath, url,reqBodies,reqHead);", "prediction": " SWRLService.postReclassificationContent(ontologyContentDecoded64, reqBodies, reqHead);\n            \t}else {\n            \t\tresult =  SWRLService.postReclassificationContent(ontologyContentDecoded64, reqBodies, reqHead);\n            \t}\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n    }\n    //Post API For STRING\n    @PostMapping(\"/alternative_exec_rule_complex\")\n    public ResponseEntity<?> postReclassificationComplex(@RequestBody(required = false) ruleSWR", "first_line_groundtruth": "SWRLService.SWRLruleReclassification(filePath, url,reqBodies,reqHead);", "first_line_prediction": " SWRLService.postReclassificationContent(ontologyContentDecoded64, reqBodies, reqHead);", "match": 0}
{"groundtruth": "equivalentClass = request.getEquivalentClass();", "prediction": " isAll = request.getIsAll();\n        String filePath = request.getFilePath();\n        String url = request.getUrl();\n        String ontologyContentEncoded64 = request.getOntologyContentEncoded64();\n    \tbyte[] ontologyContentDecoded64Bytes = null;\n    \tString ontologyContentDecoded64 = null;\n    \tif (ontologyContentEncoded64 != null && !ontologyContentEncoded64.isEmpty()) {\n    \t ontologyContentDecoded64Bytes = Base64.getMimeDecoder().decode(ontologyContentEncoded64);\n    \t ontologyContentDecoded64 = new String(ontologyContentDecoded64Bytes", "first_line_groundtruth": "equivalentClass = request.getEquivalentClass();", "first_line_prediction": " isAll = request.getIsAll();", "match": 0}
{"groundtruth": "result = SWRLService.SWRLruleReclassificationB64(ontologyContentDecoded64,reqBodies,reqHead);", "prediction": "\tresult = SWRLService.SWRLruleReclassification(reqBodies,reqHead);\n            \t}\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n    }\n    //Post API For STRING\n    @PostMapping(\"/alternative_exec_rule_complex\")\n    public ResponseEntity<?> postReclassificationComplex(@RequestBody(required = false) ruleSWRLInputComplex request) { \n    \t// This Class works only for Classess\n        String filePath = request.getFilePath();\n        String url = request.getUrl();", "first_line_groundtruth": "result = SWRLService.SWRLruleReclassificationB64(ontologyContentDecoded64,reqBodies,reqHead);", "first_line_prediction": "\tresult = SWRLService.SWRLruleReclassification(reqBodies,reqHead);", "match": 0}
{"groundtruth": "DisjointClasses  = request.getDisjointClasses();", "prediction": " DisjointClasses = request.getDisjointClasses();\n        Boolean differentIndividual = request.getDifferentIndividual();\n        Boolean HasValue = request.getHasValue();\n        Boolean InverseObjectProperties = request.getInverseObjectProperties();\n        Boolean AllValuesFrom = request.getAllValuesFrom();\n        Boolean SomeValuesFrom = request.getSomeValuesFrom();\n        Boolean DomainAndRange = request.getDomainAndRange();\n        Boolean ClassAssertion = request.getClassAssertion();\n        Boolean SubClass = request.getSubClass();\n        Boolean DataPropertyCharacteristic = request.getDataPropertyCharacteristic();\n        Boolean EquivalentDataProperty = request.getEquivalentData", "first_line_groundtruth": "DisjointClasses  = request.getDisjointClasses();", "first_line_prediction": " DisjointClasses = request.getDisjointClasses();", "match": 0}
{"groundtruth": "= request.getParams();", "prediction": " = request.getReqParametres();\n        String[] reqBodies = request.getReqBodies();\n        String[] reqHead = request.getReqHead();\n    \tbyte[] ontologyContentDecoded64Bytes = null;\n    \tString ontologyContentDecoded64 = null;\n    \tif (ontologyContentEncoded64 != null && !ontologyContentEncoded64.isEmpty()) {\n    \t ontologyContentDecoded64Bytes = Base64.getMimeDecoder().decode(ontologyContentEncoded64);\n    \t ontologyContentDecoded64 = new String(ontologyContentDecoded64Bytes, StandardCharsets.UTF_8);", "first_line_groundtruth": "= request.getParams();", "first_line_prediction": " = request.getReqParametres();", "match": 0}
{"groundtruth": "= reasonerService.getUnsatisfaisableClasses(filePath, url);", "prediction": " = reasonerService.getUnsatisfaisableClasses(filePath, url);\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n        }\n\n    @PostMapping(\"/inference\")\n    public ResponseEntity<?> postInference(\n            @RequestParam(required = false) MultipartFile ontologyFile,\n            @RequestParam(required = false) String filePath,\n            @RequestParam(required = false) String url) { \n    \tint parametersCount = countNumberOfParametres(ontologyFile, filePath, url);\n        if (parametersCount == 0) {", "first_line_groundtruth": "= reasonerService.getUnsatisfaisableClasses(filePath, url);", "first_line_prediction": " = reasonerService.getUnsatisfaisableClasses(filePath, url);", "match": 0}
{"groundtruth": "= reasonerService.postConsistency(filePath, url);", "prediction": " = reasonerService.getConsistency(filePath, url, ontologyContentDecoded64);\n                } else {\n                result  = reasonerService.getConsistency(ontologyContentDecoded64);\n                }\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n        \n    \t}\n    \t@PostMapping(\"/inference\")\n    public ResponseEntity<?> postInference(@RequestBody(required = false) reasonerInput request) { \n         // extract input parameters from the request object\n        String filePath = request.getFilePath();\n        String url = request.getUrl();", "first_line_groundtruth": "= reasonerService.postConsistency(filePath, url);", "first_line_prediction": " = reasonerService.getConsistency(filePath, url, ontologyContentDecoded64);", "match": 0}
{"groundtruth": "reasonerService.postConsistencyContent(ontologyContentDecoded64);", "prediction": " reasonerService.postConsistency(ontologyContentDecoded64);\n            \t}\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n        \n    \t}\n    \t//Post API For FILE\n    \t@PostMapping(\"/consistencyAlt\")\n    \tpublic ResponseEntity<?> postConsistencyAlt(@RequestParam(required = false) MultipartFile ontologyFile,\n    \t\t\t@RequestParam(required = false) String filePath,\n    \t\t\t@RequestParam(required = false) String url) { \n    \t\tint parametersCount = countNumberOfParametres(ontologyFile, filePath", "first_line_groundtruth": "reasonerService.postConsistencyContent(ontologyContentDecoded64);", "first_line_prediction": " reasonerService.postConsistency(ontologyContentDecoded64);", "match": 0}
{"groundtruth": "reasonerService.postInferences(filePath, url,valuesList);", "prediction": " reasonerService.postInference(filePath, url, valuesList);\n                 // Here if we use filePath or Url\n            \t }else {\n            \tresult = reasonerService.postInferenceContent(ontologyContentDecoded64, valuesList);\n            \t // Here if we use the Encoded Content\n            \t }\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n         }\n     //Post API For STRING\n     @PostMapping(\"/unsatisfaisableClasses\")\n     public ResponseEntity<?> postUnsatisfaisableClasses(@RequestBody(required = false", "first_line_groundtruth": "reasonerService.postInferences(filePath, url,valuesList);", "first_line_prediction": " reasonerService.postInference(filePath, url, valuesList);", "match": 0}
{"groundtruth": "result = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);", "prediction": "\tresult = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);\n            \t}\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n         }\n     //Post API For STRING\n     @PostMapping(\"/unsatisfaisableClasses\")\n     public ResponseEntity<?> postUnsatisfaisableClasses(@RequestBody(required = false) reasonerInput request) { \n         // extract input parameters from the request object\n         String filePath = request.getFilePath();\n         String url = request.getUrl();\n         String ontology", "first_line_groundtruth": "result = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);", "first_line_prediction": "\tresult = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);", "match": 0}
{"groundtruth": "result = reasonerService.getInferences(filePath, url);", "prediction": " result = reasonerService.getInference(filePath, url);\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n            \n        \t\n        \n    \t}\n    \t@GetMapping(\"/reasoner\")\n    public ResponseEntity<?> getReasoner(@RequestParam(required = false) String filePath,\n            \t@RequestParam(required = false) String url) {\n        \n    \t\tint parametersCount = countNumberOfParametres( filePath, url);\n        \tif (parametersCount == 0) {\n            \treturn ResponseEntity.badRequest().body(\"At least one", "first_line_groundtruth": "result = reasonerService.getInferences(filePath, url);", "first_line_prediction": " result = reasonerService.getInference(filePath, url);", "match": 0}
{"groundtruth": "= reasonerService.postUnsatisfaisableClasses(filePath, url);", "prediction": " = reasonerService.postUnsatisfiable(filePath, url);\n                 // Here if we use filePath or Url\n            \t }else {\n            \tresult = reasonerService.postUnsatisfiableContent(ontologyContentDecoded64);\n            \t // Here if we use the Encoded Content\n            \t }\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n        \n    \t}\n     //Post API For STRING\n     @PostMapping(\"/satisfiable\")\n     public ResponseEntity<?> postSatisfiable(@RequestBody(required = false) reasonerInput request) { \n        ", "first_line_groundtruth": "= reasonerService.postUnsatisfaisableClasses(filePath, url);", "first_line_prediction": " = reasonerService.postUnsatisfiable(filePath, url);", "match": 0}
{"groundtruth": "writer.writeInt(length);", "prediction": " writer.writeByte(NbtTagValue.TAG_INT_ARRAY);\n         writer.writeVarInt(length);\n         for (int i : value) {\n             writer.writeInt(i);\n         }\n     }\n\n    public void writeVarInt(int value) throws IOException {\n        while ((value & ~0x7F) != 0) {\n            writer.writeByte((byte) ((value & 0x7F) | 0x80));\n            value >>>= 7;\n        }\n        writer.writeByte((byte) value);\n    }\n\n    public void writeTag(NbtTag", "first_line_groundtruth": "writer.writeInt(length);", "first_line_prediction": " writer.writeByte(NbtTagValue.TAG_INT_ARRAY);", "match": 0}
{"groundtruth": ": return NbtTagValue.fromByte(readByte());", "prediction": ": {\n                return NbtTagValue.of(readByte());\n            }\n            case NbtTagValue.TAG_SHORT: {\n                return NbtTagValue.of(readShort());\n            }\n            case NbtTagValue.TAG_INT: {\n                return NbtTagValue.of(readInt());\n            }\n            case NbtTagValue.TAG_LONG: {\n                return NbtTagValue.of(readLong());\n            }\n            case NbtTagValue.TAG_FLOAT: {\n                return NbtTagValue.of(readFloat());\n            }\n            case NbtTagValue.TAG_DOUBLE: {\n                return NbtTagValue.of", "first_line_groundtruth": ": return NbtTagValue.fromByte(readByte());", "first_line_prediction": ": {", "match": 0}
{"groundtruth": "writer.writeShortUnsigned(value.length());", "prediction": " writeString(value, 32767);\n    }\n\n    public void writeString(String value, int maxLength) throws IOException {\n        if (value.length() > maxLength) {\n            throw new RuntimeException(\"String exceed max length. maxLength: \" + maxLength + \" length: \" + value.length());\n        }\n        writer.writeShortUnsigned(value.length());\n        writer.writeBytes(value.getBytes());\n    }\n\n    public void writeIdentifier(String value) throws IOException {\n        writeString(value, 32767);\n    }\n\n    public void writeBoolean(boolean value) throws IOException", "first_line_groundtruth": "writer.writeShortUnsigned(value.length());", "first_line_prediction": " writeString(value, 32767);", "match": 0}
{"groundtruth": "visitor.visitByte(value);", "prediction": " visitor.visitByte(value);\n            }\n        };\n    }\n\n    public static NbtTagValue<Short> fromShort(short value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_SHORT;\n            }\n\n            @Override\n            public Short getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitShort(value);\n            }\n        };\n    }\n\n    public static NbtTagValue<Integer> fromInt(int value) {\n        return new NbtTagValue<>() {\n            @Override\n           ", "first_line_groundtruth": "visitor.visitByte(value);", "first_line_prediction": " visitor.visitByte(value);", "match": 0}
{"groundtruth": "writer.writeInt(value.length);", "prediction": " writer.writeByteArray(value);\n    }\n\n    public void writeString(String value) throws IOException {\n        writer.writeString(value);\n    }\n\n    public void writeString(String value, int maxLength) throws IOException {\n        writer.writeString(value, maxLength);\n    }\n\n    public void writeIdentifier(String value) throws IOException {\n        writer.writeIdentifier(value);\n    }\n\n    public void writeBoolean(boolean value) throws IOException {\n        writer.writeBoolean(value);\n    }\n\n    public void writeByte(byte value, int length) throws IOException {\n        writer.writeByte(value, length);\n    }\n\n   ", "first_line_groundtruth": "writer.writeInt(value.length);", "first_line_prediction": " writer.writeByteArray(value);", "match": 0}
{"groundtruth": "DoMainUtil.firstLevel(subDoMain)) {", "prediction": "DoMainUtil.firstLevel(subDoMain)) {\n            domain = \"@\";\n            rr = subDoMain;\n        } else {\n            domain = subDoMain.substring(0, subDoMain.indexOf('.'));\n            rr = subDoMain.substring(subDoMain.indexOf('.') + 1);\n        }\n        AliDnsUtils.addRecord(client, domain, rr, RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), ip);\n    }\n\n    @Override\n    public void update(ParsingRecord parsingRecord, String ip, String recordId) throws Exception {\n        //call dns api\n        Client", "first_line_groundtruth": "DoMainUtil.firstLevel(subDoMain)) {", "first_line_prediction": "DoMainUtil.firstLevel(subDoMain)) {", "match": 1}
{"groundtruth": "= reader.readInt();", "prediction": " = readVarInt();\n        byte[] bytes = new byte[length];\n        reader.readBytes(bytes);\n        return bytes;\n    }\n\n    public NbtTagCompound readCompound() throws IOException {\n        NbtTagCompound compound = new NbtTagCompound();\n\n        int length = readVarInt();\n        for (int i = 0; i < length; i++) {\n            String key = readString();\n            NbtTagValue value = readTag();\n            compound.put(key, value);\n        }\n\n        return compound;\n    }\n\n    public NbtTagList readList() throws IOException {\n        NbtTagList list = new NbtTag", "first_line_groundtruth": "= reader.readInt();", "first_line_prediction": " = readVarInt();", "match": 0}
{"groundtruth": "reader.readBytes(data);", "prediction": "\n\n        return data;\n    }\n\n    public NbtTagCompound readCompound() throws IOException {\n        NbtTagCompound compound = new NbtTagCompound();\n\n        int length = reader.readInt();\n        for (int i = 0; i < length; i++) {\n            String key = readString(32767);\n            NbtTagValue value = readTag();\n            compound.put(key, value);\n        }\n\n        return compound;\n    }\n\n    public NbtTagList readList() throws IOException {\n        NbtTagList list = new NbtTagList();\n\n        int length = reader.readInt();\n        for (int i = ", "first_line_groundtruth": "reader.readBytes(data);", "first_line_prediction": "", "match": 0}
{"groundtruth": "int length = reader.readShort();", "prediction": " return readString(262144);\n    }\n\n    public String readString(int maxLength) throws IOException {\n        int length = reader.readInt();\n        if (length > maxLength) {\n            throw new IOException(\"String length is too big\");\n        }\n\n        byte[] data = new byte[length];\n        reader.readBytes(data);\n        return new String(data, StandardCharsets.UTF_8);\n    }\n\n    public NbtTagCompound readCompound() throws IOException {\n        NbtTagCompound compound = new NbtTagCompound();\n\n        int length = reader.readInt();\n        for (int i = 0; i", "first_line_groundtruth": "int length = reader.readShort();", "first_line_prediction": " return readString(262144);", "match": 0}
{"groundtruth": ".matcher(rule.getKafkaTopicTemplate());", "prediction": ".matcher(mappedKafkaTopic);\n                while (placeholderMatcher.find()) {\n                    String placeholder = placeholderMatcher.group();\n                    String placeholderValue = matcher.group(placeholderMatcher.groupCount());\n                    placeholders.put(placeholder, placeholderValue);\n                }\n\n                // find MQTT_TOPIC_PLACEHOLDER_REGEX in the kafkaKeyTemplate.\n                placeholderMatcher = this.placeholderPattern.matcher(kafkaKey);\n                while (placeholderMatcher.find()) {\n                    String placeholder = placeholderMatcher.group();\n                    String placeholderValue = matcher.group(placeholderMatcher.groupCount());\n                    placeholders.put(placeholder, placeholderValue);\n                }", "first_line_groundtruth": ".matcher(rule.getKafkaTopicTemplate());", "first_line_prediction": ".matcher(mappedKafkaTopic);", "match": 0}
{"groundtruth": "kafkaConfig.getProducerConfig().getConfig());", "prediction": "producerAckLevel.getProducerConfig());\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        return new KafkaProducer<>(props);\n    }", "first_line_groundtruth": "kafkaConfig.getProducerConfig().getConfig());", "first_line_prediction": "producerAckLevel.getProducerConfig());", "match": 0}
{"groundtruth": "length = reader.readInt();", "prediction": " length = reader.readInt();\n\n        NbtTagList<?> list = new NbtTagList<>(type);\n\n        for (int i = 0; i < length; i++) {\n            list.add(readTag());\n        }\n\n        return list;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public NbtTagCompound readCompound() throws IOException {\n        NbtTagCompound compound = new NbtTagCompound();\n\n        while (true) {\n            byte type = reader.readByte();\n\n            if (type == 0) {\n                break;\n            }\n\n            String key = readString();\n            NbtTagValue<?> value = readTag();\n\n            compound", "first_line_groundtruth": "length = reader.readInt();", "first_line_prediction": " length = reader.readInt();", "match": 0}
{"groundtruth": "ACKS_CONFIG, String.valueOf(producerAckLevel.getValue()));", "prediction": "KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(ProducerConfig.ACKS_CONFIG, producerAckLevel.toString());\n        return new KafkaProducer<>(props);\n    }", "first_line_groundtruth": "ACKS_CONFIG, String.valueOf(producerAckLevel.getValue()));", "first_line_prediction": "KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());", "match": 0}
{"groundtruth": "type = reader.readByte()) != NbtTagValue.TAG_END;", "prediction": "type = reader.readByte()) != NbtTagValue.TAG_END; ) {\n            String name = readString();\n            compound.put(name, readTag(type));\n        }\n\n        return compound;\n    }\n\n    @Nullable\n    public NbtTagValue<?> readTag(byte type) throws IOException {\n        switch (type) {\n            case NbtTagValue.TAG_BYTE: {\n                return NbtTagValue.of(readByte());\n            }\n            case NbtTagValue.TAG_SHORT: {\n                return NbtTagValue.of(readShort());\n            }\n            case NbtTagValue.TAG_INT: {", "first_line_groundtruth": "type = reader.readByte()) != NbtTagValue.TAG_END;", "first_line_prediction": "type = reader.readByte()) != NbtTagValue.TAG_END; ) {", "match": 0}
{"groundtruth": "?> codec = MetadataCodec.getCodec(type);", "prediction": "Object> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);\n            if (codec == null) {\n                throw new RuntimeException(\"Unknown metadata type: \" + type);\n            }\n\n            map.put(index, new MetadataValue(type, codec.read(this)));\n        }\n\n        return map;\n    }", "first_line_groundtruth": "?> codec = MetadataCodec.getCodec(type);", "first_line_prediction": "Object> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);", "match": 0}
{"groundtruth": "> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);", "prediction": "> codec = MetadataCodec.get(type);\n            if (codec == null) {\n                throw new RuntimeException(\"Unknown metadata type: \" + type);\n            }\n\n            codec.write(this, value.getValue());\n        }\n    }", "first_line_groundtruth": "> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);", "first_line_prediction": "> codec = MetadataCodec.get(type);", "match": 0}
{"groundtruth": "callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);", "prediction": " callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);\n            }\n        } else {\n            callbackConfigCall = RestAdapter.createApi().getJsonUrl(Constant.URL_JSON_FILE);\n        }\n        callbackConfigCall.enqueue(new Callback<CallbackConfig>() {\n            @Override\n            public void onResponse(Call<CallbackConfig> call, Response<CallbackConfig> response) {\n                if (response.isSuccessful()) {\n                    if (response.body() != null) {\n                        if (response.body().getAdNetwork() != null) {\n                            Constant.AD_NETWORK = response", "first_line_groundtruth": "callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);", "first_line_prediction": " callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);", "match": 0}
{"groundtruth": "properties.getCachePrefix() + \":\" + beanName + \":\" + method + \":%s:\" + key.toString();", "prediction": " properties.getDynamicExpandCommonPrefix() + beanName + \"-\" + method + \"-\" + key.toString();\n        delete(cacheKey);\n    }\n\n    /**\n     * \u6309\u7167bean\u5220\u9664\u7f13\u5b58\n     */\n    default void delete(String beanName, String method, Object bindData) {\n        delete(beanName, method, bindData, null);\n    }\n\n    /**\n     * \u6309\u7167bean\u5220\u9664\u7f13\u5b58\n     */\n    default void delete(String beanName, String method) {\n        delete(beanName, method, null);\n    }\n\n    /**\n     * \u6309\u7167bean\u5220\u9664\u7f13\u5b58\n     */\n    default void delete(String beanName)", "first_line_groundtruth": "properties.getCachePrefix() + \":\" + beanName + \":\" + method + \":%s:\" + key.toString();", "first_line_prediction": " properties.getDynamicExpandCommonPrefix() + beanName + \"-\" + method + \"-\" + key.toString();", "match": 0}
{"groundtruth": "cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));", "prediction": " cache.put(String.format(cacheKey, FAIL), null, Duration.ofSeconds(cacheTime));\n            }\n        } finally {\n            lock.unlock(stamp);\n        }\n        gen.writeObject(result);\n    }\n\n    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n        if (property == null) {\n            return this;\n        }\n        SerializerProvider serializerProvider = prov.findValueSerializer(property.getType(), property);\n        if (serializerProvider == null) {\n            return this;\n        }\n        return new ExpandSerializer(beanName, method", "first_line_groundtruth": "cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));", "first_line_prediction": " cache.put(String.format(cacheKey, FAIL), null, Duration.ofSeconds(cacheTime));", "match": 0}
{"groundtruth": "RestAdapter.createApi().getDriveJsonFileId(url);", "prediction": " RestAdapter.createApi().getJsonUrl(Constant.URL_JSON_FILE);\n        }\n        callbackConfigCall.enqueue(new Callback<CallbackConfig>() {\n            @Override\n            public void onResponse(Call<CallbackConfig> call, Response<CallbackConfig> response) {\n                if (response.isSuccessful()) {\n                    CallbackConfig callbackConfig = response.body();\n                    if (callbackConfig != null) {\n                        if (callbackConfig.getAdNetwork() != null) {\n                            Constant.AD_NETWORK = callbackConfig.getAdNetwork();\n                        }\n                        if (callbackConfig.getAdStatus() != null", "first_line_groundtruth": "RestAdapter.createApi().getDriveJsonFileId(url);", "first_line_prediction": " RestAdapter.createApi().getJsonUrl(Constant.URL_JSON_FILE);", "match": 0}
{"groundtruth": "matcher(rule.getMqttTopicPattern());", "prediction": "matcher(mqttTopic);\n                    while (mqttTopicMatcher.find()) {\n                        String placeholderKey = mqttTopicMatcher.group();\n                        if (placeholders.containsKey(placeholderKey)) {\n                            String placeholderValue = mqttTopicMatcher.group(placeholderKey);\n                            placeholders.put(placeholderKey, placeholderValue);\n                        }\n                    }\n                }\n\n                // replace the placeholders in the mqtt topic template\n                for (Map.Entry<String, String> entry : placeholders.entrySet()) {\n                    mappedKafkaTopic = mappedKafkaTopic.replace(\"$\" + entry.getKey(), entry.getValue());\n                }\n\n                // replace the placeholders in the kafka key", "first_line_groundtruth": "matcher(rule.getMqttTopicPattern());", "first_line_prediction": "matcher(mqttTopic);", "match": 0}
{"groundtruth": "()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);", "prediction": "()).appOpenAdMob.showAdIfAvailable(this, Constant.ADMOB_APP_OPEN_AD_ID);\n                            }\n                            break;\n                        case WORTISE:\n                            if (!Constant.WORTISE_APP_OPEN_AD_ID.equals(\"0\")) {\n                                ((MyApplication) getApplication()).appOpenAdWrtise.showAdIfAvailable(this, Constant.WORTISE_APP_OPEN_AD_ID);\n                            }\n                            break;\n                        case GOOGLE_AD_MANAGER:\n                            if (!Constant.GOOGLE_AD_MANAGER_APP_OPEN_AD_", "first_line_groundtruth": "()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);", "first_line_prediction": "()).appOpenAdMob.showAdIfAvailable(this, Constant.ADMOB_APP_OPEN_AD_ID);", "match": 0}
{"groundtruth": "(!jacksonExpandProperties.isCanExpandToNotExistField() && writeClass == null) {", "prediction": " (writeClass == null) {\n            gen.writeObject(bindData);\n            return;\n        }\n\n        // \u7f13\u5b58key\n        String cacheKey = String.format(\"%s_%s_%s\", beanName, method, writeField);\n        // \u672c\u5730\u9501\n        StampedLock lock = lockCache.getLock(cacheKey);\n        long stamp = lock.tryOptimisticRead();\n        if (lock.validate(stamp)) {\n            // \u672c\u5730\u7f13\u5b58\n            Object value = cache.get(cacheKey);\n            if (value != null) {\n                gen.writeObject(value);\n                return;\n            }\n        }", "first_line_groundtruth": "(!jacksonExpandProperties.isCanExpandToNotExistField() && writeClass == null) {", "first_line_prediction": " (writeClass == null) {", "match": 0}
{"groundtruth": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR);", "prediction": " = rule.getMqttTopicPattern().split(MQTT_TOPIC_PLACEHOLDER_REGEX);\n            ruleRegex = new StringBuilder();\n            for (String mqttTopicPatternPart : mqttTopicPatternParts) {\n                if (mqttTopicPatternPart.contains(MQTT_TOPIC_SINGLE_LEVEL_WILDCARD_CHARACTER)) {\n                    ruleRegex.append(SINGLE_LEVEL_WILDCARD_REGEX);\n                } else if (mqttTopicPatternPart.contains(MQTT_TOPIC_MULTI_LEVEL_WILDCARD_CHARACTER)) {\n                    ruleRegex.append(WILDCARD_REGEX);\n                } else", "first_line_groundtruth": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR);", "first_line_prediction": " = rule.getMqttTopicPattern().split(MQTT_TOPIC_PLACEHOLDER_REGEX);", "match": 0}
{"groundtruth": "displayData(sharedPref.getPostList());", "prediction": " /*\n        * 1. set the adapter to the recycler view\n        * 2. set the layout manager to the recycler view\n        * 3. set the item decoration to the recycler view\n        * */\n    }\n\n    private void loadBannerAd() {\n        bannerAd = new BannerAd.Builder(this)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobBannerId(Constant.ADMOB_BANNER_ID)\n                .setGoogleAdManagerBannerId(Constant.GOOGLE_AD_MANAGER_BANNER_ID)\n                .setFanBannerId", "first_line_groundtruth": "displayData(sharedPref.getPostList());", "first_line_prediction": " /*", "match": 0}
{"groundtruth": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {", "prediction": " if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {\n            writeField = params.getWriteField();\n        }\n\n        // \u7f13\u5b58key\n        String cacheKey = beanName + \".\" + method + \".\" + writeField;\n\n        // \u7f13\u5b58\n        Object cacheValue = cache.get(cacheKey);\n        if (cacheValue != null) {\n            gen.writeObject(cacheValue);\n            return;\n        }\n\n        // \u672c\u5730\u9501\n        StampedLock lock = lockCache.get(cacheKey);\n        long stamp = lock.tryOptimisticRead();\n        if (lock.validate(stamp)) {", "first_line_groundtruth": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {", "first_line_prediction": " if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {", "match": 0}
{"groundtruth": "= RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);", "prediction": " = RestAdapter.getDriveJsonFileId(googleDriveFileId);\n            } else {\n                callbackConfigCall = RestAdapter.getJsonUrl(url);\n            }\n        } else {\n            callbackConfigCall = RestAdapter.getJsonUrl(Constant.URL_JSON_FILE);\n        }\n        callbackConfigCall.enqueue(new Callback<CallbackConfig>() {\n            @Override\n            public void onResponse(@NonNull Call<CallbackConfig> call, @NonNull Response<CallbackConfig> response) {\n                if (response.isSuccessful()) {\n                    CallbackConfig callbackConfig = response.body();\n                    if (callbackConfig != null", "first_line_groundtruth": "= RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);", "first_line_prediction": " = RestAdapter.getDriveJsonFileId(googleDriveFileId);", "match": 0}
{"groundtruth": "setCacheTime(jacksonExpandProperties.getCacheTimeout());", "prediction": "setCacheTime(jacksonExpandProperties.getCacheTime());\n                }\n                // \u7f13\u5b58\u524d\u7f00\n                if (StringUtils.hasText(params.getCachePrefix())) {\n                    jacksonExpandProperties.setCachePrefix(params.getCachePrefix());\n                }\n                // \u7f13\u5b58\u524d\u7f00\n                if (StringUtils.hasText(params.getRemoteParams())) {\n                    jacksonExpandProperties.setRemoteParams(params.getRemoteParams());\n                }\n                // \u7f13\u5b58\u524d\u7f00\n                if (StringUtils.hasText(params.getWriteField())) {\n                    jacksonExpandProperties.setWriteField(params.getWriteField());\n                }", "first_line_groundtruth": "setCacheTime(jacksonExpandProperties.getCacheTimeout());", "first_line_prediction": "setCacheTime(jacksonExpandProperties.getCacheTime());", "match": 0}
{"groundtruth": "adapterPost.setOnItemClickListener((view, obj, position) -> {", "prediction": " recyclerView.setVisibility(View.VISIBLE);\n        } else {\n            recyclerView.setVisibility(View.GONE);\n        }\n    }\n\n    private void loadBannerAd() {\n        bannerAd = new BannerAd.Builder(this, Constant.BANNER_AD_ID);\n        bannerAd.setBannerAdListener(new BannerAd.BannerAdListener() {\n            @Override\n            public void onAdLoaded(BannerAd bannerAd) {\n                Toast.makeText(SecondActivity.this, \"Banner Ad Loaded\", Toast.LENGTH_SHORT).show();\n            }\n\n            @Override\n            public void onAdFailedToLoad(Banner", "first_line_groundtruth": "adapterPost.setOnItemClickListener((view, obj, position) -> {", "first_line_prediction": " recyclerView.setVisibility(View.VISIBLE);", "match": 0}
{"groundtruth": "cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));", "prediction": " // \u7f13\u5b58\n                cache.put(cacheKey, result, cacheTime);\n                gen.writeObject(result);\n                return;\n            }\n        } finally {\n            lock.unlockWrite(stamp);\n        }\n        gen.writeObject(bindData);\n    }\n\n    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n        if (property == null) {\n            return this;\n        }\n        // \u6ce8\u89e3\u53c2\u6570\u5904\u7406\n        params = property.getAnnotation(SerializerParam.class);\n        if (params == null) {\n            params = property.getDeclaringClass().getAnnotation", "first_line_groundtruth": "cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));", "first_line_prediction": " // \u7f13\u5b58", "match": 0}
{"groundtruth": "(Tools.getAdSizeMREC());", "prediction": "(AdSize.SMART_BANNER);\n                            adView.setAdListener(new AdListener() {\n                                @Override\n                                public void onAdLoaded() {\n                                    adStatus = AD_STATUS_OFF;\n                                    adNetwork = \"\";\n                                    backupAdNetwork = \"\";\n                                    adMobBannerId = \"\";\n                                    googleAdManagerBannerId = \"\";\n                                    fanBannerId = \"\";\n                                    unityBannerId = \"\";\n                                    appLovinBannerId = \"\";\n                                    appLovinBannerZoneId = \"\";\n                                    mopubBannerId = \"\";\n                                    ironSourceBannerId = \"\";\n                                    placementStatus = 0;\n                                    darkTheme", "first_line_groundtruth": "(Tools.getAdSizeMREC());", "first_line_prediction": "(AdSize.SMART_BANNER);", "match": 0}
{"groundtruth": "jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COVER) {", "prediction": "StringUtils.hasText(writeField)) {\n            // \u7f13\u5b58\n            StampedLock lock = lockCache.getLock(writeField);\n            long stamp = lock.tryOptimisticRead();\n            if (lock.validate(stamp)) {\n                // \u7f13\u5b58\u4e2d\u5b58\u5728\n                Object value = cache.get(writeField);\n                if (value != null) {\n                    gen.writeObject(value);\n                    return;\n                }\n            }\n            // \u7f13\u5b58\u4e2d\u4e0d\u5b58\u5728\n            lock.lock();\n            try {\n                // \u7f13\u5b58\u4e2d\u4e0d\u5b58\u5728\n                Object value = cache.get(writeField);\n                if (value != null) {\n                    gen.", "first_line_groundtruth": "jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COVER) {", "first_line_prediction": "StringUtils.hasText(writeField)) {", "match": 0}
{"groundtruth": "cache.get(String.format(cacheKey, OK));", "prediction": " cache.get(cacheKey);\n        if (result == null) {\n            result = cache.get(String.format(cacheKey, FAIL));\n        }\n        return result;\n    }\n\n    /**\n     * \u83b7\u53d6\u53c2\u6570\n     *\n     * @param paramName \u53c2\u6570\u540d\n     * @return\n     */\n    private Set<String> getParam(String paramName) {\n        Set<String> result = new HashSet<>();\n        if (StringUtils.hasText(paramName)) {\n            String[] paramNames = paramName.split(\",\");\n            for (String param : paramNames) {\n                result.add(param);\n            }\n        }\n       ", "first_line_groundtruth": "cache.get(String.format(cacheKey, OK));", "first_line_prediction": " cache.get(cacheKey);", "match": 0}
{"groundtruth": "lock = lockCache.get(cacheKey, new StampedLock(), Duration.ofSeconds(300));", "prediction": " stampedLock = lockCache.getLock(cacheKey);\n        long stamp = stampedLock.tryOptimisticRead();\n        if (stampedLock.validate(stamp)) {\n            result = getCacheInfo(cacheKey);\n            if (result != null) {\n                LOG.info(\"{} Expand cache \u547d\u4e2d: {}\", beanName, result);\n                gen.writeObject(result);\n                return;\n            }\n        }\n\n        // \u8fdc\u7a0b\u8c03\u7528\n        Object rsp = null;\n        try {\n            RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n            ServletRequestAttributes servletRequestAttributes = null;\n            if (requestAttributes", "first_line_groundtruth": "lock = lockCache.get(cacheKey, new StampedLock(), Duration.ofSeconds(300));", "first_line_prediction": " stampedLock = lockCache.getLock(cacheKey);", "match": 0}
{"groundtruth": "format(jacksonExpandProperties.getCopyStrategyFormat(), gen.getOutputContext().getCurrentName());", "prediction": "format(jacksonExpandProperties.getCopyStrategyFormat(), writeField);\n        }\n\n        // \u7f13\u5b58\n        StampedLock lock = lockCache.getLock(beanName, method, writeField);\n        long stamp = lock.tryOptimisticRead();\n        if (lock.validate(stamp)) {\n            Object cacheData = cache.get(beanName, method, writeField);\n            if (cacheData != null) {\n                gen.writeObject(cacheData);\n                return;\n            }\n        }\n\n        // \u7f13\u5b58\n        lock.lock();\n        try {\n            Object cacheData = cache.get(beanName,", "first_line_groundtruth": "format(jacksonExpandProperties.getCopyStrategyFormat(), gen.getOutputContext().getCurrentName());", "first_line_prediction": "format(jacksonExpandProperties.getCopyStrategyFormat(), writeField);", "match": 0}
{"groundtruth": "(jacksonExpandProperties.getDynamicExpandParameterName());", "prediction": "Field(bindData);\n            expand = needExpandField.contains(writeFieldPath);\n        } else {\n            expand = jacksonExpandProperties.isExpand();\n        }\n\n        // \u7f13\u5b58\n        if (expand) {\n            // \u672c\u5730\u9501\n            StampedLock lock = lockCache.getLock(bindData.getClass().getName());\n            long stamp = lock.tryOptimisticRead();\n            if (lock.validate(stamp)) {\n                // \u672c\u5730\u7f13\u5b58\n                Object cacheData = cache.get(bindData.getClass().getName(), writeFieldPath);\n                if (cacheData != null) {\n                    gen.", "first_line_groundtruth": "(jacksonExpandProperties.getDynamicExpandParameterName());", "first_line_prediction": "Field(bindData);", "match": 0}
{"groundtruth": "dataHolder.setVideoPopularLink(videoData.get(8));", "prediction": "\n\t\t\t\n\t\t\treturn dataHolder;\n\t\t}\n\t\treturn null;", "first_line_groundtruth": "dataHolder.setVideoPopularLink(videoData.get(8));", "first_line_prediction": "", "match": 0}
{"groundtruth": "(this.mqttConfig.getHost(), this.mqttConfig.getPort()).sync();", "prediction": "(this.mqttConfig.getPort()).sync();\n        logger.info(\"MqttServer started on port {}\", this.mqttConfig.getPort());\n    }\n\n    /**\n     * Stop the server.\n     */\n    public void stop() {\n        if (this.channelFuture != null) {\n            this.channelFuture.channel().close();\n        }\n        this.masterGroup.shutdownGracefully();\n        this.workerGroup.shutdownGracefully();\n    }", "first_line_groundtruth": "(this.mqttConfig.getHost(), this.mqttConfig.getPort()).sync();", "first_line_prediction": "(this.mqttConfig.getPort()).sync();", "match": 0}
{"groundtruth": "mqttConfig = MqttConfig.fromMap(map);", "prediction": " mqttConfig = MqttConfig.fromMap(map);\n        final KafkaConfig kafkaConfig = KafkaConfig.fromMap(map);\n        return new BridgeConfig(map.entrySet().stream()\n                .filter(entry -> entry.getKey().startsWith(BRIDGE_CONFIG_PREFIX))\n                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)), mqttConfig, kafkaConfig);\n    }\n\n    /**\n     * @return the MQTT configuration properties\n     */\n    public MqttConfig getMqttConfig() {\n        return mqttConfig;\n    }\n\n    /**\n     * @return the Kafka configuration properties\n     */", "first_line_groundtruth": "mqttConfig = MqttConfig.fromMap(map);", "first_line_prediction": " mqttConfig = MqttConfig.fromMap(map);", "match": 0}
{"groundtruth": "(config.getKafkaConfig());", "prediction": "(config.getKafkaConfig());\n        this.serverBootstrap = new ServerBootstrap();\n        this.serverBootstrap.group(masterGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new LoggingHandler(LogLevel.INFO))\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childOption(ChannelOption.SO_BACKLOG, 1024)\n                .childOption(option, true);\n    }\n\n    /**\n     * Start the server\n     *\n     * @throws Exception\n     */\n    public void start() throws Exception {\n        this.channel", "first_line_groundtruth": "(config.getKafkaConfig());", "first_line_prediction": "(config.getKafkaConfig());", "match": 1}
{"groundtruth": "config.getMqttConfig();", "prediction": " config.getMqttConfig();\n        this.kafkaBridgeProducer = new KafkaBridgeProducer(config.getKafkaConfig());\n        this.serverBootstrap = new ServerBootstrap();\n        this.serverBootstrap.group(masterGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new LoggingHandler(LogLevel.INFO))\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childOption(ChannelOption.SO_BACKLOG, 1024)\n                .childOption(option, true);\n    }\n\n    /**\n     * Starts the server.\n     *\n    ", "first_line_groundtruth": "config.getMqttConfig();", "first_line_prediction": " config.getMqttConfig();", "match": 0}
{"groundtruth": "mqttServer.stop();", "prediction": " mqttServer.stop();\n                     latch.await();\n                } catch (Exception e) {\n                    logger.error(\"Error while shutting down the MQTT server\", e);\n                }\n            }));\n\n            mqttServer.start();\n            latch.countDown();\n\n            logger.info(\"Strimzi MQTT Bridge {} is started\", Main.class.getPackage().getImplementationVersion());\n        } catch (Exception e) {\n            logger.error(\"Error while starting the MQTT server\", e);\n        }\n    }\n\n    private static String getAbsoluteFilePath(String filePath) {\n        if (filePath == null) {\n            return null;\n       ", "first_line_groundtruth": "mqttServer.stop();", "first_line_prediction": " mqttServer.stop();", "match": 0}
{"groundtruth": ", this.mqttConfig.getPort()).sync();", "prediction": " + \":\" + this.mqttConfig.getPort()).sync();\n        logger.info(\"MqttServer started on port \" + this.mqttConfig.getPort());\n    }\n\n    /**\n     * Stop the server.\n     */\n    public void stop() {\n        if (this.channelFuture != null) {\n            this.channelFuture.channel().close();\n        }\n        this.masterGroup.shutdownGracefully();\n        this.workerGroup.shutdownGracefully();\n    }", "first_line_groundtruth": ", this.mqttConfig.getPort()).sync();", "first_line_prediction": " + \":\" + this.mqttConfig.getPort()).sync();", "match": 0}
{"groundtruth": "MappingRulesLoader.getInstance().init(mappingRulesFile);", "prediction": " bridgeConfig.setMappingRulesFile(mappingRulesFile);", "first_line_groundtruth": "MappingRulesLoader.getInstance().init(mappingRulesFile);", "first_line_prediction": " bridgeConfig.setMappingRulesFile(mappingRulesFile);", "match": 0}
{"groundtruth": "return Integer.toString(record.getStatus());", "prediction": " return record.getStatus();\n            case \"digest\":\n                return record.getDigest();\n            case \"length\":\n                return String.valueOf(record.getLength());\n            case \"offset\":\n                return String.valueOf(record.getOffset());\n            case \"filename\":\n                return record.getFilename();\n            case \"charset\":\n                return record.getCharset();\n            case \"languages\":\n                return record.getLanguages();\n            case \"redirect\":\n                return record.getRedirect();\n            default:\n                return null;\n        }\n    }", "first_line_groundtruth": "return Integer.toString(record.getStatus());", "first_line_prediction": " return record.getStatus();", "match": 0}
{"groundtruth": "record.getTruncated();", "prediction": " record.getTruncated();\n            case \"url\":\n                return record.getUrl();\n            case \"mime_detected_extension\":\n                return record.getNormalizedMimeDetectedExtension();\n            case \"mime_detected_type\":\n                return record.getNormalizedMimeDetectedType();\n            case \"mime_detected_subtype\":\n                return record.getNormalizedMimeDetectedSubtype();\n            case \"mime_detected_extension_type\":\n                return record.getNormalizedMimeDetectedExtensionType();\n            case \"mime_detected_extension_subtype\":\n                return record.getNormalizedMimeDetectedExtensionSubtype();\n            case \"mime_detected_type_subtype\":", "first_line_groundtruth": "record.getTruncated();", "first_line_prediction": " record.getTruncated();", "match": 0}
{"groundtruth": "CCMimeCounter.main(new String[]{", "prediction": " CCMimeCounter.main(new String[]{args[1]});\n        } else {\n            System.err.println(\"Unknown command: \" + command);\n            System.exit(1);\n        }\n    }", "first_line_groundtruth": "CCMimeCounter.main(new String[]{", "first_line_prediction": " CCMimeCounter.main(new String[]{args[1]});", "match": 0}
{"groundtruth": "R.error(\"bad request\");", "prediction": " R.error(\"\u8bf7\u6c42\u53c2\u6570\u5f02\u5e38 | request parameter exception\");\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public R map(MethodArgumentNotValidException e) {\n        List<FieldError> fieldErrors = e.getBindingResult().getFieldErrors();\n        List<String> errors = new ArrayList<>();\n        for (FieldError fieldError : fieldErrors) {\n            errors.add(fieldError.getField() + \" \" + fieldError.getDefaultMessage());\n        }\n        return R.error(errors);\n    }\n\n    @ExceptionHandler(BindException.class)\n    public R map(BindException e) {", "first_line_groundtruth": "R.error(\"bad request\");", "first_line_prediction": " R.error(\"\u8bf7\u6c42\u53c2\u6570\u5f02\u5e38 | request parameter exception\");", "match": 0}
{"groundtruth": "CCFileExtractor.main(new String[]{", "prediction": " FetcherConfig fetcherConfig =\n                     new ObjectMapper().readValue(new File(args[1]), FetcherConfig.class);\n             execute(fetcherConfig);\n        } else if (command.equals(\"Extract\")) {\n            ExtractorConfig fetcherConfig =\n                    new ObjectMapper().readValue(new File(args[1]), ExtractorConfig.class);\n            execute(fetcherConfig);\n        } else if (command.equals(\"Count\")) {\n            ExtractorConfig fetcherConfig =\n                    new ObjectMapper().readValue(new File(args[1]), ExtractorConfig.class);\n            execute(fetcherConfig);\n        } else {\n            System", "first_line_groundtruth": "CCFileExtractor.main(new String[]{", "first_line_prediction": " FetcherConfig fetcherConfig =", "match": 0}
{"groundtruth": "return R.error(error.get(\"errorMsg\").toString());", "prediction": " return R.error(error);\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public R map(MethodArgumentNotValidException e) {\n        List<FieldError> fieldErrors = e.getBindingResult().getFieldErrors();\n        Map<String, Object> error = this.getValidError(fieldErrors);\n        return R.error(error);\n    }\n\n    @ExceptionHandler(MethodArgumentTypeMismatchException.class)\n    public R map(MethodArgumentTypeMismatchException e) {\n        Map<String, Object> error = new HashMap<>();\n        error.put(\"error\", e.getName() +", "first_line_groundtruth": "return R.error(error.get(\"errorMsg\").toString());", "first_line_prediction": " return R.error(error);", "match": 0}
{"groundtruth": "R.error();", "prediction": " R.error(\"\u670d\u52a1\u5f02\u5e38 | server exception\");\n    }", "first_line_groundtruth": "R.error();", "first_line_prediction": " R.error(\"\u670d\u52a1\u5f02\u5e38 | server exception\");", "match": 0}
{"groundtruth": "R.ok(\"Verify successfully\");", "prediction": " R.ok(\n                SessionResp.builder()\n                         .auth(StrUtil.isNotBlank(appProperties.getAuthSecretKey()))\n                         .model(ApiRunMode.get(appProperties).getName())\n                         .build()\n        );\n    }\n\n    @PostMapping(\"/chat\")\n    public R<String> chat(@RequestBody @Validated ChatProcessReq req) {\n        if (StrUtil.isBlank(req.getMsg())) {\n            throw new BizException(\"Message is empty\");\n        }\n\n        if (StrUtil.isBlank(req.getChatId())) {\n            throw new BizException(\"Chat ID is empty\");\n        }", "first_line_groundtruth": "R.ok(\"Verify successfully\");", "first_line_prediction": " R.ok(", "match": 0}
{"groundtruth": "r.getOffset(), r.getLength(), r.getTruncated());", "prediction": " r.getOffset(), r.getLength(), r.getTruncated());\n            return true;\n        }\n    }\n\n    private void fetchBytes(CCIndexRecord r) throws IOException {\n        fileFromCCWarcFetcher.fetchBytes(r);\n    }", "first_line_groundtruth": "r.getOffset(), r.getLength(), r.getTruncated());", "first_line_prediction": " r.getOffset(), r.getLength(), r.getTruncated());", "match": 0}
{"groundtruth": "StringBuilder sb = new StringBuilder(SpringUtil.getClientIp()).append(\"-\");", "prediction": " MethodSignature signature = (MethodSignature) point.getSignature();\n         Method method = signature.getMethod();\n         ApiRateLimiter apiRateLimiter = method.getAnnotation(ApiRateLimiter.class);\n         return apiRateLimiter.value();\n    }", "first_line_groundtruth": "StringBuilder sb = new StringBuilder(SpringUtil.getClientIp()).append(\"-\");", "first_line_prediction": " MethodSignature signature = (MethodSignature) point.getSignature();", "match": 0}
{"groundtruth": "!clause.select(val)) {", "prediction": "clause.select(val)) {\n                    return true;\n                }\n            }\n        }\n\n        for (Map.Entry<String, List<SelectorClause>> e : should.entrySet()) {\n            String val = getStringValue(e.getKey(), record);\n            if (val == null) {\n                LOGGER.warn(\"Value is null for '{}' in the should clause. Record not selected.\",\n                        e.getKey());\n                return false;\n            }\n            for (SelectorClause clause : e.getValue()) {\n                if (clause.select(val)) {\n                    return true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n   ", "first_line_groundtruth": "!clause.select(val)) {", "first_line_prediction": "clause.select(val)) {", "match": 0}
{"groundtruth": "sse.isDone()) {", "prediction": "sse.isDone()) {\n                        if (emitDone) {\n                            emitter.onNext(sse);\n                        }\n                        emitter.onComplete();\n                    } else {\n                        emitter.onNext(sse);\n                    }\n                    sse = null;\n                }\n            }\n        } catch (IOException | SSEFormatException e) {\n            emitter.onError(e);\n        } finally {\n            try {\n                if (reader != null) {\n                    reader.close();\n                }\n            } catch (IOException e) {\n                emitter.onError(e);\n            }\n        }\n    }\n\n    @Override\n    public void onFailure(Call<ResponseBody> call, Throwable t", "first_line_groundtruth": "sse.isDone()) {", "first_line_prediction": "sse.isDone()) {", "match": 1}
{"groundtruth": "), r.getLength(), r.getTruncated());", "prediction": "r.getTruncated()), r.getLength(r.getTruncated()));\n            return true;\n        }\n    }\n\n    private void fetchBytes(CCIndexRecord r) throws IOException {\n        String url = r.getUrl();\n        String targetPath = r.getFilename();\n        String targetDigest = r.getDigest();\n        long offset = r.getOffset(r.getTruncated());\n        long length = r.getLength(r.getTruncated());\n        String mime = r.getNormalizedMime();\n        String mimeDetected = r.getNormalizedMimeDetected();\n        String warcFile = r.getFilename();\n        long warc", "first_line_groundtruth": "), r.getLength(), r.getTruncated());", "first_line_prediction": "r.getTruncated()), r.getLength(r.getTruncated()));", "match": 0}
{"groundtruth": "extracted = counter.getFilesExtracted().incrementAndGet();", "prediction": " total = counter.getTotal().incrementAndGet();\n            if (fetcherConfig.getMaxFiles() > -1 && total >= fetcherConfig.getMaxFiles()) {\n                LOGGER.info(\"hit max files\");\n                return false;\n            }\n            if (fetcherConfig.getMaxBytes() > -1 && r.getRecordSize() >= fetcherConfig.getMaxBytes()) {\n                LOGGER.info(\"hit max bytes\");\n                return false;\n            }\n            if (fetcherConfig.getMaxUrls() > -1 && r.getUrls().size() >= fetcherConfig.getMaxUrls()) {\n                LOGGER.info(\"hit max urls\");", "first_line_groundtruth": "extracted = counter.getFilesExtracted().incrementAndGet();", "first_line_prediction": " total = counter.getTotal().incrementAndGet();", "match": 0}
{"groundtruth": "url = r.getUrl();", "prediction": " url = r.getUrl();\n            if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n                TRUNCATED_URLS_LOGGER.info(\"truncated url: {}\", url);\n                TRUNCATED_URLS_FULL_LOGGER.info(\"truncated url: {}\", r.getTruncated());\n            }\n            return true;\n        }\n    }\n\n    private void fetchBytes(CCIndexRecord r) throws IOException {\n        fileFromCCWarcFetcher.fetchBytes(r);\n    }", "first_line_groundtruth": "url = r.getUrl();", "first_line_prediction": " url = r.getUrl();", "match": 0}
{"groundtruth": "if (fetcherConfig.getNumThreads() > 10) {", "prediction": " //this.reportEvery = fetcherConfig.getReportEvery();\n    }\n\n    @Override\n    public boolean process(String json) throws IOException, InterruptedException {\n        long totalRead = counter.getRecordsRead().incrementAndGet();\n        if (totalRead % reportEvery == 0) {\n            LOGGER.info(\"processed: {}\", counter);\n        }\n        if (fetcherConfig.getMaxRecords() > -1 && totalRead >= fetcherConfig.getMaxRecords()) {\n            LOGGER.info(\"hit max read\");\n            return false;\n        }\n        //check for hit max\n        //return false;\n        Optional<CCIndexRecord>", "first_line_groundtruth": "if (fetcherConfig.getNumThreads() > 10) {", "first_line_prediction": " //this.reportEvery = fetcherConfig.getReportEvery();", "match": 0}
{"groundtruth": "getNormalizedMimeDetected(), r.getFilename(),\n                    r.getOffset(), r.getLength(), r.getTruncated());", "prediction": "getNormalizedMimeDetected(),\n                    r.getWarcFile(), r.getWarcOffset(), r.getWarcLength(),\n                    r.getTruncated());\n            return true;\n        }\n    }\n\n    private void fetchBytes(CCIndexRecord r) throws IOException {\n        fileFromCCWarcFetcher.fetchBytes(r);\n    }", "first_line_groundtruth": "getNormalizedMimeDetected(), r.getFilename(),", "first_line_prediction": "getNormalizedMimeDetected(),", "match": 0}
{"groundtruth": "(fetcherConfig.getMaxFilesTruncated() > -1 &&\n                    truncated >= fetcherConfig.getMaxFilesTruncated()) {", "prediction": " (fetcherConfig.getMaxFilesTruncated() > -1 &&\n                    truncated >= fetcherConfig.getMaxFilesTruncated()) {\n                LOGGER.info(\"hit max truncated files\");\n                return false;\n            }\n            TRUNCATED_URLS_LOGGER.info(\"truncated: {}\", r.getTruncated());\n            TRUNCATED_URLS_FULL_LOGGER.info(\"truncated: {}\", r.getTruncated());\n            return true;\n        }\n        //if not truncated, count appropriately\n        increment(counter.getTotal(), r.getNormalizedMimeDetected());\n        return true;\n    }\n\n    @Override\n    public void close() throws IOException", "first_line_groundtruth": "(fetcherConfig.getMaxFilesTruncated() > -1 &&", "first_line_prediction": " (fetcherConfig.getMaxFilesTruncated() > -1 &&", "match": 0}
{"groundtruth": "if (fetcherConfig.isExtractTruncated() || StringUtils.isBlank(r.getTruncated())) {", "prediction": " //check for hit max\n         //return false;\n        if (fetcherConfig.getMaxFiles() > -1 &&\n                counter.getFiles().incrementAndGet() >= fetcherConfig.getMaxFiles()) {\n            LOGGER.info(\"hit max files\");\n            return false;\n        }\n        if (fetcherConfig.getMaxBytes() > -1 &&\n                counter.getBytes().incrementAndGet() >= fetcherConfig.getMaxBytes()) {\n            LOGGER.info(\"hit max bytes\");\n            return false;\n        }\n        if (fetcherConfig.getMaxUrls() > -1 &&\n                counter.getUrls().incrementAndGet() >= fetcherConfig.", "first_line_groundtruth": "if (fetcherConfig.isExtractTruncated() || StringUtils.isBlank(r.getTruncated())) {", "first_line_prediction": " //check for hit max", "match": 0}
{"groundtruth": "if (fetcherConfig.isDryRun()) {", "prediction": " //check for hit max\n             //return false;\n            fileFromCCWarcFetcher.fetchToPath(r);\n        }\n        return true;\n    }\n\n    @Override\n    public void close() throws IOException {\n        fileFromCCWarcFetcher.close();\n    }", "first_line_groundtruth": "if (fetcherConfig.isDryRun()) {", "first_line_prediction": " //check for hit max", "match": 0}
{"groundtruth": ".indexFetcher = fetcherConfig.newIndexFetcher();", "prediction": ".indexFetcher = fetcherConfig.getIndexFetcher();\n        }\n\n        @Override\n        public Long call() throws Exception {\n            try {\n                while (true) {\n                    FetchEmitTuple fetchEmitTuple = indexUrls.poll(1000, TimeUnit.MILLISECONDS);\n                    if (fetchEmitTuple == null) {\n                        break;\n                    }\n                    if (fetchEmitTuple.getFetchEmitKey().equals(INDEX_READER_ID)) {\n                        LOGGER.info(\"Index paths reader successfully completed\");\n                        return INDEX_READER_ID;\n                    }\n                    if (fetchEmitTuple.getFetchEmitKey().equals(", "first_line_groundtruth": ".indexFetcher = fetcherConfig.newIndexFetcher();", "first_line_prediction": ".indexFetcher = fetcherConfig.getIndexFetcher();", "match": 0}
{"groundtruth": "ccIndexReaderCounter.getEmptyPayload().incrementAndGet();", "prediction": " return;\n        }\n        WarcPayload warcPayload = payload.get();\n        if (warcPayload.getPayloadType().equals(WarcPayload.Type.response)) {\n            WarcResponse response = (WarcResponse) warcPayload;\n            if (response.getStatusCode() == 200) {\n                ccIndexRecord.setLength(warcPayload.getContentLength());\n                ccIndexRecord.setTruncated(warcPayload.getTruncated());\n                ccIndexRecord.setPayload(warcPayload.getContent());\n                ccIndexRecord.setPayloadDigest(warcPayload.getPayloadDigest());", "first_line_groundtruth": "ccIndexReaderCounter.getEmptyPayload().incrementAndGet();", "first_line_prediction": " return;", "match": 0}
{"groundtruth": "finishedWorkers < fetcherConfig.getNumThreads()) {", "prediction": "finishedWorkers < totalThreads) {\n                Future<Long> future = executorCompletionService.take();\n                try {\n                    long result = future.get(10, TimeUnit.SECONDS);\n                    if (result != null) {\n                        finishedWorkers++;\n                    }\n                } catch (InterruptedException e) {\n                    LOGGER.error(\"interrupted\", e);\n                } catch (ExecutionException e) {\n                    LOGGER.error(\"execution exception\", e);\n                } catch (TimeoutException e) {\n                    LOGGER.error(\"timeout\", e);\n                }\n            }\n        } catch (InterruptedException e) {\n            LOGGER.error(\"interrupted\", e);\n       ", "first_line_groundtruth": "finishedWorkers < fetcherConfig.getNumThreads()) {", "first_line_prediction": "finishedWorkers < totalThreads) {", "match": 0}
{"groundtruth": "streamEmitter = fetcherConfig.newEmitter();", "prediction": " emitter = fetcherConfig.newEmitter();\n            try {\n                fetcher.fetch(indexPathsList.take());\n                emitter.emit(indexPathsList.take());\n            } catch (InterruptedException e) {\n                LOGGER.warn(\"interrupted exception\", e);\n                throw new RuntimeException(e);\n            } catch (IOException e) {\n                LOGGER.warn(\"io exception\", e);\n                throw new RuntimeException(e);\n            } catch (TikaException e) {\n                LOGGER.warn(\"tika exception\", e);\n                throw new RuntimeException(e);\n            }\n            return fetcherConfig.getIndexWorkerId();\n        }", "first_line_groundtruth": "streamEmitter = fetcherConfig.newEmitter();", "first_line_prediction": " emitter = fetcherConfig.newEmitter();", "match": 0}
{"groundtruth": "run(), TimeConverter.toTicks(delay, unit)\n                )\n        );", "prediction": "run(),\n                        TimeConverter.toTicks(delay, unit)\n                )\n        );\n    }\n\n    @Override\n    public WrappedTask runLaterAsync(Runnable runnable, long delay, TimeUnit unit) {\n        return new WrappedFoliaTask(\n                this.asyncScheduler.runDelayed(\n                        plugin, task -> runnable.run(),\n                        TimeConverter.toTicks(delay, unit)\n                )\n        );\n    }\n\n    @Override\n    public WrappedTask runTimer(Runnable runnable, long delay, long period, TimeUnit unit) {\n        return new WrappedFoliaTask(\n                this.globalRegionScheduler.run", "first_line_groundtruth": "run(), TimeConverter.toTicks(delay, unit)", "first_line_prediction": "run(),", "match": 0}
{"groundtruth": ", record.getFilename(), record.getOffset(),\n                record.getLength());", "prediction": " + record.getRecordId() + \" \" + record.getRecordUrl());\n        FetchKey fetchKey = new FetchKey(record.getRecordUrl());\n        fetcher.fetch(fetchKey);\n        WarcRecord warcRecord = fetcher.getWarcRecord();\n        if (warcRecord == null) {\n            throw new RuntimeException(\"no warc record for \" + record.getRecordUrl());\n        }\n        WarcResponse warcResponse = warcRecord.getResponse();\n        if (warcResponse == null) {\n            throw new RuntimeException(\"no warc response for \" + record.getRecord", "first_line_groundtruth": ", record.getFilename(), record.getOffset(),", "first_line_prediction": " + record.getRecordId() + \" \" + record.getRecordUrl());", "match": 0}
{"groundtruth": "TimeConverter.toTicks(period, unit))\n        );", "prediction": " TimeConverter.toTicks(period, unit)\n                )\n        );\n    }", "first_line_groundtruth": "TimeConverter.toTicks(period, unit))", "first_line_prediction": " TimeConverter.toTicks(period, unit)", "match": 0}
{"groundtruth": ".debug(\"going to fetch {", "prediction": ".info(\"fetching {} to {}\", record.getWarcRecord().getHeader().getTargetUri(), record.getWarcRecord().getHeader().getRecordId());\n        FetchKey fetchKey = new FetchKey(record.getWarcRecord().getHeader().getTargetUri(),\n                record.getWarcRecord().getHeader().getRecordId());\n        FetchEmitTuple fetchEmitTuple = fetcher.fetch(fetchKey);\n        if (fetchEmitTuple == null) {\n            throw new RuntimeException(\"fetchEmitTuple is null\");\n        }\n        if (fetchEmitTuple == PipesIterator.COMPLETED_SEMAPHORE) {", "first_line_groundtruth": ".debug(\"going to fetch {", "first_line_prediction": ".info(\"fetching {} to {}\", record.getWarcRecord().getHeader().getTargetUri(), record.getWarcRecord().getHeader().getRecordId());", "match": 0}
{"groundtruth": "TimeConverter.toTicks(delay, unit),\n                        TimeConverter.toTicks(period, unit)\n                )\n        );", "prediction": " TimeConverter.toTicks(delay, unit),\n                         TimeConverter.toTicks(period, unit)\n                )\n        );\n    }", "first_line_groundtruth": "TimeConverter.toTicks(delay, unit),", "first_line_prediction": " TimeConverter.toTicks(delay, unit),", "match": 0}
{"groundtruth": "record.getLength());", "prediction": " record.getOffset() + record.getLength());\n        FetchKey fetchKey = new FetchKey(record.getFilename(), record.getOffset(),\n                record.getOffset() + record.getLength());\n        fetcher.fetch(fetchKey);\n        FetchEmitTuple fetchEmitTuple = fetcher.getFetchEmitTuple();\n        if (fetchEmitTuple == null) {\n            throw new RuntimeException(\"fetchEmitTuple is null\");\n        }\n        if (fetchEmitTuple.getEmitKey() == null) {\n            throw new RuntimeException(\"fetchEmitTuple.getEmitKey() is null\");\n        }\n        if (fetchEmitTuple", "first_line_groundtruth": "record.getLength());", "first_line_prediction": " record.getOffset() + record.getLength());", "match": 0}
{"groundtruth": "TimeConverter.toTicks(delay, unit),\n                        TimeConverter.toTicks(period, unit))\n        );", "prediction": "0, TimeConverter.toTicks(period, unit)\n                )\n        );\n    }\n\n    @Override\n    public WrappedTask runTimerAsync(Runnable runnable, long delay, long period, TimeUnit unit) {\n        return new WrappedBukkitTask(\n                this.scheduler.runTaskTimerAsynchronously(\n                        plugin, runnable,\n                        0, TimeConverter.toTicks(period, unit)\n                )\n        );\n    }\n\n    @Override\n    public CompletableFuture<EntityTaskResult> runAtEntity(Entity entity, Runnable runnable) {\n        CompletableFuture<EntityTaskResult> future = new CompletableFuture<>();\n\n        this.scheduler.runTask", "first_line_groundtruth": "TimeConverter.toTicks(delay, unit),", "first_line_prediction": "0, TimeConverter.toTicks(period, unit)", "match": 0}
{"groundtruth": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))\n        );", "prediction": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))\n        );\n    }\n\n    @Override\n    public WrappedTask runLaterAsync(Runnable runnable, long delay, TimeUnit unit) {\n        return new WrappedBukkitTask(\n                this.scheduler.runTaskLaterAsynchronously(plugin, runnable, TimeConverter.toTicks(delay, unit))\n        );\n    }\n\n    @Override\n    public WrappedTask runAtLocationTimer(Location location, Runnable runnable, long delay, long period, TimeUnit unit) {\n        return new WrappedBukkitTask(\n                this.scheduler.runTaskTimer", "first_line_groundtruth": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))", "first_line_prediction": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))", "match": 1}
{"groundtruth": "record.getOffset() + record.getLength() - 1), new EmitKey());", "prediction": "0, record.getLength()),\n                new EmitKey(record.getFilename(), record.getOffset(), 0,\n                        record.getLength()));\n        fetch(t);\n    }\n\n    public void fetch(FetchEmitTuple t) throws InterruptedException {\n        fetcher.fetch(t.getFetchKey(), new Metadata());\n        try (InputStream is = fetcher.fetch(t.getFetchKey(), new Metadata())) {\n            fetch(t, is);\n        }\n    }\n\n    public void fetch(FetchEmitTuple t, InputStream is) throws InterruptedException {\n        try (WarcReader reader = new WarcReader(is)) {", "first_line_groundtruth": "record.getOffset() + record.getLength() - 1), new EmitKey());", "first_line_prediction": "0, record.getLength()),", "match": 0}
{"groundtruth": ".equals(ccIndexRecord.getDigest())) {", "prediction": ".equals(ccIndexRecord.getSha1())) {\n                LOGGER.warn(\"sha1 mismatch: {} != {}\", base32Sha1, ccIndexRecord.getSha1());\n                return;\n            }\n            targetDigest = base32Sha1;\n            Path targetPath = targetPathRewriter.rewrite(ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(), targetDigest);\n            EXTRACTED_LOGGER.info(\"extracted {} to {}\", id, targetPath);\n            EXTRACTED_ALL_LOGGER.info(\"extracted {} to {}\", id, targetPath", "first_line_groundtruth": ".equals(ccIndexRecord.getDigest())) {", "first_line_prediction": ".equals(ccIndexRecord.getSha1())) {", "match": 0}
{"groundtruth": ".getOffset() + record.getLength() - 1), new EmitKey());", "prediction": ".getLength()),\n                new EmitKey(record.getFilename(), record.getFilename(),\n                        record.getOffset(), record.getLength()));\n        fetcher.fetch(t);\n        if (t.getEmitKey().getEmitType() == EmitKey.EmitType.SUCCESS) {\n            EXTRACTED_LOGGER.info(\"extracted {} {}->{}\", record.getFilename(),\n                    record.getOffset(), record.getLength());\n        } else {\n            EXTRACTED_ALL_LOGGER.info(\"extracted {} {}->{}\", record.getFilename(),\n                    record.getOffset(), record.getLength());\n        }\n   ", "first_line_groundtruth": ".getOffset() + record.getLength() - 1), new EmitKey());", "first_line_prediction": ".getLength()),", "match": 0}
{"groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);", "prediction": "0,\n                    length,\n                    targetPath,\n                    targetDigest);\n        } else {\n            EXTRACTED_LOGGER.info(\"\", ccIndexRecord.getUrl(),\n                    ccIndexRecord.getNormalizedMime(),\n                    ccIndexRecord.getNormalizedMimeDetected(),\n                    ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(),\n                    length,\n                    targetPath,\n                    targetDigest);\n        }\n    }\n\n    private byte[] fetchWarcBytes(FetchEmitTuple t) throws IOException, TikaException {\n        try (InputStream is = fetcher.fetch(t)) {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            IOUtils", "first_line_groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "totalCounts, r.getNormalizedMimeDetected());", "prediction": "r.getMimeType(), r.getTruncated());\n            return true;\n        }\n\n        private void increment(String mimeType, boolean truncated) {\n            MutableLong total = totalCounts.computeIfAbsent(mimeType, k -> new MutableLong(0));\n            total.increment();\n            if (truncated) {\n                MutableLong truncatedCount = truncatedCounts.computeIfAbsent(mimeType, k -> new MutableLong(0));\n                truncatedCount.increment();\n            }\n        }\n\n        @Override\n        public void close() throws IOException {\n            counter.close();\n        }\n    }", "first_line_groundtruth": "totalCounts, r.getNormalizedMimeDetected());", "first_line_prediction": "r.getMimeType(), r.getTruncated());", "match": 0}
{"groundtruth": ".getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);", "prediction": ".getOffset(),\n                    ccIndexRecord.getLength(),\n                    ccIndexRecord.getDigest(),\n                    ccIndexRecord.getEncoding(),\n                    ccIndexRecord.getTruncated(),\n                    ccIndexRecord.getTruncatedLength(),\n                    ccIndexRecord.getTruncatedDigest(),\n                    ccIndexRecord.getTruncatedEncoding(),\n                    ccIndexRecord.getTruncatedOffset(),\n                    ccIndexRecord.getTruncatedLength(),\n                    ccIndexRecord.getTruncatedOffset(),\n                    ccIndexRecord.getTruncatedLength(),\n                    ccIndexRecord.getTruncatedOffset(),\n                    ccIndexRecord.getTruncatedLength(),\n                    ccIndexRecord.getTruncatedOffset(),\n                    ccIndex", "first_line_groundtruth": ".getOffset(), ccIndexRecord.getLength(),", "first_line_prediction": ".getOffset(),", "match": 0}
{"groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);", "prediction": "0, length,\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);\n        }\n    }\n\n    private byte[] fetchWarcBytes(FetchEmitTuple t) throws IOException, TikaException {\n        try (InputStream is = fetcher.fetch(t)) {\n            return IOUtils.toByteArray(is);\n        }\n    }\n\n    private void parseWarc(String id, CCIndexRecord ccIndexRecord, byte[] warcRecordGZBytes)\n            throws IOException {\n        try (InputStream is = new GZIPInputStream(new ByteArrayInputStream(warcRecordGZBytes))) {\n            WarcReader reader", "first_line_groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),", "first_line_prediction": "0, length,", "match": 0}
{"groundtruth": "targetPath = targetPathRewriter.rewrite(targetDigest);", "prediction": " targetPath = targetPathRewriter.rewrite(id, targetDigest, length);\n            EXTRACTED_LOGGER.info(\"extracted {} to {}\", id, targetPath);\n            EXTRACTED_ALL_LOGGER.info(\"extracted {} to {}\", id, targetPath);\n            ccIndexReaderCounter.getExtracted().incrementAndGet();\n            emitter.emit(new EmitKey(targetPath), new ByteArrayInputStream(targetDigest.getBytes()));\n        } finally {\n            Files.deleteIfExists(tmp);\n        }\n    }\n\n    private void parseWarc(String id, CCIndexRecord ccIndexRecord, byte[] warcRecord", "first_line_groundtruth": "targetPath = targetPathRewriter.rewrite(targetDigest);", "first_line_prediction": " targetPath = targetPathRewriter.rewrite(id, targetDigest, length);", "match": 0}
{"groundtruth": "RangeFetcher) fetcherConfig.newFetcher();", "prediction": "RangeFetcher) fetcherConfig.newFetcher();\n        this.targetPathRewriter = fetcherConfig.newTargetPathRewriter();\n        this.extractTruncated = fetcherConfig.isExtractTruncated();\n        this.ccIndexReaderCounter = ccIndexReaderCounter;\n    }\n\n    public void extract(String url, String warcPath, String targetPath) throws IOException, InterruptedException {\n        Path warcFile = Path.of(warcPath);\n        Path targetFile = Path.of(targetPath);\n        try (WarcReader reader = new WarcReader(warcFile)) {\n            WarcRecord record", "first_line_groundtruth": "RangeFetcher) fetcherConfig.newFetcher();", "first_line_prediction": "RangeFetcher) fetcherConfig.newFetcher();", "match": 1}
{"groundtruth": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);", "prediction": " ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);\n        }\n    }\n\n    private byte[] fetchWarcBytes(FetchEmitTuple t) throws IOException, TikaException {\n        try (InputStream is = fetcher.fetch(t)) {\n            return IOUtils.toByteArray(is);\n        }\n    }\n\n    private void parseWarc(String id, CCIndexRecord ccIndexRecord, byte[] warcRecordGZBytes)\n            throws IOException {\n        try (InputStream is = new GZIP", "first_line_groundtruth": "ccIndexRecord.getFilename(),", "first_line_prediction": " ccIndexRecord.getFilename(),", "match": 0}
{"groundtruth": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();", "prediction": ".targetPathRewriter = fetcherConfig.newTargetPathRewriter();\n        this.extractTruncated = fetcherConfig.isExtractTruncated();\n        this.ccIndexReaderCounter = ccIndexReaderCounter;\n    }\n\n    public void extract(Path warcFile, Path targetDir) throws IOException, InterruptedException {\n        try (WarcReader reader = new WarcReader(warcFile)) {\n            while (true) {\n                WarcRecord record = reader.readRecord();\n                if (record == null) {\n                    break;\n                }\n                if (record.getHeader().getHeaderType() == WarcRecord.Type", "first_line_groundtruth": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();", "first_line_prediction": ".targetPathRewriter = fetcherConfig.newTargetPathRewriter();", "match": 0}
{"groundtruth": "ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);", "prediction": "0, length, targetPath, targetDigest);\n        } else {\n            EXTRACTED_LOGGER.info(\"\", ccIndexRecord.getUrl(),\n                    ccIndexRecord.getNormalizedMime(),\n                    ccIndexRecord.getNormalizedMimeDetected(),\n                    ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    0, length, targetPath, targetDigest);\n        }\n    }\n\n    private byte[] fetchWarcBytes(FetchEmitTuple t) throws IOException, TikaException {\n        try (InputStream is = fetcher.fetch(t)) {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "first_line_groundtruth": "ccIndexRecord.getTruncated(), targetDigest, length,", "first_line_prediction": "0, length, targetPath, targetDigest);", "match": 0}
{"groundtruth": "r.getNormalizedMimeDetected());", "prediction": "1l);\n            }\n            return true;\n        }\n\n        private void increment(Map<String, MutableLong> counts, long val) {\n            MutableLong c = counts.get(val);\n            if (c == null) {\n                c = new MutableLong(0);\n                counts.put(val, c);\n            }\n            c.increment();\n        }\n\n        @Override\n        public void close() throws IOException {\n            counter.close();\n        }\n    }", "first_line_groundtruth": "r.getNormalizedMimeDetected());", "first_line_prediction": "1l);", "match": 0}
{"groundtruth": ".INSTANCE.getNumberPlan(deviceContext.getLineType(), deviceContext.getCountryCode());", "prediction": ".getNumberPlan(wrapper.getRegionCode(), deviceContext);\n        } else {\n            numberplan = NumberPlanFactory.getNumberPlan(wrapper.getRegionCode());\n        }\n\n        if (numberplan == null) {\n            LOGGER.debug(\"NumberPlan was not initialized\");\n            return null;\n        }\n\n        if (numberplan.hasCountryCode() && numberplan.hasNationalDestinationCode()) {\n            if (wrapper.getNationalDestinationCode() == null) {\n                LOGGER.debug(\"NDC is missing\");\n                return fallbackNormalizationFromDeviceContextToDefaultRegionCode(wrapper.getSemiNormalizedNumber(), wrapper.get", "first_line_groundtruth": ".INSTANCE.getNumberPlan(deviceContext.getLineType(), deviceContext.getCountryCode());", "first_line_prediction": ".getNumberPlan(wrapper.getRegionCode(), deviceContext);", "match": 0}
{"groundtruth": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());", "prediction": ".putAll(DeFixedLineNumberPlan.SHORT_NUMBER_CODES);\n        this.numberPlans.put(DeviceContextLineType.FIXEDLINE, fixedLineNumberPlans);\n    }\n\n    /**\n     * Adds coded NumberPlans for mobile context to the factory.\n     *\n     * @see NumberPlan\n     * @see DeviceContextLineType#MOBILE\n     */\n    private void initMobileNumberPlans() {\n        // TODO: Add mobile number plans\n    }\n\n    /**\n     * Adds coded NumberPlans for unknown context to the factory.\n     *\n     * @see NumberPlan\n     * @see DeviceContextLineType#UNKNOWN\n     */\n   ", "first_line_groundtruth": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());", "first_line_prediction": ".putAll(DeFixedLineNumberPlan.SHORT_NUMBER_CODES);", "match": 0}
{"groundtruth": "(), deviceContext.getCountryCode());", "prediction": "(), deviceContext.getCountryCode());\n        }\n\n        if (numberplan == null) {\n            numberplan = NumberPlanFactory.INSTANCE.getNumberPlan(wrapper.getCountryCode());\n        }\n\n        if (numberplan == null) {\n            LOGGER.debug(\"No number plan for country available\");\n            return null;\n        }\n\n        if (numberplan.hasNationalPrefix()) {\n            if (wrapper.hasNationalAccessCode()) {\n                return wrapper.getNationalPhoneNumberWithNationalAccessCode();\n            } else {\n                return wrapper.getNationalPhoneNumberWithoutNationalAccessCode();\n            }\n        } else {\n            return wrapper.getNationalPhoneNumber", "first_line_groundtruth": "(), deviceContext.getCountryCode());", "first_line_prediction": "(), deviceContext.getCountryCode());", "match": 1}
{"groundtruth": "deviceContext.getNationalDestinationCode());", "prediction": " deviceContext.getNdc());\n        } else {\n            return wrapper.getE164Formatted();\n        }\n    }\n\n    @Override\n    public String normalizePhoneNumber(String number, String dialableNumber) {\n        if (number == null) {\n            return null;\n        }\n\n        if (dialableNumber == null) {\n            dialableNumber = number;\n        }\n\n        if (dialableNumber.startsWith(\"+\")) {\n            dialableNumber = dialableNumber.substring(1);\n        }\n\n        if (dialableNumber.startsWith(\"*\")) {\n            return dialableNumber;\n        }\n\n        if (dialableNumber.", "first_line_groundtruth": "deviceContext.getNationalDestinationCode());", "first_line_prediction": " deviceContext.getNdc());", "match": 0}
{"groundtruth": "(!normalizedDeviceContext.getCountryCode().equals(DeviceContext.UNKNOWN_VALUE)) {", "prediction": " (normalizedDeviceContext == null) {\n            return fallbackNormalizationFromDeviceContextToDefaultRegionCode(number, normalizerPhoneNumber.getDialableNumber());\n        }\n\n        PhoneLibWrapper wrapper = new PhoneLibWrapper(number, normalizedDeviceContext.getCountryCode());\n\n        if (wrapper.getSemiNormalizedNumber() == null) {\n            return wrapper.getDialableNumber();\n        }\n\n        if (wrapper.isShortNumber()) {\n            //if it is a short number, we can't add area code nor country code, so returning the dialable.\n            return wrapper.getDialableNumber();\n        }\n\n        // international", "first_line_groundtruth": "(!normalizedDeviceContext.getCountryCode().equals(DeviceContext.UNKNOWN_VALUE)) {", "first_line_prediction": " (normalizedDeviceContext == null) {", "match": 0}
{"groundtruth": "= PhoneLibWrapper.getRegionCodeForCountryCode(normalizedDeviceContext.getCountryCode());", "prediction": " = normalizedDeviceContext.getCountryCode();\n            PhoneLibWrapper wrapper = new PhoneLibWrapper(number, regionCode);\n            if (wrapper.getSemiNormalizedNumber() == null) {\n                return wrapper.getDialableNumber();\n            }\n        }\n\n        return fallbackNormalizationFromDeviceContextToDefaultRegionCode(number, normalizerPhoneNumber.getDialableNumber());\n    }", "first_line_groundtruth": "= PhoneLibWrapper.getRegionCodeForCountryCode(normalizedDeviceContext.getCountryCode());", "first_line_prediction": " = normalizedDeviceContext.getCountryCode();", "match": 0}
{"groundtruth": "if (! normalizerPhoneNumber.isNormalizingTried()) {", "prediction": " if (normalizerPhoneNumber.getSemiNormalizedNumber() == null) {\n             return normalizerPhoneNumber.getDialableNumber();\n         }\n\n        // if the number is not valid, we return the dialable number.\n        if (!normalizerPhoneNumber.isValid()) {\n            return normalizerPhoneNumber.getDialableNumber();\n        }\n\n        // if the number is valid, we check if the number plan is using a NationalPrefix aka Trunc Code ...\n        // if so, we could add Area Code if not included in the number.\n        // if not, we could add Country Code if not included in the number.\n       ", "first_line_groundtruth": "if (! normalizerPhoneNumber.isNormalizingTried()) {", "first_line_prediction": " if (normalizerPhoneNumber.getSemiNormalizedNumber() == null) {", "match": 0}
{"groundtruth": "(PhoneLibWrapper.getCountryCodeForRegion(fallBackRegionCode) > 0) {", "prediction": " (fallBackRegionCode == null) {\n            throw new IllegalArgumentException(\"fallBackRegionCode must not be null\");\n        }\n        this.fallbackRegionCode = fallBackRegionCode;\n    }\n\n    @Override\n    public String normalizePhoneNumber(String number, String deviceContext) {\n        if (number == null) {\n            throw new IllegalArgumentException(\"number must not be null\");\n        }\n        if (deviceContext == null) {\n            throw new IllegalArgumentException(\"deviceContext must not be null\");\n        }\n        DeviceContext dc = DeviceContextMapper.map(deviceContext);\n        if (dc == null) {\n            throw new IllegalArgumentException(\"device", "first_line_groundtruth": "(PhoneLibWrapper.getCountryCodeForRegion(fallBackRegionCode) > 0) {", "first_line_prediction": " (fallBackRegionCode == null) {", "match": 0}
{"groundtruth": "(wrapper.hasRegionNationalAccessCode() && deviceContext != null) {", "prediction": " (numberplan == null) {\n            //if no number plan is given, we use the fallback\n            return fallbackNormalizationFromDeviceContextToDefaultRegionCode(wrapper.getSemiNormalizedNumber(), wrapper.getDialableNumber());\n        }\n\n        //if number plan is given, we use it to normalize the number\n        return wrapper.normalizePhoneNumber(numberplan);\n    }\n\n    @Override\n    public String normalizePhoneNumber(String number, DeviceContext deviceContext) {\n        if (number == null) {\n            return null;\n        }\n\n        PhoneLibWrapper wrapper = new PhoneLibWrapper(number, deviceContext);\n        return normalize(", "first_line_groundtruth": "(wrapper.hasRegionNationalAccessCode() && deviceContext != null) {", "first_line_prediction": " (numberplan == null) {", "match": 0}
{"groundtruth": ".extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), deviceContext.getNationalDestinationCode());", "prediction": ".getE164Formatted();\n        }\n\n        if (wrapper.hasRegionNationalDestinationCode() && deviceContext != null) {\n            //Number plan is using a NationalPrefix aka Trunc Code ... so we could add Country Code if not included in the number.\n            return wrapper.getE164Formatted();\n        }\n\n        if (wrapper.hasRegionNationalAccessCode() && deviceContext == null) {\n            //Number plan is using a NationalPrefix aka Trunc Code ... so we could add Area Code if not included in the number.\n            return wrapper.getE164Formatted();\n        }", "first_line_groundtruth": ".extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), deviceContext.getNationalDestinationCode());", "first_line_prediction": ".getE164Formatted();", "match": 0}
{"groundtruth": ") : wrapper.getE164Formatted();", "prediction": "wrapper.getNationalAccessCode()) :\n                wrapper.extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), wrapper.getNationalDestinationCode());\n    }\n\n    @Override\n    public String normalizePhoneNumber(String number, DeviceContext deviceContext) {\n        PhoneLibWrapper wrapper = new PhoneLibWrapper(number, deviceContext);\n\n        if (wrapper.getSemiNormalizedNumber() == null) {\n            return wrapper.getDialableNumber();\n        }\n        if (wrapper.isShortNumber()) {\n            //if it is a short number, we can't add area code nor country code, so returning the dial", "first_line_groundtruth": ") : wrapper.getE164Formatted();", "first_line_prediction": "wrapper.getNationalAccessCode()) :", "match": 0}
{"groundtruth": "return wrapper.getE164Formatted();", "prediction": " return wrapper.extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), wrapper.getNationalDestinationCode());\n    }\n\n    @Override\n    public String normalizePhoneNumber(String number, String regionCode) {\n        if (number == null) {\n            return null;\n        }\n        if (regionCode == null) {\n            regionCode = this.fallbackRegionCode;\n        }\n        if (regionCode == null) {\n            LOGGER.debug(\"Fallback Region was not set!\");\n            return number;\n        }\n        PhoneLibWrapper wrapper = PhoneLibWrapper.getInstance(regionCode);\n        if (wrapper == null) {", "first_line_groundtruth": "return wrapper.getE164Formatted();", "first_line_prediction": " return wrapper.extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), wrapper.getNationalDestinationCode());", "match": 0}
{"groundtruth": "boolean hasNoCCAndNoNAC = wrapper.hasNoCountryCodeNorNationalAccessCode();", "prediction": " if (wrapper.getNationalNumber().equals(wrapper.getSemiNormalizedNumber())) {\n             return wrapper.getE164Formatted();\n         }", "first_line_groundtruth": "boolean hasNoCCAndNoNAC = wrapper.hasNoCountryCodeNorNationalAccessCode();", "first_line_prediction": " if (wrapper.getNationalNumber().equals(wrapper.getSemiNormalizedNumber())) {", "match": 0}
{"groundtruth": "(hitIndicator.expired())\n                latestHitIndicators.remove(i);", "prediction": "(hitIndicator.expired()) {\n                latestHitIndicators.remove(i);\n            }\n        }\n\n        if(currentHitMarker != null) {\n            currentHitMarker.tick();\n            if(currentHitMarker.expired()) {\n                currentHitMarker = null;\n            }\n        }\n    }\n\n    public static void render(PoseStack stack, int screenMiddleX, int screenMiddleY, Vec2 playerPos, Vec2 lookVec) {\n        if(!HitIndicatorClientConfigs.EnableHitIndication.get())\n            return;\n\n        if(currentHitMarker != null) {\n            currentHitMarker.render(stack, screen", "first_line_groundtruth": "(hitIndicator.expired())", "first_line_prediction": "(hitIndicator.expired()) {", "match": 0}
{"groundtruth": "!normalizedDeviceContext.getNationalDestinationCode().equals(DeviceContext.UNKNOWN_VALUE)) {", "prediction": "normalizerPhoneNumber.isNormalizingTried()) {\n                return normalize(normalizerPhoneNumber, normalizedDeviceContext);\n            }\n        }\n\n        // fallback to default region code\n        return fallbackNormalizationFromDeviceContextToDefaultRegionCode(number, normalizerPhoneNumber.getDialableNumber());\n    }", "first_line_groundtruth": "!normalizedDeviceContext.getNationalDestinationCode().equals(DeviceContext.UNKNOWN_VALUE)) {", "first_line_prediction": "normalizerPhoneNumber.isNormalizingTried()) {", "match": 0}
{"groundtruth": "if (!destroyed || !capacity.isDestroyed() || this.stress != Integer.MAX_VALUE){", "prediction": " getOrCreateNetwork().remove(block);\n            }\n            block.detachKinetics();\n            block.setSpeed(0);\n            block.setStress(0);\n            block.setOverStressed(false);\n            block.setCapacity(0);\n            block.setLastStressApplied(0);\n            block.setLastCapacityProvided(0);\n            block.setLifeBlock(0);\n            block.setLifeBlockBlocked(false);\n            block.setDestroyed(true);\n            block.setRemoved();\n            block.setChanged();\n            block.setRemoved();\n            block.setChanged();\n            block.", "first_line_groundtruth": "if (!destroyed || !capacity.isDestroyed() || this.stress != Integer.MAX_VALUE){", "first_line_prediction": " getOrCreateNetwork().remove(block);", "match": 0}
{"groundtruth": "capacity.setDestroyed(true);", "prediction": " block.getLevel().playSound(null, block.getBlockPos(), SoundEvents.FIREWORK_ROCKET_BLAST, SoundSource.BLOCKS, 1, 1);\n                }\n            }\n        }\n\n        if (left<0){\n            if (getOrCreateNetwork()!=null){\n                if (!destroyed || !capacity.isDestroyed() || this.stress != Integer.MAX_VALUE){\n                    destroyed = true;\n                    getOrCreateNetwork().updateCapacityFor(block,0);\n                    getOrCreateNetwork().updateStressFor(block, Integer.MAX_VALUE);\n                    getOrCreateNetwork().updateNetwork();\n                   ", "first_line_groundtruth": "capacity.setDestroyed(true);", "first_line_prediction": " block.getLevel().playSound(null, block.getBlockPos(), SoundEvents.FIREWORK_ROCKET_BLAST, SoundSource.BLOCKS, 1, 1);", "match": 0}
{"groundtruth": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacity(block.getBlockState().getBlock());", "prediction": " if (block instanceof CrushingWheelBlockEntity){\n             CrushingWheelBlockEntity crushingWheelBlockEntity = (CrushingWheelBlockEntity) block;\n             if (crushingWheelBlockEntity.getSpeed() > 0){\n                 crushingWheelBlockEntity.setSpeed(0);\n             }\n             if (crushingWheelBlockEntity.getStress() > 0){\n                 crushingWheelBlockEntity.setStress(0);\n             }\n             if (crushingWheelBlockEntity.isOverStressed()){\n                 crushingWheelBlockEntity.setOverStressed", "first_line_groundtruth": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacity(block.getBlockState().getBlock());", "first_line_prediction": " if (block instanceof CrushingWheelBlockEntity){", "match": 0}
{"groundtruth": "(capacity.getDurability()+damage_for_speed);", "prediction": "(capacity.getDurability() - damage_for_speed);\n            block.setSpeed(block.getSpeed() - damage_for_speed);\n            block.setStress(block.getStress() + damage_for_speed);\n            block.setOverStressed(true);\n            block.setLifeBlock(block.getLifeBlock() + 1);\n            block.setLifeBlockBlocked(true);\n            block.setStress(block.getStress() + 1);\n            block.setOverStressed(true);\n            block.setLifeBlock(block.getLifeBlock", "first_line_groundtruth": "(capacity.getDurability()+damage_for_speed);", "first_line_prediction": "(capacity.getDurability() - damage_for_speed);", "match": 0}
{"groundtruth": "= config.durabilityMax - capacity.getDurability();", "prediction": " = config.durabilityMax - capacity.getDurability();\n        float right = config.damageChance;\n\n        if (left > 0 && chance <= right){\n            if (left > 1){\n                left = 1;\n            }\n            if (left > 0){\n                block.getLevel().playSound(null, block.getBlockPos(), SoundEvents.BLOCK_ANVIL_BREAK, SoundSource.BLOCKS, 1, 1);\n                block.getLevel().playSound(null, block.getBlockPos(), SoundEvents.BLOCK_ANVIL_BREAK, SoundSource.BLOCKS,", "first_line_groundtruth": "= config.durabilityMax - capacity.getDurability();", "first_line_prediction": " = config.durabilityMax - capacity.getDurability();", "match": 0}
{"groundtruth": "(MachineCapacityStorage.getInstance().isBlackListBlock(block)){", "prediction": " (block.level.isClientSide){\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() == Blocks.AIR){\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() instanceof Blocks.LAVA){\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() instanceof Blocks.FIRE){\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() instanceof Blocks.FIRE_CORAL){\n            return;\n        }\n        if", "first_line_groundtruth": "(MachineCapacityStorage.getInstance().isBlackListBlock(block)){", "first_line_prediction": " (block.level.isClientSide){", "match": 0}
{"groundtruth": "put(\"machine_capacity\",createMachineCapacity().toTag());", "prediction": "putInt(\"capacity\", this.machineCapacity.getCapacity());\n        return nbt;\n    }\n\n    @Override\n    public void deserializeNBT(CompoundTag nbt) {\n        this.machineCapacity = new MachineCapacity(nbt.getInt(\"capacity\"));\n    }", "first_line_groundtruth": "put(\"machine_capacity\",createMachineCapacity().toTag());", "first_line_prediction": "putInt(\"capacity\", this.machineCapacity.getCapacity());", "match": 0}
{"groundtruth": "(!MachineCapacityStorage.getInstance().active){", "prediction": " (block.level.isClientSide) {\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() == Blocks.AIR) {\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() instanceof Blocks.LAVA) {\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() instanceof Blocks.FIRE) {\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() instanceof Blocks.FIRE_CORAL) {\n            return", "first_line_groundtruth": "(!MachineCapacityStorage.getInstance().active){", "first_line_prediction": " (block.level.isClientSide) {", "match": 0}
{"groundtruth": "element.setContent(text);", "prediction": " element.setContent(text);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return elements;\n    }\n\n    private int getLengthOfType(Node node, int type) {\n        int count = 0;\n        for (int i = 0; i < node.getChildNodes().getLength(); i++) {\n            Node child = node.getChildNodes().item(i);\n            if (child.getNodeType() == type) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private Map<String, String> mapAttributes(NamedNodeMap attributes) {\n        Map<String, String>", "first_line_groundtruth": "element.setContent(text);", "first_line_prediction": " element.setContent(text);", "match": 0}
{"groundtruth": "itemheight = element.getHeight(this.width);", "prediction": " height = element.getHeight(this.width);\n                fullHeight += height;\n            }\n        }\n\n        if (fullHeight > this.lastFullHeight) {\n            this.scrollAmount = Mth.clamp(this.scrollAmount, 0, fullHeight - this.height);\n        } else {\n            this.scrollAmount = Mth.clamp(this.scrollAmount, fullHeight - this.height, 0);\n        }\n\n        this.lastFullHeight = fullHeight;\n    }\n\n    @Override\n    public boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        if", "first_line_groundtruth": "itemheight = element.getHeight(this.width);", "first_line_prediction": " height = element.getHeight(this.width);", "match": 0}
{"groundtruth": "TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));", "prediction": " elements.add(serializer.deserialize(child));\n                } else {\n                    elements.add(new TextTagElement(child.getTextContent()));\n                }\n            }\n        }\n        return elements;\n    }\n\n    public static class TagParseException extends Exception {\n        public TagParseException(String message, Throwable cause) {\n            super(message, cause);\n        }\n    }\n\n    public interface TagElementSerializer {\n        TagElement deserialize(Node node);\n    }\n\n    public static class TextTagElement implements TagElement {\n\n        private final String text;\n\n        public TextTagElement(String text) {\n            this.text = text;\n        }\n\n        @", "first_line_groundtruth": "TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));", "first_line_prediction": " elements.add(serializer.deserialize(child));", "match": 0}
{"groundtruth": "element.mouseClicked(mouseX - (columnWidth * index), mouseY, button, columnWidth)) {", "prediction": "element.mouseClicked(mouseX, mouseY, button, columnWidth)) {\n                return true;\n            }\n            index++;\n            mouseX -= columnWidth;\n        }\n        return false;\n    }\n\n    @Override\n    public void addChild(TagElement element) {\n        this.elements.add(element);\n    }\n\n    @Override\n    public void removeChild(TagElement element) {\n        this.elements.remove(element);\n    }\n\n    @Override\n    public void removeAllChildren() {\n        this.elements.clear();\n    }\n\n    @Override\n    public void setChildren(List<TagElement> children) {\n       ", "first_line_groundtruth": "element.mouseClicked(mouseX - (columnWidth * index), mouseY, button, columnWidth)) {", "first_line_prediction": "element.mouseClicked(mouseX, mouseY, button, columnWidth)) {", "match": 0}
{"groundtruth": ".max(element.getHeight(width), 20);", "prediction": ".max(element.getHeight(width), Minecraft.getInstance().font.lineHeight + 1);\n        }\n        return 0;\n    }\n\n    @Override\n    public void addChild(TagElement element) {\n        this.children.add(element);\n    }\n\n    @Override\n    public void removeChild(TagElement element) {\n        this.children.remove(element);\n    }\n\n    @Override\n    public void clearChildren() {\n        this.children.clear();\n    }\n\n    @Override\n    public TagElement getCurrentChild() {\n        return this.children.get(this.index);\n    }\n\n    @Override\n   ", "first_line_groundtruth": ".max(element.getHeight(width), 20);", "first_line_prediction": ".max(element.getHeight(width), Minecraft.getInstance().font.lineHeight + 1);", "match": 0}
{"groundtruth": "child.getHeight(width);", "prediction": "22;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public int getHeight(int width) {\n        int height = 22;\n        for (TagElement element : this.children) {\n            height += element.getHeight(width);\n        }\n        return height;\n    }\n\n    @Override\n    public void addChild(TagElement element) {\n        this.children.add(element);\n    }", "first_line_groundtruth": "child.getHeight(width);", "first_line_prediction": "22;", "match": 0}
{"groundtruth": "element.mouseClicked(mouseX, mouseY, button, width - 40);", "prediction": " element.mouseClicked(mouseX, mouseY, button, width - 40);\n        }\n        return false;\n    }\n\n    @Override\n    public void addChild(TagElement element) {\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n\n    @Override\n    public void setContent(String content) {\n        throw new IllegalStateException(\"Cannot set content of a carousel that already has children.\");\n    }", "first_line_groundtruth": "element.mouseClicked(mouseX, mouseY, button, width - 40);", "first_line_prediction": " element.mouseClicked(mouseX, mouseY, button, width - 40);", "match": 0}
{"groundtruth": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);", "prediction": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);\n    }", "first_line_groundtruth": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);", "first_line_prediction": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);", "match": 1}
{"groundtruth": "bot.getCommand(cmdId).isPresent()) {", "prediction": "botRunner != null) {\n                bot.setBotRunner(botRunner);\n            }\n            cmd = bot.getCommand(cmdId);\n            if (cmd == null) {\n                throw new NostrException(\"Command not found: \" + cmdId);\n            }\n        } else {\n            throw new NostrException(\"Command must start with \" + COMMAND_PREFIX);\n        }\n        \n        return cmd;\n    }", "first_line_groundtruth": "bot.getCommand(cmdId).isPresent()) {", "first_line_prediction": "botRunner != null) {", "match": 0}
{"groundtruth": "String key = command.getId();", "prediction": "\n\n        try {\n            command.setParameterValues(this.context.getParams(), this.context);\n            var result = command.execute(this.context);\n            if (result != null) {\n                this.context.addEvent(new GenericMessage(result.toString(), this.context.getIdentity().getPublicKey()));\n            }\n        } catch (NostrException ex) {\n            log.log(Level.SEVERE, null, ex);\n        }\n    }\n\n    public void execute(String command) {\n        this.execute(command, null);\n    }\n\n    public void execute(String command, GenericEvent event) {", "first_line_groundtruth": "String key = command.getId();", "first_line_prediction": "", "match": 0}
{"groundtruth": "filter(c -> c.getSources().length == 0).findFirst();", "prediction": "filter(c -> c.getClass().isAnnotationPresent(Command.class) && c.getClass().getAnnotation(Command.class).start()).findFirst();\n        if (optCommand.isPresent()) {\n            return optCommand.get();\n        }\n        return null;\n    }\n\n    public ICommand getStopCommand() {\n        var optCommand = commands.stream().filter(c -> c.getClass().isAnnotationPresent(Command.class) && c.getClass().getAnnotation(Command.class).stop()).findFirst();\n        if (optCommand.isPresent()) {\n            return optCommand.get();\n        }\n        return null;\n    }\n\n   ", "first_line_groundtruth": "filter(c -> c.getSources().length == 0).findFirst();", "first_line_prediction": "filter(c -> c.getClass().isAnnotationPresent(Command.class) && c.getClass().getAnnotation(Command.class).start()).findFirst();", "match": 0}
{"groundtruth": "= bot.getStartCommand();", "prediction": " = bot.getCommand();\n        var event    = bot.getEvent();\n        var response = bot.getResponse();\n\n        if (event != null) {\n            if (!this.context.addEvent(event.getId(), event.getCreatedAt())) {\n                return;\n            }\n        }\n\n        String key = command.getId();\n\n        this.context.addCommandToStack(key);\n\n        try {\n\n            checkCommandIsInScope(command);\n\n            validateCommandParameters(command);\n\n            checkSecurity(command);\n\n        } catch (RuntimeException | NostrException ex) {\n            this.context.addParamValue(key, ex);\n\n           ", "first_line_groundtruth": "= bot.getStartCommand();", "first_line_prediction": " = bot.getCommand();", "match": 0}
{"groundtruth": "return command.getHelp();", "prediction": " return command.getHelp();\n    }\n\n    public void sendDirectMessage(PublicKey recipient, String message, ICommand command) {\n        var event = new DirectMessageEvent(recipient, message);\n        this.context.addEvent(event.getId(), event.getCreatedAt());\n        this.context.addCommandToStack(command.getId());\n        this.context.addParamValue(command.getId(), event);\n        this.context.addParamValue(command.getId(), command);\n        this.context.addParamValue(command.getId(), message);\n        this.context.addParamValue(command.getId(), recipient", "first_line_groundtruth": "return command.getHelp();", "first_line_prediction": " return command.getHelp();", "match": 0}
{"groundtruth": ", \"checkExecutionOrder of {", "prediction": ", \"checkExecutionOrder\");\n    }", "first_line_groundtruth": ", \"checkExecutionOrder of {", "first_line_prediction": ", \"checkExecutionOrder\");", "match": 0}
{"groundtruth": "(command.getId());", "prediction": "();\n            return securityConfiguration.getGroupUsers(group);\n        } catch (NostrException ex) {\n            log.log(Level.SEVERE, null, ex);\n            return new String[0];\n        }\n    }\n\n    private void validateCommandParameters(ICommand command) {\n        var violations = Validation.byProvider(HibernateValidator.class).configure().buildValidatorFactory().getValidator().validate(command);\n        if (!violations.isEmpty()) {\n            throw new RuntimeException(String.format(\"Command %s has invalid parameters: %s\", new Object[]{command.getId(), violations.toString()}));\n        }\n    }", "first_line_groundtruth": "(command.getId());", "first_line_prediction": "();", "match": 0}
{"groundtruth": "this.execute(command, null);", "prediction": "", "first_line_groundtruth": "this.execute(command, null);", "first_line_prediction": "", "match": 0}
{"groundtruth": ".getSizeZ() <= 1 && Math.abs(center.getY() - pos.getY()) <= area.getSizeY();", "prediction": ".getSizeZ() <= 1;\n    };\n\n    /**\n     * Horizontal cuboid shape with each side equal to area's <i>x</i>, <i>y</i> and <i>z</i> size\n     */\n    AreaShape CUBOID = (area, pos) -> {\n        Location center = area.getCenter();\n        Point3D centerPoint = new Point3D(center.getX(), center.getY(), center.getZ());\n        Point3D posPoint = new Point3D(pos.getX(), pos.getY(), pos.getZ());\n\n        return (posPoint.getX", "first_line_groundtruth": ".getSizeZ() <= 1 && Math.abs(center.getY() - pos.getY()) <= area.getSizeY();", "first_line_prediction": ".getSizeZ() <= 1;", "match": 0}
{"groundtruth": "load(gameMap, gameMap.getName() + \"_\" + System.currentTimeMillis());", "prediction": " load(gameMap, false);\n    }\n\n    /**\n     * Loads specified map. If any map is loaded already, new map won't be loaded<br/>\n     * Loading process consists in creating <i>new world</i> by copying its insides from source stored in {@link GameMap} object.\n     * Player won't be warped to this world automatically, thus it has to be done by hand.\n     * You can see how to do it in <a href=\"https://github.com/TheKaVu/GameAPI/wiki/World-Management\">GameAPI wiki</a>\n     * @", "first_line_groundtruth": "load(gameMap, gameMap.getName() + \"_\" + System.currentTimeMillis());", "first_line_prediction": " load(gameMap, false);", "match": 0}
{"groundtruth": "= csStats.getProfileInfos(userid);", "prediction": " = csStats.getProfileInfo(userStats, \"profile_url\");\n        String profileUrl = profileData != null ? profileData.getString(\"profile_url\") : null;\n        String profileName = profileData != null ? profileData.getString(\"profile_name\") : null;\n        String profileAvatar = profileData != null ? profileData.getString(\"profile_avatar\") : null;\n\n        // Create embed\n        EmbedBuilder embed = new EmbedBuilder();\n        embed.setTitle(String.format(\"%s's CS:GO Statistics\", user));\n        embed.setThumbnail(String.format(API_FLAGS, user", "first_line_groundtruth": "= csStats.getProfileInfos(userid);", "first_line_prediction": " = csStats.getProfileInfo(userStats, \"profile_url\");", "match": 0}
{"groundtruth": "center = area.getCenter();", "prediction": " center = area.getCenter();\n        double x = area.getSizeX();\n        double y = area.getSizeY();\n        double z = area.getSizeZ();\n        double dx = pos.getX() - center.getX();\n        double dy = pos.getY() - center.getY();\n        double dz = pos.getZ() - center.getZ();\n        return dx * dx / (x * x) + dy * dy / (y * y) + dz * dz / (z * z) <= 1;\n    };\n\n    /**\n     * Cylindrical shape with each radius equal to area's <i", "first_line_groundtruth": "center = area.getCenter();", "first_line_prediction": " center = area.getCenter();", "match": 0}
{"groundtruth": "= csStats.getStatistics(userid);", "prediction": " = csStats.getUserStats(userid);\n        if (userStats == null) {\n            String msg = String.format(\"Couldn't find user statistics for user id: %s\", userid);\n            event.reply(msg).queue();\n            return;\n        }\n\n        // Get user flags\n        String flags = csStats.getUserFlags(userid);\n        if (flags == null) {\n            String msg = String.format(\"Couldn't find user flags for user id: %s\", userid);\n            event.reply(msg).queue();\n            return;\n        }\n\n        // Get user country\n        String country = csStats.getUser", "first_line_groundtruth": "= csStats.getStatistics(userid);", "first_line_prediction": " = csStats.getUserStats(userid);", "match": 0}
{"groundtruth": "(gameMap.getSource(), activeWorldFolder);", "prediction": "(new File(Bukkit.getWorldContainer(), gameMap.getName()), activeWorldFolder);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n\n        this.world = Bukkit.getWorld(worldName);\n        if(world == null) {\n            this.world = Bukkit.createWorld(new WorldCreator(worldName));\n        }\n\n        return true;\n    }\n\n    /**\n     * Unloads currently loaded map. If no map is loaded, nothing happens\n     * @return {@code true} if map was unloaded; {@code false} otherwise\n     */\n    public", "first_line_groundtruth": "(gameMap.getSource(), activeWorldFolder);", "first_line_prediction": "(new File(Bukkit.getWorldContainer(), gameMap.getName()), activeWorldFolder);", "match": 0}
{"groundtruth": "Main.getLogger().error(\"The json body for request '{", "prediction": " return null;\n        }\n    }", "first_line_groundtruth": "Main.getLogger().error(\"The json body for request '{", "first_line_prediction": " return null;", "match": 0}
{"groundtruth": "Main.getLogger().error(\"'success' was not '1' when trying to get statistics for {", "prediction": " return null;\n        }\n\n        return objResponse.getString(\"steamid\");\n    }\n\n    public String getStats(String userid) {\n        String query = String.format(API_GAME_STATS, CSGO_APP_ID, Constants.STEAM_API_KEY, userid);\n        JSONObject response = (JSONObject) APIRequest.getJson(query);\n        if ((response == null) || (response.isEmpty())) {\n            return null;\n        }\n\n        JSONObject objResponse = response.getJSONObject(\"response\");\n        int success = objResponse.getInt(\"success\");\n        if (success != 1) {\n            return null", "first_line_groundtruth": "Main.getLogger().error(\"'success' was not '1' when trying to get statistics for {", "first_line_prediction": " return null;", "match": 0}
{"groundtruth": "(hangman.initialize()) {", "prediction": " (hangman.initialize()) {\n            games.put(user, hangman);\n        }\n    }\n\n    @Override\n    public void handleEvent(Event event) {\n        String user = event.getUser().getAsTag();\n        if (games.containsKey(user)) {\n            event.reply(\"You already started a game of Hangman\").queue();\n            return;\n        }\n\n        if (games.size() > MAX_GAMES) {\n            event.reply(\"Sorry, there are to many games of Hangman already\").queue();\n            return;\n        }\n\n        event.deferReply().queue(m -> m.", "first_line_groundtruth": "(hangman.initialize()) {", "first_line_prediction": " (hangman.initialize()) {", "match": 0}
{"groundtruth": "if (!mTXVodPlayerWrapper.isPlaying()) {", "prediction": " if (mTXVodPlayerWrapper.isPlaying()) {\n                mTXVodPlayerWrapper.pause();\n                mPauseImageView.setImageResource(R.drawable.ic_play);\n            } else {\n                mTXVodPlayerWrapper.resume();\n                mPauseImageView.setImageResource(R.drawable.ic_pause);\n            }\n        } else if (id == R.id.ib_back_play) {\n            if (mTXVodPlayerWrapper == null) {\n                return;\n            }\n            mTXVodPlayerWrapper.backToLive();\n        } else if (id == R.id.tv_mask", "first_line_groundtruth": "if (!mTXVodPlayerWrapper.isPlaying()) {", "first_line_prediction": " if (mTXVodPlayerWrapper.isPlaying()) {", "match": 0}
{"groundtruth": "TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());", "prediction": "TAG, \"setTXVodPlayer: \" + mTXVodPlayerWrapper.toString());\n    }\n\n    private void init(Context context) {\n        mRootView = LayoutInflater.from(context).inflate(R.layout.tx_video_base_view, null);\n        mSeekBar = mRootView.findViewById(R.id.sb_seek);\n        mSeekBar.setOnSeekBarChangeListener(this);\n        mTXCloudVideoView = mRootView.findViewById(R.id.tx_cloud_video_view);\n        mTXCloudVideoView.setPlayState(TXCloudVideoView.", "first_line_groundtruth": "TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());", "first_line_prediction": "TAG, \"setTXVodPlayer: \" + mTXVodPlayerWrapper.toString());", "match": 0}
{"groundtruth": "mTXVodPlayerWrapper.setVodChangeListener(this);", "prediction": " mTXVodPlayerWrapper.resumePlay();\n        }\n    }\n\n    @Override\n    public void onPlayEventChanged(TXVodPlayerWrapper.PlayEvent playEvent) {\n        if (playEvent == TXVodPlayerWrapper.PlayEvent.PLAY_EVT_PLAY_PROGRESS) {\n            Bundle param = mTXVodPlayerWrapper.getPlayEventParam();\n            if (param != null) {\n                handlePlayProgress(param);\n            }\n        }\n    }", "first_line_groundtruth": "mTXVodPlayerWrapper.setVodChangeListener(this);", "first_line_prediction": " mTXVodPlayerWrapper.resumePlay();", "match": 0}
{"groundtruth": "i(TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());", "prediction": "d(TAG, \"setTXVodPlayer: \" + mTXVodPlayerWrapper.getTXVodPlayer().getPlayState());\n        if (mTXVodPlayerWrapper.getTXVodPlayer().getPlayState() == TXLiveConstants.PLAY_STATE_PLAYING) {\n            mTXCloudVideoView.start();\n        } else {\n            mTXCloudVideoView.pause();\n        }\n    }\n\n    private void init(Context context) {\n        mRootView = LayoutInflater.from(context).inflate(R.layout.tx_video_base_view, null);\n        mSeekBar = mRootView", "first_line_groundtruth": "i(TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());", "first_line_prediction": "d(TAG, \"setTXVodPlayer: \" + mTXVodPlayerWrapper.getTXVodPlayer().getPlayState());", "match": 0}
{"groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");", "prediction": " Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");\n                 return;\n            }\n            event.reply(quote).queue();\n            return;\n        }\n        Callable<String> callable = categories.get(category);\n        if (callable == null) {\n            String msg = String.format(\"There are no quotes for '%s'\", category);\n            event.reply(msg).queue();\n            return;\n        }\n        String quote = Utils.getFromCallable(callable);\n        if (quote == null) {\n            Main.getLogger().error(\"The callable didn't return a value when trying", "first_line_groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");", "first_line_prediction": " Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");", "match": 0}
{"groundtruth": "mTXVodPlayerWrapper.resumePlay();", "prediction": " mTXVodPlayerWrapper.startPlay();\n            } else {\n                mTXVodPlayerWrapper.pausePlay();\n            }\n        } else if (id == R.id.ib_back_play) {\n            if (mTXVodPlayerWrapper == null) {\n                return;\n            }\n            mTXVodPlayerWrapper.backToPlay();\n        } else if (id == R.id.tv_mask_one_i_know) {\n            if (mTXVodPlayerWrapper == null) {\n                return;\n            }\n            mTXVodPlayerWrapper.setGuideOne(true);\n        } else if (", "first_line_groundtruth": "mTXVodPlayerWrapper.resumePlay();", "first_line_prediction": " mTXVodPlayerWrapper.startPlay();", "match": 0}
{"groundtruth": "Log.i(TAG, \"[startPlay] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());", "prediction": " mTXCloudVideoView.requestLayout();\n        }\n    }\n\n    public void stopPlay() {\n        if (mTXVodPlayerWrapper != null) {\n            mTXVodPlayerWrapper.pausePlay();\n            mPauseImageView.setVisibility(View.VISIBLE);\n            mTXVodPlayerWrapper.setVodChangeListener(null);\n        }\n    }\n\n    @Override\n    public void onPlayEventChanged(TXVodPlayerWrapper.PlayEvent playEvent) {\n        if (playEvent == TXVodPlayerWrapper.PlayEvent.PLAY_EVT_PLAY_PROGRESS) {\n            Bundle param = mTXVodPlayerWrapper.getPlayEvent", "first_line_groundtruth": "Log.i(TAG, \"[startPlay] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());", "first_line_prediction": " mTXCloudVideoView.requestLayout();", "match": 0}
{"groundtruth": ".status = HttpStatus.getEnum(code);", "prediction": ".status = new HttpStatus(code, null);\n        this.headers = new Headers(rawHeaders);\n        this.body = body;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    public HttpStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(HttpStatus status) {\n        this.status = status;\n    }\n\n    public Headers getHeaders() {\n        return headers;\n    }\n\n    public void setHeaders(Headers headers) {\n        this.headers = headers;\n    }\n\n    public byte[]", "first_line_groundtruth": ".status = HttpStatus.getEnum(code);", "first_line_prediction": ".status = new HttpStatus(code, null);", "match": 0}
{"groundtruth": "(scramble.initialize()) {", "prediction": " (scramble.initialize()) {\n            games.put(user, scramble);\n        }\n    }\n\n    @Override\n    public void handleEvent(Event event) {\n        for (Scramble scramble : games.values()) {\n            scramble.handleEvent(event);\n        }\n    }\n\n    public static ScrambleCmd getInstance() {\n        return instance;\n    }", "first_line_groundtruth": "(scramble.initialize()) {", "first_line_prediction": " (scramble.initialize()) {", "match": 0}
{"groundtruth": "model.addAttribute(\"flights\", flightService.getUserFlights(principal));", "prediction": " model.addAttribute(\"user\", userService.getUserByPrincipal(principal));\n         return \"personal\";\n     }", "first_line_groundtruth": "model.addAttribute(\"flights\", flightService.getUserFlights(principal));", "first_line_prediction": " model.addAttribute(\"user\", userService.getUserByPrincipal(principal));", "match": 0}
{"groundtruth": "videoView.stopForPlaying();", "prediction": " if (videoView != null) {\n             videoView.release();\n         }\n    }\n\n    public class VideoViewHolder extends AbsPlayerRecyclerViewAdapter.ViewHolder {\n\n        public ImageView mImageViewCover;\n\n        public VideoViewHolder(View itemView) {\n            super(itemView);\n            mImageViewCover = itemView.findViewById(R.id.iv_cover);\n        }\n    }", "first_line_groundtruth": "videoView.stopForPlaying();", "first_line_prediction": " if (videoView != null) {", "match": 0}
{"groundtruth": "userRepository.findByEmail(principal.getName());", "prediction": " userRepository.findByEmail(principal.getName());\n    }\n\n    /**\n     * Method for getting a user entity from the table \"user\"\n     *\n     * @param id - id of the user\n     * @return - user entity\n     */\n    public User getUserById(Long id) {\n        return userRepository.findById(id).orElseThrow(() -> new EntityNotFoundException(\"User not found with id \" + id));\n    }\n\n    /**\n     * Method for updating a user entity in the table \"user\"\n     *\n     * @param user - user entity from the view\n     */\n    public void updateUser(User user) {", "first_line_groundtruth": "userRepository.findByEmail(principal.getName());", "first_line_prediction": " userRepository.findByEmail(principal.getName());", "match": 0}
{"groundtruth": "txVodPlayerWrapper.stopPlay();", "prediction": " txVodPlayerWrapper.release();\n        }\n        mUrlPlayerMap.clear();\n    }\n\n    public List<VideoModel> playedVideoModel() {\n        List<VideoModel> playedVideoList = new ArrayList<>();\n        for (TXVodPlayerWrapper txVodPlayerWrapper : mUrlPlayerMap.values()) {\n            if (txVodPlayerWrapper.isPlaying()) {\n                playedVideoList.add(txVodPlayerWrapper.getVideoModel());\n            }\n        }\n        return playedVideoList;\n    }", "first_line_groundtruth": "txVodPlayerWrapper.stopPlay();", "first_line_prediction": " txVodPlayerWrapper.release();", "match": 0}
{"groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");", "prediction": " Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");\n                 return;\n            }\n\n            event.reply(joke).queue();\n            return;\n        }\n        if (category.equalsIgnoreCase(\"list\")) {\n            event.reply(categoriesList).queue();\n            return;\n        }\n        Callable<String> callable = categories.get(category);\n\n        String joke = Utils.getFromCallable(callable);\n        if (joke == null) {\n            Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");\n            return;\n        }", "first_line_groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");", "first_line_prediction": " Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");", "match": 0}
{"groundtruth": "flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));", "prediction": " flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));\n    }\n\n    /**\n     * Method for getting a flight entity from the table \"flight\"\n     *\n     * @param id - id of the flight\n     * @return - flight entity\n     */\n    public Flight get(Long id) {\n        return flightRepository.findById(id)\n                .orElseThrow(() -> new EntityNotFoundException(\"Flight not found with id \" + id));\n    }\n\n    /**\n     * Method for adding a flight entity to the table \"flight\"\n     *\n     * @param flight - flight entity to be added\n     * @", "first_line_groundtruth": "flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));", "first_line_prediction": " flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));", "match": 0}
{"groundtruth": "String quote = Utils.getFromCallable(callable);", "prediction": " String quote = Utils.getFromCallable(callable);\n            if (quote == null) {\n                Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");\n                return;\n            }\n            event.reply(quote).queue();\n            return;\n        }\n        if (category.equalsIgnoreCase(\"list\")) {\n            event.reply(categoriesList).queue();\n            return;\n        }\n        Callable<String> callable = categories.get(category);\n        if (callable == null) {\n            String msg = String.format(\"There are no quotes for '%s'\", category);\n            event.reply(", "first_line_groundtruth": "String quote = Utils.getFromCallable(callable);", "first_line_prediction": " String quote = Utils.getFromCallable(callable);", "match": 0}
{"groundtruth": "setUser(userRepository.findByEmail(principal.getName()));", "prediction": "setOrderStatus(true);\n        flight.setUser(userRepository.findByEmail(principal.getName()));\n        flightRepository.save(flight);\n    }\n\n    /**\n     * Method for cancelling the flight\n     *\n     * @param id - id of the flight to be cancelled\n     */\n    public void cancelFlight(Long id) {\n        Flight flight = flightRepository.findById(id)\n                .orElseThrow(() -> new EntityNotFoundException(\"Flight not found with id \" + id));\n        flight.setOrderStatus(false);\n        flightRepository.save(flight);\n    }", "first_line_groundtruth": "setUser(userRepository.findByEmail(principal.getName()));", "first_line_prediction": "setOrderStatus(true);", "match": 0}
{"groundtruth": "flightService.orderFlight(id, principal);", "prediction": " flightService.orderFlight(id, principal.getName());\n         return \"redirect:/\";\n     }", "first_line_groundtruth": "flightService.orderFlight(id, principal);", "first_line_prediction": " flightService.orderFlight(id, principal.getName());", "match": 0}
{"groundtruth": "mTXVodPlayerWrapper.stopForPlaying();", "prediction": " mTXVodPlayerWrapper.stopPlay();\n             mTXVodPlayerWrapper.setVodChangeListener(null);\n             Log.i(TAG, \"[stopForPlaying] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());\n             mPauseImageView.setVisibility(View.GONE);\n        }\n    }\n\n    public void releasePlayer() {\n        if (mTXVodPlayerWrapper != null) {\n            mTXVodPlayerWrapper.release();\n            mTXVodPlayerWrapper = null;\n        }\n    }\n\n    public void setCover(String url) {\n        Glide.with(getContext()).load(url", "first_line_groundtruth": "mTXVodPlayerWrapper.stopForPlaying();", "first_line_prediction": " mTXVodPlayerWrapper.stopPlay();", "match": 0}
{"groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);", "prediction": " Bundle bundle = getIntent().getExtras();\n        if (bundle != null) {\n            String url = bundle.getString(\"url\");\n            String title = bundle.getString(\"title\");\n            List<VideoModel> videoList = bundle.getParcelableArrayList(\"videoList\");\n            mPlayFragment.setVideoUrl(url);\n            mPlayFragment.setVideoTitle(title);\n            mPlayFragment.setVideoList(videoList);\n        }\n    }\n\n    @Override\n    public void onDataLoadFull(String url) {\n        ToastUtils.showShort(\"\u89c6\u9891\u52a0\u8f7d\u5931\u8d25\");\n    }", "first_line_groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);", "first_line_prediction": " Bundle bundle = getIntent().getExtras();", "match": 0}
{"groundtruth": "response.getFirstLine()));", "prediction": "response.getBody()));\n        channel.close();\n    }\n\n    private HttpResponse handle404() {\n        HttpResponse response = new HttpResponse(404, \"404 Not Found\".getBytes());\n        Headers headers = new Headers();\n        headers.addHeader(\"Content-Type\", \"text/html\");\n        headers.addHeader(\"Content-Length\", \"14\");\n        response.setHeaders(headers);\n        return response;\n    }\n\n    private HttpResponse handleOk(String path) {\n        HttpResponse response = new HttpResponse(200, ResourcesFileUtil.getResource(path));\n        Headers headers = new Headers();\n        headers", "first_line_groundtruth": "response.getFirstLine()));", "first_line_prediction": "response.getBody()));", "match": 0}
{"groundtruth": "getEmail(), userForm.getPassword());", "prediction": "toUser());\n        return Response.created(uriInfo.getAbsolutePathBuilder().path(String.valueOf(user.getId())).build()).build();\n    }", "first_line_groundtruth": "getEmail(), userForm.getPassword());", "first_line_prediction": "toUser());", "match": 0}
{"groundtruth": "user = us.create(userForm.getEmail(), userForm.getPassword());", "prediction": " user = new User(userForm.getUsername(), userForm.getPassword());\n        final User savedUser = us.save(user);\n\n        return Response.created(uriInfo.getAbsolutePathBuilder().path(savedUser.getId()).build())\n                .entity(UserDto.fromUser(uriInfo, savedUser)).build();\n    }", "first_line_groundtruth": "user = us.create(userForm.getEmail(), userForm.getPassword());", "first_line_prediction": " user = new User(userForm.getUsername(), userForm.getPassword());", "match": 0}
{"groundtruth": "response.getHeaders().toString().getBytes()));", "prediction": "response.getHeaders()));\n        channel.write(ByteBuffer.wrap(response.getBody()));\n        channel.register(selectionKey.selector(), SelectionKey.OP_READ);\n    }\n\n    private HttpResponse handle404() {\n        HttpResponse response = new HttpResponse();\n        response.setStatusCode(404);\n        response.setBody(\"404 Not Found\");\n        response.setHeaders(new ArrayList<>(16));\n        response.getHeaders().add(Headers.CONTENT_TYPE, \"text/html; charset=utf-8\");\n        return response;\n    }\n\n    private HttpResponse handleOk(String path) {\n        HttpResponse", "first_line_groundtruth": "response.getHeaders().toString().getBytes()));", "first_line_prediction": "response.getHeaders()));", "match": 0}
{"groundtruth": "channel.write(ByteBuffer.wrap(response.getBody()));", "prediction": " // \u6ce8\u518c\u4e00\u4e2a\u5199\u4e8b\u4ef6\uff0c\u7528\u6765\u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4fe1\u606f\n        selectionKey.interestOps(SelectionKey.OP_WRITE);\n    }\n\n    private HttpResponse handle404() {\n        HttpResponse response = new HttpResponse();\n        response.setStatusCode(404);\n        response.setReasonPhrase(\"Not Found\");\n        response.setHeaders(new Headers());\n        response.getHeaders().put(Headers.CONTENT_TYPE, \"text/html; charset=utf-8\");\n        response.getHeaders().put(Headers.CONTENT_LENGTH, \"404 Not Found\".getBytes().length);\n        response.getHeaders().put(", "first_line_groundtruth": "channel.write(ByteBuffer.wrap(response.getBody()));", "first_line_prediction": " // \u6ce8\u518c\u4e00\u4e2a\u5199\u4e8b\u4ef6\uff0c\u7528\u6765\u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4fe1\u606f", "match": 0}
{"groundtruth": "ShortVideoModel.getInstance(this).loadDefaultVideo();", "prediction": " mPlayFragment.setVideoModel(getIntent().getParcelableExtra(ShortVideoPlayFragment.KEY_VIDEO_MODEL));\n    }\n\n    @Override\n    public void onDataLoadFull(List<VideoModel> videoModels) {\n        if (videoModels == null || videoModels.size() == 0) {\n            ToastUtils.showShort(\"\u6ca1\u6709\u6570\u636e\");\n            return;\n        }\n        mPlayFragment.setVideoModel(videoModels.get(0));\n    }", "first_line_groundtruth": "ShortVideoModel.getInstance(this).loadDefaultVideo();", "first_line_prediction": " mPlayFragment.setVideoModel(getIntent().getParcelableExtra(ShortVideoPlayFragment.KEY_VIDEO_MODEL));", "match": 0}
{"groundtruth": "write(response.getFirstLine());", "prediction": "write(response.getFirstLine().getBytes());\n        outputStream.write(response.getHeaders().toString().getBytes());\n        outputStream.write(\"\\r\\n\".getBytes());\n        outputStream.write(response.getBody());\n        outputStream.flush();\n        outputStream.close();\n    }\n\n    private HttpResponse handle404() {\n        String body = \"404 Not Found!\";\n        HttpResponse response = new HttpResponse(404, body.getBytes());\n        Headers headers = new Headers();\n        headers.addHeader(\"Content-Type\", ContextType.getContextType(\"html\"));\n        headers.addHeader(\"Content-Length\", body.getBytes().", "first_line_groundtruth": "write(response.getFirstLine());", "first_line_prediction": "write(response.getFirstLine().getBytes());", "match": 0}
{"groundtruth": ".write(response.getBody());", "prediction": ".write(response.getBody());\n        outputStream.flush();\n        outputStream.close();\n    }\n\n    private void log(HttpRequest request) {\n        String log = String.format(\"%s INFO %s %s %s\", LocalDateTime.now(),\n                request.getMethod(), request.getPath(), request.getHeaders().getHeader(\"User-Agent\"));\n        System.out.println(log);\n    }\n\n    public static void main(String[] args) throws IOException {\n        int port = 8080;\n        new SimpleHttpV2().start(port);\n    }", "first_line_groundtruth": ".write(response.getBody());", "first_line_prediction": ".write(response.getBody());", "match": 1}
{"groundtruth": "ShortVideoModel.getInstance(this).getVideoByFileId();", "prediction": " // \u52a0\u8f7d\u89c6\u9891\u5217\u8868\n        List<VideoModel> videoList = ShortVideoModel.getInstance(this).getVideoList();\n        mPlayFragment.setVideoList(videoList);\n    }\n\n    @Override\n    public void onDataLoadFull(List<VideoModel> videoList) {\n        mPlayFragment.setVideoList(videoList);\n    }\n\n    @Override\n    public void onDataLoadError(String msg) {\n        ToastUtils.showShort(msg);\n    }", "first_line_groundtruth": "ShortVideoModel.getInstance(this).getVideoByFileId();", "first_line_prediction": " // \u52a0\u8f7d\u89c6\u9891\u5217\u8868", "match": 0}
{"groundtruth": "response.getHeaders().toString().getBytes());", "prediction": "response.getHeaders().toString().getBytes());\n        outputStream.write(\"\\r\\n\".getBytes());\n        outputStream.write(response.getBody());\n        outputStream.flush();\n        outputStream.close();\n    }\n\n    private HttpResponse handle404() {\n        String body = \"404 Not Found!\";\n        HttpResponse response = new HttpResponse(404, body.getBytes());\n        Headers headers = new Headers();\n        headers.addHeader(\"Content-Type\", ContextType.getContextType(\"html\"));\n        headers.addHeader(\"Content-Length\", body.getBytes().length + \"\");\n        headers.addHeader(\"Connection\", \"Close\");", "first_line_groundtruth": "response.getHeaders().toString().getBytes());", "first_line_prediction": "response.getHeaders().toString().getBytes());", "match": 1}
{"groundtruth": "ShortVideoModel.getInstance(this).release();", "prediction": " super.onDestroy();\n         ShortVideoModel.getInstance(this).release();\n    }\n\n    @Override\n    public void onLoadedFailed(int errcode) {\n        ToastUtils.showShort(\"\u52a0\u8f7d\u5931\u8d25\");\n    }", "first_line_groundtruth": "ShortVideoModel.getInstance(this).release();", "first_line_prediction": " super.onDestroy();", "match": 0}
{"groundtruth": "faceProvider.invalidateCache();", "prediction": " faceProvider.reload();\n        }\n    }", "first_line_groundtruth": "faceProvider.invalidateCache();", "first_line_prediction": " faceProvider.reload();", "match": 0}
{"groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(null);", "prediction": " super.onDestroy();\n    }\n\n    @Override\n    public void onLoadedFailed(int errcode) {\n        ToastUtils.showShort(\"\u52a0\u8f7d\u5931\u8d25\");\n    }", "first_line_groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(null);", "first_line_prediction": " super.onDestroy();", "match": 0}
{"groundtruth": "String mrState = mrEvent.getMrState();", "prediction": "\n\t\ttry {\n\t\t\tMergeRequest mergeRequest = gitlab.getMergeRequestApi().getMergeRequest(mrEvent.getMergeRequestIid());\n\t\t\tif (mergeRequest.getState() == MergeRequestState.OPEN) {\n\t\t\t\tresult.setMrState(MergeRequestUcascadeState.OPEN);\n\t\t\t\tresult.setMrAction(mrEvent.getMergeRequestAction());\n\t\t\t\tresult.setMrNumber(mrEvent.getMergeRequestIid());\n\t\t\t\tresult.setMergeCommitSha(mrEvent.getMergeCommitSha());\n\t\t\t\tresult.setMrTitle(mergeRequest.getTitle());", "first_line_groundtruth": "String mrState = mrEvent.getMrState();", "first_line_prediction": "", "match": 0}
{"groundtruth": "Long projectId = mrEvent.getProjectId();", "prediction": "\tif (userId != null && !userId.equals(ucascadeUser)) {\n\t\t\t\tresult.setResult(MergeRequestUcascadeState.SKIPPED);\n\t\t\t\tresult.setResultMessage(\"User is not allowed to merge\");\n\t\t\t\treturn;\n\t\t\t}", "first_line_groundtruth": "Long projectId = mrEvent.getProjectId();", "first_line_prediction": "\tif (userId != null && !userId.equals(ucascadeUser)) {", "match": 0}
{"groundtruth": "CascadeResult result = gitLabService.createResult(gitlabEventUUID);", "prediction": "", "first_line_groundtruth": "CascadeResult result = gitLabService.createResult(gitlabEventUUID);", "first_line_prediction": "", "match": 0}
{"groundtruth": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();", "prediction": "\tLog.infof(\"GitlabEvent: '%s' | Replaying\", mrSimple.getGitlabEventUUID());\n\t\t\tCascadeResult result = gitLabService.createResult(mrSimple.getGitlabEventUUID());\n\t\t\teventsBus.send(GitLabService.MERGE_REQUEST_EVENT, mrSimple);\n\t\t\treturn result;", "first_line_groundtruth": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();", "first_line_prediction": "\tLog.infof(\"GitlabEvent: '%s' | Replaying\", mrSimple.getGitlabEventUUID());", "match": 0}
{"groundtruth": "result.setError(\"Invalid path: \" + path);", "prediction": "\tresult.setExistingBranchDelete(new DeleteBranchResult(path));\n\t\t\t\tLog.infof(\"GitlabEvent: '%s' | Deleted branch '%s'\", gitlabEventUUID, path);\n\t\t\trc.response().end(Json.encodePrettily(result));\n\t\t}", "first_line_groundtruth": "result.setError(\"Invalid path: \" + path);", "first_line_prediction": "\tresult.setExistingBranchDelete(new DeleteBranchResult(path));", "match": 0}
{"groundtruth": "result.setPreviousAutoMrMergedError(e.getMessage());", "prediction": "\tresult.setMergeResult(MergeRequestResult.FAILED);\n\t\t\t\tresult.setMergeResultMessage(e.getMessage());\n\t\t}", "first_line_groundtruth": "result.setPreviousAutoMrMergedError(e.getMessage());", "first_line_prediction": "\tresult.setMergeResult(MergeRequestResult.FAILED);", "match": 0}
{"groundtruth": "Long mrNumber = mrEvent.getMrNumber();", "prediction": "", "first_line_groundtruth": "Long mrNumber = mrEvent.getMrNumber();", "first_line_prediction": "", "match": 0}
{"groundtruth": "Long userId = mrEvent.getUserId();", "prediction": "\tMergeRequestResult mrResult = new MergeRequestResult();\n\t\t\tmrResult.setGitlabEventUUID(gitlabEventUUID);\n\t\t\tmrResult.setMergeRequest(mrEvent);\n\t\t\tmrResult.setMergeRequestState(MergeRequestState.MERGED);\n\t\t\tmrResult.setMergeRequestAction(\"merge\");\n\t\t\tmrResult.setMergeRequestState(MergeRequestState.MERGED);\n\t\t\tmrResult.setMergeRequestAction(\"merge\");\n\t\t\tmrResult.setMergeRequestState(MergeRequestState.MERGED);\n\t\t\tmrResult.setMergeRequestAction(\"merge\");\n\t\t\t", "first_line_groundtruth": "Long userId = mrEvent.getUserId();", "first_line_prediction": "\tMergeRequestResult mrResult = new MergeRequestResult();", "match": 0}
{"groundtruth": "presentation.setTitle(getTitle(doc, SHOWTITLE));", "prediction": "", "first_line_groundtruth": "presentation.setTitle(getTitle(doc, SHOWTITLE));", "first_line_prediction": "", "match": 0}
{"groundtruth": "= mrEvent.getMergeCommitSha();", "prediction": " = mrEvent.getMergeSha();\n\t\tString mergeMessage = mrEvent.getMergeMessage();\n\t\tString mergeAuthorName = mrEvent.getMergeAuthorName();\n\t\tString mergeAuthorEmail = mrEvent.getMergeAuthorEmail();\n\t\tString mergeAuthorUsername = mrEvent.getMergeAuthorUsername();\n\t\tString mergeAuthorAvatarUrl = mrEvent.getMergeAuthorAvatarUrl();\n\t\tString mergeAuthorWebUrl = mrEvent.getMergeAuthorWebUrl();\n\t\tString mergeAuthorId = mrEvent.getMergeAuthorId();\n\t\tString mergeAuthorState = mrEvent.getMergeAuthor", "first_line_groundtruth": "= mrEvent.getMergeCommitSha();", "first_line_prediction": " = mrEvent.getMergeSha();", "match": 0}
{"groundtruth": ".print(((BitmapItem) slideItem).getName());", "prediction": ".print(((BitmapItem) slideItem).getImage());\n\t\t\t\t\t}\n\t\t\t\t}", "first_line_groundtruth": ".print(((BitmapItem) slideItem).getName());", "first_line_prediction": ".print(((BitmapItem) slideItem).getImage());", "match": 0}
{"groundtruth": "result.setExistingBranchDeleteError(e.getMessage());", "prediction": "\tresult.setDeletedExistingBranchError(e.getMessage());\n\t\t}", "first_line_groundtruth": "result.setExistingBranchDeleteError(e.getMessage());", "first_line_prediction": "\tresult.setDeletedExistingBranchError(e.getMessage());", "match": 0}
{"groundtruth": "result.setCreatedAutoMrError(e.getMessage());", "prediction": "\tresult.setAutoMrCreationError(e.getMessage());\n\t\t}", "first_line_groundtruth": "result.setCreatedAutoMrError(e.getMessage());", "first_line_prediction": "\tresult.setAutoMrCreationError(e.getMessage());", "match": 0}
{"groundtruth": "= Style.getStyle(slideItem.getLevel());", "prediction": " = slideItem.getStyle();\n\t\tTextLayout layout = slideItem.getLayout(g, style, scale);\n\t\tlayout.draw(g, area.x, y);\n\t\ty += layout.getAscent();", "first_line_groundtruth": "= Style.getStyle(slideItem.getLevel());", "first_line_prediction": " = slideItem.getStyle();", "match": 0}
{"groundtruth": "out.print(((TextItem) slideItem).getText());", "prediction": "\tout.print(slideItem.getText());\n\t\t\t\t\tout.println(\"</item>\");\n\t\t\t\t} else if (slideItem instanceof BitmapItem) {\n\t\t\t\t\tout.print(\"\\\"image\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");\n\t\t\t\t\t\tout.print(slideItem.getText());\n\t\t\t\t\tout.println(\"</item>\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.err.println(\"Unknown Element type\");\n\t\t\t\t}\n\t\t\t}", "first_line_groundtruth": "out.print(((TextItem) slideItem).getText());", "first_line_prediction": "\tout.print(slideItem.getText());", "match": 0}
{"groundtruth": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");", "prediction": ".print(TEXT);\n\t\t\t\t} else if (slideItem instanceof BitmapItem) {\n\t\t\t\t\tout.print(IMAGE);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.err.println(\"Unknown Element type\");\n\t\t\t\t}", "first_line_groundtruth": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");", "first_line_prediction": ".print(TEXT);", "match": 0}
{"groundtruth": "mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "prediction": " mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "first_line_groundtruth": "mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "first_line_prediction": " mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "match": 0}
{"groundtruth": "< presentation.getSize();", "prediction": " < presentation.getSlideCount(); slideNumber++) {\n\t\t\tSlide slide = presentation.getSlide(slideNumber);", "first_line_groundtruth": "< presentation.getSize();", "first_line_prediction": " < presentation.getSlideCount(); slideNumber++) {", "match": 0}
{"groundtruth": "bookDTO.setAuthorName(\"Ranjan Sir\");", "prediction": " ///Call the add book functionality\n        Long bookId = controller.add(bookDTO);\n        System.out.println(\"Book with ID: \"+bookId+\" has been added\");\n    }", "first_line_groundtruth": "bookDTO.setAuthorName(\"Ranjan Sir\");", "first_line_prediction": " ///Call the add book functionality", "match": 0}
{"groundtruth": "bookDTO.setAuthorEmail(\"author1@gmail.com\");", "prediction": " bookDTO.setDescription(\"This is a book description\");\n        bookDTO.setName(\"This is a book name\");\n        bookDTO.setPricePerQty(100.00);\n        Long bookId = controller.add(bookDTO);\n        System.out.println(\"The Book with ID: \"+bookId+\" has been added\");\n    }", "first_line_groundtruth": "bookDTO.setAuthorEmail(\"author1@gmail.com\");", "first_line_prediction": " bookDTO.setDescription(\"This is a book description\");", "match": 0}
{"groundtruth": "bookDTO.setAvailableQty(10);", "prediction": " ///Call the add book functionality\n        Long bookId = controller.add(bookDTO);\n        System.out.println(\"The Book with ID: \"+bookId+\" has been added\");\n    }", "first_line_groundtruth": "bookDTO.setAvailableQty(10);", "first_line_prediction": " ///Call the add book functionality", "match": 0}
{"groundtruth": "bookDTO.setDescription(\"Book One Description\");", "prediction": " ///Call the controller add book method\n        Long bookId = controller.add(bookDTO);\n        System.out.println(\"The Book with ID: \"+bookId+\" has been added\");\n    }", "first_line_groundtruth": "bookDTO.setDescription(\"Book One Description\");", "first_line_prediction": " ///Call the controller add book method", "match": 0}
{"groundtruth": ", mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "prediction": " != null ? mrEvent.getProjectId() : -1,\n\t\t\t\tmrEvent.getUserId() != null ? mrEvent.getUserId() : -1,\n\t\t\t\tmrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "first_line_groundtruth": ", mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "first_line_prediction": " != null ? mrEvent.getProjectId() : -1,", "match": 0}
{"groundtruth": "bookDTO.setName(\"PlacementPrep\");", "prediction": " ///Call the controller add book method\n        Long bookId = controller.add(bookDTO);\n        System.out.println(\"Book with ID: \"+bookId+\" has been added\");\n    }", "first_line_groundtruth": "bookDTO.setName(\"PlacementPrep\");", "first_line_prediction": " ///Call the controller add book method", "match": 0}
{"groundtruth": "bookDTO.setPricePerQty(88.959);", "prediction": " ///Call the add book functionality\n        Long bookId = controller.add(bookDTO);\n        System.out.println(\"Book with ID: \"+bookId+\" has been added\");\n    }", "first_line_groundtruth": "bookDTO.setPricePerQty(88.959);", "first_line_prediction": " ///Call the add book functionality", "match": 0}
{"groundtruth": "!code.equals(twoFactorService.getTOTPCode(secret)))\n            return ResponseEntity.status(403).build();", "prediction": "twoFactorService.verifyCode(secret, code)) {\n            accountData.setTfaSecret(secret);\n            accountService.update(accountData);\n            return ResponseEntity.ok(accountData);\n        } else {\n            return ResponseEntity.status(403).build();\n        }\n    }\n\n    @PostMapping(\"/disable\")\n    public ResponseEntity<?> disable() {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData == null) return ResponseEntity.status(403).build();\n        if (accountData.getTfaSecret() == null)", "first_line_groundtruth": "!code.equals(twoFactorService.getTOTPCode(secret)))", "first_line_prediction": "twoFactorService.verifyCode(secret, code)) {", "match": 0}
{"groundtruth": "token = BackendApplication.generateString(20);", "prediction": " token = TokenGenerator.generateToken(maxUses);\n        GroupInvite invite = new GroupInvite(token, expire, reciever, issuer, groupData.getId());\n        groupData.getInvited().add(invite);\n        groupRepository.save(groupData);\n        return ResponseEntity.ok(token);\n    }\n\n    public GroupResponse acceptInvite(String token, String uid) {\n        GroupData group = groupRepository.findByInviteToken(token).stream().findFirst().orElse(null);\n        if (group == null)\n            return null;\n        if (group.getMember().stream().anyMatch(member ->", "first_line_groundtruth": "token = BackendApplication.generateString(20);", "first_line_prediction": " token = TokenGenerator.generateToken(maxUses);", "match": 0}
{"groundtruth": "= twoFactorService.getGoogleAuthenticatorBarCode(secret, username, company);", "prediction": " = twoFactorService.generateQRCode(secret, company);\n\n        JSONObject request = new JSONObject();\n        request.put(\"username\", username);\n        request.put(\"secret\", secret);\n        request.put(\"company\", company);\n        request.put(\"barCode\", barCode);\n\n        generateRequests.add(request);\n\n        return ResponseEntity.ok(request);\n    }\n\n    @PostMapping(\"/verify\")\n    public ResponseEntity<?> verify(@RequestBody JSONObject request) throws IOException, WriterException {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData == null)", "first_line_groundtruth": "= twoFactorService.getGoogleAuthenticatorBarCode(secret, username, company);", "first_line_prediction": " = twoFactorService.generateQRCode(secret, company);", "match": 0}
{"groundtruth": "twoFactorService.createQRCode(barCode, 400, 400);", "prediction": " twoFactorService.getQRCode(barCode);\n\n        generateRequests.add(new JSONObject().put(\"username\", username).put(\"secret\", secret));\n\n        return ResponseEntity.ok(new JSONObject().put(\"qr\", qr).put(\"secret\", secret));\n    }\n\n    @PostMapping(\"/verify\")\n    public ResponseEntity<?> verify(@RequestBody String secret) throws IOException, WriterException {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData == null) return ResponseEntity.status(403).build();\n        if (accountData.getTfaSecret()", "first_line_groundtruth": "twoFactorService.createQRCode(barCode, 400, 400);", "first_line_prediction": " twoFactorService.getQRCode(barCode);", "match": 0}
{"groundtruth": "min = URL.convertDate(minDate, new Date(0L));", "prediction": " minDateObj = URL.convertDate(minDate, new Date());\n        Date  maxDateObj = URL.convertDate(maxDate, new Date());\n        List<Post> list = postService.fullSearch(text, minDateObj, maxDateObj);\n        return ResponseEntity.ok().body(list);\n    }\n\n    @PostMapping\n    public ResponseEntity<Void> insert(@RequestBody Post obj){\n        obj = postService.insert(obj);\n        URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path(\"/{id}\").buildAndExpand(obj.getId()).toUri();\n        return ResponseEntity.created", "first_line_groundtruth": "min = URL.convertDate(minDate, new Date(0L));", "first_line_prediction": " minDateObj = URL.convertDate(minDate, new Date());", "match": 0}
{"groundtruth": "ok(service.getUserByUsername(username));", "prediction": "ok(service.findByUsername(username));\n    }\n\n    @GetMapping(\"/contacts\")\n    public ResponseEntity<List<ContactData>> getContacts() {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData == null)\n            return ResponseEntity.status(403).build();\n        return ResponseEntity.ok(contactService.getContacts(accountData.getId()));\n    }\n\n    @PostMapping(\"/contacts\")\n    public ResponseEntity<ContactData> addContact(@RequestBody ContactData contactData) {\n        AccountData accountData = (AccountData) SecurityContextHolder.", "first_line_groundtruth": "ok(service.getUserByUsername(username));", "first_line_prediction": "ok(service.findByUsername(username));", "match": 0}
{"groundtruth": "Post> list = postService.fullSearch(text, min ,max);", "prediction": "Post> list = postService.fullSearch(text, min, max);\n        return ResponseEntity.ok().body(list);\n    }", "first_line_groundtruth": "Post> list = postService.fullSearch(text, min ,max);", "first_line_prediction": "Post> list = postService.fullSearch(text, min, max);", "match": 0}
{"groundtruth": "ok(service.searchByUsername(username));", "prediction": "ok(service.searchUserByUsername(username));\n    }\n\n    @GetMapping(\"/contacts\")\n    public ResponseEntity<List<ContactData>> getContacts() {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData == null)\n            return ResponseEntity.status(403).build();\n        return ResponseEntity.ok(contactService.getContacts(accountData.getId()));\n    }\n\n    @GetMapping(\"/contacts/{uId}\")\n    public ResponseEntity<List<ContactData>> getContacts(@PathVariable String uId) {\n        return ResponseEntity.ok(contactService", "first_line_groundtruth": "ok(service.searchByUsername(username));", "first_line_prediction": "ok(service.searchUserByUsername(username));", "match": 0}
{"groundtruth": "obj.getId()) ;", "prediction": "obj.getId());\n        newObj.setName(obj.getName());\n        newObj.setEmail(obj.getEmail());\n        return repository.save(newObj);\n    }", "first_line_groundtruth": "obj.getId()) ;", "first_line_prediction": "obj.getId());", "match": 0}
{"groundtruth": "return ResponseEntity.ok(service.findAll());", "prediction": " return ResponseEntity.ok(service.getAllAccountData());\n    }\n\n    @PostMapping(\"/{uId}/contacts\")\n    public ResponseEntity<ContactData> addContact(@PathVariable String uId, @RequestBody ContactData contact) {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData == null)\n            return ResponseEntity.status(403).build();\n        if (accountData.getId().equals(uId))\n            return ResponseEntity.status(403).build();\n        if (contactService.addContact(accountData, contact))\n            return", "first_line_groundtruth": "return ResponseEntity.ok(service.findAll());", "first_line_prediction": " return ResponseEntity.ok(service.getAllAccountData());", "match": 0}
{"groundtruth": "text = URL.decodeParam(text);", "prediction": " Date min = URL.decodeDate(minDate);\n         Date max = URL.decodeDate(maxDate);\n         String decodingText = URL.decodeParam(text);\n         List<Post> list = postService.fullSearch(decodingText, min, max);\n         return ResponseEntity.ok().body(list);\n    }\n\n    @PostMapping\n    public ResponseEntity<Void> insert(@RequestBody Post obj){\n        obj = postService.insert(obj);\n        URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path(\"/{id}\").buildAndExpand(obj.getId()).toUri();\n        return ResponseEntity.created", "first_line_groundtruth": "text = URL.decodeParam(text);", "first_line_prediction": " Date min = URL.decodeDate(minDate);", "match": 0}
{"groundtruth": "= URL.convertDate(maxDate, new Date());", "prediction": " = URL.convertDate(maxDate, new Date(0L));\n        List<Post> list = postService.fullSearch(text, min, max);\n        return ResponseEntity.ok().body(list);\n    }\n\n    @PostMapping\n    public ResponseEntity<Post> save(@RequestBody Post obj){\n        Post objSaved = postService.save(obj);\n        return ResponseEntity.ok().body(objSaved);\n    }\n\n    @PutMapping\n    public ResponseEntity<Post> update(@RequestBody Post obj){\n        Post objUpdated = postService.update(obj);\n        return ResponseEntity.ok().body(objUpdated);\n    }\n\n   ", "first_line_groundtruth": "= URL.convertDate(maxDate, new Date());", "first_line_prediction": " = URL.convertDate(maxDate, new Date(0L));", "match": 0}
{"groundtruth": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));", "prediction": " post1.setComments(Arrays.asList(c1,c2));\n         post2.setComments(Arrays.asList(c3));\n\n        postRepository.saveAll(Arrays.asList(post1,post2));\n    }", "first_line_groundtruth": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));", "first_line_prediction": " post1.setComments(Arrays.asList(c1,c2));", "match": 0}
{"groundtruth": "return new User(objDTO.getId(), objDTO.getName(), objDTO.getEmail());", "prediction": " User obj = new User();\n         updateData(obj,objDTO);\n         return obj;\n    }", "first_line_groundtruth": "return new User(objDTO.getId(), objDTO.getName(), objDTO.getEmail());", "first_line_prediction": " User obj = new User();", "match": 0}
{"groundtruth": "messageHandler.destroySession(username);", "prediction": " messageHandler.destroySession(username);\n                 logger.info(\"{} left\", username);\n            });\n            ws.onMessage(ctx -> {\n                String username = userUsernameMap.get(ctx);\n                messageHandler.handleMessage(username, ctx, ctx.json());\n            });\n        });\n    }\n\n    private static String randomString() {\n        Random random = new Random();\n        return String.valueOf(random.nextInt(1000000000));\n    }", "first_line_groundtruth": "messageHandler.destroySession(username);", "first_line_prediction": " messageHandler.destroySession(username);", "match": 0}
{"groundtruth": "MethodStatistics(row.getCount()));", "prediction": " MethodStatistics(row.getCount(), row.getModifier()));\n            }\n        }\n        return stat;\n    }", "first_line_groundtruth": "MethodStatistics(row.getCount()));", "first_line_prediction": " MethodStatistics(row.getCount(), row.getModifier()));", "match": 0}
{"groundtruth": "maria.getPosts().addAll(Arrays.asList(post1,post2));", "prediction": "\n\n    }", "first_line_groundtruth": "maria.getPosts().addAll(Arrays.asList(post1,post2));", "first_line_prediction": "", "match": 0}
{"groundtruth": "row.getCount(), Modifier.CONSTRUCTOR));", "prediction": "row));\n            }\n        }\n        return stat;\n    }", "first_line_groundtruth": "row.getCount(), Modifier.CONSTRUCTOR));", "first_line_prediction": "row));", "match": 0}
{"groundtruth": "return this.modifiers.isInstanceOverridden();", "prediction": " return this.modifiers.isInstancePublicOverridden();\n    }\n\n    boolean isInstancePublic() {\n        return this.modifiers.isInstancePublic();\n    }\n\n    boolean isInstanceOverridden() {\n        return this.modifiers.isInstanceOverridden();\n    }\n\n    boolean isInstanceStatic() {\n        return this.modifiers.isInstanceStatic();\n    }\n\n    boolean isInstanceStaticPublic() {\n        return this.modifiers.isInstanceStaticPublic();\n    }\n\n    boolean isInstanceStaticPackagePrivate() {\n        return this.modifiers.isInstanceStaticPackagePrivate();\n    }\n\n    boolean isInstanceStaticPrivate() {\n        return this.", "first_line_groundtruth": "return this.modifiers.isInstanceOverridden();", "first_line_prediction": " return this.modifiers.isInstancePublicOverridden();", "match": 0}
{"groundtruth": "new GitHubMetrics(this.project.githubUrl())\n        ).cells();", "prediction": " new StatisticsCaseWithoutSources(title, csv, filters)\n        ).cells();\n    }", "first_line_groundtruth": "new GitHubMetrics(this.project.githubUrl())", "first_line_prediction": " new StatisticsCaseWithoutSources(title, csv, filters)", "match": 0}
{"groundtruth": "method -> !method.isConstructor())\n            .mapToLong(MethodStatistics::total)\n            .sum();", "prediction": "MethodStatistics::isMethod)\n             .mapToLong(MethodStatistics::total)\n             .sum();\n    }\n\n    private long constructors() {\n        return this.statistics.stream()\n             .filter(MethodStatistics::isConstructor)\n             .mapToLong(MethodStatistics::total)\n             .sum();\n    }", "first_line_groundtruth": "method -> !method.isConstructor())", "first_line_prediction": "MethodStatistics::isMethod)", "match": 0}
{"groundtruth": "(this.project.path())) {", "prediction": "(this.project.path())) {\n            return files.filter(Files::isRegularFile)\n                .filter(path -> path.toString().endsWith(\".java\"))\n                .map(path -> new ParsedClass(path))\n                .collect(Collectors.toMap(ParsedClass::name, parsed -> parsed));\n        } catch (final IOException ex) {\n            throw new IllegalStateException(\n                String.format(\n                    \"Some problems encountered while parsing files in the folder %s\",\n                    this.project.path()\n                ),\n                ex\n            );\n        }\n    }", "first_line_groundtruth": "(this.project.path())) {", "first_line_prediction": "(this.project.path())) {", "match": 1}
{"groundtruth": "obj.setId(id);", "prediction": " service.update(obj);\n             return ResponseEntity.noContent().build();\n    }\n\n    @DeleteMapping(value = \"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable String id){\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }", "first_line_groundtruth": "obj.setId(id);", "first_line_prediction": " service.update(obj);", "match": 0}
{"groundtruth": ".modifiers.isStaticPackagePrivate();", "prediction": ".modifiers.isStaticPackagePrivate();\n    }\n\n    boolean isStaticPublic() {\n        return this.modifiers.isStaticPublic();\n    }\n\n    boolean isStaticPrivate() {\n        return this.modifiers.isStaticPrivate();\n    }\n\n    boolean isInstanceOverridden() {\n        return this.modifiers.isInstanceOverridden();\n    }\n\n    boolean isInstancePublic() {\n        return this.modifiers.isInstancePublic();\n    }\n\n    boolean isConstructor() {\n        return this.modifiers.isConstructor();\n    }\n\n    boolean isNotFound() {\n        return this.modifiers.isNotFound();\n    }\n\n    Modifiers modifiers() {", "first_line_groundtruth": ".modifiers.isStaticPackagePrivate();", "first_line_prediction": ".modifiers.isStaticPackagePrivate();", "match": 1}
{"groundtruth": "modifiers.isInstancePackage();", "prediction": "modifiers.isInstancePackagePrivate();\n    }\n\n    boolean isInstancePublic() {\n        return this.modifiers.isInstancePublic();\n    }\n\n    boolean isInstanceOverridden() {\n        return this.modifiers.isInstanceOverridden();\n    }\n\n    boolean isInstancePublicOrOverridden() {\n        return this.modifiers.isInstancePublicOrOverridden();\n    }\n\n    boolean isInstancePublicOrOverriddenOrPrivate() {\n        return this.modifiers.isInstancePublicOrOverriddenOrPrivate();\n    }\n\n    boolean isInstancePublicOrOverriddenOrPrivateOrPackagePrivate() {\n        return this.modifiers.isInstancePublicOr", "first_line_groundtruth": "modifiers.isInstancePackage();", "first_line_prediction": "modifiers.isInstancePackagePrivate();", "match": 0}
{"groundtruth": "proxyServer.open();", "prediction": " proxyServer.start();\n        }\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        super.channelActive(ctx);\n        AttributeKey<CountDownLatch> attributeKey = AttributeKey.valueOf(ctx.channel().id().asLongText());\n        Attribute<CountDownLatch> attr = ctx.attr(attributeKey);\n        CountDownLatch latch = new CountDownLatch(1);\n        attr.set(latch);\n        ctx.writeAndFlush(new Frame(0x1, null, null));\n        System.out.println(\"write: \" + new Frame(0x1,", "first_line_groundtruth": "proxyServer.open();", "first_line_prediction": " proxyServer.start();", "match": 0}
{"groundtruth": "proxyClient.authSuccess();", "prediction": " Frame frame = new Frame(0x11, serviceKey, null);\n             ctx.writeAndFlush(frame);\n        } else if (opCode == 0x12) {\n            log.info(\"proxy disconnect server\");\n            close();\n        } else if (opCode == 0x13) {\n            log.info(\"proxy disconnect server success\");\n            Frame frame = new Frame(0x13, serviceKey, null);\n            ctx.writeAndFlush(frame);\n        } else if (opCode == 0x14) {\n            log.info(\"proxy disconnect server error\");", "first_line_groundtruth": "proxyClient.authSuccess();", "first_line_prediction": " Frame frame = new Frame(0x11, serviceKey, null);", "match": 0}
{"groundtruth": "proxyClient.shutdown();", "prediction": " proxyClient.shutdown();\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        super.channelActive(ctx);\n        proxyClient.setChannel1(ctx.channel());\n        proxyClient.setServiceKey(config.getServiceKey());\n        proxyClient.connect(config.getIp(), config.getPort());\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        super.channelInactive(ctx);\n        proxyClient.setChannel1(null);\n        proxyClient.setServiceKey(null);\n        proxyClient.disconnect();\n    }\n\n    @Override", "first_line_groundtruth": "proxyClient.shutdown();", "first_line_prediction": " proxyClient.shutdown();", "match": 0}
{"groundtruth": "proxyClient.updateHeatbeatTime();", "prediction": " Frame frame = new Frame(0x6, serviceKey, null);\n             ctx.writeAndFlush(frame);\n        } else if (opCode == 0x40) {\n            log.error(\"proxy send data error\");\n            close();\n        } else if (opCode == 0x41) {\n            log.info(\"proxy send data success\");\n            proxyClient.send(payload);\n        } else if (opCode == 0x42) {\n            log.info(\"proxy send data success\");\n            proxyClient.send(payload);\n        } else if (opCode == 0", "first_line_groundtruth": "proxyClient.updateHeatbeatTime();", "first_line_prediction": " Frame frame = new Frame(0x6, serviceKey, null);", "match": 0}
{"groundtruth": "().write(Json.parseToJson(this.body));", "prediction": "().write(this.json.toJson(this.body));\n        response.getWriter().close();\n    }", "first_line_groundtruth": "().write(Json.parseToJson(this.body));", "first_line_prediction": "().write(this.json.toJson(this.body));", "match": 0}
{"groundtruth": "ResponseEntity.ok().body(obj.getPosts());", "prediction": " ResponseEntity.ok().body(obj.getPosts());\n    }\n\n    @DeleteMapping(value = \"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable String id){\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }", "first_line_groundtruth": "ResponseEntity.ok().body(obj.getPosts());", "first_line_prediction": " ResponseEntity.ok().body(obj.getPosts());", "match": 0}
{"groundtruth": "message, status.getValue(), request.getRequestURI(), new Date())).build(response);", "prediction": "message, new Date())).build(response, ContentType.APPLICATION_JSON);\n    }", "first_line_groundtruth": "message, status.getValue(), request.getRequestURI(), new Date())).build(response);", "first_line_prediction": "message, new Date())).build(response, ContentType.APPLICATION_JSON);", "match": 0}
{"groundtruth": "= tenantRepository.findByTenantId(tenant).get();", "prediction": " = tenantRepository.findById(tenant).orElseThrow();\n            properties.put(AvailableSettings.DEFAULT_SCHEMA, dbTenant.getSchema());\n        }\n\n        emfBean.setJpaPropertyMap(properties);\n        emfBean.setDataSource(connectionProvider.getDataSource());\n        emfBean.setJpaVendorAdapter(vendorAdapter);\n        emfBean.setJpaPropertyMap(properties);\n        emfBean.setJpaPropertyMap(properties);\n        emfBean.setJpaPropertyMap(properties);\n        emfBean.setJpaPropertyMap(properties);\n        emfBean.setJpaPropertyMap(properties);", "first_line_groundtruth": "= tenantRepository.findByTenantId(tenant).get();", "first_line_prediction": " = tenantRepository.findById(tenant).orElseThrow();", "match": 0}
{"groundtruth": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);", "prediction": " // Create a new tenant\n        Tenant tenant = new Tenant();\n        tenant.setTenantId(tenantId);\n        tenant.setIsolationType(isolationType);\n        tenant.setDbOrSchema(dbOrSchema);\n        tenant.setUrl(url);\n        tenant.setUserName(userName);\n        tenant.setPassword(password);\n\n        // Create the tenant\n        tenantRepository.save(tenant);\n\n        // Create the tenant database\n        createTenantDatabase(tenantId, isolationType, dbOrSchema, userName, password);\n\n        // Create the tenant liquibase\n        createTenantLiquibase(tenantId, isolationType, dbOrSchema, userName,", "first_line_groundtruth": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);", "first_line_prediction": " // Create a new tenant", "match": 0}
{"groundtruth": "= masterTenantRepository.findByTenantId(key)\n                                .orElseThrow(() -> new RuntimeException(\"No such tenant: \" + key));", "prediction": " = masterTenantRepository.findByTenantId(key);\n                        if (tenant == null) {\n                            throw new RuntimeException(\"Tenant not found: \" + key);\n                        }\n                        DataSourceProperties properties = dataSourceProperties.clone();\n                        properties.setUrl(urlPrefix + tenant.getUrl());\n                        properties.setUsername(tenant.getDbOrSchema());\n                        properties.setPassword(encryptionService.decrypt(secret, salt, tenant.getPassword()));\n                        HikariDataSource dataSource = properties.initializeDataSourceBuilder()\n                                .type(HikariDataSource.class)\n                                .build();\n                        dataSource.setPoolName(key + TENANT_POOL_", "first_line_groundtruth": "= masterTenantRepository.findByTenantId(key)", "first_line_prediction": " = masterTenantRepository.findByTenantId(key);", "match": 0}
{"groundtruth": "String tenant = TenantContext.getTenantId();", "prediction": " // set the tenant identifier resolver\n        properties.put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, tenantResolver);\n\n        // set the multi-tenant connection provider\n        properties.put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, connectionProvider);\n\n        // set the tenant id\n        properties.put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER_CLASS,\n                \"com.github.wenqiglantz.service.customer.multitenancy.config.tenant.TenantMultiTenantConnectionProvider\");\n\n        // set the tenant id\n        properties.put(AvailableSettings.MULTI_TEN", "first_line_groundtruth": "String tenant = TenantContext.getTenantId();", "first_line_prediction": " // set the tenant identifier resolver", "match": 0}
{"groundtruth": "gpuTestCurlAnimView.flipSetToDefault();", "prediction": " gpuTestCurlAnimView.flipFinish();\n                        break;\n                }\n                return true;\n            }\n        });\n    }", "first_line_groundtruth": "gpuTestCurlAnimView.flipSetToDefault();", "first_line_prediction": " gpuTestCurlAnimView.flipFinish();", "match": 0}
{"groundtruth": "f.setXY(width, height);", "prediction": " f.setXY(0, 0);\n        }\n        g.setXY(width, height);\n        e.setXY(0, height);\n        h.setXY(width, 0);\n        c.setXY(0, 0);\n        j.setXY(width, height);\n        b.setXY(0, height);\n        k.setXY(width, 0);\n        d.setXY(0, 0);\n        i.setXY(width, height);\n        a.setXY(x, y);\n    }\n\n    @Override\n    protected void onDraw(Canvas", "first_line_groundtruth": "f.setXY(width, height);", "first_line_prediction": " f.setXY(0, 0);", "match": 0}
{"groundtruth": "animationEffecter.onScroll();", "prediction": " animationEffecter.computeScroll();\n        }\n    }\n\n    @Override\n    public void onViewSizeChanged(int width, int height) {\n        vWidth = width;\n        vHeight = height;\n        if (null != animationEffecter) {\n            animationEffecter.onViewSizeChanged(vWidth, vHeight);\n        }\n    }\n\n    @Override\n    public void onViewAttachedToWindow() {\n        if (null != animationEffecter) {\n            animationEffecter.onViewAttachedToWindow();\n        }\n    }\n\n    @Override\n    public void onViewDetachedFromWindow() {\n        if (null != animation", "first_line_groundtruth": "animationEffecter.onScroll();", "first_line_prediction": " animationEffecter.computeScroll();", "match": 0}
{"groundtruth": "return animationEffecter.animInEffect();", "prediction": " return animationEffecter.animRunning();\n        }\n        return false;\n    }\n\n    @Override\n    public void setPreviousBitmap(Bitmap previousViewBitmap) {\n        this.previousViewBitmap = previousViewBitmap;\n    }\n\n    @Override\n    public void setCurrentBitmap(Bitmap currentViewBitmap) {\n        this.currentViewBitmap = currentViewBitmap;\n    }\n\n    @Override\n    public void setNextBitmap(Bitmap nextViewBitmap) {\n        this.nextViewBitmap = nextViewBitmap;\n    }\n\n    @Override\n    public void setCurlTexture(boolean performDrawCurlTexture) {\n        this.performDrawCurlTexture = perform", "first_line_groundtruth": "return animationEffecter.animInEffect();", "first_line_prediction": " return animationEffecter.animRunning();", "match": 0}
{"groundtruth": "f.setXY(0, 0);", "prediction": " f.setXY(width, height);\n    }\n\n    public void flipSetTo(float x, float y) {\n        a.setXY(x, y);\n        f.setXY(width, height);\n    }\n\n    public void flipSetTo(FPoint f) {\n        a.setXY(f.x, f.y);\n        f.setXY(width, height);\n    }\n\n    public void flipSetTo(FPoint a, FPoint f) {\n        this.a.setXY(a.x, a.y);\n        this.f.setXY(f.x", "first_line_groundtruth": "f.setXY(0, 0);", "first_line_prediction": " f.setXY(width, height);", "match": 0}
{"groundtruth": "readAnimView.buildBitmap(coverSlideDirection);", "prediction": " touchDown(downArea, coverSlideDirection);\n                }\n                if (coverSlideDirection != AnimHelper.SLID_DIRECTION_UNKNOWN) {\n                    if (curDistance > 0) {\n                        touchMove(x, y, coverSlideDirection, true, false);\n                    } else {\n                        touchMove(x, y, coverSlideDirection, false, true);\n                    }\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n                isTouching = false;\n                if (coverSlideDirection != AnimHelper.SLID_DIRECTION_UNKNOWN) {\n                    if (coverSlideDirection == AnimHelper.SL", "first_line_groundtruth": "readAnimView.buildBitmap(coverSlideDirection);", "first_line_prediction": " touchDown(downArea, coverSlideDirection);", "match": 0}
{"groundtruth": "animationEffecter.onViewAttachedToWindow();", "prediction": " animationEffecter.onAttachedToWindow();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        super.onDetachedFromWindow();\n        if (null != animationEffecter) {\n            animationEffecter.onDetachedFromWindow();\n        }\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        vWidth = MeasureSpec.getSize(widthMeasureSpec);\n        vHeight = MeasureSpec.getSize(heightMeasureSpec);\n    }\n\n    @Override\n    protected void onSizeChanged", "first_line_groundtruth": "animationEffecter.onViewAttachedToWindow();", "first_line_prediction": " animationEffecter.onAttachedToWindow();", "match": 0}
{"groundtruth": "f.setXY(width, 0);", "prediction": " //\u4e0a\u534a\u90e8\u5206\n            a.setXY(x, y);\n            f.setXY(x, y);\n            g.setXY(x, y);\n            e.setXY(x, y);\n            h.setXY(x, y);\n            c.setXY(x, y);\n            j.setXY(x, y);\n            b.setXY(x, y);\n            k.setXY(x, y);\n            d.setXY(x, y);\n            i.setXY(x, y);\n        } else {\n            //\u4e0b\u534a\u90e8\u5206\n            a.setXY", "first_line_groundtruth": "f.setXY(width, 0);", "first_line_prediction": " //\u4e0a\u534a\u90e8\u5206", "match": 0}
{"groundtruth": "a.setXY(-1, -1);", "prediction": " //\u521d\u59cb\u5316\u56fe\u5f62\n        initPath();\n    }\n\n    private void initPath() {\n        //\u521d\u59cb\u5316\u56fe\u5f62\n        pointPaint = new Paint();\n        pointPaint.setAntiAlias(true);\n        pointPaint.setColor(Color.RED);\n        pointPaint.setStrokeWidth(10);\n\n        a = new FPoint(0, 0);\n        f = new FPoint(0, 0);\n        g = new FPoint(0, 0);\n        e = new FPoint(0, 0);\n        h = new FPoint(0, 0);\n        c = new FPoint(0", "first_line_groundtruth": "a.setXY(-1, -1);", "first_line_prediction": " //\u521d\u59cb\u5316\u56fe\u5f62", "match": 0}
{"groundtruth": "animationEffecter.onViewSizeChanged(vWidth, vHeight);", "prediction": " animationEffecter.onViewAttachedToWindow();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        super.onDetachedFromWindow();\n        if (null != animationEffecter) {\n            animationEffecter.onViewDetachedFromWindow();\n        }\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        vWidth = MeasureSpec.getSize(widthMeasureSpec);\n        vHeight = MeasureSpec.getSize(heightMeasureSpec);\n    }\n\n    @Override\n    protected void on", "first_line_groundtruth": "animationEffecter.onViewSizeChanged(vWidth, vHeight);", "first_line_prediction": " animationEffecter.onViewAttachedToWindow();", "match": 0}
{"groundtruth": "int i = mRetrofitUrlManager.getPathSize();", "prediction": "int i = mRetrofitUrlManager.getPathSize(); i < encodedPathSegments.size(); i++) {\n                    newPathSegments.add(encodedPathSegments.get(i));\n                }\n            }\n\n            builder.encodedPath(TextUtils.join(\"/\", newPathSegments));\n            mCache.put(getKey(domainUrl, url), builder.build().encodedPath());\n        }\n        HttpUrl httpUrl = builder\n                .scheme(domainUrl.scheme())\n                .host(domainUrl.host())\n                .port(domainUrl.port())\n                .build();\n        return httpUrl;\n    }\n\n    private String getKey(", "first_line_groundtruth": "int i = mRetrofitUrlManager.getPathSize();", "first_line_prediction": "int i = mRetrofitUrlManager.getPathSize(); i < encodedPathSegments.size(); i++) {", "match": 0}
{"groundtruth": "(readAnimView.getPreviousBitmap(), -leftOffset, 0, paint);", "prediction": "(readAnimView.getPreviousBitmap(), leftOffset, 0, paint);\n            canvas.restore();\n            canvas.save();\n            canvas.clipPath(getPathB());\n            canvas.drawBitmap(readAnimView.getCurrentBitmap(), 0, 0, paint);\n            canvas.restore();\n            drawShadow((int) leftOffset, canvas);\n        }\n    }\n\n    private void drawShadow(int offset, Canvas canvas) {\n        if (offset > 0) {\n            canvas.save();\n            canvas.clipPath(getPathAToLeft());\n            canvas.drawBitmap(readAnimView.getPreviousBitmap", "first_line_groundtruth": "(readAnimView.getPreviousBitmap(), -leftOffset, 0, paint);", "first_line_prediction": "(readAnimView.getPreviousBitmap(), leftOffset, 0, paint);", "match": 0}
{"groundtruth": "+ mRetrofitUrlManager.getPathSize();", "prediction": " + domainUrl.query() + url.query();\n    }", "first_line_groundtruth": "+ mRetrofitUrlManager.getPathSize();", "first_line_prediction": " + domainUrl.query() + url.query();", "match": 0}
{"groundtruth": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && (null != readAnimView.getNextBitmap() && null != readAnimView.getCurrentBitmap())) {", "prediction": " (slideDirection == AnimHelper.SLID_DIRECTION_LEFT) {\n            return readAnimView.getCurrentBitmap() != null && readAnimView.getNextBitmap() != null;\n        } else if (slideDirection == AnimHelper.SLID_DIRECTION_RIGHT) {\n            return readAnimView.getPreviousBitmap() != null;\n        }\n        return false;\n    }", "first_line_groundtruth": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && (null != readAnimView.getNextBitmap() && null != readAnimView.getCurrentBitmap())) {", "first_line_prediction": " (slideDirection == AnimHelper.SLID_DIRECTION_LEFT) {", "match": 0}
{"groundtruth": "+ mRetrofitUrlManager.getBaseUrl().host()\n                                + mRetrofitUrlManager.getBaseUrl().encodedPath()));", "prediction": " + mRetrofitUrlManager.getBaseUrl().host() + mRetrofitUrlManager.getBaseUrl().encodedPath()));\n            }\n\n            builder.encodedPathSegments(newPathSegments);\n            mCache.put(getKey(domainUrl, url), builder.build().toString());\n        }\n\n        return builder.build();\n    }\n\n    private String getKey(HttpUrl domainUrl, HttpUrl url) {\n        return domainUrl.toString() + url.toString();\n    }", "first_line_groundtruth": "+ mRetrofitUrlManager.getBaseUrl().host()", "first_line_prediction": " + mRetrofitUrlManager.getBaseUrl().host() + mRetrofitUrlManager.getBaseUrl().encodedPath()));", "match": 0}
{"groundtruth": "() > mRetrofitUrlManager.getPathSize()) {", "prediction": "() > newPathSegments.size()) {\n                List<String> encodedPathSegments = url.encodedPathSegments();\n                for (int i = newPathSegments.size(); i < encodedPathSegments.size(); i++) {\n                    newPathSegments.add(encodedPathSegments.get(i));\n                }\n            }\n            builder.encodedPathSegments(newPathSegments);\n            mCache.put(getKey(domainUrl, url), builder.build().encodedPath());\n        }\n        return builder.build();\n    }\n\n    private String getKey(HttpUrl domainUrl, HttpUrl url) {\n        return domainUrl.encoded", "first_line_groundtruth": "() > mRetrofitUrlManager.getPathSize()) {", "first_line_prediction": "() > newPathSegments.size()) {", "match": 0}
{"groundtruth": "drawable = readAnimView.getAnimHelper().getCoverGradientDrawable();", "prediction": " drawable = new GradientDrawable();\n        drawable.setShape(GradientDrawable.RECTANGLE);\n        drawable.setGradientType(GradientDrawable.LINEAR_GRADIENT);\n        drawable.setGradientRadius(10);\n        drawable.setGradientColors(new int[]{Color.parseColor(\"#000000\"), Color.parseColor(\"#000000\")});\n        drawable.setGradientCenter(0, 0);\n        drawable.setGradientAngle(90);\n        drawable.setGradientCenter(0, 0);\n        drawable.setGradientType(GradientDrawable.LINEAR_GRADIENT);\n       ", "first_line_groundtruth": "drawable = readAnimView.getAnimHelper().getCoverGradientDrawable();", "first_line_prediction": " drawable = new GradientDrawable();", "match": 0}
{"groundtruth": "DLog.log(\"touchUp coverAnimationRunning=%s\", coverAnimationRunning);", "prediction": " if (lastFingerLeftSlop) {\n             if (coverSlideDirection == AnimHelper.SLID_DIRECTION_LEFT) {\n                 readAnimView.onClickNextPage();\n             } else {\n                 readAnimView.onClickPrePage();\n             }\n         } else {\n             if (coverSlideDirection == AnimHelper.SLID_DIRECTION_LEFT) {\n                 readAnimView.onClickPrePage();\n             } else {\n                 readAnimView.onClickNextPage();\n             }\n         }\n         coverAnimationRunning = false;\n         isCancelFlip = false;\n         isTouching = false;\n         currentX = -1;", "first_line_groundtruth": "DLog.log(\"touchUp coverAnimationRunning=%s\", coverAnimationRunning);", "first_line_prediction": " if (lastFingerLeftSlop) {", "match": 0}
{"groundtruth": "readLayoutManger.getBookFlipMode();", "prediction": " readLayoutManger.getBookFlipMode();\n    }\n\n    @Override\n    public void onForceLayoutCompleted(int position) {\n        currentPosition = position;\n        if (null != onPositionChangedListener) {\n            onPositionChangedListener.onChanged(position == getAdapter().getItemCount() - 1, position);\n        }\n    }\n\n    @Override\n    public void onScrollStop() {\n        if (null != onPositionChangedListener) {\n            onPositionChangedListener.onChanged(currentPosition == getAdapter().getItemCount() - 1, currentPosition);\n        }\n    }\n\n    @Override\n    public void", "first_line_groundtruth": "readLayoutManger.getBookFlipMode();", "first_line_prediction": " readLayoutManger.getBookFlipMode();", "match": 0}
{"groundtruth": "readLayoutManger.setonStopScroller(new ItemOnScrollStop());", "prediction": " /*\n            \u5173\u95ed\u786c\u4ef6\u52a0\u901f \u5361\u5230", "first_line_groundtruth": "readLayoutManger.setonStopScroller(new ItemOnScrollStop());", "first_line_prediction": " /*", "match": 0}
{"groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 10);", "prediction": " if (finallyMoveX < 10) {\n                             touchUp(true);\n                         }\n                    } else if (lastMoveX - downX > 0) {//\u53f3\u6ed1\n                        if (finallyMoveX < 10) {\n                            touchUp(false);\n                        }\n                    }\n                }\n                break;\n        }\n        return super.onTouchEvent(e);\n    }\n\n    private void touchUp(boolean isLeft) {\n        if (null != eventProxyWeakReference) {\n            EventProxy ic = eventProxyWeakReference.get();\n            if (null != ic) {\n                ic.onTouchUp(is", "first_line_groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 10);", "first_line_prediction": " if (finallyMoveX < 10) {", "match": 0}
{"groundtruth": "readLayoutManger.onRecyclerViewSizeChange();", "prediction": " readLayoutManger.onSizeChanged(w, h, oldw, oldh);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        if (allowInterceptTouchEvent) {\n            return super.onTouchEvent(ev);\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n        if (allowInterceptTouchEvent) {\n            return super.onInterceptTouchEvent(ev);\n        }\n        return false;\n    }\n\n    @Override\n    public void onScrollStateChanged(int state) {\n        super.onScrollStateChanged(", "first_line_groundtruth": "readLayoutManger.onRecyclerViewSizeChange();", "first_line_prediction": " readLayoutManger.onSizeChanged(w, h, oldw, oldh);", "match": 0}
{"groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 0);", "prediction": " readLayoutManger.setAutoRightScroll(finallyMoveX < 10);\n                    }\n                }\n                break;\n        }\n        return super.onTouchEvent(e);\n    }\n\n    @Override\n    public void onInterceptTouchEvent(boolean intercept) {\n        allowInterceptTouchEvent = intercept;\n    }\n\n    @Override\n    public void onScrollStateChanged(int state) {\n        super.onScrollStateChanged(state);\n        if (state == SCROLL_STATE_IDLE) {\n            if (null != eventProxyWeakReference) {\n                eventProxyWeakReference.get().onStopScroll();\n            }\n        }\n    }", "first_line_groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 0);", "first_line_prediction": " readLayoutManger.setAutoRightScroll(finallyMoveX < 10);", "match": 0}
{"groundtruth": "readLayoutManger.setBookFlipMode(flipMode);", "prediction": " readLayoutManger.setFlipMode(flipMode);\n    }\n\n    @Override\n    public void onScrollStateChanged(int state) {\n        super.onScrollStateChanged(state);\n        if (state == SCROLL_STATE_IDLE) {\n            if (null != onPositionChangedListener) {\n                onPositionChangedListener.onPositionChanged(currentPosition);\n            }\n        }\n    }\n\n    @Override\n    public void onScroll(int dx, int dy) {\n        super.onScroll(dx, dy);\n        if (null != onPositionChangedListener) {\n            onPositionChangedListener.onPositionChanged(current", "first_line_groundtruth": "readLayoutManger.setBookFlipMode(flipMode);", "first_line_prediction": " readLayoutManger.setFlipMode(flipMode);", "match": 0}
{"groundtruth": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");", "prediction": " Food AmericanFoodA = AmericanFoodFactory.produce(\"A\");\n         AmericanFoodA.food();\n         //\u751f\u4ea7\u7f8e\u56fdB\u7c7b\u98df\u7269\n         Food AmericanFoodB = AmericanFoodFactory.produce(\"B\");\n         AmericanFoodB.food();\n    }", "first_line_groundtruth": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");", "first_line_prediction": " Food AmericanFoodA = AmericanFoodFactory.produce(\"A\");", "match": 0}
{"groundtruth": "DLog.log(\"coverAnimationRunning coverAnimationRunning=%s \u7ed3\u675f\uff0c\u5ef6\u65f6\u5f00\u542f \u72b6\u6001\u91cd\u7f6e\", coverAnimationRunning);", "prediction": " readAnimView.postDelayed(scrollRunnable, 100);\n            }\n            currentX = x;\n            invalidate();\n        }\n    }\n\n    @Override\n    public void onFling() {\n        if (scroller.computeScrollOffset()) {\n            int x = scroller.getCurrX();\n            int y = scroller.getCurrY();\n            if (x == scroller.getFinalX() && y == scroller.getFinalY()) {\n                scroller.forceFinished(true);\n                readAnimView.postDelayed(scrollRunnable, 100);\n            }\n            currentX =", "first_line_groundtruth": "DLog.log(\"coverAnimationRunning coverAnimationRunning=%s \u7ed3\u675f\uff0c\u5ef6\u65f6\u5f00\u542f \u72b6\u6001\u91cd\u7f6e\", coverAnimationRunning);", "first_line_prediction": " readAnimView.postDelayed(scrollRunnable, 100);", "match": 0}
{"groundtruth": "readLayoutManger.forceScrollToPosition(position);", "prediction": " scrollToPosition(position, false);\n    }\n\n    @Override\n    public void scrollToPosition(int position, boolean smoothScroll) {\n        if (position > -1 && position < getItemCount()) {\n            currentPosition = position;\n            readLayoutManger.scrollToPosition(position, smoothScroll);\n        }\n    }\n\n    @Override\n    public void smoothScrollToPosition(int position) {\n        scrollToPosition(position, true);\n    }\n\n    @Override\n    public void smoothScrollToPosition(int position, int offset) {\n        scrollToPosition(position, true);\n    }\n\n    @Override\n    public void smooth", "first_line_groundtruth": "readLayoutManger.forceScrollToPosition(position);", "first_line_prediction": " scrollToPosition(position, false);", "match": 0}
{"groundtruth": "readLayoutManger.setOnForceLayoutCompleted(new ItemOnForceLayoutCompleted());", "prediction": " /*\n            \u5173\u95ed\u786c\u4ef6\u52a0\u901f \u5361\u5230", "first_line_groundtruth": "readLayoutManger.setOnForceLayoutCompleted(new ItemOnForceLayoutCompleted());", "first_line_prediction": " /*", "match": 0}
{"groundtruth": "= AmericanFoodFactory.produce(\"A\");", "prediction": " = AmericanFoodFactory.produce(\"B\");\n        americanFoodB.food();\n    }", "first_line_groundtruth": "= AmericanFoodFactory.produce(\"A\");", "first_line_prediction": " = AmericanFoodFactory.produce(\"B\");", "match": 0}
{"groundtruth": ").animRunning();", "prediction": " ).animRunning();\n        }\n        return false;\n    }\n\n    @Override\n    public void onItemViewTouchEvent(MotionEvent event, int position) {\n        if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {\n            eventProxyWeakReference.get().onItemViewTouchEvent(event, position);\n        }\n    }\n\n    @Override\n    public void onItemViewTouchEvent(MotionEvent event, int position, View view) {\n        if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {\n            eventProxyWeakReference.get().onItemView", "first_line_groundtruth": ").animRunning();", "first_line_prediction": " ).animRunning();", "match": 0}
{"groundtruth": "animParentView.onClickMenuArea();", "prediction": " if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {\n            eventProxyWeakReference.get().onClickMenu();\n         }\n    }\n\n    @Override\n    public void onItemViewClick(View view, int position) {\n        if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {\n            eventProxyWeakReference.get().onItemViewClick(view, position);\n        }\n    }\n\n    @Override\n    public void onItemViewLongClick(View view, int position) {\n        if (null != eventProxyWeakReference && null != eventProxyWeakReference", "first_line_groundtruth": "animParentView.onClickMenuArea();", "first_line_prediction": " if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {", "match": 0}
{"groundtruth": "PlayingSessionInformation.isOnNetwork()) {", "prediction": "client.world.isClient && PlayingSessionInformation.isOnServer()) {\n            if(keybinding.isPressed()) {\n                client.execute(() -> client.interactionManager.clickButton(client.player.currentScreenHandler, 0, 0, 0));\n            }\n        }\n    }", "first_line_groundtruth": "PlayingSessionInformation.isOnNetwork()) {", "first_line_prediction": "client.world.isClient && PlayingSessionInformation.isOnServer()) {", "match": 0}
{"groundtruth": "!XenyriaConfigManager.getConfig().improvedShootingDetectionForPaintSquad) {", "prediction": "XenyriaConfigManager.getConfig().enablePaintSquadInput) {\n                    // Check if the player is in PaintSquad's swim form\n                    boolean isSwimming = isInSwimForm();\n                    // Check if the player is shooting\n                    boolean isShooting = isPlayerShooting();\n                    // Check if the player is in the PaintSquad's swim form and is shooting\n                    boolean isSwimmingAndShooting = isSwimming && isShooting;\n                    // Check if the player is shooting and the player is in the PaintSquad's swim form\n                    boolean isShooting", "first_line_groundtruth": "!XenyriaConfigManager.getConfig().improvedShootingDetectionForPaintSquad) {", "first_line_prediction": "XenyriaConfigManager.getConfig().enablePaintSquadInput) {", "match": 0}
{"groundtruth": "DLog.log(\"CoverAnimationEffect draw 1\");", "prediction": " return;\n        }\n        if (coverAnimationRunning) {\n            scroller.computeScrollOffset();\n            if (scroller.computeScrollOffset()) {\n                int x = scroller.getCurrX();\n                int y = scroller.getCurrY();\n                readAnimView.buildBitmap(coverSlideDirection);\n                readAnimView.drawBitmap(canvas, x, y);\n                invalidate();\n            } else {\n                coverAnimationRunning = false;\n                readAnimView.buildBitmap(coverSlideDirection);\n                readAnimView.drawBitmap(canvas, 0, 0);\n                invalidate();\n            }\n        }", "first_line_groundtruth": "DLog.log(\"CoverAnimationEffect draw 1\");", "first_line_prediction": " return;", "match": 0}
{"groundtruth": "configData = config.toJSON().toString(4);", "prediction": " jsonString = config.save();\n        try(FileWriter writer = new FileWriter(configFile)) {\n            writer.write(jsonString);\n        }\n    }\n\n    public static void setupConfigScreen(ConfigBuilder builder) {\n        builder.setParentScreen(null);\n        builder.setTitle(Text.of(\"Xenyria EEM\"));\n        builder.setSavingRunnable(() -> {\n            try {\n                saveConfig();\n            } catch (IOException | IllegalStateException exception) {\n                LOGGER.error(\"Couldn't save the config file for Xenyria EEM: \" + exception.getMessage());\n            }\n        });\n\n        ConfigCategory category = builder", "first_line_groundtruth": "configData = config.toJSON().toString(4);", "first_line_prediction": " jsonString = config.save();", "match": 0}
{"groundtruth": "discordActivityAccess.start(applicationId);", "prediction": " // Initialize the activity access with the new ID\n                        discordActivityAccess.initialize();\n                    }\n\n                    // Update the activity\n                    discordActivityAccess.updateActivity(richPresenceData);\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Failed to update rich presence: \" + e.getMessage());\n            }\n        }, 0, UPDATE_INTERVAL, TimeUnit.MILLISECONDS);\n    }", "first_line_groundtruth": "discordActivityAccess.start(applicationId);", "first_line_prediction": " // Initialize the activity access with the new ID", "match": 0}
{"groundtruth": "!XenyriaConfigManager.getConfig().shareServerActivity) {", "prediction": "XenyriaConfigManager.getConfig().enableDiscordRichPresence) {\n                        richPresenceData = loadDefaultRichPresenceData();\n                    }\n\n                    // If the rich presence data is different from the last one we sent\n                    // we'll send it to the API.\n                    if (richPresenceData != null && !richPresenceData.equals(lastReceivedRichPresence)) {\n                        LOGGER.info(\"Sending rich presence data to the API...\");\n                        discordActivityAccess.updateActivity(richPresenceData);\n                    }\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Failed to update rich presence: \" + e.getMessage());", "first_line_groundtruth": "!XenyriaConfigManager.getConfig().shareServerActivity) {", "first_line_prediction": "XenyriaConfigManager.getConfig().enableDiscordRichPresence) {", "match": 0}
{"groundtruth": "PlayingSessionInformation.setOnNetwork(true);", "prediction": " // If the server is a dedicated server we send a mod packet to the server\n                         if(EXenyriaServerType.isDedicatedServer()) {\n                             JSONObject payload = new JSONObject();\n                             payload.put(\"server_id\", instanceId);\n                             XenyriaServerPacket packet = new XenyriaServerPacket(\n                                     XenyriaServerPacket.EPacketType.PS_SERVER_ID, payload);\n                             packet.sendToServer();\n                         }\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.PS_SHOOTING_STATE) {\n                        // If the server is", "first_line_groundtruth": "PlayingSessionInformation.setOnNetwork(true);", "first_line_prediction": " // If the server is a dedicated server we send a mod packet to the server", "match": 0}
{"groundtruth": "discordActivityAccess.stop();", "prediction": " // Stop the current activity access\n                        discordActivityAccess.stopActivity();\n                        // Start a new activity access with the new ID\n                        discordActivityAccess.initialize();\n                    }\n\n                    // Update the activity\n                    discordActivityAccess.updateActivity(richPresenceData);\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Failed to update rich presence: \" + e.getMessage());\n            }\n        }, 0, UPDATE_INTERVAL, TimeUnit.MILLISECONDS);\n    }", "first_line_groundtruth": "discordActivityAccess.stop();", "first_line_prediction": " // Stop the current activity access", "match": 0}
{"groundtruth": "String instanceId = packet.getData().getString(\"server_id\");", "prediction": " // We store this ID in the PlayingSessionInformation class\n                         PlayingSessionInformation.setServerId(packet.getData().getString(\"serverId\"));\n                         // And we send a handshake response packet to the server\n                         JSONObject payload = new JSONObject();\n                         payload.put(\"serverId\", PlayingSessionInformation.getServerId());\n                         XenyriaServerPacket response = new XenyriaServerPacket(\n                                 XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE, payload);\n                         response.sendToServer();\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.", "first_line_groundtruth": "String instanceId = packet.getData().getString(\"server_id\");", "first_line_prediction": " // We store this ID in the PlayingSessionInformation class", "match": 0}
{"groundtruth": "EXenyriaServerType.determineServerType(instanceId)\n                        );", "prediction": " EXenyriaServerType.fromServerId(instanceId));\n                    }\n                });\n    }", "first_line_groundtruth": "EXenyriaServerType.determineServerType(instanceId)", "first_line_prediction": " EXenyriaServerType.fromServerId(instanceId));", "match": 0}
{"groundtruth": "setLastReceivedRichPresence(packet.getData());", "prediction": "updateRichPresence(packet.getData());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.PS) {\n                        // If playing session information is disabled in the settings we ignore this packet\n                        if (!XenyriaConfigManager.getConfig().enablePlayingSessionInformation) {\n                            return;\n                        }\n                        PlayingSessionInformation.updatePlayingSessionInformation(packet.getData());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.PS_SHOOTING_STATE) {\n                        // If shooting state is disabled in the settings we", "first_line_groundtruth": "setLastReceivedRichPresence(packet.getData());", "first_line_prediction": "updateRichPresence(packet.getData());", "match": 0}
{"groundtruth": "\"Current server id: \" + PlayingSessionInformation.getServerInstanceId());", "prediction": "packet.getData().toString());\n                    } else {\n                        LOGGER.warning(\"Unknown packet type: \" + packet.getPacketType());\n                    }\n                }\n        );\n    }", "first_line_groundtruth": "\"Current server id: \" + PlayingSessionInformation.getServerInstanceId());", "first_line_prediction": "packet.getData().toString());", "match": 0}
{"groundtruth": "responsePacket.sendToServer();", "prediction": " responsePacket.sendToServer();\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.PS_SHOOTING_STATE) {\n                        // Orion sends one mod packet on login\n                        // This packet contains the current shooting state\n                        boolean isShooting = packet.getData().getBoolean(\"shooting\");\n                        PlayingSessionInformation.setShooting(isShooting);\n                    } else {\n                        LOGGER.warning(\"Unknown packet type: \" + packet.getPacketType());\n                    }\n                }\n        );\n    }", "first_line_groundtruth": "responsePacket.sendToServer();", "first_line_prediction": " responsePacket.sendToServer();", "match": 0}
{"groundtruth": "XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);", "prediction": " JSONObject jsonData = new JSONObject(rawJsonText);\n                     if(jsonData.has(\"type\")) {\n                         EPacketType parsedPacketType;\n                         try {\n                             parsedPacketType = EPacketType.valueOf(jsonData.getString(\"type\").toUpperCase());\n                         } catch (IllegalArgumentException exception) {\n                             LOGGER.severe(\"Malformed packet, unknown type value: \" + jsonData.getString(\"type\"));\n                             return;\n                         }\n                         switch(parsedPacketType) {\n                             case PLAYING_SESSION_INFORMATION:\n                                 // The packet is a PlayingSessionInformation packet\n                                 // Send the packet to the PlayingSessionInformation", "first_line_groundtruth": "XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);", "first_line_prediction": " JSONObject jsonData = new JSONObject(rawJsonText);", "match": 0}
{"groundtruth": "(\"Current network state: \" + PlayingSessionInformation.isOnNetwork());", "prediction": "(\"Received debug packet: \" + packet.getData().toString());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.PS_SHOOTING_STATE) {\n                        // If the packet is a shooting state packet we update the shooting state\n                        boolean isShooting = packet.getData().getBoolean(\"shooting\");\n                        PlayingSessionInformation.setShooting(isShooting);\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.PS_SHOOTING_STATE_UPDATE) {\n                        // If the packet", "first_line_groundtruth": "(\"Current network state: \" + PlayingSessionInformation.isOnNetwork());", "first_line_prediction": "(\"Received debug packet: \" + packet.getData().toString());", "match": 0}
{"groundtruth": "XenyriaConfigManager.getConfig().enableDiscordRichPresence) {", "prediction": "XenyriaConfigManager.getInstance().isRichPresenceEnabled()) {\n                            return;\n                        }\n\n                        // If the server is not running on Xennyria, we ignore this packet\n                        if (EXenyriaServerType.get() != EXenyriaServerType.XENNYRIA) {\n                            return;\n                        }\n\n                        // If the server is running on Xennyria, we send the rich presence packet to Discord\n                        DiscordRichPresenceIntegration.sendRichPresence(packet.getData());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.PS_SHOOT", "first_line_groundtruth": "XenyriaConfigManager.getConfig().enableDiscordRichPresence) {", "first_line_prediction": "XenyriaConfigManager.getInstance().isRichPresenceEnabled()) {", "match": 0}
{"groundtruth": "PlayingSessionInformation.setServerInstanceId(instanceId);", "prediction": " // If the server ID is not the same as the one we're currently connected to\n                         // we disconnect and reconnect to the new server\n                        if (!instanceId.equals(PlayingSessionInformation.getInstance().getServerId())) {\n                            LOGGER.info(\"Server ID changed from \" + PlayingSessionInformation.getInstance().getServerId() + \" to \" + instanceId + \". Disconnecting and reconnecting...\");\n                            PlayingSessionInformation.getInstance().disconnect();\n                            PlayingSessionInformation.getInstance().connectToServer(EXenyriaServerType.fromId(instanceId));\n                        }\n                    } else if (packet.getPacketType() == Xeny", "first_line_groundtruth": "PlayingSessionInformation.setServerInstanceId(instanceId);", "first_line_prediction": " // If the server ID is not the same as the one we're currently connected to", "match": 0}
{"groundtruth": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.DEBUG) {", "prediction": " else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE) {\n                        // Orion sends one mod handshake packet on login\n                        // This packet contains the current server ID\n                        String instanceId = packet.getData().getString(\"server_id\");\n                        PlayingSessionInformation.setServerInstanceId(instanceId);\n                        PlayingSessionInformation.setOnNetwork(true);\n                        PlayingSessionInformation.setCurrentServerType(\n                                EXenyriaServerType.determineServerType(instanceId)\n                        );\n                        LOGGER.info(\"Successfully completed handshake with Orion\");\n                    } else if (packet", "first_line_groundtruth": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.DEBUG) {", "first_line_prediction": " else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE) {", "match": 0}
{"groundtruth": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {", "prediction": " (packet.packetType == XenyriaServerPacket.EPacketType.PS_SESSION_INFORMATION) {\n                        PlayingSessionInformation sessionInformation = packet.data.getJSONObject(\"sessionInformation\");\n                        XenyriaConfigManager.setSessionInformation(sessionInformation);\n                        DiscordRichPresenceIntegration.updateRichPresence();\n                    } else if (packet.packetType == XenyriaServerPacket.EPacketType.PS_SERVER_TYPE) {\n                        EXenyriaServerType serverType = EXenyriaServerType.valueOf(packet.data.getString(\"serverType\").toUpperCase());\n                        XenyriaConfigManager.setServer", "first_line_groundtruth": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {", "first_line_prediction": " (packet.packetType == XenyriaServerPacket.EPacketType.PS_SESSION_INFORMATION) {", "match": 0}
{"groundtruth": ".lexer.lex(markdown)).visit(compiler);", "prediction": ".lexer.lex(markdown));\n\n        return compiler.compile();\n    }\n\n    public R process(Text markdown) {\n        var compiler = this.compilerFactory.get();\n\n        this.parser.parse(this.lexer.lex(markdown));\n\n        return compiler.compile();\n    }\n\n    public R process(List<Text> markdown) {\n        var compiler = this.compilerFactory.get();\n\n        this.parser.parse(this.lexer.lex(markdown));\n\n        return compiler.compile();\n    }\n\n    public R process(List<String> markdown) {\n        var compiler = this.compilerFactory.get();\n\n       ", "first_line_groundtruth": ".lexer.lex(markdown)).visit(compiler);", "first_line_prediction": ".lexer.lex(markdown));", "match": 0}
{"groundtruth": "+ feature.name() + \"' is incompatible with compiler '\" + testCompiler.name() + \"'\");", "prediction": " + feature.name() + \"' does not support compiler '\" + testCompiler.name() + \"'\");\n            }\n        }\n\n        this.lexer = new Lexer(this.features);\n        this.parser = new Parser(this.features);\n    }\n\n    public static <R> MarkdownProcessor<R> create(Supplier<MarkdownCompiler<R>> compilerFactory) {\n        return new MarkdownProcessor<>(compilerFactory);\n    }\n\n    public static <R> MarkdownProcessor<R> create(Supplier<MarkdownCompiler<R>> compilerFactory, MarkdownFeature... features) {\n        return new MarkdownProcessor<>(compilerFactory, features);\n    }", "first_line_groundtruth": "+ feature.name() + \"' is incompatible with compiler '\" + testCompiler.name() + \"'\");", "first_line_prediction": " + feature.name() + \"' does not support compiler '\" + testCompiler.name() + \"'\");", "match": 0}
{"groundtruth": "builder.pushStyle(style -> style.withColor(Formatting.GRAY).withItalic(true));", "prediction": "builder.pushStyle(style -> style.withFormatting(Formatting.GRAY));\n    }\n\n    @Override\n    public void visitBlockQuoteEnd() {\n        this.quoteDepth--;\n        this.builder.popStyle();\n        this.builder.append(this.quoteMarker());\n    }\n\n    @Override\n    public void visitList(boolean ordered) {\n        this.listDepth++;\n        this.builder.append(ordered ? Text.literal(\"1. \") : Text.literal(\"\u2022 \"));\n    }\n\n    @Override\n    public void visitListEnd() {\n        this.listDepth--;\n        this.builder.append(Text.", "first_line_groundtruth": "builder.pushStyle(style -> style.withColor(Formatting.GRAY).withItalic(true));", "first_line_prediction": "builder.pushStyle(style -> style.withFormatting(Formatting.GRAY));", "match": 0}
{"groundtruth": "this.builder.popStyle();", "prediction": " this.quoteDepth--;\n         this.builder.popStyle();\n         this.builder.append(this.quoteMarker());\n     }", "first_line_groundtruth": "this.builder.popStyle();", "first_line_prediction": " this.quoteDepth--;", "match": 0}
{"groundtruth": "return RealCameraCore.isRenderingWorld && config.shouldDisableRender(modelPartName) && RealCameraCore.isActive();", "prediction": " return functionProvider.get(RealCameraCore.MODID).test(0.0f, new MatrixStack());\n    }", "first_line_groundtruth": "return RealCameraCore.isRenderingWorld && config.shouldDisableRender(modelPartName) && RealCameraCore.isActive();", "first_line_prediction": " return functionProvider.get(RealCameraCore.MODID).test(0.0f, new MatrixStack());", "match": 0}
{"groundtruth": "modConfig.set(new ModConfig());", "prediction": " GSON.toJson(new ModConfig(), writer);\n        } catch (Exception exception) {\n            RealCamera.LOGGER.warn(\"Failed to reset \" + FILE_NAME, exception);\n        }\n    }", "first_line_groundtruth": "modConfig.set(new ModConfig());", "first_line_prediction": " GSON.toJson(new ModConfig(), writer);", "match": 0}
{"groundtruth": "get(config.getModelModID()).test(tickDelta, matrixStack);", "prediction": "getOrDefault(getModelPartName(), (f, m) -> false).test(tickDelta, matrixStack);\n    }", "first_line_groundtruth": "get(config.getModelModID()).test(tickDelta, matrixStack);", "first_line_prediction": "getOrDefault(getModelPartName(), (f, m) -> false).test(tickDelta, matrixStack);", "match": 0}
{"groundtruth": "else config.setAdjustOffset(!config.isAdjustingOffset());", "prediction": " else config.cycleAdjustMode();\n            ConfigFile.save();\n        }\n        while (TOGGLE_CAMERA_MODE.wasPressed()) {\n            if (config.isClassic()) config.cycleClassicCameraMode();\n             else config.cycleCameraMode();\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            config.adjustUp();\n            ConfigFile.save();\n        }\n        while (ADJUST_DOWN.wasPressed()) {\n            config.adjustDown();\n            ConfigFile.save();\n        }\n        while (ADJUST_FRONT.wasPressed()) {\n            config.adjust", "first_line_groundtruth": "else config.setAdjustOffset(!config.isAdjustingOffset());", "first_line_prediction": " else config.cycleAdjustMode();", "match": 0}
{"groundtruth": "(config.isClassic()) config.adjustClassicZ(true);", "prediction": " (config.isClassic()) config.adjustClassic(-config.getAdjustStep());\n            else config.adjustOffset(-config.getAdjustStep());\n            ConfigFile.save();\n        }\n        while (ADJUST_RIGHT.wasPressed()) {\n            if  (config.isClassic()) config.adjustClassic(config.getAdjustStep());\n            else config.adjustOffset(config.getAdjustStep());\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            if  (config.isClassic()) config.adjustClassic(0, -config.getAdjustStep());\n            else", "first_line_groundtruth": "(config.isClassic()) config.adjustClassicZ(true);", "first_line_prediction": " (config.isClassic()) config.adjustClassic(-config.getAdjustStep());", "match": 0}
{"groundtruth": "(config.isClassic()) config.cycleClassicAdjustMode();", "prediction": " (config.isAdjustMode()) {\n                config.setAdjustMode(false);\n            } else {\n                config.setAdjustMode(true);\n            }\n        }\n        while (TOGGLE_CAMERA_MODE.wasPressed()) {\n            if  (config.isCameraMode()) {\n                config.setCameraMode(false);\n            } else {\n                config.setCameraMode(true);\n            }\n        }\n        while (ADJUST_UP.wasPressed()) {\n            config.adjustCamera(0.0D, 0.0D, 0.0D, 0.0D, 0", "first_line_groundtruth": "(config.isClassic()) config.cycleClassicAdjustMode();", "first_line_prediction": " (config.isAdjustMode()) {", "match": 0}
{"groundtruth": "!config.isClassic());", "prediction": "false);\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            config.adjustOffset(config.getAdjustStep());\n            ConfigFile.save();\n        }\n        while (ADJUST_DOWN.wasPressed()) {\n            config.adjustOffset(-config.getAdjustStep());\n            ConfigFile.save();\n        }\n        while (ADJUST_FRONT.wasPressed()) {\n            config.adjustYaw(config.getAdjustStep());\n            ConfigFile.save();\n        }\n        while (ADJUST_BACK.wasPressed()) {\n            config.adjustYaw(-config.", "first_line_groundtruth": "!config.isClassic());", "first_line_prediction": "false);", "match": 0}
{"groundtruth": "RealCameraCore.isActive();", "prediction": " functionProvider.get(config.getModId()).test(config.getModModelPartScale(), RealCameraCore.matrixStack);\n    }", "first_line_groundtruth": "RealCameraCore.isActive();", "first_line_prediction": " functionProvider.get(config.getModId()).test(config.getModModelPartScale(), RealCameraCore.matrixStack);", "match": 0}
{"groundtruth": "config.isEnabled();", "prediction": " config.isRendering();\n            config.setRendering(!enabled);\n            RealCamera.LOGGER.info(\"Toggled rendering mode to \" + enabled);\n        }\n\n        while (TOGGLE_ADJUST_MODE.wasPressed()) {\n            boolean enabled =  config.isAdjustMode();\n            config.setAdjustMode(!enabled);\n            RealCamera.LOGGER.info(\"Toggled adjust mode to \" + enabled);\n        }\n\n        while (TOGGLE_CAMERA_MODE.wasPressed()) {\n            boolean enabled =  config.isCameraMode();\n            config.setCameraMode(!enabled);\n            RealCamera.LOGGER.info(\"", "first_line_groundtruth": "config.isEnabled();", "first_line_prediction": " config.isRendering();", "match": 0}
{"groundtruth": "config.isClassic()) config.cycleClassicAdjustMode();", "prediction": "config.isAdjustMode()) {\n                config.setAdjustMode(false);\n            } else {\n                config.setAdjustMode(true);\n            }\n        }\n        while (TOGGLE_CAMERA_MODE.wasPressed()) {\n            if (config.isCameraMode()) {\n                config.setCameraMode(false);\n            } else {\n                config.setCameraMode(true);\n            }\n        }\n        while (ADJUST_UP.wasPressed()) {\n            config.adjustCamera(0.0D, 0.0D, 0.0D, 0.0D, 0.0", "first_line_groundtruth": "config.isClassic()) config.cycleClassicAdjustMode();", "first_line_prediction": "config.isAdjustMode()) {", "match": 0}
{"groundtruth": ")) config.adjustClassicZ(true);", "prediction": "ModConfig.AdjustMode.ROTATE)) config.rotateLeft();\n            else config.adjustOffset(-config.getAdjustStep());\n            ConfigFile.save();\n        }\n        while (ADJUST_RIGHT.wasPressed()) {\n            if (config.isClassic(ModConfig.AdjustMode.ROTATE)) config.rotateRight();\n            else config.adjustOffset(config.getAdjustStep());\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            if (config.isClassic(ModConfig.AdjustMode.MOVE)) config.moveUp();\n            else config.adjust", "first_line_groundtruth": ")) config.adjustClassicZ(true);", "first_line_prediction": "ModConfig.AdjustMode.ROTATE)) config.rotateLeft();", "match": 0}
{"groundtruth": "config.adjustBindingZ(true);", "prediction": " config.adjustBindingZ(true);\n            ConfigFile.save();\n        }\n        while (ADJUST_RIGHT.wasPressed()) {\n            if (config.isClassic()) config.adjustClassicZ(false);\n            else  config.adjustBindingZ(false);\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            if (config.isClassic()) config.adjustClassicPitch(true);\n            else  config.adjustBindingPitch(true);\n            ConfigFile.save();\n        }\n        while (ADJUST_DOWN.wasPressed()) {\n            if (config.is", "first_line_groundtruth": "config.adjustBindingZ(true);", "first_line_prediction": " config.adjustBindingZ(true);", "match": 0}
{"groundtruth": "TableFieldUtil.getFieldMap(r.getClass());", "prediction": " TableFieldUtil.getFieldMap(r.getClass());\n        for (CanalEntry.Column column : columnList) {\n            String fieldName = columnNames.get(column.getName());\n            if (StringUtils.isNotEmpty(fieldName)) {\n                TableFieldUtil.setFieldValue(r, fieldName, column.getValue());\n            }\n        }\n        return r;\n    }", "first_line_groundtruth": "TableFieldUtil.getFieldMap(r.getClass());", "first_line_prediction": " TableFieldUtil.getFieldMap(r.getClass());", "match": 0}
{"groundtruth": "return config.getModModelPartName();", "prediction": " return config.modModelPart;\n    }\n\n    /**\n     * @param tickDelta   or partialTick(s) (official mapping)\n     * @param matrixStack or poseStack (official mapping)\n     * @return {@code boolean} turn to vanilla rendering if true\n     * @see net.minecraft.client.render.entity.EntityRenderDispatcher#render\n     * @see net.minecraft.client.render.entity.PlayerEntityRenderer#render\n     * @see net.minecraft.client.render.entity.LivingEntityRenderer#render\n     * @see net.minecraft.client.render.entity.model.", "first_line_groundtruth": "return config.getModModelPartName();", "first_line_prediction": " return config.modModelPart;", "match": 0}
{"groundtruth": "Object result = StringConvertUtil.convertType(type, value);", "prediction": " if (type.equals(String.class)) {\n            field.set(object, value);\n        } else if (type.equals(Integer.class)) {\n            field.set(object, Integer.valueOf(value));\n        } else if (type.equals(Long.class)) {\n            field.set(object, Long.valueOf(value));\n        } else if (type.equals(Double.class)) {\n            field.set(object, Double.valueOf(value));\n        } else if (type.equals(Float.class)) {\n            field.set(object, Float.valueOf(value));", "first_line_groundtruth": "Object result = StringConvertUtil.convertType(type, value);", "first_line_prediction": " if (type.equals(String.class)) {", "match": 0}
{"groundtruth": "= canalProperties.getRabbitMq();", "prediction": " = canalProperties.getMq();\n        return RabbitMqCanalClient.builder()\n                .username(mqProperties.getUsername())\n                .password(<PASSWORD>())\n                .host(mqProperties.getHost())\n                .port(mqProperties.getPort())\n                .virtualHost(mqProperties.getVirtualHost())\n                .destination(canalProperties.getDestination())\n                .messageHandler(messageHandler)\n                .batchSize(canalProperties.getBatchSize())\n                .filter(canalProperties.getFilter())\n                .timeout(canalProperties.getTimeout())\n                .unit(canalProperties.getUnit())", "first_line_groundtruth": "= canalProperties.getRabbitMq();", "first_line_prediction": " = canalProperties.getMq();", "match": 0}
{"groundtruth": ") config.adjustClassicX(false);", "prediction": " && config.isAdjustingOffset()) config.adjustClassicX(false);\n            else config.adjustBindingX(false);\n            ConfigFile.save();\n        }\n    }", "first_line_groundtruth": ") config.adjustClassicX(false);", "first_line_prediction": " && config.isAdjustingOffset()) config.adjustClassicX(false);", "match": 0}
{"groundtruth": "(VirtualRenderer.shouldDisableRender(\"jacket\")) model.jacket.visible = false;", "prediction": " (VirtualRenderer.shouldDisableRender(\"rightBoots\")) model.rightBoots.visible = false;\n        if  (VirtualRenderer.shouldDisableRender(\"leftBoots\")) model.leftBoots.visible = false;\n        if (VirtualRenderer.shouldDisableRender(\"rightHand\")) model.rightHand.visible = false;\n        if (VirtualRenderer.shouldDisableRender(\"leftHand\")) model.leftHand.visible = false;\n        if (VirtualRenderer.shouldDisableRender(\"rightForearm\")) model.rightForearm.visible = false;\n        if (VirtualRenderer.shouldDisableRender(\"leftForearm", "first_line_groundtruth": "(VirtualRenderer.shouldDisableRender(\"jacket\")) model.jacket.visible = false;", "first_line_prediction": " (VirtualRenderer.shouldDisableRender(\"rightBoots\")) model.rightBoots.visible = false;", "match": 0}
{"groundtruth": "() && DoABarrelRollCompat.modEnabled() && RealCameraCore.isActive()) {", "prediction": "() && RealCameraCore.isActive()) {\n            DoABarrelRollCompat.onBeforeCameraUpdate(tickDelta, limitTime, matrixStack);\n        }\n    }\n\n    @Inject(method = \"renderWorld\", at = @At(value = \"INVOKE\",\n            target = \"Lnet/minecraft/client/render/Camera;update(Lnet/minecraft/world/BlockView;Lnet/minecraft/entity/Entity;ZZF)V\",\n            shift = At.Shift.AFTER))\n    private void onAfterCameraUpdate(float tickDelta, long limitTime, MatrixStack matrixStack, Callback", "first_line_groundtruth": "() && DoABarrelRollCompat.modEnabled() && RealCameraCore.isActive()) {", "first_line_prediction": "() && RealCameraCore.isActive()) {", "match": 0}
{"groundtruth": ".modEnabled() && RealCameraCore.isActive()) {", "prediction": ".isActive()) {\n            DoABarrelRollCompat.updateCamera(camera, client, tickDelta);\n        }\n    }", "first_line_groundtruth": ".modEnabled() && RealCameraCore.isActive()) {", "first_line_prediction": ".isActive()) {", "match": 0}
{"groundtruth": ").OnMessageReceive(m_baseObject, code, msg);", "prediction": ").OnMessageReceive(fragment, code, msg);\n            }\n        } else {\n            printErrorLog(\"sendMessageToFragment -> fragment:\" + fragment + \" is not bind listener\");\n        }\n    }\n\n    public void sendMessageToContainerView(int containerViewId, int code, Object msg) {\n        if (containerViewId != 0) {\n            FragmentManager fragmentManager = m_containerViewMap.get(containerViewId);\n            if (fragmentManager != null) {\n                fragmentManager.executePendingTransactions();\n                Fragment fragment = fragmentManager.findFragmentByTag(m_metaphorMessage.getTag());", "first_line_groundtruth": ").OnMessageReceive(m_baseObject, code, msg);", "first_line_prediction": ").OnMessageReceive(fragment, code, msg);", "match": 0}
{"groundtruth": "if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;", "prediction": "", "first_line_groundtruth": "if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;", "first_line_prediction": "", "match": 0}
{"groundtruth": "&& camera.isThirdPerson() && RealCameraCore.isActive() &&\n                !ConfigFile.modConfig.allowRenderingHandWhen(client)) {", "prediction": " && RealCameraCore.isActive()) {\n            if (client.options.getPerspective() == Perspective.THIRD_PERSON) {\n                matrices.push();\n                matrices.multiply(RotationAxis.POSITIVE_Z.rotationDegrees(RealCameraCore.getRoll()));\n            }\n        }\n    }\n\n    @Inject(method = \"renderHand\", at = @At(value = \"INVOKE\",\n            target = \"Lnet/minecraft/client/util/math/MatrixStack;pop()V\"))\n    private void unsetThirdPerson(MatrixStack matrices, Camera camera, float tickDelta, CallbackInfo cInfo) {", "first_line_groundtruth": "&& camera.isThirdPerson() && RealCameraCore.isActive() &&", "first_line_prediction": " && RealCameraCore.isActive()) {", "match": 0}
{"groundtruth": "m_metaphorManager.showFragment(strTag);", "prediction": " FragmentManager fragmentManager = m_fragment.getChildFragmentManager();\n         FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n         fragmentTransaction.show(m_fragment);\n         fragmentTransaction.commit();\n        return this;\n    }\n\n    @Override\n    public IMetaphorSubFragmentManager hideFragment(@NonNull String strTag) {\n        FragmentManager fragmentManager = m_fragment.getChildFragmentManager();\n        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n        fragmentTransaction.hide(m_fragment);\n        fragmentTransaction.commit();\n        return this;\n    }\n\n    @Override\n    public boolean isTagExist(@NonNull String strTag) {\n       ", "first_line_groundtruth": "m_metaphorManager.showFragment(strTag);", "first_line_prediction": " FragmentManager fragmentManager = m_fragment.getChildFragmentManager();", "match": 0}
{"groundtruth": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));", "prediction": " settings.setTemperature(getTemperatureValue(form.getTemperature()));\n    }\n  }\n\n  @Override\n  public void reset() {\n    if (form != null) {\n      form.setApiKey(settings.getApiKey());\n      form.setModel(settings.getModel());\n      form.setMaxTokens(String.valueOf(settings.getMaxTokens()));\n      form.setTemperature(String.valueOf(settings.getTemperature()));\n    }\n  }\n\n  @Override\n  public void disposeUIResources() {\n    form = null;\n  }\n\n  private int getMaxTokensValue(String maxTokens) {\n    try {\n      return Integer.parseInt(", "first_line_groundtruth": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));", "first_line_prediction": " settings.setTemperature(getTemperatureValue(form.getTemperature()));", "match": 0}
{"groundtruth": "m_fx1 = FragmentX1.newInstance();", "prediction": " m_fx1 = FragmentX1.newInstance();\n         m_fx2 = FragmentX2.newInstance();\n         m_fx3 = FragmentX3.newInstance();\n         m_fa = FragmentA.newInstance();\n         m_fb = FragmentB.newInstance();\n         m_fc = FragmentC.newInstance();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        Metaphor.with(MainActivity.this).destroy();\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        Metaphor.with(MainActivity.this).resume();\n   ", "first_line_groundtruth": "m_fx1 = FragmentX1.newInstance();", "first_line_prediction": " m_fx1 = FragmentX1.newInstance();", "match": 0}
{"groundtruth": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));", "prediction": " !form.getTemperature().equals(String.valueOf(settings.getTemperature()));\n    }\n    return false;\n  }\n\n  @Override\n  public void apply() {\n    settings.setApiKey(form.getApiKey());\n    settings.setModel(form.getModel());\n    settings.setMaxTokens(Integer.parseInt(form.getMaxTokens()));\n    settings.setTemperature(Double.parseDouble(form.getTemperature()));\n  }\n\n  @Override\n  public void reset() {\n    form.setApiKey(settings.getApiKey());\n    form.setModel(settings.getModel());\n    form.setMaxTokens(String.valueOf(settings.getMax", "first_line_groundtruth": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));", "first_line_prediction": " !form.getTemperature().equals(String.valueOf(settings.getTemperature()));", "match": 0}
{"groundtruth": "return form.getMainPanel();", "prediction": " form.setApiKey(settings.getApiKey());\n     form.setTemp(settings.getTemp());\n     form.setMaxTokens(settings.getMaxTokens());\n    return form.getMainPanel();\n  }\n\n  @Override\n  public boolean isModified() {\n    return settings.getApiKey() != form.getApiKey() || settings.getTemp() != form.getTemp() || settings.getMaxTokens() != form.getMaxTokens();\n  }\n\n  @Override\n  public void apply() {\n    settings.setApiKey(form.getApiKey());\n    settings.setTemp(form.getTemp());\n    settings.setMaxTokens(", "first_line_groundtruth": "return form.getMainPanel();", "first_line_prediction": " form.setApiKey(settings.getApiKey());", "match": 0}
{"groundtruth": "(testRun.getTestRunOutcome() == null) {", "prediction": " (testRun.getOutcome() == null) {\n                    continue;\n                }\n\n                //do not show items without test run outcome\n                if (testRun.getPrediction() == null) {\n                    continue;\n                }\n\n                //do not show items without test run outcome\n                if (testRun.getGitRepository() == null) {\n                    continue;\n                }\n\n                //do not show items without test run outcome\n                if (testRun.getGitRemote() == null) {\n                    continue;\n                }\n\n                //do not show items without test run outcome\n                if (testRun.getGitBranch() == null) {\n                    continue", "first_line_groundtruth": "(testRun.getTestRunOutcome() == null) {", "first_line_prediction": " (testRun.getOutcome() == null) {", "match": 0}
{"groundtruth": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));", "prediction": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));\n    }\n    return false;\n  }\n\n  @Override\n  public void apply() {\n    settings.setApiKey(form.getApiKey());\n    settings.setModel(form.getModel());\n    settings.setMaxTokens(Integer.parseInt(form.getMaxTokens()));\n    settings.setTemperature(Double.parseDouble(form.getTemperature()));\n  }\n\n  @Override\n  public void reset() {\n    form.setApiKey(settings.getApiKey());\n    form.setModel(settings.getModel());\n    form.setMaxTokens(String.valueOf(settings.getMaxTokens", "first_line_groundtruth": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));", "first_line_prediction": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));", "match": 1}
{"groundtruth": "apiResponse.getMessage(),\n              String.format(\"%d ExceptionAI Error\", apiResponse.getCode()),\n              Messages.getErrorIcon());", "prediction": " \"ExceptionAI Suggestions\\n\" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getInformationIcon());\n        }\n      });\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }", "first_line_groundtruth": "apiResponse.getMessage(),", "first_line_prediction": " \"ExceptionAI Suggestions\\n\" + apiResponse.getMessage(),", "match": 0}
{"groundtruth": "\"\\n\" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getInformationIcon());", "prediction": " \"Suggestions: \" + apiResponse.getSuggestions(),\n               \"Suggestions\",\n               Messages.getInformationIcon()\n          );\n        } else {\n          Messages.showMessageDialog(\n              project,\n              \"Suggestions: \" + apiResponse.getMessage(),\n              \"Suggestions\",\n              Messages.getInformationIcon()\n          );\n        }\n      });\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }", "first_line_groundtruth": "\"\\n\" + apiResponse.getMessage(),", "first_line_prediction": " \"Suggestions: \" + apiResponse.getSuggestions(),", "match": 0}
{"groundtruth": "= testRun.getDateTime();", "prediction": " = testRun.getDateTime();\n                LocalDateTime dateTime = LocalDateTime.parse(dateTimeString);\n                String time = dateTime.toString();\n                JBLabel timeLabel = new JBLabel(time, SwingConstants.CENTER);\n                timeLabel.setForeground(ButtonColors.TIME_LABEL_COLOR);\n                historyContent.add(timeLabel, historyGbc);\n\n                // outcome\n                historyGbc.gridx = 1;\n                historyGbc.anchor = GridBagConstraints.EAST;\n                historyGbc.fill = GridBagConstraints.HORIZONTAL;\n                historyGbc.weightx = 1;\n                historyGbc.weighty =", "first_line_groundtruth": "= testRun.getDateTime();", "first_line_prediction": " = testRun.getDateTime();", "match": 0}
{"groundtruth": "switch (testRun.getTestRunOutcome()) {", "prediction": " //If the test run outcome is passed make the circle green\n                 if (testRun.getTestRunOutcome() == TestRunOutcome.PASSED) {\n                     circleColor = Color.GREEN;\n                 }\n\n                 //If the test run outcome is failed make the circle red\n                 if (testRun.getTestRunOutcome() == TestRunOutcome.FAILED) {\n                     circleColor = Color.RED;\n                 }\n\n                 //If the test run outcome is not executed make the circle yellow\n                 if (testRun.getTestRunOutcome() == TestRunOutcome.NOT_EXECUTED) {\n                     circleColor = Color.YELLOW;\n                 }\n\n                ", "first_line_groundtruth": "switch (testRun.getTestRunOutcome()) {", "first_line_prediction": " //If the test run outcome is passed make the circle green", "match": 0}
{"groundtruth": "14, testRun.getCommit());", "prediction": "14);\n                historyContent.add(exampleGreenCirclePanel, historyGbc);\n\n                // prediction\n                historyGbc.gridy = i;\n                historyGbc.gridx = 2;\n\n                JBLabel predictionLabel = new JBLabel(testRun.getPrediction().toString());\n                historyContent.add(predictionLabel, historyGbc);\n\n                // link to test\n                historyGbc.gridy = i;\n                historyGbc.gridx = 3;\n\n                JBLabel testLinkLabel = new JBLabel(testRun.getTestName());\n                historyContent.add(testLinkLabel, historyG", "first_line_groundtruth": "14, testRun.getCommit());", "first_line_prediction": "14);", "match": 0}
{"groundtruth": "apiResponse.getCode() == 200) {", "prediction": "apiResponse.isSuccess()) {\n          String suggestion = apiResponse.getSuggestion();\n          String message = \"Suggestion: \" + suggestion;\n          String title = \"ExceptionAI Suggestion\";\n          int messageType = JOptionPane.INFORMATION_MESSAGE;\n          JOptionPane.showMessageDialog(null, message, title, messageType);\n        } else {\n          String message = \"Error: \" + apiResponse.getMessage();\n          String title = \"ExceptionAI Error\";\n          int messageType = JOptionPane.ERROR_MESSAGE;\n          JOptionPane.showMessageDialog(null, message, title, messageType);\n        }\n      });\n    } catch (Exception e) {\n     ", "first_line_groundtruth": "apiResponse.getCode() == 200) {", "first_line_prediction": "apiResponse.isSuccess()) {", "match": 0}
{"groundtruth": "= testRun.getPrediction() == Prediction.CORRECT ? AllIcons.RunConfigurations.TestPassed : AllIcons.RunConfigurations.TestFailed;", "prediction": " = AllIcons.Actions.Refresh;\n                historyContent.add(new JLabel(icon), historyGbc);\n\n                // commit\n                historyGbc.gridx = 3;\n                historyGbc.gridy = i;\n\n                JBLabel commitLabel = new JBLabel(testRun.getCommit());\n                historyContent.add(commitLabel, historyGbc);\n\n                // test run outcome\n                historyGbc.gridx = 4;\n                historyGbc.gridy = i;\n\n                JBLabel testRunOutcomeLabel = new JBLabel(testRun.getTestRunOutcome().toString());\n                historyContent.add", "first_line_groundtruth": "= testRun.getPrediction() == Prediction.CORRECT ? AllIcons.RunConfigurations.TestPassed : AllIcons.RunConfigurations.TestFailed;", "first_line_prediction": " = AllIcons.Actions.Refresh;", "match": 0}
{"groundtruth": "<Class<?>, List<ISubscriber>> registeredSubs = SubscriberFinder.find(subscriber);", "prediction": "<Class<?>, List<ISubscriber>> subscriberMap = SubscriberFinder.findSubscriberMethods(subscriber);\n        // \u904d\u5386\u8ba2\u9605\u8005\u6620\u5c04\n        for(Map.Entry<Class<?>, List<ISubscriber>> entry : subscriberMap.entrySet()) {\n            // \u904d\u5386\u8ba2\u9605\u8005\u65b9\u6cd5\n            for(ISubscriber subscriberMethod : entry.getValue()) {\n                // \u8ba2\u9605\u8005\u65b9\u6cd5\u6dfb\u52a0\u5230\u8ba2\u9605\u8005\u6620\u5c04\n                subscriberMethod.setSubscriber(subscriber);\n                // \u8ba2\u9605\u8005\u65b9\u6cd5\u6dfb\u52a0\u5230\u8ba2\u9605\u8005\u6620\u5c04\n                subscriberMethod.setMethod(entry.getKey().getDeclaredMethod(subscriberMethod.", "first_line_groundtruth": "<Class<?>, List<ISubscriber>> registeredSubs = SubscriberFinder.find(subscriber);", "first_line_prediction": "<Class<?>, List<ISubscriber>> subscriberMap = SubscriberFinder.findSubscriberMethods(subscriber);", "match": 0}
{"groundtruth": "subscriber.getThreadType() == ThreadType.ASYNC) {", "prediction": "subscriber.getClass().isAnnotationPresent(Subscribe.class)) {\n                executor.execute(() -> {\n                    subscriber.invoke(event);\n                });\n            }\n        }\n    }\n\n    public static void post(IEvent event, ThreadType threadType) {\n        Objects.requireNonNull(event);\n        Class<? extends IEvent> clazz = event.getClass();\n        List<ISubscriber> subscribers = subscriberMap.get(clazz);\n        if (subscribers == null || subscribers.isEmpty()) {\n            return;\n        }\n        for (ISubscriber subscriber : subscribers) {\n            if(subscriber.getClass().isAnnotationPresent(Subscribe.", "first_line_groundtruth": "subscriber.getThreadType() == ThreadType.ASYNC) {", "first_line_prediction": "subscriber.getClass().isAnnotationPresent(Subscribe.class)) {", "match": 0}
{"groundtruth": "(sub -> sub.getSubscriber() == subscriber);", "prediction": "(subscriber1 -> subscriber1.equals(subscriber));\n                if(subscribers.isEmpty()) {\n                    subscriberStatusMap.remove(subscriberClass);\n                    logger.info(String.format(\"Unregistered: %s\",subscriber.getClass()));\n                }\n            });\n        }\n    }\n\n    public void post(IEvent event) {\n        Objects.requireNonNull(event);\n        if(subscriberMap != null && !subscriberMap.isEmpty()) {\n            subscriberMap.forEach((subscriberClass, subscribers) -> {\n                if(subscribers == null || subscribers.isEmpty()) {\n                    logger.warn(String.format(\"Subscriber %s was not registered", "first_line_groundtruth": "(sub -> sub.getSubscriber() == subscriber);", "first_line_prediction": "(subscriber1 -> subscriber1.equals(subscriber));", "match": 0}
{"groundtruth": "DataSourceContext.get();", "prediction": " DataSourceContext.getDataSourceKey();\n        if (dataSourceKey == null) {\n            return defaultDataSource;\n        }\n        return dataSources.get(dataSourceKey);\n    }\n\n    private Connection wrapConnection(DataSource dataSource, Connection connection) {\n        TxConnectionWrapper wrapper = new TxConnectionWrapper(connection);\n        TxConnectionContext.put(dataSource, wrapper);\n        return wrapper;\n    }", "first_line_groundtruth": "DataSourceContext.get();", "first_line_prediction": " DataSourceContext.getDataSourceKey();", "match": 0}
{"groundtruth": "return TransactionContext.get() != null;", "prediction": " return TransactionContext.get() != null;\n    }\n\n    private SuspendedTx suspend() {\n        TxConnectionWrapper txConnection = TxConnectionContext.get();\n        if (txConnection == null) {\n            throw new TransactionException(\"No transaction found\");\n        }\n        return new SuspendedTx(txConnection);\n    }\n\n    private void resume(SuspendedTx suspended) {\n        if (suspended != null) {\n            suspended.resume();\n        }\n    }\n\n    private Object doExecute(Transaction transaction) throws Throwable {\n        TxConnectionWrapper txConnection = TxConnectionContext.get();\n        if (txConnection", "first_line_groundtruth": "return TransactionContext.get() != null;", "first_line_prediction": " return TransactionContext.get() != null;", "match": 0}
{"groundtruth": "= transaction.getNoRollbackFor();", "prediction": " = transaction.getNoRollbackFor();\n        Class<? extends Throwable> clazz = t.getClass();\n        for (Class<? extends Throwable> noRollback : noRollbacks) {\n            if (noRollback.isAssignableFrom(clazz)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private void resume(SuspendedTx suspended) {\n        if (suspended != null) {\n            TransactionContext.set(suspended.tid);\n        }\n    }\n\n    private static class SuspendedTx {\n        private final TxId tid;\n\n        private SuspendedTx(TxId tid) {\n            this.", "first_line_groundtruth": "= transaction.getNoRollbackFor();", "first_line_prediction": " = transaction.getNoRollbackFor();", "match": 0}
{"groundtruth": "TransactionContext.remove();", "prediction": " return new SuspendedTx(tid);\n    }\n\n    private void resume(SuspendedTx suspended) {\n        if (suspended != null) {\n            suspended.resume();\n        }\n    }\n\n    private Object doExecute(Transaction transaction) throws Throwable {\n        TxId tid = TransactionContext.get();\n        TxConnectionWrapper connection = TxConnectionContext.get(tid);\n        if (connection == null) {\n            throw new TransactionException(\"No transaction found\");\n        }\n        try {\n            return transaction.proceed();\n        } finally {\n            TxConnectionContext.remove();\n        }\n    }\n\n    private static class Sus", "first_line_groundtruth": "TransactionContext.remove();", "first_line_prediction": " return new SuspendedTx(tid);", "match": 0}
{"groundtruth": "= transaction.proceed();", "prediction": " = transaction.proceed();\n            rollback = false;\n        } catch (Throwable e) {\n            rollback = true;\n            throw e;\n        } finally {\n            // \u4e8b\u52a1\u63d0\u4ea4\n            if (rollback) {\n                TransactionContext.remove();\n            } else {\n                TransactionContext.commit(tid);\n            }\n        }\n        return result;\n    }\n\n    private void resume(SuspendedTx suspended) {\n        if (suspended == null) {\n            return;\n        }\n        TxId tid = suspended.getTid();\n        TransactionContext.set(tid);\n        try {\n            suspended.proceed();\n        } finally {", "first_line_groundtruth": "= transaction.proceed();", "first_line_prediction": " = transaction.proceed();", "match": 0}
{"groundtruth": "callback.onCompletion(content);", "prediction": " success = true;\n                }\n            } catch (Exception e) {\n                log.error(\"gpt-3.5-turbo chat error:{}\", ExceptionUtils.getStackTrace(e));\n                retryCount++;\n                Thread.sleep(1000);\n            }\n        }\n        if (!success) {\n            throw new ChatException(\"\u6211", "first_line_groundtruth": "callback.onCompletion(content);", "first_line_prediction": " success = true;", "match": 0}
{"groundtruth": "BotUtil.resetAll();", "prediction": " BotUtil.resetPrompt(chatBO.getSessionId());\n             event.getSubject().sendMessage(\"\u91cd\u7f6e\u6210\u529f\");\n             return;\n        }\n        if (RESET_WORD.equals(prompt)) {\n             ///\u68c0\u6d4b\u5230\u91cd\u7f6e\u4f1a\u8bdd\u6307\u4ee4\n             BotUtil.resetPrompt(chatBO.getSessionId());\n             event.getSubject().sendMessage(\"\u91cd\u7f6e\u6210\u529f\");\n             return;\n        }\n        if (prompt.startsWith(GET_WORD)) {\n            String uniquePrompt = interactService.getUniquePrompt(chatBO.getSessionId());\n            if (StringUtils.isEmpty(uniquePrompt)) {\n                MessageChain messages = new", "first_line_groundtruth": "BotUtil.resetAll();", "first_line_prediction": " BotUtil.resetPrompt(chatBO.getSessionId());", "match": 0}
{"groundtruth": "Extractor.warning(\"Warning: Did not match as a member: \" + line);", "prediction": " continue;\n                }\n                String modifiers = matcher.group(1);\n                String returnType = matcher.group(2);\n                String methodName = matcher.group(3);\n                String parameters = matcher.group(4);\n                String body = matcher.group(5);\n                String signature = returnType + \" \" + methodName + parameters;\n                String className = currentClass;\n                if (className == null) {\n                    className = currentPackage;\n                }\n                if (className != null) {\n                    String arguments = getRawParameterList(parameters);\n                    if (hasMethod(className, methodName, arguments)) {\n                        continue;\n                    }\n                   ", "first_line_groundtruth": "Extractor.warning(\"Warning: Did not match as a member: \" + line);", "first_line_prediction": " continue;", "match": 0}
{"groundtruth": "rateLimiter.setPrompt(sessionId, prompt);", "prediction": " rateLimiter.setPrompt(sessionId, prompt);\n    }\n\n    @Override\n    public void setPrompt(String sessionId, String prompt){\n        rateLimiter.setPrompt(sessionId, prompt);\n    }\n\n    @Override\n    public void resetPrompt(String sessionId){\n        rateLimiter.resetPrompt(sessionId);\n    }\n\n    @Override\n    public void setPrompt(String sessionId, String prompt, String model){\n        rateLimiter.setPrompt(sessionId, prompt, model);\n    }\n\n    @Override\n    public void setPrompt(String sessionId, String prompt, String model, String key){\n        rateLimiter.setPrompt(sessionId, prompt,", "first_line_groundtruth": "rateLimiter.setPrompt(sessionId, prompt);", "first_line_prediction": " rateLimiter.setPrompt(sessionId, prompt);", "match": 0}
{"groundtruth": "Extractor.warning(\"Warning: Did not match as a class/interface: \" + line);", "prediction": " Extractor.warning(\"Warning: Did not match as a class: \" + line);\n                } else {\n                    currentClass = matcher.group(3);\n                    classSet.add(currentClass);\n                    String superType = matcher.group(5);\n                    if (superType != null) {\n                        superType = stripTypeArgs(superType);\n                        classSet.add(superType);\n                    }\n                    String interfaces = matcher.group(7);\n                    if (interfaces != null) {\n                        for (String interfaceType : interfaces.split(\",\")) {\n                            interfaceType = stripTypeArgs(interfaceType);\n                            classSet", "first_line_groundtruth": "Extractor.warning(\"Warning: Did not match as a class/interface: \" + line);", "first_line_prediction": " Extractor.warning(\"Warning: Did not match as a class: \" + line);", "match": 0}
{"groundtruth": "FixProtocolVersion.fix();", "prediction": " //ChatGPTPlus\n        apiKeyPlus = new ArrayList<>();\n        for (String apiKey : apiKeyPlus){\n            apiKey = apiKey.trim();\n            if (!\"\".equals(apiKey)){\n                apiKeyPlus.add(apiKey);\n                log.info(\"apiKeyPlus\u4e3a {} \u7684\u8d26\u53f7\u521d\u59cb\u5316\u6210\u529f\", apiKey);\n            }\n        }\n    }\n\n    public Bot getQqBot() {\n        if (qqBot == null) {\n            BotConfiguration botConfiguration = BotConfiguration.builder()\n                    .setBotId(qq)\n                    .setPassword(password)\n                    .setBotAuthorization(BotAuthorization.password(password))\n                    .build();\n           ", "first_line_groundtruth": "FixProtocolVersion.fix();", "first_line_prediction": " //ChatGPTPlus", "match": 0}
{"groundtruth": "HttpContextUtil.setAttributeToSession(\"verifyCode\", code);", "prediction": " return \"\u53d1\u9001\u6210\u529f\";\n    }\n\n    @PostMapping(\"/login\")\n    public String login(@Valid @RequestBody LoginVO loginVO) {\n        UsernamePasswordToken token = new UsernamePasswordToken(loginVO.getEmail(), loginVO.getPassword());\n        Subject subject = SecurityUtils.getSubject();\n        subject.login(token);\n        Session session = subject.getSession();\n        session.setAttribute(\"user\", loginVO.getEmail());\n        return \"\u767b\u5f55\u6210\u529f\";\n    }\n\n    @GetMapping(\"/logout\")\n    public String logout() {\n        Subject subject = SecurityUtils.getSubject();\n        subject.logout();\n        return \"\u9000\u51fa\u6210\u529f\";\n    }", "first_line_groundtruth": "HttpContextUtil.setAttributeToSession(\"verifyCode\", code);", "first_line_prediction": " return \"\u53d1\u9001\u6210\u529f\";", "match": 0}
{"groundtruth": "action.deleteCache();", "prediction": " // TODO: implement\n    }\n\n    @Override\n    public boolean startInWriteAction() {\n        return false;\n    }", "first_line_groundtruth": "action.deleteCache();", "first_line_prediction": " // TODO: implement", "match": 0}
{"groundtruth": "this.code = code.getValue();", "prediction": " this.code = code.getCode();\n         this.msg = code.getMsg();\n         this.data = data;\n    }\n\n    public Result(ResultCodeEnum code, String msg, T data) {\n         this.code = code.getCode();\n         this.msg = msg;\n         this.data = data;\n    }\n\n    public Result(ResultCodeEnum code) {\n         this.code = code.getCode();\n         this.msg = code.getMsg();\n    }\n\n    public Result(ResultCodeEnum code, String msg) {\n         this.code = code.getCode();\n         this.msg = msg;\n    }\n\n   ", "first_line_groundtruth": "this.code = code.getValue();", "first_line_prediction": " this.code = code.getCode();", "match": 0}
{"groundtruth": "request.getName())\n                .createdBy(userId)\n                .build();", "prediction": "request.getName())\n                 .status(OrgStatus.EFFECTIVE)\n                 .build();\n\n        orgHandler.addOrg(org, userId);\n\n        return orgHandler.buildOrgResponse(org);\n    }\n\n    @Transactional\n    public OrgResponse updateOrgBasic(Long id, UpdateOrgBasicRequest request, Long userId) {\n        Optional<Org> orgOptional = orgRepository.findById(id);\n\n        if (orgOptional.isEmpty()) {\n            throw new BusinessException(\"ORG_NOT_FOUND\");\n        }\n\n        Org org = orgOptional.get();\n\n        orgHandler.updateOrgBasic(org, request, userId);\n\n       ", "first_line_groundtruth": "request.getName())", "first_line_prediction": "request.getName())", "match": 1}
{"groundtruth": "(request.getTenantId(), id)\n                .orElseThrow(() -> {", "prediction": "(id)\n                .orElseThrow(() -> new BusinessException(\"Org not found\"));\n\n        orgHandler.updateOrgBasic(org, request, userId);\n\n        return buildOrgDto(org);\n    }\n\n    @Transactional\n    public OrgResponse updateOrgDetail(Long id, UpdateOrgDetailRequest request, Long userId) {\n        Org org = orgRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(\"Org not found\"));\n\n        orgHandler.updateOrgDetail(org, request, userId);\n\n        return buildOrgDto(org);\n    }\n\n    @Transactional\n    public OrgResponse updateOrgStatus(Long id,", "first_line_groundtruth": "(request.getTenantId(), id)", "first_line_prediction": "(id)", "match": 0}
{"groundtruth": "= status.code();", "prediction": " = status.code();\n        }\n        return params;\n    }\n\n    private static String buildSqlExistsByIdAndStatus(int statusesLength) {\n        StringBuilder sql = new StringBuilder(\" select 1 from emp \");\n        for(int i = 0; i < statusesLength; i++) {\n            sql.append(\" where status_code = ? \");\n        }\n        sql.append(\" limit 1 \");\n        return sql.toString();\n    }", "first_line_groundtruth": "= status.code();", "first_line_prediction": " = status.code();", "match": 0}
{"groundtruth": "assertOrgName.shouldNotEmpty(newName);", "prediction": " assertOrgName.shouldEffective(org.getTenantId(), newName);\n             org.setName(newName);\n        }\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n        org.setLastUpdateBy(userId);\n        org.setLastUpdateDate(LocalDateTime.now());\n    }", "first_line_groundtruth": "assertOrgName.shouldNotEmpty(newName);", "first_line_prediction": " assertOrgName.shouldEffective(org.getTenantId(), newName);", "match": 0}
{"groundtruth": "(request.getSuperiorId())\n                .name(request.getName())\n                .createdBy(userId)\n                .build();", "prediction": "(request.getSuperiorId())\n                 .name(request.getName())\n                 .status(OrgStatus.EFFECTIVE)\n                 .build();\n\n        orgHandler.addOrg(org, userId);\n\n        return OrgResponse.builder()\n                .id(org.getId())\n                .tenantId(org.getTenantId())\n                .orgTypeCode(org.getOrgTypeCode())\n                .leaderId(org.getLeaderId())\n                .superiorId(org.getSuperiorId())\n                .name(org.getName())\n                .status(org.getStatus())\n                .build();\n    }\n\n    @Transactional\n    public Org", "first_line_groundtruth": "(request.getSuperiorId())", "first_line_prediction": "(request.getSuperiorId())", "match": 1}
{"groundtruth": "org, request.getName() , request.getLeaderId(), userId);", "prediction": "org, request, userId);\n\n        return buildOrgDto(org);\n    }\n\n    @Transactional\n    public OrgResponse updateOrgDetail(Long id, UpdateOrgDetailRequest request, Long userId) {\n        Org org = orgRepository.findById(request.getTenantId(), id)\n                 .orElseThrow(() -> {\n                    throw new BusinessException(\"\u8981\u4fee\u6539\u7684\u7ec4\u7ec7(id =\" + id + \"  )\u4e0d\u5b58\u5728\uff01\");\n                 });\n\n        orgHandler.updateDetail(org, request, userId);\n\n        return buildOrgDto(org);\n    }\n\n    @Transactional\n    public OrgResponse updateOrgStatus(Long id, UpdateOrgStatusRequest", "first_line_groundtruth": "org, request.getName() , request.getLeaderId(), userId);", "first_line_prediction": "org, request, userId);", "match": 0}
{"groundtruth": "return orgService.cancelOrg(tenant, id, userId);", "prediction": " return orgService.cancelOrg(tenant, id, userId);\n    }\n\n    @GetMapping(\"/api/organizations/{id}\")\n    public OrgResponse findOrgById(@PathVariable Long id\n            , @RequestParam Long tenant) {\n        return orgService.findOrgById(tenant, id).map(OrgResponse::new).orElse(null);\n    }", "first_line_groundtruth": "return orgService.cancelOrg(tenant, id, userId);", "first_line_prediction": " return orgService.cancelOrg(tenant, id, userId);", "match": 0}
{"groundtruth": "orgHandler.updateBasic(org, request.getName() , request.getLeaderId(), userId);", "prediction": " org = orgHandler.updateOrgBasic(org, request, userId);\n\n        return buildOrgDto(org);\n    }\n\n    @Transactional\n    public OrgResponse updateOrgDetail(Long id, UpdateOrgDetailRequest request, Long userId) {\n        Org org = orgRepository.findById(request.getTenantId(), id)\n                 .orElseThrow(() -> {\n                    throw new BusinessException(\"\u8981\u4fee\u6539\u7684\u7ec4\u7ec7(id =\" + id + \"  )\u4e0d\u5b58\u5728\uff01\");\n                 });", "first_line_groundtruth": "orgHandler.updateBasic(org, request.getName() , request.getLeaderId(), userId);", "first_line_prediction": " org = orgHandler.updateOrgBasic(org, request, userId);", "match": 0}
{"groundtruth": "if (newLeader != null && !newLeader.equals(org.getLeaderId())) {", "prediction": " assertOrgLeader.shouldNotHasEmp(org.getTenantId(), org.getId());\n         assertOrgLeader.shouldEffective(org);\n         org.updateLeader(newLeader);\n    }\n\n    private void updateName(Org org, String newName) {\n        assertOrgName.shouldNotHasEmp(org.getTenantId(), org.getId());\n        assertOrgName.shouldEffective(org);\n        org.updateName(newName);\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n        org.updateAuditInfo(userId, LocalDateTime.now());\n    }", "first_line_groundtruth": "if (newLeader != null && !newLeader.equals(org.getLeaderId())) {", "first_line_prediction": " assertOrgLeader.shouldNotHasEmp(org.getTenantId(), org.getId());", "match": 0}
{"groundtruth": "org.cancel();", "prediction": " updateAuditInfo(org, userId);\n    }\n\n    private void updateName(Org org, String newName) {\n        assertOrgName.shouldNotHasEmp(org.getTenantId(), org.getId());\n        assertOrgName.shouldEffective(org);\n        org.setName(newName);\n    }\n\n    private void updateLeader(Org org, Long newLeader) {\n        assertOrgLeader.shouldNotHasEmp(org.getTenantId(), org.getId());\n        assertOrgLeader.shouldEffective(org);\n        org.setLeaderId(newLeader);\n    }\n\n    private void updateAuditInfo(Org org, Long", "first_line_groundtruth": "org.cancel();", "first_line_prediction": " updateAuditInfo(org, userId);", "match": 0}
{"groundtruth": "OrgStatus.ofCode(statusCode));", "prediction": "this.statusCode);\n        org.setLastUpdatedAt(this.lastUpdatedAt);\n        org.setLastUpdatedBy(this.lastUpdatedBy);\n        return org;\n    }", "first_line_groundtruth": "OrgStatus.ofCode(statusCode));", "first_line_prediction": "this.statusCode);", "match": 0}
{"groundtruth": "assertOrgType.shouldEffective(tenantId, orgTypeCode);", "prediction": " assertOrgType.shouldEffective(tenantId, orgTypeCode);\n    }", "first_line_groundtruth": "assertOrgType.shouldEffective(tenantId, orgTypeCode);", "first_line_prediction": " assertOrgType.shouldEffective(tenantId, orgTypeCode);", "match": 0}
{"groundtruth": "= assertSuperior.shouldEffective(tenantId, superiorId);", "prediction": " = orgRepository.findById(superiorId).orElse(null);\n        assertSuperior.shouldEffective(tenantId, superiorId, superiorOrg);\n    }\n\n    private void validateOrgType() {\n        OrgType orgType = orgTypeRepository.findById(orgTypeCode).orElse(null);\n        assertOrgType.shouldEffective(tenantId, orgType);\n    }", "first_line_groundtruth": "= assertSuperior.shouldEffective(tenantId, superiorId);", "first_line_prediction": " = orgRepository.findById(superiorId).orElse(null);", "match": 0}
{"groundtruth": "assertOrgLeader.shouldEffective(org.getTenantId(), newLeader);", "prediction": " assertOrgLeader.shouldLeaderExists(org.getTenantId(), newLeader);\n             org.setLeaderId(newLeader);\n        }\n    }\n\n    private void updateName(Org org, String newName) {\n        if (newName != null && !newName.equals(org.getName())) {\n            assertOrgName.shouldNameExists(org.getTenantId(), newName);\n            org.setName(newName);\n        }\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n        org.setLastUpdateBy(userId);\n        org.setLastUpdateDate(LocalDateTime.now());\n    }", "first_line_groundtruth": "assertOrgLeader.shouldEffective(org.getTenantId(), newLeader);", "first_line_prediction": " assertOrgLeader.shouldLeaderExists(org.getTenantId(), newLeader);", "match": 0}
{"groundtruth": "assertOrgName.shouldNotEmpty(name);", "prediction": " assertOrgName.shouldNotEmpty(name);\n         assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);\n    }\n\n    private void validateOrgType() {\n        assertOrgType.shouldEffective(tenantId, orgTypeCode);\n    }\n\n    private void validateSuperior() {\n        assertSuperior.shouldEffective(tenantId, superiorId);\n    }", "first_line_groundtruth": "assertOrgName.shouldNotEmpty(name);", "first_line_prediction": " assertOrgName.shouldNotEmpty(name);", "match": 0}
{"groundtruth": "), org.getSuperiorId(), newName);", "prediction": " ), org.getSuperiorId( ), newName);\n            org.setName(newName);\n        }\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n        org.setAuditInfo(new AuditInfo(userId, LocalDateTime.now()));\n    }", "first_line_groundtruth": "), org.getSuperiorId(), newName);", "first_line_prediction": " ), org.getSuperiorId( ), newName);", "match": 0}
{"groundtruth": "shouldNotDuplicatedInSameSuperior(org.getTenantId(), org.getSuperiorId(), newName);", "prediction": "shouldEffective(org.getTenantId(), newName);\n            org.setName(newName);\n        }\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n        org.setAuditInfo(new AuditInfo(userId, LocalDateTime.now()));\n    }", "first_line_groundtruth": "shouldNotDuplicatedInSameSuperior(org.getTenantId(), org.getSuperiorId(), newName);", "first_line_prediction": "shouldEffective(org.getTenantId(), newName);", "match": 0}
{"groundtruth": "assertOrgLeader.shouldEffective(tenantId, leaderId);", "prediction": " assertOrgLeader.shouldEffective(tenantId, leaderId);\n    }\n\n    private void validateOrgTenant() {\n        assertOrgTenant.shouldEffective(tenantId);\n    }\n\n    private void validateOrgType() {\n        assertOrgType.shouldEffective(tenantId, orgTypeCode);\n    }\n\n    private void validateSuperior() {\n        assertSuperior.shouldEffective(tenantId, superiorId);\n    }\n\n    private void validateOrgName() {\n        assertOrgName.shouldNotEmpty(name);\n        assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);\n    }", "first_line_groundtruth": "assertOrgLeader.shouldEffective(tenantId, leaderId);", "first_line_prediction": " assertOrgLeader.shouldEffective(tenantId, leaderId);", "match": 0}
{"groundtruth": "assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);", "prediction": " assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);\n    }\n\n    private void validateOrgType() {\n        assertOrgType.shouldEffective(orgTypeCode);\n    }\n\n    private void validateSuperior() {\n        assertSuperior.shouldEffective(tenantId, superiorId);\n    }", "first_line_groundtruth": "assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);", "first_line_prediction": " assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);", "match": 0}
{"groundtruth": "assertOrgType.shouldNotEntp(orgTypeCode);", "prediction": "\n     }", "first_line_groundtruth": "assertOrgType.shouldNotEntp(orgTypeCode);", "first_line_prediction": "", "match": 0}
{"groundtruth": "+ \"' \u7684\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u65e0\u6548!\"));", "prediction": " + \"' \u7684\u7ec4\u7ec7\u7c7b\u578b '\" + superiorOrg.getOrgTypeCode() + \"' \u4e0d\u5b58\u5728\uff01\"));\n    }", "first_line_groundtruth": "+ \"' \u7684\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u65e0\u6548!\"));", "first_line_prediction": " + \"' \u7684\u7ec4\u7ec7\u7c7b\u578b '\" + superiorOrg.getOrgTypeCode() + \"' \u4e0d\u5b58\u5728\uff01\"));", "match": 0}
{"groundtruth": "assertOrgType.shouldNotEmpty(orgTypeCode);", "prediction": " assertOrgType.shouldEffective(tenantId, orgTypeCode);\n    }", "first_line_groundtruth": "assertOrgType.shouldNotEmpty(orgTypeCode);", "first_line_prediction": " assertOrgType.shouldEffective(tenantId, orgTypeCode);", "match": 0}
{"groundtruth": "waitPoint.reset();", "prediction": " try {\n            this.waitPoint.await(interval, TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n            log.error(\"Interrupted\", e);\n         }", "first_line_groundtruth": "waitPoint.reset();", "first_line_prediction": " try {", "match": 0}
{"groundtruth": "metrics.start();", "prediction": " metrics.start(executionId);\n        TaskResult result = service.process(input, flow.getServiceContext());\n        metrics.stop(executionId);\n        return result;\n    }\n\n    @Override\n    public void exception(Throwable e) {\n        service.exception(e);\n    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override\n    public boolean isFinalTask() {\n        return finalTask;\n    }\n\n    @Override\n    public String getFlowType() {\n        return flowType;\n    }\n\n    @Override\n    public Metrics getMetrics() {\n        return metrics;\n    }", "first_line_groundtruth": "metrics.start();", "first_line_prediction": " metrics.start(executionId);", "match": 0}
{"groundtruth": "null, flow.getServiceContext());", "prediction": "service.getMessage(), service.getContext());\n                    service.after();\n                } catch (Exception e) {\n                    log.error(\"\u670d\u52a1\u6267\u884c\u5931\u8d25\", e);\n                }\n            }\n        }\n        log.info(getServiceName() + \" stop\");\n    }\n\n    @Override\n    public void onStop() {\n        stopped = true;\n    }\n\n    @Override\n    public void onWaitEnd() {\n        queue.clear();\n    }\n\n    @Override\n    public void onShutdown() {\n        stopped = true;\n    }\n\n    @Override\n    public void onShutdownNow() {\n        stopped = true;\n    }\n\n    @Override\n    public void", "first_line_groundtruth": "null, flow.getServiceContext());", "first_line_prediction": "service.getMessage(), service.getContext());", "match": 0}
{"groundtruth": "process(input, getFlow().getServiceContext());", "prediction": "process(input, flow.getServiceContext());\n        metrics.stop();\n        return TaskResult.builder()\n                .executionId(executionId)\n                .status(TaskStatusEnum.SUCCESS)\n                .output(output)\n                .taskId(id)\n                .build();\n    }\n\n    @Override\n    public TaskResult exception(Throwable e) {\n        String executionId = IdUtil.fastUUID();\n        log.info(\"\u6267\u884c id\uff1a{}\", executionId);\n        metrics.start();\n        TaskResult result = TaskResult.builder()\n                .executionId(executionId)\n                .status(TaskStatusEnum.FAIL)\n                .", "first_line_groundtruth": "process(input, getFlow().getServiceContext());", "first_line_prediction": "process(input, flow.getServiceContext());", "match": 0}
{"groundtruth": "if (StringUtils.hasText(groovyCode) && HadesCache.diff(instanceName, groovyCode)) {", "prediction": " // \u89e3\u6790groovy\u4ee3\u7801\n                if (StringUtils.hasText(groovyCode)) {\n                    GroovyUtils.parse(groovyCode);\n                    registerBeanService.registerBean(instanceName);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#bootstrap fail:{}\", Throwables.getStackTraceAsString(e));\n        }\n    }\n\n    /**\n     * \u76d1\u542c\u5668\n     */\n    private void addListener() {\n        HadesCache.addConfigListener(configProperties.getConfigName(), this::bootstrap);\n    }\n\n    /**\n     * \u76d1\u542c\u5668\n     *\n     * @param config", "first_line_groundtruth": "if (StringUtils.hasText(groovyCode) && HadesCache.diff(instanceName, groovyCode)) {", "first_line_prediction": " // \u89e3\u6790groovy\u4ee3\u7801", "match": 0}
{"groundtruth": "= GroovyUtils.parseClass(instanceName, groovyCode);", "prediction": " = GroovyUtils.loadGroovyClass(groovyCode);\n        registerBeanService.registerBean(instanceName, clazz);\n    }\n\n    /**\n     * \u6ce8\u518c\u76d1\u542c\u5668\n     */\n    public void addListener() {\n        registerBeanService.registerListener(configProperties.getConfigName());\n    }", "first_line_groundtruth": "= GroovyUtils.parseClass(instanceName, groovyCode);", "first_line_prediction": " = GroovyUtils.loadGroovyClass(groovyCode);", "match": 0}
{"groundtruth": "Object bean = registerBeanService.registerBean(instanceName, clazz);", "prediction": " registerBeanService.registerBean(instanceName, clazz);\n        }\n    }\n\n    /**\n     * \u6ce8\u518c\u76d1\u542c\u5668\n     */\n    public void addListener() {\n        HadesCache.addListener(configProperties.getConfigName(), this::bootstrap);\n    }", "first_line_groundtruth": "Object bean = registerBeanService.registerBean(instanceName, clazz);", "first_line_prediction": " registerBeanService.registerBean(instanceName, clazz);", "match": 0}

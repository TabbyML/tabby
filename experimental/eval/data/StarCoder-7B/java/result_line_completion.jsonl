{"groundtruth": "int startAngle = ((Arc) object).getStartAngle();", "prediction": "\n\n                g.setColor(((Arc) object).getColor());\n                g.fillArc(x, y, width, height, ((Arc) object).getAngleStart(), ((Arc) object).getAngleEnd());\n            } else if (object instanceof Line) {\n                int width = ((Line) object).getWidth();\n                int height = ((Line) object).getHeight();\n\n                g.setColor(((Line) object).getColor());\n                g.drawLine(x, y, x + width, y + height);\n            } else if (object instanceof Text) {\n                int width = ((Text) object).getWidth();\n                int height", "first_line_groundtruth": "int startAngle = ((Arc) object).getStartAngle();", "first_line_prediction": "", "match": 0}
{"groundtruth": "((Line) object).getColor());", "prediction": "Color.BLACK);\n                g.drawLine(x, y, endX, endY);\n            } else if (object instanceof Text) {\n                int width = ((Text) object).getWidth();\n                int height = ((Text) object).getHeight();\n                String text = ((Text) object).getText();\n\n                g.setColor(Color.BLACK);\n                g.drawString(text, x, y);\n            }\n        }\n    }\n\n    public void draw(Shape object) {\n        this.drawQueue.add(object);\n        repaint();\n    }\n\n    public void clear() {\n        this.drawQueue.clear", "first_line_groundtruth": "((Line) object).getColor());", "first_line_prediction": "Color.BLACK);", "match": 0}
{"groundtruth": "(Arc) object).getStopAngle();", "prediction": "int) ((Arc) object).getStopAngle();\n\n                g.setColor(((Arc) object).getColor());\n                g.fillArc(x, y, width, height, startAngle, stopAngle - startAngle);\n            } else if (object instanceof Line) {\n                int x1 = ((Line) object).getX1();\n                int y1 = ((Line) object).getY1();\n                int x2 = ((Line) object).getX2();\n                int y2 = ((Line) object).getY2();\n\n                g.setColor(((Line) object).getColor());\n                g.drawLine(x1, y", "first_line_groundtruth": "(Arc) object).getStopAngle();", "first_line_prediction": "int) ((Arc) object).getStopAngle();", "match": 0}
{"groundtruth": "server.blockUntilShutdown();", "prediction": " System.out.println(\"Process B started\");\n        Thread.sleep(1000000000);\n        server.stop();\n        System.out.println(\"Process B stopped\");\n    }", "first_line_groundtruth": "server.blockUntilShutdown();", "first_line_prediction": " System.out.println(\"Process B started\");", "match": 0}
{"groundtruth": "HttpClientUtil.sendGetRequest();", "prediction": " try (OpenTelemetry openTelemetry = GlobalOpenTelemetry.get()) {\n                Tracer tracer = openTelemetry.getTracer(\"ProcessC\");\n                Span span = tracer.spanBuilder(\"ProcessC\").startSpan();\n                span.setAttribute(\"messageId\", messageView.getMessageId());\n                span.setAttribute(\"body\", messageView.getBody());\n                span.end();\n            }\n        });\n    }", "first_line_groundtruth": "HttpClientUtil.sendGetRequest();", "first_line_prediction": " try (OpenTelemetry openTelemetry = GlobalOpenTelemetry.get()) {", "match": 0}
{"groundtruth": "GreetingClient.start();", "prediction": " GreetingClient client = new GreetingClient(\"localhost\", 8080);\n             String greeting = client.sayHello(\"World\");\n             System.out.println(\"Greeting: \" + greeting);\n        } finally {\n            span.end();\n        }\n    }", "first_line_groundtruth": "GreetingClient.start();", "first_line_prediction": " GreetingClient client = new GreetingClient(\"localhost\", 8080);", "match": 0}
{"groundtruth": "RocketMqClients.CreatePushConsumer(messageView -> {", "prediction": " OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();\n         Tracer tracer = openTelemetry.getTracer(\"ProcessC\");\n         Span span = tracer.spanBuilder(\"ProcessC\").startSpan();\n         span.setAttribute(\"ProcessC\", \"ProcessC\");\n         span.setAttribute(\"ProcessC\", \"ProcessC\");\n         span.setAttribute(\"ProcessC\", \"ProcessC\");\n         span.setAttribute(\"ProcessC\", \"ProcessC\");\n         span.setAttribute(\"ProcessC\", \"ProcessC\");\n         span.setAttribute(\"ProcessC\", \"ProcessC\");\n         span.setAttribute(\"ProcessC\", \"ProcessC\");\n         span.setAttribute", "first_line_groundtruth": "RocketMqClients.CreatePushConsumer(messageView -> {", "first_line_prediction": " OpenTelemetry openTelemetry = GlobalOpenTelemetry.get();", "match": 0}
{"groundtruth": "Producer producer = RocketMqClients.CreateProducer();", "prediction": " Producer producer = RocketMqClients.getProducer();\n             SendReceipt sendReceipt = producer.send(request.getTopic(), request.getMessage().toByteArray());\n             logger.info(\"Send message to topic={}, message={}\", request.getTopic(), request.getMessage());\n             responseObserver.onNext(io.github.aaronai.proto.GreetingOuterClass.SayHelloResponse.newBuilder()\n                     .setTopic(request.getTopic())\n                     .setMsgId(sendReceipt.getMsgId())\n                     .build());\n             responseObserver.onCompleted();\n        } catch (ClientException e) {\n            logger.error(\"Failed to", "first_line_groundtruth": "Producer producer = RocketMqClients.CreateProducer();", "first_line_prediction": " Producer producer = RocketMqClients.getProducer();", "match": 0}
{"groundtruth": "systemMessage.setContent(systemprompt);", "prediction": " systemMessage.setText(systemprompt);\n            messages.add(systemMessage);\n\n            // User prompt\n            Message userMessage = new Message();\n            userMessage.setRole(\"user\");\n            userMessage.setText(update.message().text());\n            messages.add(userMessage);\n\n            // Add examples\n            for(String example : this.examples) {\n                Message message = new Message();\n                message.setRole(\"example\");\n                message.setText(example);\n                messages.add(message);\n            }\n\n            // Add presentation\n            if(StringUtils.isNotBlank(presentation)) {\n                Message message = new Message();\n                message", "first_line_groundtruth": "systemMessage.setContent(systemprompt);", "first_line_prediction": " systemMessage.setText(systemprompt);", "match": 0}
{"groundtruth": "\"Contador de tokens: %d\",gptService.getNumTokens());", "prediction": "\n                \"You have %s tokens remaining in your GPT generation quota.\",\n                this.gptService.getRemainingTokens());\n        sendReply(update, message);\n    }", "first_line_groundtruth": "\"Contador de tokens: %d\",gptService.getNumTokens());", "first_line_prediction": "", "match": 0}
{"groundtruth": "chatRequest.setMaxTokens(maxtokens);", "prediction": " // Get the chat object from the update\n            Chat chat = update.message().chat();\n            chatRequest.setPrompt(systemprompt);\n            chatRequest.setStream(false);\n            chatRequest.setEngine(\"davinci\");\n            chatRequest.setStop(false);\n            chatRequest.setPresence(false);\n            chatRequest.setExploration(false);\n            chatRequest.setPresence(false);\n            chatRequest.setPresence(false);\n            chatRequest.setPresence(false);\n            chatRequest.setPresence(false);\n            chatRequest.setPresence(false);\n            chatRequest.set", "first_line_groundtruth": "chatRequest.setMaxTokens(maxtokens);", "first_line_prediction": " // Get the chat object from the update", "match": 0}
{"groundtruth": "chatRequest.setModel(model);", "prediction": " chatRequest.setEngine(model);\n             chatRequest.setPrompt(systemprompt);\n             chatRequest.setTemperature(temperature);\n             chatRequest.setMaxTokens(maxtokens);\n             chatRequest.setStream(false);\n             chatRequest.setPresence(false);\n             chatRequest.setStop(false);\n             chatRequest.setTruncate(false);\n             chatRequest.setPresence(false);\n             chatRequest.setExpert(false);\n             chatRequest.setEngine(model);\n             chatRequest.setStream(false);\n             chatRequest.setStop(false);\n             chatRequest.setExpert", "first_line_groundtruth": "chatRequest.setModel(model);", "first_line_prediction": " chatRequest.setEngine(model);", "match": 0}
{"groundtruth": "systemMessage.setRole(\"system\");", "prediction": " systemMessage.setText(systemprompt);\n             messages.add(systemMessage);", "first_line_groundtruth": "systemMessage.setRole(\"system\");", "first_line_prediction": " systemMessage.setText(systemprompt);", "match": 0}
{"groundtruth": "userMessage.setContent(this.presentation);", "prediction": " // Add the custom message to the list of messages\n            userMessage.setContent(text);\n            messages.add(userMessage);\n\n            // set messages to the request\n            chatRequest.setMessages(messages);\n\n            // Send synchronous request to the OpenAI Api\n            response = client.getCompletion(chatRequest);\n            // Incremet token counter\n            ntokens = ntokens + response.getUsage().getTotalTokens();\n\n            // Return text to be sent to the user\n            return response.getChoices().get(0).getMessage().getContent();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"I'm", "first_line_groundtruth": "userMessage.setContent(this.presentation);", "first_line_prediction": " // Add the custom message to the list of messages", "match": 0}
{"groundtruth": "exampleMessage.setRole(role.toLowerCase());", "prediction": " exampleMessage.setRole(role);\n                     exampleMessage.setContent(content);\n                     results.add(exampleMessage);\n                }\n            } catch (Exception e) {\n                log.error(\"Error parsing example: \" + example);\n            }\n        }\n        return results;\n    }\n\n    /**\n     * This method checks if the user is authorized to talk to the bot.\n     * @param update the update object containing the user input\n     * @return true if the user is authorized, false otherwise\n     */\n    private boolean checkPermission(Update update) {\n        if(this.whiteSet==null) {\n            return true;\n       ", "first_line_groundtruth": "exampleMessage.setRole(role.toLowerCase());", "first_line_prediction": " exampleMessage.setRole(role);", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u63d0\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u662f\uff1a\" + i);", "prediction": " Log.d(TAG, \"extractFirstIntFromString: \" + i);\n        }\n        return i;\n    }\n\n    // \u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u7b2c\u4e00\u4e2a\u6574\u6570\n    public static String extractFirstStringFromString(String str){\n        Pattern p = Pattern.compile(\"[a-zA-Z]+\");\n        Matcher m = p.matcher(str);\n\n        String i = \"\";\n        if (m.find()){\n            i = m.group();\n             Log.d(TAG, \"extractFirstStringFromString: \" + i);\n        }\n        return i;\n    }\n\n    // \u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u7b2c\u4e00\u4e2a\u6574\u6570\n    public static String extract", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u63d0\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u662f\uff1a\" + i);", "first_line_prediction": " Log.d(TAG, \"extractFirstIntFromString: \" + i);", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");", "prediction": " // \u70b9\u51fb\u201c\u6211\u7684\u201d\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u201c\u6211\u7684\u201d\");\n        AccUtils.clickByText(\"\u6211\u7684\");\n        AccUtils.timeSleep(2000);\n\n        // \u70b9\u51fb\u201c\u6211\u7684\u201d\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u201c\u6211\u7684\u201d\");\n        AccUtils.clickByText(\"\u6211\u7684\");\n        AccUtils.timeSleep(2000);\n\n        // \u70b9\u51fb\u201c\u6211\u7684\u201d\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u201c\u6211\u7684\u201d\");\n        AccUtils.clickByText(\"\u6211\u7684\");\n        AccUtils.timeSleep(2000);\n\n        // ", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");", "first_line_prediction": " // \u70b9\u51fb\u201c\u6211\u7684\u201d", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5f00\");", "prediction": " // \u70b9\u51fb\u5de5\u4f5c\u53f0\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLog", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5f00\");", "first_line_prediction": " // \u70b9\u51fb\u5de5\u4f5c\u53f0", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");", "prediction": " // \u70b9\u51fb\u201c\u4eca\u65e5\u5df2\u5b8c\u6210\u201d\n        List<AccessibilityNodeInfo> list = AccUtils.findAccessibilityNodeInfoByText(\"\u4eca\u65e5\u5df2\u5b8c\u6210\");\n        if (list.size() > 0) {\n            AccUtils.clickAccessibilityNodeInfo(list.get(0));\n        }\n\n        // \u70b9\u51fb\u201c\u4eca\u65e5\u5df2\u5b8c\u6210\u201d\n        list = AccUtils.findAccessibilityNodeInfoByText(\"\u4eca\u65e5\u5df2\u5b8c\u6210\");\n        if (list.size() > 0) {\n            AccUtils.clickAccessibilityNodeInfo(list.get(0));\n        }\n\n        // \u70b9\u51fb\u201c\u4eca\u65e5\u5df2\u5b8c\u6210\u201d\n        list = Acc", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");", "first_line_prediction": " // \u70b9\u51fb\u201c\u4eca\u65e5\u5df2\u5b8c\u6210\u201d", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");", "prediction": " //Rect(425, 1280 - 656, 1362); packageName: com.alibaba.android.rimet; className: android.view.View; text: \u8003", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");", "first_line_prediction": " //Rect(425, 1280 - 656, 1362); packageName: com.alibaba.android.rimet; className: android.view.View; text: \u8003", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6682\u65f6\u4e0d\");", "prediction": " // \u70b9\u51fb\u7b7e\u5230\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u7b7e\u5230\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u7b7e\u5230\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u7b7e\u5230\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u7b7e\u5230\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u7b7e\u5230\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u7b7e\u5230\"));\n        AccUtils.timeSleep", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6682\u65f6\u4e0d\");", "first_line_prediction": " // \u70b9\u51fb\u7b7e\u5230", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u6807\u9898 => \" + videoDesc);", "prediction": " if (videoDesc != null) {\n                 AccUtils.printLogMsg(\"videoDesc: \" + videoDesc);\n                 break;\n             }\n        }\n        AccUtils.moveFloatWindow(\"\u5173\u95ed\");\n        AccUtils.printLogMsg(\"close dy App\");\n        AccUtils.closeApp(\"", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u6807\u9898 => \" + videoDesc);", "first_line_prediction": " if (videoDesc != null) {", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");", "prediction": " // \u70b9\u51fb\u201c\u6211\u201d\n        AccUtils.clickView(AccUtils.findViewByText(\"\u6211\"));\n        AccUtils.timeSleep(500);\n\n        // \u70b9\u51fb\u201c\u6211\u7684\u65e5\u5386\u201d\n        AccUtils.clickView(AccUtils.findViewByText(\"\u6211\u7684\u65e5\u5386\"));\n        AccUtils.timeSleep(500);\n\n        // \u70b9\u51fb\u201c\u4eca\u65e5\u201d\n        AccUtils.clickView(AccUtils.findViewByText(\"\u4eca\u65e5\"));\n        AccUtils.timeSleep(500);\n\n        // \u70b9\u51fb\u201c\u4eca\u65e5\u201d\n        AccUtils.clickView(AccUtils.", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");", "first_line_prediction": " // \u70b9\u51fb\u201c\u6211\u201d", "match": 0}
{"groundtruth": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));", "prediction": " AccUtils.clickView(AccUtils.findViewByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickView(AccUtils.findViewByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickView(AccUtils.findViewByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils", "first_line_groundtruth": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));", "first_line_prediction": " AccUtils.clickView(AccUtils.findViewByText(\"\u5de5\u4f5c\u53f0\"));", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u597d\u7684\");", "prediction": " // \u70b9\u51fb\u6253\u5361\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u6253\u5361\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u6253\u5361\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u6253\u5361\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLog", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u597d\u7684\");", "first_line_prediction": " // \u70b9\u51fb\u6253\u5361", "match": 0}
{"groundtruth": "dyTaskService.main();", "prediction": " dyTaskService.startService(Variable.context);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n\n    // \u4efb\u52a1\u5f00\u59cb\u5165\u53e3\n    private void start_run_dingding() {\n        new Thread(new Runnable() {\n            @RequiresApi(api = Build.VERSION_CODES.N)\n            @Override\n            public void run() {\n                try {\n\n                    DingDingService dingDingService = new DingDingService();\n                    dingDingService.startService(Variable.context);\n                } catch (Exception e) {", "first_line_groundtruth": "dyTaskService.main();", "first_line_prediction": " dyTaskService.startService(Variable.context);", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u5411\u4e0b\u6ed1\u52a8\");", "prediction": " // \u70b9\u6389\u5f39\u7a97\n            AccessibilityNodeInfo elementByText1 = AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");\n            if (elementByText1 != null) {\n                AccUtils.clickNodeByPoint(elementByText1);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n            AccessibilityNodeInfo element1 = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");\n            if (element1 != null) {\n                AccUtils.clickNodeByPoint(element1);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n            AccessibilityNodeInfo closeNode1 = AccUtils.findElementByText", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u5411\u4e0b\u6ed1\u52a8\");", "first_line_prediction": " // \u70b9\u6389\u5f39\u7a97", "match": 0}
{"groundtruth": "= AccUtils.findElementListByContainText(\"\u6253\u5361\");", "prediction": " = AccUtils.findAccessibilityNodeInfoByContainText(\"\u4e0a\u73ed\u6253\u5361\");\n        if (listByContainText.size() > 0) {\n            AccessibilityNodeInfo nodeInfo = listByContainText.get(0);\n            Rect rect = new Rect();\n            nodeInfo.getBoundsInScreen(rect);\n            int x = rect.centerX();\n            int y = rect.centerY();\n            AccUtils.click(x, y);\n            AccUtils.timeSleep(3000);\n        }\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u786e\u5b9a\");\n        AccUtils.clickParentCanClick(AccUtils", "first_line_groundtruth": "= AccUtils.findElementListByContainText(\"\u6253\u5361\");", "first_line_prediction": " = AccUtils.findAccessibilityNodeInfoByContainText(\"\u4e0a\u73ed\u6253\u5361\");", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u6253\u5361\u5b8c\u6210\uff0c\u8fd4\u56de\u684c\u9762\");", "prediction": " //Rect(425, 1280 - 656, 1362); packageName: com.alibaba.android.rimet; className: android.view.View; text: \u4e0a\u73ed\u6253\u5361;\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");\n        listByContainText = AccUtils.findElementListByContainText(\"\u6253\u5361\");\n        if (listByContainText != null && listByContainText.size() > 0) {\n            for (AccessibilityNodeInfo nodeInfo : listByContainText) {\n                Rect rect = new Rect();\n                nodeInfo.getBounds", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u6253\u5361\u5b8c\u6210\uff0c\u8fd4\u56de\u684c\u9762\");", "first_line_prediction": " //Rect(425, 1280 - 656, 1362); packageName: com.alibaba.android.rimet; className: android.view.View; text: \u4e0a\u73ed\u6253\u5361;", "match": 0}
{"groundtruth": "TinkerManager.setUpgradeRetryEnable(true);", "prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c\n        Log.i(TAG, \"onBaseContextAttached: \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\");\n        Variable.context = getApplication().getBaseContext();\n    }", "first_line_groundtruth": "TinkerManager.setUpgradeRetryEnable(true);", "first_line_prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c", "match": 0}
{"groundtruth": "AccUtils.findElementByText(\"\u8003\u52e4\u6253\u5361\"));", "prediction": "AccUtils.findElementByText(\"\u8003", "first_line_groundtruth": "AccUtils.findElementByText(\"\u8003\u52e4\u6253\u5361\"));", "first_line_prediction": "AccUtils.findElementByText(\"\u8003", "match": 0}
{"groundtruth": "TinkerManager.installTinker(this);", "prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c\n        Log.i(TAG, \"onBaseContextAttached: \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\");\n        Variable.context = getApplication().getBaseContext();\n    }", "first_line_groundtruth": "TinkerManager.installTinker(this);", "first_line_prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c", "match": 0}
{"groundtruth": "= AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");", "prediction": " = AccUtils.getElementByText(\"\u70b9\u6389\");\n            if (elementByText != null) {\n                elementByText.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n                AccUtils.timeSleep(waitTwoSecond);\n            }\n\n            // \u70b9\u6389\u5f39\u7a97\n            AccessibilityNodeInfo elementByText2  = AccUtils.getElementByText(\"\u70b9\u6389\");\n            if (elementByText2 != null) {\n                elementByText2.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n                AccUtils.timeSleep(waitTwoSecond);\n            }\n\n            // \u70b9\u6389\u5f39\u7a97\n            AccessibilityNodeInfo elementByText", "first_line_groundtruth": "= AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");", "first_line_prediction": " = AccUtils.getElementByText(\"\u70b9\u6389\");", "match": 0}
{"groundtruth": "element = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");", "prediction": " elementByText2 = AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");\n            if (elementByText2 != null) {\n                AccUtils.clickNodeByPoint(elementByText2);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n\n            // \u70b9\u6389\u5f39\u7a97\n            AccessibilityNodeInfo elementByText3 = AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");\n            if (elementByText3 != null) {\n                AccUtils.clickNodeByPoint(elementByText3);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n            AccessibilityNodeInfo  elementByText4 = Acc", "first_line_groundtruth": "element = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");", "first_line_prediction": " elementByText2 = AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"open dy App\");", "prediction": " //\u83b7\u53d6\u89c6\u9891\u5217\u8868\n        List<AccessibilityNodeInfo> videoList = AccUtils.getAccessibilityNodeInfoByClassName(\"android.widget.FrameLayout\");\n        if (videoList.size() == 0) {\n            throw new ExitException(\"\u89c6\u9891\u5217\u8868\u4e3a\u7a7a\");\n        }\n        //\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u89c6\u9891\n        Random random = new Random();\n        int index = random.nextInt(videoList.size());\n        AccessibilityNodeInfo videoNode = videoList.get(index);\n        //\u83b7\u53d6\u89c6\u9891\u6807\u9898\n        String videoTitle = AccUtils.getAccessibilityNodeInfoByClassName(\"android.widget.TextView\").getText().toString();\n        //\u83b7\u53d6\u89c6\u9891\u64ad\u653e\u5668", "first_line_groundtruth": "AccUtils.printLogMsg(\"open dy App\");", "first_line_prediction": " //\u83b7\u53d6\u89c6\u9891\u5217\u8868", "match": 0}
{"groundtruth": "AccUtils.openApp(\"\u6296\u97f3\");", "prediction": " // \u6253\u5f00\u5fae\u4fe1\n        AccUtils.openApp(\"com.ss.android.ugc.aweme\");\n        AccUtils.printLogMsg(\"open dy App success\");\n        // \u6253\u5f00\u89c6\u9891\n        AccUtils.openApp(\"com.ss.android.ugc.aweme.video\");\n        AccUtils.printLogMsg(\"open dy video success\");\n        // \u6253\u5f00\u89c6\u9891\n        AccUtils.openApp(\"com.ss.android.ugc.aweme.main\");\n        AccUtils.printLogMsg(\"open dy main success\");\n        // \u6253\u5f00\u89c6\u9891\n        AccUtils.openApp(\"com.", "first_line_groundtruth": "AccUtils.openApp(\"\u6296\u97f3\");", "first_line_prediction": " // \u6253\u5f00\u5fae\u4fe1", "match": 0}
{"groundtruth": "TinkerManager.setTinkerApplicationLike(this);", "prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c\n        Log.i(TAG, \"onBaseContextAttached: \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\");\n        Variable.context = base;\n    }\n\n    @Override\n    public void onBaseContextDetached() {\n        super.onBaseContextDetached();\n        Log.i(TAG, \"onBaseContextDetached: \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\");\n        Variable.context = null;\n    }\n\n    @Override\n    public void onTinkerPatchResult(int resultCode, String resultMsg) {\n        super.onTinkerPatchResult(resultCode, resultMsg);\n        Log.i(TAG, \"onT", "first_line_groundtruth": "TinkerManager.setTinkerApplicationLike(this);", "first_line_prediction": " // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c", "match": 0}
{"groundtruth": "Utils.isBackground()) {", "prediction": "result.isSuccess) {\n                    TinkerServiceInternals.killTinkerPatchServiceProcess(getApplicationContext());\n                }\n            }\n        }\n    }", "first_line_groundtruth": "Utils.isBackground()) {", "first_line_prediction": "result.isSuccess) {", "match": 0}
{"groundtruth": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u627e\u5230\u6574\u6570\uff01\");", "prediction": " AccUtils.printLogMsg(\"\u63d0\u53d6\u4e0d\u5230\u7b2c\u4e00\u4e2a\u6574\u6570\");\n        }\n        return i;\n    }", "first_line_groundtruth": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u627e\u5230\u6574\u6570\uff01\");", "first_line_prediction": " AccUtils.printLogMsg(\"\u63d0\u53d6\u4e0d\u5230\u7b2c\u4e00\u4e2a\u6574\u6570\");", "match": 0}
{"groundtruth": "WindowPermissionCheck.checkPermission(this);", "prediction": " WindowPermissionCheck.checkPermission(this);\n        if (permission) {\n            TxTManager.show(this);\n        } else {\n            TxTManager.show(this);\n        }\n\n        // \u6ce8\u518c\u5e7f\u64ad\n        registerReceiver(mReceiver, new IntentFilter(DingDingService.ACTION_DINGDING_SERVICE));\n        registerReceiver(mReceiver, new IntentFilter(DyTaskService.ACTION_DY_SERVICE));\n        registerReceiver(mReceiver, new IntentFilter(MyService.ACTION_MY_SERVICE));\n\n        // \u6ce8\u518c\u76d1\u542c\n        registerListener();\n\n        // \u6ce8\u518c\u6743\u9650\n        register", "first_line_groundtruth": "WindowPermissionCheck.checkPermission(this);", "first_line_prediction": " WindowPermissionCheck.checkPermission(this);", "match": 0}
{"groundtruth": "AccUtils.timeSleep(3000);", "prediction": " AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n         AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n         AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));", "first_line_groundtruth": "AccUtils.timeSleep(3000);", "first_line_prediction": " AccUtils.timeSleep(2000);", "match": 0}
{"groundtruth": "AccUtils.timeSleep(6000);", "prediction": " AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u8003", "first_line_groundtruth": "AccUtils.timeSleep(6000);", "first_line_prediction": " AccUtils.timeSleep(3000);", "match": 0}
{"groundtruth": "AccUtils.timeSleep(2000);", "prediction": "\n\n        AccUtils.printLogMsg(\"\u8fdb\u5165\u6253\u5361\u754c\u9762\");\n        AccUtils.startApplication(Variable.context, \"com.alibaba.android.rimet\");\n        AccUtils.timeSleep(7000);\n\n        AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");\n        AccUtils.back();\n\n        AccUtils.printLogMsg(\"\u8fdb\u5165\u6253\u5361\u754c\u9762\");\n        AccUtils.startApplication(Variable.context, \"com.alibaba.android.rimet\");\n        AccUtils.timeSleep(7000);\n\n        AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");\n        AccUtils.", "first_line_groundtruth": "AccUtils.timeSleep(2000);", "first_line_prediction": "", "match": 0}
{"groundtruth": "AccUtils.timeSleep(7000);", "prediction": " // \u7b49\u5f85\u542f\u52a8\n        Thread.sleep(1000);\n        AccUtils.printLogMsg(\"\u542f\u52a8\u6210\u529f\");\n\n        // \u70b9\u51fb\u767b\u5f55\n        AccUtils.clickView(AccUtils.findViewByText(\"\u767b\u5f55\"));\n        Thread.sleep(1000);\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u767b\u5f55\");\n\n        // \u8f93\u5165\u8d26\u53f7\u5bc6\u7801\n        AccUtils.inputText(AccUtils.findViewByText(\"\u8d26\u53f7\"), Variable.account);\n        AccUtils.inputText(AccUtils.findViewByText(\"\u5bc6\u7801\"), Variable.password);\n        Thread.sleep(1000);\n        Acc", "first_line_groundtruth": "AccUtils.timeSleep(7000);", "first_line_prediction": " // \u7b49\u5f85\u542f\u52a8", "match": 0}
{"groundtruth": "returnCode = Utils.checkForPatchRecover(NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN, maxMemory);", "prediction": " returnCode = checkPatchReceived(path, patchMd5);\n        }\n\n        return returnCode;\n    }\n\n    private int checkPatchReceived(String path, String patchMd5) {\n        File patchFile = new File(path);\n        if (SharePatchFileUtil.getFileOrDirectorySize(patchFile) < NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN) {\n            TinkerLog.i(TAG, \"patch file size is too small, ignore it\");\n            return ShareConstants.ERROR_PATCH_OK;\n        }\n\n        if (patchMd5 == null) {\n            TinkerLog.", "first_line_groundtruth": "returnCode = Utils.checkForPatchRecover(NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN, maxMemory);", "first_line_prediction": " returnCode = checkPatchReceived(path, patchMd5);", "match": 0}
{"groundtruth": "ntokens = ntokens + response.getUsage().getTotalTokens();", "prediction": " this.ntokens += response.getTokens().length;\n\n        } catch (Exception e) {\n            log.error(\"Error while sending message to OpenAI API\", e);\n            return \"I'm sorry but I can't talk to you, please try again later.\";\n        }\n\n        // If the response is null, then the API returned an error\n        if(response == null) {\n            return \"I'm sorry but I can't talk to you, please try again later.\";\n        }\n\n        // If the response is empty, then the API returned an empty response\n        if(response.getMessages().isEmpty()) {\n            return", "first_line_groundtruth": "ntokens = ntokens + response.getUsage().getTotalTokens();", "first_line_prediction": " this.ntokens += response.getTokens().length;", "match": 0}
{"groundtruth": ".setContent(response.getChoices().get(0).getMessage().getContent());", "prediction": ".setContent(response.getCompletions().get(0).getText());\n                userContext.get(update.message().from().id()).add(assistantMessage);\n            }\n\n            // Return the response\n            return response.getCompletions().get(0).getText();\n\n        } catch (Exception e) {\n            log.error(\"Error while sending message to OpenAI API\", e);\n            return \"I'm sorry but I can't talk to you, please try again later.\";\n        }\n    }\n\n    /**\n     * This method checks if the user is authorized to talk to the bot.\n     * @param update the update object", "first_line_groundtruth": ".setContent(response.getChoices().get(0).getMessage().getContent());", "first_line_prediction": ".setContent(response.getCompletions().get(0).getText());", "match": 0}
{"groundtruth": "out.println(filme.getNome()+\" - \"+filme.getDuracao());", "prediction": "out.println(\"Play: \"+filme.getNome()+\" - \"+filme.getDuracao());\n            }\n        }\n    }\n    public void stop(){\n        if(emPlay){\n            emPlay = false;\n            System.out.println(\"Stop\");\n        }\n    }", "first_line_groundtruth": "out.println(filme.getNome()+\" - \"+filme.getDuracao());", "first_line_prediction": "out.println(\"Play: \"+filme.getNome()+\" - \"+filme.getDuracao());", "match": 0}
{"groundtruth": "itempedido.getPreco();", "prediction": " itempedido.getValor();\n        }\n        return total;\n    }\n\n    public int getCodigo() {\n        return codigo;\n    }\n\n    public void setCodigo(int codigo) {\n        this.codigo = codigo;\n    }", "first_line_groundtruth": "itempedido.getPreco();", "first_line_prediction": " itempedido.getValor();", "match": 0}
{"groundtruth": "= meuDVD.removerFilme();", "prediction": " = meuDVD.devolverFilme();\n        System.out.println(filmeDevolvido);\n        System.out.println(meuDVD);\n        meuDVD.inserirFilme(filme2);\n        System.out.println(meuDVD);\n        meuDVD.play();\n        System.out.println(meuDVD);\n        meuDVD.ligar();\n        meuDVD.inserirFilme(filme2);\n        System.out.println(meuDVD);\n        meuDVD.play();", "first_line_groundtruth": "= meuDVD.removerFilme();", "first_line_prediction": " = meuDVD.devolverFilme();", "match": 0}
{"groundtruth": "meuDVD.aumentarVolume();", "prediction": "\n        \n    }", "first_line_groundtruth": "meuDVD.aumentarVolume();", "first_line_prediction": "", "match": 0}
{"groundtruth": "(filme.getNome()+\" - \"+filme.getDuracao());", "prediction": "(\"Play: \"+filme.getNome()+\" - \"+filme.getDuracao());\n            }\n        }\n    }\n    public void stop(){\n        if(emPlay){\n            emPlay = false;\n            System.out.println(\"Stop\");\n        }\n    }", "first_line_groundtruth": "(filme.getNome()+\" - \"+filme.getDuracao());", "first_line_prediction": "(\"Play: \"+filme.getNome()+\" - \"+filme.getDuracao());", "match": 0}
{"groundtruth": "meuDVD.diminuirVolume();", "prediction": "\n        \n    }", "first_line_groundtruth": "meuDVD.diminuirVolume();", "first_line_prediction": "", "match": 0}
{"groundtruth": "meuDVD.play();", "prediction": "\n        \n    }", "first_line_groundtruth": "meuDVD.play();", "first_line_prediction": "", "match": 0}
{"groundtruth": "this.ipList.put(Sneaky.stringifyAddress(address), System.currentTimeMillis());", "prediction": " this.ipList.put(address.getAddress().getHostAddress(), 0L);\n    }\n\n    public boolean isAllowed(SocketAddress address) {\n        return this.ipList.containsKey(address.getAddress().getHostAddress());\n    }\n\n    public boolean isAllowed(String ip) {\n        return this.ipList.containsKey(ip);\n    }\n\n    public void setLastLogin(SocketAddress address, long lastLogin) {\n        this.ipList.put(address.getAddress().getHostAddress(), lastLogin);\n    }\n\n    public void setLastLogin(String ip, long lastLogin) {\n        this.ipList.put", "first_line_groundtruth": "this.ipList.put(Sneaky.stringifyAddress(address), System.currentTimeMillis());", "first_line_prediction": " this.ipList.put(address.getAddress().getHostAddress(), 0L);", "match": 0}
{"groundtruth": "= translator.detectLanguage(questionInput);", "prediction": " = question.getSourceLang();\n                needTranslate = true;\n            }\n\n            String translatedQuestion = null;\n            if (needTranslate) {\n                translatedQuestion = translator.translate(questionInput, sourceLang);\n            } else {\n                translatedQuestion = questionInput;\n            }\n\n            String questionInputEncoded = URLEncoder.encode(translatedQuestion, StandardCharsets.UTF_8.toString());\n\n            String url = STREAM_GENERATE_URL + \"?reqid=\" + reqid + \"&snim0e=\" + snim0e + \"&conversationId=\" + conversationId + \"&responseId=\" + responseId + \"&choice", "first_line_groundtruth": "= translator.detectLanguage(questionInput);", "first_line_prediction": " = question.getSourceLang();", "match": 0}
{"groundtruth": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);", "prediction": " = translator.translate(translator.middleLanguage(), sourceLang, answerOutput);\n            }\n\n            return Answer.builder()\n                .answer(answerOutput)\n                .sourceLang(sourceLang)\n                .build();\n        } catch (IOException e) {\n            log.error(\"Error while getting answer\", e);\n            throw new BardApiException(\"Error while getting answer\", e);\n        }\n    }\n\n    private String fetchSNlM0e() throws IOException {\n        Map<String, String> params = new LinkedHashMap<>();\n        params.put(\"bl\", \"boq_assistant-bard-web-server_20", "first_line_groundtruth": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);", "first_line_prediction": " = translator.translate(translator.middleLanguage(), sourceLang, answerOutput);", "match": 0}
{"groundtruth": "= translator.translate(sourceLang, translator.middleLanguage(), questionInput);", "prediction": " = translator.translate(questionInput, sourceLang);\n                }\n            }\n\n            String questionInputEncoded = URLEncoder.encode(questionInput, StandardCharsets.UTF_8.toString());\n            String questionInputEncodedWithSNlM0e = questionInputEncoded + \"&snim0e=\" + snim0e;\n\n            String url = STREAM_GENERATE_URL + \"?reqid=\" + reqid + \"&snim0e=\" + snim0e;\n            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection(proxy);\n            connection.setRequestMethod(\"POST\");\n            connection.", "first_line_groundtruth": "= translator.translate(sourceLang, translator.middleLanguage(), questionInput);", "first_line_prediction": " = translator.translate(questionInput, sourceLang);", "match": 0}
{"groundtruth": "fill(WebActions.decrypt(password));", "prediction": "fill(WebActions.getProperty(password));\n    }\n\n    public void clickLoginButton() {\n        LOGIN_BUTTON.click();\n    }\n\n    public void enterBookSearch(String bookSearch) {\n        BOOKS_SEARCH_BOX.fill(WebActions.getProperty(bookSearch));\n    }", "first_line_groundtruth": "fill(WebActions.decrypt(password));", "first_line_prediction": "fill(WebActions.getProperty(password));", "match": 0}
{"groundtruth": "= PluginImpl.getInstance().getAccessKeyId();", "prediction": " = PluginImpl.getPlugin().getAccessKeyId();\n        String accessKeySecret = PluginImpl.getPlugin().getAccessKeySecret();\n        ossClient = new OSSClientBuilder().build(endpointFormat, accessKeyId, accessKeySecret);\n        DefaultProfile profile = DefaultProfile.getProfile(region, accessKeyId, accessKeySecret);\n        oosClient = new DefaultAcsClient(profile);\n    }", "first_line_groundtruth": "= PluginImpl.getInstance().getAccessKeyId();", "first_line_prediction": " = PluginImpl.getPlugin().getAccessKeyId();", "match": 0}
{"groundtruth": "instance.getOosClient().getAcsResponse(request);", "prediction": " instance.getOosClient().startExecution(request);\n            executionId = response.getExecutionId();\n            listener.getLogger().println(\"ExecutionId:\" + executionId);\n        } catch (ClientException e) {\n            e.printStackTrace();\n        }\n        return executionId;\n    }\n\n    // ecs resource execute oos Template : ECS_TEMPLATE_NAME\n    private String ecsResourceExec(StartExecutionRequest request,  AliyunClientFactory instance, TaskListener listener) {\n        request.setTemplateName(ECS_TEMPLATE_NAME);\n        String parameter =\n                \"{\\\"\" +\n                        \"invokeDestinationDir\\\":\\\"\"", "first_line_groundtruth": "instance.getOosClient().getAcsResponse(request);", "first_line_prediction": " instance.getOosClient().startExecution(request);", "match": 0}
{"groundtruth": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);", "prediction": "uret = instance.getOssClient().uploadPart(uploadPartRequest);\n                partETags.add(uret.getPartETag());\n                instream.close();\n            }\n            CompleteMultipartUploadRequest completeMultipartUploadRequest = new CompleteMultipartUploadRequest();\n            completeMultipartUploadRequest.setBucketName(bucketName);\n            completeMultipartUploadRequest.setKey(objectName);\n            completeMultipartUploadRequest.setUploadId(uploadId);\n            completeMultipartUploadRequest.setPartETags(partETags);\n            CompleteMultipartUploadResult curet = instance.getOssClient().completeMultipartUpload(complete", "first_line_groundtruth": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);", "first_line_prediction": "uret = instance.getOssClient().uploadPart(uploadPartRequest);", "match": 0}
{"groundtruth": "instance.build(this.region);", "prediction": " /**\n         * get oss client\n         * */\n        OSS ossClient = instance.getOssClient(region);\n        /**\n         * get oss bucket\n         * */\n        OSSObject ossObject = ossClient.getObject(bucket, objectName);\n        /**\n         * get oss bucket file\n         * */\n        InputStream inputStream = ossObject.getObjectContent();\n        /**\n         * get oss bucket file name\n         * */\n        String fileName = ossObject.getKey();\n        /**\n         * get oss bucket file name\n         * */\n        String fileExtension = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n        /**\n         * get oss", "first_line_groundtruth": "instance.build(this.region);", "first_line_prediction": " /**", "match": 0}
{"groundtruth": "(instance.getOssClient() != null) {", "prediction": " (zipFile.exists()) {\n                logger.println(\"Failed to delete file \" + zipFile.getPath());\n            }\n        }\n    }\n\n    private void uploadOssFile(AliyunClientFactory instance, FilePath sourceDirectory, PrintStream logger) {\n        String bucketName = this.bucket;\n        try {\n            InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, objectName);\n            InitiateMultipartUploadResult upresult = instance.getOssClient().initiateMultipartUpload(request);\n            String uploadId = upresult.getUploadId();\n            List<PartETag> partET", "first_line_groundtruth": "(instance.getOssClient() != null) {", "first_line_prediction": " (zipFile.exists()) {", "match": 0}
{"groundtruth": "upresult = instance.getOssClient().initiateMultipartUpload(request);", "prediction": " result = instance.getOssClient().getAcsResponse(request);\n            String uploadId = result.getUploadId();\n            logger.println(\"UploadId:\" + uploadId);\n            UploadPartRequest uploadPartRequest = new UploadPartRequest();\n            uploadPartRequest.setBucketName(bucketName);\n            uploadPartRequest.setKey(objectName);\n            uploadPartRequest.setUploadId(uploadId);\n            uploadPartRequest.setPartNumber(1);\n            uploadPartRequest.setInputStream(new FileInputStream(zipFile));\n            UploadPartResult uploadPartResult = instance.getOssClient().getAcs", "first_line_groundtruth": "upresult = instance.getOssClient().initiateMultipartUpload(request);", "first_line_prediction": " result = instance.getOssClient().getAcsResponse(request);", "match": 0}
{"groundtruth": "instance.getOosClient().getAcsResponse(executionsRequest).getExecutions().get(0).getStatus();", "prediction": " instance.getOosClient().listExecutions(executionsRequest).getExecutions().get(0).getStatus();\n            } catch (Exception e) {\n                logger.println(\"Exception:\" + e.getMessage());\n            }\n        }\n        if (\"Success\".equalsIgnoreCase(status)) {\n            logger.println(\"OOS template execution success\");\n        } else {\n            logger.println(\"OOS template execution failed\");\n        }\n    }\n\n    /**\n     * zipAndUpload is used to compress and upload the specific path of the built project.\n     * @param instance\n     * @param projectName\n     * @param sourceDirectory\n     * @", "first_line_groundtruth": "instance.getOosClient().getAcsResponse(executionsRequest).getExecutions().get(0).getStatus();", "first_line_prediction": " instance.getOosClient().listExecutions(executionsRequest).getExecutions().get(0).getStatus();", "match": 0}
{"groundtruth": "HazardDiamondAPI.open(this);", "prediction": " return ActionResult.SUCCESS;\n        }\n        HazardDiamondAPI.openHazardData(player, data);\n        return ActionResult.SUCCESS;\n    }", "first_line_groundtruth": "HazardDiamondAPI.open(this);", "first_line_prediction": " return ActionResult.SUCCESS;", "match": 0}
{"groundtruth": "setScreen(new HazardScreen(holder.getHazardData()));", "prediction": "open(holder);\n    }\n\n    /**\n     * Opens an immutable {@link HazardScreen} on the client.\n     * @param holder the holder of the hazard data object to display\n     * @param player the player to open the screen to\n     */\n    @Environment(EnvType.CLIENT)\n    public static void open(HazardDataHolder holder, ServerPlayerEntity player) {\n        HazardDiamondAPIImpl.open(player, holder);\n    }\n\n    /**\n     * Opens an immutable {@link HazardScreen} on the client.\n     * @param players the players to open the screen to\n     *", "first_line_groundtruth": "setScreen(new HazardScreen(holder.getHazardData()));", "first_line_prediction": "open(holder);", "match": 0}
{"groundtruth": ".register(Registry.ITEM, HDiamond.id(\"panel_item\"), INSTANCE);", "prediction": ".register(Registry.ITEM, HDiamond.id(\"panel\"), INSTANCE);\n    }", "first_line_groundtruth": ".register(Registry.ITEM, HDiamond.id(\"panel_item\"), INSTANCE);", "first_line_prediction": ".register(Registry.ITEM, HDiamond.id(\"panel\"), INSTANCE);", "match": 0}
{"groundtruth": "= holder.getHazardData().getTooltip().stream()\n                .map(Text.Serializer::toJson)\n                .toList();", "prediction": " = new NbtList();\n        var pictograms = new NbtList();\n        for (var pictogram : holder.getHazardData().getPictograms()) {\n            pictograms.add(NbtString.of(pictogram.toString()));\n        }\n        nbt.put(\"WailaData\", NbtCompound.of(\n            \"tooltips\",  tooltips,\n            \"pictograms\", pictograms\n        ));\n    }", "first_line_groundtruth": "= holder.getHazardData().getTooltip().stream()", "first_line_prediction": " = new NbtList();", "match": 0}
{"groundtruth": "AliyunPushLog.e(REC_TAG, \"key \" + entry.getKey() + \" value \" + entry.getValue());", "prediction": "\tAliyunPushLog.e(REC_TAG, \"showNotificationNow key:\" + entry.getKey() + \" value:\" + entry.getValue());\n\t\t}\n\t\treturn true;", "first_line_groundtruth": "AliyunPushLog.e(REC_TAG, \"key \" + entry.getKey() + \" value \" + entry.getValue());", "first_line_prediction": "\tAliyunPushLog.e(REC_TAG, \"showNotificationNow key:\" + entry.getKey() + \" value:\" + entry.getValue());", "match": 0}
{"groundtruth": "ResultUtil.error();", "prediction": " ResultUtil.error(ErrorCode.SERVER_ERROR);\n    }", "first_line_groundtruth": "ResultUtil.error();", "first_line_prediction": " ResultUtil.error(ErrorCode.SERVER_ERROR);", "match": 0}
{"groundtruth": "target = (Annotation) AopUtil.getTarget(annotation);", "prediction": " annotation1 = annotation.annotationType();\n                if (annotation1 instanceof RequestMapping) {\n                    RequestMapping requestMapping = (RequestMapping) annotation;\n                    url = requestMapping.value()[0];\n                    httpMethod = requestMapping.method()[0].name();\n                }\n            }\n        }\n    }", "first_line_groundtruth": "target = (Annotation) AopUtil.getTarget(annotation);", "first_line_prediction": " annotation1 = annotation.annotationType();", "match": 0}
{"groundtruth": ".info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{", "prediction": ".error(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\", phone, param.get(\"code\"), DateUtil.now());\n        return \"\";\n    }\n\n    /**\n     * \u968f\u673a\u751f\u6210\u9a8c\u8bc1\u7801\n     *\n     * @return JSONObject\n     */\n    private JSONObject randomCode() {\n        JSONObject param = new JSONObject();\n        param.put(\"code\", RandomUtil.randomNumbers(6));\n        param.put(\"expire\", DateUtil.addMinute(DateUtil.now(), 5));\n        return param;\n    }\n\n    /**\n     * \u521b\u5efa\u8bf7\u6c42\u5bf9\u8c61\n     *\n     *", "first_line_groundtruth": ".info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{", "first_line_prediction": ".error(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\", phone, param.get(\"code\"), DateUtil.now());", "match": 0}
{"groundtruth": "= UserRoleEnum.getEnumByValue(mustRole);", "prediction": " = UserRoleEnum.valueOf(mustRole);\n            if (loginUser == null || !mustUserRoleEnum.equals(loginUser.getRole())) {\n                throw new BusinessException(ErrorCode.USER_ROLE_ERROR);\n            }\n        }\n        return joinPoint.proceed();\n    }", "first_line_groundtruth": "= UserRoleEnum.getEnumByValue(mustRole);", "first_line_prediction": " = UserRoleEnum.valueOf(mustRole);", "match": 0}
{"groundtruth": "(errorCode.getMsg());", "prediction": "(message);// \u9519\u8bef\u4fe1\u606f\n        this.code=errorCode.getCode();\n        this.message=message;\n    }\n\n    public BusinessException(ErrorCode errorCode){\n        super(errorCode.getMessage());// \u9519\u8bef\u4fe1\u606f\n        this.code=errorCode.getCode();\n        this.message=errorCode.getMessage();\n    }", "first_line_groundtruth": "(errorCode.getMsg());", "first_line_prediction": "(message);// \u9519\u8bef\u4fe1\u606f", "match": 0}
{"groundtruth": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{", "prediction": "(\"\u53d1\u9001\u9a8c\u8bc1\u7801\u6210\u529f\");\n                return param.getString(\"code\");\n            } else {\n                log.error(\"\u53d1\u9001\u9a8c\u8bc1\u7801\u5931\u8d25\");\n                return null;\n            }\n        } catch (Exception e) {\n            log.error(\"\u53d1\u9001\u9a8c\u8bc1\u7801\u5931\u8d25\", e);\n            return null;\n        }\n    }\n\n    /**\n     * \u968f\u673a\u751f\u6210\u9a8c\u8bc1\u7801\n     *\n     * @return JSONObject\n     */\n    private JSONObject randomCode() {\n        JSONObject param = new JSONObject();\n        param.put(\"code\", RandomUtil.randomNumbers(6));\n        param.put(\"expire\", 60);\n        return param;\n    }\n\n    /**\n     * \u521b\u5efa\u8bf7\u6c42", "first_line_groundtruth": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{", "first_line_prediction": "(\"\u53d1\u9001\u9a8c\u8bc1\u7801\u6210\u529f\");", "match": 0}
{"groundtruth": "username = jwtTokenProvider.getUsername(token);", "prediction": " username = jwtTokenProvider.getUsernameFromToken(token);\n\n      // get user details from username\n      UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n\n      // create authentication token\n      UsernamePasswordAuthenticationToken authentication =\n          new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n\n      // set authentication details\n      authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n\n      // set authentication in security context\n      SecurityContextHolder.getContext().setAuthentication(authentication);\n    }\n\n    filterChain.doFilter(request, response);\n  }\n\n  private String getTokenFrom", "first_line_groundtruth": "username = jwtTokenProvider.getUsername(token);", "first_line_prediction": " username = jwtTokenProvider.getUsernameFromToken(token);", "match": 0}
{"groundtruth": "(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir,name));", "prediction": "(cityService.getCitiesByName(pageNo, pageSize, sortBy, sortDir, name));\n    }\n\n    @GetMapping(\"/{id}\")\n    @PreAuthorize(\"hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')\")\n    public ResponseEntity<CityDto> getCityById(@PathVariable Long id) {\n        return ResponseEntity.ok(cityService.getCityById(id));\n    }\n\n    @PostMapping\n    @PreAuthorize(\"hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')\")\n    public ResponseEntity<CityDto> createCity(@RequestBody CityDto cityDto) {\n        return ResponseEntity.", "first_line_groundtruth": "(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir,name));", "first_line_prediction": "(cityService.getCitiesByName(pageNo, pageSize, sortBy, sortDir, name));", "match": 0}
{"groundtruth": "return JSON_CONVERTOR.parseObject(input, clazz);", "prediction": " return parseObject(input, StandardCharsets.UTF_8, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(String input, Charset charset, Class<T> clazz) {\n        return JSON_CONVERTOR.parseObject(input, charset, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(String input, int offset, int len, Class<T> clazz) {\n        return JSON_CONVERTOR.parseObject(input, offset, len, clazz);", "first_line_groundtruth": "return JSON_CONVERTOR.parseObject(input, clazz);", "first_line_prediction": " return parseObject(input, StandardCharsets.UTF_8, clazz);", "match": 0}
{"groundtruth": ".append(commandNamespace.name());", "prediction": "\n                            .append(commandNamespace.getNamespaceName())\n                            .append(\"\\n\")\n                            .append(commandNamespace.dump());\n                });\n        return builder.toString();\n    }", "first_line_groundtruth": ".append(commandNamespace.name());", "first_line_prediction": "", "match": 0}
{"groundtruth": ".namespaceManager.getCommandNamespaces().forEach(namespace -> {", "prediction": ".setVariable(\"namespaceManager\", namespaceManager);\n        this.setVariable(\"namespace\", namespaceManager.getNamespace());\n        this.setVariable(\"namespaceClass\", namespaceManager.getNamespaceClass());\n        this.setVariable(\"namespaceClassInfo\", namespaceManager.getNamespaceClassInfo());\n        this.setVariable(\"namespaceClassInfoName\", namespaceManager.getNamespaceClassInfoName());\n        this.setVariable(\"namespaceClassInfoPackage\", namespaceManager.getNamespaceClassInfoPackage());\n        this.setVariable(\"namespaceClassInfoSimpleName\", namespaceManager.getNamespaceClassInfoSimpleName());\n        this.setVariable(\"namespaceClass", "first_line_groundtruth": ".namespaceManager.getCommandNamespaces().forEach(namespace -> {", "first_line_prediction": ".setVariable(\"namespaceManager\", namespaceManager);", "match": 0}
{"groundtruth": ".print(namespaceManager.dump());", "prediction": "\n            .println(\"help: print this help message\");\n    }\n\n    protected void welcome() {\n        RUNTIME.getPrinter()\n            .println(\"Welcome to AntChain Bridge Plugin Server CLI\");\n    }", "first_line_groundtruth": ".print(namespaceManager.dump());", "first_line_prediction": "", "match": 0}
{"groundtruth": "shell.start();", "prediction": " // start shell\n         shell.start();\n    }\n\n    private static String getVersion() {\n        try {\n            return ResourceUtil.readUtf8Str(Launcher.class.getResource(\"/version.txt\"));\n        } catch (IOException e) {\n            return \"unknown\";\n        }\n    }", "first_line_groundtruth": "shell.start();", "first_line_prediction": " // start shell", "match": 0}
{"groundtruth": "commandNamespace.getCommands().forEach(\n                            (cmdName, cmd) -> {", "prediction": " commandNamespace.getCommands().forEach(\n                            command -> {\n                                builder.append(\"\\n\\t\").append(command.name());\n                            }\n                    );\n                }\n        );\n        return builder.toString();\n    }", "first_line_groundtruth": "commandNamespace.getCommands().forEach(", "first_line_prediction": " commandNamespace.getCommands().forEach(", "match": 0}
{"groundtruth": "String result = shell.execute(command);", "prediction": " resultBuilder.append(shell.execute(command)).append(\"\\n\");\n                    } catch (Exception e) {\n                        System.out.printf(\"illegal command [ %s ], execute failed\\n\", command);\n                    }\n                    command = reader.readLine();\n                }\n                System.out.println(resultBuilder.toString());\n            } catch (Exception e) {\n                System.out.printf(\"execute file failed, file path: %s\\n\", filePath);\n            }\n            return;\n        }\n\n        shell.start();\n    }\n\n    private static String getVersion() {\n        try {\n            return ResourceUtil.readUtf", "first_line_groundtruth": "String result = shell.execute(command);", "first_line_prediction": " resultBuilder.append(shell.execute(command)).append(\"\\n\");", "match": 0}
{"groundtruth": "!grpcClient.checkServerStatus()) {", "prediction": "cmd.hasOption(OP_CMD)) {\n            String cmdStr = cmd.getOptionValue(OP_CMD);\n            shellProvider.execute(cmdStr);\n        } else if (cmd.hasOption(OP_FILE)) {\n            String file = cmd.getOptionValue(OP_FILE);\n            try (InputStream inputStream = ResourceUtil.getStream(file)) {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(\"UTF-8\")));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    shellProvider.execute(line);\n                }\n            } catch (IOException", "first_line_groundtruth": "!grpcClient.checkServerStatus()) {", "first_line_prediction": "cmd.hasOption(OP_CMD)) {", "match": 0}
{"groundtruth": "getGrpcClient().shutdown();", "prediction": "getGrpcClient().close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void welcome() {\n        RUNTIME.getPrinter().println(\"Welcome to AntChain Bridge Plugin Server\");\n        RUNTIME.getPrinter().println(\"Type 'help' for more information\");\n    }\n\n    private void initReservedWord() {\n        reservedWord.put(\"help\", new Help());\n        reservedWord.put(\"exit\", new Exit());\n        reservedWord.put(\"quit\", new Exit());\n        reservedWord.put(\"cls\", new Cls());\n        reservedWord.put(\"cd\",", "first_line_groundtruth": "getGrpcClient().shutdown();", "first_line_prediction": "getGrpcClient().close();", "match": 0}
{"groundtruth": "\"                          PLUGIN SERVER CLI \" + Launcher.getVersion()\n        );", "prediction": "\"\\n\" +\n                 \"Welcome to AntChain Bridge Plugin Server CLI, type 'help' to see all commands.\");\n    }", "first_line_groundtruth": "\"                          PLUGIN SERVER CLI \" + Launcher.getVersion()", "first_line_prediction": "\"\\n\" +", "match": 0}
{"groundtruth": ").execute();", "prediction": " + \" \").run(cmd);\n\n                            } else {\n                                shellProvider.run(cmd);\n                            }\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }).start();\n            }\n        } finally {\n            shellLock.unlock();\n        }\n    }\n\n    public void stop() {\n        loopRunning.set(false);\n    }\n\n    private void welcome() {\n        PrintWriter out = terminal.writer();\n        out.println(\"Welcome to AntChain Bridge Plugin Server CLI\");\n        out.println(\"Type 'help' for more information\");\n    }\n\n    private void initReservedWord() {\n        reservedWord", "first_line_groundtruth": ").execute();", "first_line_prediction": " + \" \").run(cmd);", "match": 0}
{"groundtruth": "().println(JsonUtil.format(result));", "prediction": "().println(result);\n                                } else {\n                                    RUNTIME.getPrinter().println(result + \"\\n\");\n                                }\n                            }\n                        } catch (Exception e) {\n                            RUNTIME.getPrinter().println(e.getMessage());\n                        }\n                    }\n                }).start();\n            }\n        } finally {\n            shellLock.unlock();\n        }\n    }\n\n    public void stop() {\n        loopRunning.set(false);\n    }\n\n    private void welcome() {\n        RUNTIME.getPrinter().println(\"Welcome to AntChain Bridge Plugin Server CLI\");\n        RUNTIME.getPrinter().println(\"Type 'help' for more information", "first_line_groundtruth": "().println(JsonUtil.format(result));", "first_line_prediction": "().println(result);", "match": 0}
{"groundtruth": "(!buffer.isEmpty() && !namespace.name().startsWith(buffer)) {", "prediction": " (namespace.getCommandNames().isEmpty()) {\n                    return;\n                }\n\n                namespace.getCommandNames().forEach(commandName -> {\n                    if (!buffer.isEmpty() && !commandName.startsWith(buffer)) {\n                        return;\n                    }\n\n                    candidates.add(new Candidate(commandName, commandName, null, null, null, null, true));\n                });\n            });\n        }\n    }", "first_line_groundtruth": "(!buffer.isEmpty() && !namespace.name().startsWith(buffer)) {", "first_line_prediction": " (namespace.getCommandNames().isEmpty()) {", "match": 0}
{"groundtruth": "new StringBuilder(namespace.name());", "prediction": " new StringBuilder();\n                sb.append(namespace.name());\n                namespace.getCommands().forEach(command -> {\n                    sb.append(\" \").append(command.name());\n                });\n\n                candidates.add(new Candidate(sb.toString(), sb.toString(), null, null, null, null, true));\n            });\n        }\n    }", "first_line_groundtruth": "new StringBuilder(namespace.name());", "first_line_prediction": " new StringBuilder();", "match": 0}
{"groundtruth": "namespace.getCommands().forEach((cmdName, cmd) -> {", "prediction": " namespace.getCommands().forEach(command -> {\n                     sb.append(\" \").append(command.name());\n                 });\n\n                candidates.add(new Candidate(sb.toString(), sb.toString(), null, null, null, null, true));\n            });\n        }\n    }", "first_line_groundtruth": "namespace.getCommands().forEach((cmdName, cmd) -> {", "first_line_prediction": " namespace.getCommands().forEach(command -> {", "match": 0}
{"groundtruth": "!namespace.name().equals(buf[0])) {", "prediction": "namespace.name().equals(buf[0])) {\n                    namespace.getCommands().forEach((cmdName, cmd) -> {\n\n                        if (cmdName.equals(buf[1])) {\n                            cmd.getArgs().forEach(arg -> {\n                                candidates.add(new Candidate(arg.getName(), arg.getName(), null, null, null, null, true));\n                            });\n                        }\n                    });\n                }\n            });\n        }\n    }", "first_line_groundtruth": "!namespace.name().equals(buf[0])) {", "first_line_prediction": "namespace.name().equals(buf[0])) {", "match": 0}
{"groundtruth": "Candidate(namespace.name() + \".\", namespace.name(), null, null, null, null, true));", "prediction": " Candidate(sb.toString(), sb.toString(), null, null, null, null, true));\n            });\n        }\n    }", "first_line_groundtruth": "Candidate(namespace.name() + \".\", namespace.name(), null, null, null, null, true));", "first_line_prediction": " Candidate(sb.toString(), sb.toString(), null, null, null, null, true));", "match": 0}
{"groundtruth": "cmd.addArgs(argName, param.getType().getSimpleName(), constraints);", "prediction": " cmd.addArgument(argName, constraints);\n            }\n\n            addCommand(cmd);\n        });\n    }\n\n    @Override\n    public String getNamespaceName() {\n        return name();\n    }\n\n    @Override\n    public String getNamespaceDescription() {\n        return null;\n    }\n\n    @Override\n    public String getNamespaceVersion() {\n        return null;\n    }\n\n    @Override\n    public String getNamespaceAuthor() {\n        return null;\n    }\n\n    @Override\n    public String getNamespaceLicense() {\n        return null;\n    }\n\n    @Override\n    public String getNamespaceWebsite() {\n        return null;\n    }\n\n    @Override\n   ", "first_line_groundtruth": "cmd.addArgs(argName, param.getType().getSimpleName(), constraints);", "first_line_prediction": " cmd.addArgument(argName, constraints);", "match": 0}
{"groundtruth": "(namespaceManager.getCommandNamespaces());", "prediction": "(namespaceManager.getNamespaces());\n\n        reservedWords.addAll(namespaceManager.getReservedWords());\n    }\n\n    @Override\n    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {\n\n        String word = line.word().toLowerCase();\n\n        if (word.startsWith(\"-\")) {\n            for (String reservedWord : reservedWords) {\n                if (reservedWord.startsWith(word)) {\n                    candidates.add(new Candidate(reservedWord));\n                }\n            }\n        } else {\n            for (CommandNamespace namespace : namespaces) {\n                if (namespace.getName().startsWith(word)) {", "first_line_groundtruth": "(namespaceManager.getCommandNamespaces());", "first_line_prediction": "(namespaceManager.getNamespaces());", "match": 0}
{"groundtruth": "mThermalUtils.setDefaultThermalProfile();", "prediction": " mThermalUtils.setThermalProfile(mPreviousApp);\n        }\n    };\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        mThermalUtils = new ThermalUtils(this);\n        mActivityTaskManager = IActivityTaskManager.Stub.asInterface(\n                ServiceManager.getService(\"activity\"));\n        mActivityTaskManager.registerTaskStackListener(mTaskListener);\n        mActivityTaskManager.registerReceiverAsUser(mIntentReceiver,\n                new IntentFilter(Intent.ACTION_USER_SWITCHED), null, null, 0);\n    }\n\n    @Override\n    public void", "first_line_groundtruth": "mThermalUtils.setDefaultThermalProfile();", "first_line_prediction": " mThermalUtils.setThermalProfile(mPreviousApp);", "match": 0}
{"groundtruth": "mThermalUtils.setThermalProfile(foregroundApp);", "prediction": " mThermalUtils.updateThermal(foregroundApp);\n                     mPreviousApp = foregroundApp;\n                }\n            } catch (RemoteException e) {\n                Log.e(TAG, \"Failed to get focused root task info\", e);\n            }\n        }\n    };\n\n    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            if (intent.getAction().equals(Intent.ACTION_SCREEN_ON)) {\n                mThermalUtils.updateThermal(mPreviousApp);\n            }\n        }\n    };\n\n    @Override\n    public void", "first_line_groundtruth": "mThermalUtils.setThermalProfile(foregroundApp);", "first_line_prediction": " mThermalUtils.updateThermal(foregroundApp);", "match": 0}
{"groundtruth": "mDiracSound.setMusic(enable ? 1 : 0);", "prediction": " refreshPlaybackIfNecessary();\n    }\n\n    public void setScenario(int scenario) {\n        mDiracSound.setScenario(scenario);\n    }\n\n    public void setVolume(int volume) {\n        mDiracSound.setVolume(volume);\n    }\n\n    public void setMute(boolean mute) {\n        mDiracSound.setMute(mute);\n    }\n\n    public void setAudioStreamType(int streamType) {\n        mDiracSound.setAudioStreamType(streamType);\n    }\n\n    public void setAudioAttributes(int streamType, int usage, int flags) {\n        mDirac", "first_line_groundtruth": "mDiracSound.setMusic(enable ? 1 : 0);", "first_line_prediction": " refreshPlaybackIfNecessary();", "match": 0}
{"groundtruth": "FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);", "prediction": " FileUtils.writeFile(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);\n    }\n\n    protected static void setBenchmarkThermalProfile() {\n         FileUtils.writeFile(THERMAL_SCONFIG, THERMAL_STATE_BENCHMARK);\n    }\n\n    protected static void setBrowserThermalProfile() {\n         FileUtils.writeFile(THERMAL_SCONFIG, THERMAL_STATE_BROWSER);\n    }\n\n    protected static void setCameraThermalProfile() {\n         FileUtils.writeFile(THERMAL_SCONFIG, THERMAL_STATE_CAMERA);\n    }\n\n    protected static void setDialerThermalProfile()", "first_line_groundtruth": "FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);", "first_line_prediction": " FileUtils.writeFile(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);", "match": 0}
{"groundtruth": "null && mDiracSound.getMusic() == 1;", "prediction": " null && mDiracSound.isEnabled();\n    }\n\n    public void setScenario(int scenario) {\n        mDiracSound.setScenario(scenario);\n    }\n\n    public void setMusic(int music) {\n        mDiracSound.setMusic(music);\n    }\n\n    public void setVolume(int volume) {\n        mDiracSound.setVolume(volume);\n    }\n\n    public void setMute(boolean mute) {\n        mDiracSound.setMute(mute);\n    }\n\n    public void setAudioStream(int stream) {\n        mDiracSound.setAudioStream(stream);\n    }", "first_line_groundtruth": "null && mDiracSound.getMusic() == 1;", "first_line_prediction": " null && mDiracSound.isEnabled();", "match": 0}
{"groundtruth": "mDiracSound.setLevel(band, Float.valueOf(level[band]));", "prediction": " mDiracSound.setLevel(band, Integer.parseInt(level[band]));\n        }\n    }\n\n    public void setScenario(int scenario) {\n        mDiracSound.setScenario(scenario);\n    }\n\n    public void setMusic(int music) {\n        mDiracSound.setMusic(music);\n    }\n\n    public void setVolume(int volume) {\n        mDiracSound.setVolume(volume);\n    }\n\n    public void setMute(boolean mute) {\n        mDiracSound.setMute(mute);\n    }\n\n    public void setAudioStream(int stream) {\n        mDirac", "first_line_groundtruth": "mDiracSound.setLevel(band, Float.valueOf(level[band]));", "first_line_prediction": " mDiracSound.setLevel(band, Integer.parseInt(level[band]));", "match": 0}
{"groundtruth": "? mDiracUtils.isDiracEnabled() : false;", "prediction": " && mDiracUtils.isEnhancerEnabled();\n        mSwitchBar = (MainSwitchPreference) findPreference(PREF_ENABLE);\n        mSwitchBar.setChecked(enhancerEnabled);\n        mSwitchBar.setOnPreferenceChangeListener(this);\n        mSwitchBar.setOnMainSwitchChangeListener(this);\n\n        mHeadsetType = (ListPreference) findPreference(PREF_HEADSET);\n        mHeadsetType.setSummary(mDiracUtils.getHeadsetType());\n        mHeadsetType.setOnPreferenceChangeListener(this);\n\n        mPreset = (ListPreference) findPreference(PREF_PRESET);\n        m", "first_line_groundtruth": "? mDiracUtils.isDiracEnabled() : false;", "first_line_prediction": " && mDiracUtils.isEnhancerEnabled();", "match": 0}
{"groundtruth": "mDiracSound.setHifiMode(paramInt);", "prediction": " mDiracSound.setHifiMode(paramInt);\n    }\n\n    public void setScenario(int paramInt) {\n        mDiracSound.setScenario(paramInt);\n    }\n\n    public void setMusic(int paramInt) {\n        mDiracSound.setMusic(paramInt);\n    }\n\n    public void setMusic(boolean paramBoolean) {\n        mDiracSound.setMusic(paramBoolean ? 1 : 0);\n    }\n\n    public void setMusic(int paramInt1, int paramInt2) {\n        mDiracSound.setMusic(paramInt1, paramInt", "first_line_groundtruth": "mDiracSound.setHifiMode(paramInt);", "first_line_prediction": " mDiracSound.setHifiMode(paramInt);", "match": 0}
{"groundtruth": "gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);", "prediction": "gptClient.updateSettings(newValues, oldValues);\n\n        propertyChangeSupport.firePropertyChange(\"settings\", null, null);\n    }", "first_line_groundtruth": "gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);", "first_line_prediction": "gptClient.updateSettings(newValues, oldValues);", "match": 0}
{"groundtruth": "mDiracUtils.setHifiMode((Boolean) newValue ? 1 : 0);", "prediction": " mDiracUtils.setHifi(Boolean.parseBoolean(newValue.toString()));\n                 return true;\n            case PREF_PRESET:\n                mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));\n                return true;\n            case PREF_SCENE:\n                mDiracUtils.setScene(Integer.parseInt(newValue.toString()));\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    @Override\n    public void onSwitchChanged(SwitchPreference preference, boolean isChecked) {\n        if (mDiracUtils == null) return;\n        mDiracUtils.", "first_line_groundtruth": "mDiracUtils.setHifiMode((Boolean) newValue ? 1 : 0);", "first_line_prediction": " mDiracUtils.setHifi(Boolean.parseBoolean(newValue.toString()));", "match": 0}
{"groundtruth": "mDiracUtils.setHeadsetType(Integer.parseInt(newValue.toString()));", "prediction": " mDiracUtils.setHeadsetType((String) newValue);\n                 break;\n            case PREF_PRESET:\n                 mDiracUtils.setPreset((String) newValue);\n                 break;\n            case PREF_HIFI:\n                 mDiracUtils.setHifi((Boolean) newValue);\n                 break;\n            case PREF_SCENE:\n                 mDiracUtils.setScene((String) newValue);\n                 break;\n            default:\n                return false;\n        }\n        return true;\n    }\n\n    @Override\n    public void onSwitchChanged(SwitchPreference preference, boolean isChecked) {\n        if (mDir", "first_line_groundtruth": "mDiracUtils.setHeadsetType(Integer.parseInt(newValue.toString()));", "first_line_prediction": " mDiracUtils.setHeadsetType((String) newValue);", "match": 0}
{"groundtruth": ".helpMenu.setHelpColors(config.getMessages().getHelpCmd().getHelpColors());", "prediction": ".helpMenu.register(commandManager);\n\n      getServer().getPluginManager().registerEvents(new PlaceholderUpdateListener(this), this);\n    } catch (Exception e) {\n      getLogger().log(Level.SEVERE, \"Failed to register commands\", e);\n    }\n  }\n\n  @Override\n  public void onDisable() {\n    if (helpMenu != null) {\n      helpMenu.unregister();\n    }\n  }\n\n  public PSConfig getConfig() {\n    return config;\n  }\n\n  public MinecraftHelp<CommandSender> getHelpMenu() {\n    return helpMenu;\n  }\n\n  public PlaceholderProvider getPlaceholder", "first_line_groundtruth": ".helpMenu.setHelpColors(config.getMessages().getHelpCmd().getHelpColors());", "first_line_prediction": ".helpMenu.register(commandManager);", "match": 0}
{"groundtruth": "Menu menu = MyMenu.createMenu(this);", "prediction": " montoyaApi.registerScannerCheck(scanCheck);\n         montoyaApi.registerScannerListener(scanCheck);\n         montoyaApi.registerScannerInsertionPointListener(scanCheck);\n         montoyaApi.registerScannerInsertionPointFactory(scanCheck);\n         montoyaApi.registerScannerListener(scanCheck);\n         montoyaApi.registerScannerInsertionPointListener(scanCheck);\n         montoyaApi.registerScannerInsertionPointFactory(scanCheck);\n         montoyaApi.registerScannerListener(scanCheck);\n         montoyaApi.registerScannerInsertionPointListener(scanCheck);\n         m", "first_line_groundtruth": "Menu menu = MyMenu.createMenu(this);", "first_line_prediction": " montoyaApi.registerScannerCheck(scanCheck);", "match": 0}
{"groundtruth": "(sender, key, args) -> config.getMessages().getHelpCmd().getMessage(key));", "prediction": "0,\n          (sender, command, label, args) -> {\n            if (args.length == 0) {\n              return Component.text(\"Usage: /papisigns help <command>\");\n            }\n            return Component.text(\"Unknown command: \" + args[0]);\n          });\n\n      this.helpMenu.messageProvider(\n          1,\n          (sender, command, label, args) -> {\n            if (args.length == 0) {\n              return Component.text(\"Usage: /papisigns help <command>\");\n            }\n            return Component.text(\"Unknown command: \" + args[", "first_line_groundtruth": "(sender, key, args) -> config.getMessages().getHelpCmd().getMessage(key));", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "description = HtmlResourceLoader.loadHtmlContent(\"aboutDescription.html\");", "prediction": " description = HtmlResourceLoader.loadResource(\"about.html\");\n        JLabel descriptionLabel = new JLabel(description);\n        descriptionLabel.putClientProperty(\"html.disable\", null);\n        return descriptionLabel;\n    }\n\n    private JButton createUpgradeButton() {\n        JButton upgradeButton = new JButton(\"Upgrade to Pro\");\n        upgradeButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    Desktop.getDesktop().browse(new URI(WEBSITE));\n                } catch (IOException | URISyntaxException ex) {\n                    ex.printStackTrace();\n                }\n            }\n        });\n        return", "first_line_groundtruth": "description = HtmlResourceLoader.loadHtmlContent(\"aboutDescription.html\");", "first_line_prediction": " description = HtmlResourceLoader.loadResource(\"about.html\");", "match": 0}
{"groundtruth": "mDiracUtils.setScenario(Integer.parseInt(newValue.toString()));", "prediction": " mDiracUtils.setScene((String) newValue);\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    @Override\n    public void onSwitchChanged(SwitchPreference preference, boolean isChecked) {\n        if (mDiracUtils == null) return;\n        mDiracUtils.setDiracEnabled(isChecked);\n    }", "first_line_groundtruth": "mDiracUtils.setScenario(Integer.parseInt(newValue.toString()));", "first_line_prediction": " mDiracUtils.setScene((String) newValue);", "match": 0}
{"groundtruth": "mDiracUtils.setLevel((String) newValue);", "prediction": " mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));\n                return true;\n            case PREF_SCENE:\n                mDiracUtils.setScene(Integer.parseInt(newValue.toString()));\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    @Override\n    public void onSwitchChanged(SwitchPreference preference, boolean isChecked) {\n        if (mDiracUtils == null) return;\n        mDiracUtils.setDiracEnabled(isChecked);\n    }", "first_line_groundtruth": "mDiracUtils.setLevel((String) newValue);", "first_line_prediction": " mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));", "match": 0}
{"groundtruth": "myBurpExtension.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPromptText);", "prediction": " myBurpExtension.setApiKey(newApiKey);\n         myBurpExtension.setModel(newModelId);\n         myBurpExtension.setMaxPromptSize(newMaxPromptSize);\n         myBurpExtension.setPrompt(newPromptText);\n         myBurpExtension.saveSettings();", "first_line_groundtruth": "myBurpExtension.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPromptText);", "first_line_prediction": " myBurpExtension.setApiKey(newApiKey);", "match": 0}
{"groundtruth": "settingsView.setOnApplyButtonClickListener(() -> {", "prediction": " // TODO: Implement\n    }\n\n    private JList<String> createListView() {\n        JList<String> listView = new JList<>();\n        listView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n        listView.setCellRenderer(new ListCellRenderer<String>() {\n            @Override\n            public Component getListCellRendererComponent(JList<? extends String> list, String value, int index, boolean isSelected, boolean cellHasFocus) {\n                return new JLabel(value);\n            }\n        });\n        return listView;\n    }\n\n    public void setDefaultView(String viewName) {\n        CardLayout cardLayout = (", "first_line_groundtruth": "settingsView.setOnApplyButtonClickListener(() -> {", "first_line_prediction": " // TODO: Implement", "match": 0}
{"groundtruth": "gptRequest.setPrompt(prompt);", "prediction": " RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), gson.toJson(gptRequest));\n     Request request = new Request.Builder()\n         .url(\"https://api.chatgpt.com/v1/completions\")\n         .addHeader(\"Authorization\", \"Bearer \" + apiKey)\n         .addHeader(\"Content-Type\", \"application/json\")\n         .post(body)\n         .build();\n     Response response = client.newCall(request).execute();\n     if (!response.isSuccessful()) {\n       throw new IOException(\"Unexpected code \" +", "first_line_groundtruth": "gptRequest.setPrompt(prompt);", "first_line_prediction": " RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), gson.toJson(gptRequest));", "match": 0}
{"groundtruth": "inst.setOption(\"Skill Level\", String.valueOf(level));", "prediction": " inst.setLevel(level);\n    }", "first_line_groundtruth": "inst.setOption(\"Skill Level\", String.valueOf(level));", "first_line_prediction": " inst.setLevel(level);", "match": 0}
{"groundtruth": "(reader.getRest());", "prediction": "(reader.read());\n                finish();\n                return;\n            }\n            string.append(reader.read(p));\n            parse(reader.read(p));\n        }\n\n        @Override\n        public StringNode getResult() {\n            return node;\n        }\n    }", "first_line_groundtruth": "(reader.getRest());", "first_line_prediction": "(reader.read());", "match": 0}
{"groundtruth": "reader.hint(\"An Integer\");", "prediction": " else {\n                return null;\n            }\n        }\n\n        @Override\n        public IntegerNode parse(StringReader reader) {\n            String next = tryParse(reader);\n            if (next == null) {\n                throw new RuntimeException(\"Failed to parse integer\");\n            }\n            parsed = next;\n            return literalNode;\n        }\n\n        @Override\n        public IntegerNode finish() {\n            return literalNode;\n        }\n    }", "first_line_groundtruth": "reader.hint(\"An Integer\");", "first_line_prediction": " else {", "match": 0}
{"groundtruth": "if (!reader.canRead()) {", "prediction": " while ((p = reader.peek()) != -1) {\n                 if (p == '\\\\') {\n                     reader.read();\n                     if (reader.peek() == 'n') {\n                         string.append('\\n');\n                     } else if (reader.peek() == 'r') {\n                         string.append('\\r');\n                     } else if (reader.peek() == 't') {\n                         string.append('\\t');\n                     } else if (reader.peek() == 'b') {\n                         string.append('\\b');\n                     } else if (reader.peek() == 'f') {\n                         string.append('\\f", "first_line_groundtruth": "if (!reader.canRead()) {", "first_line_prediction": " while ((p = reader.peek()) != -1) {", "match": 0}
{"groundtruth": "(cfg.getApiKey() != null) {", "prediction": " (cfg.getApiKey() != null) {\n            metadata.put(authorization, \"Bearer \" + cfg.getApiKey());\n        }\n\n        if (cfg.getToken() != null) {\n            metadata.put(authorization, \"Bearer \" + cfg.getToken());\n        }\n\n        ManagedChannel channel;\n\n        if (cfg.getInsecure()) {\n            channel = NettyChannelBuilder.forAddress(cfg.getHost(), cfg.getPort())\n                    .usePlaintext()\n                    .build();\n        } else {\n            SslContext sslContext = GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).", "first_line_groundtruth": "(cfg.getApiKey() != null) {", "first_line_prediction": " (cfg.getApiKey() != null) {", "match": 0}
{"groundtruth": "cfg.getTenantId() != null) {", "prediction": "cfg.getTenantId() != null) {\n            metadata.put(asertoTenantId, cfg.getTenantId());\n        }\n\n        if (cfg.getApiKey() != null) {\n            metadata.put(authorization, \"Bearer \" + cfg.getApiKey());\n        }\n\n        if (cfg.getToken() != null) {\n            metadata.put(authorization, \"Bearer \" + cfg.getToken());\n        }\n\n        ManagedChannel channel;\n        if (cfg.getInsecure()) {\n            channel = NettyChannelBuilder.forAddress(cfg.getHost(), cfg.getPort())\n                    .usePlaintext(true)\n                    .build();", "first_line_groundtruth": "cfg.getTenantId() != null) {", "first_line_prediction": "cfg.getTenantId() != null) {", "match": 1}
{"groundtruth": "cfg.setCaCertPath(caCertPath);", "prediction": " cfg.setCaCertPath(caCertPath);\n\n        return this;\n    }\n\n    public ChannelBuilder withCertPath(String certPath) {\n        cfg.setCertPath(certPath);\n\n        return this;\n    }\n\n    public ChannelBuilder withKeyPath(String keyPath) {\n        cfg.setKeyPath(keyPath);\n\n        return this;\n    }\n\n    public ManagedChannel build() throws SSLException {\n        ManagedChannel channel;\n\n        if (cfg.getInsecure()) {\n            channel = buildInsecureChannel();\n        } else {\n            channel = buildSecureChannel();\n        }\n\n        return channel;\n    }\n\n    private", "first_line_groundtruth": "cfg.setCaCertPath(caCertPath);", "first_line_prediction": " cfg.setCaCertPath(caCertPath);", "match": 0}
{"groundtruth": "), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));", "prediction": "cfg.getPort()), cfg.getPort())\n                 .usePlaintext(cfg.getInsecure())\n                 .intercept(new MetadataUtils.AttachHeadersInterceptor(metadata));\n\n        if (cfg.getCaCertPath() != null) {\n            SslContext sslContext = GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n            channelBuilder.sslContext(sslContext);\n        }\n\n        return channelBuilder.build();\n    }", "first_line_groundtruth": "), cfg.getPort())", "first_line_prediction": "cfg.getPort()), cfg.getPort())", "match": 0}
{"groundtruth": "(cfg.getHost(), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));", "prediction": "(cfg.getHost(), cfg.getPort())\n                 .usePlaintext(cfg.getInsecure())\n                 .intercept(new MetadataUtils.AttachHeadersInterceptor(metadata));\n\n        if (cfg.getToken() != null) {\n            channelBuilder.intercept(new MetadataUtils.ServerCallHandlerInterceptor(metadata));\n        }\n\n        if (cfg.getCaCertPath() != null) {\n            SslContext sslContext = GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n            channelBuilder.sslContext(sslContext);\n        }\n\n        return channelBuilder.build();\n    }", "first_line_groundtruth": "(cfg.getHost(), cfg.getPort())", "first_line_prediction": "(cfg.getHost(), cfg.getPort())", "match": 1}
{"groundtruth": "reader.peek(1);", "prediction": " string.append(reader.getRest());\n                 reader.setPos(p);\n            }\n        }\n\n        @Override\n        public StringNode getResult() {\n            return node;\n        }\n    }", "first_line_groundtruth": "reader.peek(1);", "first_line_prediction": " string.append(reader.getRest());", "match": 0}
{"groundtruth": "return new AnalysisTaskWrapper(inst.calculate(), b);", "prediction": " return new AnalysisTaskWrapper(this.inst.calculate(), b);\n    }", "first_line_groundtruth": "return new AnalysisTaskWrapper(inst.calculate(), b);", "first_line_prediction": " return new AnalysisTaskWrapper(this.inst.calculate(), b);", "match": 0}
{"groundtruth": "reader.peek(p - reader.getPos()));", "prediction": "reader.getRest().substring(0, p));\n                reader.setPos(p + 1);\n            }\n        }\n\n        @Override\n        public StringNode getResult() {\n            return node;\n        }\n    }", "first_line_groundtruth": "reader.peek(p - reader.getPos()));", "first_line_prediction": "reader.getRest().substring(0, p));", "match": 0}
{"groundtruth": "= reader.find(\" \")) == -1) {", "prediction": " = reader.read()) == '\\\\') {\n                string.append(reader.read());\n            } else {\n                string.append((char) p);\n            }\n        }\n\n        @Override\n        public StringNode getResult() {\n            return node;\n        }\n    }", "first_line_groundtruth": "= reader.find(\" \")) == -1) {", "first_line_prediction": " = reader.read()) == '\\\\') {", "match": 0}
{"groundtruth": "mDiracUtils.setEnabled(isChecked);", "prediction": " mDiracUtils.setDiracEnabled(isChecked);\n    }", "first_line_groundtruth": "mDiracUtils.setEnabled(isChecked);", "first_line_prediction": " mDiracUtils.setDiracEnabled(isChecked);", "match": 0}
{"groundtruth": "ShadeParser.parseShadeOutput(buildResult.toPath()),\n                        DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));", "prediction": " parseIncludedDependencies(buildResult, root),\n                         parseExcludedDependencies(buildResult, root));\n\n        // parse NOTICE files\n        final Map<String, NoticeContents> noticeContents =\n                parseNotices(buildResult, root);\n\n        // check NOTICE files\n        final Map<String, Set<String>> noticeDependencyMap =\n                noticeContents.entrySet().stream()\n                        .collect(Collectors.toMap(\n                                Map.Entry::getKey,\n                                entry -> new HashSet<>(entry.getValue().getDependencies())));\n\n        final Map<String, Set<String>> noticeDependencyMapWithBundledDependencies =\n                noticeDependencyMap.entrySet().stream()", "first_line_groundtruth": "ShadeParser.parseShadeOutput(buildResult.toPath()),", "first_line_prediction": " parseIncludedDependencies(buildResult, root),", "match": 0}
{"groundtruth": "Node.greedyString())\n                                )\n                );", "prediction": "Node.string().complete(writer::write))\n                                 )\n                                 .with(Node.literal(\"ponderhit\").mustConsumeChild()\n                                         .with(Node.string().complete(writer::write))\n                                 )\n                                 .with(Node.literal(\"pondermove\").mustConsumeChild()\n                                         .with(Node.string().complete(writer::write))\n                                 )\n                                 .with(Node.literal(\"multipv\").mustConsumeChild()\n                                         .with(Node.integer().complete(multipv::set))\n                                 )\n                                 .with(Node.literal(\"multipv\").mustConsumeChild()\n                                         .with(Node", "first_line_groundtruth": "Node.greedyString())", "first_line_prediction": "Node.string().complete(writer::write))", "match": 0}
{"groundtruth": "DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));", "prediction": "0,\n                        root);\n\n        // parse NOTICE files\n        final Map<String, NoticeContents> noticeContents =\n                NoticeParser.parseNoticeFiles(root.resolve(\"NOTICE\"));\n\n        // check NOTICE files for dependencies\n        final Map<String, Set<Dependency>> noticeDependencies =\n                noticeContents.entrySet().stream()\n                        .collect(\n                                Collectors.toMap(\n                                        Map.Entry::getKey,\n                                        entry ->\n                                                parseNoticeDependencies(entry.getValue().getContents())));\n\n        // check NOTICE files for excess dependencies\n        final Map<String, Set<Dependency>> noticeExcessDependencies =\n                noticeContents.entrySet().stream()\n                       ", "first_line_groundtruth": "DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "return ParserUtils.parsePluginOutput(\n                lines,\n                DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                DependencyParser::parseCopyDependencyBlock);", "prediction": " return lines.map(DependencyParser::parseDependencyCopyOutputLine)\n                     .collect(ParserUtils.toDependencyMap());\n    }\n\n    @VisibleForTesting\n    static Dependency parseDependencyCopyOutputLine(String line) {\n        Matcher matcher = DEPENDENCY_COPY_NEXT_MODULE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n            return Dependency.of(matcher.group(\"module\"));\n        }\n        return null;\n    }\n\n    @VisibleForTesting\n    static Map<String, DependencyTree> parseDependencyTreeOutput(Stream<String> lines) {\n        return lines.map(DependencyParser::parseDependency", "first_line_groundtruth": "return ParserUtils.parsePluginOutput(", "first_line_prediction": " return lines.map(DependencyParser::parseDependencyCopyOutputLine)", "match": 0}
{"groundtruth": "return dependency.getGroupId().contains(\"org.scala-lang\")\n                || scalaSuffixPattern.matcher(dependency.getArtifactId()).find();", "prediction": " return dependency.getGroupId().equals(\"org.scala-lang\") &&\n                 dependency.getArtifactId().equals(\"scala-reflect\");\n    }\n\n    private static boolean isExcluded(final String artifactId) {\n        return EXCLUDED_MODULES.contains(artifactId);\n    }\n\n    private static Collection<String> checkScalaSuffixes(\n            final ParseResult parseResult,\n            final Path paimonRootPath) {\n        final List<String> violations = new ArrayList<>();\n\n        for (String infectedModule : parseResult.getInfectedModules()) {\n            final Path modulePath = paimonRootPath.resolve(inf", "first_line_groundtruth": "return dependency.getGroupId().contains(\"org.scala-lang\")", "first_line_prediction": " return dependency.getGroupId().equals(\"org.scala-lang\") &&", "match": 0}
{"groundtruth": "+ dependency.getVersion()\n                + \":\"\n                + dependency.getClassifier().orElse(\"(no-classifier)\");", "prediction": " + dependency.getVersion();\n    }", "first_line_groundtruth": "+ dependency.getVersion()", "first_line_prediction": " + dependency.getVersion();", "match": 0}
{"groundtruth": "= !cfg.getCaCertPath().isEmpty();", "prediction": " = cfg.getCaCertPath() != null;\n\n        if (insecure) {\n            channelBuilder.usePlaintext();\n        } else if (caSpecified) {\n            SslContext sslContext = GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n            channelBuilder.sslContext(sslContext);\n        }\n\n        return channelBuilder.build();\n    }", "first_line_groundtruth": "= !cfg.getCaCertPath().isEmpty();", "first_line_prediction": " = cfg.getCaCertPath() != null;", "match": 0}
{"groundtruth": "with(Node.literal(\"string\").mustConsumeChild()\n                                        .with(Node.greedyString())\n                                )\n                );", "prediction": "with(Node.literal(\"multipv\").mustConsumeChild()\n                                         .with(Node.integer().complete(multipv::set))\n                                 )\n                                 .with(Node.literal(\"multipv\").mustConsumeChild()\n                                         .with(Node.integer().complete(multipv::set))\n                                 )\n                                 .with(Node.literal(\"multipv\").mustConsumeChild()\n                                         .with(Node.integer().complete(multipv::set))\n                                 )\n                                 .with(Node.literal(\"multipv\").mustConsumeChild()\n                                         .with(Node.integer().complete(multipv::set))\n                                 )\n                                 .", "first_line_groundtruth": "with(Node.literal(\"string\").mustConsumeChild()", "first_line_prediction": "with(Node.literal(\"multipv\").mustConsumeChild()", "match": 0}
{"groundtruth": "boolean isTestDependency = dependency.getScope().get().equals(\"test\");", "prediction": " boolean dependsOnScalaTest = dependsOnScalaTest(dependency);\n                if (dependsOnScala || dependsOnScalaTest) {\n                    infected = true;\n                    break;\n                }\n            }\n\n            if (infected) {\n                infectedModules.add(moduleName);\n            } else {\n                cleanModules.add(moduleName);\n            }\n        }\n\n        return new ParseResult(cleanModules, infectedModules);\n    }\n\n    private static boolean isExcluded(final String moduleName) {\n        return EXCLUDED_MODULES.contains(moduleName);\n    }\n\n    private static String stripScalaSuffix(final String moduleName) {\n        return", "first_line_groundtruth": "boolean isTestDependency = dependency.getScope().get().equals(\"test\");", "first_line_prediction": " boolean dependsOnScalaTest = dependsOnScalaTest(dependency);", "match": 0}
{"groundtruth": "= NoticeFileChecker.run(new File(args[0]), Paths.get(args[1]));", "prediction": " = 0;\n        int warningIssueCount = 0;\n        int infoIssueCount    = 0;\n\n        File pathMavenBuildOutput = new File(args[0]);\n        File pathPaimonRoot       = new File(args[1]);\n        File pathPaimonDeployed   = new File(args[2]);\n\n        // Check for NOTICE files\n        File[] files = pathMavenBuildOutput.listFiles(file -> file.getName().endsWith(\".txt\"));\n        for (File file : files) {\n            if (file.getName().startsWith(\"NOTICE\")) {\n                if (checkNoticeFile(file", "first_line_groundtruth": "= NoticeFileChecker.run(new File(args[0]), Paths.get(args[1]));", "first_line_prediction": " = 0;", "match": 0}
{"groundtruth": "severeIssueCount += JarFileChecker.checkPath(Paths.get(args[2]));", "prediction": " if (severeIssueCount > 0) {\n             System.out.println(\"Severe issues found in NOTICE files: \" + severeIssueCount);\n             System.exit(1);\n         }\n    }", "first_line_groundtruth": "severeIssueCount += JarFileChecker.checkPath(Paths.get(args[2]));", "first_line_prediction": " if (severeIssueCount > 0) {", "match": 0}
{"groundtruth": "wrapped.start(cmd),\n                SearchResultsWrapper::new,\n                b\n        );", "prediction": "wrapped.start(cmd),\n                e -> new SearchResultsWrapper(e, b)\n        );\n    }\n\n    @LuaWhitelist\n    public CompletableFutureWrapper<SearchResults, SearchResultsWrapper> start(String cmd, Function<StockfishError, LuaValue> errorFunction) {\n        return new CompletableFutureWrapper<>(\n                this.wrapped.start(cmd, errorFunction),\n                e -> new SearchResultsWrapper(e, b)\n        );\n    }\n\n    @LuaWhitelist\n    public CompletableFutureWrapper<SearchResults, SearchResultsWrapper> start(String cmd, Function<StockfishError, LuaValue> errorFunction, Function<SearchResults, LuaValue>", "first_line_groundtruth": "wrapped.start(cmd),", "first_line_prediction": "wrapped.start(cmd),", "match": 1}
{"groundtruth": "DependencyParser.parseDependencyTreeOutput(path);", "prediction": " DependencyParser.parseMavenOutput(path);\n\n        for (final Map.Entry<String, DependencyTree> entry : dependenciesByModule.entrySet()) {\n            final String moduleName = entry.getKey();\n            final DependencyTree dependencyTree = entry.getValue();\n\n            if (EXCLUDED_MODULES.contains(moduleName)) {\n                continue;\n            }\n\n            if (dependencyTree.isScalaFree()) {\n                cleanModules.add(moduleName);\n            } else {\n                infectedModules.add(moduleName);\n            }\n        }\n\n        return new ParseResult(cleanModules, infectedModules);\n    }\n\n    private static Collection<String>", "first_line_groundtruth": "DependencyParser.parseDependencyTreeOutput(path);", "first_line_prediction": " DependencyParser.parseMavenOutput(path);", "match": 0}
{"groundtruth": "(!noticeContents.getNoticeModuleName().equals(moduleName)) {", "prediction": " (!noticeContents.getLines().get(0).equals(moduleName)) {\n                addProblem(problemsBySeverity, Severity.CRITICAL, \"The first line of the NOTICE file is not the module name.\");\n            }\n\n            // check that all dependencies are listed in the NOTICE file\n            for (Dependency dependency : modulesWithShadedDependencies.get(moduleName)) {\n                if (!noticeContents.getDependencies().contains(dependency)) {\n                    addProblem(\n                            problemsBySeverity,\n                            Severity.CRITICAL,\n                            \"The NOTICE file does not list the dependency \" + dependency);\n                }\n            }\n\n            // check that all dependencies are listed in", "first_line_groundtruth": "(!noticeContents.getNoticeModuleName().equals(moduleName)) {", "first_line_prediction": " (!noticeContents.getLines().get(0).equals(moduleName)) {", "match": 0}
{"groundtruth": "+ dependency.getClassifier().orElse(\"(no-classifier)\");", "prediction": " + dependency.getScope();\n    }", "first_line_groundtruth": "+ dependency.getClassifier().orElse(\"(no-classifier)\");", "first_line_prediction": " + dependency.getScope();", "match": 0}
{"groundtruth": "final Set<String> deployedModules = DeployParser.parseDeployOutput(buildResult);", "prediction": " // parse NOTICE files from modules\n        final Map<String, NoticeContents> modulesWithNotices =\n                parseNotices(modulesWithBundledDependencies, root);\n\n        // check NOTICE files for missing dependencies\n        final Map<String, Set<String>> missingDependencies =\n                checkNoticesForMissingDependencies(modulesWithNotices, modulesWithBundledDependencies);\n\n        // check NOTICE files for excess dependencies\n        final Map<String, Set<String>> excessDependencies =\n                checkNoticesForExcessDependencies(modulesWithNotices, modulesWithBundledDependencies);\n\n        // check NOTICE files for duplicate dependencies\n        final Map<String,", "first_line_groundtruth": "final Set<String> deployedModules = DeployParser.parseDeployOutput(buildResult);", "first_line_prediction": " // parse NOTICE files from modules", "match": 0}
{"groundtruth": "= isExcluded(dependency.getArtifactId());", "prediction": " = isExcluded(dependency.getArtifactId());\n\n                if (dependsOnScala && isTestDependency && !isExcluded) {\n                    infected = true;\n                    infectedModules.add(moduleName);\n                    break;\n                }\n            }\n\n            if (!infected) {\n                cleanModules.add(moduleName);\n            }\n        }\n\n        return new ParseResult(cleanModules, infectedModules);\n    }\n\n    private static boolean isExcluded(final String moduleName) {\n        return EXCLUDED_MODULES.contains(moduleName);\n    }\n\n    private static boolean dependsOnScala(final Dependency dependency) {\n        return dependency.getGroupId", "first_line_groundtruth": "= isExcluded(dependency.getArtifactId());", "first_line_prediction": " = isExcluded(dependency.getArtifactId());", "match": 0}
{"groundtruth": "wrapped.stop();", "prediction": " wrapped.stop();\n             return LuaValue.NIL;\n        } catch (StockfishError e) {\n            return b.errorFunction().call(e.getMessage());\n        }\n    }\n\n    @LuaWhitelist\n    public Varargs getAnalysis() {\n        return wrapped.getAnalysis();\n    }\n\n    @LuaWhitelist\n    public Varargs getAnalysis(Function<Varargs, Varargs> func) {\n        return func.apply(wrapped.getAnalysis());\n    }\n\n    @LuaWhitelist\n    public Varargs getAnalysis(Varargs args) {\n        return wrapped.getAnalysis(args);\n    }\n\n    @LuaWhitelist\n    public Var", "first_line_groundtruth": "wrapped.stop();", "first_line_prediction": " wrapped.stop();", "match": 0}
{"groundtruth": "declaredDependency : noticeContents.getDeclaredDependencies()) {", "prediction": " dependency : noticeContents.getDependencies()) {\n                declaredDependencies.add(dependency);\n            }\n\n            // collect all shaded dependencies from NOTICE file\n            Set<Dependency> shadedDependencies = new HashSet<>();\n            for (Dependency dependency : noticeContents.getDependencies()) {\n                if (dependency.getGroupId().contains(\"org.apache.paimon\")) {\n                    shadedDependencies.add(dependency);\n                }\n            }\n\n            // collect all shaded dependencies from modules\n            Set<Dependency> shadedDependenciesFromModules = new HashSet<>();\n            for (Map.Entry<String, Set<Dependency>> entry : modulesWithShadedDependencies", "first_line_groundtruth": "declaredDependency : noticeContents.getDeclaredDependencies()) {", "first_line_prediction": " dependency : noticeContents.getDependencies()) {", "match": 0}
{"groundtruth": "of(Dependency.create(groupId, artifactId, version, classifier));", "prediction": "of(new Dependency(groupId, artifactId, version, classifier));\n        }\n        return Optional.empty();\n    }", "first_line_groundtruth": "of(Dependency.create(groupId, artifactId, version, classifier));", "first_line_prediction": "of(new Dependency(groupId, artifactId, version, classifier));", "match": 0}
{"groundtruth": "(dependency.getArtifactId()).find();", "prediction": "(dependency.getArtifactId()).matches();\n    }\n\n    private static boolean isExcluded(final String artifactId) {\n        return EXCLUDED_MODULES.contains(artifactId);\n    }\n\n    private static Collection<String> checkScalaSuffixes(\n            final ParseResult parseResult,\n            final Path paimonRootPath) {\n        final List<String> violations = new ArrayList<>();\n\n        for (String infectedModule : parseResult.getInfectedModules()) {\n            final Path modulePath = paimonRootPath.resolve(infectedModule);\n            final Path moduleBuildPath = modulePath.resolve(\"pom.xml\");", "first_line_groundtruth": "(dependency.getArtifactId()).find();", "first_line_prediction": "(dependency.getArtifactId()).matches();", "match": 0}
{"groundtruth": "NoticeParser.parseNoticeFile(noticeFile);", "prediction": " Optional.of(NoticeParser.parseNoticeFile(noticeFile));\n                                            } catch (IOException e) {\n                                                LOG.error(\"Failed to parse NOTICE file \" + noticeFile, e);\n                                                return Optional.empty();\n                                            }\n                                        }));\n\n        final Map<String, Set<String>> moduleToBundledDependencies =\n                modulesWithBundledDependencies.entrySet().stream()\n                                            .collect(\n                                                    Collectors.toMap(\n                                                            Map.Entry::getKey,\n                                                            entry -> entry.getValue().stream()\n                                                                       .map(Dependency::toString)\n                                                                       .collect(Collectors.toSet())));\n\n        final Map<String, Set<", "first_line_groundtruth": "NoticeParser.parseNoticeFile(noticeFile);", "first_line_prediction": " Optional.of(NoticeParser.parseNoticeFile(noticeFile));", "match": 0}
{"groundtruth": ".get(module).flatten().collect(Collectors.toList());", "prediction": ".get(module).getDependencies();\n            final boolean isScalaFree = dependencies.stream()\n                    .noneMatch(d -> d.getArtifactId().endsWith(\"_2.11\"));\n            if (isScalaFree) {\n                cleanModules.add(moduleName);\n            } else {\n                infectedModules.add(moduleName);\n            }\n        }\n\n        return new ParseResult(cleanModules, infectedModules);\n    }\n\n    private static boolean isExcluded(final String moduleName) {\n        return EXCLUDED_MODULES.contains(moduleName);\n    }\n\n    private static String stripScalaSuffix(final String moduleName) {\n       ", "first_line_groundtruth": ".get(module).flatten().collect(Collectors.toList());", "first_line_prediction": ".get(module).getDependencies();", "match": 0}
{"groundtruth": "return ParserUtils.parsePluginOutput(\n                lines.filter(line -> !line.contains(\" Excluding \")),\n                SHADE_NEXT_MODULE_PATTERN,\n                ShadeParser::parseBlock);", "prediction": " Map<String, Set<Dependency>> result = ParserUtils.createMap();\n         Set<Dependency> dependencies = new LinkedHashSet<>();\n         Iterator<String> iterator = lines.iterator();\n         while (iterator.hasNext()) {\n             String line = iterator.next();\n             Matcher matcher = SHADE_NEXT_MODULE_PATTERN.matcher(line);\n             if (matcher.matches()) {\n                 String module = matcher.group(\"module\");\n                 result.put(module, dependencies);\n                 dependencies = new LinkedHashSet<>();\n             } else {\n                 Matcher includeMatcher = SHADE_INCLUDE_MODULE_PATTERN.matcher(line);\n                ", "first_line_groundtruth": "return ParserUtils.parsePluginOutput(", "first_line_prediction": " Map<String, Set<Dependency>> result = ParserUtils.createMap();", "match": 0}
{"groundtruth": "(policyCtx.getName(), policyCtx.getLabel());", "prediction": "(policyCtx.getPolicyName(), policyCtx.getPolicyLabel());\n\n        isBuilder.setIdentityContext(identityContext);\n        isBuilder.setPolicyContext(policyContext);\n        isBuilder.setPolicyInstance(policy);\n\n        if (values != null) {\n            Struct struct = Struct.newBuilder().putAllFields(values).build();\n            isBuilder.setValues(struct);\n        }\n\n        IsResponse response = client.is(isBuilder.build());\n\n        return response.getResultList();\n    }\n\n    private IdentityContext buildIdentityContext(IdentityCtx identityCtx) {\n        IdentityContext.Builder identityContextBuilder =", "first_line_groundtruth": "(policyCtx.getName(), policyCtx.getLabel());", "first_line_prediction": "(policyCtx.getPolicyName(), policyCtx.getPolicyLabel());", "match": 0}
{"groundtruth": "identityContext.getIdentityType());", "prediction": "identityContext.getType());\n        identityContextBuilder.setRoles(identityContext.getRolesList());\n        identityContextBuilder.setGroups(identityContext.getGroupsList());\n\n        return identityContextBuilder.build();\n    }\n\n    private PolicyContext buildPolicyContext(PolicyCtx policyContext) {\n        PolicyContext.Builder policyContextBuilder = PolicyContext.newBuilder();\n        policyContextBuilder.setPolicy(policyContext.getPolicy());\n        policyContextBuilder.setRoles(policyContext.getRolesList());\n        policyContextBuilder.setGroups(policyContext.getGroupsList());\n\n        return policyContextBuilder.build();\n    }\n\n   ", "first_line_groundtruth": "identityContext.getIdentityType());", "first_line_prediction": "identityContext.getType());", "match": 0}
{"groundtruth": "PolicyInstance policy = buildPolicy(policyContext.getName(), policyContext.getLabel());", "prediction": " PolicyContext policyContextBuilder = buildPolicyContext(policyContext);\n         Struct.Builder resourceContextBuilder = buildResourceContext(values);\n\n        queryRequestBuilder.setPolicyContext(policyContextBuilder);\n        queryRequestBuilder.setResourceContext(resourceContextBuilder);\n\n        QueryResponse queryResponse = client.query(queryRequestBuilder.build());\n\n        return queryResponse.getResult();\n    }\n\n    private IdentityContext buildIdentityContext(IdentityCtx identityCtx) {\n        IdentityContext.Builder identityContextBuilder = IdentityContext.newBuilder();\n\n        identityContextBuilder.setUserId(identityCtx.getUserId());\n        identityContextBuilder.setUsername(identityCtx.getUsername", "first_line_groundtruth": "PolicyInstance policy = buildPolicy(policyContext.getName(), policyContext.getLabel());", "first_line_prediction": " PolicyContext policyContextBuilder = buildPolicyContext(policyContext);", "match": 0}
{"groundtruth": "configIntermediary.updateConfigByObject(className, configObjString);", "prediction": " JSONObject configObj = JSONObject.parseObject(configObjString);\n        ConfigSupport configByObject = configIntermediary.getConfigByObject(className);\n        configByObject.setConfig(configObj);\n        configIntermediary.updateConfig(configByObject);\n        responseWriter(response, configByObject);\n    }\n\n    private void responseWriter(HttpServletResponse response, ConfigSupport configByObject) throws IOException {\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        response.getWriter().write(configByObject.getConfig().toJSONString());\n    }", "first_line_groundtruth": "configIntermediary.updateConfigByObject(className, configObjString);", "first_line_prediction": " JSONObject configObj = JSONObject.parseObject(configObjString);", "match": 0}
{"groundtruth": "gitClient.listTags();", "prediction": " gitClient.getAllTags();\n    } catch (GitAPIException | IOException e) {\n      log.error(\"Unable to get all tags due to: [{}]\", e.getMessage(), e);\n      throw new RuntimeException(e);\n    }\n\n    Collections.reverse(tags);\n    return tags;\n  }\n\n  private void generateChangelog(JGit gitClient, JiraClient jiraClient, ChangelogGenerator changelogGenerator, String tagName, List<String> issueKeys) {\n    try {\n      changelogGenerator.generateChangelog(gitClient, jiraClient, tagName, issueKeys);\n    } catch (MissingObjectException e)", "first_line_groundtruth": "gitClient.listTags();", "first_line_prediction": " gitClient.getAllTags();", "match": 0}
{"groundtruth": "gitClient.commitChangelogTagAndPush(tagName);", "prediction": " gitClient.commitAndPush(tagName);\n    } catch (GitAPIException | MissingObjectException e) {\n      log.error(\"Committing exception: [{}]\", e.getMessage(), e);\n      throw new RuntimeException(e);\n    }\n\n    log.info(\"Changelog generation complete.\");\n  }\n\n  private String processGenerateChangelogRequest(JGit gitClient, JiraClient jiraClient, ChangelogGenerator changelogGenerator, List<String> tags, String[] inputArgument) {\n    String tagName = null;\n    if (inputArgument.length > 0) {\n      tagName = inputArgument[0];\n    } else", "first_line_groundtruth": "gitClient.commitChangelogTagAndPush(tagName);", "first_line_prediction": " gitClient.commitAndPush(tagName);", "match": 0}
{"groundtruth": "> issueKeys = gitClient.getAllIssuesSinceLastTag();", "prediction": "> newTags = gitClient.incrementVersion(tags, versioningStrategy);\n        tagName = newTags.get(newTags.size() - 1);\n      } else {\n        tagName = gitClient.generateChangelogTag(tags);\n      }\n    } catch (GitAPIException | IOException e) {\n      log.error(\"Unable to generate the changelog due to: [{}]\", e.getMessage(), e);\n      throw new RuntimeException(e);\n    }\n\n    log.info(\"Generating changelog for tag: [{}]\", tagName);\n    try {\n      changelogGenerator.generateChangelog(jiraClient, tagName);\n    } catch", "first_line_groundtruth": "> issueKeys = gitClient.getAllIssuesSinceLastTag();", "first_line_prediction": "> newTags = gitClient.incrementVersion(tags, versioningStrategy);", "match": 0}
{"groundtruth": ".generateChangelogFromExisting(gitClient.getWorkingDir(), tagName, jiraIssues);", "prediction": ".generateChangelog(gitClient, jiraIssues, tagName);\n  }", "first_line_groundtruth": ".generateChangelogFromExisting(gitClient.getWorkingDir(), tagName, jiraIssues);", "first_line_prediction": ".generateChangelog(gitClient, jiraIssues, tagName);", "match": 0}
{"groundtruth": "ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));", "prediction": " ConfigPlus config = new ConfigPlus(configCategory, configCode, configValue);\n                 this.insert(config);\n            }\n        }\n        return configSupport;\n    }\n\n    @Override\n    default <T extends ConfigSupport> void delete(T configSupport) {\n        Field[] fields = configSupport.getClass().getDeclaredFields();\n        String configCategory = configSupport.getClass().getSimpleName();\n        List<ConfigPlus> configs = getConfigByCategoryAndCode(configCategory, TypeJudgmentUtil.getConfigCodes(fields));\n        Field.setAccessible(fields, true);\n        for (Field field : fields) {\n            String config", "first_line_groundtruth": "ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));", "first_line_prediction": " ConfigPlus config = new ConfigPlus(configCategory, configCode, configValue);", "match": 0}
{"groundtruth": "Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));", "prediction": " Config(configCategory, configCode, configValue);\n                entityManager.persist(config);\n            }\n        }\n        return configSupport;\n    }\n\n    @Override\n    public <T extends ConfigSupport> List<T> list(Class<T> clazz) {\n        CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n        CriteriaQuery<T> criteriaQuery = builder.createQuery(clazz);\n        Root<T> root = criteriaQuery.from(clazz);\n        criteriaQuery.select(root);\n        return entityManager.createQuery(criteriaQuery).getResultList();\n    }\n\n    @Override\n    public <T extends ConfigSupport", "first_line_groundtruth": "Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));", "first_line_prediction": " Config(configCategory, configCode, configValue);", "match": 0}
{"groundtruth": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");", "prediction": "substring(requestURI.lastIndexOf(\"/\") + 1);\n        ConfigSupport configSupport = configIntermediary.getConfigSupport(className);\n        if (configSupport == null) {\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        response.getWriter().write(JSONObject.toJSONString(configSupport));\n    }\n\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String requestURI = request.getRequestURI();\n        String className = requestURI.substring(requestURI.lastIndexOf(\"/\") + 1", "first_line_groundtruth": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");", "first_line_prediction": "substring(requestURI.lastIndexOf(\"/\") + 1);", "match": 0}
{"groundtruth": "> issueKeys = gitClient.getIssuesWithinTag(tagName);", "prediction": "> issueKeys = gitClient.getAllIssuesSinceLastTag();\n\n        generateChangelog(gitClient, jiraClient, changelogGenerator, tagName, issueKeys);\n      } else {\n        tagName = tags.get(tags.size() - 1);\n\n        List<String> issueKeys = gitClient.getAllIssuesSinceLastTag();\n\n        generateChangelog(gitClient, jiraClient, changelogGenerator, tagName, issueKeys);\n      }\n    } catch (MissingObjectException e) {\n      log.error(\"Unable to find the tag: [{}]\", tagName, e);\n      throw new RuntimeException(e);\n    }", "first_line_groundtruth": "> issueKeys = gitClient.getIssuesWithinTag(tagName);", "first_line_prediction": "> issueKeys = gitClient.getAllIssuesSinceLastTag();", "match": 0}
{"groundtruth": "<Issue> jiraIssues = jiraClient.getIssueList(jiraIssueKeys);", "prediction": "<Issue> issues = jiraClient.getIssues(jiraIssueKeys);\n    changelogGenerator.generateChangelog(gitClient, tagName, issues);\n  }", "first_line_groundtruth": "<Issue> jiraIssues = jiraClient.getIssueList(jiraIssueKeys);", "first_line_prediction": "<Issue> issues = jiraClient.getIssues(jiraIssueKeys);", "match": 0}
{"groundtruth": "withRegion(null != config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)\n                .withClientConfiguration(configuration)\n                .build();", "prediction": "withEndpointConfiguration(config.getEndpointConfiguration())\n                 .withClientConfiguration(configuration)\n                 .build();\n\n        writer = new DataWriter(client, config.getDatasetArn(), config.getDatasetType(), config.getDatasetGroupArn(), config.getRoleArn(), config.getRegion(), config.getPersonalizeEventsBatchSize(), config.getPersonalizeEventsBatchTimeout(), config.getPersonalizeEventsBatchRetryTimeout(), config.getPersonalizeEventsBatchRetryDelay(), config.getPersonalizeEventsBatchRetryMaxAttempts(), config.getPersonalizeEventsBatchRetryMaxDelay(), config.getPersonalizeEventsBatch", "first_line_groundtruth": "withRegion(null != config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)", "first_line_prediction": "withEndpointConfiguration(config.getEndpointConfiguration())", "match": 0}
{"groundtruth": "writer.closeQuietly();", "prediction": " log.error(\"Retrying {} times\", retryAttempts);\n             remainingRetries = retryAttempts - 1;\n             for (SinkRecord record : records) {\n                 reporter.report(record, ex -> {\n                     if (ex != null) {\n                         log.error(\"Error in reporting errant record:\", ex);\n                     }\n                 });\n             }\n        } else {\n            log.error(\"Failed to write data to Personalize\");\n        }\n    }\n\n    @Override\n    public void stop() {\n        log.info(\"Stopping Amazon Personalize Sink task\");\n        if (writer != null) {\n            writer.close();\n        }", "first_line_groundtruth": "writer.closeQuietly();", "first_line_prediction": " log.error(\"Retrying {} times\", retryAttempts);", "match": 0}
{"groundtruth": "(config.getMaxRetries());", "prediction": "(config.getMaxRetries());\n        AmazonPersonalizeEvents personalizeEvents = new AmazonPersonalizeEventsClient(configuration);\n        writer = new DataWriter(personalizeEvents, config, reporter);\n    }\n\n    @Override\n    public void put(Collection<SinkRecord> records) {\n        log.info(\"Putting records to Amazon Personalize\");\n        DateTime start = DateTime.now();\n        writer.write(records);\n        DateTime end = DateTime.now();\n        log.info(\"Putting records to Amazon Personalize completed in \" + (end.getMillis() - start.getMillis()) + \" ms\");\n    }\n\n   ", "first_line_groundtruth": "(config.getMaxRetries());", "first_line_prediction": "(config.getMaxRetries());", "match": 1}
{"groundtruth": "!= config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)\n                .withClientConfiguration(configuration)\n                .build();", "prediction": " /*config.getRegion()*/)\n                 .withClientConfiguration(configuration)\n                 .build();\n\n        writer = new DataWriter(client, config.getDatasetArn(), config.getDatasetType(), config.getDatasetGroupArn(), config.getDatasetImportJobArn(), config.getDatasetImportJobName(), config.getDatasetImportJobOutputPath(), config.getDatasetImportJobRoleArn(), config.getDatasetImportJobInputPath(), config.getDatasetImportJobInputFormat(), config.getDatasetImportJobCompressionType(), config.getDatasetImportJobCompressionLevel(), config.getDatasetImportJobDataStartTime(), config.", "first_line_groundtruth": "!= config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)", "first_line_prediction": " /*config.getRegion()*/)", "match": 0}
{"groundtruth": "\"chat\", token.chat().id())\n      .fetch()\n      .first()\n      .then();", "prediction": "\n            \"chat\",\n            token.chat().isPresent() ? token.chat().get().id() : null\n         )\n       .fetch()\n       .rowsUpdated()\n       .then();\n  }\n\n  @Override\n  public Mono<Token> get(final String token) {\n    return this.db.sql(\n         \"SELECT token, alias, chat FROM token WHERE token = :token\"\n       )\n       .bind(\"token\", token)\n       .map(row -> new Token(\n            row.get(\"token\", String.class),\n            row.get(\"alias\", String.class),\n            row.get(\"chat\", Long", "first_line_groundtruth": "\"chat\", token.chat().id())", "first_line_prediction": "", "match": 0}
{"groundtruth": "methodLog.setStartTime(startTime);", "prediction": " methodLog.setIp(ipAddress);\n         methodLog.setArgs(args);\n         methodLog.setReturning(returning);\n         methodLog.setMethod(methodName);\n         methodLog.setModule(module);\n         methodLog.setUrl(url);\n         methodLog.setMethods(Arrays.toString(methods));\n         methodLog.setTimeConsuming(timeConsuming);\n         methodLog.setExceptionInfo(exceptionInfo);\n         methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setStartTime(startTime);", "first_line_prediction": " methodLog.setIp(ipAddress);", "match": 0}
{"groundtruth": "methodLog.setOperator(\"system\");", "prediction": " methodLog.setOperator(ipAddress);\n        }\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setOperator(\"system\");", "first_line_prediction": " methodLog.setOperator(ipAddress);", "match": 0}
{"groundtruth": ".bind(\"id\", chat.id())\n      .fetch()\n      .first()\n      .then();", "prediction": "\n       .bind(\"id\", chat.getId())\n       .fetch()\n       .rowsUpdated()\n       .then();\n  }\n\n  @Override\n  public Mono<Void> remove(final Chat chat) {\n    return this.db.sql(\n         \"DELETE FROM chat WHERE id = :id\"\n       )\n       .bind(\"id\", chat.getId())\n       .fetch()\n       .rowsUpdated()\n       .then();\n  }", "first_line_groundtruth": ".bind(\"id\", chat.id())", "first_line_prediction": "", "match": 0}
{"groundtruth": "methodLog.setMethodName(methodName);", "prediction": " methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setIp(ipAddress);\n        methodLog.setArgs(args);\n        methodLog.setReturning(returning);\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethod(methodName);\n        methodLog.setMethodParams(replaceStrategy.getParams());\n        methodLog.setMethodParamsType(replaceStrategy.getParamsType());\n        methodLog.setMethodParamsDesc(replaceStrategy.getParamsDesc());\n        methodLog.setMethodParamsJson(replaceStrategy.getParamsJson());", "first_line_groundtruth": "methodLog.setMethodName(methodName);", "first_line_prediction": " methodLog.setExceptionInfo(exceptionInfo);", "match": 0}
{"groundtruth": "methodLog.setAllParams(args);", "prediction": " methodLog.setArgs(args);\n        methodLog.setReturning(returning);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setIpAddress(ipAddress);\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethods(Arrays.toString(methods));\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setAllParams(args);", "first_line_prediction": " methodLog.setArgs(args);", "match": 0}
{"groundtruth": "methodLog.setCreateTime(startTime);", "prediction": " methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setCreateTime(startTime);", "first_line_prediction": " methodLogDao.save(methodLog);", "match": 0}
{"groundtruth": "methodLog.setTimeConsuming(timeConsuming);", "prediction": " methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setIp(ipAddress);\n        methodLog.setArgs(args);\n        methodLog.setReturning(returning);\n        methodLog.setMethod(methodName);\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethods(Arrays.toString(methods));\n        methodLog.setTimeConsuming(timeConsuming);\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setTimeConsuming(timeConsuming);", "first_line_prediction": " methodLog.setExceptionInfo(exceptionInfo);", "match": 0}
{"groundtruth": "methodLog.setExceptionInfo(exceptionInfo);", "prediction": " methodLog.setExceptionInfo(exceptionInfo);\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setExceptionInfo(exceptionInfo);", "first_line_prediction": " methodLog.setExceptionInfo(exceptionInfo);", "match": 0}
{"groundtruth": "methodLog.setIpAddress(ipAddress);", "prediction": " methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setIp(ipAddress);\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethod(method.getName());\n        methodLog.setMethodDesc(method.toGenericString());\n        methodLog.setMethodParams(Arrays.stream(method.getParameters()).map(MethodLogUtils::getParamDesc).collect(Collectors.joining(\",\")));\n        methodLog.setMethodReturning(MethodLogUtils.getReturning(result));\n        methodLog.setMethodException(exceptionInfo);\n        methodLog", "first_line_groundtruth": "methodLog.setIpAddress(ipAddress);", "first_line_prediction": " methodLog.setExceptionInfo(exceptionInfo);", "match": 0}
{"groundtruth": "methodLog.setResult(returning);", "prediction": " methodLog.setReturning(returning);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setIp(ipAddress);\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethod(method.getName());\n        methodLog.setArgs(args);\n        methodLog.setReturning(returning);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setIp(ipAddress);\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethod(method.getName());", "first_line_groundtruth": "methodLog.setResult(returning);", "first_line_prediction": " methodLog.setReturning(returning);", "match": 0}
{"groundtruth": "methodLog.setDesc(finishedDesc);", "prediction": " methodLog.setIp(ipAddress);\n         methodLog.setModule(module);\n         methodLog.setUrl(url);\n         methodLog.setMethod(methodName);\n         methodLog.setArgs(args);\n         methodLog.setReturning(returning);\n         methodLog.setFinishedDesc(finishedDesc);\n         methodLog.setExceptionInfo(exceptionInfo);\n         methodLog.setMethodDesc(desc);\n         methodLog.setMethodParams(replaceStrategy.getParams());\n         methodLog.setMethodParamsType(replaceStrategy.getParamsType());\n         methodLog.setMethodParamsDesc(replaceStrategy", "first_line_groundtruth": "methodLog.setDesc(finishedDesc);", "first_line_prediction": " methodLog.setIp(ipAddress);", "match": 0}
{"groundtruth": "methodLog.setEndTime(endTime);", "prediction": " if (Objects.nonNull(endTime)) {\n            methodLog.setEndTime(endTime);\n        }\n        methodLog.setIp(ipAddress);\n        methodLog.setArgs(args);\n        methodLog.setReturning(returning);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setModule(module);\n        methodLog.setUrl(url);\n        methodLog.setMethod(methodName);\n        methodLog.setMethods(Arrays.toString(methods));\n        methodLog.setTimeConsuming(timeConsuming);\n        methodLogDao.save(methodLog);\n    }", "first_line_groundtruth": "methodLog.setEndTime(endTime);", "first_line_prediction": " if (Objects.nonNull(endTime)) {", "match": 0}
{"groundtruth": "movimentacaoRepository.findByVeiculoId(id).isEmpty()){", "prediction": "movimentacaoRepository.findByCondutor(condutorBanco).isEmpty()){\n            throw new IllegalArgumentException(\"N\u00e3o \u00e9 poss\u00edvel excluir um Condutor que possui movimenta\u00e7\u00f5es!\");\n        }\n\n        this.condutorRepository.deleteById(id);\n    }\n\n    /**\n     * Validates the search of a Condutor.\n     *\n     * @param cpf The CPF of the Condutor to be searched.\n     * @return The Condutor with the provided CPF.\n     * @throws IllegalArgumentException If the provided CPF is not found in the database.\n     */\n    public Condutor validar", "first_line_groundtruth": "movimentacaoRepository.findByVeiculoId(id).isEmpty()){", "first_line_prediction": "movimentacaoRepository.findByCondutor(condutorBanco).isEmpty()){", "match": 0}
{"groundtruth": ".marcaRepository.findByNome(nome));", "prediction": ".marcaRepository.findByNome(nome));\n    }\n\n    /**\n     * Creates a new Marca.\n     *\n     * @param marca The Marca to create.\n     * @return ResponseEntity with the Marca if created, otherwise a bad request response.\n     */\n    @PostMapping\n    public ResponseEntity<?> createRequest(@Validated @RequestBody Marca marca) {\n        try {\n            marcaRepository.save(marca);\n            return ResponseEntity.ok(marca);\n        } catch (DataIntegrityViolationException e) {\n            return ResponseEntity.badRequest().body(\"Marca j\u00e1 cadastrada\");\n        }\n   ", "first_line_groundtruth": ".marcaRepository.findByNome(nome));", "first_line_prediction": ".marcaRepository.findByNome(nome));", "match": 1}
{"groundtruth": "return ResponseEntity.ok(condutorRepository.findAllAtivo());", "prediction": " return ResponseEntity.ok(this.condutorService.findActiveCondutores());\n    }\n\n    /**\n     * Retrieves all Condutores by Marca.\n     *\n     * @param marca The Marca of the Condutor to retrieve.\n     * @return ResponseEntity with a list of Condutores by Marca.\n     */\n    @GetMapping(\"/marca/{marca}\")\n    public ResponseEntity<?> getByMarca(@PathVariable(\"marca\") Marca marca) {\n        return ResponseEntity.ok(this.condutorService.findByMarca(marca));\n    }\n\n    /**\n     * Retrieves all Con", "first_line_groundtruth": "return ResponseEntity.ok(condutorRepository.findAllAtivo());", "first_line_prediction": " return ResponseEntity.ok(this.condutorService.findActiveCondutores());", "match": 0}
{"groundtruth": "marcaService.validarDeleteMarca(id);", "prediction": " marcaService.excluirMarca(id);\n            return ResponseEntity.ok(\"Registro exclu\u00eddo com sucesso\");\n        } catch (RuntimeException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }", "first_line_groundtruth": "marcaService.validarDeleteMarca(id);", "first_line_prediction": " marcaService.excluirMarca(id);", "match": 0}
{"groundtruth": "<Veiculo> veiculoList = veiculoRepository.findAllAtivo();", "prediction": "<Veiculo> veiculos = this.veiculoRepository.findByAtivo(true);\n        return ResponseEntity.ok(veiculos);\n    }\n\n    /**\n     * Retrieves all Veiculos by Marca.\n     *\n     * @param marca The Marca of the Veiculos to retrieve.\n     * @return ResponseEntity with a list of all Veiculos by Marca.\n     */\n    @GetMapping(\"/marca/{marca}\")\n    public ResponseEntity<?> findVeiculosByMarca(@PathVariable(\"marca\") Marca marca) {\n        List<Veiculo> veiculos = this.veiculoRepository.findByMarca", "first_line_groundtruth": "<Veiculo> veiculoList = veiculoRepository.findAllAtivo();", "first_line_prediction": "<Veiculo> veiculos = this.veiculoRepository.findByAtivo(true);", "match": 0}
{"groundtruth": "= this.veiculoRepository.findByPlaca(placa);", "prediction": " = veiculoRepository.findByPlaca(placa);\n        return veiculo == null ? ResponseEntity.badRequest().body(\"Placa n\u00e3o encontrada\") : ResponseEntity.ok(veiculo);\n    }\n\n    /**\n     * Creates a new Veiculo.\n     *\n     * @param veiculo The Veiculo to create.\n     * @return ResponseEntity with the created Veiculo.\n     */\n    @PostMapping\n    public ResponseEntity<?> create(@Validated @RequestBody Veiculo veiculo) {\n        return ResponseEntity.ok(this.veiculoService.create(veiculo));\n    }\n\n    /**\n     * Updates an existing Veiculo.\n     *", "first_line_groundtruth": "= this.veiculoRepository.findByPlaca(placa);", "first_line_prediction": " = veiculoRepository.findByPlaca(placa);", "match": 0}
{"groundtruth": "!this.movimentacaoRepository.findByVeiculoId(id).isEmpty()) {", "prediction": "veiculo.getMovimentacoes().size() > 0) {\n            throw new IllegalArgumentException(\"Vehicle has movements !\");\n        }\n\n        this.veiculoRepository.deleteById(id);\n    }\n\n    /**\n     * Realiza valida\u00e7\u00f5es para atualizar um ve\u00edculo no sistema.\n     *\n     * @param veiculo o objeto Veiculo a ser validado.\n     * @throws IllegalArgumentException se alguma das valida\u00e7\u00f5es n\u00e3o passar.\n     */\n    @Transactional\n    public void validarUpdateVeiculo(Long id, Veiculo veiculo) {\n\n        veiculo.setAtualizacao(LocalDateTime.now", "first_line_groundtruth": "!this.movimentacaoRepository.findByVeiculoId(id).isEmpty()) {", "first_line_prediction": "veiculo.getMovimentacoes().size() > 0) {", "match": 0}
{"groundtruth": "Condutor condutor = this.condutorRepository.findbyCPF(cpf);", "prediction": " Condutor condutor = this.condutorRepository.findByCpf(cpf);\n\n        if (condutor == null || condutor.getCpf() == null) {\n            return ResponseEntity.badRequest().body(\"cpf inv\u00e1lido\");\n        }\n\n        return ResponseEntity.ok(condutor);\n    }\n\n    @PostMapping\n    public ResponseEntity<?> create(@Validated @RequestBody Condutor condutor) {\n        return ResponseEntity.ok(this.condutorService.create(condutor));\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<?> update(@PathVariable(\"id\") Long id, @Validated @RequestBody Cond", "first_line_groundtruth": "Condutor condutor = this.condutorRepository.findbyCPF(cpf);", "first_line_prediction": " Condutor condutor = this.condutorRepository.findByCpf(cpf);", "match": 0}
{"groundtruth": "(!this.modeloRepository.findByMarcaId(id).isEmpty()){", "prediction": "(marca.getModelos().size() > 0){\n            throw new IllegalArgumentException(\"A marca n\u00e3o pode ser exclu\u00edda pois possui modelos vinculados!\");\n        }\n\n        marcaRepository.delete(marca);\n    }\n\n    /**\n     * Returns a list of all brands.\n     *\n     * @return A list of all brands.\n     */\n    public List<Marca> listarMarcas(){\n        return marcaRepository.findAll();\n    }\n\n    /**\n     * Returns a list of all brands.\n     *\n     * @param pageable The pagination parameters.\n     *", "first_line_groundtruth": "(!this.modeloRepository.findByMarcaId(id).isEmpty()){", "first_line_prediction": "(marca.getModelos().size() > 0){", "match": 0}
{"groundtruth": "veiculoService.validarDeleteVeiculo(id);", "prediction": " veiculoService.excluirVeiculo(id);\n             return ResponseEntity.ok(\"Registro exclu\u00eddo com sucesso\");\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(e.getMessage());\n        }\n    }", "first_line_groundtruth": "veiculoService.validarDeleteVeiculo(id);", "first_line_prediction": " veiculoService.excluirVeiculo(id);", "match": 0}
{"groundtruth": "modeloService.validarDeleteModelo(id);", "prediction": " modeloService.excluirModelo(id);\n             return ResponseEntity.ok(\"Registro exclu\u00eddo com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.badRequest().body(e.getMessage());\n        }\n    }", "first_line_groundtruth": "modeloService.validarDeleteModelo(id);", "first_line_prediction": " modeloService.excluirModelo(id);", "match": 0}
{"groundtruth": "condutor = this.condutorRepository.findByNome(nome);", "prediction": " condutor = condutorRepository.findByNome(nome);\n        return condutor == null ? ResponseEntity.badRequest().body(\"Nome n\u00e3o encontrado\") : ResponseEntity.ok(condutor);\n    }\n\n    @GetMapping(\"/marca\")\n    public ResponseEntity<?> getByMarca(@RequestParam(\"marca\") String marca) {\n        final Marca marca1 = marcaRepository.findByNome(marca);\n        return marca1 == null ? ResponseEntity.badRequest().body(\"Marca n\u00e3o encontrada\") : ResponseEntity.ok(marca1);\n    }\n\n    @GetMapping(\"/veiculo\")\n    public ResponseEntity<?> getBy", "first_line_groundtruth": "condutor = this.condutorRepository.findByNome(nome);", "first_line_prediction": " condutor = condutorRepository.findByNome(nome);", "match": 0}
{"groundtruth": "= movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();", "prediction": " = movimentacaoRepository.findLastFiveMovimentacoes();\n        return ResponseEntity.ok(lastFiveMovimentacoes);\n    }\n\n    @PostMapping\n    public ResponseEntity<?> createMovimentacao(@Validated @RequestBody Movimentacao movimentacao) {\n        movimentacaoRepository.save(movimentacao);\n        return ResponseEntity.ok(movimentacao);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<?> updateMovimentacao(@PathVariable(\"id\") Long id, @Validated @RequestBody Movimentacao movimentacao) {\n        movimentacao.setId(id);\n        movimentacaoRepository.save(mov", "first_line_groundtruth": "= movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();", "first_line_prediction": " = movimentacaoRepository.findLastFiveMovimentacoes();", "match": 0}
{"groundtruth": ".ok(movimentacaoRepository.ultimaMovimentacao());", "prediction": ".ok(movimentacaoRepository.findLastByOrderByEntryDateDesc());\n    }\n\n    @PostMapping\n    public ResponseEntity<?> createMovimentacao(@Validated @RequestBody Movimentacao movimentacao) {\n        movimentacaoRepository.save(movimentacao);\n        return ResponseEntity.ok(movimentacao);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<?> updateMovimentacao(@PathVariable(\"id\") Long id, @Validated @RequestBody Movimentacao movimentacao) {\n        movimentacao.setId(id);\n        movimentacaoRepository.save(movimentacao);\n        return ResponseEntity.ok(", "first_line_groundtruth": ".ok(movimentacaoRepository.ultimaMovimentacao());", "first_line_prediction": ".ok(movimentacaoRepository.findLastByOrderByEntryDateDesc());", "match": 0}
{"groundtruth": "ok(marcaRepository.findAllAtivo());", "prediction": "ok(this.marcaRepository.findByAtivo(true));\n    }\n\n    /**\n     * Creates a new Marca.\n     *\n     * @param marca The Marca to create.\n     * @return ResponseEntity with the Marca if created, otherwise a bad request response.\n     */\n    @PostMapping\n    public ResponseEntity<?> createMarca(@Validated @RequestBody Marca marca) {\n        try {\n            marcaRepository.save(marca);\n            return ResponseEntity.ok(marca);\n        } catch (DataIntegrityViolationException e) {\n            return ResponseEntity.badRequest().body(\"Marca j\u00e1 cadastr", "first_line_groundtruth": "ok(marcaRepository.findAllAtivo());", "first_line_prediction": "ok(this.marcaRepository.findByAtivo(true));", "match": 0}
{"groundtruth": "<Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertasByPlaca(placa);", "prediction": "<Movimentacao> movimentacoes = movimentacaoRepository.findByPlacaContainingIgnoreCase(placa);\n            return ResponseEntity.ok(movimentacoes);\n        }\n        // Return all open movimentacoes\n        return ResponseEntity.ok(movimentacaoRepository.findByAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAndAnd", "first_line_groundtruth": "<Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertasByPlaca(placa);", "first_line_prediction": "<Movimentacao> movimentacoes = movimentacaoRepository.findByPlacaContainingIgnoreCase(placa);", "match": 0}
{"groundtruth": ".ok(this.modeloRepository.findByNome(nome));", "prediction": ".ok(this.modeloRepository.findByNomeContainingIgnoreCase(nome));\n    }\n\n    @GetMapping(\"/marca/{marca}\")\n    public ResponseEntity<?> getByMarca(@PathVariable(\"marca\") String marca) {\n        return ResponseEntity.ok(this.modeloRepository.findByMarcaContainingIgnoreCase(marca));\n    }\n\n    @GetMapping(\"/marca/{marca}/modelo/{modelo}\")\n    public ResponseEntity<?> getByMarcaModelo(@PathVariable(\"marca\") String marca, @PathVariable(\"modelo\") String modelo) {\n        return ResponseEntity.ok(this.modeloRepository.findByMarcaContainingIgnoreCaseAndModelo", "first_line_groundtruth": ".ok(this.modeloRepository.findByNome(nome));", "first_line_prediction": ".ok(this.modeloRepository.findByNomeContainingIgnoreCase(nome));", "match": 0}
{"groundtruth": "> modeloList = modeloRepository.findAllAtivo();", "prediction": "> modelos = this.modeloRepository.findByAtivoTrue();\n        return ResponseEntity.ok(modelos);\n    }\n\n    /**\n     * Retrieves all Modelos by Marca.\n     *\n     * @param marca The Marca of the Modelo to retrieve.\n     * @return ResponseEntity with a list of all Modelos by Marca.\n     */\n    @GetMapping(\"/marca/{marca}\")\n    public ResponseEntity<?> findModelosByMarca(@PathVariable(\"marca\") Marca marca) {\n        List<Modelo> modelos = this.modeloRepository.findByMarca(marca);\n        return", "first_line_groundtruth": "> modeloList = modeloRepository.findAllAtivo();", "first_line_prediction": "> modelos = this.modeloRepository.findByAtivoTrue();", "match": 0}
{"groundtruth": ".ok(configuracaoRepository.ultimaConfiguracao());", "prediction": ".ok(configuracaoService.getLast());\n    }\n\n    @PostMapping\n    public ResponseEntity<?> saveRequest(@Validated @RequestBody Configuracao configuracao) {\n        return ResponseEntity.ok(configuracaoRepository.save(configuracao));\n    }", "first_line_groundtruth": ".ok(configuracaoRepository.ultimaConfiguracao());", "first_line_prediction": ".ok(configuracaoService.getLast());", "match": 0}
{"groundtruth": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();", "prediction": "Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertas();\n            return ResponseEntity.ok(movimentacoes);\n        }\n    }\n\n    /**\n     * Retrieves Movimentacoes by date.\n     *\n     * @param date The date of the Movimentacao to retrieve.\n     * @return ResponseEntity with a list of Movimentacoes.\n     */\n    @GetMapping(\"/{date}\")\n    public ResponseEntity<?> findMovimentacoesByDate(@PathVariable(\"date\") String date) {\n        List<Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesByDate(date);", "first_line_groundtruth": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();", "first_line_prediction": "Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertas();", "match": 0}
{"groundtruth": "if (!this.modeloRepository.findByMarcaId(id).isEmpty()) {", "prediction": " // Verificar se o modelo est\u00e1 sendo utilizado em algum ve\u00edculo\n        final List<Veiculo> veiculos = this.veiculoRepository.findByModelo(modelo);\n        Assert.isTrue(veiculos.isEmpty(), \"O modelo n\u00e3o pode ser exclu\u00eddo porque est\u00e1 sendo utilizado em ve\u00edculos!\");\n\n        modeloRepository.delete(modelo);\n    }\n\n    /**\n     * Returns a list of all modelos.\n     *\n     * @return A list of all modelos.\n     */\n    public List<Modelo> listarModelos() {\n        return modeloRepository.findAll();\n   ", "first_line_groundtruth": "if (!this.modeloRepository.findByMarcaId(id).isEmpty()) {", "first_line_prediction": " // Verificar se o modelo est\u00e1 sendo utilizado em algum ve\u00edculo", "match": 0}
{"groundtruth": "= marcaRepository.findActiveElement(marcaId);", "prediction": " = this.marcaRepository.findByAtivoTrue();\n        Assert.isTrue(isActive.stream().anyMatch(marca -> marca.getId().equals(marcaId)),\n                \"N\u00e3o foi poss\u00edvel apagar o modelo, pois a marca n\u00e3o est\u00e1 ativa.\");\n    }\n\n    /**\n     * Validates if the model is active.\n     *\n     * @param modeloId The ID of the model to be validated.\n     * @throws IllegalArgumentException If the model is inactive.\n     */\n    private void validarModeloAtivo(Long modeloId) {\n        final List<Modelo> isActive ", "first_line_groundtruth": "= marcaRepository.findActiveElement(marcaId);", "first_line_prediction": " = this.marcaRepository.findByAtivoTrue();", "match": 0}
{"groundtruth": "movimentacaoService.validarDeleteMovimentacao(id);", "prediction": " movimentacaoService.excluirMovimentacao(id);\n             return ResponseEntity.ok(\"Registro Exclu\u00eddo com Sucesso\");\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(e);\n        }\n    }", "first_line_groundtruth": "movimentacaoService.validarDeleteMovimentacao(id);", "first_line_prediction": " movimentacaoService.excluirMovimentacao(id);", "match": 0}
{"groundtruth": "<Boolean>newResult().data(dao.deleteComposition(composerId, title)).build();", "prediction": "newResult().data(dao.deleteComposition(composerId, title));\n        }\n        catch (EmptyResultDataAccessException e)\n        {\n            throw new GraphqlErrorException(\"No composition found with title: \" + title);\n        }\n    }\n\n    private UnaryOperator<Composer> selectIfPresent(String value, Function<Composer, String> getter)\n    {\n        return c -> Objects.equals(value, c.id()) ? c : null;\n    }", "first_line_groundtruth": "<Boolean>newResult().data(dao.deleteComposition(composerId, title)).build();", "first_line_prediction": "newResult().data(dao.deleteComposition(composerId, title));", "match": 0}
{"groundtruth": "(dao.allComposers()).detect(c -> id == c.id());", "prediction": "(this.dao.findById(id)).get(0);\n    }\n\n    @QueryMapping\n    public List<Composer> composers()\n    {\n        return ListAdapter.adapt(this.dao.findAll());\n    }\n\n    @MutationMapping\n    public Composition createComposition(\n            @Argument CompositionInput compositionInput)\n    {\n        final Composition composition = new Composition();\n        composition.setComposer(compositionInput.getComposer());\n        composition.setPeriod(compositionInput.getPeriod());\n        composition.setYear(compositionInput.getYear());\n        composition.setGenre(compositionInput.getGenre());\n        composition", "first_line_groundtruth": "(dao.allComposers()).detect(c -> id == c.id());", "first_line_prediction": "(this.dao.findById(id)).get(0);", "match": 0}
{"groundtruth": "(Lists.adapt(dao.allComposers()));", "prediction": "(dao.allComposers());\n    }\n\n    @QueryMapping\n    public List<Composer> composers(@Argument int id)\n    {\n        return dao.allComposers().select(c -> c.id() == id);\n    }\n\n    @QueryMapping\n    public List<Composer> composers()\n    {\n        return dao.allComposers();\n    }\n\n    @MutationMapping\n    public DataFetcherResult<Composer> createComposer(@Argument ComposerInput input)\n    {\n        if (input == null)\n        {\n            throw new GraphqlErrorException(\"ComposerInput cannot be null\");\n        }\n\n        if (", "first_line_groundtruth": "(Lists.adapt(dao.allComposers()));", "first_line_prediction": "(dao.allComposers());", "match": 0}
{"groundtruth": "symbolNum = lsbBitReader.readBit() + 1;", "prediction": "ql = alphabetSize;\n            int q = 0;\n            int i = 0;\n            while (ql > 0) {\n                int codeLength = lsbBitReader.readBits(5);\n                if (codeLength == 0) {\n                    codeLength = lsbBitReader.readBits(8);\n                }\n                if (codeLength == 0) {\n                    throw new IOException(\"Invalid code length\");\n                }\n                if (codeLength > 15) {\n                    throw new IOException(\"Invalid code length\");\n                }\n                int symbol = q + (1 << (codeLength - 1));", "first_line_groundtruth": "symbolNum = lsbBitReader.readBit() + 1;", "first_line_prediction": "ql = alphabetSize;", "match": 0}
{"groundtruth": "int) (2 + 2 * lsbBitReader.readBits(3));", "prediction": "int) (lsbBitReader.readBits(4) + 4);\n            codedSymbols = alphabetSize - 1;\n        } else {\n            codedSymbols = alphabetSize;\n        }\n\n        short[] codeLengths = new short[codedSymbols];\n\n        for (int i = 0; i < codedSymbols; i++) {\n            int symbol = lsbBitReader.readBits(maxSymbolBitLength);\n            codeLengths[i] = (short) huffmanTable.getCodeLength(symbol);\n        }\n\n        return codeLengths;\n    }\n\n    /**\n     * Returns the code length for the given symbol\n     *", "first_line_groundtruth": "int) (2 + 2 * lsbBitReader.readBits(3));", "first_line_prediction": "int) (lsbBitReader.readBits(4) + 4);", "match": 0}
{"groundtruth": "short len = (short) lsbBitReader.readBits(3);", "prediction": " lCodeLengths[L_CODE_ORDER[i]] = (short) lsbBitReader.readBits(8);\n            }\n\n            // now read the \"second stage\" code lengths\n            // In the following this is called the P-Code (for position code)\n            int numPCodeLengths = (int) (lsbBitReader.readBits(4) + 4);\n            short[] pCodeLengths = new short[numPCodeLengths];\n\n            for (int i = 0; i < numPCodeLengths; i++) {\n                pCodeLengths[i] = (short) lsbBit", "first_line_groundtruth": "short len = (short) lsbBitReader.readBits(3);", "first_line_prediction": " lCodeLengths[L_CODE_ORDER[i]] = (short) lsbBitReader.readBits(8);", "match": 0}
{"groundtruth": "lsbBitReader.readBits(length);", "prediction": " // Read the symbol\n        short symbol = (short) (lengthAndSymbol & 0xffff);\n\n        // Advance the reader\n        lsbBitReader.readBits(length);\n\n        return symbol;\n    }", "first_line_groundtruth": "lsbBitReader.readBits(length);", "first_line_prediction": " // Read the symbol", "match": 0}
{"groundtruth": "int) (lsbBitReader.readBits(4) + 4);", "prediction": "int) lsbBitReader.readBits(5);\n            int[] lCodeLengths = new int[numLCodeLengths];\n            for (int i = 0; i < numLCodeLengths; i++) {\n                lCodeLengths[i] = (int) lsbBitReader.readBits(3);\n            }\n\n            // now read the \"second stage\" code lengths\n            // In the following this is called the D-Code (for distance code)\n            int numDCodeLengths = (int) lsbBitReader.readBits(5);\n            int[] dCodeLengths = new int[num", "first_line_groundtruth": "int) (lsbBitReader.readBits(4) + 4);", "first_line_prediction": "int) lsbBitReader.readBits(5);", "match": 0}
{"groundtruth": "lsbBitReader.readBits(LEVEL1_BITS);", "prediction": " int symbol = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);\n             return (short) (level2.get(index >>> LEVEL1_BITS)[symbol]);\n        } else {\n            // Lvl1 lookup\n            return (short) (lengthAndSymbol & 0xffff);\n        }\n    }", "first_line_groundtruth": "lsbBitReader.readBits(LEVEL1_BITS);", "first_line_prediction": " int symbol = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);", "match": 0}
{"groundtruth": "short symbol2 = (short) lsbBitReader.readBits(8);", "prediction": " level1[0] = symbol1;\n            } else {\n                for (int i = 0; i < symbolNum; i++) {\n                    level1[i] = symbol1;\n                }\n            }\n        } else {\n            int symbolNum = lsbBitReader.readBit() + 1;\n            boolean first8Bits = lsbBitReader.readBit() == 1;\n            short symbol1 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);\n\n            if (symbolNum == 2) {\n                level1[0] = symbol1", "first_line_groundtruth": "short symbol2 = (short) lsbBitReader.readBits(8);", "first_line_prediction": " level1[0] = symbol1;", "match": 0}
{"groundtruth": "(int) (lsbBitReader.readBits(extraBits) + repeatOffset);", "prediction": "0;\n                while (repeatCount < 64) {\n                    if (lsbBitReader.readBit() == 1) {\n                        repeatCount++;\n                    } else {\n                        repeatCount += 2;\n                    }\n                }\n\n                repeatCount += repeatOffset;\n\n                if (repeatSymbol == 0) {\n                    repeatSymbol = lsbBitReader.readBits(extraBits);\n                }\n\n                for (int j = 0; j < repeatCount; j++) {\n                    codeLengths[i] = repeatSymbol;\n                }\n\n                prevLength = repeatSymbol;\n            }\n        }\n\n        return codeLengths;\n    }", "first_line_groundtruth": "(int) (lsbBitReader.readBits(extraBits) + repeatOffset);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "simpleLengthCode = lsbBitReader.readBit() == 1;", "prediction": " isLevel2 = false;\n        int      codeLength = 0;\n        int      symbol = 0;\n        int      symbolIndex = 0;\n        int      symbolLength = 0;\n        int      symbolValue = 0;\n        int      symbolValueIndex = 0;\n        int      symbolValueLength = 0;\n        int      symbolValueOffset = 0;\n        int      symbolValueOffsetIndex = 0;\n        int      symbolValueOffsetLength = 0;\n        int      symbolValueOffsetOffset = 0;\n        int      symbolValueOffsetOffsetIndex = 0;\n        int     ", "first_line_groundtruth": "simpleLengthCode = lsbBitReader.readBit() == 1;", "first_line_prediction": " isLevel2 = false;", "match": 0}
{"groundtruth": "level2Index = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);", "prediction": " index2 = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);\n            int[] table = level2.get(index2);\n            int symbol = table[(int) lsbBitReader.peekBits(length - LEVEL1_BITS - LEVEL2_BITS)];\n\n            lsbBitReader.readBits(length - LEVEL1_BITS - LEVEL2_BITS); // Consume bits of second level\n\n            return (short) symbol;\n        } else {\n            // Lvl1 lookup\n            lsbBitReader.readBits(length); // Consume bits of", "first_line_groundtruth": "level2Index = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);", "first_line_prediction": " index2 = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);", "match": 0}
{"groundtruth": "short symbol1 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);", "prediction": " // read the first 8 bits of the alphabet\n            for (int i = 0; i < symbolNum; i++) {\n                int codeLength = lsbBitReader.readBits(8);\n                int symbol = lsbBitReader.readBits(first8Bits ? 8 : 16);\n                level1[codeLength] = symbol;\n            }\n        } else {\n            int symbolNum = lsbBitReader.readBit() + 1;\n            boolean first8Bits = lsbBitReader.readBit() == 1;\n            // read the first 8 bits of the alphabet\n           ", "first_line_groundtruth": "short symbol1 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);", "first_line_prediction": " // read the first 8 bits of the alphabet", "match": 0}
{"groundtruth": ") lsbBitReader.peekBits(LEVEL1_BITS);", "prediction": ") (lsbBitReader.readBits(LEVEL1_BITS) >>> 1);\n\n        if (index < level1.length) {\n            return (short) (level1[index] >>> 16);\n        }\n\n        int level2Index = (int) (lsbBitReader.readBits(LEVEL2_BITS) >>> 1);\n        int level2Size = (int) (level1[index] & 0xffff);\n\n        if (level2Index >= level2Size) {\n            throw new IOException(\"Huffman: Invalid level2 index.\");\n        }\n\n        int[] level2 = this", "first_line_groundtruth": ") lsbBitReader.peekBits(LEVEL1_BITS);", "first_line_prediction": ") (lsbBitReader.readBits(LEVEL1_BITS) >>> 1);", "match": 0}
{"groundtruth": "data.getDataElements(x >> bits, y >> bits, rgba);", "prediction": " data.get(x, y, rgba);\n                 int r = rgba[0];\n                 int g = rgba[1];\n                 int b = rgba[2];\n                 int a = rgba[3];\n\n                 int r2 = (r << bits) | (r >> (8 - bits));\n                 int g2 = (g << bits) | (g >> (8 - bits));\n                 int b2 = (b << bits) | (b >> (8 - bits));\n                 int a2 = (a << bits) | (a >> (8 - bits));\n\n                 rgba[0] = (byte) r", "first_line_groundtruth": "data.getDataElements(x >> bits, y >> bits, rgba);", "first_line_prediction": " data.get(x, y, rgba);", "match": 0}
{"groundtruth": "int) (2 + lsbBitReader.readBits(maxSymbolBitLength));", "prediction": "int) (lsbBitReader.readBits(maxSymbolBitLength) + 1);\n        } else {\n            codedSymbols = (int) (lsbBitReader.readBits(1) + 1);\n        }\n\n        short[] codeLengths = new short[codedSymbols];\n\n        for (int i = 0; i < codedSymbols; i++) {\n            int symbol = (int) (lsbBitReader.readBits(huffmanTable.getBitLength(i)) + 1);\n            codeLengths[i] = (short) symbol;\n        }\n\n        return codeLengths;\n    }\n\n    /**", "first_line_groundtruth": "int) (2 + lsbBitReader.readBits(maxSymbolBitLength));", "first_line_prediction": "int) (lsbBitReader.readBits(maxSymbolBitLength) + 1);", "match": 0}
{"groundtruth": "ReplayManager.getInstance().despawnPlayerClone(this);", "prediction": " this.setGamemode(GameMode.SURVIVAL);\n        }\n    }", "first_line_groundtruth": "ReplayManager.getInstance().despawnPlayerClone(this);", "first_line_prediction": " this.setGamemode(GameMode.SURVIVAL);", "match": 0}
{"groundtruth": "raster.setDataElements(x, 0, rgba);", "prediction": " raster.setDataElements(x, 0, rgba);\n        }\n\n        // 0 (0x00000000) predict\n        for (int y = 1; y < height; y++) {\n            raster.getDataElements(0, y, rgba);\n            raster.getDataElements(0, y - 1, predictor);\n            addPixels(rgba, predictor);\n            raster.setDataElements(0, y, rgba);\n        }\n\n        // (0,y) T predict\n        for (int y = 1; y < height; y++) {\n            raster.getDataElements(0", "first_line_groundtruth": "raster.setDataElements(x, 0, rgba);", "first_line_prediction": " raster.setDataElements(x, 0, rgba);", "match": 0}
{"groundtruth": "Live.getInstance().requestLiveToken(\n                (deviceCode, userCode, verificationUrl, expiresIn, interval) -> {", "prediction": " AccountManager.startAuth();\n    }", "first_line_groundtruth": "Live.getInstance().requestLiveToken(", "first_line_prediction": " AccountManager.startAuth();", "match": 0}
{"groundtruth": "String data = FileManager.getFileResourceAsString(\"bedrock-data/required_item_list.json\");", "prediction": " ITEM_DEFINITIONS = JSON.parseObject(FileManager.getFileResourceAsString(\"bedrock-data/item_definitions.json\"), new TypeReference<ArrayList<ItemDefinition>>() {});\n    }\n\n    public static void loadItemDefinitions() {\n        ITEM_DEFINITIONS = JSON.parseObject(FileManager.getFileResourceAsString(\"bedrock-data/item_definitions.json\"), new TypeReference<ArrayList<ItemDefinition>>() {});\n    }\n\n    public static void loadItemDefinitions(String path) {\n        ITEM_DEFINITIONS = JSON.parseObject(FileManager.getFileResourceAsString(path), new TypeReference<ArrayList<ItemDefinition>>()", "first_line_groundtruth": "String data = FileManager.getFileResourceAsString(\"bedrock-data/required_item_list.json\");", "first_line_prediction": " ITEM_DEFINITIONS = JSON.parseObject(FileManager.getFileResourceAsString(\"bedrock-data/item_definitions.json\"), new TypeReference<ArrayList<ItemDefinition>>() {});", "match": 0}
{"groundtruth": "raster.getDataElements(0, 0, rgba);", "prediction": " // (0,1) L predict\n         // (0,2) T predict\n         // (0,3) TR predict\n         // (0,4) TL predict\n         // (0,5) Average2(L, TR) predict\n         // (0,6) Average2(L, TL) predict\n         // (0,7) Average2(L, T) predict\n         // (0,8) Average2(TL, T) predict\n         // (0,9) Average2(T, TR) predict\n         // (0,10) Average2(Average2(L, TL),", "first_line_groundtruth": "raster.getDataElements(0, 0, rgba);", "first_line_prediction": " // (0,1) L predict", "match": 0}
{"groundtruth": "raster.setDataElements(0, 0, rgba);", "prediction": " raster.setDataElements(0, 0, rgba);\n\n        // (0,1) L predict\n        raster.getDataElements(0, 1, rgba);\n        rgba[3] += 0xff;\n         raster.setDataElements(0, 1, rgba);\n\n        // (0,2) T predict\n        raster.getDataElements(0, 2, rgba);\n        rgba[3] += 0xff;\n         raster.setDataElements(0, 2, rgba);\n\n        // (0,3) TR predict\n        raster.getDataElements(0, 3, rgba);\n        rgba[3", "first_line_groundtruth": "raster.setDataElements(0, 0, rgba);", "first_line_prediction": " raster.setDataElements(0, 0, rgba);", "match": 0}
{"groundtruth": "ReplayManager.getInstance().spawnPlayerClone(this);", "prediction": " this.setGamemode(GameMode.SPECTATOR);\n        } else {\n            this.setGamemode(GameMode.SURVIVAL);\n        }\n    }\n\n    public void setViewDistance(int viewDistance) {\n        this.viewDistance = viewDistance;\n    }\n\n    public void setLastSetEntityDataPacket(SetEntityDataPacket setEntityDataPacket) {\n        this.lastSetEntityDataPacket = setEntityDataPacket;\n    }\n\n    public void setLastGamemode(int lastGamemode) {\n        this.lastGamemode = lastGamemode;\n    }\n\n    public void setEntityRuntimeId", "first_line_groundtruth": "ReplayManager.getInstance().spawnPlayerClone(this);", "first_line_prediction": " this.setGamemode(GameMode.SPECTATOR);", "match": 0}
{"groundtruth": "OutputWindow.print(\"Proxy server Listening on \" + bindAddress);", "prediction": "\n\n        String username = config.getString(\"username\");\n        String password = config.getString(\"password\");\n        String token = config.getString(\"token\");\n\n        AccountManager accountManager = new AccountManager(username, password, token);\n        accountManager.login();\n\n        Live live = new Live(accountManager);\n        live.start();\n\n        ReplayViewerServer replayViewerServer = new ReplayViewerServer(accountManager);\n        replayViewerServer.start();\n\n        OutputWindow.print(\"BedrockReplay started!\");\n        OutputWindow.print(\"Press any key to exit...\");\n        System.in.read();\n\n        OutputWindow.print(\"", "first_line_groundtruth": "OutputWindow.print(\"Proxy server Listening on \" + bindAddress);", "first_line_prediction": "", "match": 0}
{"groundtruth": "proxyServer.start();", "prediction": "\n\n        String username = config.getString(\"username\");\n        String password = config.getString(\"password\");\n        String token = config.getString(\"token\");\n\n        if (username != null && password != null) {\n            AccountManager.login(username, password);\n        } else if (token != null) {\n            AccountManager.login(token);\n        }\n\n        OutputWindow.print(\"Starting proxy server...\");\n        proxyServer.start();\n\n        OutputWindow.print(\"Starting replay viewer server...\");\n        ReplayViewerServer replayViewerServer = new ReplayViewerServer(proxyServer.getBindAddress());\n        replayViewerServer.start();", "first_line_groundtruth": "proxyServer.start();", "first_line_prediction": "", "match": 0}
{"groundtruth": "OutputWindow.print(\"Successfully loaded your account!\");", "prediction": " AccountManager.loadAccount(accountFile);\n            } catch (Exception e) {\n                OutputWindow.print(\"Failed to load account file\");\n                e.printStackTrace();\n            }\n        } else {\n            OutputWindow.print(\"No account file found, creating new one\");\n            AccountManager.createAccount();\n        }\n    }", "first_line_groundtruth": "OutputWindow.print(\"Successfully loaded your account!\");", "first_line_prediction": " AccountManager.loadAccount(accountFile);", "match": 0}
{"groundtruth": "OutputWindow.print(\"Done (took \" + (System.currentTimeMillis() / 1000L - startTime) + \"s)!\");", "prediction": "\n\n        String username = config.getString(\"username\");\n        String password = config.getString(\"password\");\n        AccountManager accountManager = new AccountManager(username, password);\n        accountManager.login();\n        Live.login(accountManager.getAccessToken());\n\n        OutputWindow.print(\"BedrockReplay started!\");\n        OutputWindow.print(\"Press any key to exit...\");\n        System.in.read();\n        OutputWindow.print(\"Exiting...\");\n        proxyServer.stop();\n        replayViewerServer.stop();\n        OutputWindow.print(\"BedrockReplay stopped!\");\n        long endTime = (System.currentTimeMillis() / 100", "first_line_groundtruth": "OutputWindow.print(\"Done (took \" + (System.currentTimeMillis() / 1000L - startTime) + \"s)!\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "raster.getSample(xC, y, 1);", "prediction": "0;\n                for (int i = 0; i < componentSize; i++) {\n                    sample |= (raster.get(xC, y).get(componentOffset + i) & 0xFF) << (i * 8);\n                }\n\n                rgba[0] = colorTable[sample];\n                rgba[1] = colorTable[sample];\n                rgba[2] = colorTable[sample];\n                rgba[3] = 255;\n\n                raster.set(xC, y, rgba);\n            }\n        }\n    }", "first_line_groundtruth": "raster.getSample(xC, y, 1);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "callback.onComplete(accessToken, refreshToken);", "prediction": " callback.onSuccess(accessToken, refreshToken);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }, 0, deviceAuth.getIntValue(\"interval\"));\n    }\n\n    @SneakyThrows\n    private JSONObject startDeviceAuth() {\n        HttpClient httpClient = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(LIVE_CONNECT_URL))\n                .header(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                .POST(HttpRequest.BodyPublishers.ofString(\"client_id=\" + System.getenv", "first_line_groundtruth": "callback.onComplete(accessToken, refreshToken);", "first_line_prediction": " callback.onSuccess(accessToken, refreshToken);", "match": 0}
{"groundtruth": "raster.getDataElements(x, 0, rgba);", "prediction": " raster.getDataElements(x, 0, predictor);\n             predictor[3] += 0xff;\n             raster.setDataElements(x, 0, predictor);\n        }\n\n        // 0,y L predict\n        for (int y = 1; y < height; y++) {\n            raster.getDataElements(0, y, predictor);\n            predictor[3] += 0xff;\n            raster.setDataElements(0, y, predictor);\n        }\n\n        // (0,y) T predict\n        for (int y = 1; y < height; y++) {\n            raster.getDataElements(", "first_line_groundtruth": "raster.getDataElements(x, 0, rgba);", "first_line_prediction": " raster.getDataElements(x, 0, predictor);", "match": 0}
{"groundtruth": "raster.getDataElements(x - 1, 0, predictor);", "prediction": " rgba[3] += 0xff;\n            raster.setDataElements(x, 0, rgba);\n        }\n\n        // 0,y L predict\n        for (int y = 1; y < height; y++) {\n            raster.getDataElements(0, y, rgba);\n            rgba[3] += 0xff;\n            raster.setDataElements(0, y, rgba);\n        }\n\n        // (0,y) T predict\n        for (int y = 1; y < height; y++) {\n            raster.getDataElements(0, y, rgba);\n            rgba[3] += ", "first_line_groundtruth": "raster.getDataElements(x - 1, 0, predictor);", "first_line_prediction": " rgba[3] += 0xff;", "match": 0}
{"groundtruth": "FileManager.getFileContents(connection.getInputStream());", "prediction": " Utils.readInputStream(connection.getInputStream());\n        JSONObject response = JSONObject.parseObject(responce);\n        return response.getString(\"Token\");\n    }\n\n    private void addSignatureHeader(HttpsURLConnection connection, JSONObject jsonObject, ECPrivateKey privateKey) throws Exception {\n        String header = this.getSignatureHeader(jsonObject, privateKey);\n        connection.setRequestProperty(\"x-xbl-signature\", header);\n    }\n\n    private String getSignatureHeader(JSONObject jsonObject, ECPrivateKey privateKey) throws Exception {\n        String header = \"ES256\";\n        String headerBase64 = Base64.getEncoder().", "first_line_groundtruth": "FileManager.getFileContents(connection.getInputStream());", "first_line_prediction": " Utils.readInputStream(connection.getInputStream());", "match": 0}
{"groundtruth": "OutputWindow.print(\"Failed to load your account, please authenticate with your Microsoft account again.\");", "prediction": " OutputWindow.print(\"Failed to load your account!\");\n            }\n        } else {\n            OutputWindow.print(\"No account found, please create one!\");\n            AccountManager.createAccount();\n        }\n    }", "first_line_groundtruth": "OutputWindow.print(\"Failed to load your account, please authenticate with your Microsoft account again.\");", "first_line_prediction": " OutputWindow.print(\"Failed to load your account!\");", "match": 0}
{"groundtruth": "Utils.toByteArray(currentTime));", "prediction": "postData.toJSONString().getBytes(StandardCharsets.UTF_8));\n        bytesToSign.write(new byte[]{0, 0, 0, 0});\n\n        byte[] signature = this.sign(bytesToSign.toByteArray(), privateKey);\n\n        httpsURLConnection.setRequestProperty(\"x-xbl-signature\", Base64.getUrlEncoder().withoutPadding().encodeToString(signature));\n        httpsURLConnection.setRequestProperty(\"x-xbl-contract-version\", \"1\");\n        httpsURLConnection.setRequestProperty(\"x-xbl-contract-version\", \"1\");\n        httpsURLConnection.setRequestProperty(\"x-", "first_line_groundtruth": "Utils.toByteArray(currentTime));", "first_line_prediction": "postData.toJSONString().getBytes(StandardCharsets.UTF_8));", "match": 0}
{"groundtruth": "OutputWindow.print(\"First time running BedrockReplay, please authenticate with your Microsoft account first.\");", "prediction": " startAuth();\n        }\n    }\n\n    private static void startAuth() {\n        OutputWindow.print(\"Please authenticate with your Microsoft account.\");\n        AccountManager.startAuth();\n    }", "first_line_groundtruth": "OutputWindow.print(\"First time running BedrockReplay, please authenticate with your Microsoft account first.\");", "first_line_prediction": " startAuth();", "match": 0}
{"groundtruth": "return FileManager.getFileContents(connection.getInputStream());", "prediction": " String response = FileManager.getFileContents(connection.getInputStream());\n         JSONObject responseJsonObject = JSONObject.parseObject(response);", "first_line_groundtruth": "return FileManager.getFileContents(connection.getInputStream());", "first_line_prediction": " String response = FileManager.getFileContents(connection.getInputStream());", "match": 0}
{"groundtruth": "callback.onFailure(\"Failed to save replay: \" + e.getMessage());", "prediction": " callback.onError(e);\n             }\n        });\n    }\n\n    @SneakyThrows\n    public void loadFromFile(String path, Callback callback) {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        executor.execute(() -> {\n            try {\n                try (FileInputStream fis = new FileInputStream(path + \".replay\");\n                     DataInputStream dis = new DataInputStream(new XZInputStream(fis))) {\n\n                    this.recorderEntityRuntimeId = dis.readLong();\n                    int packetBuffersByTickSize = dis.readInt();\n                    byte[] packetBuffersByTick = new byte[packetBuffersByTickSize];\n                   ", "first_line_groundtruth": "callback.onFailure(\"Failed to save replay: \" + e.getMessage());", "first_line_prediction": " callback.onError(e);", "match": 0}
{"groundtruth": "int transformType = data.getSample(x >> bits, y >> bits, 1);", "prediction": " raster.getDataElements(x, y, rgba);\n                 raster.getDataElements(x - 1, y, predictor);\n                 raster.getDataElements(x, y - 1, predictor2);\n                 raster.getDataElements(x - 1, y - 1, predictor3);\n                 addPixels(rgba, predictor);\n                 addPixels(rgba, predictor2);\n                 addPixels(rgba, predictor3);\n                 raster.setDataElements(x, y, rgba);\n            }\n        }\n\n        // Handle right and bottom border separately\n\n        // (x,y) TR predict\n        for (int x = width -", "first_line_groundtruth": "int transformType = data.getSample(x >> bits, y >> bits, 1);", "first_line_prediction": " raster.getDataElements(x, y, rgba);", "match": 0}
{"groundtruth": "= xbox.getDeviceToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate());", "prediction": " = xbox.getDeviceToken();\n        String xuid = xbox.getXuid();\n        String accessToken = xbox.getAccessToken();\n        String refreshToken = xbox.getRefreshToken();\n\n        loginPacket.setUsername(xuid);\n        loginPacket.setDeviceId(deviceToken);\n        loginPacket.setAccessToken(accessToken);\n        loginPacket.setRefreshToken(refreshToken);\n        loginPacket.setPublicKey(Base64.getEncoder().encodeToString(this.keyPair.getPublic().getEncoded()));\n        loginPacket.setPrivateKey(Base64.getEncoder().encodeToString(this.keyPair.", "first_line_groundtruth": "= xbox.getDeviceToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate());", "first_line_prediction": " = xbox.getDeviceToken();", "match": 0}
{"groundtruth": "xbox.requestMinecraftChain(xsts, (ECPublicKey) this.keyPair.getPublic());", "prediction": " JwtUtils.createChainData(this.keyPair.getPublic(), this.keyPair.getPrivate());\n        String jwt = JwtUtils.createJwt(chainData, xsts);\n\n        loginPacket.setUsername(xbox.getUsername());\n        loginPacket.setChainData(chainData);\n        loginPacket.setJwt(jwt);\n        loginPacket.setXuid(xbox.getXuid());\n        loginPacket.setDeviceId(deviceToken);\n        loginPacket.setClientToken(xbox.getClientToken());\n        loginPacket.setClientTokenExpires(Instant.now().plusSeconds(100", "first_line_groundtruth": "xbox.requestMinecraftChain(xsts, (ECPublicKey) this.keyPair.getPublic());", "first_line_prediction": " JwtUtils.createChainData(this.keyPair.getPublic(), this.keyPair.getPrivate());", "match": 0}
{"groundtruth": "CODEC_HELPER.setBlockDefinitions(FakeDefinitionRegistry.createBlockRegistry());", "prediction": "\n\n        NBTStreamSerializer serializer = new NBTStreamSerializer();\n        BedrockServerSession session = new BedrockServerSession(BEDROCK_CODEC, new FakeDefinitionRegistry(itemRegistry.build()), serializer);\n        session.setCodecHelper(CODEC_HELPER);\n\n        NioEventLoopGroup bossGroup = new NioEventLoopGroup();\n        NioEventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioDatagramChannel.class)\n                    .childHandler(new BedrockServerInitializer", "first_line_groundtruth": "CODEC_HELPER.setBlockDefinitions(FakeDefinitionRegistry.createBlockRegistry());", "first_line_prediction": "", "match": 0}
{"groundtruth": "xbox.getXBLToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate(), deviceToken);", "prediction": " xbox.getXsts(deviceToken);\n        String jwt = JwtUtils.generateJwt(xsts);\n\n        loginPacket.setUsername(this.playerInfo.getUsername());\n        loginPacket.setXuid(this.playerInfo.getXuid());\n        loginPacket.setDeviceId(deviceToken);\n        loginPacket.setJwt(jwt);\n        loginPacket.setPublicKey(Base64.getEncoder().encodeToString(this.keyPair.getPublic().getEncoded()));\n        loginPacket.setPrivateKey(Base64.getEncoder().encodeToString(this.keyPair.getPrivate().getEncoded()));\n\n       ", "first_line_groundtruth": "xbox.getXBLToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate(), deviceToken);", "first_line_prediction": " xbox.getXsts(deviceToken);", "match": 0}
{"groundtruth": "raster.getDataElements(trX, trY, predictor2);", "prediction": " raster.getDataElements(trX, trY, predictor2);\n                         raster.getDataElements(x, tY, predictor3);\n                         addPixels(rgba, predictor);\n                         addPixels(rgba, predictor2);\n                         addPixels(rgba, predictor3);\n                         break;\n                    case PREDICTOR_AVG_L_TL:\n                        raster.getDataElements(lX, y, predictor);\n                         raster.getDataElements(lX, tY, predictor2);\n                         addPixels(rgba, predictor);\n                         addPixels(rgba, predictor2);\n                         break;\n                    case PREDICTOR_AVG_L_T", "first_line_groundtruth": "raster.getDataElements(trX, trY, predictor2);", "first_line_prediction": " raster.getDataElements(trX, trY, predictor2);", "match": 0}
{"groundtruth": "raster.getDataElements(trX, trY, predictor3);", "prediction": " average2(predictor, predictor2);\n                        raster.getDataElements(trX, trY, predictor3);\n                        average2(predictor2, predictor3);\n\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_SELECT:\n                        raster.getDataElements(lX, y, predictor);\n                        raster.getDataElements(x, tY, predictor2);\n                        raster.getDataElements(lX, tY, predictor3);\n                        select(predictor, predictor2, predictor3);\n\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_CLAMP_ADD_SUB_", "first_line_groundtruth": "raster.getDataElements(trX, trY, predictor3);", "first_line_prediction": " average2(predictor, predictor2);", "match": 0}
{"groundtruth": "raster.getDataElements(lX, y, predictor);", "prediction": " raster.getDataElements(lX, tY, predictor);\n                         addPixels(rgba, predictor);\n                         break;\n                    case PREDICTOR_T:\n                         raster.getDataElements(lX, tY, predictor);\n                         addPixels(rgba, predictor);\n                         break;\n                    case PREDICTOR_TR:\n                         raster.getDataElements(trX, trY, predictor);\n                         addPixels(rgba, predictor);\n                         break;\n                    case PREDICTOR_TL:\n                         raster.getDataElements(lX, tY, predictor);\n                         addPixels(predictor, rgba);\n                         break;\n                    case PREDICTOR", "first_line_groundtruth": "raster.getDataElements(lX, y, predictor);", "first_line_prediction": " raster.getDataElements(lX, tY, predictor);", "match": 0}
{"groundtruth": "raster.getDataElements(x, tY, predictor2);", "prediction": " addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_AVG_L_TL:\n                        raster.getDataElements(lX, y, predictor);\n                        raster.getDataElements(lX, tY, predictor2);\n                        average2(predictor, predictor2);\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_AVG_L_T:\n                        raster.getDataElements(lX, y, predictor);\n                        raster.getDataElements(x, tY, predictor2);\n                        average2(predictor, predictor2);\n                        addPixels(rgba, predictor);\n                        break", "first_line_groundtruth": "raster.getDataElements(x, tY, predictor2);", "first_line_prediction": " addPixels(rgba, predictor);", "match": 0}
{"groundtruth": "raster.getDataElements(lX, tY, predictor3);", "prediction": " raster.getDataElements(lX, tY, predictor3);\n                        select(predictor, predictor2, predictor3);\n\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_CLAMP_ADD_SUB_FULL:\n                        raster.getDataElements(lX, y, predictor);\n                        raster.getDataElements(x, tY, predictor2);\n                        raster.getDataElements(lX, tY, predictor3);\n                        clampAddSubtractFull(predictor, predictor2, predictor3);\n\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_CLAMP_ADD_SUB", "first_line_groundtruth": "raster.getDataElements(lX, tY, predictor3);", "first_line_prediction": " raster.getDataElements(lX, tY, predictor3);", "match": 0}
{"groundtruth": "lsbBitInputStream.readBits(14);", "prediction": "16 * lsbBitInputStream.readBits(16);\n        int height = 1 + (int) 16 * lsbBitInputStream.readBits(16);\n\n        int stride = width * 4;\n        int[] pixels = new int[stride * height];\n\n        VP8LDecoder decoder = new VP8LDecoder(lsbBitInputStream);\n        decoder.decode(pixels, width, height);\n\n        return new RGBABuffer(width, height, pixels);\n    }\n\n    private void decode(int[] pixels, int width, int height) throws IOException {\n        int num_layers =", "first_line_groundtruth": "lsbBitInputStream.readBits(14);", "first_line_prediction": "16 * lsbBitInputStream.readBits(16);", "match": 0}
{"groundtruth": "colorCacheBits = (int) lsbBitReader.readBits(4);", "prediction": " colorCacheBits = (int) lsbBitReader.readBits(3);\n        }\n\n        // Read color cache\n        int colorCacheSize = 1 << colorCacheBits;\n        int[] colorCache = new int[colorCacheSize];\n        for (int i = 0; i < colorCacheSize; i++) {\n            colorCache[i] = (int) lsbBitReader.readBits(8);\n        }\n\n        // Read color cache update\n        int colorCacheUpdate = (int) lsbBitReader.readBits(8);\n\n        // Read color cache update\n        int colorCacheUpdate2 =", "first_line_groundtruth": "colorCacheBits = (int) lsbBitReader.readBits(4);", "first_line_prediction": " colorCacheBits = (int) lsbBitReader.readBits(3);", "match": 0}
{"groundtruth": "lsbBitInputStream.readBit();", "prediction": "\n\n        VP8LDecoder decoder = new VP8LDecoder(lsbBitInputStream);\n        return decoder.decode(width, height);\n    }\n\n    private RGBABuffer decode(int width, int height) throws IOException {\n        RGBABuffer rgbaBuffer = new RGBABuffer(width, height);\n        ColorCache colorCache = new ColorCache(width, height);\n\n        int numHuffmanCodeGroups = lsbBitReader.readBits(5);\n        List<HuffmanCodeGroup> huffmanCodeGroups = new ArrayList<>(numHuffmanCodeGroups);\n        for (int i = 0; i", "first_line_groundtruth": "lsbBitInputStream.readBit();", "first_line_prediction": "", "match": 0}
{"groundtruth": "(int) lsbBitInputStream.readBits(3) != 0) {", "prediction": "lsbBitInputStream.readBit() != 0) {\n            throw new IOException(\"Invalid VP8L_VERSION\");\n        }\n\n        int version = (int) lsbBitInputStream.readBits(3);\n        if (version != 0) {\n            throw new IOException(\"Invalid VP8L_VERSION\");\n        }\n\n        int colorSpace = (int) lsbBitInputStream.readBits(2);\n        if (colorSpace != 0) {\n            throw new IOException(\"Invalid VP8L_COLORSPACE\");\n        }\n\n        int colorRange = (int) lsbBitInputStream.readBits(", "first_line_groundtruth": "(int) lsbBitInputStream.readBits(3) != 0) {", "first_line_prediction": "lsbBitInputStream.readBit() != 0) {", "match": 0}
{"groundtruth": "+ (int) lsbBitReader.readBits(extraBits) + 1;", "prediction": " + lsbBitReader.readBits(extraBits);\n        }\n    }", "first_line_groundtruth": "+ (int) lsbBitReader.readBits(extraBits) + 1;", "first_line_prediction": " + lsbBitReader.readBits(extraBits);", "match": 0}
{"groundtruth": "int transformType = (int) lsbBitReader.readBits(2);", "prediction": " // Read transform\n        int transformCode = lsbBitReader.readBits(3);\n\n        if (transformCode == 0) {\n            return 0;\n        }\n\n        int transformType = transformCode - 1;\n        int transformX = lsbBitReader.readBits(xSize);\n        int transformY = lsbBitReader.readBits(ySize);\n\n        transforms.add(new Transform(transformType, transformX, transformY));\n\n        return transformCode;\n    }\n\n    private void readHuffmanInfo(HuffmanInfo huffmanInfo) throws IOException {\n        // Read Huff", "first_line_groundtruth": "int transformType = (int) lsbBitReader.readBits(2);", "first_line_prediction": " // Read transform", "match": 0}
{"groundtruth": "decodeRaster = RGBABuffer.createRelativeImage(raster, 0, 0, xSize, height);", "prediction": " // and height is different from raster height\n             decodeRaster = RGBABuffer.createAbsoluteImage(xSize, height);\n        } else {\n            decodeRaster = raster;\n        }\n\n        // Read pixels\n        int y = 0;\n        while (y < height) {\n            int x = 0;\n            while (x < width) {\n                int index = readIndex(lsbBitReader, huffmanInfo, colorCache);\n                if (index == -1) {\n                    x++;\n                    continue;\n                }\n\n                int color = colorCache.getColor(index);\n                decodeRaster.setPixel(x, y,", "first_line_groundtruth": "decodeRaster = RGBABuffer.createRelativeImage(raster, 0, 0, xSize, height);", "first_line_prediction": " // and height is different from raster height", "match": 0}
{"groundtruth": "&& lsbBitReader.readBit() == 1) {", "prediction": " && colorCacheBits > 0) {\n            huffmanMetaCodes = RGBABuffer.createAbsoluteImage(xSize, ySize);\n        }\n\n        while (true) {\n            HuffmanCodeGroup curHuffmanGroup = huffmanCodeGroups[huffmanGroupNum];\n\n            if (curHuffmanGroup.xSize == xSize && curHuffmanGroup.ySize == ySize) {\n                break;\n            }\n\n            huffmanGroupNum++;\n        }\n\n        huffmanXSize = curHuffmanGroup.xSize;\n        huffmanYSize = curH", "first_line_groundtruth": "&& lsbBitReader.readBit() == 1) {", "first_line_prediction": " && colorCacheBits > 0) {", "match": 0}
{"groundtruth": "RGBABuffer outputBuffer = RGBABuffer.createAbsoluteImage(width, height);", "prediction": " int colorSpace = (int) lsbBitInputStream.readBits(2);\n        if (colorSpace != 0) {\n            throw new IOException(\"Invalid ColorSpace.\");\n        }\n\n        int colorRange = (int) lsbBitInputStream.readBits(2);\n        if (colorRange != 0) {\n            throw new IOException(\"Invalid ColorRange.\");\n        }\n\n        int alphaMode = (int) lsbBitInputStream.readBits(2);\n        if (alphaMode != 0) {\n            throw new IOException(\"Invalid AlphaMode.\");\n        }\n\n        int frameType = (int) lsbBitInputStream", "first_line_groundtruth": "RGBABuffer outputBuffer = RGBABuffer.createAbsoluteImage(width, height);", "first_line_prediction": " int colorSpace = (int) lsbBitInputStream.readBits(2);", "match": 0}
{"groundtruth": "byte) (lsbBitReader.readBits(3) + 2);", "prediction": "byte) lsbBitReader.readBits(2);\n                int size = 1 << sizeBits;\n\n                int xOff = (int) lsbBitReader.readBits(sizeBits);\n                int yOff = (int) lsbBitReader.readBits(sizeBits);\n\n                transforms.add(new Transform(transformType, xSize, ySize, xOff, yOff));\n\n                return size;\n            }\n            case SUBSAMPLE_TRANSFORM: {\n                byte xOffBits = (byte) lsbBitReader.readBits(2);\n                byte yOffBits = (byte) lsbBit", "first_line_groundtruth": "byte) (lsbBitReader.readBits(3) + 2);", "first_line_prediction": "byte) lsbBitReader.readBits(2);", "match": 0}
{"groundtruth": "colorTableSize = ((int) lsbBitReader.readBits(8)) + 1;", "prediction": " colorTableSize = (int) lsbBitReader.readBits(8);\n\n                // 8 bit value for color table\n                byte[] colorTable = new byte[colorTableSize];\n                for (int i = 0; i < colorTableSize; i++) {\n                    colorTable[i] = (byte) lsbBitReader.readBits(8);\n                }\n\n                // 8 bit value for color index\n                int colorIndex = (int) lsbBitReader.readBits(8);\n\n                // 8 bit value for alpha\n                int alpha = (int) lsbBitReader.readBits", "first_line_groundtruth": "colorTableSize = ((int) lsbBitReader.readBits(8)) + 1;", "first_line_prediction": " colorTableSize = (int) lsbBitReader.readBits(8);", "match": 0}
{"groundtruth": "(int) lsbBitReader.readBits(3) + 2;", "prediction": "8;\n            huffmanMetaCodes = RGBABuffer.createAbsoluteImage(xSize, ySize);\n            readVP8Lossless(huffmanMetaCodes, false, xSize, ySize);\n        }\n\n        if (lsbBitReader.readBit() == 1) {\n            // read in huffman codes\n            huffmanGroupNum = 2;\n            huffmanXSize = xSize / 2;\n            huffmanYSize = ySize / 2;\n        } else {\n            huffmanXSize = xSize;\n            huffmanYSize = ySize;", "first_line_groundtruth": "(int) lsbBitReader.readBits(3) + 2;", "first_line_prediction": "8;", "match": 0}
{"groundtruth": "configVariables.setClientID(System.getenv(\"BOT_CLIENT_ID\"));", "prediction": "\n            \n        } else {\n            System.out.println(\"Using properties\");\n            try (var inputStream = new FileInputStream(BOT_CONFIG_PROPERTIES)) {\n                var properties = new Properties();\n                properties.load(inputStream);\n                configVariables.setUser(properties.getProperty(\"user\"));\n                configVariables.setToken(properties.getProperty(\"token\"));\n                configVariables.setClientID(properties.getProperty(\"clientID\"));\n                configVariables.getChattersToIgnore().addAll(Arrays.asList(properties.getProperty(\"chattersToIgnore\").split(\",\")));\n                configVariables.getChannelsToJoin().addAll(Arrays.asList(properties", "first_line_groundtruth": "configVariables.setClientID(System.getenv(\"BOT_CLIENT_ID\"));", "first_line_prediction": "", "match": 0}
{"groundtruth": "configVariables.setUser(System.getenv(\"BOT_USER\"));", "prediction": " configVariables.setClientID(System.getenv(\"CLIENT_ID\"));\n             configVariables.setToken(System.getenv(\"BOT_TOKEN\"));\n             configVariables.setUser(System.getenv(\"BOT_USER\"));\n        } else {\n            System.out.println(\"Using properties\");\n            try (var inputStream = new FileInputStream(BOT_CONFIG_PROPERTIES)) {\n                var properties = new Properties();\n                properties.load(inputStream);\n                configVariables.setClientID(properties.getProperty(\"clientID\"));\n                configVariables.setToken(properties.getProperty(\"token\"));\n                configVariables.setUser(properties.getProperty(\"user\"));", "first_line_groundtruth": "configVariables.setUser(System.getenv(\"BOT_USER\"));", "first_line_prediction": " configVariables.setClientID(System.getenv(\"CLIENT_ID\"));", "match": 0}
{"groundtruth": "RGBABuffer.createAbsoluteImage(blockWidth, blockHeight);", "prediction": " Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE, blockWidth, blockHeight, 4 * blockWidth, 4, new int[]{0, 1, 2, 3}, null);\n\n                int[] data = new int[4 * blockWidth * blockHeight];\n                raster.getDataElements(0, 0, data);\n\n                for (int i = 0; i < data.length; i++) {\n                    data[i] = lsbBitReader.readBits(8);\n                }\n\n                transforms.add(new Transform(transformType, blockWidth, blockHeight,", "first_line_groundtruth": "RGBABuffer.createAbsoluteImage(blockWidth, blockHeight);", "first_line_prediction": " Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE, blockWidth, blockHeight, 4 * blockWidth, 4, new int[]{0, 1, 2, 3}, null);", "match": 0}
{"groundtruth": "RGBABuffer colorTableRGBABuffer = RGBABuffer.createAbsoluteImage(colorTableSize, 1);", "prediction": " // The color table is stored in the following order:\n                 // 0x00000000, 0x00000000, 0x00000000, ...\n                 // 0x00000000, 0x00000000, 0x00000000, ...\n                 // ...\n                 // 0x00000000, 0x00000000, 0x0000000", "first_line_groundtruth": "RGBABuffer colorTableRGBABuffer = RGBABuffer.createAbsoluteImage(colorTableSize, 1);", "first_line_prediction": " // The color table is stored in the following order:", "match": 0}
{"groundtruth": "raster.getDataElements(x1, ySrc, rgba);", "prediction": " if (x1 < 0) {\n                ySrc--;\n                x1 += width;\n             } else if (x1 >= width) {\n                x1 -= width;\n                ySrc++;\n             }\n\n            int y1 = ySrc++;\n\n            if (y1 < 0) {\n                y1 += height;\n            } else if (y1 >= height) {\n                y1 -= height;\n            }\n\n            if (y1 < 0 || y1 >= height || x1 < 0 || x1 >= width) {\n                throw new IOException(\"Corrupt WebP stream, decodeBwRef: ySrc", "first_line_groundtruth": "raster.getDataElements(x1, ySrc, rgba);", "first_line_prediction": " if (x1 < 0) {", "match": 0}
{"groundtruth": "topLevel && lsbBitReader.readBit() == 1) {", "prediction": "true) {\n            int transformType = lsbBitReader.readBits(3);\n            if (transformType == 0) {\n                break;\n            }\n            Transform transform = TransformFactory.createTransform(transformType);\n            transform.read(lsbBitReader);\n            transforms.add(transform);\n        }\n\n        // Read Huffman codes\n        HuffmanInfo huffmanInfo = new HuffmanInfo();\n        huffmanInfo.read(lsbBitReader);\n        HuffmanCodeGroup[] codeGroups = huffmanInfo.getCodeGroups();\n\n        // Read color mapping\n        int colorMappingSize =", "first_line_groundtruth": "topLevel && lsbBitReader.readBit() == 1) {", "first_line_prediction": "true) {", "match": 0}
{"groundtruth": "colorTableRGBABuffer.getDataElements(x, 0, colorTableRGBACopyBuffer);", "prediction": " // Copy the color table to a copy buffer\n                    colorTableRGBABuffer.getDataElements(x, 0, colorTableRGBACopyBuffer);\n                    colorTable[x * 4] = colorTableRGBACopyBuffer[0];\n                    colorTable[x * 4 + 1] = colorTableRGBACopyBuffer[1];\n                    colorTable[x * 4 + 2] = colorTableRGBACopyBuffer[2];\n                    colorTable[x * 4 + 3] = colorTableRGBACopyBuffer[3];\n                }\n\n                // The color table is always subtraction-coded", "first_line_groundtruth": "colorTableRGBABuffer.getDataElements(x, 0, colorTableRGBACopyBuffer);", "first_line_prediction": " // Copy the color table to a copy buffer", "match": 0}
{"groundtruth": "int argb = colorCache.lookup(code - 256 - 24);", "prediction": " // TODO: Implement color cache\n    }\n\n    private void decodeLiteral(RGBABuffer raster, ColorCache colorCache, HuffmanCodeGroup curCodeGroup, byte[] rgba, int y, int x, short code) {\n        int color = curCodeGroup.colorTable[code - 256];\n        rgba[0] = (byte) (color >> 16);\n        rgba[1] = (byte) (color >> 8);\n        rgba[2] = (byte) (color);\n        rgba[3] = (byte) 0xff;\n\n        raster.setPixel(x,", "first_line_groundtruth": "int argb = colorCache.lookup(code - 256 - 24);", "first_line_prediction": " // TODO: Implement color cache", "match": 0}
{"groundtruth": "userID = twitchAPI.getUserID(user).orElse(\"\");", "prediction": "userIDMap = new HashMap<>();\n        this.isJoined = false;\n        this.userID = \"\";\n    }\n\n    public void setMessageService(MessageServiceInterface messageService) {\n        this.messageService = messageService;\n    }\n\n    public void start() {\n        executor = Executors.newSingleThreadExecutor();\n        executor.submit(() -> {\n            try {\n                session = ContainerProvider.getWebSocketContainer().connectToServer(this, new URI(host, port, \"/\"));\n                session.addMessageHandler(this::onMessage);\n                session.addMessageHandler(this::onOpen);\n                session.addMessageHandler(this::", "first_line_groundtruth": "userID = twitchAPI.getUserID(user).orElse(\"\");", "first_line_prediction": "userIDMap = new HashMap<>();", "match": 0}
{"groundtruth": "= botsAPI.getOnlineBots();", "prediction": " = botsAPI.getBotList(broadcasterID);\n                if (isInvalid(botList))\n                    return;\n\n                var botListString = new StringJoiner(\", \");\n                botList.forEach(bot -> botListString.add(bot.getName()));\n\n                sendMessage(MessageFormat.format(\"Bots: {0}\", botListString.toString()));\n            }\n        });\n    }\n\n    private void processUserJoin(String message) {\n        var parsedMessage = messageService.getMessageFromLine(message);\n        if (isInvalid(parsedMessage))\n            return;\n\n        var channel = parsedMessage.get().getChannel();", "first_line_groundtruth": "= botsAPI.getOnlineBots();", "first_line_prediction": " = botsAPI.getBotList(broadcasterID);", "match": 0}
{"groundtruth": "twitchAPI.getUserID(userName.trim());", "prediction": " twitchAPI.getUserID(userName.trim());\n\t\t\t\tif (isInvalid(userToBanID))\n\t\t\t\t\tcontinue;", "first_line_groundtruth": "twitchAPI.getUserID(userName.trim());", "first_line_prediction": " twitchAPI.getUserID(userName.trim());", "match": 0}
{"groundtruth": "broadcasterID = twitchAPI.getUserID(channel.trim());", "prediction": "ircChannel = twitchAPI.getIrcChannel(channel).orElse(\"\");\n            if (!ircChannel.isEmpty()) {\n                broadcasterIDMap.put(channel, ircChannel);\n            }\n        });\n        System.out.println(\"Getting user ID\");\n        userIDMap.put(user, userID);\n        System.out.println(\"Getting user ID\");\n        executor = Executors.newSingleThreadExecutor();\n    }\n\n    @OnOpen\n    public void onOpen(Session session) {\n        this.session = session;\n        executor.submit(() -> {\n            try {\n                session.getBasicRemote().sendText", "first_line_groundtruth": "broadcasterID = twitchAPI.getUserID(channel.trim());", "first_line_prediction": "ircChannel = twitchAPI.getIrcChannel(channel).orElse(\"\");", "match": 0}
{"groundtruth": "Generator().generate(schemaVersion, scanPackages, outputDir, skipValidation);", "prediction": " Generator(project, schemaVersion, outputDir, scanPackages, skipValidation).generate();\n  }\n\n  private void setClasspath() throws MojoExecutionException {\n    try {\n      PluginDescriptor pluginDescriptor = (PluginDescriptor) this.getClass().getClassLoader().loadClass(\n          \"org.apache.maven.plugin.descriptor.PluginDescriptor\").newInstance();\n      ClassRealm classRealm = pluginDescriptor.getClassRealm();\n      classRealm.addURL(new URL(SCHEMA_BASE_URL));\n    } catch (Exception e) {\n      throw new MojoExecutionException(\"Failed to set classpath\", e);\n    }\n  }", "first_line_groundtruth": "Generator().generate(schemaVersion, scanPackages, outputDir, skipValidation);", "first_line_prediction": " Generator(project, schemaVersion, outputDir, scanPackages, skipValidation).generate();", "match": 0}
{"groundtruth": "template.setTemplateName(templateName);", "prediction": " template.setName(templateName);\n    }\n\n    String templateId = String.valueOf(methodParameters.get(TEMPLATE_ID));\n    if (!templateId.isBlank()) {\n      template.setId(templateId);\n    }\n\n    String description = String.valueOf(methodParameters.get(DESCRIPTION));\n    if (!description.isBlank()) {\n      template.setDescription(description);\n    }\n\n    String functionName = String.valueOf(methodParameters.get(FUNCTION_NAME_PROPERTY));\n    if (!functionName.isBlank()) {\n      template.setFunctionName(functionName);\n    }\n\n    String scriptFormat = String.valueOf(method", "first_line_groundtruth": "template.setTemplateName(templateName);", "first_line_prediction": " template.setName(templateName);", "match": 0}
{"groundtruth": "template.setAppliesTo((String[]) methodParameters.get(APPLIES_TO));", "prediction": " // TODO: Add support for multiple appliesTo values\n    String appliesTo = String.valueOf(methodParameters.get(APPLIES_TO));\n    if (!appliesTo.isBlank()) {\n      template.setAppliesTo(appliesTo);\n    }\n\n    String functionName = String.valueOf(methodParameters.get(FUNCTION_NAME_PROPERTY));\n    if (!functionName.isBlank()) {\n      template.setFunctionName(functionName);\n    }\n\n    String description = String.valueOf(methodParameters.get(DESCRIPTION));\n    if (!description.isBlank()) {\n      template.setDescription(description);\n    }\n\n    String script", "first_line_groundtruth": "template.setAppliesTo((String[]) methodParameters.get(APPLIES_TO));", "first_line_prediction": " // TODO: Add support for multiple appliesTo values", "match": 0}
{"groundtruth": "template.setEntriesVisible(((Boolean) (methodParameters.get(ENTRIES_VISIBLE))).booleanValue());", "prediction": " template.setId(String.valueOf(methodParameters.get(TEMPLATE_ID)));\n     template.setEntriesVisible(\n         ((Boolean) (methodParameters.get(ENTRIES_VISIBLE))).booleanValue());\n     template.setAppliesTo(\n         String.valueOf(methodParameters.get(APPLIES_TO)));\n     template.setFunctionName(\n         String.valueOf(methodParameters.get(FUNCTION_NAME_PROPERTY)));\n     template.setDescription(\n         String.valueOf(methodParameters.get(DESCRIPTION)));\n     template.setIndex(\n         Integer.parseInt(String.valueOf(methodParameters.get(INDEX))));\n     template", "first_line_groundtruth": "template.setEntriesVisible(((Boolean) (methodParameters.get(ENTRIES_VISIBLE))).booleanValue());", "first_line_prediction": " template.setId(String.valueOf(methodParameters.get(TEMPLATE_ID)));", "match": 0}
{"groundtruth": "treeMapPane = TreeMapPane.forTreeContent();", "prediction": "mpt = new TreeMapPane<>();\n\t\tmpt.setRoot(children);\n\t\tmpt.setWeight(weight);\n\t\tnode = mpt.nodeProperty();", "first_line_groundtruth": "treeMapPane = TreeMapPane.forTreeContent();", "first_line_prediction": "mpt = new TreeMapPane<>();", "match": 0}
{"groundtruth": "(exemption != null && exemption.isExemptionActive()) {", "prediction": " (exemption != null && exemption.isExempted()) {\n            return;\n        }\n        long blockingTime = this.blockingTime.get();\n        if (blockingTime > 0) {\n            if (blockingTime >= threshold) {\n                reportEvent(blockingTime);\n            }\n        }\n    }", "first_line_groundtruth": "(exemption != null && exemption.isExemptionActive()) {", "first_line_prediction": " (exemption != null && exemption.isExempted()) {", "match": 0}
{"groundtruth": "final ThreadInfo threadInfo = ThreadInfo.fromThread(thread);", "prediction": " threadInfos[reported++] = threadAccessor.getThreadInfo(thread);\n            }\n            listener.onBlockedThread(new BlockedThreadEvent(blockedFor, threadInfos));\n        });\n    }", "first_line_groundtruth": "final ThreadInfo threadInfo = ThreadInfo.fromThread(thread);", "first_line_prediction": " threadInfos[reported++] = threadAccessor.getThreadInfo(thread);", "match": 0}
{"groundtruth": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));", "prediction": "(\"  executePrice=\" + executePrice);\n    \tSystem.out.println(\"  executeId=\" + executeId);\n    \tSystem.out.println(\"  executeMatchId=\" + executeMatchId);\n    \tSystem.out.println();\n    \tSystem.out.println(\"  executePrice=\" + DoubleUtils.format(executePrice));\n    \tSystem.out.println(\"  executeSize=\" + executeSize);\n    \tSystem.out.println();\n    \tSystem.out.println(\"  executePrice=\" + DoubleUtils.format(executePrice));\n    \tSystem.out.println(\"  executeSize", "first_line_groundtruth": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));", "first_line_prediction": "(\"  executePrice=\" + executePrice);", "match": 0}
{"groundtruth": "cancel(ts.nanoEpoch());", "prediction": "cancel(ts.nanoEpoch());\n\t\t\taskOrder.cancel(ts.nanoEpoch());\n\t\t\t\n\t\t\tbook.removeOrder(bidOrder);\n\t\t\tbook.removeOrder(askOrder);\n\t\t}", "first_line_groundtruth": "cancel(ts.nanoEpoch());", "first_line_prediction": "cancel(ts.nanoEpoch());", "match": 1}
{"groundtruth": "ts = book.getTimestamper();", "prediction": " timestamper = new Timestamper();\n\t\t\t\n\t\t\tOrder order = new Order(Side.BUY, TimeInForce.GTC, 100, 100, getClientOrderId(), timestamper.getTimestamp());\n\t\t\tbook.addOrder(order);\n\t\t\t\n\t\t\torderId++;\n\t\t}\n\t\t\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Done!\");", "first_line_groundtruth": "ts = book.getTimestamper();", "first_line_prediction": " timestamper = new Timestamper();", "match": 0}
{"groundtruth": "messages = body.getMessages();", "prediction": " message = new ChatCompletionMessage(\"assistant\", response);\n                  body.addMessage(message);\n                  listeners.onMessage(message);\n                }\n              }\n\n              retryCounter++;\n              stream(requestBody, listeners);\n            }));\n  }", "first_line_groundtruth": "messages = body.getMessages();", "first_line_prediction": " message = new ChatCompletionMessage(\"assistant\", response);", "match": 0}
{"groundtruth": ".cancel(orderBook.getTimestamper().nanoEpoch());", "prediction": " = orderBook.getOrder(1);\n\t\torder.cancel(orderBook.getTimestamper().nanoEpoch());\n\t\t\n\t\t /*\n\t\t\t -----> onOrderCanceled called:\n\t\t\t  orderBook=AAPL\n\t\t\t  time=1682731732573000000\n\t\t\t  order=Order [id=1, clientOrderId=1, side=BUY, security=AAPL, originalSize=200, openSize=100, \n\t\t\t  \t\t\t\texecutedSize=0, canceledSize=100, price=150.44, type=", "first_line_groundtruth": ".cancel(orderBook.getTimestamper().nanoEpoch());", "first_line_prediction": " = orderBook.getOrder(1);", "match": 0}
{"groundtruth": "ts.nanoEpoch(), 100);", "prediction": "100);\n\t\t\taskOrder.reduceTo(100);\n\t\t\t\n\t\t\tbook.cancelOrder(bidOrder);\n\t\t\tbook.cancelOrder(askOrder);\n\t\t\t\n\t\t\tbook.createLimit(getClientOrderId(),  orderId++,  Side.BUY, 1000, 100.00, TimeInForce.DAY);\n\t\t\tbook.createLimit(getClientOrderId(),  orderId++,  Side.BUY, 1000, 100.00, TimeInForce.DAY);\n\t\t\tbook.createLimit(getClientOrderId(),  orderId++, ", "first_line_groundtruth": "ts.nanoEpoch(), 100);", "first_line_prediction": "100);", "match": 0}
{"groundtruth": "if (!book.isEmpty()) throw new IllegalStateException(\"Book must be empty here!\");", "prediction": "\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(\"Done!\");", "first_line_groundtruth": "if (!book.isEmpty()) throw new IllegalStateException(\"Book must be empty here!\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "(orderBook.getTimestamper().nanoEpoch(), 100);", "prediction": "(100);\n\t\t\n\t\t/*\n\t\t\t -----> onOrderReduced called:\n\t\t\t  orderBook=AAPL\n\t\t\t  time=1682731803569000000\n\t\t\t  order=Order [id=1, clientOrderId=1, side=BUY, security=AAPL, originalSize=200, openSize=200, \n\t\t\t  \t\t\t\texecutedSize=0, canceledSize=0, price=150.44, type=LIMIT, tif=DAY]\n\t\t\t  reduceSize=100\n\t\t\t  reducePrice=", "first_line_groundtruth": "(orderBook.getTimestamper().nanoEpoch(), 100);", "first_line_prediction": "(100);", "match": 0}
{"groundtruth": "orderBook.showOrders();", "prediction": "\n\t\t\n\t\torderBook.createLimit(String.valueOf(++orderId), orderId, Side.SELL, 200, 150.44, TimeInForce.DAY);\n\t\t\n\t\t /*\n\t\t\t -----> onOrderAccepted called:\n\t\t\t  orderBook=AAPL\n\t\t\t  time=1682731006570000000\n\t\t\t  order=Order [id=2, clientOrderId=2, side=SELL, security=AAPL, originalSize=200, openSize=200, \n\t\t\t  \t\t\t\texecutedSize=0,", "first_line_groundtruth": "orderBook.showOrders();", "first_line_prediction": "", "match": 0}
{"groundtruth": "(listeners, client.isRetryOnReadTimeout(), (response) -> {", "prediction": "(listeners, requestBody.isRetryOnReadTimeout(), this::onRetry));\n  }\n\n  private void onRetry() {\n    retryCounter++;\n    if (retryCounter > MAX_RETRY_COUNT) {\n      throw new RuntimeException(\"Max retry count exceeded\");\n    }\n  }\n\n  public interface CompletionRequest {\n    boolean isStream();\n\n    boolean isRetryOnReadTimeout();\n\n    Map<String, Object> getAdditionalParams();\n  }\n\n  public interface CompletionEventListener {\n    void onMessage(ChatCompletionMessage message);\n\n    void onError(ErrorDetails errorDetails, Throwable error);\n  }\n\n  public static class ErrorDetails {\n    private", "first_line_groundtruth": "(listeners, client.isRetryOnReadTimeout(), (response) -> {", "first_line_prediction": "(listeners, requestBody.isRetryOnReadTimeout(), this::onRetry));", "match": 0}
{"groundtruth": "+= order.getOpenSize();", "prediction": " += order.getSize();\n        orders++;\n    }\n    \n    public void removeOrder(Order order) {\n        \n        if (order == head) {\n            \n            head = head.next;\n            \n            if (head != null) {\n                \n                head.prev = null;\n            }\n            \n        } else if (order == tail) {\n            \n            tail = tail.prev;\n            \n            if (tail != null) {\n                \n                tail.next = null;\n            }\n            \n        } else {\n            \n            order.prev.next = order.next;\n            \n            order.next.prev = order.prev;\n        }\n        \n        size  -= order.getSize();\n        orders--;\n    }\n    \n   ", "first_line_groundtruth": "+= order.getOpenSize();", "first_line_prediction": " += order.getSize();", "match": 0}
{"groundtruth": "orderBookLogger.off();", "prediction": "\n\t\torderBook.showLevels();\n\t\t\n\t\t /*\n\t\t  200 @   150.44 (orders=1)\n\t\t  500 @   149.44 (orders=2)\n\t\t -------- \n\t\t */\n\t\t\n\t\torderBook.showOrders();\n\t\t\n\t\t /*\n\t\t  200 @   150.44 (id=1)\n\t\t  500 @   149.44 (id=2)\n\t\t -------- \t\t\t  \n\t\t */\n\t\t\n\t\torderBook.createLimit(String.valueOf(++orderId), orderId, Side.BUY, 1000, 1", "first_line_groundtruth": "orderBookLogger.off();", "first_line_prediction": "", "match": 0}
{"groundtruth": "listeners.onComplete(messageBuilder);", "prediction": " return;\n    }\n\n    if (throwable instanceof SocketTimeoutException) {\n      if (retryOnReadTimeout) {\n        LOG.info(\"Read timeout, retrying\");\n        onRetry.accept(format(\"Read timeout, retrying\"));\n        return;\n      }\n    }\n\n    var errorDetails = getErrorDetails(throwable.getMessage());\n    if (errorDetails != null) {\n      listeners.onError(errorDetails);\n    } else {\n      listeners.onError(new ErrorDetails(throwable.getMessage()));\n    }\n  }", "first_line_groundtruth": "listeners.onComplete(messageBuilder);", "first_line_prediction": " return;", "match": 0}
{"groundtruth": "proxyAuthenticator.getUsername(),\n                      proxyAuthenticator.getPassword()))\n                  .build());", "prediction": " proxyAuthenticator.getUsername(), proxyAuthenticator.getPassword()))\n                   .build());\n        }\n      }\n\n      return builder.build();\n    }\n\n    private void trustAllCertificates(OkHttpClient.Builder builder) {\n      try {\n        SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n        sslContext.init(null, new TrustManager[] { new X509TrustManager() {\n          @Override\n          public void checkClientTrusted(X509Certificate[] chain, String authType) {\n          }\n\n          @Override\n          public void checkServerTrusted(X509Certificate[] chain, String authType) {\n          }", "first_line_groundtruth": "proxyAuthenticator.getUsername(),", "first_line_prediction": " proxyAuthenticator.getUsername(), proxyAuthenticator.getPassword()))", "match": 0}
{"groundtruth": "createFactory(client.getHttpClient())\n        .newEventSource(\n            request,\n            getEventListener(listeners, client.isRetryOnReadTimeout(), (response) -> {", "prediction": "eventSource(request, getEventListener(listeners, requestBody.isRetryOnReadTimeout(), this::onRetry));\n  }\n\n  private void onRetry() {\n    retryCounter++;\n    if (retryCounter > MAX_RETRY_COUNT) {\n      throw new RuntimeException(\"Max retry count exceeded\");\n    }\n  }\n\n  public interface CompletionEventListener {\n    void onMessage(String message);\n\n    void onError(ErrorDetails errorDetails, Throwable error);\n  }\n\n  public static class ErrorDetails {\n    private final String message;\n\n    public ErrorDetails(String message) {\n      this.message = message;\n    }\n\n    public String getMessage()", "first_line_groundtruth": "createFactory(client.getHttpClient())", "first_line_prediction": "eventSource(request, getEventListener(listeners, requestBody.isRetryOnReadTimeout(), this::onRetry));", "match": 0}
{"groundtruth": "!= null && mDiracSound.getMusic() == 1;", "prediction": " != null && mDiracSound.isEnabled();\n    }\n\n    public void setScenario(int scenario) {\n        mDiracSound.setScenario(scenario);\n    }\n\n    public void setMusic(int music) {\n        mDiracSound.setMusic(music);\n    }\n\n    public void setVolume(int volume) {\n        mDiracSound.setVolume(volume);\n    }\n\n    public void setAudioStream(int stream) {\n        mDiracSound.setAudioStream(stream);\n    }\n\n    public void setAudioFocus(boolean focus) {\n        mDiracSound.setAudioFocus(focus", "first_line_groundtruth": "!= null && mDiracSound.getMusic() == 1;", "first_line_prediction": " != null && mDiracSound.isEnabled();", "match": 0}
{"groundtruth": "orderBook.showLevels();", "prediction": "\n\t\t\n\t\torderBook.createLimit(String.valueOf(++orderId), orderId, Side.BUY, 200, 150.44, TimeInForce.DAY);\n\t\t\n\t\t/*\n\t\t\t -----> onOrderAccepted called:\n\t\t\t  orderBook=AAPL\n\t\t\t  time=1682731006570000000\n\t\t\t  order=Order [id=2, clientOrderId=2, side=BUY, security=AAPL, originalSize=200, openSize=200, \n\t\t\t  \t\t\t\texecutedSize=0", "first_line_groundtruth": "orderBook.showLevels();", "first_line_prediction": "", "match": 0}
{"groundtruth": "DoubleUtils.toDouble(price);", "prediction": "1.0 * this.price / 100000000.0;", "first_line_groundtruth": "DoubleUtils.toDouble(price);", "first_line_prediction": "1.0 * this.price / 100000000.0;", "match": 0}
{"groundtruth": "orderBookLogger.on();", "prediction": "\n\t\t\n\t\torderBook.cancel(String.valueOf(orderId));\n\t\t\n\t\torderBook.showLevels();\n\t\t\n\t\t /*\n\t\t  100 @   148.14 (orders=1)\n\t\t  500 @   149.44 (orders=2)\n\t\t  100 @   149.44 (orders=1)\n\t\t  200 @   150.44 (orders=1)\n\t\t --------\n\t\t  300 @   153.24 (orders=1)\n\t\t  500 @   156.43 (orders=1)\n\t\t ", "first_line_groundtruth": "orderBookLogger.on();", "first_line_prediction": "", "match": 0}
{"groundtruth": "= client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {", "prediction": " = client.call(createRequest(requestBody))) {\n      return response.body().string();\n    } catch (IOException e) {\n      throw new CompletionClientException(e);\n    }\n  }\n\n  private <T extends CompletionRequest> Request createRequest(T requestBody) {\n    var headers = getRequiredHeaders();\n    var request = new Request.Builder()\n        .url(url)\n        .headers(Headers.of(headers))\n        .post(createRequestBody(requestBody))\n        .build();\n    return request;\n  }\n\n  private <T extends CompletionRequest> RequestBody createRequestBody(T requestBody) {", "first_line_groundtruth": "= client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {", "first_line_prediction": " = client.call(createRequest(requestBody))) {", "match": 0}
{"groundtruth": "mDiracUtils != null ? mDiracUtils.isDiracEnabled() : false;", "prediction": " mDiracUtils.isEnhancerEnabled();\n        mSwitchBar = (MainSwitchPreference) findPreference(PREF_ENABLE);\n        mSwitchBar.setChecked(enhancerEnabled);\n        mSwitchBar.setOnPreferenceChangeListener(this);\n        mSwitchBar.setOnMainSwitchChangeListener(this);\n\n        mHeadsetType = (ListPreference) findPreference(PREF_HEADSET);\n        mHeadsetType.setSummary(mDiracUtils.getHeadsetType());\n        mHeadsetType.setOnPreferenceChangeListener(this);\n\n        mPreset = (ListPreference) findPreference(PREF_PRESET);\n        mPreset", "first_line_groundtruth": "mDiracUtils != null ? mDiracUtils.isDiracEnabled() : false;", "first_line_prediction": " mDiracUtils.isEnhancerEnabled();", "match": 0}
{"groundtruth": "if (StringUtils.equals(s.getFixCode(), sb)) {", "prediction": " if (s.fixCode.equals(sb)) {\n\t\t\t\t\t return s;\n\t\t\t\t }\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tpublic static final TimeInForce fromChar(char b) {\n\t\t\treturn ALL.get(b);\n\t\t}\n\t\t\n\t\tpublic char getChar() {\n\t\t\treturn b;\n\t\t}\n\t\t\n\t\tpublic String getFixCode() {\n\t\t\treturn fixCode;\n\t\t}", "first_line_groundtruth": "if (StringUtils.equals(s.getFixCode(), sb)) {", "first_line_prediction": " if (s.fixCode.equals(sb)) {", "match": 0}
{"groundtruth": "\"  restPrice=\" + DoubleUtils.toDouble(restPrice));", "prediction": "String.format(\"  restPrice=%.2f\", DoubleUtils.toDouble(restPrice)));\n    \tSystem.out.println();\n    \t}", "first_line_groundtruth": "\"  restPrice=\" + DoubleUtils.toDouble(restPrice));", "first_line_prediction": "String.format(\"  restPrice=%.2f\", DoubleUtils.toDouble(restPrice)));", "match": 0}
{"groundtruth": "book.getBestBidOrder();", "prediction": " book.getBidOrders().get(0);\n\t\t\tbook.cancel(bidOrder.getClientOrderId());\n\t\t\tbook.reduce(bidOrder.getClientOrderId(), 100);\n\t\t\t\n\t\t\tOrder askOrder =  book.getAskOrders().get(0);\n\t\t\tbook.cancel(askOrder.getClientOrderId());\n\t\t\tbook.reduce(askOrder.getClientOrderId(), 100);\n\t\t\t\n\t\t\tbook.createLimit(getClientOrderId(),  orderId++,  Side.BUY, 1000, 100.00, TimeInForce.DAY);\n\t\t\tbook.", "first_line_groundtruth": "book.getBestBidOrder();", "first_line_prediction": " book.getBidOrders().get(0);", "match": 0}
{"groundtruth": "VoidAffordance.create(), afford(methodOn(ItemController.class).create(null))));", "prediction": " afford(VoidAffordance.class).withRel(\"delete-all\"),\n                     afford(VoidAffordance.class).withRel(\"delete-all-and-reset\")\n                 )\n             );\n\n    CollectionModel<EntityModel<Item>> collectionModel =\n        CollectionModel.of(\n            StreamSupport.stream(itemRepository.findAll().spliterator(), false)\n                .map(item -> EntityModel.of(item, linkBuilders.linkTo(methodOn(ItemController.class).get(item.getId())).withSelfRel()))\n                .toList(),\n            selfLink);\n\n    return ResponseEntity.ok(collectionModel", "first_line_groundtruth": "VoidAffordance.create(), afford(methodOn(ItemController.class).create(null))));", "first_line_prediction": " afford(VoidAffordance.class).withRel(\"delete-all\"),", "match": 0}
{"groundtruth": "class).findById(item.id())).toUri())\n        .build();", "prediction": "class).get(item.id())).toUri())\n        .build();\n  }\n\n  @GetMapping(\"/{itemId}\")\n  public ResponseEntity<?> get(@PathVariable Long itemId) {\n    Item item = itemRepository.findById(itemId).orElseThrow();\n    return ResponseEntity.ok(new Representation(item));\n  }\n\n  private static class Representation extends RepresentationModel<Representation> {\n    @JsonProperty(\"id\")\n    private final Long id;\n    @JsonProperty(\"price\")\n    private final Double price;\n    @JsonProperty(\"label\")\n    private final String label;\n\n    private Representation(Item item) {\n      this.id = item.id();\n     ", "first_line_groundtruth": "class).findById(item.id())).toUri())", "first_line_prediction": "class).get(item.id())).toUri())", "match": 0}
{"groundtruth": ".withDimension(milvusConfiguration.getDimensions())\n            .build();", "prediction": " .withDimension(128)\n             .build();\n\n        List<FieldType> fieldTypes = new ArrayList<>();\n        fieldTypes.add(fieldType1);\n        fieldTypes.add(fieldType2);\n        fieldTypes.add(fieldType3);\n        fieldTypes.add(fieldType4);\n\n        CreateCollectionParam createCollectionParam = CreateCollectionParam.newBuilder()\n             .withCollectionName(milvusConfiguration.getCollectionName())\n             .withShardsNum(milvusConfiguration.getShardsNum())\n             .withReplicasNum(milvusConfiguration.getReplicasNum())\n             .withAutoFlush(milvusConfiguration.isAutoFlush", "first_line_groundtruth": ".withDimension(milvusConfiguration.getDimensions())", "first_line_prediction": " .withDimension(128)", "match": 0}
{"groundtruth": ".withTimeout(milvusConfiguration.getTimeout(), TimeUnit.MILLISECONDS)\n                .createCollection(createCollectionReq);", "prediction": ".createCollection(createCollectionReq);\n            if (response.ok()) {\n                LOGGER.info(\"Collection created successfully\");\n            } else {\n                LOGGER.error(\"Collection creation failed: {}\", response.getMessage());\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Collection creation failed: {}\", e.getMessage());\n        }\n    }\n\n    private void loadCollection() throws Exception {\n        LoadCollectionParam loadCollectionReq = LoadCollectionParam.newBuilder()\n             .withCollectionName(milvusConfiguration.getCollection())\n             .withShardingKey(\"id\")\n             .build();\n\n        try {\n            R<RpcStatus", "first_line_groundtruth": ".withTimeout(milvusConfiguration.getTimeout(), TimeUnit.MILLISECONDS)", "first_line_prediction": ".createCollection(createCollectionReq);", "match": 0}
{"groundtruth": "if(milvusConfiguration.getDeleteOnStartup() && hasCollection) {", "prediction": "\n            \n            if(hasCollection) {\n                LOGGER.debug(\"Collection exists, skipping load\");\n            }\n            else {\n                LOGGER.debug(\"Collection does not exist, loading\");\n                LoadCollectionParam loadCollectionReq = LoadCollectionParam.newBuilder()\n                     .withCollectionName(milvusConfiguration.getCollection())\n                     .withFileName(milvusConfiguration.getCollection() + \".bin\")\n                     .build();\n\n                R<RpcStatus> response = milvusClient.withTimeout(milvusConfiguration.getTimeout(), TimeUnit.MILLISECONDS)\n                     .loadCollection(loadCollectionReq);\n\n                if(response.getStatus().equals(R.", "first_line_groundtruth": "if(milvusConfiguration.getDeleteOnStartup() && hasCollection) {", "first_line_prediction": "", "match": 0}
{"groundtruth": "(milvusConfiguration.getCollection())\n                .build());", "prediction": "(milvusConfiguration.getCollection())\n                 .withFileName(milvusConfiguration.getCollection() + \".bin\")\n                 .build());\n\n            if(response.getStatus().equals(R.Status.Success.getCode())) {\n                LOGGER.debug(\"Load collection response: \" + response.getData().getMsg());\n            }\n            else {\n                LOGGER.error(\"Error loading collection: \" + response.getData().getMsg());\n                if(response.getException() != null) {\n                    throw new Exception(\"Error loading collection\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error loading collection\");\n               ", "first_line_groundtruth": "(milvusConfiguration.getCollection())", "first_line_prediction": "(milvusConfiguration.getCollection())", "match": 1}
{"groundtruth": "new Entry(entry1.path, entry1.metadata, classMergerCooler.merge(entry1.data, entry2.data));", "prediction": " classMergerCooler.merge(entry1, entry2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = entry1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (entry1 != null) {\n\t\t\t\tresult = entry1;\n\t\t\t} else if (entry2 != null) {\n\t\t\t\tresult = entry2;\n\t\t\t} else {\n\t\t\t\tresult = null;\n\t\t\t}\n\t\t\t\n\t\t\tif (result != null) {\n\t\t\t\tif (isMinecraft) {\n\t\t\t\t\tside = \"client\";\n\t\t\t\t} else {\n\t\t\t\t\tside = \"server\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t", "first_line_groundtruth": "new Entry(entry1.path, entry1.metadata, classMergerCooler.merge(entry1.data, entry2.data));", "first_line_prediction": " classMergerCooler.merge(entry1, entry2);", "match": 0}
{"groundtruth": "(MinivanPlugin.filenameSafe(name) + \".jar\");", "prediction": "(artifact.path);\n\t\t}\n\t\t\n\t\tpublic String getClassifier() {\n\t\t\treturn artifact.classifier;\n\t\t}\n\t\t\n\t\tpublic String getVersion() {\n\t\t\treturn artifact.version;\n\t\t}\n\t\t\n\t\tpublic String getURL() {\n\t\t\treturn forgeDownloadRoot + getURLSuffix();\n\t\t}\n\t\t\n\t\tpublic String getSha1() {\n\t\t\treturn downloads.get(\"sha1\").getAsString();\n\t\t}\n\t\t\n\t\tpublic String getNatives() {\n\t\t\treturn natives.get(\"natives\").getAsString();\n\t\t}\n\t\t\n\t\tpublic String getMainClass() {\n\t\t", "first_line_groundtruth": "(MinivanPlugin.filenameSafe(name) + \".jar\");", "first_line_prediction": "(artifact.path);", "match": 0}
{"groundtruth": "sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);", "prediction": " /* Timeout task has been triggered. */\n            requests.remove(request);\n            sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);\n        }, request.getInput().getTimeout());\n    }\n\n    /* Sends the given message to the player. */\n    private static void sendInputMessage(@NotNull UUID uuid, @NotNull AquaInput input, @NotNull InputMessage message) {\n        Player player = plugin.getServer().getPlayer(uuid);\n        if (player == null) return;\n        player.sendMessage(input.getPrefix() + message.getMessage());\n    }\n\n    /* Sends the given message to the player. */", "first_line_groundtruth": "sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);", "first_line_prediction": " /* Timeout task has been triggered. */", "match": 0}
{"groundtruth": ".get(uuid).forEach(request -> request.getFuture().complete(response));", "prediction": ".get(uuid).forEach(request -> request.getFuture().complete(response));\n        requestsQueue.remove(uuid);\n    }", "first_line_groundtruth": ".get(uuid).forEach(request -> request.getFuture().complete(response));", "first_line_prediction": ".get(uuid).forEach(request -> request.getFuture().complete(response));", "match": 1}
{"groundtruth": "request.getInput().getTimeout() * 20L);", "prediction": "20 * request.getInput().getTimeout());\n    }\n\n    /* Sends the input message to the player. */\n    private static void sendInputMessage(@NotNull UUID uuid, @NotNull AquaInput input, @NotNull InputMessage message) {\n        Player player = plugin.getServer().getPlayer(uuid);\n        if (player == null) return;\n        player.sendMessage(input.getPrefix() + message.getMessage());\n    }\n\n    /* Completes the current request with the given response. */\n    private static void completeCurrentRequest(@NotNull UUID uuid, @NotNull AquaInputResponse response) {\n        Queue<AquaInputRequest", "first_line_groundtruth": "request.getInput().getTimeout() * 20L);", "first_line_prediction": "20 * request.getInput().getTimeout());", "match": 0}
{"groundtruth": "if (request.getInput().getTimeout() < 0) return;", "prediction": " plugin.getServer().getScheduler().runTaskLater(plugin, () -> {\n             /* Sending the timeout message. */\n             sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);", "first_line_groundtruth": "if (request.getInput().getTimeout() < 0) return;", "first_line_prediction": " plugin.getServer().getScheduler().runTaskLater(plugin, () -> {", "match": 0}
{"groundtruth": ", request.getInput(), InputMessage.PROMPT);", "prediction": ", request.getInput());\n\n        /* Timeout task. */\n        plugin.getServer().getScheduler().runTaskLater(plugin, () -> {\n            if (requestsQueue.containsKey(uuid)) {\n                Queue<AquaInputRequest> queue = requestsQueue.get(uuid);\n                if (queue.contains(request)) {\n                    queue.remove(request);\n                    if (queue.isEmpty())\n                        requestsQueue.remove(uuid);\n                }\n            }\n        }, request.getInput().getTimeout());\n    }\n\n    /* Sends the prompt message to the player. */\n    private static void sendInputMessage(@NotNull UUID uuid, @NotNull", "first_line_groundtruth": ", request.getInput(), InputMessage.PROMPT);", "first_line_prediction": ", request.getInput());", "match": 0}
{"groundtruth": ".element().getInput();", "prediction": " != null ? requestsQueue.get(uuid).element().getInput() : null;\n    }\n\n    /* Completes the current request with the given response. */\n    private static void completeCurrentRequest(@NotNull UUID uuid, @NotNull AquaInputResponse response) {\n        if (!requestsQueue.containsKey(uuid)) return;\n        Queue<AquaInputRequest> requests = requestsQueue.get(uuid);\n\n        if (requests.element() != null) {\n            requests.element().complete(response);\n            requests.remove();\n        }\n    }", "first_line_groundtruth": ".element().getInput();", "first_line_prediction": " != null ? requestsQueue.get(uuid).element().getInput() : null;", "match": 0}
{"groundtruth": "requests.element().getFuture().complete(response);", "prediction": " /* If the current head of the queue is not the one that was completed, return. */\n        if (requests.element() != getCurrentRequest(uuid)) return;\n\n        /* If the current head of the queue is the one that was completed, remove it from the queue. */\n        requests.remove();\n\n        /* If the queue is empty, remove the player from the requests queue. */\n        if (requests.isEmpty()) requestsQueue.remove(uuid);\n\n        /* Complete the CompletableFuture of the current head of the queue. */\n        requests.element().getFuture().complete(response);\n    }", "first_line_groundtruth": "requests.element().getFuture().complete(response);", "first_line_prediction": " /* If the current head of the queue is not the one that was completed, return. */", "match": 0}
{"groundtruth": "request.getFuture();", "prediction": " request.getFuture();\n    }\n\n    /**\n     * Initializes the plugin.\n     *\n     * @param plugin the plugin\n     * */\n    private static void initialize(@NotNull JavaPlugin plugin) {\n        AquaInputManager.plugin = plugin;\n    }\n\n    /**\n     * Initializes the input request.\n     *\n     * @param uuid the unique id\n     * @param request the request\n     * */\n    private static void initializeInputRequest(@NotNull UUID uuid, @NotNull AquaInputRequest request) {\n        Player player = plugin.getServer().getPlayer(uuid);\n        if (player == null) return;\n\n        player.sendTitle(", "first_line_groundtruth": "request.getFuture();", "first_line_prediction": " request.getFuture();", "match": 0}
{"groundtruth": "d.getOriginalText().split(\"\\\\n\");", "prediction": " sb.toString().split(\" \");\n        for(int i = 0; i < splitText.length; i++) {\n            outputBuilder.append(splitText[i]).append(\" \");\n        }\n        d.setCleanedText(outputBuilder.toString());\n        \n        return d;\n    }\n\n    @Override\n    public List<Document> loadDocuments() throws Exception {\n        LOGGER.debug(\"Loading documents from: \" + agencyConfiguration.getDocumentsPath());\n        List<Document> docs = new ArrayList<>();\n        File input = new File(agencyConfiguration.getDocumentsPath());\n        Scanner scanner = new Scanner(input);\n        \n       ", "first_line_groundtruth": "d.getOriginalText().split(\"\\\\n\");", "first_line_prediction": " sb.toString().split(\" \");", "match": 0}
{"groundtruth": "(description.getName().equals(skillType)) {", "prediction": "(description.getName().equals(skillType)) {\n                    returnVal.put(skillType, currentSkill);\n                    break;\n                }\n            }\n        }\n        return returnVal;\n    }", "first_line_groundtruth": "(description.getName().equals(skillType)) {", "first_line_prediction": "(description.getName().equals(skillType)) {", "match": 1}
{"groundtruth": ").infer(object, recordName));", "prediction": "recordName));\n        writer.write(object, encoder);\n        encoder.flush();\n        return ByteBuffer.wrap(outputStream.toByteArray());\n    }", "first_line_groundtruth": ").infer(object, recordName));", "first_line_prediction": "recordName));", "match": 0}
{"groundtruth": "conversation.formattedFullHistory(), null);", "prediction": "conversation);\n        return historyAgentConversation;\n    }", "first_line_groundtruth": "conversation.formattedFullHistory(), null);", "first_line_prediction": "conversation);", "match": 0}
{"groundtruth": "= currentSkill.describe();", "prediction": " = currentSkill.getDescription();\n                if(description.getName().equals(skillType)) {\n                    returnVal.put(skillType, currentSkill);\n                    break;\n                }\n            }\n        }\n        return returnVal;\n    }", "first_line_groundtruth": "= currentSkill.describe();", "first_line_prediction": " = currentSkill.getDescription();", "match": 0}
{"groundtruth": "conversation.getAllMessages().get(0).getRole().equals(ChatMessageRole.SYSTEM.value())) {", "prediction": "historyAgentConversation.hasSystemMessage()) {\n            summarized.addMessage(historyAgentConversation.getSystemMessage());\n        }\n\n        // copy the agent messages\n        for(var message : historyAgentConversation.getAgentMessages()) {\n            summarized.addMessage(message);\n        }\n\n        // copy the user messages\n        for(var message : historyAgentConversation.getUserMessages()) {\n            summarized.addMessage(message);\n        }\n\n        return summarized;\n    }", "first_line_groundtruth": "conversation.getAllMessages().get(0).getRole().equals(ChatMessageRole.SYSTEM.value())) {", "first_line_prediction": "historyAgentConversation.hasSystemMessage()) {", "match": 0}
{"groundtruth": "conversation.getAllMessages())\n                    .maxTokens(agencyConfiguration.getChatRequestMaxTokens())\n                    .build();", "prediction": "getChatMessages(conversation))\n                     .model(openAiConfiguration.chatModel())\n                     .n(tokenCount)\n                     .build();\n\n        ChatCompletionResult chatCompletionResult = openAiService.chatCompletion(chatCompletionRequest);\n        LOGGER.debug(\"JTokkit completed the request\");\n\n        ChatMessage chatMessage = chatCompletionResult.getMessages().get(0);\n        LOGGER.debug(\"JTokkit got the response: \" + chatMessage.getMessage());\n\n        return chatMessage;\n    }\n\n    private ChatMessage[] getChatMessages(ConversationHistory conversation) {\n        ChatMessage[] chatMessages = new ChatMessage[conversation", "first_line_groundtruth": "conversation.getAllMessages())", "first_line_prediction": "getChatMessages(conversation))", "match": 0}
{"groundtruth": "var message : conversation.getAllMessages()) {", "prediction": " ChatMessage chatMessage : conversation.getAllMessages()) {\n            sum += chatMessage.getContent().split(\"\\\\s+\").length;\n        }\n        return sum / tokensPerMessage;\n    }\n\n    public String summarize(String text) {\n        return summarizerAgent.summarize(text);\n    }\n\n    public String summarize(String text, String model) {\n        return summarizerAgent.summarize(text, model);\n    }\n\n    public String summarize(String text, String model, String summaryLength) {\n        return summarizerAgent.summarize(text, model, summaryLength);\n    }\n\n    public String summarize", "first_line_groundtruth": "var message : conversation.getAllMessages()) {", "first_line_prediction": " ChatMessage chatMessage : conversation.getAllMessages()) {", "match": 0}
{"groundtruth": "historyAgentConversation.getAllMessages().get(\n                        historyAgentConversation.getAllMessages().size()-1)));", "prediction": " historyAgentConversation.formattedFullHistory()));\n\n        return summarized;\n    }", "first_line_groundtruth": "historyAgentConversation.getAllMessages().get(", "first_line_prediction": " historyAgentConversation.formattedFullHistory()));", "match": 0}
{"groundtruth": "return mapper.deleteRegister(challengeSeq, id);", "prediction": " // TODO Auto-generated method stub\n\t\tint res = mapper.deleteRegister(challengeSeq, id);\n\t\tSystem.out.println(\"biz delete res: \" + res);\n\t\treturn res;", "first_line_groundtruth": "return mapper.deleteRegister(challengeSeq, id);", "first_line_prediction": " // TODO Auto-generated method stub", "match": 0}
{"groundtruth": "dto.setOnOffNoty(\"Y\");", "prediction": "", "first_line_groundtruth": "dto.setOnOffNoty(\"Y\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "> challenges = challengeBiz.findbyCate(category);", "prediction": "> challenges = challengeBiz.selectByCategory(category);\n\t      model.addAttribute(\"challenges\", challenges);\n\t      model.addAttribute(\"cate\", category);\n\t      return \"main\";\n\t   }\n\t   \n\t   @GetMapping(\"/main_work\")\n\t   public String getWorkChallenges(Model model) {\n\t      String category = \"\uacf5\ubd80\";\n\t      List<ChallengeDto> challenges = challengeBiz.selectByCategory(category);\n\t      model.addAttribute(\"challenges\", challenges);\n\t      model.addAttribute(\"cate\", category);\n\t      return \"main\";\n\t   }\n\t   \n\t   @GetMapping(\"/main_etc\")\n\t   public String getEtcChallenges(Model model", "first_line_groundtruth": "> challenges = challengeBiz.findbyCate(category);", "first_line_prediction": "> challenges = challengeBiz.selectByCategory(category);", "match": 0}
{"groundtruth": "historyAgentConversation.getAllMessages().size()-1)));", "prediction": "0).getContent()));\n\n        return summarized;\n    }", "first_line_groundtruth": "historyAgentConversation.getAllMessages().size()-1)));", "first_line_prediction": "0).getContent()));", "match": 0}
{"groundtruth": "conversation.getAllMessages().size()).toArray(new ChatMessage[0]);", "prediction": " conversation.getAllMessages().size())\n                     .toArray(new ChatMessage[0]);\n    }", "first_line_groundtruth": "conversation.getAllMessages().size()).toArray(new ChatMessage[0]);", "first_line_prediction": " conversation.getAllMessages().size())", "match": 0}
{"groundtruth": "dto.setUserLoginType(\"K\");", "prediction": "", "first_line_groundtruth": "dto.setUserLoginType(\"K\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "dto.setUserName(userName);", "prediction": "\ttry {\n\t\t\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\t\tdto.setUserBirth(sdf.parse(userBirth));\n\t\t\t} catch (ParseException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\tdto.setUserName(userName);\n\t\tdto.setUserPhone(userPhone);\n\t\tloginBiz.join(dto);\n\t\treturn \"redirect:/\";", "first_line_groundtruth": "dto.setUserName(userName);", "first_line_prediction": "\ttry {", "match": 0}
{"groundtruth": ".put(\"userId\", dto.getUserId());", "prediction": ".put(\"url\", \"/kakaoAuth/join\");\n\t\t}\n\t\treturn result;", "first_line_groundtruth": ".put(\"userId\", dto.getUserId());", "first_line_prediction": ".put(\"url\", \"/kakaoAuth/join\");", "match": 0}
{"groundtruth": "dto.setUserPhone(userPhone);", "prediction": "\tdto.setUserPhone(userPhone);\n\t\tloginBiz.join(dto);\n\t\treturn \"redirect:/\";", "first_line_groundtruth": "dto.setUserPhone(userPhone);", "first_line_prediction": "\tdto.setUserPhone(userPhone);", "match": 0}
{"groundtruth": "user = loginBiz.findByUserId(userId);", "prediction": " userDto = loginBiz.login(userId, userPw);\n\t\tif(userDto != null) {\n\t\t\tsession.setAttribute(\"user\", userDto);\n\t\t\treturn \"redirect:/main\";\n\t\t}\n\t\telse {\n\t\t\tmodel.addAttribute(\"msg\", \"\uc544\uc774\ub514 \ub610\ub294 \ube44", "first_line_groundtruth": "user = loginBiz.findByUserId(userId);", "first_line_prediction": " userDto = loginBiz.login(userId, userPw);", "match": 0}
{"groundtruth": "&& user.getUserPw().equals(userPw)) {", "prediction": " && user.getUserPw().equals(userPw)) {\n\t\t\tsession.setAttribute(\"user\", user);\n\t\t\treturn \"redirect:/main\";\n\t\t} else {\n\t\t\tmodel.addAttribute(\"msg\", \"\uc544\uc774\ub514 \ub610\ub294 \ube44", "first_line_groundtruth": "&& user.getUserPw().equals(userPw)) {", "first_line_prediction": " && user.getUserPw().equals(userPw)) {", "match": 0}
{"groundtruth": "openAiConfiguration.chatModel(), \n            conversation);", "prediction": "0, \n            conversation.getChatHistory().size()\n        );\n\n        ChatCompletionRequest request = requestBuilder\n            .withPrompt(conversation.getChatHistory().get(0).getChatText())\n            .withMaxTokens(tokenCount)\n            .withMaxLines(1)\n            .withStream(false)\n            .withTemperature(0.7)\n            .withFrequencyPenalty(0.0)\n            .withPresencePenalty(0.0)\n            .withStop(new String[] { \"exit\", \"quit\", \"bye\", \"goodbye\" })\n            .withUser(new ChatMessageRole(\"", "first_line_groundtruth": "openAiConfiguration.chatModel(), ", "first_line_prediction": "0, ", "match": 0}
{"groundtruth": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {", "prediction": "(historyAgentConversation.getAllMessages().size() > 1) {\n            for(int i = 1; i < historyAgentConversation.getAllMessages().size(); i++) {\n                recentMessagesSB.append(historyAgentConversation.getAllMessages().get(i).getContent());\n                recentMessagesSB.append(\"\\n\");\n            }\n        }\n        else {\n            recentMessagesSB.append(\"No messages yet.\");\n        }\n        summarized.addMessage(\n            new ChatMessage(ChatMessageRole.SYSTEM.value(), recentMessagesSB.toString()));\n\n        return summarized;\n    }", "first_line_groundtruth": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {", "first_line_prediction": "(historyAgentConversation.getAllMessages().size() > 1) {", "match": 0}
{"groundtruth": "ChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);", "prediction": "\tChallengeDto challengeDto = challengeBiz.selectOne(challengeSeq);\n\t\t\t\tUserDto userDto = loginBiz.selectOne(userId);\n\t\t\t\tRegisteredMemberDto registeredMemberDto = new RegisteredMemberDto();\n\t\t\t\tregisteredMemberDto.setChallengeDto(challengeDto);\n\t\t\t\tregisteredMemberDto.setUserDto(userDto);\n\t\t\t\tregisteredMemberDto.setJoinDate(new Date());\n\t\t\t\tregisteredMemberDto.setChallengeSeq(challengeSeq);\n\t\t\t\tregisteredMemberDto.setUserId(userId);\n\t\t\t\tregisteredMemberDto.setChallengeName(challengeDto.getChallengeName());\n\t\t\t\tregisteredMemberDto", "first_line_groundtruth": "ChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);", "first_line_prediction": "\tChallengeDto challengeDto = challengeBiz.selectOne(challengeSeq);", "match": 0}
{"groundtruth": "challenge = challengeBiz.selectOne(challengeName);", "prediction": " challenge = challengeBiz.selectByName(challengeName);\n\t\tmodel.addAttribute(\"challenge\", challenge);\n\t\treturn \"detail\";", "first_line_groundtruth": "challenge = challengeBiz.selectOne(challengeName);", "first_line_prediction": " challenge = challengeBiz.selectByName(challengeName);", "match": 0}
{"groundtruth": "return redisOps.getValue(getApiKeyRedisKey());", "prediction": " return redisOps.getValue(apiKeyRedisKey);\n    }\n\n    @Override\n    public String getOpenAIApiKeyId() {\n        return openAIApiKeyId;\n    }\n\n    @Override\n    public String getLockRedisKey() {\n        if (StringUtils.isBlank(lockRedisKey)) {\n            lockRedisKey = LOCK_REDIS_KEY + keyPrefix;\n        }\n        return lockRedisKey;\n    }\n\n    @Override\n    public String getApiKeyRedisKey() {\n        if (StringUtils.isBlank(apiKeyRedisKey)) {\n            apiKeyRedisKey = OPEN_AI_API_KEY_REDIS_KEY + keyPrefix;\n        }", "first_line_groundtruth": "return redisOps.getValue(getApiKeyRedisKey());", "first_line_prediction": " return redisOps.getValue(apiKeyRedisKey);", "match": 0}
{"groundtruth": "redisOps.setValue(apiKeyRedisKey, openApiKey);", "prediction": " redisOps.set(apiKeyRedisKey, openApiKey);\n    }\n\n    @Override\n    public String getOpenAIApiKey() {\n        return redisOps.get(apiKeyRedisKey);\n    }\n\n    @Override\n    public String getOpenAIApiKeyId() {\n        return openAIApiKeyId;\n    }\n\n    @Override\n    public String getLockRedisKey() {\n        if (StringUtils.isBlank(lockRedisKey)) {\n            lockRedisKey = LOCK_REDIS_KEY + keyPrefix;\n        }\n        return lockRedisKey;\n    }\n\n    @Override\n    public String getApiKeyRedisKey() {\n        if (StringUtils.isBlank(", "first_line_groundtruth": "redisOps.setValue(apiKeyRedisKey, openApiKey);", "first_line_prediction": " redisOps.set(apiKeyRedisKey, openApiKey);", "match": 0}
{"groundtruth": "int currentMember = registeredBiz.coutBySeq(challengeSeq);", "prediction": "\n\t\t\t\n\t\t\t// \ucc38\uc5ec\ud558\uae30\n\t\t\tchallengeBiz.joinUser(currentChallenge, currentUser);", "first_line_groundtruth": "int currentMember = registeredBiz.coutBySeq(challengeSeq);", "first_line_prediction": "", "match": 0}
{"groundtruth": "registeredBiz.coutBySeq(challengeSeq);", "prediction": "0;\n\t\t\t\tif (currentChallenge.getChallengeMaxMember() == 1) {\n\t\t\t\t\tmember = 1;\n\t\t\t\t} else {\n\t\t\t\t\tmember = currentMember + 1;\n\t\t\t\t}\n\t\t\t\tif (member == currentChallenge.getChallengeMaxMember()) {\n\t\t\t\t\tcurrentChallenge.setChallengeEnabled(\"N\");\n\t\t\t\t\tchallengeBiz.update(currentChallenge);\n\t\t\t\t}\n\t\t\t\treturn \"success\";\n\t\t\t} else {\n\t\t\t\treturn \"fail\";\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"fail\";\n\t\t}", "first_line_groundtruth": "registeredBiz.coutBySeq(challengeSeq);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "registeredBiz.challengeStart(challengeSeq);", "prediction": "\tchallengeBiz.updateChallengeEnabled(challengeSeq);\n\t\t\t\t}\n\t\t\t\treturn \"success\";\n\t\t\t} else {\n\t\t\t\treturn \"fail\";\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"fail\";\n\t\t}", "first_line_groundtruth": "registeredBiz.challengeStart(challengeSeq);", "first_line_prediction": "\tchallengeBiz.updateChallengeEnabled(challengeSeq);", "match": 0}
{"groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")\n\t\t\t\t\t&& currentMember < currentChallenge.getChallengeMaxMember()) {", "prediction": "\tif (currentMember == 0) {\n\t\t\t\t\t//", "first_line_groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")", "first_line_prediction": "\tif (currentMember == 0) {", "match": 0}
{"groundtruth": "return currentChallenge.getChallengeName() + \"\uc5d0 \ucc38\uc5ec\ud558\uc600\uc2b5\ub2c8\ub2e4. \";", "prediction": "\treturn \"success\";\n\t\t\t\t} else {\n\t\t\t\t\treturn \"fail\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn \"fail\";\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"fail\";\n\t\t}", "first_line_groundtruth": "return currentChallenge.getChallengeName() + \"\uc5d0 \ucc38\uc5ec\ud558\uc600\uc2b5\ub2c8\ub2e4. \";", "first_line_prediction": "\treturn \"success\";", "match": 0}
{"groundtruth": "currentChallenge.getChallengeMaxMember()) {", "prediction": "3\n\t\t\t\t\t&& currentChallenge.getChallengeCate().equals(currentUser.getUserCate())) {\n\t\t\t\t// \ucc38\uc5ec\ud558\uae30\n\t\t\t\tregisteredBiz.insert(challengeSeq, userId);\n\t\t\t\treturn \"success\";\n\t\t\t} else {\n\t\t\t\treturn \"fail\";\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"fail\";\n\t\t}", "first_line_groundtruth": "currentChallenge.getChallengeMaxMember()) {", "first_line_prediction": "3", "match": 0}
{"groundtruth": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());", "prediction": ".equals(settings.sopsBinaryPath, settingsComponent.getSopsBinaryPath());", "first_line_groundtruth": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||", "first_line_prediction": ".equals(settings.sopsBinaryPath, settingsComponent.getSopsBinaryPath());", "match": 0}
{"groundtruth": "settingsComponent.getSopsFilesReadOnly());", "prediction": " settingsComponent.getSopsFilesReadOnly()) ||\n\t\t\t\t!Objects.equals(settings.sopsFilesExclude, settingsComponent.getSopsFilesExclude());", "first_line_groundtruth": "settingsComponent.getSopsFilesReadOnly());", "first_line_prediction": " settingsComponent.getSopsFilesReadOnly()) ||", "match": 0}
{"groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {", "prediction": "\n\t\t\tint res = registeredBiz.delete(challengeSeq, currentUser.getId());\n\t\t\tSystem.out.println(\"controller delete res: \" + res);\n\t\t\t\n\t\t\t// \ub514\ube44 \ubc18\uc601 \ud6c4", "first_line_groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {", "first_line_prediction": "", "match": 0}
{"groundtruth": "SettingsState.getInstance().sopsEnvironment.split(\"\\\\s(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");", "prediction": " Arrays.stream(EnvironmentUtil.getEnvironmentVariables())\n\t\t\t\t.filter(Predicate.not(e -> e.startsWith(\"PATH=\")))\n\t\t\t\t.toArray(String[]::new);", "first_line_groundtruth": "SettingsState.getInstance().sopsEnvironment.split(\"\\\\s(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");", "first_line_prediction": " Arrays.stream(EnvironmentUtil.getEnvironmentVariables())", "match": 0}
{"groundtruth": "currentChallenge.getChallengeMaxMember() <= member) {", "prediction": "member == currentChallenge.getChallengeMaxMember()) {\n\t\t\t\t\tchallengeBiz.updateChallengeEnabled(challengeSeq);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn \"success\";\n\t\t\t} else {\n\t\t\t\treturn \"fail\";\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"fail\";\n\t\t}", "first_line_groundtruth": "currentChallenge.getChallengeMaxMember() <= member) {", "first_line_prediction": "member == currentChallenge.getChallengeMaxMember()) {", "match": 0}
{"groundtruth": "+ \" &3&o\u2192 &r\" + blockItem.getDisplayName());", "prediction": " + \" &7&o- &f&o\" + blockItem.getDisplayName());\n        }\n\n        return true;\n    }", "first_line_groundtruth": "+ \" &3&o\u2192 &r\" + blockItem.getDisplayName());", "first_line_prediction": " + \" &7&o- &f&o\" + blockItem.getDisplayName());", "match": 0}
{"groundtruth": "world.dropItemNaturally(location, blockItem.getItem(1));", "prediction": " if (blockItem.isDrop()) {\n                    ItemStack item = blockItem.getItem();\n                    ItemDisplay itemDisplay = (ItemDisplay) item.getItemMeta();\n                    itemDisplay.setDisplayName(blockItem.getDisplayName());\n                    item.setItemMeta(itemDisplay);\n                    world.dropItemNaturally(location, item);\n                }\n            }\n        }\n    }\n\n    public void preload () {\n        for (BlockEntity blockEntity : blockCollection.values()) {\n            blockEntity.preload();\n        }\n    }\n\n    public BlockEntity getBlock (String blockID) {\n        return blockCollection.get(blockID);", "first_line_groundtruth": "world.dropItemNaturally(location, blockItem.getItem(1));", "first_line_prediction": " if (blockItem.isDrop()) {", "match": 0}
{"groundtruth": "player.getInventory().addItem(blockItem.getItem(amount));", "prediction": " if (blockItem.getAmount() < amount) {\n            Helpers.sendMessage(this.plugin, player, Keys.MESSAGES_CMD_BLOCK_NOT_ENOUGH);\n            return false;\n        }\n\n        blockItem.setAmount(blockItem.getAmount() - amount);\n        this.plugin.settings.set(Keys.BLOCKS, this.blockTypes);\n        Helpers.sendMessage(this.plugin, player, Keys.MESSAGES_CMD_BLOCK_GOT, blockItem.getAmount());\n\n        return true;\n    }\n\n    public boolean giveBlockItem (CommandSender sender, String blockType, int amount", "first_line_groundtruth": "player.getInventory().addItem(blockItem.getItem(amount));", "first_line_prediction": " if (blockItem.getAmount() < amount) {", "match": 0}
{"groundtruth": "edgarSectorEnrichService.exportToCSV(writer);", "prediction": " writer.write(\"Ticker,Cik,Sector,Sic,Name,Ticker,Cik,Sector,Sic,Name\\n\");\n            stockCikRepository.findAll().forEach(stock -> {\n                writer.write(stock.getTicker() + \",\" + stock.getCik() + \",\" + stock.getSector() + \",\" + stock.getSic() + \",\" + stock.getName() + \",\" + stock.getTicker() + \",\" + stock.getCik() + \",\" + stock.getSector() + \",\" + stock.getSic() + \",\" + stock.getName() + \"\\n\");\n           ", "first_line_groundtruth": "edgarSectorEnrichService.exportToCSV(writer);", "first_line_prediction": " writer.write(\"Ticker,Cik,Sector,Sic,Name,Ticker,Cik,Sector,Sic,Name\\n\");", "match": 0}
{"groundtruth": "edgarSectorEnrichService.enrichCik(ticker);", "prediction": " stockCikRepository.findByTicker(ticker);\n        if (stockCikOptional.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n        }\n        Stock stockCik = stockCikOptional.get();\n        stockEnrichmentService.enrichStock(stockCik);\n        return ResponseEntity.ok(stockCik);\n    }\n\n    @PostMapping(\"/enrich/cik/{cik}\")\n    public ResponseEntity<Stock> enrichCikById(@PathVariable Long cik) {\n        Optional<Stock> stockCikOptional = stockCikRepository.findByCik(c", "first_line_groundtruth": "edgarSectorEnrichService.enrichCik(ticker);", "first_line_prediction": " stockCikRepository.findByTicker(ticker);", "match": 0}
{"groundtruth": "fullIndexDownloadService.processFillings(filingTypesList);", "prediction": " filingsDownloadService.downloadFilings(filingTypesList);\n             fullIndexDownloadService.downloadFullIndex();\n             stockEnrichmentService.enrichStockWithCusips();\n             return ResponseEntity.ok().build();\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();\n        }\n    }", "first_line_groundtruth": "fullIndexDownloadService.processFillings(filingTypesList);", "first_line_prediction": " filingsDownloadService.downloadFilings(filingTypesList);", "match": 0}
{"groundtruth": "String> formTypes = fullIndexRepository.findDistinctFormTypes();", "prediction": "String> result = filingsDownloadService.getDistinctFormTypes();\n        return new ResponseEntity<>(result, HttpStatus.OK);\n    }", "first_line_groundtruth": "String> formTypes = fullIndexRepository.findDistinctFormTypes();", "first_line_prediction": "String> result = filingsDownloadService.getDistinctFormTypes();", "match": 0}
{"groundtruth": "filingsDownloadService.downloadFullIndex();", "prediction": " String result = fullIndexDownloadService.downloadFullIndex();\n         return new ResponseEntity<>(result, HttpStatus.OK);\n    }", "first_line_groundtruth": "filingsDownloadService.downloadFullIndex();", "first_line_prediction": " String result = fullIndexDownloadService.downloadFullIndex();", "match": 0}
{"groundtruth": "<String> allFormTypes = fullIndexRepository.findDistinctFormTypes();", "prediction": "<String> filingTypes = fullIndexRepository.findByFormTypeContaining(\"13\").stream()\n                .map(FullIndex::getFormType)\n                .collect(Collectors.toSet());\n\n        int newFilings = 0;\n        int existingFilings = 0;\n\n        for (String filingType : filingTypes) {\n            log.info(\"Downloading filings of type {}\", filingType);\n            String result = downloadFilingsOfType(filingType);\n            newFilings += result.split(\"New filings: \")[1].split(\",\")[0].trim();\n            existingFilings += result", "first_line_groundtruth": "<String> allFormTypes = fullIndexRepository.findDistinctFormTypes();", "first_line_prediction": "<String> filingTypes = fullIndexRepository.findByFormTypeContaining(\"13\").stream()", "match": 0}
{"groundtruth": "IAPKAnalyzer.createFor(inputFile);", "prediction": " new IAPKAnalyzer(inputFile);\n        var gson = new GsonBuilder().setPrettyPrinting().create();\n        return gson.toJson(analyzer.getExtractedData());\n    }", "first_line_groundtruth": "IAPKAnalyzer.createFor(inputFile);", "first_line_prediction": " new IAPKAnalyzer(inputFile);", "match": 0}
{"groundtruth": "targetFilings = fullIndexRepository.findByFormType(filingType);", "prediction": " fullIndices = fullIndexRepository.findByFormType(filingType);\n        if (fullIndices.isEmpty()) {\n            log.info(\"No full indices found for filing type {}\", filingType);\n            return null;\n        }\n\n        List<String> cikList = fullIndices.stream()\n                .map(FullIndex::getCik)\n                .map(String::valueOf)\n                .collect(Collectors.toList());\n\n        List<String> cikCusipPairs = cikList.stream()\n                .map(cik -> Pair.of(cik, cikCusipMapsRepository.find", "first_line_groundtruth": "targetFilings = fullIndexRepository.findByFormType(filingType);", "first_line_prediction": " fullIndices = fullIndexRepository.findByFormType(filingType);", "match": 0}
{"groundtruth": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");", "prediction": " nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");\n            final File[] origNativeLibDirs = (File[]) nativeLibDirField.get(dexPathList);\n\n            final List<File> newNativeLibDirList = new ArrayList<>(origNativeLibDirs.length + 1);\n            newNativeLibDirList.add(folder);\n            for (File origNativeLibDir : origNativeLibDirs) {\n                if (!folder.equals(origNativeLibDir)) {\n                    newNativeLibDirList.add(origNativeLibDir);\n                }\n            }\n            native", "first_line_groundtruth": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");", "first_line_prediction": " nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");", "match": 0}
{"groundtruth": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");", "prediction": " Object newNativeLibraryDirectories = ShareReflectUtil.newInstance(nativeLibraryDirectories.getType());\n            nativeLibraryDirectories.set(dexPathList, newNativeLibraryDirectories);\n            ShareReflectUtil.setField(newNativeLibraryDirectories, \"nativeLibraryDirectories\", origLibDirs.toArray(new File[0]));\n        }\n    }\n\n    private static final class V25 {\n        private static void install(ClassLoader classLoader, File folder)  throws Throwable {\n            final Field pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");\n            final Object dexPathList = pathListField.get(classLoader", "first_line_groundtruth": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");", "first_line_prediction": " Object newNativeLibraryDirectories = ShareReflectUtil.newInstance(nativeLibraryDirectories.getType());", "match": 0}
{"groundtruth": "Field nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");", "prediction": " Method addDexPathElementMethod = ShareReflectUtil.findMethod(dexPathList.getClass(), \"addDexPathElement\", String.class);\n            addDexPathElementMethod.invoke(dexPathList, folder.getPath());\n        }\n    }\n\n    private static final class V23 {\n        private static void install(ClassLoader classLoader, File folder)  throws Throwable {\n            final Field pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");\n            final Object dexPathList = pathListField.get(classLoader);\n\n            final  Method addDexPathElementMethod = ShareReflectUtil.", "first_line_groundtruth": "Field nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");", "first_line_prediction": " Method addDexPathElementMethod = ShareReflectUtil.findMethod(dexPathList.getClass(), \"addDexPathElement\", String.class);", "match": 0}
{"groundtruth": "= ShareReflectUtil.findField(classLoader, \"libPath\");", "prediction": " = ClassLoader.class.getDeclaredField(\"path\");\n            pathField.setAccessible(true);\n            String oldPath = (String) pathField.get(classLoader);\n            String newPath = oldPath + File.pathSeparator + addPath;\n            pathField.set(classLoader, newPath);\n        }\n    }\n\n    private static final class V14 {\n        private static void install(ClassLoader classLoader, File folder) throws Throwable {\n            String addPath = folder.getPath();\n            Method method = ClassLoader.class.getDeclaredMethod(\"addPath\", String.class);\n            method.setAccessible(true);\n            method.", "first_line_groundtruth": "= ShareReflectUtil.findField(classLoader, \"libPath\");", "first_line_prediction": " = ClassLoader.class.getDeclaredField(\"path\");", "match": 0}
{"groundtruth": "= parser.readLong(buffer, baseOffset);", "prediction": " = parser.getInt(baseOffset);\n        val  = parser.getInt(baseOffset + 4);\n\n        buffer.rewind();\n        buffer.putLong(val);\n        buffer.rewind();\n\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.getLong();\n        buffer.", "first_line_groundtruth": "= parser.readLong(buffer, baseOffset);", "first_line_prediction": " = parser.getInt(baseOffset);", "match": 0}
{"groundtruth": "val = parser.readWord(buffer, baseOffset + 0x4);", "prediction": " baseOffset = baseOffset + 4;\n        val = parser.readWord(buffer, baseOffset);\n        baseOffset = baseOffset + 4;\n        size = parser.readWord(buffer, baseOffset);\n        baseOffset = baseOffset + 4;\n    }", "first_line_groundtruth": "val = parser.readWord(buffer, baseOffset + 0x4);", "first_line_prediction": " baseOffset = baseOffset + 4;", "match": 0}
{"groundtruth": "= parser.readWord(buffer, 0x1C);", "prediction": " = parser.readHalf(buffer, 0x12);\n        shoff  = parser.readHalf(buffer, 0x14);\n        flags  = parser.readHalf(buffer, 0x16);\n        ehsize = parser.readHalf(buffer, 0x18);\n        phentsize = parser.readHalf(buffer, 0x1a);\n        phnum = parser.readHalf(buffer, 0x1c);\n        shentsize = parser.readHalf(buffer, 0x1e);\n        shnum = parser.readHalf(", "first_line_groundtruth": "= parser.readWord(buffer, 0x1C);", "first_line_prediction": " = parser.readHalf(buffer, 0x12);", "match": 0}
{"groundtruth": "final Method makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class);", "prediction": " final Method makeElements = ShareReflectUtil.findMethod(dexPathList,\n                     \"makePathElements\", List.class, File.class, List.class);\n            final ArrayList<IOException> suppressedExceptions = new ArrayList<>();\n\n            final Object[] elements = (Object[]) makeElements.invoke(dexPathList, newLibDirs, null, suppressedExceptions);\n\n            final Field nativeLibraryPathElements = ShareReflectUtil.findField(dexPathList, \"nativeLibraryPathElements\");\n            nativeLibraryPathElements.set(dexPathList, elements);\n        }\n    }", "first_line_groundtruth": "final Method makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class);", "first_line_prediction": " final Method makeElements = ShareReflectUtil.findMethod(dexPathList,", "match": 0}
{"groundtruth": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");", "prediction": " pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");\n            final List<String> pathList = (List<String>) pathListField.get(classLoader);\n            final Iterator<String> it = pathList.iterator();\n            while (it.hasNext()) {\n                final String path = it.next();\n                if (path == null || addPath.equals(path)) {\n                    it.remove();\n                }\n            }\n            pathList.add(addPath);\n        }\n    }\n\n    private static final class V14 {\n        private static void install(ClassLoader classLoader, File", "first_line_groundtruth": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");", "first_line_prediction": " pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");", "match": 0}
{"groundtruth": "ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder %s is illegal\", folder);", "prediction": " return;\n        }\n\n        String libName = \"libtinker.so\";\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            libName = \"libtinker.so\";\n        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            libName = \"libtinker.so\";\n        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n            libName = \"libtinker.so\";\n        }", "first_line_groundtruth": "ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder %s is illegal\", folder);", "first_line_prediction": " return;", "match": 0}
{"groundtruth": "parser.readWord(buffer, 0x20);", "prediction": "0;\n        phentsize = parser.readHalf(buffer, 0x20);\n        phnum = parser.readHalf(buffer, 0x22);\n        shentsize = 0;\n        shnum = 0;\n        shstrndx = 0;\n\n        if (type != Elf.ET_EXEC && type != Elf.ET_DYN) {\n            throw new IOException(\"Invalid ELF type: \" + type);\n        }\n\n        if (phentsize != 0x20) {\n            throw new IOException(\"Invalid ELF program header entry size: \" + ph", "first_line_groundtruth": "parser.readWord(buffer, 0x20);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");", "prediction": " pathField = ShareReflectUtil.findField(classLoader, \"libPath\");\n            final String origLibPaths = (String) pathField.get(classLoader);\n            final String[] origLibPathSplit = origLibPaths.split(\":\");\n            final StringBuilder newLibPaths = new StringBuilder(folder.getPath());\n\n            for (String origLibPath : origLibPathSplit) {\n                if (origLibPath == null || folder.getPath().equals(origLibPath)) {\n                    continue;\n                }\n                newLibPaths.append(':').append(origLibPath);\n            }\n            pathField.set(classLoader", "first_line_groundtruth": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");", "first_line_prediction": " pathField = ShareReflectUtil.findField(classLoader, \"libPath\");", "match": 0}
{"groundtruth": "makeElements = ShareReflectUtil.findMethod(dexPathList,\n                    \"makePathElements\", List.class, File.class, List.class);", "prediction": " addNativeLibraryDirectoryMethod = ShareReflectUtil.findMethod(dexPathList, \"addNativeLibraryDirectory\", File.class);\n            addNativeLibraryDirectoryMethod.invoke(dexPathList, newLibDirs.toArray(new File[0]));\n        }\n    }\n\n    private static final class V25 {\n        private static void install(ClassLoader classLoader, File folder)  throws Throwable {\n            final Field pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");\n            final Object dexPathList = pathListField.get(classLoader);\n\n            final Field nativeLibraryDirectories = ShareReflectUtil", "first_line_groundtruth": "makeElements = ShareReflectUtil.findMethod(dexPathList,", "first_line_prediction": " addNativeLibraryDirectoryMethod = ShareReflectUtil.findMethod(dexPathList, \"addNativeLibraryDirectory\", File.class);", "match": 0}
{"groundtruth": "= parser.readHalf(buffer, 0x2A);", "prediction": " = parser.readHalf(buffer, 0x24);\n        phnum = parser.readHalf(buffer, 0x26);\n        shentsize = parser.readHalf(buffer, 0x28);\n        shnum = parser.readHalf(buffer, 0x2A);\n        shstrndx = parser.readHalf(buffer, 0x2C);\n\n        if (type != Elf.ET_EXEC && type != Elf.ET_DYN) {\n            throw new IOException(\"Invalid type: \" + type);\n        }\n\n        if (phentsize != ", "first_line_groundtruth": "= parser.readHalf(buffer, 0x2A);", "first_line_prediction": " = parser.readHalf(buffer, 0x24);", "match": 0}
{"groundtruth": "= parser.readHalf(buffer, 0x2E);", "prediction": " = parser.readHalf(buffer, 0x30);\n        shnum = parser.readHalf(buffer, 0x32);\n        shstrndx = parser.readHalf(buffer, 0x34);\n\n        if (type != Elf.ET_EXEC && type != Elf.ET_DYN) {\n            throw new IOException(\"Invalid type: \" + type);\n        }\n\n        if (phentsize != 0x30) {\n            throw new IOException(\"Invalid phentsize: \" + phentsize);\n        }\n\n        if (shentsize != 0x2", "first_line_groundtruth": "= parser.readHalf(buffer, 0x2E);", "first_line_prediction": " = parser.readHalf(buffer, 0x30);", "match": 0}
{"groundtruth": "parser.readLong(buffer, 0x20);", "prediction": "0;\n        shoff = 0;\n        phentsize = 0;\n        phnum = 0;\n        shentsize = 0;\n        shnum = 0;\n        shstrndx = 0;\n\n        if (type == Elf.ET_REL) {\n            phentsize = 0x18;\n            phnum = 1;\n            shentsize = 0x28;\n            shnum = 1;\n            shstrndx = 0;\n        } else if (type == Elf.ET_EXEC) {\n            phentsize = 0x2", "first_line_groundtruth": "parser.readLong(buffer, 0x20);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "parser.readLong(buffer, baseOffset + 0x28);", "prediction": " parser.readLong(buffer, baseOffset + 0x18);\n        flags = parser.readWord(buffer, baseOffset + 0x20);\n        align = parser.readWord(buffer, baseOffset + 0x24);\n        entry = parser.readLong(buffer, baseOffset + 0x28);\n    }", "first_line_groundtruth": "parser.readLong(buffer, baseOffset + 0x28);", "first_line_prediction": " parser.readLong(buffer, baseOffset + 0x18);", "match": 0}
{"groundtruth": "= parser.readHalf(buffer, 0x36);", "prediction": " = parser.readHalf(buffer, 0x30);\n        phnum = parser.readHalf(buffer, 0x32);\n        shentsize = parser.readHalf(buffer, 0x34);\n        shnum = parser.readHalf(buffer, 0x36);\n        shstrndx = parser.readHalf(buffer, 0x38);\n\n        if (type != Elf.ET_DYN) {\n            throw new IOException(\"Invalid ELF type: \" + type);\n        }\n\n        if (phentsize != 0x20) {", "first_line_groundtruth": "= parser.readHalf(buffer, 0x36);", "first_line_prediction": " = parser.readHalf(buffer, 0x30);", "match": 0}
{"groundtruth": "parser.readWord(buffer, baseOffset + 0x8);", "prediction": " parser.readWord(buffer, baseOffset + 0x8);\n        paddr =  parser.readWord(buffer, baseOffset + 0xc);\n        filesz = parser.readWord(buffer, baseOffset + 0x10);\n        memsz = parser.readWord(buffer, baseOffset + 0x14);\n        flags = parser.readWord(buffer, baseOffset + 0x18);\n        align = parser.readWord(buffer, baseOffset + 0x1c);\n    }", "first_line_groundtruth": "parser.readWord(buffer, baseOffset + 0x8);", "first_line_prediction": " parser.readWord(buffer, baseOffset + 0x8);", "match": 0}
{"groundtruth": "offset = parser.readLong(buffer, baseOffset + 0x8);", "prediction": "\n\n        if (type == Elf.ProgramHeader.PT_LOAD) {\n            offset = parser.readWord(buffer, baseOffset + 4);\n            vaddr = parser.readWord(buffer, baseOffset + 8);\n            paddr = parser.readWord(buffer, baseOffset + 12);\n            filesz = parser.readWord(buffer, baseOffset + 16);\n            memsz = parser.readWord(buffer, baseOffset + 20);\n            flags = parser.readWord(buffer, baseOffset + 24);\n            align = parser.readWord(", "first_line_groundtruth": "offset = parser.readLong(buffer, baseOffset + 0x8);", "first_line_prediction": "", "match": 0}
{"groundtruth": "= parser.readWord(buffer, baseOffset + 0x14);", "prediction": " = parser.readWord(buffer, baseOffset + 0xc);\n        flags  = parser.readWord(buffer, baseOffset + 0x10);\n        align  = parser.readWord(buffer, baseOffset + 0x14);\n    }", "first_line_groundtruth": "= parser.readWord(buffer, baseOffset + 0x14);", "first_line_prediction": " = parser.readWord(buffer, baseOffset + 0xc);", "match": 0}
{"groundtruth": "offset = parser.readWord(buffer, baseOffset + 0x4);", "prediction": "\n\n        if (type == Elf.ProgramHeader.PT_LOAD) {\n            offset = parser.readWord(buffer, baseOffset + 4);\n            vaddr = parser.readWord(buffer, baseOffset + 8);\n            paddr = parser.readWord(buffer, baseOffset + 12);\n            filesz = parser.readWord(buffer, baseOffset + 16);\n            memsz = parser.readWord(buffer, baseOffset + 20);\n            flags = parser.readWord(buffer, baseOffset + 24);\n            align = parser.readWord(", "first_line_groundtruth": "offset = parser.readWord(buffer, baseOffset + 0x4);", "first_line_prediction": "", "match": 0}
{"groundtruth": "= StartupMode.fromString(properties.get(\"scan.startup.mode\"));", "prediction": " = StartupMode.valueOf(properties.get(\"startupMode\"));\n    this.transactionalIdPrefix = properties.get(\"transactionalIdPrefix\");\n    this.deliveryGuarantee = properties.get(\"deliveryGuarantee\");\n    this.properties = properties;\n  }\n\n  public String getId() {\n    return id;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getBootstrapServers() {\n    return bootstrapServers;\n  }\n\n  public String getTopic() {\n    return topic;\n  }\n\n  public StartupMode getStartupMode() {\n    return startupMode;\n  }\n\n  public String get", "first_line_groundtruth": "= StartupMode.fromString(properties.get(\"scan.startup.mode\"));", "first_line_prediction": " = StartupMode.valueOf(properties.get(\"startupMode\"));", "match": 0}
{"groundtruth": "(streamConfig.transactionalIdPrefix())\n            .setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();", "prediction": "(streamConfig.transactionalIdPrefix())\n             .setTransactionalIdSuffix(streamConfig.transactionalIdSuffix())\n             .setTransactionalIdPrefix(streamConfig.transactionalIdPrefix())\n             .setTransactionalIdSuffix(streamConfig.transactionalIdSuffix())\n             .setTransactionalIdPrefix(streamConfig.transactionalIdPrefix())\n             .setTransactionalIdSuffix(streamConfig.transactionalIdSuffix())\n             .setTransactionalIdPrefix(streamConfig.transactionalIdPrefix())\n             .setTransactionalIdSuffix(streamConfig.transactionalIdSuffix())\n             .setTransactionalIdPrefix(streamConfig.transactionalIdPrefix", "first_line_groundtruth": "(streamConfig.transactionalIdPrefix())", "first_line_prediction": "(streamConfig.transactionalIdPrefix())", "match": 1}
{"groundtruth": ".subscribe(Collections.singleton(testEnvironment.topicFor(name)));", "prediction": ".subscribe(Collections.singletonList(name));\n    return new DecodableStreamImpl<>(name, consumer);\n  }\n\n  /**\n   * Returns a stream for the given name, with the given {@link Consumer} for each record.\n   *\n   * @param name The name of the stream.\n   * @param consumer The consumer to use for each record.\n   * @return A stream for the given name.\n   */\n  public DecodableStream<String> stream(String name, Consumer<ConsumerRecord<String, String>> consumer) {\n    KafkaConsumer<String, String> consumer1 =\n        new KafkaConsumer<String,", "first_line_groundtruth": ".subscribe(Collections.singleton(testEnvironment.topicFor(name)));", "first_line_prediction": ".subscribe(Collections.singletonList(name));", "match": 0}
{"groundtruth": "setTopics(streamConfig.topic())\n            .setProperties(toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);", "prediction": "setGroupId(streamConfig.groupId())\n             .setStartingOffsets(OffsetsInitializer.earliest())\n             .setProperties(new Properties())\n             .setDeserializationSchema(deserializationSchema);\n\n    return new DecodableStreamSourceImpl<>(\n        builder.build(), startupMode, streamConfig.getTopic());\n  }", "first_line_groundtruth": "setTopics(streamConfig.topic())", "first_line_prediction": "setGroupId(streamConfig.groupId())", "match": 0}
{"groundtruth": "((DecodableSourceSplitImpl) obj).getDelegate());", "prediction": "obj.getSplit());\n  }\n\n  @Override\n  public DecodableSourceSplit deserialize(int version, byte[] serialized) throws IOException {\n    return new DecodableSourceSplit(delegate.deserialize(version, serialized));\n  }", "first_line_groundtruth": "((DecodableSourceSplitImpl) obj).getDelegate());", "first_line_prediction": "obj.getSplit());", "match": 0}
{"groundtruth": "producerProperties(testEnvironment.bootstrapServers()));", "prediction": "\n            testEnvironment.getKafkaProducerProperties());\n    this.streams = new HashMap<>();\n    this.executorService = Executors.newCachedThreadPool();\n  }\n\n  /**\n   * Creates a new testing context, using the given {@link TestEnvironment} and {@link\n   * Properties}.\n   */\n  public PipelineTestContext(TestEnvironment testEnvironment, Properties properties) {\n    EnvironmentAccess.setEnvironment(testEnvironment);\n    this.testEnvironment = testEnvironment;\n    this.producer =\n        new KafkaProducer<String, String>(\n            testEnvironment.getKafkaProducerProperties());\n    this.streams = new HashMap<>();\n    this.executorService", "first_line_groundtruth": "producerProperties(testEnvironment.bootstrapServers()));", "first_line_prediction": "", "match": 0}
{"groundtruth": ".setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();", "prediction": " .setTransactionalIdSuffix(streamConfig.transactionalIdSuffix())\n             .setTransactionalIdPrefix(streamConfig.transactionalIdPrefix())\n             .setTransactionalIdSuffix(streamConfig.transactionalIdSuffix())\n             .setTransactionalIdPrefix(streamConfig.transactionalIdPrefix())\n             .setTransactionalIdSuffix(streamConfig.transactionalIdSuffix())\n             .setTransactionalIdPrefix(streamConfig.transactionalIdPrefix())\n             .setTransactionalIdSuffix(streamConfig.transactionalIdSuffix())\n             .setTransactionalIdPrefix(streamConfig.transactionalIdPrefix())\n             .setTransactionalIdSuffix(streamConfig", "first_line_groundtruth": ".setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))", "first_line_prediction": " .setTransactionalIdSuffix(streamConfig.transactionalIdSuffix())", "match": 0}
{"groundtruth": "(testEnvironment.topicFor(streamName), streamRecord.value()));", "prediction": "((testEnvironment.topicFor(streamName)), streamRecord.key(), streamRecord.value()));\n      try {\n        sent.get(10, TimeUnit.SECONDS);\n      } catch (InterruptedException | ExecutionException | TimeoutException e) {\n        throw new RuntimeException(\"Couldn't send record to Kafka\", e);\n      }\n    }\n\n    @Override\n    public List<StreamRecord<String>> read(Duration timeout) {\n      try {\n        ConsumerRecords<String, String> records = consumer.poll(timeout);\n        consumed.addAll(records.records(testEnvironment.topicFor(streamName)));\n        return records.records(", "first_line_groundtruth": "(testEnvironment.topicFor(streamName), streamRecord.value()));", "first_line_prediction": "((testEnvironment.topicFor(streamName)), streamRecord.key(), streamRecord.value()));", "match": 0}
{"groundtruth": "toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);", "prediction": "\n                  new Properties()\n                      .putAll(streamConfig.kafkaProperties())\n                      .putAll(\n                          streamConfig.kafkaProperties().entrySet().stream()\n                              .filter(e -> e.getKey().startsWith(\"group.\"))\n                              .collect(Map.Entry::getKey, Map.Entry::getValue)))\n             .setGroupId(streamConfig.groupId())\n             .setStartingOffsets(OffsetsInitializer.earliest())\n             .setStartFromEarliest(true)\n             .setStartFromLatest(false)\n             .setStartFromGroupOffsets(false)\n             .setStartFromGroupOffsets(false)\n             .setStartFrom", "first_line_groundtruth": "toProperties(streamConfig.kafkaProperties()))", "first_line_prediction": "", "match": 0}
{"groundtruth": "if (streamConfig.startupMode() != null) {", "prediction": " if (startupMode == StartupMode.EARLIEST) {\n       builder.setStartFromEarliest();\n     } else if (startupMode == StartupMode.LATEST) {\n       builder.setStartFromLatest();\n     } else if (startupMode == StartupMode.TIMESTAMP) {\n       builder.setStartFromTimestamp(streamConfig.timestamp());\n     } else if (startupMode == StartupMode.TIMESTAMP_EARLIEST) {\n       builder.setStartFromTimestampAndEarliest(streamConfig.timestamp());\n     } else if (startupMode == StartupMode.TIMESTAMP_LATEST) {\n       builder.", "first_line_groundtruth": "if (streamConfig.startupMode() != null) {", "first_line_prediction": " if (startupMode == StartupMode.EARLIEST) {", "match": 0}
{"groundtruth": "tbApikeyDAO.useOnece(key);", "prediction": " // \u8c03\u7528\u63a5\u53e3\n        genImage(message, key, send);\n    }", "first_line_groundtruth": "tbApikeyDAO.useOnece(key);", "first_line_prediction": " // \u8c03\u7528\u63a5\u53e3", "match": 0}
{"groundtruth": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");", "prediction": " Object cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), actionInfo.getParameter(), new ResultSetExtractor<Long>() {\n                                 @Override\n                                 public Long extractData(ResultSet rs) throws SQLException, DataAccessException {\n                                     while (rs.next()) {\n                                         return rs.getLong(\"PG_COUNT\");\n                                     }\n                                     return 0L;\n                                 }\n                             });\n                            localPage.setTotal(cnt);\n                        }\n                    }\n                } else {\n                    if (actionInfo.isHasParameterType()) {\n                        Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter(),", "first_line_groundtruth": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");", "first_line_prediction": " Object cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), actionInfo.getParameter(), new ResultSetExtractor<Long>() {", "match": 0}
{"groundtruth": "() != null && methodInfo.getArgs().length > 0) {", "prediction": "() != null && methodInfo.getArgs().length > 0) {\n                        methodInfo.setArgs(interceptor.afterPrepare(methodInfo, jdbcTemplate, methodInfo.getArgs()));\n                    }\n                    //\u63d2\u4ef6\u5141\u8bb8\u4fee\u6539\u539f\u59cbSQL\u4ee5\u53ca\u5165\u53c2\n                    if (methodInfo.getActionInfo() != null) {\n                        methodInfo.getActionInfo().setBatchSql(interceptor.afterPrepare(methodInfo, jdbcTemplate, methodInfo.getActionInfo().getBatchSql()));\n                        methodInfo.getActionInfo().setBatchParameter(interceptor.afterPrepare(methodInfo, jdbcTemplate, methodInfo.getActionInfo().getBatchParameter", "first_line_groundtruth": "() != null && methodInfo.getArgs().length > 0) {", "first_line_prediction": "() != null && methodInfo.getArgs().length > 0) {", "match": 1}
{"groundtruth": "), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");", "prediction": "), methodInfo.getArgs()[actionInfo.getParameterIndex()]).get(\"PG_COUNT\");\n                            localPage.setTotal(Long.parseLong(cnt.toString()));\n                        } else {\n                            Object cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], Long.class);\n                            localPage.setTotal(Long.parseLong(cnt.toString()));\n                        }\n                    }\n                } else {\n                    if (actionInfo.isHasParameterType()) {\n                        Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql)).get", "first_line_groundtruth": "), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");", "first_line_prediction": "), methodInfo.getArgs()[actionInfo.getParameterIndex()]).get(\"PG_COUNT\");", "match": 0}
{"groundtruth": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");", "prediction": " cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), actionInfo.getParameter(), new ResultSetExtractor<Long>() {\n                                @Override\n                                public Long extractData(ResultSet rs) throws SQLException, DataAccessException {\n                                    while (rs.next()) {\n                                        return rs.getLong(\"PG_COUNT\");\n                                    }\n                                    return 0L;\n                                }\n                            });\n                            localPage.setTotal(cnt);\n                        }\n                    }\n                } else {\n                    if (actionInfo.isHasParameterType()) {\n                        Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter(), action", "first_line_groundtruth": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");", "first_line_prediction": " cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), actionInfo.getParameter(), new ResultSetExtractor<Long>() {", "match": 0}
{"groundtruth": ".debug(\"finish sql==>{", "prediction": ".debug(\"after sql==>{}\", this.toStr(methodInfo.getActionInfo().getBatchSql()));\n        log.debug(\"after parameters==>{}\", this.toStr(methodInfo.getActionInfo().getBatchParameter()));\n\n        //\u6267\u884c\u539f\u65b9\u6cd5\n        Object result = methodInvocation.proceed();\n\n        //\u903b\u8f91\u5904\u7406\uff08\u6838\u5fc3\u65b9\u6cd5\uff1a\u4e3b\u8981\u5904\u7406SQL\u548cSQL\u53c2\u6570\uff09\n        if (this.interceptors != null && this.interceptors.size() > 0) {\n            for (IInterceptor interceptor : this.interceptors) {\n                if (interceptor.supportMethod(methodInfo)) {\n                    interceptor.afterPrepare(", "first_line_groundtruth": ".debug(\"finish sql==>{", "first_line_prediction": ".debug(\"after sql==>{}\", this.toStr(methodInfo.getActionInfo().getBatchSql()));", "match": 0}
{"groundtruth": "pages = page.getPages();", "prediction": "size = page.getSize();\n            this.startRow = page.getStartRow();\n            this.endRow = page.getEndRow();\n            this.pages = page.getPages();\n\n            this.prePage = page.getPrePage();\n            this.nextPage = page.getNextPage();\n\n            this.isFirstPage = page.isIsFirstPage();\n            this.isLastPage = page.isIsLastPage();\n            this.hasPreviousPage = page.isHasPreviousPage();\n            this.hasNextPage = page.isHasNextPage();\n            this.navigatePages = page.getNavigatePages();", "first_line_groundtruth": "pages = page.getPages();", "first_line_prediction": "size = page.getSize();", "match": 0}
{"groundtruth": "] = this.actionInfo.getParameter();", "prediction": "][0] = this.actionInfo.getBatchParameter();\n                    }\n                } else {\n                    this.args[this.actionInfo.getParameterIndex()] = this.actionInfo.getBatchParameter();\n                }\n            }\n        }\n    }\n\n    public void resolveParameter(int i, Object[] parameter) {\n        if (this.actionInfo != null) {\n            this.actionInfo.getBatchParameter().add(parameter);\n\n            if (this.actionInfo.isHasParameter()) {\n                if (!this.actionInfo.isParameterIsPss()) {\n                    if (this.actionInfo.isParameterIs", "first_line_groundtruth": "] = this.actionInfo.getParameter();", "first_line_prediction": "][0] = this.actionInfo.getBatchParameter();", "match": 0}
{"groundtruth": "MethodActionInfo actionInfo = methodInfo.getActionInfo();", "prediction": " methodInfo.setPage(localPage);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void afterPrepare(final MethodInvocationInfo methodInfo, JdbcTemplate jdbcTemplate) {\n        Page<Object> localPage = PageHelper.getLocalPage();\n        if (localPage == null) {\n            return;\n        }\n\n        try {\n            methodInfo.setPage(localPage);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void beforeExecute(final MethodInvocationInfo methodInfo, JdbcTemplate", "first_line_groundtruth": "MethodActionInfo actionInfo = methodInfo.getActionInfo();", "first_line_prediction": " methodInfo.setPage(localPage);", "match": 0}
{"groundtruth": ".debug(\"method==>name:{", "prediction": ".info(\"method info: {}\", methodInfo);\n\n        for (IInterceptor interceptor : interceptors) {\n            if (interceptor.support(methodInfo)) {\n                Object result = interceptor.intercept(methodInfo, jdbcTemplate);\n                if (result != null) {\n                    return result;\n                }\n            }\n        }\n\n        return methodInvocation.proceed();\n    }", "first_line_groundtruth": ".debug(\"method==>name:{", "first_line_prediction": ".info(\"method info: {}\", methodInfo);", "match": 0}
{"groundtruth": "queryForMap(dialect.getCountSql(sql), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");", "prediction": "queryForObject(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], Long.class);\n                            localPage.setTotal(Long.parseLong(cnt.toString()));\n                        } else {\n                            Object cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), Long.class);\n                            localPage.setTotal(Long.parseLong(cnt.toString()));\n                        }\n                    }\n                } else {\n                    if (actionInfo.isHasParameterType()) {\n                        Object cnt = jdbcTemplate.queryForObject(dialect.getCountSql(sql), methodInfo.getArgs()[", "first_line_groundtruth": "queryForMap(dialect.getCountSql(sql), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");", "first_line_prediction": "queryForObject(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], Long.class);", "match": 0}
{"groundtruth": "String sql = actionInfo.getSql();", "prediction": " // \u5904\u7406\u5206\u9875\n            if (dialect.supportPagination()) {\n                // \u5904\u7406\u5206\u9875\n                dialect.processPagination(actionInfo, localPage);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void afterPrepare(final MethodInvocationInfo methodInfo, JdbcTemplate jdbcTemplate) {\n        Page<Object> localPage = PageHelper.getLocalPage();\n        if (localPage == null) {\n            return;\n        }\n\n        try {\n            MethodActionInfo actionInfo = methodInfo.getActionInfo();\n            Dialect dialect = PageHelper.getDialect(", "first_line_groundtruth": "String sql = actionInfo.getSql();", "first_line_prediction": " // \u5904\u7406\u5206\u9875", "match": 0}
{"groundtruth": "cpuPattern.matcher(location.fileContent());", "prediction": " cpuPattern.matcher(location.getLines()); cpuMatcher.find(); ) {\n\t\t\tresult.add(new Match(cpuMatcher.group(\"container\"), cpuMatcher.group(\"cluster\"), cpuMatcher.group(\"cpu\")));\n\t\t}", "first_line_groundtruth": "cpuPattern.matcher(location.fileContent());", "first_line_prediction": " cpuPattern.matcher(location.getLines()); cpuMatcher.find(); ) {", "match": 0}
{"groundtruth": "() && methodInfo.getActionInfo().isReturnIsList()) {", "prediction": "()) {\n                sql = dialect.getCountSql(sql);\n            }\n\n            //\u67e5\u8be2\u5206\u9875\n            if (localPage.isPage()) {\n                sql = dialect.getPageSql(sql, localPage.getPageNum(), localPage.getPageSize());\n            }\n\n            //\u67e5\u8be2\u6392\u5e8f\n            if (localPage.isSort()) {\n                sql = dialect.getSortSql(sql, localPage.getSort());\n            }\n\n            //\u67e5\u8be2\u6761\u4ef6\n            if (localPage.isCondition()) {\n                sql = dialect.getConditionSql(sql, localPage.getCondition());\n            }\n\n            actionInfo.setSql(sql);\n       ", "first_line_groundtruth": "() && methodInfo.getActionInfo().isReturnIsList()) {", "first_line_prediction": "()) {", "match": 0}
{"groundtruth": "sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map>() {", "prediction": "sql), new PreparedStatementSetter() {\n                            @Override\n                            public void setValues(PreparedStatement ps) throws SQLException {\n                                actionInfo.getParameter().setPs(ps);\n                                actionInfo.getParameter().setPsValue(ps);\n                                actionInfo.getParameter().setPsValue(ps);\n                            }\n                        }, new ResultSetExtractor<Object>() {\n                            @Override\n                            public Object extractData(ResultSet rs) throws SQLException, DataAccessException {\n                                return rs.next() ? rs.getObject(1) : null;\n                            }\n                        });\n                        localPage.setCount(Long.parseLong(cnt.toString()));\n                    } else {\n                        Object", "first_line_groundtruth": "sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map>() {", "first_line_prediction": "sql), new PreparedStatementSetter() {", "match": 0}
{"groundtruth": "(methodInfo.getActionInfo().getBatchParameter()));", "prediction": "(methodInfo.getActionInfo().getBatchParameters()));\n\n        for (IInterceptor interceptor : interceptors) {\n            if (interceptor.support(methodInfo)) {\n                log.debug(\"interceptor==>name:{},actionType:{}\", methodInfo.getName(), methodInfo.getActionInfo().getActionType());\n                log.debug(\"interceptor sql==>{}\", this.toStr(methodInfo.getActionInfo().getBatchSql()));\n                log.debug(\"interceptor parameters==>{}\", this.toStr(methodInfo.getActionInfo().getBatchParameters()));\n                methodInfo.setActionInfo(interceptor.intercept(methodInfo));\n                log.debug(\"", "first_line_groundtruth": "(methodInfo.getActionInfo().getBatchParameter()));", "first_line_prediction": "(methodInfo.getActionInfo().getBatchParameters()));", "match": 0}
{"groundtruth": "page.getStartRow() + 1;", "prediction": "1 + page.getStartRow();\n                this.endRow = this.startRow + page.size() - 1;\n            }\n            this.prePage = page.getPrePage();\n            this.nextPage = page.getNextPage();\n            this.isFirstPage = page.isIsFirstPage();\n            this.isLastPage = page.isIsLastPage();\n            this.hasPreviousPage = page.isHasPreviousPage();\n            this.hasNextPage = page.isHasNextPage();\n            this.navigatePages = navigatePages;\n            this.navigatepageNums = page.getNavigatepageNums", "first_line_groundtruth": "page.getStartRow() + 1;", "first_line_prediction": "1 + page.getStartRow();", "match": 0}
{"groundtruth": "Repository repository : gitLabRepositoryApi.findRepositories()) {", "prediction": "Repository repository : gitLabRepositoryApi.getRepositories()) {\n\t\t\tSystem.out.println(\"Applying repository \" + repository.getName());\n\t\t}\n\t\treturn gitLabRepositoryApi.getRepositories().stream()\n\t\t\t\t.map(Repository::getName)\n\t\t\t\t.toList();", "first_line_groundtruth": "Repository repository : gitLabRepositoryApi.findRepositories()) {", "first_line_prediction": "Repository repository : gitLabRepositoryApi.getRepositories()) {", "match": 0}
{"groundtruth": "if (methodInfo.getArgs() != null && methodInfo.getArgs().length > 0) {", "prediction": " methodInfo.setActionInfo(interceptor.afterPrepare(methodInfo, jdbcTemplate));\n                    log.debug(\"afterPrepare==>sql:{},parameters:{}\", methodInfo.getActionInfo().getBatchSql(), methodInfo.getActionInfo().getBatchParameter());\n                }\n            }\n        }\n\n        //\u6267\u884c\u539f\u751f\u65b9\u6cd5\n        Object result = method.invoke(methodInvocation.getThis(), args);\n\n        //\u903b\u8f91\u5904\u7406\uff08\u6838\u5fc3\u65b9\u6cd5\uff1a\u4e3b\u8981\u5904\u7406SQL\u548cSQL\u53c2\u6570\uff09\n        if (this.interceptors != null && this.interceptors.size() > 0) {\n            for (IInterceptor interceptor : this.interceptors)", "first_line_groundtruth": "if (methodInfo.getArgs() != null && methodInfo.getArgs().length > 0) {", "first_line_prediction": " methodInfo.setActionInfo(interceptor.afterPrepare(methodInfo, jdbcTemplate));", "match": 0}
{"groundtruth": "toStr(methodInfo.getActionInfo().getBatchSql()));", "prediction": "getOriginSql(methodInfo));\n\n        Object result = null;\n        for (IInterceptor interceptor : interceptors) {\n            result = interceptor.intercept(methodInfo, jdbcTemplate);\n            if (result != null) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    private String getOriginSql(MethodInvocationInfo methodInfo) {\n        StringBuilder sql = new StringBuilder();\n        sql.append(methodInfo.getActionInfo().getSql());\n        sql.append(\" \");\n        sql.append(Arrays.toString(methodInfo.getArgs()));\n        return sql.toString();\n    }", "first_line_groundtruth": "toStr(methodInfo.getActionInfo().getBatchSql()));", "first_line_prediction": "getOriginSql(methodInfo));", "match": 0}
{"groundtruth": "methodInfo.resolveSql(sql);", "prediction": " //\u8bbe\u7f6e\u5206\u9875\u53c2\u6570\n            methodInfo.setSql(sql);\n            methodInfo.setArgs(localPage.getArgs());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void afterPrepare(final MethodInvocationInfo methodInfo, JdbcTemplate jdbcTemplate) {\n        Page<Object> localPage = PageHelper.getLocalPage();\n        if (localPage == null) {\n            return;\n        }\n\n        try {\n            MethodActionInfo actionInfo = methodInfo.getActionInfo();\n            Dialect dialect = PageHelper.getDialect(jdbcTemplate);\n            String sql", "first_line_groundtruth": "methodInfo.resolveSql(sql);", "first_line_prediction": " //\u8bbe\u7f6e\u5206\u9875\u53c2\u6570", "match": 0}
{"groundtruth": "equalsTo.setRightExpression(this.tenantLineHandler.getTenantId());", "prediction": " ExpressionList expressionList = new ExpressionList();\n             expressionList.getExpressions().add(equalsTo);\n             ItemsList itemsList = new ItemsList();\n             itemsList.setItems(duplicateUpdateColumns);\n             MultiExpressionList multiExpressionList = new MultiExpressionList();\n             multiExpressionList.getExpressions().add(expressionList);\n             multiExpressionList.getExpressions().add(itemsList);\n             insert.setDuplicateUpdateExpressionList(multiExpressionList);\n        }\n    }\n\n    @Override\n    protected void processUpdate(Update update, int index, String sql, Object obj) {\n        if (this.tenantLineHandler", "first_line_groundtruth": "equalsTo.setRightExpression(this.tenantLineHandler.getTenantId());", "first_line_prediction": " ExpressionList expressionList = new ExpressionList();", "match": 0}
{"groundtruth": "new EqualsTo(this.getAliasColumn(table), this.tenantLineHandler.getTenantId());", "prediction": " this.andExpression(table, where, whereSegment);\n    }\n\n    /**\n     * \u6784\u5efa", "first_line_groundtruth": "new EqualsTo(this.getAliasColumn(table), this.tenantLineHandler.getTenantId());", "first_line_prediction": " this.andExpression(table, where, whereSegment);", "match": 0}
{"groundtruth": "(methodInfo.getActionInfo().isReturnIsList()) {", "prediction": " (methodInfo.getActionInfo().isReturnIsList()) {\n                Collection<Object> list = (Collection<Object>) result;\n                if (list != null && !list.isEmpty()) {\n                    localPage.setList(list);\n                }\n            } else {\n                localPage.setObject(result);\n            }\n        } catch (Exception e) {\n            PageHelper.clearPage();\n            throw e;\n        }\n        return result;\n    }", "first_line_groundtruth": "(methodInfo.getActionInfo().isReturnIsList()) {", "first_line_prediction": " (methodInfo.getActionInfo().isReturnIsList()) {", "match": 0}
{"groundtruth": "(new SelectExpressionItem(new Column(this.tenantLineHandler.getTenantIdColumn())));", "prediction": "(new SelectExpressionItem(new StringValue(StringPool.ASTERISK)));\n    }\n\n    /**\n     * \u5904\u7406 select \u8bed\u53e5\n     *\n     * @param selectBody SelectBody\n     * @param whereSegment where \u6761\u4ef6\n     */\n    protected void processSelectBody(SelectBody selectBody, String whereSegment) {\n        if (selectBody instanceof PlainSelect) {\n            this.processPlainSelect((PlainSelect) selectBody, whereSegment);\n        } else if (selectBody instanceof WithItem) {\n            this.processWithItem((WithItem) selectBody, whereSegment);\n        }\n    }\n\n    /**\n     *", "first_line_groundtruth": "(new SelectExpressionItem(new Column(this.tenantLineHandler.getTenantIdColumn())));", "first_line_prediction": "(new SelectExpressionItem(new StringValue(StringPool.ASTERISK)));", "match": 0}
{"groundtruth": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));", "prediction": "prefix).append(\"MapType(\");\n\t\tkeyType.buildFormattedString(prefix, builder);\n\t\tbuilder.append(\", \");\n\t\tvalueType.buildFormattedString(prefix, builder);\n\t\tbuilder.append(\", \");\n\t\tbuilder.append(valueContainsNull);\n\t\tbuilder.append(\")\");\n\t\tbuilder.append(\"\\n\");\n\t\tkeyType.buildFormattedString(nextPrefix, builder);\n\t\tvalueType.buildFormattedString(nextPrefix, builder);", "first_line_groundtruth": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));", "first_line_prediction": "prefix).append(\"MapType(\");", "match": 0}
{"groundtruth": "DataType.buildFormattedString(elementType, nextPrefix, builder);", "prediction": "\telementType.buildFormattedString(nextPrefix, builder);", "first_line_groundtruth": "DataType.buildFormattedString(elementType, nextPrefix, builder);", "first_line_prediction": "\telementType.buildFormattedString(nextPrefix, builder);", "match": 0}
{"groundtruth": "DataType.buildFormattedString(dataType, nextPrefix, builder);", "prediction": "\tdataType.buildFormattedString(nextPrefix, builder);", "first_line_groundtruth": "DataType.buildFormattedString(dataType, nextPrefix, builder);", "first_line_prediction": "\tdataType.buildFormattedString(nextPrefix, builder);", "match": 0}
{"groundtruth": "prefix, valueType.getTypeName(),\n\t\t\t\tvalueContainsNull));", "prediction": " prefix, valueType.getTypeName(), valueContainsNull));\n\t\tDataType.buildFormattedString(valueType, nextPrefix, builder);", "first_line_groundtruth": "prefix, valueType.getTypeName(),", "first_line_prediction": " prefix, valueType.getTypeName(), valueContainsNull));", "match": 0}
{"groundtruth": ".format(\"%s-- element: %s (containsNull = %b)\\n\", prefix, elementType.getTypeName(),\n\t\t\t\tcontainsNull));", "prediction": ".format(\"%sArrayType(\", prefix));\n\t\telementType.buildFormattedString(nextPrefix, builder);\n\t\tbuilder.append(String.format(\"%s)\", containsNull ? \"true\" : \"false\"));", "first_line_groundtruth": ".format(\"%s-- element: %s (containsNull = %b)\\n\", prefix, elementType.getTypeName(),", "first_line_prediction": ".format(\"%sArrayType(\", prefix));", "match": 0}
{"groundtruth": "dataType.getTypeName(), nullable, metadata.toString()));", "prediction": "\tdataType.simpleString(), nullable, metadata));\n\t\tdataType.buildFormattedString(nextPrefix, builder);", "first_line_groundtruth": "dataType.getTypeName(), nullable, metadata.toString()));", "first_line_prediction": "\tdataType.simpleString(), nullable, metadata));", "match": 0}
{"groundtruth": "DataType.buildFormattedString(keyType, nextPrefix, builder);", "prediction": "\tkeyType.buildFormattedString(nextPrefix, builder);\n\t\tbuilder.append(String.format(\"%s-- value: %s\\n\", prefix, valueType.getTypeName()));\n\t\t\tvalueType.buildFormattedString(nextPrefix, builder);", "first_line_groundtruth": "DataType.buildFormattedString(keyType, nextPrefix, builder);", "first_line_prediction": "\tkeyType.buildFormattedString(nextPrefix, builder);", "match": 0}
{"groundtruth": "(!dbHero.getId().equals(heroToUpdate.getId())) {", "prediction": " (dbHero == null) {\n            throw new NotFoundException();\n        }\n        heroToUpdate.setId(dbHero.getId());\n        return this.heroRepository.save(heroToUpdate);\n    }\n\n    public void delete(Long id) {\n        Hero dbHero = this.findById(id);\n        if  (dbHero == null) {\n            throw new NotFoundException();\n        }\n        this.heroRepository.delete(dbHero);\n    }", "first_line_groundtruth": "(!dbHero.getId().equals(heroToUpdate.getId())) {", "first_line_prediction": " (dbHero == null) {", "match": 0}
{"groundtruth": "dbHero.getXp() + 2);", "prediction": "dbHero.getXp() + 1);\n        this.heroRepository.save(dbHero);\n    }", "first_line_groundtruth": "dbHero.getXp() + 2);", "first_line_prediction": "dbHero.getXp() + 1);", "match": 0}
{"groundtruth": ").equals(heroToUpdate.getId())) {", "prediction": " ).equals(id)) {\n            throw new BusinessException(\"Hero ID does not match.\");\n        }\n        heroToUpdate.setId(id);\n        return this.heroRepository.save(heroToUpdate);\n    }\n\n    public void delete(Long id) {\n        this.findById(id);\n        this.heroRepository.deleteById(id);\n    }", "first_line_groundtruth": ").equals(heroToUpdate.getId())) {", "first_line_prediction": " ).equals(id)) {", "match": 0}
{"groundtruth": "Insets insets = UIUtils.getInsets(\"Toast.shadowInsets\", new Insets(0, 0, 6, 6));", "prediction": " return new FlatStylingSupport.FlatBorder(color, 1, 1, 1, 1);\n    }\n\n    @Override\n    public void installComponents(JPanel p) {\n        super.installComponents(p);\n        layout = new PanelNotificationLayout(p);\n        layout.installComponents(p);\n    }\n\n    @Override\n    public void uninstallComponents(JPanel p) {\n        layout.uninstallComponents(p);\n        super.uninstallComponents(p);\n    }\n\n    @Override\n    public void installListeners(JPanel p) {\n        super.installListeners(p);\n        layout.installListeners(p);\n   ", "first_line_groundtruth": "Insets insets = UIUtils.getInsets(\"Toast.shadowInsets\", new Insets(0, 0, 6, 6));", "first_line_prediction": " return new FlatStylingSupport.FlatBorder(color, 1, 1, 1, 1);", "match": 0}
{"groundtruth": "UIUtils.getString(prefix + \".effectAlignment\", \"left\");", "prediction": " FlatUIUtils.getUIString(prefix + \".effectAlignment\", \"center\");\n    }\n\n    @Override\n    protected void uninstallDefaults(JPanel p) {\n        super.uninstallDefaults(p);\n        iconTextGap = 0;\n        closeButtonGap = 0;\n        minimumWidth = 0;\n        maximumWidth = -1;\n        arc = 0;\n        outlineWidth = 0;\n        outlineColor = null;\n        margin = null;\n        showCloseButton = false;\n        closeIconColor = null;\n        closeButtonIcon = null;\n        useEffect = false;\n        effectColor = null;\n        effect", "first_line_groundtruth": "UIUtils.getString(prefix + \".effectAlignment\", \"left\");", "first_line_prediction": " FlatUIUtils.getUIString(prefix + \".effectAlignment\", \"center\");", "match": 0}
{"groundtruth": "notificationHolder.clearHold();", "prediction": " for (Map.Entry<Location, List<NotificationAnimation>> set : lists.entrySet()) {\n            for (int i = 0; i < set.getValue().size(); i++) {\n                NotificationAnimation an = set.getValue().get(i);\n                if (an != null) {\n                    an.cancel();\n                }\n            }\n        }\n        notificationHolder.clear();\n    }\n\n    public void clear(Location location) {\n        List<NotificationAnimation> list = lists.get(location);\n        if (list != null) {\n            for (int i = 0; i < list.size(); i++)", "first_line_groundtruth": "notificationHolder.clearHold();", "first_line_prediction": " for (Map.Entry<Location, List<NotificationAnimation>> set : lists.entrySet()) {", "match": 0}
{"groundtruth": "UIUtils.getInsets(\"Toast.frameInsets\", new Insets(10, 10, 10, 10));", "prediction": " new Insets(FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0));\n            horizontalSpace = FlatUIUtils.getUIInt(\"Toast.horizontalSpace\", 0);\n            animationMove = FlatUIUtils.getUIInt(\"Toast.animationMove\", 0);\n            top = location.equals(Location.TOP_LEFT) || location.equals(Location.", "first_line_groundtruth": "UIUtils.getInsets(\"Toast.frameInsets\", new Insets(10, 10, 10, 10));", "first_line_prediction": " new Insets(FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0), FlatUIUtils.getUIInt(\"Toast.frameInsets\", 0));", "match": 0}
{"groundtruth": "notificationHolder.removeHold(hold);", "prediction": " hold.close();\n            }\n        } else {\n            notificationAnimation.close();\n        }\n    }\n\n    public void close(NotificationAnimation notificationAnimation) {\n        notificationClose(notificationAnimation);\n    }\n\n    public void close(NotificationAnimation notificationAnimation, long duration) {\n        notificationClose(notificationAnimation);\n    }\n\n    public void close(NotificationAnimation notificationAnimation, long duration, Consumer<NotificationAnimation> callback) {\n        notificationClose(notificationAnimation);\n        if (callback != null) {\n            callback.accept(notificationAnimation);\n        }\n    }\n\n    public void close(NotificationAnimation notificationAnimation, Consumer<NotificationAnimation> callback)", "first_line_groundtruth": "notificationHolder.removeHold(hold);", "first_line_prediction": " hold.close();", "match": 0}
{"groundtruth": "toastNotificationPanel.setDialog(window);", "prediction": "\n            \n            if (location == Location.TOP_LEFT || location == Location.BOTTOM_LEFT) {\n                top = true;\n            }\n            if (location == Location.TOP_RIGHT || location == Location.BOTTOM_RIGHT) {\n                top = false;\n            }\n            if (location == Location.TOP_CENTER || location == Location.BOTTOM_CENTER) {\n                top = true;\n            }\n            if (location == Location.TOP_LEFT || location == Location.TOP_CENTER || location == Location.TOP_RIGHT) {\n                horizontalSpace = 0;\n            }\n            if (location == Location.BOTTOM_LEFT", "first_line_groundtruth": "toastNotificationPanel.setDialog(window);", "first_line_prediction": "", "match": 0}
{"groundtruth": "+ \".closeIcon\", UIUtils.createIcon(\"raven/toast/svg/close.svg\", closeIconColor, 0.75f));", "prediction": " + \".closeButtonIcon\", \"icons/close.png\");\n        useEffect = FlatUIUtils.getUIBoolean(prefix + \".useEffect\", true);\n        effectColor = FlatUIUtils.getUIColor(prefix + \".effectColor\", \"Component.focusColor\");\n        effectWidth = FlatUIUtils.getUIFloat(prefix + \".effectWidth\", 1.0f);\n        effectOpacity = FlatUIUtils.getUIFloat(prefix + \".effectOpacity\", 0.5f);\n        effectAlignment = FlatUIUtils.getUIString(prefix + \".effectAlignment\", \"center\");\n    }\n\n    @", "first_line_groundtruth": "+ \".closeIcon\", UIUtils.createIcon(\"raven/toast/svg/close.svg\", closeIconColor, 0.75f));", "first_line_prediction": " + \".closeButtonIcon\", \"icons/close.png\");", "match": 0}
{"groundtruth": "hold = notificationHolder.getHold(notificationAnimation.getLocation());", "prediction": " an = notificationHolder.remove(notificationAnimation);\n        if (an != null) {\n            an.close();\n        }\n    }\n\n    public void close(NotificationAnimation notificationAnimation) {\n        notificationClose(notificationAnimation);\n    }\n\n    public void close(NotificationAnimation notificationAnimation, long duration) {\n        notificationClose(notificationAnimation);\n        notificationAnimation.start();\n    }\n\n    public void close(NotificationAnimation notificationAnimation, long duration, Consumer<NotificationAnimation> onClose) {\n        notificationClose(notificationAnimation);\n        notificationAnimation.start(duration, onClose);\n    }\n\n    public void close(NotificationAnimation notificationAnimation, long duration", "first_line_groundtruth": "hold = notificationHolder.getHold(notificationAnimation.getLocation());", "first_line_prediction": " an = notificationHolder.remove(notificationAnimation);", "match": 0}
{"groundtruth": "UIUtils.getInsets(prefix + \".margin\", new Insets(8, 8, 8, 8));", "prediction": " FlatUIUtils.getUIInsets(prefix + \".margin\", 0);\n        closeButtonIcon = FlatUIUtils.getUIIcon(prefix + \".closeButtonIcon\", \"window-close\");\n        showCloseButton = FlatUIUtils.getUIBoolean(prefix + \".showCloseButton\", true);\n        closeIconColor = FlatUIUtils.getUIColor(prefix + \".closeIconColor\", \"Component.focusColor\");\n        closeButtonIcon = FlatUIUtils.getUIIcon(prefix + \".closeButtonIcon\", \"window-close\");\n        closeButtonIcon = FlatUIUtils.getUIIcon(prefix", "first_line_groundtruth": "UIUtils.getInsets(prefix + \".margin\", new Insets(8, 8, 8, 8));", "first_line_prediction": " FlatUIUtils.getUIInsets(prefix + \".margin\", 0);", "match": 0}
{"groundtruth": "notificationHolder.clearHold(location);", "prediction": " List<NotificationAnimation> list = lists.get(location);\n         if (list != null) {\n             for (int i = 0; i < list.size(); i++) {\n                 NotificationAnimation an = list.get(i);\n                 if (an != null) {\n                     an.close();\n                 }\n             }\n         }\n    }\n\n    public void clear(Type type) {\n        for (Map.Entry<Location, List<NotificationAnimation>> set : lists.entrySet()) {\n            for (int i = 0; i < set.getValue().size(); i++) {\n                NotificationAnimation an = set.", "first_line_groundtruth": "notificationHolder.clearHold(location);", "first_line_prediction": " List<NotificationAnimation> list = lists.get(location);", "match": 0}
{"groundtruth": "toastNotificationPanel.set(type, message);", "prediction": " toastNotificationPanel.setDuration(FlatUIUtils.getUIInt(\"Toast.duration\", 2500));\n        toastNotificationPanel.setEffectWidth(FlatUIUtils.getUIFloat(\"Toast.effectWidth\", 0.5f));\n        toastNotificationPanel.setEffectOpacity(FlatUIUtils.getUIFloat(\"Toast.effectOpacity\", 0.2f));\n        toastNotificationPanel.setEffectAlignment(FlatUIUtils.getUIString(\"Toast.effectAlignment\", \"left\"));\n        toastNotificationPanel.setEffectColor(FlatUIUtils.getUIColor(\"Toast.effectColor\"));", "first_line_groundtruth": "toastNotificationPanel.set(type, message);", "first_line_prediction": " toastNotificationPanel.setDuration(FlatUIUtils.getUIInt(\"Toast.duration\", 2500));", "match": 0}
{"groundtruth": "notificationHolder.hold(notificationAnimation);", "prediction": " return false;\n        }\n    }\n\n    public void show(Notification notification) {\n        show(notification, FlatUIUtils.getUIInt(\"Toast.duration\", 2500));\n    }\n\n    public void show(Notification notification, long duration) {\n        initStart(new NotificationAnimation(notification, duration), duration);\n    }\n\n    public void show(Notification notification, Consumer<Notification> onShow) {\n        show(notification, FlatUIUtils.getUIInt(\"Toast.duration\", 2500), onShow);\n    }\n\n    public void show(Notification notification, long duration, Consumer<Notification>", "first_line_groundtruth": "notificationHolder.hold(notificationAnimation);", "first_line_prediction": " return false;", "match": 0}
{"groundtruth": "lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();", "prediction": "0).apply(originalPoints);\n    }\n\n    @Override\n    public Shape clone() {\n        return new House(lowerLeft);\n    }", "first_line_groundtruth": "lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();", "first_line_prediction": "0).apply(originalPoints);", "match": 0}
{"groundtruth": "lowerLeft.getX(), lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();", "prediction": "lowerLeft).apply(originalPoints);\n    }", "first_line_groundtruth": "lowerLeft.getX(), lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();", "first_line_prediction": "lowerLeft).apply(originalPoints);", "match": 0}
{"groundtruth": "y][x].isSet()) {", "prediction": "y][x].isOn()) {\n                    System.out.print(SET);\n                } else {\n                    System.out.print(UNSET);\n                }\n            }\n            System.out.println();\n        }\n    }\n\n    @Override\n    public void set(int x, int y, boolean on) {\n        if (x >= 0 && y >= 0 && x < width && y < height) {\n            pixels[y][x] = new Pixel(on);\n        }\n    }\n\n    @Override\n    public boolean get(int x, int y) {\n        if (x >= 0 && y >=", "first_line_groundtruth": "y][x].isSet()) {", "first_line_prediction": "y][x].isOn()) {", "match": 0}
{"groundtruth": "(point.getX(), point.getY());", "prediction": "Pixel(point);\n        }\n    }\n\n    public void setPixel(Point point) {\n        if (point.getX() < 0 || point.getX() >= width || point.getY() < 0 || point.getY() >= height) {\n            return;\n        }\n        pixels[point.getY()][point.getX()].set(true);\n    }\n\n    public void unsetPixel(Point point) {\n        if (point.getX() < 0 || point.getX() >= width || point.getY() < 0 || point.getY() >= height) {\n            return;\n        }\n        pixels[point", "first_line_groundtruth": "(point.getX(), point.getY());", "first_line_prediction": "Pixel(point);", "match": 0}
{"groundtruth": "getX() * factor, point.getY() * factor + 50, factor, factor);", "prediction": "getX() - factor, point.getY() - factor, factor * 2, factor * 2);\n            }\n        }\n    }", "first_line_groundtruth": "getX() * factor, point.getY() * factor + 50, factor, factor);", "first_line_prediction": "getX() - factor, point.getY() - factor, factor * 2, factor * 2);", "match": 0}
{"groundtruth": ".drawOval(point.getX() * factor, point.getY() * factor + 50, factor, factor);", "prediction": ".drawLine(point.getX(), point.getY(), point.getX(), point.getY());\n            }\n        }\n    }", "first_line_groundtruth": ".drawOval(point.getX() * factor, point.getY() * factor + 50, factor, factor);", "first_line_prediction": ".drawLine(point.getX(), point.getY(), point.getX(), point.getY());", "match": 0}
{"groundtruth": ", this.parserMulti(methodInfo.getActionInfo().getBatchSql()[i], null));", "prediction": ");\n            }\n        } else {\n            methodInfo.resolveSql(0);\n        }\n    }\n\n    @Override\n    public void afterPrepare(final MethodInvocationInfo methodInfo, JdbcTemplate jdbcTemplate) {\n        if (methodInfo.getActionInfo() != null && methodInfo.getActionInfo().getBatchSql() != null) {\n            for (int i = 0; i < methodInfo.getActionInfo().getBatchSql().length; i++) {\n                methodInfo.resolveSql(i);\n            }\n        } else {\n            methodInfo.resolveSql(0);\n        }\n    }\n\n    @Override\n    public void", "first_line_groundtruth": ", this.parserMulti(methodInfo.getActionInfo().getBatchSql()[i], null));", "first_line_prediction": ");", "match": 0}
{"groundtruth": "ExceptionUtils.mpe(\"Failed to process multiple-table update, please exclude the tableName or statementId\");", "prediction": " ExceptionUtils.getException(\"insert sql must have select or itemsList\");\n        }\n    }\n\n    @Override\n    protected void processUpdate(Update update, int index, String sql, Object obj) {\n        if (this.tenantLineHandler.ignoreTable(update.getTable().getName())) {\n            // \u8fc7\u6ee4\u9000\u51fa\u6267\u884c\n            return;\n        }\n        List<Column> columns = update.getColumns();\n        if (CollectionUtils.isEmpty(columns)) {\n            // \u9488\u5bf9\u4e0d\u7ed9\u5217\u540d\u7684update \u4e0d\u5904\u7406\n            return;\n        }\n        String tenantIdColumn = this.tenantLineHandler.getTenantIdColumn();\n       ", "first_line_groundtruth": "ExceptionUtils.mpe(\"Failed to process multiple-table update, please exclude the tableName or statementId\");", "first_line_prediction": " ExceptionUtils.getException(\"insert sql must have select or itemsList\");", "match": 0}
{"groundtruth": "array.validateShape(String.valueOf(key), expectedShape);", "prediction": " if (array != null) {\n             array.validateShape(expectedShape);\n         }\n         return array;\n     }", "first_line_groundtruth": "array.validateShape(String.valueOf(key), expectedShape);", "first_line_prediction": " if (array != null) {", "match": 0}
{"groundtruth": "myJavaInputStream    = in.getInputStream();", "prediction": " myJavaInputStream  = in.getInputStream();\n             myJavaOutputStream = out.getOutputStream();\n             myPythonInputStream = in.getOutputStream();\n             myPythonOutputStream = out.getInputStream();\n        }\n\n        /**\n         * Get the input stream.\n         *\n         * @return The input stream.\n         */\n        public InputStream getInputStream()\n        {\n            return myJavaInputStream;\n        }\n\n        /**\n         * Get the output stream.\n         *\n         * @return The output stream.\n         */\n        public OutputStream getOutputStream()\n        {\n            return myJavaOutputStream;\n        }\n\n        /**\n         * Get the input stream.\n         *\n         * @", "first_line_groundtruth": "myJavaInputStream    = in.getInputStream();", "first_line_prediction": " myJavaInputStream  = in.getInputStream();", "match": 0}
{"groundtruth": "myPythonInputStream  = out.getInputStream();", "prediction": " myPythonInputStream  = in.getOutputStream();\n            myPythonOutputStream = out.getInputStream();\n        }\n\n        /**\n         * Close the pipe.\n         */\n        public void close()\n        {\n            myIsClosed = true;\n        }\n\n        /**\n         * Get the input stream.\n         *\n         * @return The input stream.\n         */\n        public InputStream getInputStream()\n        {\n            return myJavaInputStream;\n        }\n\n        /**\n         * Get the output stream.\n         *\n         * @return The output stream.\n         */\n        public OutputStream getOutputStream()\n        {\n            return myJavaOutputStream;\n        }\n\n        /**\n         * Get the input", "first_line_groundtruth": "myPythonInputStream  = out.getInputStream();", "first_line_prediction": " myPythonInputStream  = in.getOutputStream();", "match": 0}
{"groundtruth": "= StringUtil.stackTraceToString(t);", "prediction": " = t;\n                arg     = \"Exception: \" + t;\n            }\n\n            // Do the invoke\n            try {\n                result = python.invoke(arg);\n            }\n            catch (Throwable t) {\n                result  = t;\n                arg     = \"Exception: \" + t;\n            }\n\n            // Print the result\n            System.out.println(arg + \" -> \" + result);\n        }\n\n        System.out.println();\n        System.out.println(\"Done!\");\n        System.out.println();\n\n        python.close();\n    }", "first_line_groundtruth": "= StringUtil.stackTraceToString(t);", "first_line_prediction": " = t;", "match": 0}
{"groundtruth": "param.put(item.getValue(), hParam);", "prediction": " param.put(item.getValue(),hParam);\n            }\n        }\n        request.setAttribute(GrayscaleConstant.GRAY_HEADER_PARAM,param);\n        return true;\n    }", "first_line_groundtruth": "param.put(item.getValue(), hParam);", "first_line_prediction": " param.put(item.getValue(),hParam);", "match": 0}
{"groundtruth": "GrayParamHolder.putValues(param);", "prediction": " //\u5c06", "first_line_groundtruth": "GrayParamHolder.putValues(param);", "first_line_prediction": " //\u5c06", "match": 0}
{"groundtruth": "= GrayUtil.isGrayRequest();", "prediction": " = GrayUtil.isGrayRequest();\n            }\n            if (isGrayRequest) {\n                return instances.stream()\n                        .filter(instance -> Objects.equals(grayGroup, instance.getMetadata().get(GrayscaleConstant.HEADER_KEY)))\n                        .collect(Collectors.toList());\n            } else {\n                return instances;\n            }\n        }\n    }\n\n    @Override\n    public void initWithNiwsConfig(IClientConfig clientConfig) {\n        // TODO Auto-generated method stub\n\n    }", "first_line_groundtruth": "= GrayUtil.isGrayRequest();", "first_line_prediction": " = GrayUtil.isGrayRequest();", "match": 0}
{"groundtruth": "if(GrayUtil.isGrayPod()){", "prediction": " paramMap.put(GrayscaleConstant.GRAY_KEY,GrayUtil.getGray());\n        }\n        return paramMap;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u53c2\u6570\n     *\n     * @param key\n     * @param value\n     */\n    public static void setValue(String key, String value) {\n        Map<String, String> paramMap = GrayParamHolder.paramLocal.get();\n        if (Objects.isNull(paramMap)) {\n            paramMap = new HashMap<>(8);\n        }\n        paramMap.put(key, value);\n        GrayParamHolder.paramLocal.set(paramMap);\n    }\n\n   ", "first_line_groundtruth": "if(GrayUtil.isGrayPod()){", "first_line_prediction": " paramMap.put(GrayscaleConstant.GRAY_KEY,GrayUtil.getGray());", "match": 0}
{"groundtruth": "info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542cmq\u961f\u5217\u7684\u72b6\u6001:{", "prediction": "info(\"\u5f53\u524d\u5b9e\u4f8b", "first_line_groundtruth": "info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542cmq\u961f\u5217\u7684\u72b6\u6001:{", "first_line_prediction": "info(\"\u5f53\u524d\u5b9e\u4f8b", "match": 0}
{"groundtruth": "=GrayUtil.requestGroup();", "prediction": "=GrayscaleConstant.HEADER_VALUE;\n                }\n            }\n            if (isGrayRequest) {\n                return instances.stream()\n                        .filter(instance -> Objects.equals(grayGroup, instance.getMetadata().get(GrayscaleConstant.HEADER_KEY)))\n                        .collect(Collectors.toList());\n            } else {\n                return instances;\n            }\n        }\n    }\n\n    @Override\n    public void initWithNiwsConfig(IClientConfig clientConfig) {\n        // TODO Auto-generated method stub\n\n    }", "first_line_groundtruth": "=GrayUtil.requestGroup();", "first_line_prediction": "=GrayscaleConstant.HEADER_VALUE;", "match": 0}
{"groundtruth": "String> attributes= GrayParamHolder.getGrayMap();", "prediction": " String> grayParamMap = GrayParamHolder.getGrayParamMap();\n        return Objects.nonNull(grayParamMap) && grayParamMap.containsKey(GrayscaleConstant.GRAY_PARAM_KEY);\n    }", "first_line_groundtruth": "String> attributes= GrayParamHolder.getGrayMap();", "first_line_prediction": " String> grayParamMap = GrayParamHolder.getGrayParamMap();", "match": 0}
{"groundtruth": "getName() + \"\u7070\u5ea6\u73af\u5883\u53d8\u66f4:\" + listenerStateEnum.getValue());", "prediction": "getName() + \"\u76d1\u542c\u5230", "first_line_groundtruth": "getName() + \"\u7070\u5ea6\u73af\u5883\u53d8\u66f4:\" + listenerStateEnum.getValue());", "first_line_prediction": "getName() + \"\u76d1\u542c\u5230", "match": 0}
{"groundtruth": "getHeader(item.getValue());", "prediction": "getHeader(item.getHeaderName());\n            if (StringUtils.hasText(hParam)) {\n                param.put(item.getHeaderName(),hParam);\n            }\n        }\n        request.setAttribute(GrayscaleConstant.GRAY_HEADER_PARAM,param);\n        return true;\n    }", "first_line_groundtruth": "getHeader(item.getValue());", "first_line_prediction": "getHeader(item.getHeaderName());", "match": 0}
{"groundtruth": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\uff1a{", "prediction": "(\"mq\u76d1\u542c\u72b6\u6001\u53d8\u66f4\u4e3a\uff1a{}\", newState);\n        if (newState != listenerMqState) {\n            listenerMqState = newState;\n            publisher.publishEvent(new GrayEventChangeEvent(newState));\n        }\n    }\n\n    /**\n     * \u5224\u65ad\u5f53\u524d\u670d\u52a1\u6709", "first_line_groundtruth": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\uff1a{", "first_line_prediction": "(\"mq\u76d1\u542c\u72b6\u6001\u53d8\u66f4\u4e3a\uff1a{}\", newState);", "match": 0}
{"groundtruth": "myByteList.clear();", "prediction": " myStream.write(Operations.FLOAT.code);\n         myStream.write(Float.floatToRawIntBits(o));\n    }", "first_line_groundtruth": "myByteList.clear();", "first_line_prediction": " myStream.write(Operations.FLOAT.code);", "match": 0}
{"groundtruth": "(myByteList.toArray());", "prediction": "(myByteList.getArray(), 0, myByteList.size());\n    }", "first_line_groundtruth": "(myByteList.toArray());", "first_line_prediction": "(myByteList.getArray(), 0, myByteList.size());", "match": 0}
{"groundtruth": "PythonMinion.byValue(foo);", "prediction": "1234567890;\n            start = System.nanoTime();\n            for (int i=0; i < count; i++) {\n                python.invoke(\"len\", Integer.class, foo);\n            }\n            end = System.nanoTime();\n            System.out.println(\"  time(len(\" + foo + \")) = \" +\n                               ((end - start) / count / 1000) + \"us\");\n        }\n\n        // Close the connection\n        python.close();\n    }", "first_line_groundtruth": "PythonMinion.byValue(foo);", "first_line_prediction": "1234567890;", "match": 0}
{"groundtruth": "python.invoke(\"len\", Integer.class, foo);", "prediction": " python.invoke(\"len\", Integer.class, foo);\n            }\n            long end = System.nanoTime();\n            System.out.println(\"  \" + count + \" calls in \" +\n                               (end - start) / 1000000 + \" ms\");\n        }\n\n        // Close the connection\n        python.close();\n    }", "first_line_groundtruth": "python.invoke(\"len\", Integer.class, foo);", "first_line_prediction": " python.invoke(\"len\", Integer.class, foo);", "match": 0}
{"groundtruth": "python.invoke(\"len\", Integer.class, arg);", "prediction": " python.invoke(arg, \"upper\");\n            }\n            catch (Throwable t) {\n                result = StringUtil.stackTraceToString(t);\n            }\n            System.out.println(\"  \\\"\" + arg + \".upper()\\\" -> \" + result);\n        }\n\n        System.out.println();\n        System.out.println(\"Closing...\");\n        python.close();\n        System.out.println(\"Closed.\");\n    }", "first_line_groundtruth": "python.invoke(\"len\", Integer.class, arg);", "first_line_prediction": " python.invoke(arg, \"upper\");", "match": 0}
{"groundtruth": "[]     shape   = {", "prediction": "       ndim    = rawData.data().getInt();\n                final int[]     shape   = new int[ndim];\n                for (int i = 0; i < ndim; i++) {\n                    shape[i] = rawData.data().getInt();\n                }\n\n                initArray(dtype, false, shape, null, rawData.data());\n            }\n            catch (ClassCastException e) {\n                throw new MalformedPickleException(\n                     \"Invalid arguments passed to numpy.fromstring: \" +\n                     \"expecting (data, dtype), got \" + tuple,\n                     e\n                 );\n            }\n            catch", "first_line_groundtruth": "[]     shape   = {", "first_line_prediction": "       ndim    = rawData.data().getInt();", "match": 0}
{"groundtruth": "RtcMsg.createContractTransaction(\n                        subject, application, content, to));", "prediction": " new RtcMsg(\n                         RtcMsgType.RTC_MSG_TYPE_TEXT,\n                         subject,\n                         application,\n                         content,\n                         to));\n    }\n\n    public static RawRtcMsg createRtcMsg(\n            String subject, String application, String content, String to, String from) {\n        return new RawRtcMsg(\n                new RtcMsg(\n                        RtcMsgType.RTC_MSG_TYPE_TEXT,\n                        subject,\n                        application,\n                        content,\n                        to,\n                        from));\n    }\n\n    public static RawRtcMsg createRtcMsg(\n            String subject, String application, String content, String to, String from,", "first_line_groundtruth": "RtcMsg.createContractTransaction(", "first_line_prediction": " new RtcMsg(", "match": 0}
{"groundtruth": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);", "prediction": " rawTelegram = new RawTelegram(chainId, nonce, contractAddress, data);\n        byte[] telegram = TelegramEncoder.encode(rawTelegram);\n        String telegramHash = Numeric.toHexString(telegram);\n        String telegramHashHex = Numeric.toHexStringNoPrefix(telegram);\n        String telegramHashHexPrefix = Numeric.toHexStringNoPrefix(telegram).substring(2);\n        String telegramHashHexPrefix2 = Numeric.toHexStringNoPrefix(telegram).substring(4);\n        String telegramHashHexPrefix3 = Numeric.toHexStringNoPrefix(telegram).substring(6);\n        String tele", "first_line_groundtruth": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);", "first_line_prediction": " rawTelegram = new RawTelegram(chainId, nonce, contractAddress, data);", "match": 0}
{"groundtruth": "o.getNoCheck(i));", "prediction": "o.get(i));\n        }\n\n        addNumpyArrayEnding(DType.Type.INT8, o);\n    }", "first_line_groundtruth": "o.getNoCheck(i));", "first_line_prediction": "o.get(i));", "match": 0}
{"groundtruth": "myByteList.append(Float.toString(o).getBytes());", "prediction": " myByteList.append(myEightByteBuffer.order(ByteOrder.LITTLE_ENDIAN).putFloat(0, o));\n         write(myByteList.array());\n    }", "first_line_groundtruth": "myByteList.append(Float.toString(o).getBytes());", "first_line_prediction": " myByteList.append(myEightByteBuffer.order(ByteOrder.LITTLE_ENDIAN).putFloat(0, o));", "match": 0}
{"groundtruth": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String)) {", "prediction": " (config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n         && ! (recordValue instanceof String)) {\n      recordValue = objectMapper.writeValueAsString(recordValue);\n    } else if (!(recordValue instanceof String)) {\n      recordValue = Util.convertJsonNodeToYTree((JsonNode) recordValue);\n    }\n\n    return YTree.node(recordValue);\n  }\n\n  protected void addHeaders(ApiServiceTransaction transaction, SinkRecord record) {\n    var headers = record.headers();\n    if (headers != null) {\n      for (Header header : headers) {\n        transaction.addHeader(", "first_line_groundtruth": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING", "first_line_prediction": " (config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING", "match": 0}
{"groundtruth": ", SCALAR_ARRAY_SHAPE, rawData.data());", "prediction": ", SCALAR_ARRAY_SHAPE);\n            dummyArray.setRawData(rawData);\n            return dummyArray;\n        }", "first_line_groundtruth": ", SCALAR_ARRAY_SHAPE, rawData.data());", "first_line_prediction": ", SCALAR_ARRAY_SHAPE);", "match": 0}
{"groundtruth": "Util.parseHumanReadableDuration(value.toString());", "prediction": " Util.parseHumanReadableDuration(value.toString());\n      } catch (Exception ex) {\n        throw new ConfigException(name, value, ex.toString());\n      }\n    }\n  }\n\n  public static class ValidUpperString extends ConfigDef.Validator {\n\n    private final Set<String> validValues;\n\n    public ValidUpperString(String... validValues) {\n      this.validValues = new HashSet<>(Arrays.asList(validValues));\n    }\n\n    @Override\n    public void ensureValid(String name, Object value) {\n      if (!validValues.contains(value.toString().toUpperCase())) {\n        throw new ConfigException", "first_line_groundtruth": "Util.parseHumanReadableDuration(value.toString());", "first_line_prediction": " Util.parseHumanReadableDuration(value.toString());", "match": 0}
{"groundtruth": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String)) {", "prediction": " (recordKey instanceof JsonNode) {\n      return (YTreeNode) recordKey;\n    }\n\n    return objectMapper.convertValue(recordKey, YTreeNode.class);\n  }\n\n  protected Object convertRecordValue(SinkRecord record) throws Exception {\n    if (record.value() == null) {\n      return JsonNodeFactory.instance.nullNode();\n    }\n    if (record.value() instanceof String) {\n      return record.value();\n    }\n\n    byte[] jsonBytes = JSON_CONVERTER.fromConnectData(record.topic(), record.valueSchema(),\n        record.value());\n    var jsonString = new String(", "first_line_groundtruth": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING", "first_line_prediction": " (recordKey instanceof JsonNode) {", "match": 0}
{"groundtruth": "return dummyArray.getLong(0);", "prediction": " return dummyArray.getLong(0);\n            case UINT8:\n            case UINT16:\n            case UINT32:\n            case UINT64:\n                 return dummyArray.getDouble(0);\n            case FLOAT16:\n            case FLOAT32:\n            case FLOAT64:\n                 return dummyArray.getDouble(0);\n            default:\n                 throw new MalformedPickleException(\n                     \"Invalid dtype for numpy scalar: \" + dtype\n                 );\n            }\n        }", "first_line_groundtruth": "return dummyArray.getLong(0);", "first_line_prediction": " return dummyArray.getLong(0);", "match": 0}
{"groundtruth": "if (usuario.getPassword().equals(Senha)) {", "prediction": " if (usuario.getEmail().equals(Email) && usuario.getSenha().equals(Senha)) {\n                             senhaCorreta = true;\n                             break;\n                         }\n                    }\n                    if (senhaCorreta) {\n                        RedirecionaLogin();\n                    } else {\n                        Toast.makeText(Login.this, \"Senha incorreta\", Toast.LENGTH_SHORT).show();\n                    }\n                } else {\n                    Toast.makeText(Login.this, \"Usu\u00e1rio n\u00e3o encontrado\", Toast.LENGTH_SHORT).show();\n                }\n            }\n\n            @Override\n            public void onCancelled(@NonNull Database", "first_line_groundtruth": "if (usuario.getPassword().equals(Senha)) {", "first_line_prediction": " if (usuario.getEmail().equals(Email) && usuario.getSenha().equals(Senha)) {", "match": 0}
{"groundtruth": "RA_atual = usuario.getMatricula();", "prediction": "setUsuarioLogado(usuario);\n                            break;\n                        }\n                    }\n                } else {\n                    // Usu\u00e1rio n\u00e3o encontrado\n                    Toast.makeText(Login.this, \"Usu\u00e1rio n\u00e3o encontrado\", Toast.LENGTH_SHORT).show();\n                }\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError databaseError) {\n\n            }\n        });\n    }", "first_line_groundtruth": "RA_atual = usuario.getMatricula();", "first_line_prediction": "setUsuarioLogado(usuario);", "match": 0}
{"groundtruth": "!twilioService.validatePhoneNumber(from)) {", "prediction": "twilioService.isValidPhoneNumber(from)) {\n            try {\n                return chatGPTService.sendMessage(from, fromCity, fromState, fromCountry, body);\n            } catch (RestException e) {\n                logger.error(\"Error sending message to ChatGPTService: \" + e.getMessage());\n                return \"Error sending message to ChatGPTService: \" + e.getMessage();\n            }\n        } else {\n            logger.error(\"Invalid phone number: \" + from);\n            return \"Invalid phone number: \" + from;\n        }\n    }", "first_line_groundtruth": "!twilioService.validatePhoneNumber(from)) {", "first_line_prediction": "twilioService.isValidPhoneNumber(from)) {", "match": 0}
{"groundtruth": "String response = chatGPTService.askQuestion(message);", "prediction": " return chatGPTService.sendMessage(message);\n        }\n\n        else {\n            throw new RestException(\"Message is empty\");\n        }\n\n    }", "first_line_groundtruth": "String response = chatGPTService.askQuestion(message);", "first_line_prediction": " return chatGPTService.sendMessage(message);", "match": 0}
{"groundtruth": "chatGPTService.askQuestion(body);", "prediction": " chatGPTService.generateResponse(body);\n\n        logger.info(\"Sending SMS response: \" + response);\n        twilioService.sendMessage(from, response);\n\n        return response;\n    }", "first_line_groundtruth": "chatGPTService.askQuestion(body);", "first_line_prediction": " chatGPTService.generateResponse(body);", "match": 0}
{"groundtruth": "chatGPTConfiguration.setApiKey(ConfigUtils.obfuscateApiKey(chatGPTConfiguration.getApiKey()));", "prediction": " return chatGPTConfiguration;\n        }\n    }\n\n    /** This method sends a message to the ChatGPTService */\n    @Get(\"/send\")\n    public ChatMessage sendMessage(@QueryValue String message) {\n\n        if (StringUtils.isBlank(message)) {\n            throw new RestException(\"message is empty. Please provide a message to send.\");\n        }\n\n        else {\n            ChatMessage chatMessage = chatGPTService.sendMessage(message);\n            return chatMessage;\n        }\n    }", "first_line_groundtruth": "chatGPTConfiguration.setApiKey(ConfigUtils.obfuscateApiKey(chatGPTConfiguration.getApiKey()));", "first_line_prediction": " return chatGPTConfiguration;", "match": 0}
{"groundtruth": "(request.getTo());", "prediction": "(request.getFrom());\n\t\tresponse.setTo(request.getTo());", "first_line_groundtruth": "(request.getTo());", "first_line_prediction": "(request.getFrom());", "match": 0}
{"groundtruth": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);", "prediction": " currentFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);", "first_line_groundtruth": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);", "first_line_prediction": " currentFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);", "match": 0}
{"groundtruth": "UDPFrame currentFrame = FrameMapper.mapFromBytesToInstance(incomingRequestPacket.getData());", "prediction": "\tFrameMapper mapper = new FrameMapper();\n\t\t\t\t\tUDPFrame frame = mapper.map(incomingRequestPacket.getData(), incomingRequestPacket.getLength());", "first_line_groundtruth": "UDPFrame currentFrame = FrameMapper.mapFromBytesToInstance(incomingRequestPacket.getData());", "first_line_prediction": "\tFrameMapper mapper = new FrameMapper();", "match": 0}
{"groundtruth": ", List<UDPFrame>> completedRequestFrameList : map.findCompletedRequestsFrameLists())\n\t\t\t\t{", "prediction": ", Request> pair : map.getFrames())\n\t\t\t\t{\n\t\t\t\t\trequestMap.put(pair.getKey(), pair.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException | MappingException e)\n\t\t\t{\n\t\t\t\tlogger.log(Level.SEVERE, \"Error while receiving a request\", e);\n\t\t\t}\n\t\t}", "first_line_groundtruth": ", List<UDPFrame>> completedRequestFrameList : map.findCompletedRequestsFrameLists())", "first_line_prediction": ", Request> pair : map.getFrames())", "match": 0}
{"groundtruth": "sendResponseWithOverhead(responseBytes, response.getTo());", "prediction": "\tthrow new MappingException(\"Response size is too big\");", "first_line_groundtruth": "sendResponseWithOverhead(responseBytes, response.getTo());", "first_line_prediction": "\tthrow new MappingException(\"Response size is too big\");", "match": 0}
{"groundtruth": "return execute(api.getModel(modelId));", "prediction": " return execute(api.getModel(modelId)).data;\n    }\n\n    public Model createModel(String name, String language) {\n        return execute(api.createModel(name, language)).data;\n    }\n\n    public Model createModel(String name, String language, String engine) {\n        return execute(api.createModel(name, language, engine)).data;\n    }\n\n    public Model createModel(String name, String language, String engine, String dataset) {\n        return execute(api.createModel(name, language, engine, dataset)).data;\n    }\n\n    public Model createModel(String name,", "first_line_groundtruth": "return execute(api.getModel(modelId));", "first_line_prediction": " return execute(api.getModel(modelId)).data;", "match": 0}
{"groundtruth": "return execute(api.listModels()).data;", "prediction": " return api.listModels().execute().body();\n    }\n\n    public Model getModel(final String modelId) {\n        return api.getModel(modelId).execute().body();\n    }\n\n    public Model createModel(final Model model) {\n        return api.createModel(model).execute().body();\n    }\n\n    public Model updateModel(final String modelId, final Model model) {\n        return api.updateModel(modelId, model).execute().body();\n    }\n\n    public DeleteResult deleteModel(final String modelId) {\n        return api.deleteModel(modelId).execute().body();\n    }\n\n   ", "first_line_groundtruth": "return execute(api.listModels()).data;", "first_line_prediction": " return api.listModels().execute().body();", "match": 0}
{"groundtruth": "if (infoFilter.isStudentIdValid(studentId)) {", "prediction": " infoFilter.validateStudentId(studentId);\n        } catch (InvalidStudentIdException e) {\n            throw new InvalidStudentIdException(e.getMessage());\n        }\n        this.studentId = studentId;\n    }\n\n    public String getStudentClass() {\n        return studentClass;\n    }\n\n    public void setStudentClass(String studentClass) {\n        this.studentClass = studentClass;\n    }\n\n    public String getMajor() {\n        return major;\n    }\n\n    public void setMajor(String major) {\n        this.major = major;\n    }\n\n    public String getSchoolYear() {\n        return schoolYear", "first_line_groundtruth": "if (infoFilter.isStudentIdValid(studentId)) {", "first_line_prediction": " infoFilter.validateStudentId(studentId);", "match": 0}
{"groundtruth": "infoFilter.isPersonIdValid(id)) {", "prediction": "infoFilter.isValidPersonId(id)) {\n                this.id = id;\n            } else {\n                throw new InvalidPersonIdException();\n            }\n        } catch (Exception e) {\n            throw new InvalidPersonIdException();\n        }\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) throws InvalidEmailException {\n        var infoFilter = new InfoFilterImp();\n        try {\n            if (infoFilter", "first_line_groundtruth": "infoFilter.isPersonIdValid(id)) {", "first_line_prediction": "infoFilter.isValidPersonId(id)) {", "match": 0}
{"groundtruth": "if (subject.getKind().compareTo(\n                    comboSubjectType.getItemAt(i).toString()) == 0) {", "prediction": " if (comboSubjectType.getItemAt(i).equals(subject.getKind())) {\n                 comboSubjectType.setSelectedIndex(i);\n             }\n        }\n    }", "first_line_groundtruth": "if (subject.getKind().compareTo(", "first_line_prediction": " if (comboSubjectType.getItemAt(i).equals(subject.getKind())) {", "match": 0}
{"groundtruth": "txtMajor.setText(student.getMajor());", "prediction": "\n                \n            } else {\n                txtStudentId.setText(\"\");\n                txtFullName.setText(\"\");\n                var msg = \"Sinh vi\u00ean c\u1ea7n t\u00ecm kh\u00f4ng t\u1ed3n t\u1ea1i. Vui l\u00f2ng th\u1eed l\u1ea1i!\";\n                showMessage(msg);\n            }\n        }\n    }", "first_line_groundtruth": "txtMajor.setText(student.getMajor());", "first_line_prediction": "", "match": 0}
{"groundtruth": "subject.getKind().compareTo(\n                    comboSubjectType.getItemAt(i).toString()) == 0) {", "prediction": "comboSubjectType.getItemAt(i).equals(subject.getKind())) {\n                comboSubjectType.setSelectedIndex(i);\n                break;\n            }\n        }\n    }", "first_line_groundtruth": "subject.getKind().compareTo(", "first_line_prediction": "comboSubjectType.getItemAt(i).equals(subject.getKind())) {", "match": 0}
{"groundtruth": "ect.getName() + \" tr\u01b0\u1edbc \u0111\u00f3.\";", "prediction": ".getSubjectName() + \" v\u00e0o l\u00fac \" + dateFormat.format(currentTime);\n                showMessage(msg);\n            } else {\n                registerings.add(r);\n                var msg = \"\u0110\u0103ng k\u00fd m\u00f4n h\u1ecdc \" + subj.getSubjectName() + \" th\u00e0nh c\u00f4ng!\";\n                showMessage(msg);\n            }\n        }\n    }\n\n    private void searchStudent() {\n        var checker = new InfoFilterImp();\n        var student = checker.searchStudent(registerings, txtStudentIdToSearch.getText());\n        if(student != null) {\n            this.student =", "first_line_groundtruth": "ect.getName() + \" tr\u01b0\u1edbc \u0111\u00f3.\";", "first_line_prediction": ".getSubjectName() + \" v\u00e0o l\u00fac \" + dateFormat.format(currentTime);", "match": 0}
{"groundtruth": "if (infoFilter.isDateOfBirthValid(dob)) {", "prediction": " if (infoFilter.isDateOfBirthValid(dob)) {\n                SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n                this.dob = sdf.parse(dob);\n             }\n        } catch (ParseException ex) {\n            throw new InvalidDateOfBirthException();\n        }\n    }\n\n    public void setDob(Date dob) {\n        this.dob = dob;\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = 7;\n        hash = 89 * hash + Objects.hashCode(this.id);\n        hash = 89 * hash + Objects.hashCode(this", "first_line_groundtruth": "if (infoFilter.isDateOfBirthValid(dob)) {", "first_line_prediction": " if (infoFilter.isDateOfBirthValid(dob)) {", "match": 0}
{"groundtruth": "if (s.getStudentId().compareTo(studentId) == 0) {", "prediction": " if (s.getId().toUpperCase().equals(studentId)) {\n                    student = s;\n                    break;\n                 }\n            }\n            if (student != null) {\n                txtFullName.setText(student.getFullName());\n                txtStudentId.setText(student.getId());\n            } else {\n                txtFullName.setText(\"\");\n                txtStudentId.setText(\"\");\n                var msg = \"Sinh vi\u00ean c\u1ea7n t\u00ecm kh\u00f4ng t\u1ed3n t\u1ea1i. Vui l\u00f2ng th\u1eed l\u1ea1i!\";\n                showMessage(msg);\n            }\n        }\n    }", "first_line_groundtruth": "if (s.getStudentId().compareTo(studentId) == 0) {", "first_line_prediction": " if (s.getId().toUpperCase().equals(studentId)) {", "match": 0}
{"groundtruth": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");", "prediction": " System.out.println(raiz.getElement());\n             preOrden(raiz.getLeftSon());\n             preOrden(raiz.getRightSon());\n        }\n    }\n\n    public void inOrden(Nodo raiz) {\n        if (raiz != null) {\n            inOrden(raiz.getLeftSon());\n            System.out.println(raiz.getElement());\n            inOrden(raiz.getRightSon());\n        }\n    }\n\n    public void postOrden(Nodo raiz) {\n        if (raiz != null) {\n            postOrden(raiz.getLeftSon());", "first_line_groundtruth": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");", "first_line_prediction": " System.out.println(raiz.getElement());", "match": 0}
{"groundtruth": "nodo.setRightSon(raiz.getRightSon());", "prediction": "\n                    } else {\n                        Nodo nodo = searchNodoToReplace(raiz.getRightSon());\n                        nodo.setRightSon(raiz.getRightSon());\n                    }\n                }\n            } else if (element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else {\n                deleteNodo(element, raiz.getRightSon(), raiz);\n            }\n        }\n    }\n\n    public boolean validateLeftSon(Nodo raiz) {\n        if (raiz == null) {\n            return true;\n        } else", "first_line_groundtruth": "nodo.setRightSon(raiz.getRightSon());", "first_line_prediction": "", "match": 0}
{"groundtruth": "if (element == raiz.getElement()) {", "prediction": " if (element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n             } else if (element > raiz.getElement()) {\n                deleteNodo(element, raiz.getRightSon(), raiz);\n             } else {\n                if (raiz.getLeftSon() == null && raiz.getRightSon() == null) {\n                    if (previousNode == null) {\n                        setRoot(null);\n                    } else {\n                        if (previousNode.getLeftSon() == raiz) {\n                            previousNode.setLeftSon(null", "first_line_groundtruth": "if (element == raiz.getElement()) {", "first_line_prediction": " if (element < raiz.getElement()) {", "match": 0}
{"groundtruth": "raiz.isLeaf()) {", "prediction": "raiz.getLeftSon() == null && raiz.getRightSon() == null) {\n                    if (previousNode == null) {\n                        setRoot(null);\n                    } else {\n                        if (previousNode.getLeftSon() == raiz) {\n                            previousNode.setLeftSon(null);\n                        } else {\n                            previousNode.setRightSon(null);\n                        }\n                    }\n                } else if (raiz.getLeftSon() == null) {\n                    if (previousNode == null) {\n                        setRoot(raiz.getRightSon());\n                    } else {\n                        if (previousNode", "first_line_groundtruth": "raiz.isLeaf()) {", "first_line_prediction": "raiz.getLeftSon() == null && raiz.getRightSon() == null) {", "match": 0}
{"groundtruth": "(element < previousNode.getElement()) {", "prediction": " (previousNode.getLeftSon() == raiz) {\n                            previousNode.setLeftSon(null);\n                        } else {\n                            previousNode.setRightSon(null);\n                        }\n                    }\n                } else {\n                    // Cuando es un nodo con dos hijos\n                    Nodo aux = raiz.getRightSon();\n                    while (aux.getLeftSon() != null) {\n                        previousNode = aux;\n                        aux = aux.getLeftSon();\n                    }\n                    element = aux.getElement();\n                    if (previousNode == null) {\n                        setRoot(aux);\n                    } else {\n                        if", "first_line_groundtruth": "(element < previousNode.getElement()) {", "first_line_prediction": " (previousNode.getLeftSon() == raiz) {", "match": 0}
{"groundtruth": "else if (raiz.hasOnlyRightSon()) {", "prediction": " else {\n                    // Cuando es un nodo con dos hijos\n                    Nodo aux = raiz.getRightSon();\n                    while (aux.getLeftSon() != null) {\n                        aux = aux.getLeftSon();\n                    }\n                    raiz.setElement(aux.getElement());\n                    deleteNodo(aux.getElement(), raiz, raiz);\n                }\n            } else {\n                if (element < raiz.getElement()) {\n                    deleteNodo(element, raiz.getLeftSon(), raiz);\n                } else {\n                    deleteNodo(element, raiz.getRightSon", "first_line_groundtruth": "else if (raiz.hasOnlyRightSon()) {", "first_line_prediction": " else {", "match": 0}
{"groundtruth": "raiz.getRightSon() != null;", "prediction": " raiz != null && raiz.getLeftSon() != null;\n    }\n\n    public Nodo searchNodoToReplace(Nodo raiz) {\n        if (raiz != null) {\n            if (raiz.getLeftSon() != null) {\n                return raiz.getLeftSon();\n            } else {\n                return raiz.getRightSon();\n            }\n        }\n        return null;\n    }\n\n    public boolean isEmpty() {\n        return root == null;\n    }", "first_line_groundtruth": "raiz.getRightSon() != null;", "first_line_prediction": " raiz != null && raiz.getLeftSon() != null;", "match": 0}
{"groundtruth": "nodo.setLeftSon(raiz.getLeftSon());", "prediction": "\n                    } else {\n                        Nodo nodo = searchNodoToReplace(raiz.getRightSon());\n                        \n                    }\n                }\n            } else if (element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else {\n                deleteNodo(element, raiz.getRightSon(), raiz);\n            }\n        }\n    }\n\n    private boolean validateLeftSon(Nodo nodo) {\n        if (nodo == null) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private Nodo search", "first_line_groundtruth": "nodo.setLeftSon(raiz.getLeftSon());", "first_line_prediction": "", "match": 0}
{"groundtruth": "Nodo nodo = searchNodoToReplace(raiz.getLeftSon());", "prediction": " // Si el nodo izquierdo tiene hijos a la derecha\n                        raiz.setLeftSon(deleteNodo(element, raiz.getLeftSon(), raiz));\n                    } else {\n                        // Si el nodo izquierdo tiene hijos a la izquierda\n                        raiz.setLeftSon(deleteNodo(element, raiz.getLeftSon(), raiz));\n                    }\n                }\n            } else if (element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else {\n                deleteNodo", "first_line_groundtruth": "Nodo nodo = searchNodoToReplace(raiz.getLeftSon());", "first_line_prediction": " // Si el nodo izquierdo tiene hijos a la derecha", "match": 0}
{"groundtruth": "validateLeftSon(raiz.getLeftSon());", "prediction": " raiz.getRightSon() != null;\n                    boolean haveLeftSons = raiz.getLeftSon() != null;\n                    Nodo aux = raiz;\n                    if (haveRightSons && haveLeftSons) {\n                        // Si tiene dos hijos, se toma el hijo con menor elemento\n                        // y se lo asigna al nodo padre\n                        Nodo min = findMin(raiz.getRightSon());\n                        raiz.setElement(min.getElement());\n                        raiz.setRightSon(min.getRightSon());\n                        raiz.setLeftSon(", "first_line_groundtruth": "validateLeftSon(raiz.getLeftSon());", "first_line_prediction": " raiz.getRightSon() != null;", "match": 0}
{"groundtruth": ".setRightSon(raiz.getRightSon());", "prediction": ".setLeftSon(raiz.getRightSon());\n                        nodo.setRightSon(raiz.getLeftSon());\n                        if (element < previousNode.getElement()) {\n                            previousNode.setLeftSon(nodo);\n                        } else {\n                            previousNode.setRightSon(nodo);\n                        }\n                    }\n                }\n            } else if (element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else {\n                deleteNodo(element, raiz.getRightSon(), raiz);\n            }\n        }\n    }\n\n   ", "first_line_groundtruth": ".setRightSon(raiz.getRightSon());", "first_line_prediction": ".setLeftSon(raiz.getRightSon());", "match": 0}
{"groundtruth": "Nodo nodo = raiz.getLeftSon();", "prediction": " // Tiene solo el hijo izquierdo\n                        Nodo nodo = searchNodoToReplace(raiz.getLeftSon());\n                        nodo.setRightSon(raiz.getRightSon());\n                        if (element < previousNode.getElement()) {\n                            previousNode.setLeftSon(nodo);\n                        } else {\n                            previousNode.setRightSon(nodo);\n                        }\n                     }\n                }\n            } else if (element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else {\n                deleteNodo(element,", "first_line_groundtruth": "Nodo nodo = raiz.getLeftSon();", "first_line_prediction": " // Tiene solo el hijo izquierdo", "match": 0}
{"groundtruth": "while(raiz.getRightSon() != null) {", "prediction": " if (raiz.getRightSon() != null) {\n            return searchNodoToReplace(raiz.getRightSon());\n         } else {\n            return raiz;\n         }\n    }\n\n    public boolean isEmpty() {\n        return root == null;\n    }", "first_line_groundtruth": "while(raiz.getRightSon() != null) {", "first_line_prediction": " if (raiz.getRightSon() != null) {", "match": 0}
{"groundtruth": "[] newSons = new Nodo[father.getSons().length + 1];", "prediction": "[] sons = new Nodo[father.getSons().length + 1];\n        for (int i = 0; i < father.getSons().length; i++) {\n            sons[i] = father.getSons()[i];\n        }\n        sons[sons.length - 1] = nodo;\n        father.setSons(sons);\n    }\n    \n    public void insertIterative(Integer element, int fatherElement) {\n        Nodo nodo = new Nodo(element);\n        if (isEmpty()) {\n            setRoot(nodo);\n        } else {\n           ", "first_line_groundtruth": "[] newSons = new Nodo[father.getSons().length + 1];", "first_line_prediction": "[] sons = new Nodo[father.getSons().length + 1];", "match": 0}
{"groundtruth": "pointer.getElement() == fatherElement) {", "prediction": "element < fatherElement) {\n                if (pointer.getLeft() == null) {\n                    pointer.setLeft(nodo);\n                } else {\n                    insertRecursive(element, fatherElement, pointer.getLeft());\n                }\n            } else {\n                if (pointer.getRight() == null) {\n                    pointer.setRight(nodo);\n                } else {\n                    insertRecursive(element, fatherElement, pointer.getRight());\n                }\n            }\n        }\n    }\n    \n    public void insert(Integer element) {\n        insertRecursive(element, element, root);\n    }\n    \n    public void inOrder(Nodo pointer", "first_line_groundtruth": "pointer.getElement() == fatherElement) {", "first_line_prediction": "element < fatherElement) {", "match": 0}
{"groundtruth": "if (pointer.getSons()[i].getElement() == fatherElement) {", "prediction": " insertRecursive(element, fatherElement, pointer.getSons()[i]);\n                }\n            }\n        }\n    }\n    \n    public void increaseSons(Nodo nodo, Nodo father) {\n        Nodo[] sons = new Nodo[father.getSons().length + 1];\n        for (int i = 0; i < father.getSons().length; i++) {\n            sons[i] = father.getSons()[i];\n        }\n        sons[sons.length - 1] = nodo;\n        father.setSons(sons);\n    }\n    \n    public", "first_line_groundtruth": "if (pointer.getSons()[i].getElement() == fatherElement) {", "first_line_prediction": " insertRecursive(element, fatherElement, pointer.getSons()[i]);", "match": 0}
{"groundtruth": "out.println(\"[ \"+raiz.getElement() + \" ]\");", "prediction": "out.print(raiz.getElement() + \" \");\n        if (raiz.getSons() != null) {\n            for (int i = 0; i < raiz.getSons().length; i++) {\n                printPreOrden(raiz.getSons()[i]);\n            }\n        }\n    }\n    \n    public void printInOrden(Nodo raiz) {\n        if (raiz.getSons() != null) {\n            for (int i = 0; i < raiz.getSons().length; i++) {\n                printInOrden(raiz.getSons()[i]);\n           ", "first_line_groundtruth": "out.println(\"[ \"+raiz.getElement() + \" ]\");", "first_line_prediction": "out.print(raiz.getElement() + \" \");", "match": 0}
{"groundtruth": "33, bst.getRoot());", "prediction": "15, bst.getRoot());\n        bst.insertNodoRecursive(45, bst.getRoot());\n        bst.insertNodoRecursive(35, bst.getRoot());\n        bst.insertNodoRecursive(22, bst.getRoot());\n        bst.insertNodoRecursive(27, bst.getRoot());\n        bst.insertNodoRecursive(32, bst.getRoot());\n        bst.insertNodoRecursive(37, bst.getRoot());\n        bst.insertNodoRecursive(42, bst.getRoot());\n       ", "first_line_groundtruth": "33, bst.getRoot());", "first_line_prediction": "15, bst.getRoot());", "match": 0}
{"groundtruth": ".preOrden(bst.getRoot());", "prediction": ".insertNodoRecursive(45, bst.getRoot());\n        bst.insertNodoRecursive(60, bst.getRoot());\n        bst.insertNodoRecursive(70, bst.getRoot());\n        bst.insertNodoRecursive(80, bst.getRoot());\n        bst.insertNodoRecursive(90, bst.getRoot());\n        bst.insertNodoRecursive(110, bst.getRoot());\n        bst.insertNodoRecursive(120, bst.getRoot());\n        bst.insertNodoRecursive(1", "first_line_groundtruth": ".preOrden(bst.getRoot());", "first_line_prediction": ".insertNodoRecursive(45, bst.getRoot());", "match": 0}
{"groundtruth": "(25, bst.getRoot());", "prediction": "(40, bst.getRoot());\n        bst.insertNodoRecursive(60, bst.getRoot());\n        bst.insertNodoRecursive(70, bst.getRoot());\n        bst.insertNodoRecursive(80, bst.getRoot());\n        bst.insertNodoRecursive(90, bst.getRoot());\n        bst.insertNodoRecursive(110, bst.getRoot());\n        bst.insertNodoRecursive(120, bst.getRoot());\n        bst.insertNodoRecursive(130, bst", "first_line_groundtruth": "(25, bst.getRoot());", "first_line_prediction": "(40, bst.getRoot());", "match": 0}
{"groundtruth": ".deleteNodo(30, bst.getRoot(), null);", "prediction": ".eliminarNodo(30, bst.getRoot());\n        bst.preOrden(bst.getRoot());\n        \n        System.out.println(\"Buscar\");\n        System.out.println(bst.buscar(30, bst.getRoot()));\n        System.out.println(bst.buscar(40, bst.getRoot()));\n        System.out.println(bst.buscar(5, bst.getRoot()));\n        System.out.println(bst.buscar(10, bst.getRoot()));\n        System.out.println(bst.buscar(20", "first_line_groundtruth": ".deleteNodo(30, bst.getRoot(), null);", "first_line_prediction": ".eliminarNodo(30, bst.getRoot());", "match": 0}
{"groundtruth": "(getPeek().getNext());", "prediction": "(pointer.getNext());\n            pointer = null;\n            length--;\n        }\n    }\n\n    @Override\n    public Object peek() {\n        if (isEmpty()) {\n            System.out.println(\"The stack is empty\");\n        } else {\n            return getPeek().getElement();\n        }\n        return null;\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return peek == null;\n    }\n\n    @Override\n    public int getLength() {\n        return length;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        Nodo pointer = getPeek();\n        while (pointer != null) {", "first_line_groundtruth": "(getPeek().getNext());", "first_line_prediction": "(pointer.getNext());", "match": 0}
{"groundtruth": "(pointer.getNext() != pointer2) {", "prediction": " (pointer2.getNext() != pointer) {\n                pointer = pointer2;\n                pointer2 = pointer2.getNext();\n            }\n            pointer.setNext(node);\n        }\n        length++;\n    }\n    \n    public void insertEnd(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead().setNext(getHead());\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2 = getHead();\n            while  (pointer2.getNext() != pointer) {\n                pointer = pointer2;\n                pointer2", "first_line_groundtruth": "(pointer.getNext() != pointer2) {", "first_line_prediction": " (pointer2.getNext() != pointer) {", "match": 0}
{"groundtruth": ".println(\"[ \"+pointer.getElement()+\" ]\");", "prediction": ".println(pointer.getElement());\n            pointer = pointer.getNext();\n        }\n    }", "first_line_groundtruth": ".println(\"[ \"+pointer.getElement()+\" ]\");", "first_line_prediction": ".println(pointer.getElement());", "match": 0}
{"groundtruth": ").setNext(getHead());", "prediction": "node);\n        } else {\n            node.setNext(getHead());\n            setHead(node);\n        }\n        length++;\n    }\n    \n    public void insertEnd(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead(node);\n        } else {\n            Nodo current = getHead();\n            while (current.getNext() != null) {\n                current = current.getNext();\n            }\n            current.setNext(node);\n            length++;\n        }\n    }\n    \n    public void insert(int element, int index) {\n        if", "first_line_groundtruth": ").setNext(getHead());", "first_line_prediction": "node);", "match": 0}
{"groundtruth": "while (pointer.getNext() != getHead()) {", "prediction": " while (pointer.getNext() != pointer) {\n                pointer = (Nodo) pointer.getNext();\n            }\n            pointer.setNext(node);\n        }\n        length++;\n    }\n    \n    public void insert(int element, int index) {\n        if (index == 0) {\n            insertBegin(element);\n        } else if (index == length) {\n            insertFinal(element);\n        } else {\n            Nodo node = new Nodo(element);\n            Nodo pointer = getHead();\n            Nodo pointer2 = getHead();\n            for (int i = 0; i < index; i++)", "first_line_groundtruth": "while (pointer.getNext() != getHead()) {", "first_line_prediction": " while (pointer.getNext() != pointer) {", "match": 0}
{"groundtruth": "pointer.getNext())).getNext() != getHead()) {", "prediction": "pointer.getNext())).getNext() != getHead()) {\n                    pointer = (Nodo) pointer.getNext();\n                }\n                pointer2 = (Nodo) pointer.getNext();\n                pointer.setNext(getHead());\n                pointer2.setNext(getHead());\n                length--;\n            } else {\n                setHead(null);\n                length--;\n            }\n            return pointer2;\n        }\n        return null;\n    }\n    \n    public Nodo deleteBegin(){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2;", "first_line_groundtruth": "pointer.getNext())).getNext() != getHead()) {", "first_line_prediction": "pointer.getNext())).getNext() != getHead()) {", "match": 1}
{"groundtruth": "pointer.setNext(getHead());", "prediction": " pointer.setNext(node);\n        }\n        length++;\n    }\n    \n    public void insertEnd(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead().setNext(getHead());\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2 = getHead();\n            while (pointer.getNext() != pointer2) {\n                pointer = (Nodo) pointer.getNext();\n            }\n            pointer.setNext(node);\n            node.setNext(getHead());\n            setHead(node);\n        }", "first_line_groundtruth": "pointer.setNext(getHead());", "first_line_prediction": " pointer.setNext(node);", "match": 0}
{"groundtruth": "list.deleteInIndex(3);", "prediction": " list.printList();\n        list.deleteInIndex(6);\n        System.out.println(\"\");\n         list.printList();\n        list.deleteInIndex(0);\n        System.out.println(\"\");\n         list.printList();\n        list.deleteInIndex(0);\n        System.out.println(\"\");\n         list.printList();\n        list.deleteInIndex(0);\n        System.out.println(\"\");\n         list.printList();\n        list.deleteInIndex(0);\n        System.out.println(\"\");\n         list.printList();\n        list.deleteInIndex(0);\n        System.out", "first_line_groundtruth": "list.deleteInIndex(3);", "first_line_prediction": " list.printList();", "match": 0}
{"groundtruth": "while (pointer.getNext() != pointer2) {", "prediction": " pointer2.setNext(null);\n            length--;\n            return pointer2;\n        }\n        \n        return null;\n    }\n    \n    public Nodo deleteInIndex(int index) {\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            if (index == 0) {\n                return deleteBegin();\n            } else {\n                if (index < length) {\n                    if(index == length -1 ){\n                        return deleteFinal();\n                    } else {\n                        Nodo pointer = getHead();\n                        int cont = 0;\n                        while ( cont< index-1) {\n                            pointer", "first_line_groundtruth": "while (pointer.getNext() != pointer2) {", "first_line_prediction": " pointer2.setNext(null);", "match": 0}
{"groundtruth": ".getNext())).getNext() != getHead()) {", "prediction": ".getNext())).getNext() != getHead()) {\n                    pointer = (Nodo) pointer.getNext();\n                }\n                pointer2 = (Nodo) pointer.getNext();\n                pointer.setNext(getHead());\n                pointer2.setNext(getHead());\n                length--;\n            } else {\n                setHead(null);\n                length--;\n            }\n            return pointer2;\n        }\n        return null;\n    }\n    \n    public Nodo deleteBegin(){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2;\n            \n           ", "first_line_groundtruth": ".getNext())).getNext() != getHead()) {", "first_line_prediction": ".getNext())).getNext() != getHead()) {", "match": 1}
{"groundtruth": "int) pointer1.getElement();", "prediction": "pointer1.getInfo());\n                pointer1 = pointer1.getNext();\n            }\n            if (pointer2 != null){\n                value += (pointer2.getInfo());\n                pointer2 = pointer2.getNext();\n            }\n            if (pointer3 != null){\n                value += (pointer3.getInfo());\n                pointer3 = pointer3.getNext();\n            }\n            list.insertFinal(value);\n        }\n        return list;\n    }", "first_line_groundtruth": "int) pointer1.getElement();", "first_line_prediction": "pointer1.getInfo());", "match": 0}
{"groundtruth": "pointer1 = lista1.getHead();", "prediction": " nodo = null;\n        int suma = 0;\n        int contador = 0;\n        while(lista1.getHead() != null && lista2.getHead() != null && lista3.getHead() != null){\n            suma = lista1.getHead().getData() + lista2.getHead().getData() + lista3.getHead().getData();\n            nodo = new Nodo(suma);\n            list.insertFinal(nodo);\n            lista1.removeHead();\n            lista2.removeHead();\n            lista3.removeHead();\n            contador++;\n        }", "first_line_groundtruth": "pointer1 = lista1.getHead();", "first_line_prediction": " nodo = null;", "match": 0}
{"groundtruth": "Nodo pointer3 = lista3.getHead();", "prediction": " Nodo pointer3 = lista3.getHead();\n        while(pointer1 != null && pointer2 != null && pointer3 != null){\n            int suma = pointer1.getData() + pointer2.getData() + pointer3.getData();\n            list.insertFinal(suma);\n            pointer1 = pointer1.getNext();\n            pointer2 = pointer2.getNext();\n            pointer3 = pointer3.getNext();\n        }\n        return list;\n    }", "first_line_groundtruth": "Nodo pointer3 = lista3.getHead();", "first_line_prediction": " Nodo pointer3 = lista3.getHead();", "match": 0}
{"groundtruth": ").setPrevious(node);", "prediction": "node);\n            setHead(node);\n        }\n        setSize(getSize() + 1);\n    }\n\n    @Override\n    public void insertEnd(Object element) {\n        NodoDoble node = new NodoDoble(element);\n        if (isEmpty()) {\n            setHead(node);\n            setTail(node);\n        } else {\n            getTail().setNext(node);\n            setTail(node);\n        }\n        setSize(getSize() + 1);\n    }\n\n    @Override\n    public void insert(int index, Object element) {\n        if (index == 0) {\n           ", "first_line_groundtruth": ").setPrevious(node);", "first_line_prediction": "node);", "match": 0}
{"groundtruth": "node.setPrevious(pointer);", "prediction": " pointer.setNext(node);\n             node.setPrevious(pointer);\n             setTail(node);\n         }\n         size++;\n    }\n\n    @Override\n    public void insert(int index, Object element) {\n        if (index == 0) {\n            insertBegin(element);\n        } else if (index == size) {\n            insertFinal(element);\n        } else {\n            NodoDoble node = new NodoDoble(element);\n            NodoDoble pointer = getHead();\n            for (int i = 0; i < index - 1; i++) {\n                pointer =", "first_line_groundtruth": "node.setPrevious(pointer);", "first_line_prediction": " pointer.setNext(node);", "match": 0}
{"groundtruth": "= (NodoDoble) pointer.getNext();", "prediction": " = pointer.getNext();\n                        cont++;\n                    }\n                    pointer2 = pointer.getNext();\n                    pointer.setNext(pointer2.getNext());\n                    pointer2.setNext(null);\n                    setHead(pointer);\n                }\n            } else {\n                NodoDoble pointer = getTail();\n                if (index == getSize()-1) {\n                    deleteFinal();\n                } else {\n                    NodoDoble pointer2;\n                    int cont = 0;\n                    while ( cont< getSize()-index-1 && pointer != null) {\n                        pointer  = pointer.getPrevious();\n                        cont++;\n                    }\n                   ", "first_line_groundtruth": "= (NodoDoble) pointer.getNext();", "first_line_prediction": " = pointer.getNext();", "match": 0}
{"groundtruth": "pointer2 = pointer.getPrevious();", "prediction": " previous = pointer.getPrevious();\n                previous.setNext(null);\n                setTail(previous);\n            }\n            size--;\n            return pointer;\n        }\n        return null;\n    }", "first_line_groundtruth": "pointer2 = pointer.getPrevious();", "first_line_prediction": " previous = pointer.getPrevious();", "match": 0}
{"groundtruth": "pointer.setPrevious(null);", "prediction": " pointer2.setNext(null);\n                 setTail(pointer2);\n            }\n            size--;\n            return pointer;\n        }\n        return null;\n    }", "first_line_groundtruth": "pointer.setPrevious(null);", "first_line_prediction": " pointer2.setNext(null);", "match": 0}
{"groundtruth": "pointer2 = pointer.getNext();", "prediction": " pointer2 = (NodoDoble) pointer.getNext();\n                     pointer.setNext(pointer2.getNext());\n                     pointer2.setNext(null);\n                     size--;\n                }\n            } else {\n                NodoDoble pointer = getTail();\n                if (index == getSize()-1) {\n                    deleteFinal();\n                } else {\n                    NodoDoble pointer2;\n                    int cont = 0;\n                    while ( cont< getSize()-index-1 && pointer != null) {\n                        pointer = (NodoDoble) pointer.getPrevious();\n                        cont++;\n                    }\n                     pointer", "first_line_groundtruth": "pointer2 = pointer.getNext();", "first_line_prediction": " pointer2 = (NodoDoble) pointer.getNext();", "match": 0}
{"groundtruth": "pointer2.getNext().setPrevious(pointer);", "prediction": " pointer2.setNext(null);\n                    setHead(pointer);\n                }\n            } else {\n                NodoDoble pointer = getTail();\n                if (index == getSize()-1) {\n                    deleteFinal();\n                } else {\n                    NodoDoble pointer2;\n                    int cont = 0;\n                    while ( cont< getSize()-index-1 && pointer != null) {\n                        pointer = (NodoDoble) pointer.getPrevious();\n                        cont++;\n                    }\n                    pointer2 = pointer.getPrevious();\n                    pointer.setPrevious(pointer2.getPrevious());\n                    pointer2.", "first_line_groundtruth": "pointer2.getNext().setPrevious(pointer);", "first_line_prediction": " pointer2.setNext(null);", "match": 0}
{"groundtruth": "emoji.getSubgroup() == subgroup).collect(Collectors.toSet());", "prediction": " emoji.getSubGroup() == subgroup).collect(Collectors.toSet());\n    }\n\n    /**\n     * Gets all emojis that are part of the given category.\n     *\n     * @param category The category to get the emojis for.\n     * @return A set of all emojis that are part of the given category.\n     */\n    public static Set<Emoji> getAllEmojisByCategory(final EmojiCategory category) {\n        return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getCategory() == category).collect(Collectors.toSet());\n    }\n\n    /**\n     * Gets", "first_line_groundtruth": "emoji.getSubgroup() == subgroup).collect(Collectors.toSet());", "first_line_prediction": " emoji.getSubGroup() == subgroup).collect(Collectors.toSet());", "match": 0}
{"groundtruth": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))\n                .findFirst();", "prediction": "(emoji -> emoji.getAllDiscordAliases().contains(aliasWithoutColon) || emoji.getAllDiscordAliases().contains(aliasWithColon))\n                 .findFirst();\n    }\n\n    /**\n     * Gets an emoji for the given unicode.\n     *\n     * @param emoji The unicode of the emoji.\n     * @return The emoji.\n     */\n    public static Optional<Emoji> getByUnicode(final String emoji) {\n        if (isStringNullOrEmpty(emoji)) return Optional.empty();\n        return Optional.ofNullable(EMOJI_UNICODE_TO_EMOJI.get(emoji));\n    }\n\n    /**\n     * Gets all", "first_line_groundtruth": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))", "first_line_prediction": "(emoji -> emoji.getAllDiscordAliases().contains(aliasWithoutColon) || emoji.getAllDiscordAliases().contains(aliasWithColon))", "match": 0}
{"groundtruth": "emoji.getAllAliases().contains(aliasWithoutColon) || emoji.getAllAliases().contains(aliasWithColon))\n                .findFirst();", "prediction": " emoji.getAliases().contains(aliasWithoutColon) || emoji.getAliases().contains(aliasWithColon))\n                 .findFirst();\n    }\n\n    /**\n     * Gets all emojis that match the given pattern.\n     *\n     * @param pattern The pattern to match.\n     * @return A list of all emojis that match the given pattern.\n     */\n    public static List<Emoji> getByPattern(final String pattern) {\n        if (isStringNullOrEmpty(pattern)) return Collections.emptyList();\n        return EMOJI_PATTERN.matcher(pattern).results().stream()\n                 .map(m -> EMOJI_", "first_line_groundtruth": "emoji.getAllAliases().contains(aliasWithoutColon) || emoji.getAllAliases().contains(aliasWithColon))", "first_line_prediction": " emoji.getAliases().contains(aliasWithoutColon) || emoji.getAliases().contains(aliasWithColon))", "match": 0}
{"groundtruth": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());", "prediction": " return new HashSet<>(EMOJIS_LENGTH_DESCENDING.stream()\n                 .filter(emoji -> emoji.getGroup() == group)\n                 .collect(Collectors.toList()));\n    }\n\n    /**\n     * Gets all emojis that are part of the given group.\n     *\n     * @param group The group to get the emojis for.\n     * @return A set of all emojis that are part of the given group.\n     */\n    public static Set<Emoji> getAllEmojisByGroup(final String group) {\n        return new HashSet<>(EMOJIS_LENGTH_DESCENDING.stream()\n               ", "first_line_groundtruth": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());", "first_line_prediction": " return new HashSet<>(EMOJIS_LENGTH_DESCENDING.stream()", "match": 0}
{"groundtruth": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(emoji));", "prediction": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(getEmoji()));\n        final List<Emoji> variations = new ArrayList<>();\n        variations.add(new Emoji(baseEmoji, getUnicode(), getDiscordAliases(), getGithubAliases(), getSlackAliases(), hasFitzpatrick, hasHairStyle, version, qualification, description, group, subgroup));\n        variations.add(new Emoji(baseEmoji, getUnicode(), getDiscordAliases(), getGithubAliases(), getSlackAliases(), hasFitzpatrick, !hasHairStyle, version, qualification, description, group, sub", "first_line_groundtruth": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(emoji));", "first_line_prediction": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(getEmoji()));", "match": 0}
{"groundtruth": "mListener.onCancelledAuth();", "prediction": " mListener.onLoggedOut();\n                }\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(Exception e) {\n                Log.i(TAG, \"cancelAuthorization fail\");\n                if (mListener != null) {\n                    mListener.onException(Constants.CANCEL_AUTHORIZATION_ACTION, e.getMessage());\n                }\n            }\n        });\n    }\n\n    private static void login(int action) {\n        AccountAuthService authService = createAuthService(action);\n        AccountAuthParams params = AccountAuthParamsHelper.createAccountAuthParams(Constants.AUTH_", "first_line_groundtruth": "mListener.onCancelledAuth();", "first_line_prediction": " mListener.onLoggedOut();", "match": 0}
{"groundtruth": "mListener.onLoggedOut();", "prediction": " mListener.onLogOut();\n                }\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(Exception e) {\n                Log.i(TAG, \"signOut Failure\");\n            }\n        });\n    }\n\n    private static void login(int action) {\n        AccountAuthService authService = createAuthService(action);\n        AccountAuthParams params = AccountAuthParamsHelper.createAccountAuthParams(action);\n        Task<AuthAccount> authTask = authService.auth(params);\n        authTask.addOnSuccessListener(new OnSuccessListener<AuthAccount", "first_line_groundtruth": "mListener.onLoggedOut();", "first_line_prediction": " mListener.onLogOut();", "match": 0}
{"groundtruth": "HuaweiPushPlugin.handleReceiveMessage(messageData);", "prediction": " // Check whether the message is empty.\n        if (messageData == null) {\n            Log.e(TAG, \"Received message data is null!\");\n            HuaweiPushPlugin.handleException(Constants.UNKNOWN_ERROR, Constants.ON_MESSAGE_RECEIVED, \"Received null message data\");\n            return;\n        }\n        Log.i(TAG, \"onMessageReceived is called\");\n        try {\n            JSONObject json = new JSONObject(messageData);\n            String messageType = json.getString(\"messageType\");\n            if (messageType.equals(\"notification\")) {\n                String title = json.getString(\"title\");\n                String", "first_line_groundtruth": "HuaweiPushPlugin.handleReceiveMessage(messageData);", "first_line_prediction": " // Check whether the message is empty.", "match": 0}
{"groundtruth": "mAdStatusListener.onRewarded(rewardName, rewardAmount);", "prediction": " mAdStatusListener.onRewarded(rewardAmount, rewardName);\n                        }\n                    }\n                });\n            }", "first_line_groundtruth": "mAdStatusListener.onRewarded(rewardName, rewardAmount);", "first_line_prediction": " mAdStatusListener.onRewarded(rewardAmount, rewardName);", "match": 0}
{"groundtruth": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {", "prediction": "TextUtils.isEmpty(inAppPurchaseDataSignature)) {\n            return new Pair<>(false, null);\n        }\n        InAppPurchaseData inAppPurchaseData = null;\n        try {\n            inAppPurchaseData = InAppPurchaseData.parse(inAppPurchaseDataStr);\n        } catch (Exception e) {\n            Log.e(TAG, \"verifyPurchaseStatus, parse inAppPurchaseDataStr fail, \" + e.getMessage());\n            return new Pair<>(false, null);\n        }\n        if (inAppPurchaseData == null) {\n            Log.e(TAG, \"verifyPurchaseStatus, inAppPurchaseData", "first_line_groundtruth": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {", "first_line_prediction": "TextUtils.isEmpty(inAppPurchaseDataSignature)) {", "match": 0}
{"groundtruth": "iapApiCallback.onFail(e);", "prediction": " iapApiCallback.onFailure(e);\n            }\n        });\n    }\n\n    /**\n     * To start the in-app purchase activity.\n     *\n     * @param activity Activity instance.\n     * @param mClient IapClient instance to call the startIapActivity API.\n     * @param iapApiCallback IapApiCallback.\n     */\n    public static void startIapActivity(Activity activity, IapClient mClient, final IapApiCallback iapApiCallback) {\n        Log.i(TAG, \"call startIapActivity\");\n        Task<StartIapActivityResult> task = m", "first_line_groundtruth": "iapApiCallback.onFail(e);", "first_line_prediction": " iapApiCallback.onFailure(e);", "match": 0}
{"groundtruth": "list.deleteInIndex(6);", "prediction": "\n        \n    }\n    ", "first_line_groundtruth": "list.deleteInIndex(6);", "first_line_prediction": "", "match": 0}
{"groundtruth": "list.deleteInIndex(2);", "prediction": "\n        \n    }\n    ", "first_line_groundtruth": "list.deleteInIndex(2);", "first_line_prediction": "", "match": 0}
{"groundtruth": ").compareTo(cont.getTitular()) < 0) {", "prediction": "cont.getTitular()) < 0) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;", "first_line_groundtruth": ").compareTo(cont.getTitular()) < 0) {", "first_line_prediction": "cont.getTitular()) < 0) {", "match": 0}
{"groundtruth": "out.printf(\"Saldo atualizado: R$%.2f%n\", conta.getSaldo());", "prediction": "out.println(\"Saldo: \" + this.saldo);\n\t\tSystem.out.println(\"Data: \" + sdf.format(date));\n\t\tSystem.out.println(\"****************************************************\");", "first_line_groundtruth": "out.printf(\"Saldo atualizado: R$%.2f%n\", conta.getSaldo());", "first_line_prediction": "out.println(\"Saldo: \" + this.saldo);", "match": 0}
{"groundtruth": ".getTitular().compareTo(cont.getTitular()) > 0) {", "prediction": ".saldo > cont.saldo) {\n\t\t\treturn 1;\n\t\t} else if (this.saldo < cont.saldo) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}", "first_line_groundtruth": ".getTitular().compareTo(cont.getTitular()) > 0) {", "first_line_prediction": ".saldo > cont.saldo) {", "match": 0}
{"groundtruth": "conta.sacar(valor, conta);", "prediction": "", "first_line_groundtruth": "conta.sacar(valor, conta);", "first_line_prediction": "", "match": 0}
{"groundtruth": "printf(\"Saldo atual: R$ %.2f\", conta.getSaldo());", "prediction": "println(\"Dep\u00f3sito efetuado com sucesso!\");\n\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tSystem.out.println(\"Insira o valor da transfer\u00eancia: R$ \");\n\t\t\t\tvalor = sc.nextDouble();", "first_line_groundtruth": "printf(\"Saldo atual: R$ %.2f\", conta.getSaldo());", "first_line_prediction": "println(\"Dep\u00f3sito efetuado com sucesso!\");", "match": 0}
{"groundtruth": "pointer2 = (Nodo) pointer2.getNext();", "prediction": " pointer2 = (Nodo) pointer2.getNext();\n                 cont2++;\n            }\n            if (pointer2 != queue.getHead()){\n                pointer2 = (Nodo) pointer2.getNext();\n            }\n            cont3++;\n            if (pointer2 != null){\n                pointer2 = (Nodo) pointer2.getNext();\n            }\n            cont--;\n        }\n        System.out.println(\"El promedio es:\"+(double)(acum/cont3));\n    }\n    \n    public void Ejercicio2(Queue queue) {\n        Nodo pointer = queue.getHead();\n        int cont = ", "first_line_groundtruth": "pointer2 = (Nodo) pointer2.getNext();", "first_line_prediction": " pointer2 = (Nodo) pointer2.getNext();", "match": 0}
{"groundtruth": "System.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());", "prediction": "", "first_line_groundtruth": "System.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());", "first_line_prediction": "", "match": 0}
{"groundtruth": "(cpfDestinatario.equals(conta.getCpf())) {", "prediction": " (cpfDestinatario.length() != 11) {\n\t\t\t\t\tSystem.out.println(\"Insira um CPF v\u00e1lido.\");\n\t\t\t\t\tSystem.out.printf(\"Insira o CPF do destinat\u00e1rio: \");\n\t\t\t\t\tcpfDestinatario = sc.nextLine();\n\t\t\t\t}", "first_line_groundtruth": "(cpfDestinatario.equals(conta.getCpf())) {", "first_line_prediction": " (cpfDestinatario.length() != 11) {", "match": 0}
{"groundtruth": "conta.transferir(contaDestino, valor, conta);", "prediction": "", "first_line_groundtruth": "conta.transferir(contaDestino, valor, conta);", "first_line_prediction": "", "match": 0}
{"groundtruth": "printf(\"NOME: %s\\t| AG\u00caNCIA: %s\\n\", c.getTitular(), c.getAgencia());", "prediction": "println(c);\n\t\t}\n\t\tSystem.out.println(\"****************************************************\");\n\t\tEscritor.relatorioClientes(conta, funcionario);", "first_line_groundtruth": "printf(\"NOME: %s\\t| AG\u00caNCIA: %s\\n\", c.getTitular(), c.getAgencia());", "first_line_prediction": "println(c);", "match": 0}
{"groundtruth": "etTitular(), c.getAgencia());", "prediction": ".getNome(), c.getAgencia().getNumAgencia());\n\t\t}\n\t\tSystem.out.println(\"****************************************************\");\n\t\tEscritor.relatorioClientes(conta, funcionario);", "first_line_groundtruth": "etTitular(), c.getAgencia());", "first_line_prediction": ".getNome(), c.getAgencia().getNumAgencia());", "match": 0}
{"groundtruth": "Escritor.registroDeDadosAtualizados();", "prediction": "\tSystem.out.println(\"Obrigado por utilizar o sistema!\");\n\t\t\t\t\tSystem.out.println(\"At\u00e9 logo!\");\n\t\t\t\t\tSystem.out.println();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"Op\u00e7\u00e3o inv\u00e1lida!\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (InputMismatchException e) {\n\t\t\tSystem.out.println(\"Op\u00e7\u00e3o inv\u00e1lida!\");\n\t\t}", "first_line_groundtruth": "Escritor.registroDeDadosAtualizados();", "first_line_prediction": "\tSystem.out.println(\"Obrigado por utilizar o sistema!\");", "match": 0}
{"groundtruth": "println(\"Total de saques: \" + conta.getTotalSaques());", "prediction": "println(\"Valor de tarifa cobrado no deposito: R$ \" + ContaCorrente.getTarifaDeposito());\n\t\tSystem.out.println(\"Valor de tarifa cobrado no pagamento: R$ \" + ContaCorrente.getTarifaPagamento());\n\t\tSystem.out.println(\"Valor de tarifa cobrado no saque: R$ \" + ContaCorrente.getTarifaSaque());\n\t\tSystem.out.println(\"Valor de tarifa cobrado no deposito: R$ \" + ContaCorrente.getTarifaDeposit", "first_line_groundtruth": "println(\"Total de saques: \" + conta.getTotalSaques());", "first_line_prediction": "println(\"Valor de tarifa cobrado no deposito: R$ \" + ContaCorrente.getTarifaDeposito());", "match": 0}
{"groundtruth": "capitalBancoSaldo += lista.getSaldo();", "prediction": "\tcapitalBancoSaldo += lista.getSaldo();\n\t\t}\n\t\tSystem.out.printf(\"O valor total do capital do banco \u00e9: R$ %.2f%n\", capitalBancoSaldo);\n\t\tSystem.out.println(\"**************************************************\");\n\t\tSystem.out.println();", "first_line_groundtruth": "capitalBancoSaldo += lista.getSaldo();", "first_line_prediction": "\tcapitalBancoSaldo += lista.getSaldo();", "match": 0}
{"groundtruth": ".out.println(pointer2.getElement());", "prediction": ".out.println(\"El elemento \"+cont3+\" es: \"+pointer2.getElement());\n            pointer2 = (Nodo) pointer2.getNext();\n            cont3++;\n            cont = queue.getSize()-1;\n        }\n    }\n    \n    public void Ejercicio2(Queue queue) {\n        Nodo pointer = queue.getHead();\n        int cont = 0;\n        while (pointer != null) {\n            cont++;\n            pointer = (Nodo) pointer.getNext();\n        }\n        System.out.println(\"El tama\u00f1o de la cola es: \"+cont);\n    }\n    \n    public void", "first_line_groundtruth": ".out.println(pointer2.getElement());", "first_line_prediction": ".out.println(\"El elemento \"+cont3+\" es: \"+pointer2.getElement());", "match": 0}
{"groundtruth": "(\"Valor de tarifa cobrado na tranfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());", "prediction": "(\"Valor de tarifa cobrado no pagamento: R$ \" + ContaCorrente.getTarifaPagamento());\n\t\tSystem.out.println(\"Total de pagamentos: \" + conta.getTotalPagamentos());\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Valor de tarifa cobrado no extrato: R$ \" + ContaCorrente.getTarifaExtrato());\n\t\tSystem.out.println(\"Total de extratos: \" + conta.getTotalExtratos());\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Valor", "first_line_groundtruth": "(\"Valor de tarifa cobrado na tranfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());", "first_line_prediction": "(\"Valor de tarifa cobrado no pagamento: R$ \" + ContaCorrente.getTarifaPagamento());", "match": 0}
{"groundtruth": "conta.imprimeExtrato(conta);", "prediction": "\tEscritor.extrato(conta);\n\t\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tSystem.out.println();\n\t\t\t\tSystem.out.println(\"******** Menu Relat\u00f3rios e Saldo ********\");\n\t\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\t\tSystem.out.println(\"[1] Relat\u00f3rio de informa\u00e7\u00f5es dos clientes do banco\");\n\t\t\t\tSystem.out.println(\"[2] Relat\u00f3rio do capital total armazenado\");\n\t\t\t\tSystem.out.println(\"[3] Retornar ao", "first_line_groundtruth": "conta.imprimeExtrato(conta);", "first_line_prediction": "\tEscritor.extrato(conta);", "match": 0}
{"groundtruth": "= \"Ag\u00eancia: \" + conta.getAgencia();", "prediction": " = \"Agencia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "= \"Ag\u00eancia: \" + conta.getAgencia();", "first_line_prediction": " = \"Agencia: \" + conta.getAgencia();", "match": 0}
{"groundtruth": "= valorSimulado * ((ContaPoupanca.getTaxaRendimento() / 30) * dias);", "prediction": " = 0.0;\n\t\tDouble rendimentoTotal = 0.0;\n\t\tDouble rendimentoMensal = 0.0;\n\t\tDouble rendimentoAnual = 0.0;\n\t\tDouble rendimentoTotalMensal = 0.0;\n\t\tDouble rendimentoTotalAnual = 0.0;\n\t\tDouble rendimentoTotalAnualMensal = 0.0;\n\t\tDouble rendimentoTotalAnualMensalAnual = 0.0;\n\t\tDouble rendimentoTotalAnualMensalAnualAnual = 0.0;\n\t\t", "first_line_groundtruth": "= valorSimulado * ((ContaPoupanca.getTaxaRendimento() / 30) * dias);", "first_line_prediction": " = 0.0;", "match": 0}
{"groundtruth": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();", "prediction": "ate = ContaCorrente.getTarifaSaque() + ContaCorrente.getTarifaDeposito()\n\t\t\t\t+ ContaCorrente.getTarifaTransferencia();\n\t\tdouble saldo = conta.getSaldo();\n\t\tif (saldo >= ate) {\n\t\t\tsaldo -= ate;\n\t\t\tSystem.out.println(\"Saldo: \" + String.format(\"R$ %.2f\", saldo));\n\t\t} else {\n\t\t\tsaldo = 0;\n\t\t\tSystem.out.println(\"Saldo: \" + String.format(\"R$ %.2f", "first_line_groundtruth": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();", "first_line_prediction": "ate = ContaCorrente.getTarifaSaque() + ContaCorrente.getTarifaDeposito()", "match": 0}
{"groundtruth": "ag.getNumAgencia());", "prediction": " ag.getNumAgencia() + \";\" + ag.getNome() + \";\" + ag.getEndereco() + \";\"\n\t\t\t\t\t\t+ ag.getCidade() + \";\" + ag.getEstado() + \";\" + ag.getTelefone() + \";\" + ag.getCep() + \"\\n\");\n\t\t\t}", "first_line_groundtruth": "ag.getNumAgencia());", "first_line_prediction": " ag.getNumAgencia() + \";\" + ag.getNome() + \";\" + ag.getEndereco() + \";\"", "match": 0}
{"groundtruth": ").getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();", "prediction": "ContasEnum.CLIENTE).getNome() + \"_\" + conta.getTitular(ContasEnum.CLIENTE).getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();", "first_line_groundtruth": ").getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();", "first_line_prediction": "ContasEnum.CLIENTE).getNome() + \"_\" + conta.getTitular(ContasEnum.CLIENTE).getTipoDeUsuario();", "match": 0}
{"groundtruth": "queue.getSize()){", "prediction": "10){\n                cont3 = 0;\n                pointer2 = (Nodo) pointer2.getNext();\n            }\n        }\n    }\n    \n    public void Ejercicio2(Queue queue) {\n        Nodo pointer = queue.getHead();\n        int cont = 0;\n        while (pointer != null) {\n            cont++;\n            pointer = (Nodo) pointer.getNext();\n        }\n        System.out.println(\"El tama\u00f1o de la cola es: \"+cont);\n    }\n    \n    public void Ejercicio3(Queue queue) {\n        Nodo pointer = queue.getHead();", "first_line_groundtruth": "queue.getSize()){", "first_line_prediction": "10){", "match": 0}
{"groundtruth": "= (Nodo) queue.getHead().getNext();", "prediction": " = (Nodo) pointer2.getNext();\n        }\n    }\n    \n    public void Ejercicio2(Queue queue) {\n        Nodo pointer = queue.getHead();\n        int cont = 0;\n        while (pointer != null) {\n            cont++;\n            pointer = (Nodo) pointer.getNext();\n        }\n        System.out.println(\"El tama\u00f1o de la cola es: \"+cont);\n    }\n    \n    public void Ejercicio3(Queue queue) {\n        Nodo pointer = queue.getHead();\n        int cont = 0;\n        while (pointer != null) {", "first_line_groundtruth": "= (Nodo) queue.getHead().getNext();", "first_line_prediction": " = (Nodo) pointer2.getNext();", "match": 0}
{"groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia();", "prediction": " \"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia();", "first_line_prediction": " \"Ag\u00eancia: \" + conta.getAgencia();", "match": 0}
{"groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";", "prediction": "ContasEnum.CONTA_CORRENTE) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_comprovanteTransferencia\";", "first_line_groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";", "first_line_prediction": "ContasEnum.CONTA_CORRENTE) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado", "match": 0}
{"groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";", "prediction": "", "first_line_groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";", "first_line_prediction": "", "match": 0}
{"groundtruth": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";", "prediction": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_extratoConta\";", "first_line_groundtruth": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";", "first_line_prediction": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_extratoConta\";", "match": 0}
{"groundtruth": "conta.getTipoDeConta();", "prediction": "1;\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "conta.getTipoDeConta();", "first_line_prediction": "1;", "match": 0}
{"groundtruth": "\"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());", "prediction": " \"Nome: \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "\"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());", "first_line_prediction": " \"Nome: \" + conta.getTitular().getNome();", "match": 0}
{"groundtruth": "conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();", "prediction": " conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();", "first_line_prediction": " conta.getAgencia();", "match": 0}
{"groundtruth": "+ conta.imprimeCPF(conta.getCpf());", "prediction": " + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "+ conta.imprimeCPF(conta.getCpf());", "first_line_prediction": " + conta.getCpf();", "match": 0}
{"groundtruth": "+ conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();", "prediction": " + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "+ conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();", "first_line_prediction": " + conta.getAgencia();", "match": 0}
{"groundtruth": "Extrato listaMovimentacao : conta.getlistaDeMovimentacoes()) {", "prediction": "int i = 0; i < 10; i++) {\n\t\t\t\tlinha = \"Dia: \" + i + \" | Valor: R$\" + conta.getSaldo(i);\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\t\t\tbw.append(\"\\n\");", "first_line_groundtruth": "Extrato listaMovimentacao : conta.getlistaDeMovimentacoes()) {", "first_line_prediction": "int i = 0; i < 10; i++) {", "match": 0}
{"groundtruth": "linha = \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());", "prediction": "\n\t\t\tlinha = \"Valor total de dep\u00f3sitos = R$\" + String.format(\"%.2f\", ((ContaCorrente) conta).getTotalDepositos());\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "linha = \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());", "first_line_prediction": "", "match": 0}
{"groundtruth": ") + \"_\" + conta.getTitular().getTipoDeUsuario();", "prediction": "conta.getTitular().getTipoDeUsuario());\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();", "first_line_groundtruth": ") + \"_\" + conta.getTitular().getTipoDeUsuario();", "first_line_prediction": "conta.getTitular().getTipoDeUsuario());", "match": 0}
{"groundtruth": "= \"Agencia: \" + conta.getAgencia();", "prediction": " = \"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "= \"Agencia: \" + conta.getAgencia();", "first_line_prediction": " = \"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());", "match": 0}
{"groundtruth": "linha = \"Tipo: \" + conta.getTipoDeConta();", "prediction": "\n\t\t\tlinha = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "linha = \"Tipo: \" + conta.getTipoDeConta();", "first_line_prediction": "", "match": 0}
{"groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";", "prediction": "conta.getCpf()) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";", "first_line_groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";", "first_line_prediction": "conta.getCpf()) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";", "match": 0}
{"groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";", "prediction": "\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"\n\t\t\t\t\t+ \"rendimentDaPoupanca\";", "first_line_groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado", "first_line_prediction": "\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"", "match": 0}
{"groundtruth": "\"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));", "prediction": " \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "\"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));", "first_line_prediction": " \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());", "match": 0}
{"groundtruth": "= \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();", "prediction": " = \"CPF = \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "= \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();", "first_line_prediction": " = \"CPF = \" + conta.getCpf();", "match": 0}
{"groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();", "prediction": " \"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();", "first_line_prediction": " \"Ag\u00eancia: \" + conta.getAgencia();", "match": 0}
{"groundtruth": "= \"Total gasto em transa\u00e7\u00f5es = R$\" + conta.getTotalTarifas();", "prediction": " = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "= \"Total gasto em transa\u00e7\u00f5es = R$\" + conta.getTotalTarifas();", "first_line_prediction": " = \"Tipo: \" + conta.getTipoDeConta();", "match": 0}
{"groundtruth": "\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());", "prediction": "Locale.US, \"%.2f\", conta.getTotalGastoTributos());\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}", "first_line_groundtruth": "\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());", "first_line_prediction": "Locale.US, \"%.2f\", conta.getTotalGastoTributos());", "match": 0}
{"groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";", "prediction": "cliente) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"\n\t\t\t\t\t+ \"rendimentDaPoupanca\";", "first_line_groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado", "first_line_prediction": "cliente) + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"", "match": 0}
{"groundtruth": "linha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();", "prediction": "\n\t\t\tlinha = \"Taxa para pagamento = \" + ContaCorrente.getTarifaPagamento();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "linha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();", "first_line_prediction": "", "match": 0}
{"groundtruth": "= \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();", "prediction": " = \"Total gasto em tributos = R$\" + String.format(\"%.2f\", conta.getTotalTarifas());\n\t\t\tbw.append(linha + \"\\n\\n\");", "first_line_groundtruth": "= \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();", "first_line_prediction": " = \"Total gasto em tributos = R$\" + String.format(\"%.2f\", conta.getTotalTarifas());", "match": 0}
{"groundtruth": "= \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();", "prediction": " = \"Taxa para transfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "= \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();", "first_line_prediction": " = \"Taxa para transfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();", "match": 0}
{"groundtruth": "\"Total de saques realizados = \" + conta.getTotalSaques();", "prediction": " \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();\n\t\t\tbw.append(linha + \"\\n\");", "first_line_groundtruth": "\"Total de saques realizados = \" + conta.getTotalSaques();", "first_line_prediction": " \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();", "match": 0}
{"groundtruth": "\"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();", "prediction": " \"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencias();\n\t\t\tbw.append(linha + \"\\n\\n\");", "first_line_groundtruth": "\"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();", "first_line_prediction": " \"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencias();", "match": 0}
{"groundtruth": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));", "prediction": " json = new JsonObject();\n        json.addProperty(\"id\", id);\n        json.addProperty(\"type\", \"ping\");\n        JsonArray serversArray = new JsonArray();\n        for (CHServer server : servers) {\n            JsonObject serverObject = new JsonObject();\n            serverObject.addProperty(\"ip\", server.getIp());\n            serverObject.addProperty(\"port\", server.getPort());\n            serversArray.add(serverObject);\n        }\n        json.add(\"servers\", serversArray);\n        String jsonString = json.toString();\n        String encodedJsonString = URLEncoder.encode(jsonString, StandardCharsets.UTF_8.", "first_line_groundtruth": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));", "first_line_prediction": " json = new JsonObject();", "match": 0}
{"groundtruth": "cookieStore.appendCookies(builder).build();", "prediction": " builder.header(\"Cookie\", cookieStore.toString())\n                .header(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\")\n                .header(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8", "first_line_groundtruth": "cookieStore.appendCookies(builder).build();", "first_line_prediction": " builder.header(\"Cookie\", cookieStore.toString())", "match": 0}
{"groundtruth": "cookieStore.mergeFromResponse(response);", "prediction": " cookieStore.updateCookies(response);\n    }", "first_line_groundtruth": "cookieStore.mergeFromResponse(response);", "first_line_prediction": " cookieStore.updateCookies(response);", "match": 0}
{"groundtruth": "new FXMLLoader(DownfallUtil.getInstance().getURLDownfallMainFXML());", "prediction": " new FXMLLoader(DownfallMain.class.getResource(\"/fxml/main.fxml\"));\n        loader.setController(new DownfallMainController());\n        Scene scene = new Scene(loader.load());\n        stage.setScene(scene);\n        stage.show();\n    }", "first_line_groundtruth": "new FXMLLoader(DownfallUtil.getInstance().getURLDownfallMainFXML());", "first_line_prediction": " new FXMLLoader(DownfallMain.class.getResource(\"/fxml/main.fxml\"));", "match": 0}
{"groundtruth": "selectedProperty()  .unbindBidirectional(tag.isFactionalProperty());", "prediction": "selectedProperty().unbindBidirectional(tag.isFactionalProperty());\n    }\n\n    /**\n     * Binds the properties of a given tag to all TextFields and CheckBoxes.\n     * @param tag Tag to be bound.\n     */\n    private void displayTag(Tag tag) {\n        tagTextField.textProperty()              .bindBidirectional(tag.tagProperty());\n        isFactionalCheckBox.selectedProperty().bindBidirectional(tag.isFactionalProperty());\n    }", "first_line_groundtruth": "selectedProperty()  .unbindBidirectional(tag.isFactionalProperty());", "first_line_prediction": "selectedProperty().unbindBidirectional(tag.isFactionalProperty());", "match": 0}
{"groundtruth": ", null, null, defConstructionCost, null, defConstructionTime, operatesImmediately, Configurator.getInstance().getDefBuildingGFXPathname());", "prediction": ", defConstructionCost, defConstructionTime, operatesImmediately, null);\n    }\n\n    /**\n     *\n     * @param id unique identifier used to differentiate different templates\n     * @param name a human-readable name of the template.\n     * @param defConstructionCost construction cost per turn of construction\n     * @param defConstructionTime number of turns it takes to construct a building\n     * @param operatesImmediately does the building operate immediately or do you need to finish its construction\n     * @param pathToGFX a path to the GFX of the building\n     */\n    public VisualBuildingTemplate(Integer id, String name", "first_line_groundtruth": ", null, null, defConstructionCost, null, defConstructionTime, operatesImmediately, Configurator.getInstance().getDefBuildingGFXPathname());", "first_line_prediction": ", defConstructionCost, defConstructionTime, operatesImmediately, null);", "match": 0}
{"groundtruth": ").setUserRealm(savegame.getUserRealm());", "prediction": "savegame.getRules().getRuleset()).setLastSavegamePathname(pathname);\n            Configurator.getInstance(savegame.getRules().getRuleset()).setLastSavegame(savegame);\n            Configurator.getInstance(savegame.getRules().getRuleset()).applyRules(savegame.getRules());\n        } catch (JAXBException | IOException e) {\n            Logger.getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.SEVERE,\"Failed to load savegame from path: \"+pathname,e);\n        }\n    }\n\n    /**\n     * Saves the current savegame to the last pathname used", "first_line_groundtruth": ").setUserRealm(savegame.getUserRealm());", "first_line_prediction": "savegame.getRules().getRuleset()).setLastSavegamePathname(pathname);", "match": 0}
{"groundtruth": ").loadAndApplyRules(savegame.getPathToRules());", "prediction": "savegame.getUserRealm()).setLastSavegamePathname(pathname);\n            Configurator.getInstance(savegame.getUserRealm()).setLastSavegameDate(savegame.getDate());\n            Configurator.getInstance(savegame.getUserRealm()).setLastSavegameVersion(savegame.getVersion());\n            Configurator.getInstance(savegame.getUserRealm()).setLastSavegameRules(savegame.getRules());\n            Configurator.getInstance(savegame.getUserRealm()).setLastSavegameRulesVersion(savegame.getRulesVersion());\n            Configurator.getInstance(savegame.getUserRealm()).setLastSavegameRulesDate(savegame.", "first_line_groundtruth": ").loadAndApplyRules(savegame.getPathToRules());", "first_line_prediction": "savegame.getUserRealm()).setLastSavegamePathname(pathname);", "match": 0}
{"groundtruth": "this.pathToGFXProperty.setValue(Configurator.getInstance().getDefBuildingGFXPathname());", "prediction": " this.GFX = null;\n    }\n\n    /**\n     *\n     * @return the path to the GFX file\n     */\n    @XmlElement(name=\"path-to-gfx\")\n    public String getPathToGFX() {\n        return pathToGFXProperty.getValue();\n    }\n\n    /**\n     *\n     * @param pathToGFX the path to the GFX file\n     */\n    public void setPathToGFX(String pathToGFX) {\n        this.pathToGFXProperty.setValue(pathToGFX);\n    }\n\n    /**\n     *\n     * @return the GFX Image\n     */\n    @XmlElement(name=\"gfx\")", "first_line_groundtruth": "this.pathToGFXProperty.setValue(Configurator.getInstance().getDefBuildingGFXPathname());", "first_line_prediction": " this.GFX = null;", "match": 0}
{"groundtruth": "configurator.loadAndApplyRules();", "prediction": "\n\n        FXMLLoader loader = new FXMLLoader(DownfallMain.class.getResource(\"/fxml/main/main.fxml\"));\n        loader.setController(new DownfallMainController());\n        Scene scene = new Scene(loader.load());\n        stage.setScene(scene);\n        stage.initStyle(StageStyle.UNDECORATED);\n        stage.show();\n    }", "first_line_groundtruth": "configurator.loadAndApplyRules();", "first_line_prediction": "", "match": 0}
{"groundtruth": "configurator.saveRules();", "prediction": " DownfallUtil.saveConfiguration();\n        });\n\n        FXMLLoader loader = new FXMLLoader(DownfallMain.class.getResource(\"/fxml/main.fxml\"));\n        loader.setController(new DownfallMainController());\n        Scene scene = new Scene(loader.load());\n        stage.setScene(scene);\n        stage.show();\n    }", "first_line_groundtruth": "configurator.saveRules();", "first_line_prediction": " DownfallUtil.saveConfiguration();", "match": 0}
{"groundtruth": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.SEVERE, \"No Template found for id = \"+material.getTemplateId());", "prediction": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.WARNING, \"No ID found for template with id = \"+material.getTemplateId());\n        }\n        return list.size() > 0 ? list.get(0) : null;\n    }", "first_line_groundtruth": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.SEVERE, \"No Template found for id = \"+material.getTemplateId());", "first_line_prediction": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.WARNING, \"No ID found for template with id = \"+material.getTemplateId());", "match": 0}
{"groundtruth": "= Configurator.getInstance();", "prediction": " = Configurator.getInstance();\n        configurator.load();\n\n        FXMLLoader loader = new FXMLLoader(DownfallMain.class.getResource(\"/fxml/main/main.fxml\"));\n        loader.setController(new DownfallMainController());\n        Scene scene = new Scene(loader.load());\n        stage.setScene(scene);\n        stage.initStyle(StageStyle.UNDECORATED);\n        stage.show();\n    }", "first_line_groundtruth": "= Configurator.getInstance();", "first_line_prediction": " = Configurator.getInstance();", "match": 0}
{"groundtruth": ", defImportPrice, isExportable, isEphemeral, Configurator.getInstance().getDefMaterialGFXPathname());", "prediction": ", defImportPrice, isExportable, isEphemeral, MaterialGFXPathname.DEFAULT_MATERIAL_GFX_PATHNAME);\n    }\n\n    /**\n     * Initializes pathToGFX to the default MaterialGFXPathname defined in the current configuration.\n     * @param name Human-readable name of the materials to be generated with this template\n     * @param id Unique identifier used to differentiate different material templates\n     * @param defExportPrice Default export price\n     * @param defImportPrice Default import price\n     * @param isExportable Value that determines if the material will be exportable from the realm\n     * @param is", "first_line_groundtruth": ", defImportPrice, isExportable, isEphemeral, Configurator.getInstance().getDefMaterialGFXPathname());", "first_line_prediction": ", defImportPrice, isExportable, isEphemeral, MaterialGFXPathname.DEFAULT_MATERIAL_GFX_PATHNAME);", "match": 0}
{"groundtruth": "DownfallUtil.getInstance().loadImage(item));", "prediction": "DownfallUtil.getImage(item));\n                    }\n                    super.updateItem(item, empty);\n                }\n            };\n            return cell;\n        });\n    }", "first_line_groundtruth": "DownfallUtil.getInstance().loadImage(item));", "first_line_prediction": "DownfallUtil.getImage(item));", "match": 0}
{"groundtruth": "()  .bindBidirectional(tag.isFactionalProperty());", "prediction": "()  .bindBidirectional(tag.isFactionalProperty());\n    }", "first_line_groundtruth": "()  .bindBidirectional(tag.isFactionalProperty());", "first_line_prediction": "()  .bindBidirectional(tag.isFactionalProperty());", "match": 1}
{"groundtruth": ".unbindBidirectional(tag.tagProperty());", "prediction": " .unbindBidirectional(tag.tagProperty());\n        isFactionalCheckBox.selectedProperty().unbindBidirectional(tag.isFactionalProperty());\n    }\n\n    /**\n     * Binds the properties of a given tag to all TextFields and CheckBoxes.\n     * @param tag Tag to be bound.\n     */\n    private void displayTag(Tag tag) {\n        tagTextField.textProperty()              .bindBidirectional(tag.tagProperty());\n        isFactionalCheckBox.selectedProperty().bindBidirectional(tag.isFactionalProperty());\n    }", "first_line_groundtruth": ".unbindBidirectional(tag.tagProperty());", "first_line_prediction": " .unbindBidirectional(tag.tagProperty());", "match": 0}
{"groundtruth": "(relativisor.relativize());", "prediction": "(relativisor.relativize(DownfallUtil.getInstallationDirectory()));\n                } else {\n                    Logger.getLogger(ImageChooserButton.class.getName()).log(Level.SEVERE, \"No file chosen\");\n                }\n        });\n    }", "first_line_groundtruth": "(relativisor.relativize());", "first_line_prediction": "(relativisor.relativize(DownfallUtil.getInstallationDirectory()));", "match": 0}
{"groundtruth": "tag.setTag(\"New Tag\");", "prediction": " //set the new instance's name to be the name of the last item in that list\n        tag.setName(Configurator.getInstance().getRules().getMaterialTemplates().get(Configurator.getInstance().getRules().getMaterialTemplates().size()-1).getName());\n        return tag;\n    }", "first_line_groundtruth": "tag.setTag(\"New Tag\");", "first_line_prediction": " //set the new instance's name to be the name of the last item in that list", "match": 0}
{"groundtruth": "Configurator.getInstance().getUserRealm();", "prediction": " DownfallUtil.getUserRealm();\n        realmNameLabel.setText(userRealm.getName());\n        realmImageView.setImage(new Image(Configurator.getRealmImagePath(userRealm.getName())));\n        realmPane.setPrefHeight(IMAGE_PANE_HEIGHT + IMAGE_PANE_GAP);\n\n        //update user realm's tags\n        realmTags.clear();\n        realmTags.addAll(userRealm.getTags());\n        realmTagListView.setItems(realmTags);\n\n        //update user realm's non-realm tags\n        nonRealmTags.clear();\n        nonRealmTags.addAll(userRealm.getNonRealm", "first_line_groundtruth": "Configurator.getInstance().getUserRealm();", "first_line_prediction": " DownfallUtil.getUserRealm();", "match": 0}
{"groundtruth": "tag.setId(1);", "prediction": " //set the new instance's id to be one\n            tag.setId(1);\n        return tag;\n    }", "first_line_groundtruth": "tag.setId(1);", "first_line_prediction": " //set the new instance's id to be one", "match": 0}
{"groundtruth": ".setText(userRealm.getDiplomaticReputation().toString());", "prediction": " .setText(userRealm.getDiplomaticReputation());\n        prestigeLabel            .setText(userRealm.getPrestige());\n        legitimacyLabel          .setText(userRealm.getLegitimacy());\n        powerProjectionLabel     .setText(userRealm.getPowerProjection());\n        nuicpLabel               .setText(userRealm.getNuicp());\n        govRankLabel             .setText(userRealm.getGovernmentRank());\n        infamyLabel              .setText(userRealm.getInfamy());\n        nationalUnrestLabel      .setText(userRealm.getNationalUnrest());", "first_line_groundtruth": ".setText(userRealm.getDiplomaticReputation().toString());", "first_line_prediction": " .setText(userRealm.getDiplomaticReputation());", "match": 0}
{"groundtruth": "configurator.loadConfiguration();", "prediction": " // load the fxml file and create a new stage for the popup dialog\n        FXMLLoader loader = new FXMLLoader(DownfallMain.class.getResource(\"/fxml/main.fxml\"));\n        loader.setController(new DownfallMainController());\n        Scene scene = new Scene(loader.load());\n        stage.initStyle(StageStyle.TRANSPARENT);\n        stage.setScene(scene);\n        stage.show();\n        stage.setAlwaysOnTop(true);\n        stage.toFront();\n        stage.setOpacity(0.0);\n        stage.setX(0);\n        stage.set", "first_line_groundtruth": "configurator.loadConfiguration();", "first_line_prediction": " // load the fxml file and create a new stage for the popup dialog", "match": 0}
{"groundtruth": ".setValue(template.getId());", "prediction": ".set(template.getId());\n        amountProperty.set(amount);\n    }\n\n    /**\n     * @return The ID of this material\n     */\n    @XmlElement(name=\"id\")\n    public IntegerProperty idProperty() {\n        return idProperty;\n    }\n\n    /**\n     * @return The amount of this material\n     */\n    @XmlElement(name=\"amount\")\n    public IntegerProperty amountProperty() {\n        return amountProperty;\n    }\n\n    /**\n     * @return The amount of this material\n     */\n    public int getAmount() {\n        return amountProperty.get();\n    }\n\n    /**\n     * @param amount The amount of", "first_line_groundtruth": ".setValue(template.getId());", "first_line_prediction": ".set(template.getId());", "match": 0}
{"groundtruth": "= FXCollections.observableList(Configurator.getInstance().getRules().getActorTags());", "prediction": " = FXCollections.observableArrayList(Configurator.getTags());\n\n        //setting up table editor\n        tagTableEditor.setTable(tags);\n        tagTableEditor.setFetcher(new SimpleTagFetcher(tags));\n        tagTableEditor.setEditable(true);\n        tagTableEditor.setAddButtonVisible(true);\n        tagTableEditor.setRemoveButtonVisible(true);\n        tagTableEditor.setAddButtonAction(e -> {\n            Tag tag = new Tag();\n            tag.setName(tagTextField.getText());\n            tag.setFactional(isFactionalCheckBox.isSelected());\n            tags.add(tag);", "first_line_groundtruth": "= FXCollections.observableList(Configurator.getInstance().getRules().getActorTags());", "first_line_prediction": " = FXCollections.observableArrayList(Configurator.getTags());", "match": 0}
{"groundtruth": "legitimacyLabel         .setText(userRealm.getLegitimacy().toString());", "prediction": "\n\n        //update ImageViews\n        realmImageView.setImage(new Image(DownfallUtil.getResourcePath(userRealm.getRealmImage())));\n        dynastyImageView.setImage(new Image(DownfallUtil.getResourcePath(userRealm.getDynastyImage())));\n\n        //update stability\n        stabilityCirclePane.setStyle(\"-fx-background-image: url('\" + DownfallUtil.getResourcePath(userRealm.getStabilityImage()) + \"');\");\n        stabilityPerMonthLabel.setText(userRealm.getStabilityPerMonth().toString());\n\n        //update stability grid\n        negStabilityPane1.setStyle(\"-fx-background", "first_line_groundtruth": "legitimacyLabel         .setText(userRealm.getLegitimacy().toString());", "first_line_prediction": "", "match": 0}
{"groundtruth": ".pathToGFXProperty.setValue(Configurator.getInstance().getDefMaterialGFXPathname());", "prediction": ".GFX = null;\n    }\n\n    /**\n     *\n     * @return StringProperty that holds the path to the GFX image\n     */\n    @XmlElement(name=\"path-to-gfx\")\n    public StringProperty pathToGFXProperty() {\n        return pathToGFXProperty;\n    }\n\n    /**\n     *\n     * @return String that holds the path to the GFX image\n     */\n    public String getPathToGFX() {\n        return pathToGFXProperty.getValue();\n    }\n\n    /**\n     *\n     * @param pathToGFX String that holds the path to the GFX image\n     */\n    public void setPathToGFX", "first_line_groundtruth": ".pathToGFXProperty.setValue(Configurator.getInstance().getDefMaterialGFXPathname());", "first_line_prediction": ".GFX = null;", "match": 0}
{"groundtruth": "setLegitimacy(realm.getLegitimacy());", "prediction": "setGold(realm.getGold());\n        userRealm.setMaterials(realm.getMaterials());\n        userRealm.setBuildings(realm.getBuildings());\n        userRealm.setVisualMaterials(realm.getVisualMaterials());\n        userRealm.setVisualBuildings(realm.getVisualBuildings());\n    }\n\n    /**\n     * NOT a lightweight mutator method, executes save configuration when called.\n     * @param lastRulesPathname Pathname to the last loaded rules.\n     */\n    public void setLastRulesPathname(String lastRulesPathname) {\n        configuration.setLastRulesPathname(new Path", "first_line_groundtruth": "setLegitimacy(realm.getLegitimacy());", "first_line_prediction": "setGold(realm.getGold());", "match": 0}
{"groundtruth": "(s -> s.gameVersion().equals(gameVersion)).toList();", "prediction": "(s -> s.version().gameVersion().equals(gameVersion)).toList();\n    }\n\n    public List<BCServerInfo> withGameVersion(final BCVersion gameVersion) {\n        return this.servers().stream().filter(s -> s.version().gameVersion().equals(gameVersion)).toList();\n    }\n\n    public List<BCServerInfo> withGameVersion(final BCGameVersion gameVersion) {\n        return this.servers().stream().filter(s -> s.version().gameVersion().equals(gameVersion)).toList();\n    }\n\n    public List<BCServerInfo> withGameVersion(final BC", "first_line_groundtruth": "(s -> s.gameVersion().equals(gameVersion)).toList();", "first_line_prediction": "(s -> s.version().gameVersion().equals(gameVersion)).toList();", "match": 0}
{"groundtruth": "BCVersion.fromString(versionIdentifier);", "prediction": " BCVersion.fromIdentifier(versionIdentifier);\n\n            servers.add(new BCServerInfo(host, port, version));\n        }\n\n        return new BCServerList(servers);\n    }\n\n    public List<BCServerInfo> getServers() {\n        return Collections.unmodifiableList(servers);\n    }", "first_line_groundtruth": "BCVersion.fromString(versionIdentifier);", "first_line_prediction": " BCVersion.fromIdentifier(versionIdentifier);", "match": 0}
{"groundtruth": "joinServerInterface.sendAuthRequest(sha1(server.getBytes()));", "prediction": " final URL url = new URL(GET_MP_PASS.toString());\n             final InputStream in = url.openStream();\n             final Scanner scanner = new Scanner(in);", "first_line_groundtruth": "joinServerInterface.sendAuthRequest(sha1(server.getBytes()));", "first_line_prediction": " final URL url = new URL(GET_MP_PASS.toString());", "match": 0}
{"groundtruth": "userRealm.setPowerProjection(realm.getPowerProjection());", "prediction": " userRealm.setDiplomaticReputation(realm.getDiplomaticReputation());\n        userRealm.setDiplomaticReputation(realm.getDiplomaticReputation());\n        userRealm.setDiplomaticReputation(realm.getDiplomaticReputation());\n        userRealm.setDiplomaticReputation(realm.getDiplomaticReputation());\n        userRealm.setDiplomaticReputation(realm.getDiplomaticReputation());\n        userRealm.setDiplomaticReputation(realm.getDiplomaticReputation());\n        userRealm.setDiplomaticRe", "first_line_groundtruth": "userRealm.setPowerProjection(realm.getPowerProjection());", "first_line_prediction": " userRealm.setDiplomaticReputation(realm.getDiplomaticReputation());", "match": 0}
{"groundtruth": "loadAndApplyRules(configuration.getLastRulesPathname());", "prediction": " try {\n             rules = loadRules(DEFAULT_RULES_PATH);\n         } catch (IOException e) {\n             Logger.getLogger(Configurator.class.getName()).log(Level.SEVERE, \"Failed to load default rules\", e);\n         }", "first_line_groundtruth": "loadAndApplyRules(configuration.getLastRulesPathname());", "first_line_prediction": " try {", "match": 0}
{"groundtruth": ".setRulerPathToGFX(realm.getRulerPathToGFX());", "prediction": ".setRealmPathToRules(realm.getRealmPathToRules());\n        userRealm.setRealmPathToMaterials(realm.getRealmPathToMaterials());\n        userRealm.setRealmPathToBuildings(realm.getRealmPathToBuildings());\n        userRealm.setRealmPathToVisualMaterials(realm.getRealmPathToVisualMaterials());\n        userRealm.setRealmPathToVisualBuildings(realm.getRealmPathToVisualBuildings());\n        userRealm.setRealmPathToVisualRules(realm.getRealmPathToVisualRules());\n        userRealm.setRealmPathToVisualRules(realm.", "first_line_groundtruth": ".setRulerPathToGFX(realm.getRulerPathToGFX());", "first_line_prediction": ".setRealmPathToRules(realm.getRealmPathToRules());", "match": 0}
{"groundtruth": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(),    new NumberStringConverter());", "prediction": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(), new NumberStringConverter());\n        prestigeTextField.textProperty()         .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());\n        legitimacyTextField.textProperty()      .bindBidirectional(realm.legitimacyProperty(),             new NumberStringConverter());\n        powerProjectionTextField.textProperty().bindBidirectional(realm.powerProjectionProperty(),        new NumberStringConverter());\n        infamyTextField.textProperty()          .bindBidirectional(realm.infamyProperty(),                  new NumberString", "first_line_groundtruth": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(),    new NumberStringConverter());", "first_line_prediction": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(), new NumberStringConverter());", "match": 0}
{"groundtruth": "textProperty()        .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());", "prediction": "textProperty()         .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());\n        stabilityTextField.textProperty()         .bindBidirectional(realm.stabilityProperty(),                new NumberStringConverter());\n        infamyTextField.textProperty()           .bindBidirectional(realm.infamyProperty(),                  new NumberStringConverter());\n        rulerGFXTextField.textProperty()         .bindBidirectional(realm.rulerGraphicProperty(),             new LogoTableColumn.LogoStringConverter());\n        realmGFXTextField.textProperty()          .bindBidirectional(realm.graphicProperty(),                 new LogoTableColumn.Logo", "first_line_groundtruth": "textProperty()        .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());", "first_line_prediction": "textProperty()         .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());", "match": 0}
{"groundtruth": "prompter.findCommand(commandText, commands);", "prediction": " commands.get().stream().filter(c -> c.getCommand().equals(commandText)).findFirst().orElse(null);", "first_line_groundtruth": "prompter.findCommand(commandText, commands);", "first_line_prediction": " commands.get().stream().filter(c -> c.getCommand().equals(commandText)).findFirst().orElse(null);", "match": 0}
{"groundtruth": ", prompter.getSystemPrompt(commands));", "prediction": " + \" \", userInput);\n\t\tmessages.add(systemMessage);\n\t\treturn messages;", "first_line_groundtruth": ", prompter.getSystemPrompt(commands));", "first_line_prediction": " + \" \", userInput);", "match": 0}
{"groundtruth": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());", "prediction": "textProperty()        .bindBidirectional(materialTemplate.pathToGFXProperty());\n        exportPriceTextField.textProperty()      .bindBidirectional(materialTemplate.defExportPriceProperty());\n        importPriceTextField.textProperty()      .bindBidirectional(materialTemplate.defImportPriceProperty());\n    }\n\n    /**\n     * Validates the material template to ensure that the user has not entered invalid data.\n     * @param template template to be validated.\n     * @return true if the material template is valid, false otherwise.\n     */\n    private boolean validateMaterial(VisualMaterialTemplate template) {\n        return template.nameProperty", "first_line_groundtruth": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());", "first_line_prediction": "textProperty()        .bindBidirectional(materialTemplate.pathToGFXProperty());", "match": 0}
{"groundtruth": "return DEFAULT_SYSTEM_PROMPT.replaceAll(PREFIX_TEMPLATE, delimiter.getPrefix())//\n\t\t\t\t.replaceAll(POSTFIX_TEMPLATE, delimiter.getPostfix());", "prediction": "\treturn DEFAULT_SYSTEM_PROMPT.replace(PREFIX_TEMPLATE, delimiter.getPrefix()) //\n\t\t\t\t\t.replace(POSTFIX_TEMPLATE, delimiter.getPostfix()) //\n\t\t\t\t\t.replace(COMMAND_LIST_TEMPLATE, getCommandListTemplate(delimiter));", "first_line_groundtruth": "return DEFAULT_SYSTEM_PROMPT.replaceAll(PREFIX_TEMPLATE, delimiter.getPrefix())//", "first_line_prediction": "\treturn DEFAULT_SYSTEM_PROMPT.replace(PREFIX_TEMPLATE, delimiter.getPrefix()) //", "match": 0}
{"groundtruth": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());", "prediction": ".textProperty()         .bindBidirectional(realm.rulerPathToGFXProperty());\n\n        //bind stockpile\n        stockpileEditor.setTable(FXCollections.observableArrayList(realm.stockpileProperty().get()));\n        stockpileEditor.setColumn(new LogoTableColumn<>(STOCKPILE_NAME_COLUMN_NAME, Material::getName, Material::setName));\n        stockpileEditor.setColumn(new LogoTableColumn<>(STOCKPILE_AMOUNT_COLUMN_NAME, Material::getAmount, Material::setAmount));\n\n        //bind tags\n        tagEditor.setTable(FXCollections", "first_line_groundtruth": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());", "first_line_prediction": ".textProperty()         .bindBidirectional(realm.rulerPathToGFXProperty());", "match": 0}
{"groundtruth": "return commandWrapper.unwrapCommand(commandString);", "prediction": "\treturn commandString.replaceAll(COMMAND_PREFIX_TEMPLATE + \"|\" + COMMAND_POSTFIX_TEMPLATE, \"\");", "first_line_groundtruth": "return commandWrapper.unwrapCommand(commandString);", "first_line_prediction": "\treturn commandString.replaceAll(COMMAND_PREFIX_TEMPLATE + \"|\" + COMMAND_POSTFIX_TEMPLATE, \"\");", "match": 0}
{"groundtruth": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());", "prediction": ".textProperty()          .bindBidirectional(realm.gfxProperty(),                     new IntegerStringConverter());\n        rulerGFXTextField.textProperty()          .bindBidirectional(realm.rulerGFXProperty(),                new IntegerStringConverter());\n\n        //bind stockpile\n        stockpileEditor.setTable(FXCollections.observableArrayList(realm.stockpileProperty().get()));\n        stockpileEditor.setColumn(new LogoTableColumn<>(STOCKPILE_NAME_COLUMN_NAME, Material::getName, Material::setName));\n        stockpileEditor.setColumn(new LogoTableColumn<>(STOCKPILE", "first_line_groundtruth": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());", "first_line_prediction": ".textProperty()          .bindBidirectional(realm.gfxProperty(),                     new IntegerStringConverter());", "match": 0}
{"groundtruth": "BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {", "prediction": " new BCServerListRequest(SERVER_LIST).execute(complete, throwableConsumer);\n    }", "first_line_groundtruth": "BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {", "first_line_prediction": " new BCServerListRequest(SERVER_LIST).execute(complete, throwableConsumer);", "match": 0}
{"groundtruth": "authenticationData = new CCAuthenticationData(account.username(), account.password(), previousResponse.token, loginCode);", "prediction": " data = new CCAuthenticationData();\n            data.setLoginCode(loginCode);\n            data.setPassword(<PASSWORD>());\n            data.setUsername(account.getUsername());\n\n            final HttpRequest request = WebRequests.createPostRequest(ClassiCubeHandler.getAuthUrl() + \"/login\", data);\n            final HttpResponse<CCAuthenticationResponse> response = WebRequests.sendRequest(request);\n\n            return new CCAuthenticationResponse(response.statusCode(), response.body(), previousResponse);\n        });\n    }", "first_line_groundtruth": "authenticationData = new CCAuthenticationData(account.username(), account.password(), previousResponse.token, loginCode);", "first_line_prediction": " data = new CCAuthenticationData();", "match": 0}
{"groundtruth": "<>(\"login_code\", authenticationData.loginCode())\n            );", "prediction": "<>(\"loginCode\", authenticationData.loginCode())\n            );\n\n            final HttpRequest request = WebRequests.createRequest(\n                    \"https://auth.classicube.net/api/v1/auth/login\",\n                    \"POST\",\n                    requestBody\n            );\n\n            final HttpResponse<String> response = ClassiCubeHandler.sendRequest(request);\n\n            return WebRequests.parseResponse(response, CCAuthenticationResponse.class);\n        });\n    }", "first_line_groundtruth": "<>(\"login_code\", authenticationData.loginCode())", "first_line_prediction": "<>(\"loginCode\", authenticationData.loginCode())", "match": 0}
{"groundtruth": ", account.password(), previousResponse.token, loginCode);", "prediction": " + \":\" + account.password());\n            final HttpRequest request = WebRequests.createPostRequest(ClassiCubeHandler.AUTH_LOGIN_URL, authenticationData.toBody());\n            request.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            request.setHeader(\"Origin\", ClassiCubeHandler.AUTH_LOGIN_URL);\n            request.setHeader(\"Referer\", ClassiCubeHandler.AUTH_LOGIN_URL);\n            request.setHeader(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5", "first_line_groundtruth": ", account.password(), previousResponse.token, loginCode);", "first_line_prediction": " + \":\" + account.password());", "match": 0}
{"groundtruth": "StatusBarHelper.setStatusBarLightMode(this);", "prediction": " break;\n            case R.id.btn_2:\n                StatusBarHelper.setStatusBarLightMode(this);\n                break;\n            case R.id.btn_3:\n                StatusBarHelper.setStatusBarDarkMode(this);\n                break;\n            case R.id.btn_4:\n                StatusBarHelper.setStatusBarLightMode(this);\n                break;\n            case R.id.btn_5:\n                StatusBarHelper.setStatusBarDarkMode(this);\n                break;\n            case R.id.btn_6:\n                StatusBarHelper.setStatusBarLightMode(this);\n                break;\n           ", "first_line_groundtruth": "StatusBarHelper.setStatusBarLightMode(this);", "first_line_prediction": " break;", "match": 0}
{"groundtruth": "StatusBarHelper.translucent(this);", "prediction": " Toast.makeText(this,\"\u70b9\u51fb\u4e861\",Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.btn_2:\n                Toast.makeText(this,\"\u70b9\u51fb\u4e862\",Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.btn_3:\n                Toast.makeText(this,\"\u70b9\u51fb\u4e863\",Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.btn_4:\n                Toast.makeText(this,\"\u70b9\u51fb\u4e864\",Toast.LENGTH_SHORT).show();\n                break;\n            case R.id.btn_5:\n               ", "first_line_groundtruth": "StatusBarHelper.translucent(this);", "first_line_prediction": " Toast.makeText(this,\"\u70b9\u51fb\u4e861\",Toast.LENGTH_SHORT).show();", "match": 0}
{"groundtruth": "d(\"TitleBar\",\"onCreate-getStatusbarHeight\"+StatusBarHelper.getStatusbarHeight(this));", "prediction": "e(\"TAG\",\"onCreate\");\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        Log.e(\"TAG\",\"onResume\");\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        Log.e(\"TAG\",\"onPause\");\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        Log.e(\"TAG\",\"onDestroy\");\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        Log.e(\"TAG\",\"onStop\");\n    }\n\n    @Override\n    protected void onRestart", "first_line_groundtruth": "d(\"TitleBar\",\"onCreate-getStatusbarHeight\"+StatusBarHelper.getStatusbarHeight(this));", "first_line_prediction": "e(\"TAG\",\"onCreate\");", "match": 0}
{"groundtruth": "product0 = productRepository.findById(id);", "prediction": " productModel = productRepository.findById(id);\n        if (productModel.isPresent()) {\n            return ResponseEntity.status(HttpStatus.OK).body(productModel.get());\n        }\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Produto n\u00e3o encontrado\");\n    }", "first_line_groundtruth": "product0 = productRepository.findById(id);", "first_line_prediction": " productModel = productRepository.findById(id);", "match": 0}
{"groundtruth": "user0 = userRepository.findByIdentifier(identifier);", "prediction": " userModel = userRepository.findById(identifier);\n        if (userModel == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"usuario nao encontrado\");\n        }\n        return ResponseEntity.status(HttpStatus.OK).body(userModel);\n    }", "first_line_groundtruth": "user0 = userRepository.findByIdentifier(identifier);", "first_line_prediction": " userModel = userRepository.findById(identifier);", "match": 0}
{"groundtruth": "== null || !Objects.equals(user0.getPassword(), senha)) {", "prediction": " == null){\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n        }\n\n        if (!senha.equals(user0.getPassword())){\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n        }\n\n        UserRecordDto userRecordDto = new UserRecordDto();\n        BeanUtils.copyProperties(user0, userRecordDto);\n        return new ResponseEntity<>(userRecordDto, HttpStatus.OK);\n    }\n\n    /**\n     * Metodo/Rota responsavel por realizar o cadastro do usuario\n     * @param userRecordDto - DTO que contem os dados do usuario para realizar o cadastro\n     * @return", "first_line_groundtruth": "== null || !Objects.equals(user0.getPassword(), senha)) {", "first_line_prediction": " == null){", "match": 0}
{"groundtruth": "user0 = userRepository.findByEmail(email);", "prediction": " user = userRepository.findByEmail(email);\n        if(Objects.isNull(user)){\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n        }\n        if(!senha.equals(user.getPassword())){\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n        }\n        UserRecordDto userRecordDto = new UserRecordDto();\n        BeanUtils.copyProperties(user, userRecordDto);\n        return new ResponseEntity<>(userRecordDto, HttpStatus.OK);\n    }\n\n    /**\n     * Metodo/Rota responsavel por realizar o cadastro do usuario\n     * @param userRecordDto - DTO que cont", "first_line_groundtruth": "user0 = userRepository.findByEmail(email);", "first_line_prediction": " user = userRepository.findByEmail(email);", "match": 0}
{"groundtruth": ".OK).body(userRepository.findByIdentifier(identifier));", "prediction": ".OK).body(user0);\n    }", "first_line_groundtruth": ".OK).body(userRepository.findByIdentifier(identifier));", "first_line_prediction": ".OK).body(user0);", "match": 0}
{"groundtruth": "(plugin.getParticleManager(), lobbyParticles, player);", "prediction": "(player, lobbyParticles);\n        playParticleRunnableHashMap.put(player.getUniqueId(), playParticleRunnable);\n        plugin.getServer().getScheduler().runTaskAsynchronously(plugin, playParticleRunnable);\n    }\n\n    /**\n     * Remove a particle from the player.\n     * @param player Player\n     */\n    public void removeParticleFromPlayer(Player player) {\n        playerLobbyParticles.remove(player.getUniqueId());\n\n        if (playParticleRunnableHashMap.containsKey(player.getUniqueId())) {\n            playParticleRunnableHashMap.get(player.getUniqueId()).cancel();\n            playParticleRunnableHashMap.remove(player", "first_line_groundtruth": "(plugin.getParticleManager(), lobbyParticles, player);", "first_line_prediction": "(player, lobbyParticles);", "match": 0}
{"groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"code-numbers-only\")) {", "prediction": "length < 1) {\n            throw new IllegalArgumentException(\"Code length must be greater than 0\");\n        }\n        return generateString(length);\n    }\n\n    /**\n     * Generates a future that will complete with a random number of the specified length\n     * @param length The length of the code\n     * @return The generated code as a future\n     */\n    public static @NotNull CompletableFuture<String> generateNumberCode(int length) {\n        if (length < 1) {\n            throw new IllegalArgumentException(\"Code length must be greater than 0\");\n        }\n        return generateNumber(length);\n    }\n\n    /**\n     * Gets the", "first_line_groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"code-numbers-only\")) {", "first_line_prediction": "length < 1) {", "match": 0}
{"groundtruth": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");", "prediction": " throw new RuntimeException(e);\n            }\n        });\n        return future;\n    }\n\n    /**\n     * Gets the discord ID of a player\n     * @param uuid The UUID of the player\n     * @return The discord ID of the player\n     */\n    public static @NotNull CompletableFuture<String> getDiscordId(final @NotNull UUID uuid) {\n        CompletableFuture<String> future = new CompletableFuture<>();\n        Bukkit.getScheduler().runTaskAsynchronously(DiscordVerifier.getInstance(), () -> {\n            try {\n                Connection connection = DiscordVerifier.getDatabaseConnection();\n                PreparedStatement statement = connection.prepareStatement(\"SELECT discord_id FROM discord_", "first_line_groundtruth": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");", "first_line_prediction": " throw new RuntimeException(e);", "match": 0}
{"groundtruth": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString())) {", "prediction": " future.complete(sb.toString());\n        });\n        return future;\n    }\n\n    /**\n     * Generates a random string of the specified length\n     * @param length The length of the string\n     * @return A future containing the generated string\n     */\n    public static @NotNull CompletableFuture<String> generateRandomString(int length) {\n        return generateString(length);\n    }\n\n    /**\n     * Generates a random string of the specified length\n     * @param length The length of the string\n     * @return The generated string\n     */\n    public static @NotNull String generateRandomStringSync(int length) {\n        return generateString(length", "first_line_groundtruth": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString())) {", "first_line_prediction": " future.complete(sb.toString());", "match": 0}
{"groundtruth": "Connection connection = DiscordVerifier.getDatabaseConnection();", "prediction": " Connection connection = DiscordVerifier.getInstance().getDatabase().getConnection();\n                 PreparedStatement statement = connection.prepareStatement(\"INSERT INTO discord_codes (uuid, discord_id) VALUES (?, ?)\");\n                 statement.setString(1, uuid.toString());\n                 statement.setString(2, discordId);\n                 statement.executeUpdate();\n                 statement.close();\n                 connection.close();\n                 future.complete(null);\n            } catch (SQLException e) {\n                future.completeExceptionally(e);\n            }\n        });\n        return future;\n    }\n\n    /**\n     * Gets the discord ID of a player\n     * @param uuid The UUID of the", "first_line_groundtruth": "Connection connection = DiscordVerifier.getDatabaseConnection();", "first_line_prediction": " Connection connection = DiscordVerifier.getInstance().getDatabase().getConnection();", "match": 0}
{"groundtruth": "lobbyParticles.getParticle(), playerLocation, lobbyParticles.getCount());", "prediction": "lobbyParticles.getParticle(), playerLocation, 1);\n    }", "first_line_groundtruth": "lobbyParticles.getParticle(), playerLocation, lobbyParticles.getCount());", "first_line_prediction": "lobbyParticles.getParticle(), playerLocation, 1);", "match": 0}
{"groundtruth": "sendMessage(CustomColor.translate(\"&7Invalid usage.. Try &e/gmp (player)&7.\"));", "prediction": "sendMessage(CustomColor.translate(\"&cUsage: /givemegaphone <player>\"));\n            return false;\n        }\n\n    }", "first_line_groundtruth": "sendMessage(CustomColor.translate(\"&7Invalid usage.. Try &e/gmp (player)&7.\"));", "first_line_prediction": "sendMessage(CustomColor.translate(\"&cUsage: /givemegaphone <player>\"));", "match": 0}
{"groundtruth": "sender.sendMessage(CustomColor.translate(\"&a\" + args[0] + \" &7is &cnot &7online.\"));", "prediction": " sender.sendMessage(CustomColor.translate(\"&cPlayer not found!\"));\n                 return false;\n            }\n\n            target.getInventory().addItem(megaphone);\n            sender.sendMessage(CustomColor.translate(\"&7Congrats! &aYou &7now have a megaphone.\"));\n            return true;\n\n        } else {\n            sender.sendMessage(CustomColor.translate(\"&cUsage: /megaphone <player>\"));\n            return false;\n        }\n    }", "first_line_groundtruth": "sender.sendMessage(CustomColor.translate(\"&a\" + args[0] + \" &7is &cnot &7online.\"));", "first_line_prediction": " sender.sendMessage(CustomColor.translate(\"&cPlayer not found!\"));", "match": 0}
{"groundtruth": "playerLocation, lobbyParticles.getCount());", "prediction": "1, playerLocation, 0, 0, 0);\n    }", "first_line_groundtruth": "playerLocation, lobbyParticles.getCount());", "first_line_prediction": "1, playerLocation, 0, 0, 0);", "match": 0}
{"groundtruth": "UUID, Integer> idsProducts = cartModel.getIdsProducts();", "prediction": "String, Object> productMap = cartRecordDto.getProductMap();\n        List<ProductModel> productList = productRepository.findAllById(productMap.keySet());\n\n        for(ProductModel product : productList){\n            amount += Float.parseFloat(productMap.get(product.getId()).toString());\n        }\n\n        cartModel.setAmount(amount);\n        cartModel.setProductList(productList);\n\n        cartRepository.save(cartModel);\n\n        return new ResponseEntity<>(HttpStatus.CREATED);\n    }\n\n    /**\n     * Metodo/Rota responsavel por atualizar um carrinho de compras\n    ", "first_line_groundtruth": "UUID, Integer> idsProducts = cartModel.getIdsProducts();", "first_line_prediction": "String, Object> productMap = cartRecordDto.getProductMap();", "match": 0}
{"groundtruth": "= userRepository.findByIdentifier(identifier);", "prediction": " = new UserModel();\n        BeanUtils.copyProperties(userRecordDto, userModel);\n        userModel.setIdentifier(identifier);\n        return ResponseEntity.status(HttpStatus.OK).body(userRepository.save(userModel));\n    }", "first_line_groundtruth": "= userRepository.findByIdentifier(identifier);", "first_line_prediction": " = new UserModel();", "match": 0}
{"groundtruth": "> list = userRepository.findByType(type);", "prediction": "> userList = userRepository.findByType(type);\n        if (userList.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Usuario nao encontrado.\");\n        }\n        return ResponseEntity.status(HttpStatus.OK).body(userList);\n     }", "first_line_groundtruth": "> list = userRepository.findByType(type);", "first_line_prediction": "> userList = userRepository.findByType(type);", "match": 0}
{"groundtruth": "asList(manager.getItemsAsArray()), new ArrayList<>());", "prediction": "asList(manager.getItemNames()), new ArrayList<>());\n        }\n        return null;\n    }", "first_line_groundtruth": "asList(manager.getItemsAsArray()), new ArrayList<>());", "first_line_prediction": "asList(manager.getItemNames()), new ArrayList<>());", "match": 0}
{"groundtruth": "size = plugin.getParticleManager().getParticlesMapSize()+1;", "prediction": " rows = 9;\n        int  columns = 9;\n        inventory = Bukkit.createInventory(null, rows * columns, \"Particles\");\n        addItemsToInventory();\n    }\n\n    /**\n     * Method to create a gui item with the desired material and name.\n     * @param material Material of the item\n     * @param name Name of the item\n     * @return ItemStack\n     */\n    private ItemStack createGuiItem(Material material, String name) {\n        ItemStack item = new ItemStack(material);\n        ItemMeta meta = item.getItemMeta();\n        meta.setDisplayName(name);\n        item.setItemMeta(", "first_line_groundtruth": "size = plugin.getParticleManager().getParticlesMapSize()+1;", "first_line_prediction": " rows = 9;", "match": 0}
{"groundtruth": ": mainInstance.getYmlDataFile().getConfigurationSection(\"\").getKeys(false)){", "prediction": " : mainInstance.getYmlDataFile().getKeys(false)){\n            ItemStack itemStack = mainInstance.getYmlDataFile().getItemStack(itemStackName);\n            customItems.put(itemStackName, itemStack);\n        }\n    }", "first_line_groundtruth": ": mainInstance.getYmlDataFile().getConfigurationSection(\"\").getKeys(false)){", "first_line_prediction": " : mainInstance.getYmlDataFile().getKeys(false)){", "match": 0}
{"groundtruth": ".delete(userRepository.findByIdentifier(identifier));", "prediction": ".deleteByIdentifier(identifier);\n        return ResponseEntity.status(HttpStatus.OK).body(\"Usuario deletado com sucesso.\");\n    }", "first_line_groundtruth": ".delete(userRepository.findByIdentifier(identifier));", "first_line_prediction": ".deleteByIdentifier(identifier);", "match": 0}
{"groundtruth": ".get().addProduct(idProduct, 1);", "prediction": ".get().getIdsProducts().put(idProduct, 1);\n                }\n            }\n            else if (action.equals(\"remove\")){\n                if (products.containsKey(idProduct)){\n                    products.put(idProduct, products.get(idProduct) - 1);\n                }\n                else {\n                    newCart.get().getIdsProducts().put(idProduct, 0);\n                }\n            }\n            else {\n                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Acao invalida\");\n            }\n\n            return ResponseEntity.status(HttpStatus.OK).body(cartRepository.save(newCart", "first_line_groundtruth": ".get().addProduct(idProduct, 1);", "first_line_prediction": ".get().getIdsProducts().put(idProduct, 1);", "match": 0}
{"groundtruth": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();", "prediction": "0;\n        while (time < DiscordVerifier.getInstance().getConfig().getInt(\"code-timeout\")) {\n            time++;\n            player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent\")\n                    .replace(\"{time}\", String.valueOf(time))));\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-timeout\")));\n    }", "first_line_groundtruth": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "(DiscordVerifier.getInstance().getConfig().getBoolean(\"should-minecraft-chat-copyable\")) {", "prediction": " (time > 0) {\n            builder.append(\"\\n\\n\").color(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-time-left\"))\n                    .append(String.valueOf(time)).color(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-time-left-color\"));\n        }\n        builder.event(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, \"/discord verify \" + code));\n        player.spigot().sendMessage(builder.create());\n    }", "first_line_groundtruth": "(DiscordVerifier.getInstance().getConfig().getBoolean(\"should-minecraft-chat-copyable\")) {", "first_line_prediction": " (time > 0) {", "match": 0}
{"groundtruth": "mainInstance.getYmlDataFile().save(mainInstance.getDatafile());", "prediction": " mainInstance.getYmlDataFile().save(mainInstance.getYmlDataFile());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }", "first_line_groundtruth": "mainInstance.getYmlDataFile().save(mainInstance.getDatafile());", "first_line_prediction": " mainInstance.getYmlDataFile().save(mainInstance.getYmlDataFile());", "match": 0}
{"groundtruth": "manager.saveFile();", "prediction": " return true;\n    }", "first_line_groundtruth": "manager.saveFile();", "first_line_prediction": " return true;", "match": 0}
{"groundtruth": ".setDisplayName(Color.translate(name));", "prediction": ".setDisplayName(Color.translate(name));\n        itemStack.setItemMeta(itemMeta);\n\n        return itemStack;\n    }\n\n    /**\n     * Method to get the inventory\n     * @return Inventory\n     */\n    public Inventory getInventory() {\n        return inventory;\n    }\n\n    /**\n     * Method to get the LobbyParticles from the ItemStack\n     * @param itemStack ItemStack\n     * @return LobbyParticles\n     */\n    public LobbyParticles getLobbyParticlesFromItemStack(ItemStack itemStack) {\n        return loadedParticlesMaterial.get(itemStack);\n    }\n\n    /**\n     * Method to get the LobbyParticles from the", "first_line_groundtruth": ".setDisplayName(Color.translate(name));", "first_line_prediction": ".setDisplayName(Color.translate(name));", "match": 1}
{"groundtruth": ".requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-given\"));", "prediction": ".requireNonNull(e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-id\")));\n        player.addRole(given).queue();\n    }\n\n    private void attemptSendMCMessage(UUID uuid) {\n        String channelId = DiscordVerifier.getInstance().getConfig().getString(\"discord.channel-id\");\n        if (channelId.isEmpty()) return;\n        DiscordVerifierAPI.sendMCMessage(channelId, uuid.toString());\n    }", "first_line_groundtruth": ".requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-given\"));", "first_line_prediction": ".requireNonNull(e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-id\")));", "match": 0}
{"groundtruth": ".save(mainInstance.getDatafile());", "prediction": "\n                    .save(mainInstance.getYmlDataFile());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }", "first_line_groundtruth": ".save(mainInstance.getDatafile());", "first_line_prediction": "", "match": 0}
{"groundtruth": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-discord\")).queue();", "prediction": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-valid\")).queue();\n        Player player = Bukkit.getPlayer(uuid);\n        if (player == null) {\n            e.reply(\"Something went wrong.\").queue();\n            return;\n        }\n        DiscordVerifierAPI.verify(player, code);\n        DiscordVerifier.getDiscordCodes().remove(uuid);\n    }", "first_line_groundtruth": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-discord\")).queue();", "first_line_prediction": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-valid\")).queue();", "match": 0}
{"groundtruth": ".teleport(main.getWarpManager().getWarp(args[0]));", "prediction": ".teleport(new Location(Bukkit.getWorld(warps.getString(args[0] + \".world\")), warps.getDouble(args[0] + \".x\"), warps.getDouble(args[0] + \".y\"), warps.getDouble(args[0] + \".z\")));\n        return true;\n    }", "first_line_groundtruth": ".teleport(main.getWarpManager().getWarp(args[0]));", "first_line_prediction": ".teleport(new Location(Bukkit.getWorld(warps.getString(args[0] + \".world\")), warps.getDouble(args[0] + \".x\"), warps.getDouble(args[0] + \".y\"), warps.getDouble(args[0] + \".z\")));", "match": 0}
{"groundtruth": "<= configManager.getTalkRange()) {", "prediction": " <= configManager.getChatRange()) {\n                    if(configManager.showPlayerDistance()) {\n                        target.sendMessage(CustomColor.translate(\"&8[&e\" + distance + \"m&8] &a\" + player.getName() + \" &8\u2192 &7\" + event.getMessage()));\n                        return;\n                    }\n                    target.sendMessage(CustomColor.translate(\"&a\" + player.getName() + \" &8\u2192 &7\" + event.getMessage()));\n                }\n            }\n        });\n    }", "first_line_groundtruth": "<= configManager.getTalkRange()) {", "first_line_prediction": " <= configManager.getChatRange()) {", "match": 0}
{"groundtruth": ".cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-mc\")));", "prediction": ".getDiscordMessage(uuid));\n    }", "first_line_groundtruth": ".cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-mc\")));", "first_line_prediction": ".getDiscordMessage(uuid));", "match": 0}
{"groundtruth": "DiscordVerifier.getDiscordCodes().forEach((uuid, data) -> {", "prediction": " DiscordVerifierAPI.verify(code, e.getGuild().getId(), e.getUser().getId(), (success, player) -> {\n             if (success) {\n                 e.reply(\"Verified!\").queue();\n                 DiscordVerifier.getInstance().getDiscordManager().getDiscordPlayer(player).ifPresent(discordPlayer -> {\n                     discordPlayer.setVerified(true);\n                     discordPlayer.setVerifiedBy(e.getUser().getId());\n                     discordPlayer.setVerifiedAt(System.currentTimeMillis());\n                     discordPlayer.setVerifiedChannel(e.getChannel().getId());\n                     discordPlayer.setVerifiedCode(code);\n                     discord", "first_line_groundtruth": "DiscordVerifier.getDiscordCodes().forEach((uuid, data) -> {", "first_line_prediction": " DiscordVerifierAPI.verify(code, e.getGuild().getId(), e.getUser().getId(), (success, player) -> {", "match": 0}
{"groundtruth": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();", "prediction": " player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent\")));\n         player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent-time\").replace(\"{time}\", String.valueOf(time))));\n         player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent-time-click\").replace(\"{time}\", String.valueOf(time))));\n         player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent", "first_line_groundtruth": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();", "first_line_prediction": " player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent\")));", "match": 0}
{"groundtruth": "main.getWarpManager().setWarp(args[0], loc);", "prediction": " warps.set(\"warps.\" + args[0] + \".x\", loc.getBlockX());\n         warps.set(\"warps.\" + args[0] + \".y\", loc.getBlockY());\n         warps.set(\"warps.\" + args[0] + \".z\", loc.getBlockZ());\n         warps.set(\"warps.\" + args[0] + \".world\", loc.getWorld().getName());\n         warps.set(\"warps.\" + args[0] + \".yaw\", loc.getYaw());\n         warps.set(\"warps.\" + args[", "first_line_groundtruth": "main.getWarpManager().setWarp(args[0], loc);", "first_line_prediction": " warps.set(\"warps.\" + args[0] + \".x\", loc.getBlockX());", "match": 0}
{"groundtruth": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-generated\"))\n                .replace(\"{", "prediction": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-message\").replace(\"{code}\", code));\n        player.sendMessage(rawMsg);\n        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-message-time\").replace(\"{time}\", time + \"\")));\n        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-message-click\").replace(\"{code}\", code)));\n        player.spigot().sendMessage(ComponentBuilder.create()\n                .append(DiscordVerifier.getInstance().getConfig().getString(\"", "first_line_groundtruth": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-generated\"))", "first_line_prediction": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-message\").replace(\"{code}\", code));", "match": 0}
{"groundtruth": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.sync-name\")){", "prediction": "\n\n    }\n\n    private void attemptSendMCMessage(UUID uuid) {\n        String channelId = DiscordVerifier.getInstance().getConfig().getString(\"discord.mc-channel\");\n        if (channelId.isEmpty()) return;\n        DiscordVerifierAPI.sendMCMessage(channelId, uuid.toString());\n    }", "first_line_groundtruth": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.sync-name\")){", "first_line_prediction": "", "match": 0}
{"groundtruth": "return DiscordVerifier.getDiscordCodes().get(player.getUniqueId()) != null;", "prediction": " return DiscordVerifier.getDiscordCodes().containsKey(player.getUniqueId());\n    }\n\n    private void sendCodeMessage(Player player) {\n        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-sent\")));\n        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.click-to-copy\")));\n        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.click-to-verify\")));\n        player.sendMessage(DiscordVerifierAPI.cc(DiscordVerifier.getInstance().getConfig().", "first_line_groundtruth": "return DiscordVerifier.getDiscordCodes().get(player.getUniqueId()) != null;", "first_line_prediction": " return DiscordVerifier.getDiscordCodes().containsKey(player.getUniqueId());", "match": 0}
{"groundtruth": ", Color.translate(\"&6Particle Menu\"));", "prediction": ", \"&cParticle Menu\");\n        addItemsToInventory();\n    }\n\n    /**\n     * Method to create a gui item with the desired material and name.\n     * @param material Material of the item\n     * @param name Name of the item\n     * @return ItemStack\n     */\n    private ItemStack createGuiItem(Material material, String name) {\n        ItemStack item = new ItemStack(material);\n        ItemMeta meta = item.getItemMeta();\n        meta.setDisplayName(name);\n        item.setItemMeta(meta);\n        return item;\n    }\n\n    /**\n     * Method to get the inventory\n     * @return Inventory\n     */\n   ", "first_line_groundtruth": ", Color.translate(\"&6Particle Menu\"));", "first_line_prediction": ", \"&cParticle Menu\");", "match": 0}
{"groundtruth": "().editOriginal(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-invalid\")).queue();", "prediction": "().editOriginal(\"Invalid code!\").queue();\n        }\n    }\n\n    private void setSuccessful(SlashCommandInteractionEvent e, String code, AtomicBoolean failed, UUID uuid) {\n        Player player = Bukkit.getPlayer(uuid);\n        if (player == null) {\n            e.getHook().editOriginal(\"Player not found!\").queue();\n            return;\n        }\n        DiscordVerifierAPI.verify(player, code);\n        e.getHook().editOriginal(\"Verified!\").queue();\n        DiscordVerifier.getDiscordCodes().remove(uuid);\n    }", "first_line_groundtruth": "().editOriginal(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-invalid\")).queue();", "first_line_prediction": "().editOriginal(\"Invalid code!\").queue();", "match": 0}
{"groundtruth": "DiscordVerifier.getDiscordCodes().remove(uuid);", "prediction": " // Check if the player is already verified\n        if (DiscordVerifierAPI.isVerified(uuid)) {\n            e.getHook().editOriginal(DiscordVerifier.getInstance().getConfig().getString(\"messages.already-verified\")).queue();\n            return;\n        }\n        // Check if the player is already in the queue\n        if (DiscordVerifierAPI.isQueued(uuid)) {\n            e.getHook().editOriginal(DiscordVerifier.getInstance().getConfig().getString(\"messages.already-queued\")).queue();\n            return;\n        }\n        // Check if the player is already in the queue\n        if (DiscordVerifierAPI.isPending(", "first_line_groundtruth": "DiscordVerifier.getDiscordCodes().remove(uuid);", "first_line_prediction": " // Check if the player is already verified", "match": 0}
{"groundtruth": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"Minecraft.Command\");", "prediction": "\n\n    }\n\n    private void attemptSendMCMessage(UUID uuid) {\n        String channelId = DiscordVerifier.getInstance().getConfig().getString(\"discord.mc-channel\");\n        if (channelId.isEmpty()) return;\n        DiscordVerifierAPI.sendMCMessage(channelId, uuid.toString());\n    }", "first_line_groundtruth": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"Minecraft.Command\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"should-code-be-case-sensitive\");", "prediction": " DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.case-sensitive\");\n            if (caseSensitive) {\n                if (code.equalsIgnoreCase(data.getCode())) {\n                    failed.set(false);\n                    DiscordVerifierAPI.verify(uuid, data.getDiscordId());\n                    e.getHook().editOriginal(\"Verified!\").queue();\n                    Bukkit.getScheduler().runTask(DiscordVerifier.getInstance(), () -> {\n                        Player player = Bukkit.getPlayer(uuid);\n                        if (player != null) {\n                            player.sendMessage(\"You have been verified!\");\n                        }\n                    });\n                }\n            } else {\n               ", "first_line_groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"should-code-be-case-sensitive\");", "first_line_prediction": " DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.case-sensitive\");", "match": 0}
{"groundtruth": "Bukkit.getScheduler().runTask(DiscordVerifier.getInstance(), () -> {", "prediction": " commands.forEach(command -> {\n             Bukkit.dispatchCommand(Bukkit.getConsoleSender(), command.replace(\"{player}\", name).replace(\"{code}\", code));\n         });\n    }\n\n    private void attemptSendMCMessage(UUID uuid) {\n        String message = DiscordVerifier.getInstance().getConfig().getString(\"Minecraft.Message\");\n        if (message.isEmpty()) return;\n        Bukkit.dispatchCommand(Bukkit.getConsoleSender(), message.replace(\"{player}\", Bukkit.getPlayer(uuid).getName()));\n    }", "first_line_groundtruth": "Bukkit.getScheduler().runTask(DiscordVerifier.getInstance(), () -> {", "first_line_prediction": " commands.forEach(command -> {", "match": 0}
{"groundtruth": "Player player = DiscordVerifier.getInstance().getServer().getPlayer(uuid);", "prediction": " Player player = Bukkit.getPlayer(uuid);\n        if (player == null) return;\n        String message = DiscordVerifier.getInstance().getConfig().getString(\"Minecraft.Message\");\n        if (message.isEmpty()) return;\n        Bukkit.dispatchCommand(Bukkit.getConsoleSender(), message.replace(\"{player}\", player.getName()));\n    }", "first_line_groundtruth": "Player player = DiscordVerifier.getInstance().getServer().getPlayer(uuid);", "first_line_prediction": " Player player = Bukkit.getPlayer(uuid);", "match": 0}
{"groundtruth": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&a&lMegaphone\"));", "prediction": " megaphoneMeta.setDisplayName(CustomColor.color(\"&c&lMegaphone\"));\n             megaphoneMeta.setLore(Collections.singletonList(CustomColor.color(\"&7Click to give a megaphone\")));\n             megaphone.setItemMeta(megaphoneMeta);\n        }\n\n        return megaphone;\n    }", "first_line_groundtruth": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&a&lMegaphone\"));", "first_line_prediction": " megaphoneMeta.setDisplayName(CustomColor.color(\"&c&lMegaphone\"));", "match": 0}
{"groundtruth": "Role removed = e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));", "prediction": " if (given != null) {\n             player.addRole(given).queue();\n         }\n    }\n\n    private void attemptSendMCMessage(UUID uuid) {\n        String channelId = DiscordVerifier.getInstance().getConfig().getString(\"discord.mc-channel\");\n        if (channelId.isEmpty()) return;\n        DiscordVerifierAPI.sendMCMessage(channelId, uuid.toString());\n    }", "first_line_groundtruth": "Role removed = e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));", "first_line_prediction": " if (given != null) {", "match": 0}
{"groundtruth": "+ getConfigManager().getMegaphoneRange()\n                            + \" &7blocks!\")));", "prediction": " + getConfigManager().getMegaphoneRange() + \"&7\")));\n            megaphone.setItemMeta(megaphoneMeta);\n        }\n\n        return megaphone;\n    }", "first_line_groundtruth": "+ getConfigManager().getMegaphoneRange()", "first_line_prediction": " + getConfigManager().getMegaphoneRange() + \"&7\")));", "match": 0}
{"groundtruth": "if (newCart.get().getIdsProducts().isEmpty()){", "prediction": "\n\n            }\n            else {\n                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Acao invalida\");\n            }\n\n            return ResponseEntity.status(HttpStatus.OK).body(cartRepository.save(newCart.get()));\n        }\n        else {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Carrinho de compras nao encontrado\");\n        }\n    }", "first_line_groundtruth": "if (newCart.get().getIdsProducts().isEmpty()){", "first_line_prediction": "", "match": 0}
{"groundtruth": ").getAmount() - value);", "prediction": "newCart.get().getAmount() - value));\n            }\n\n            return ResponseEntity.status(HttpStatus.OK).body(cartRepository.save(newCart.get()));\n        }\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Carrinho de compras n\u00e3o encontrado\");\n    }", "first_line_groundtruth": ").getAmount() - value);", "first_line_prediction": "newCart.get().getAmount() - value));", "match": 0}
{"groundtruth": "Optional<CartModel> cart = cartRepository.findByIdClient(idClient);", "prediction": " Optional<CartModel> cart = cartRepository.findByIdUser(idClient);", "first_line_groundtruth": "Optional<CartModel> cart = cartRepository.findByIdClient(idClient);", "first_line_prediction": " Optional<CartModel> cart = cartRepository.findByIdUser(idClient);", "match": 0}
{"groundtruth": "saleModel.addProduct(idProduct, quantidade);", "prediction": " /**\n             * Verifica se o produto esta disponivel\n             */\n            if (productRepository.findById(idProduct).isEmpty()){\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"O produto \" +\n                        productRepository.findById(idProduct).get().getName() + \" nao esta disponivel.\");\n            }\n\n            /**\n             * Verifica se o produto esta disponivel\n             */\n            if (productRepository.findById(idProduct).get().getAmount() < quantidade){\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"O produto \" +\n                        productRepository.findById", "first_line_groundtruth": "saleModel.addProduct(idProduct, quantidade);", "first_line_prediction": " /**", "match": 0}
{"groundtruth": "saleModel.getIdClient());", "prediction": "saleRecordDto.getClientId()).orElse(null);\n        if(cart == null){\n            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n        }\n\n        var product = productRepository.findById(saleRecordDto.getProductId()).orElse(null);\n        if(product == null){\n            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n        }\n\n        saleModel.setCartId(cart.getId());\n        saleModel.setProductId(product.getId());\n        saleModel.setSaleDate(LocalDate.now());\n        saleModel.setSaleTime(new SimpleDateFormat(\"HH:mm\").format(new Date()));\n\n        sale", "first_line_groundtruth": "saleModel.getIdClient());", "first_line_prediction": "saleRecordDto.getClientId()).orElse(null);", "match": 0}
{"groundtruth": "saleModel.setDate(java.sql.Date.valueOf(date));", "prediction": " try {\n             date = new SimpleDateFormat(\"dd/MM/yyyy\").parse(date.toString()).toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\n         } catch (ParseException e) {\n             e.printStackTrace();\n         }\n        saleModel.setDate(date);\n\n        saleRepository.save(saleModel);\n\n        cartRepository.deleteByIdClient(saleModel.getIdClient());\n\n        return ResponseEntity.status(HttpStatus.CREATED).body(saleModel);\n    }\n\n    /**\n     * Metodo/Rota responsavel por realizar a busca de todas as vendas\n     * @return - Retorna uma", "first_line_groundtruth": "saleModel.setDate(java.sql.Date.valueOf(date));", "first_line_prediction": " try {", "match": 0}
{"groundtruth": "productRepository.findById(idProduct).get().getValue();", "prediction": "0F;\n                for (Map.Entry<UUID, Integer> entry : products.entrySet()) {\n                    UUID idProduct2 = entry.getKey();\n                    int quantidade = entry.getValue();\n\n                    Optional<ProductModel> product = productRepository.findById(idProduct2);\n\n                    if (product.isPresent()){\n                        value += product.get().getValue() * quantidade;\n                    }\n                }\n                newCart.get().setAmount(value);\n            }\n            else if (action.equals(\"remove\")){\n                if (products.containsKey(idProduct)){\n                    products.put(idProduct, products.get(idProduct", "first_line_groundtruth": "productRepository.findById(idProduct).get().getValue();", "first_line_prediction": "0F;", "match": 0}
{"groundtruth": ": thoughts.getPlan().split(\"\\n\")) {", "prediction": " : thoughts.getPlan()) {\n                        System.out.println(agent.getName() + \": \" + plan);\n                    }\n                }\n            }\n\n            System.out.println(\"Type 'exit' to exit\");\n            String input = scanner.nextLine();\n            if (input.equals(\"exit\")) {\n                break;\n            }\n        }\n    }", "first_line_groundtruth": ": thoughts.getPlan().split(\"\\n\")) {", "first_line_prediction": " : thoughts.getPlan()) {", "match": 0}
{"groundtruth": "= agent.chat(\"GENERATE NEXT COMMAND JSON\", true);", "prediction": " = agent.execute(resp.getCommand());\n                        }\n                        break;\n                    }\n                }\n            }\n            if (resp.hasResponse()) {\n                System.out.println(resp.getResponse());\n            }\n            if (resp.hasThoughts()) {\n                System.out.println();\n            }\n            if (resp.hasCommand()) {\n                System.out.println();\n            }\n            if (resp.hasResponse()) {\n                System.out.println();\n            }\n            if (resp.hasThoughts()) {\n                System.out.println();\n            }\n            if (resp.hasCommand()) {", "first_line_groundtruth": "= agent.chat(\"GENERATE NEXT COMMAND JSON\", true);", "first_line_prediction": " = agent.execute(resp.getCommand());", "match": 0}
{"groundtruth": "agent.chat(feedback, false);", "prediction": " agent.chat(\"GENERATE NEXT COMMAND JSON\", true, feedback);\n                        }\n                        break;\n                    }\n                }\n            }\n            if (resp.hasFeedback()) {\n                System.out.println(\"Agent wants to give feedback: \\n\" + resp.getFeedback());\n                while (true) {\n                    System.out.print(\"(Y/N)? \");\n                    String yn = scanner.nextLine().toLowerCase().trim();\n                    if (\"y\".equals(yn) || \"n\".equals(yn)) {\n                        if (\"y\".equals(yn)) {\n                            resp = agent.chat(\"GENERATE NEXT FEEDBACK", "first_line_groundtruth": "agent.chat(feedback, false);", "first_line_prediction": " agent.chat(\"GENERATE NEXT COMMAND JSON\", true, feedback);", "match": 0}
{"groundtruth": "+= product.get().getValue() * quantidade;", "prediction": " += product.get().getPrice() * quantidade;\n            }\n        }\n\n        cartModel.setAmount(amount);\n\n        cartRepository.save(cartModel);\n\n        return new ResponseEntity<>(HttpStatus.CREATED);\n    }\n\n    /**\n     * Metodo/Rota responsavel por listar todos os carrinhos de compras\n     * @return Lista de carrinhos de compras\n     */\n    @GetMapping(\"/cart/list\")\n    public ResponseEntity<List<CartModel>> listCart(){\n        return new ResponseEntity<>(cartRepository.findAll(), HttpStatus.OK);\n    }\n\n    /**\n     * Metodo/R", "first_line_groundtruth": "+= product.get().getValue() * quantidade;", "first_line_prediction": " += product.get().getPrice() * quantidade;", "match": 0}
{"groundtruth": "saleModel.setIdSeller(idSeller);", "prediction": " /**\n         * Verifica se o vendedor da venda esta cadastrado\n         */\n        if (productRepository.findByIdSeller(idSeller).isEmpty()){\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"O vendedor da venda n\u00e3o esta cadastrado. \" +\n                    \"Crie um vendedor para realizar a venda.\");\n        }\n\n        saleModel.setCreatedAt(new Date());\n        saleModel.setUpdatedAt(new Date());\n\n        saleRepository.save(saleModel);\n\n        cartRepository.deleteByIdClient(saleModel.getIdClient());\n\n        return ResponseEntity.status", "first_line_groundtruth": "saleModel.setIdSeller(idSeller);", "first_line_prediction": " /**", "match": 0}
{"groundtruth": "<String> relevantMemory = memory.get(10);", "prediction": "<Map<String, String>> memory = this.memory.getMemory();\n        prompt.addAll(memory);\n\n        // Build user input prompt\n        Prompt userInputPrompt = new Prompt.Builder(\"user_input\")\n                .withRole(\"user\")\n                .withContent(userInput)\n                .build();\n        prompt.add(userInputPrompt.getPrompt());\n\n        // Build footer prompt\n        Map<String, String> footer = buildPrompts(\"system\", footerPrompt());\n        prompt.add(footer);\n\n        return prompt;\n    }\n\n    private String headerPrompt() {\n        return \"Hello, I am \" +", "first_line_groundtruth": "<String> relevantMemory = memory.get(10);", "first_line_prediction": "<Map<String, String>> memory = this.memory.getMemory();", "match": 0}
{"groundtruth": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));", "prediction": "(HttpStatus.OK).body(saleRepository.findAllBySeller(id));\n        }\n\n        /**\n         * Verifica se a busca das vendas sera pelo cliente\n         */\n        if (((String) request.get(\"form\")).equals(\"client\")){\n            UUID id = UUID.fromString((String) request.get(\"value\"));\n            return ResponseEntity.status(HttpStatus.OK).body(saleRepository.findAllByClient(id));\n        }\n\n        /**\n         * Verifica se a busca das vendas sera por data\n         */\n        if (((String) request.get(\"form\")).equals(\"date\")){", "first_line_groundtruth": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));", "first_line_prediction": "(HttpStatus.OK).body(saleRepository.findAllBySeller(id));", "match": 0}
{"groundtruth": "(thoughts.hasCriticism()) {", "prediction": " (thoughts.hasAction()) {\n                    System.out.println(agent.getName() + \": \" + thoughts.getAction());\n                }\n            }\n            System.out.println(\"Type 'exit' to exit\");\n            String input = scanner.nextLine();\n            if (input.equals(\"exit\")) {\n                break;\n            }\n        }\n    }", "first_line_groundtruth": "(thoughts.hasCriticism()) {", "first_line_prediction": " (thoughts.hasAction()) {", "match": 0}
{"groundtruth": "thoughts.hasSpeak()) {", "prediction": "thoughts.hasConclusion()) {\n                    System.out.println(agent.getName() + \": Conclusion: \" + thoughts.getConclusion());\n                }\n            }\n            System.out.println(\"Type 'exit' to exit.\");\n            String input = scanner.nextLine();\n            if (input.equals(\"exit\")) {\n                break;\n            }\n        }\n    }", "first_line_groundtruth": "thoughts.hasSpeak()) {", "first_line_prediction": "thoughts.hasConclusion()) {", "match": 0}
{"groundtruth": "out.println(agent.getName() + \": (voice) \" + thoughts.getSpeak());", "prediction": "out.println(agent.getName() + \": \" + thoughts.getSpeak());\n                }\n            }\n            System.out.println(\"Type 'exit' to exit.\");\n            String input = scanner.nextLine();\n            if (input.equals(\"exit\")) {\n                break;\n            }\n        }\n    }", "first_line_groundtruth": "out.println(agent.getName() + \": (voice) \" + thoughts.getSpeak());", "first_line_prediction": "out.println(agent.getName() + \": \" + thoughts.getSpeak());", "match": 0}
{"groundtruth": "resp.hasCommand()) {", "prediction": "resp.hasAction()) {\n                System.out.println(agent.getName() + \": \" + resp.getAction());\n            }\n            if (resp.hasResponse()) {\n                System.out.println(agent.getName() + \": \" + resp.getResponse());\n            }\n            if (resp.hasQuestion()) {\n                System.out.println(agent.getName() + \": \" + resp.getQuestion());\n            }\n            if (resp.hasAnswer()) {\n                System.out.println(agent.getName() + \": \" + resp.getAnswer());\n            }\n            if (resp.hasConclusion())", "first_line_groundtruth": "resp.hasCommand()) {", "first_line_prediction": "resp.hasAction()) {", "match": 0}
{"groundtruth": "return openAIModel.chat(prompts);", "prediction": " return openAIModel.chat(prompts, maxTokens);\n    }", "first_line_groundtruth": "return openAIModel.chat(prompts);", "first_line_prediction": " return openAIModel.chat(prompts, maxTokens);", "match": 0}
{"groundtruth": ".add(PromptUtils.buildPrompts(role, content));", "prediction": ".add(Map.of(\"role\", role, \"content\", content));\n    }\n\n    public void addNewPrompt(String role, String content, String answer) {\n        this.values.add(Map.of(\"role\", role, \"content\", content, \"answer\", answer));\n    }\n\n    public void addNewPrompt(String role, String content, String answer, String answer2) {\n        this.values.add(Map.of(\"role\", role, \"content\", content, \"answer\", answer, \"answer2\", answer2));\n    }\n\n    public void addNewPrompt(String role, String", "first_line_groundtruth": ".add(PromptUtils.buildPrompts(role, content));", "first_line_prediction": ".add(Map.of(\"role\", role, \"content\", content));", "match": 0}
{"groundtruth": "consumerAccessor.setPickupDelay(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));", "prediction": " var consumerStack = consumer.getItem();\n         var supplierStack = supplier.getItem();\n         var consumerCount = consumerStack.getCount();\n         var supplierCount = supplierStack.getCount();\n         var consumerExtraCount = getExtraItemCount(consumer);\n         var supplierExtraCount = getExtraItemCount(supplier);", "first_line_groundtruth": "consumerAccessor.setPickupDelay(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));", "first_line_prediction": " var consumerStack = consumer.getItem();", "match": 0}
{"groundtruth": "return chat(seedInput.getContent(), false);", "prediction": "\n\n        List<Map<String, String>> prompt = getFullPrompt(seedInput.getContent());\n        String promptStr = new Gson().toJson(prompt);\n        String responseStr = openAIModel.generate(promptStr);\n        JsonNode response = mapper.readTree(responseStr);\n        stagingResponse = response;\n        stagingTool = new HashMap<>();\n        stagingTool.put(\"response\", response);\n        stagingTool.put(\"prompt\", prompt);\n        return new Response(response, prompt);\n    }\n\n    public Response chat(String userInput) {\n        Prompt seedInput = new Prompt.Builder(\"seed\").build();\n        List", "first_line_groundtruth": "return chat(seedInput.getContent(), false);", "first_line_prediction": "", "match": 0}
{"groundtruth": "var age = accessor.getAge();", "prediction": " return pickupDelay == 0;\n    }\n\n    public static int getTotalCount(ItemEntity entity) {\n        var itemStack = entity.getItem();\n        return itemStack.hasTag() ? itemStack.getTag().getInt(EXTRA_ITEM_COUNT_TAG) : 0;\n    }\n\n    public static int getExtraItemCount(ItemEntity entity) {\n        return entity.getDataManager().get(DATA_EXTRA_ITEM_COUNT);\n    }\n\n    public static void setExtraItemCount(ItemEntity entity, int count) {\n        entity.getDataManager().set(DATA_EXTRA_ITEM_COUNT, count);\n   ", "first_line_groundtruth": "var age = accessor.getAge();", "first_line_prediction": " return pickupDelay == 0;", "match": 0}
{"groundtruth": "|| Staaaaaaaaaaaack.getItemBlackList().contains(itemStack.getItem());", "prediction": " || itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG_2);\n    }", "first_line_groundtruth": "|| Staaaaaaaaaaaack.getItemBlackList().contains(itemStack.getItem());", "first_line_prediction": " || itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG_2);", "match": 0}
{"groundtruth": "openAIModel.getTokenLimit();", "prediction": "2500;\n        if (tokenCount > tokenLimit) {\n            fullPrompt.remove(fullPrompt.size() - 1);\n        }\n        String response = this.chat(fullPrompt);\n        return new Response(response, this.history.getValues());\n    }\n\n    /**\n     * The chat function is a method that performs a chat interaction between a user and an assistant. Here's a breakdown of what it does:\n     * The prompt parameter is a list of dictionaries, each of which contains a \"role\" and \"content\" field. The \"role\" field indicates the role of the message in the", "first_line_groundtruth": "openAIModel.getTokenLimit();", "first_line_prediction": "2500;", "match": 0}
{"groundtruth": ".summarizer.summarize(extractedText, question);", "prediction": ".summarizer.summarize(extractedText);\n            result.put(\"text\", summary);\n            result.put(\"links\", extractedLinks);\n        }\n        return result;\n    }", "first_line_groundtruth": ".summarizer.summarize(extractedText, question);", "first_line_prediction": ".summarizer.summarize(extractedText);", "match": 0}
{"groundtruth": "min(consumerAccessor.getAge(), supplierAccessor.getAge()));", "prediction": "max(consumerAccessor.getAge(), supplierAccessor.getAge()));\n\n        var consumerStack = consumer.getItem();\n        var supplierStack = supplier.getItem();\n        if (consumerStack.is(supplierStack.getItem())) {\n            var consumerTag = consumerStack.getTag();\n            var supplierTag = supplierStack.getTag();\n            if (consumerTag != null && supplierTag != null) {\n                consumerTag.putAll(supplierTag);\n            }\n            consumerStack.setCount(consumerStack.getCount() + supplierStack.getCount());\n            supplierStack.setCount(0);\n        } else {\n            consumerStack.set", "first_line_groundtruth": "min(consumerAccessor.getAge(), supplierAccessor.getAge()));", "first_line_prediction": "max(consumerAccessor.getAge(), supplierAccessor.getAge()));", "match": 0}
{"groundtruth": "(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));", "prediction": "(32767);\n        supplierAccessor.setPickupDelay(32767);\n\n        var consumerStack = consumer.getItem();\n        var supplierStack = supplier.getItem();\n\n        var consumerCount = consumerStack.getCount();\n        var supplierCount = supplierStack.getCount();\n\n        var consumerExtraCount = getExtraItemCount(consumer);\n        var supplierExtraCount = getExtraItemCount(supplier);\n\n        var newCount = consumerCount + supplierCount;\n        var newExtraCount = consumerExtraCount + supplierExtraCount;\n\n        consumerStack.setCount(newCount);\n        supplierStack.setCount(0);\n\n       ", "first_line_groundtruth": "(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));", "first_line_prediction": "(32767);", "match": 0}
{"groundtruth": "= openAIModel.countTokens(updatedPrompt);", "prediction": " = context.values().stream().mapToInt(String::length).sum();\n                if (tokenCount < tokenLimit) {\n                    prompt = updatedPrompt;\n                    relevantMemory = relevantMemory.subList(1, relevantMemory.size());\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // Build user input prompt\n        Prompt userInputPrompt = new Prompt.Builder(\"user_input\")\n                .withRole(\"user\")\n                .formatted(0, userInput)\n                .build();\n        prompt.add(userInputPrompt.getPrompt());\n\n        // Build goal prompt\n        Prompt goalPrompt = new Prompt.", "first_line_groundtruth": "= openAIModel.countTokens(updatedPrompt);", "first_line_prediction": " = context.values().stream().mapToInt(String::length).sum();", "match": 0}
{"groundtruth": "= openAIModel.chat(fullPrompt, tokenLimit - tokenCount);", "prediction": " = this.chat(fullPrompt, tokenCount, tokenLimit);\n        return new Response(resp);\n    }\n\n    /**\n     * The chat function is a method that performs a chat interaction between a user and an assistant. Here's a breakdown of what it does:\n     * The chat function is called with a list of prompts. The prompts are used to construct the prompt for the chat interaction. The prompt is then passed to the openAIModel to generate a response.\n     * The response is then printed and stored in the assistant's history as a user message and an assistant message.\n     * The response is returned from", "first_line_groundtruth": "= openAIModel.chat(fullPrompt, tokenLimit - tokenCount);", "first_line_prediction": " = this.chat(fullPrompt, tokenCount, tokenLimit);", "match": 0}
{"groundtruth": ".memory.add(humanFeedbackPrompt.getContent());", "prediction": ".memory.add(humanFeedbackPrompt.getPrompt());\n                this.stagingResponse = null;\n                this.stagingTool = null;\n                return new Response(humanFeedbackPrompt.getPrompt());\n            } else {\n                Prompt humanFeedbackPrompt = new Prompt.Builder(\"human_feedback\")\n                         .withRole(\"system\")\n                         .formatted(0, this.stagingResponse, message)\n                         .build();\n                this.memory.add(humanFeedbackPrompt.getPrompt());\n                this.stagingResponse = null;\n                this.stagingTool = null;\n                return new Response(humanFeedbackPrompt.getPrompt());\n            }\n       ", "first_line_groundtruth": ".memory.add(humanFeedbackPrompt.getContent());", "first_line_prediction": ".memory.add(humanFeedbackPrompt.getPrompt());", "match": 0}
{"groundtruth": "int tokenLimit = openAIModel.getTokenLimit() - 1000;", "prediction": " return prompt;\n    }\n\n    private String headerPrompt() {\n        return \"Hello, I am \" + name + \". I am a \" + description + \". I am here to help you \" + String.join(\", \", goals) + \".\";\n    }\n\n    private String prompt(String userInput) {\n        List<Map<String, String>> prompt = getFullPrompt(userInput);\n        String promptStr = openAIModel.prompt(prompt);\n        return promptStr;\n    }\n\n    private String response(String promptStr) {\n        String responseStr = openAIModel.response(promptStr);\n        return responseStr", "first_line_groundtruth": "int tokenLimit = openAIModel.getTokenLimit() - 1000;", "first_line_prediction": " return prompt;", "match": 0}
{"groundtruth": "return defaultResponsePrompt.getContent();", "prediction": " return defaultResponsePrompt.getPrompt();\n    }\n\n    public String evaluationPrompt() {\n        String evaluation = Prompt.getEvaluation();\n        Prompt evaluationPrompt = new Prompt.Builder(\"evaluation\")\n                 .formatted(0, evaluation)\n                 .build();\n         return evaluationPrompt.getPrompt();\n    }\n\n    public String resourcesPrompt() {\n        String resources = Prompt.getResources();\n        Prompt resourcesPrompt = new Prompt.Builder(\"resources\")\n                 .formatted(0, resources)\n                 .build();\n         return resourcesPrompt.getPrompt();\n    }\n\n    public String toolsPrompt() {\n        String tools = Prompt.getTools();\n        Prompt tools", "first_line_groundtruth": "return defaultResponsePrompt.getContent();", "first_line_prediction": " return defaultResponsePrompt.getPrompt();", "match": 0}
{"groundtruth": "(currentTimePrompt.getPrompt());", "prediction": "(currentTimePrompt.getPrompt());\n\n        // Build user input prompt\n        Prompt userInputPrompt = new Prompt.Builder(\"user_input\")\n                .withRole(\"user\")\n                .formattedWithUserInput(userInput)\n                .build();\n        prompt.add(userInputPrompt.getPrompt());\n\n        // Build goal prompt\n        Prompt goalPrompt = new Prompt.Builder(\"goal\")\n                .withRole(\"system\")\n                .formattedWithGoal(goals)\n                .build();\n        prompt.add(goalPrompt.getPrompt());\n\n        // Build goal prompt\n        Prompt goalPrompt2 = new Prompt.Builder(\"goal\")\n                .", "first_line_groundtruth": "(currentTimePrompt.getPrompt());", "first_line_prediction": "(currentTimePrompt.getPrompt());", "match": 1}
{"groundtruth": "Prompt.getDefaultResponse();", "prediction": " \"I'm sorry, I didn't understand that. Please try again.\";\n        Prompt defaultResponsePrompt = new Prompt.Builder(\"default_response\")\n                .formatted(0, defaultResponse)\n                .withRole(\"system\")\n                .build();\n        return defaultResponsePrompt.getPrompt();\n    }\n\n    public String evaluationPrompt() {\n        String evaluation = \"I'm sorry, I didn't understand that. Please try again.\";\n        Prompt evaluationPrompt = new Prompt.Builder(\"evaluation\")\n                .formatted(0, evaluation)\n                .withRole(\"system\")\n                .build();\n        return evaluationPrompt.getPrompt();\n    }", "first_line_groundtruth": "Prompt.getDefaultResponse();", "first_line_prediction": " \"I'm sorry, I didn't understand that. Please try again.\";", "match": 0}
{"groundtruth": "return seeMore.getSchedulerHook().runTaskDelayed(() -> updateDistance(player, 0, attempts, distanceMap, taskMap, distanceConsumer), delay);", "prediction": " task = seeMore.getSchedulerHook().runRepeatingTask(() -> {\n                     distanceConsumer.accept(player, distance);\n                     updateDistance(player, delay, attempts + 1, distanceMap, taskMap, distanceConsumer);\n                 }, delay, delay);\n            } else {\n                distanceConsumer.accept(player, distance);\n            }\n            return task;\n        });\n    }\n\n    private void cleanMaps() {\n        targetViewDistanceMap.entrySet().removeIf(entry -> entry.getValue() == null);\n        targetSendDistanceMap.entrySet().removeIf(entry -> entry.getValue() == null);\n        viewDistance", "first_line_groundtruth": "return seeMore.getSchedulerHook().runTaskDelayed(() -> updateDistance(player, 0, attempts, distanceMap, taskMap, distanceConsumer), delay);", "first_line_prediction": " task = seeMore.getSchedulerHook().runRepeatingTask(() -> {", "match": 0}
{"groundtruth": "viewDistanceController.updateAllPlayers();", "prediction": " viewDistanceController.updateViewDistance();\n        }\n    }\n\n    public SeeMoreConfig getConfig() {\n        return config;\n    }\n\n    public SchedulerHook getSchedulerHook() {\n        return schedulerHook;\n    }\n\n    public ViewDistanceController getViewDistanceController() {\n        return viewDistanceController;\n    }", "first_line_groundtruth": "viewDistanceController.updateAllPlayers();", "first_line_prediction": " viewDistanceController.updateViewDistance();", "match": 0}
{"groundtruth": "updateTask = seeMore.getSchedulerHook().runEntityTaskAsap(() -> {", "prediction": " newTask = seeMore.getSchedulerHook().runTaskAsynchronously(() -> {\n                distanceConsumer.accept(player, distance);\n                retryTask.complete(null);\n            });\n            return newTask;\n        });\n    }\n\n    private void cleanMaps() {\n        targetViewDistanceMap.entrySet().removeIf(entry -> entry.getValue() == null);\n        targetSendDistanceMap.entrySet().removeIf(entry -> entry.getValue() == null);\n        viewDistanceUpdateTasks.entrySet().removeIf(entry -> entry.getValue() == null);\n        sendDistanceUpdateTasks.entrySet().removeIf(entry -> entry.", "first_line_groundtruth": "updateTask = seeMore.getSchedulerHook().runEntityTaskAsap(() -> {", "first_line_prediction": " newTask = seeMore.getSchedulerHook().runTaskAsynchronously(() -> {", "match": 0}
{"groundtruth": "seeMore.getSeeMoreConfig().updateDelay.get();", "prediction": "100;\n            }\n        } catch (Exception ignored) {\n        }\n        if (delay > 0) {\n            ScheduledTask task = viewDistanceUpdateTasks.get(player.getUniqueId());\n            if (task != null) {\n                task.cancel();\n            }\n            task = seeMore.getSchedulerHook().runRepeatingTask(() -> {\n                setTargetViewDistance(player, player.getClientViewDistance(), true);\n            }, delay, 1);\n            viewDistanceUpdateTasks.put(player.getUniqueId(), task);\n        }\n    }\n\n    public void setTargetSendDistance(Player player, int", "first_line_groundtruth": "seeMore.getSeeMoreConfig().updateDelay.get();", "first_line_prediction": "100;", "match": 0}
{"groundtruth": "parsedReport.getAverages().get(test.getTestName()));", "prediction": " parsedReport.getAverageResult().getAverage()\n                    );\n\n                    reports.sort(averageComparator);\n\n                    test.setReport(reports.get(0));\n                });\n            } else {\n                List<ParsedReport> reports = Arrays.asList(\n                        new ParsedReport(gson, Paths.get(files[0].getAbsolutePath())),\n                        new ParsedReport(gson, Paths.get(files[1].getAbsolutePath()))\n                );\n\n                performanceTests.forEach(test -> {\n                    Comparator<ParsedReport> averageComparator = Comparator.comparingDouble(\n                            parsedReport ->  parsedReport.getAverageResult().getAverage()\n                    );\n\n                   ", "first_line_groundtruth": "parsedReport.getAverages().get(test.getTestName()));", "first_line_prediction": " parsedReport.getAverageResult().getAverage()", "match": 0}
{"groundtruth": ".out.println(\"Successfully completed \" + test.getTestName() + \" in \" + timeElapsed + \" ms!\");", "prediction": ".out.println(\"Running test \" + test.getTestName() + \"...\");\n            System.out.println(\"Time elapsed: \" + timeElapsed + \"ms\");\n\n            report.addResults(test.getTestName(), results);\n        });\n\n        report.setNative(true);\n        report.setTimestamp(System.currentTimeMillis());\n\n        Path reportPath = Paths.get(outputDirectory.toString() + \"report-native.json\");\n        try {\n            Files.write(reportPath, gson.toJson(report).getBytes());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        report.set", "first_line_groundtruth": ".out.println(\"Successfully completed \" + test.getTestName() + \" in \" + timeElapsed + \" ms!\");", "first_line_prediction": ".out.println(\"Running test \" + test.getTestName() + \"...\");", "match": 0}
{"groundtruth": "\"results for \" + test.getTestName() + \"!\");", "prediction": " \" results.\");\n                    }\n\n                    ParsedReport slowerReport = slowerOptional.get();\n                    ParsedReport fasterReport = fasterOptional.get();\n\n                    double slowerAverage = reportToAverage.apply(slowerReport);\n                    double fasterAverage = reportToAverage.apply(fasterReport);\n\n                    if (slowerAverage > fasterAverage) {\n                        System.out.println(\"Test \" + test.getTestName() + \" is slower than \" +\n                                \"the other tests.\");\n                    } else if (slowerAverage < fasterAverage) {\n                        System.out.println(\"Test \" + test.getTestName() + \" is faster than", "first_line_groundtruth": "\"results for \" + test.getTestName() + \"!\");", "first_line_prediction": " \" results.\");", "match": 0}
{"groundtruth": "toJson(report.getResults()).getBytes());", "prediction": "toJson(report).getBytes());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }", "first_line_groundtruth": "toJson(report.getResults()).getBytes());", "first_line_prediction": "toJson(report).getBytes());", "match": 0}
{"groundtruth": "executor.awaitTermination(30, TimeUnit.SECONDS);", "prediction": " executor.awaitTermination(10, TimeUnit.SECONDS);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while waiting for executor to finish\", e);\n    }\n  }", "first_line_groundtruth": "executor.awaitTermination(30, TimeUnit.SECONDS);", "first_line_prediction": " executor.awaitTermination(10, TimeUnit.SECONDS);", "match": 0}
{"groundtruth": "executor.shutdown();", "prediction": " executor.close();\n  }", "first_line_groundtruth": "executor.shutdown();", "first_line_prediction": " executor.close();", "match": 0}
{"groundtruth": ".put(identity.getId(), entry.memberId());", "prediction": ".put(entry.memberId(), identity.id());\n    }\n\n    assignmentSnapshot = assignmentManager.onElected(members, skipAssignment);\n\n    return memberIds;\n  }\n\n  @Override\n  protected void onLeaveComplete(int generation, String memberId, String protocol) {\n    assignmentManager.onRevoked(time.timer(Long.MAX_VALUE));\n  }\n\n  @Override\n  public void close() {\n    assignmentManager.close();\n  }", "first_line_groundtruth": ".put(identity.getId(), entry.memberId());", "first_line_prediction": ".put(entry.memberId(), identity.id());", "match": 0}
{"groundtruth": "properties.getConsumerConfig();", "prediction": " new ConsumerConfig(properties.getConsumerConfig());\n    clientConfig.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n    clientConfig.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, properties.getBootstrapServers());\n    clientConfig.put(CommonClientConfigs.REBALANCE_TIMEOUT_MS_CONFIG, rebalanceTimeout.toMillis());\n    clientConfig.put(CommonClientConfigs.SESSION_TIMEOUT_MS_CONFIG, sessionTimeout.toMillis());\n    clientConfig.put(CommonClientConfigs.HEARTBEAT_INTERVAL_MS_CONFIG, heartbeatInterval.", "first_line_groundtruth": "properties.getConsumerConfig();", "first_line_prediction": " new ConsumerConfig(properties.getConsumerConfig());", "match": 0}
{"groundtruth": "().getId());", "prediction": "().getId());\n      ByteBuffer assignment = leaderProtocol.serializeAssignment(entry.getValue());\n      groupAssignment.put(memberId, assignment);\n    }\n\n    if (!skipAssignment) {\n      assignmentSnapshot = assignments.get(identity);\n      assignmentManager.onAssigned(assignmentSnapshot, generation);\n    }\n\n    return groupAssignment;\n  }\n\n  @Override\n  public void close() {\n    assignmentManager.close();\n  }", "first_line_groundtruth": "().getId());", "first_line_prediction": "().getId());", "match": 1}
{"groundtruth": "identity.getId() + \"-\" + BD_CLIENT_ID_SEQUENCE.getAndIncrement();", "prediction": " BD_CLIENT_ID_SEQUENCE.getAndIncrement() + \"-\" + identity.toString();\n    this.client = new ConsumerNetworkClient(clientId, clientId,\n        properties.getBootstrapServers(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.getSecurityProtocol(),\n        properties.get", "first_line_groundtruth": "identity.getId() + \"-\" + BD_CLIENT_ID_SEQUENCE.getAndIncrement();", "first_line_prediction": " BD_CLIENT_ID_SEQUENCE.getAndIncrement() + \"-\" + identity.toString();", "match": 0}
{"groundtruth": "[j].spawn();", "prediction": " = null;\n                    particles[i][j] = null;\n                }\n            }\n        }\n    }\n\n    @Override\n    public void despawn() {\n        ParticleConstructDespawnEvent event = new ParticleConstructDespawnEvent(this);\n        Bukkit.getPluginManager().callEvent(event);\n        if (event.isCancelled()) return;\n        for (int i = 0; i < particles.length; i++) {\n            for (int j = 0; j < particles[0].length; j++) {\n                if (particles[i][j] != null) {\n                    particles[i] = null", "first_line_groundtruth": "[j].spawn();", "first_line_prediction": " = null;", "match": 0}
{"groundtruth": "if (!particleSpawnEvent.isCancelled()) {", "prediction": " if (particleSpawnEvent.isCancelled()) {\n            return;\n        }\n\n        super.spawn();\n    }", "first_line_groundtruth": "if (!particleSpawnEvent.isCancelled()) {", "first_line_prediction": " if (particleSpawnEvent.isCancelled()) {", "match": 0}
{"groundtruth": "[j].clone();", "prediction": " == null ? null : particles[i][j].clone();\n                clonedParticle.setLocation(locations[i][j]);\n                this.particles[i][j] = clonedParticle;\n            }\n        }\n    }\n\n    public void setLocations(Location[][] locations) {\n        if (locations.length != particles.length || locations[0].length != particles[0].length) {\n            throw new IllegalArgumentException(\"Location[][] lengths must be equal to RegularParticle[][] lengths\");\n        }\n\n        for (int i = 0; i < locations.length; i++) {\n            for (int j = 0; j < locations", "first_line_groundtruth": "[j].clone();", "first_line_prediction": " == null ? null : particles[i][j].clone();", "match": 0}
{"groundtruth": "ToyController.instance().setScalarLevel(intensity);", "prediction": "\tif (intensity > MinetifaceConfig.getInstance().getIntensityThreshold()) {\n\t\t\t\tif (!paused) {\n\t\t\t\t\tattackPointsCounter.onTick();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (paused) {\n\t\t\t\t\tattackPointsCounter.onTick();\n\t\t\t\t}\n\t\t\t}", "first_line_groundtruth": "ToyController.instance().setScalarLevel(intensity);", "first_line_prediction": "\tif (intensity > MinetifaceConfig.getInstance().getIntensityThreshold()) {", "match": 0}
{"groundtruth": "ToyController.instance().setScalarLevel(0);", "prediction": "\tToyController.instance().setPaused(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}", "first_line_groundtruth": "ToyController.instance().setScalarLevel(0);", "first_line_prediction": "\tToyController.instance().setPaused(true);", "match": 0}
{"groundtruth": "masochistPointsCounter.onHurt(amount);", "prediction": "\tattackPointsCounter.onHurt(amount);", "first_line_groundtruth": "masochistPointsCounter.onHurt(amount);", "first_line_prediction": "\tattackPointsCounter.onHurt(amount);", "match": 0}
{"groundtruth": "abstractPointsCounter.getInstantPoints(), instanPoints);", "prediction": "instanPoints, abstractPointsCounter.getInstantPoints());\n\t\t}", "first_line_groundtruth": "abstractPointsCounter.getInstantPoints(), instanPoints);", "first_line_prediction": "instanPoints, abstractPointsCounter.getInstantPoints());", "match": 0}
{"groundtruth": "skipDownTick += abstractPointsCounter.getSkipDownTicks();", "prediction": "\tskipDownTick = Math.max(abstractPointsCounter.getSkipDownTicks(), skipDownTick);\n\t\t}\n\t\treturn skipDownTick;", "first_line_groundtruth": "skipDownTick += abstractPointsCounter.getSkipDownTicks();", "first_line_prediction": "\tskipDownTick = Math.max(abstractPointsCounter.getSkipDownTicks(), skipDownTick);", "match": 0}
{"groundtruth": "= Math.max(abstractPointsCounter.getPoints(), points);", "prediction": " = Math.max(abstractPointsCounter.getPoints(), points);\n\t\t}\n\t\treturn points;", "first_line_groundtruth": "= Math.max(abstractPointsCounter.getPoints(), points);", "first_line_prediction": " = Math.max(abstractPointsCounter.getPoints(), points);", "match": 0}
{"groundtruth": "ToyController.instance().setLinearLevel(intensity);", "prediction": "\tToyController.instance().setFeedback(true);\n\t\t} else {\n\t\t\tToyController.instance().setFeedback(false);\n\t\t}", "first_line_groundtruth": "ToyController.instance().setLinearLevel(intensity);", "first_line_prediction": "\tToyController.instance().setFeedback(true);", "match": 0}
{"groundtruth": "abstractPointsCounter.onTick();", "prediction": "\tabstractPointsCounter.onPlayerTick();\n\t\t}", "first_line_groundtruth": "abstractPointsCounter.onTick();", "first_line_prediction": "\tabstractPointsCounter.onPlayerTick();", "match": 0}
{"groundtruth": "masochistPointsCounter.onDeath();", "prediction": "\t/*\n\t\t\texperienceCounter.onDeath();\n\t\t\tminingPointsCounter.onDeath();\n\t\t\tattackPointsCounter.onDeath();\n\t\t\tmasochistPointsCounter.onDeath();\n\t\t\t*/", "first_line_groundtruth": "masochistPointsCounter.onDeath();", "first_line_prediction": "\t/*", "match": 0}
{"groundtruth": ", file.genThumbnailPath());", "prediction": ", file.getThumbnailPath());\n    BaseFile newFileMeta = createOrUpdateFileMeta(tags, fileId, file.getPath(), file.getName(),\n        newFile.getSize());\n    storageService.upload(bucketName, newFile.getBytes(), newFile.getOriginalFilename());\n    storageService.upload(bucketName, newFile.getBytes(), newFile.getOriginalFilename() + \".thumbnail\");\n    return newFileMeta;\n  }\n\n  /**\n    * Create a new file to Firestore and Cloud Storage.\n    *\n    * @param file file upload to the server\n    * @param tags list of tags label the new", "first_line_groundtruth": ", file.genThumbnailPath());", "first_line_prediction": ", file.getThumbnailPath());", "match": 0}
{"groundtruth": "= LdsUtil.getFileBucketPath(basePath, newFileId);", "prediction": " = LdsUtil.getPathId(fileId);\n    FileMeta fileMeta = new FileMeta(fileId, newFileId, fileName, size, tags);\n    firestoreService.createOrUpdateFileMeta(fileMeta);\n    return new BaseFile(fileId, fileBucketPath, fileName, size, tags);\n  }", "first_line_groundtruth": "= LdsUtil.getFileBucketPath(basePath, newFileId);", "first_line_prediction": " = LdsUtil.getPathId(fileId);", "match": 0}
{"groundtruth": "(newFile.checkImageFileType()) {", "prediction": " (file.getContentType().startsWith(\"image\")) {\n      storageService.save(bucketName, newFile.genThumbnailPath(), file.getContentType(),\n          Thumbnails.of(file.getBytes()).size(THUMBNAIL_SIZE).asByteArray());\n    }\n    return newFile;\n  }\n\n  /**\n    * Create or update a file meta in Firestore with the given fileId.\n    *\n    * @param tags list of tags label the file\n    * @param fileId unique ID of the file\n    * @param newFileId unique ID of the new file (for referencing Cloud Storage)\n    * @param", "first_line_groundtruth": "(newFile.checkImageFileType()) {", "first_line_prediction": " (file.getContentType().startsWith(\"image\")) {", "match": 0}
{"groundtruth": "newFile.genThumbnailPath());", "prediction": "300, newFile);\n    }\n    return newFile;\n  }\n\n  /**\n    * Create or update a file meta in Firestore with the given fileId.\n    *\n    * @param tags list of tags label the file\n    * @param fileId unique ID of the file\n    * @param newFileId unique ID of the new file (for referencing Cloud Storage)\n    * @param name name of the file\n    * @param size size of the file\n    * @return file data\n    */\n  private BaseFile createOrUpdateFileMeta(\n      List<String> tags, String fileId, String newFileId", "first_line_groundtruth": "newFile.genThumbnailPath());", "first_line_prediction": "300, newFile);", "match": 0}
{"groundtruth": ".orderNo = System.currentTimeMillis() + \"-\" + LdsUtil.getPathId(path);", "prediction": ".size = size;\n  }\n\n  public String getId() {\n    return id;\n  }\n\n  public void setId(String id) {\n    this.id = id;\n  }\n\n  public String getPath() {\n    return path;\n  }\n\n  public void setPath(String path) {\n    this.path = path;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public List<String> getTags() {\n    return tags;\n  }\n\n  public void setTags(List<String> tags) {\n   ", "first_line_groundtruth": ".orderNo = System.currentTimeMillis() + \"-\" + LdsUtil.getPathId(path);", "first_line_prediction": ".size = size;", "match": 0}
{"groundtruth": "storageService.batchDelete(bucketName);", "prediction": " storageService.deleteAll(bucketName);\n  }\n\n  /**\n    * Create or update a file to Firestore and Cloud Storage.\n    *\n    * @param file the uploaded file\n    * @param tags list of tags label the file\n    * @param fileId unique id of the file\n    * @param newFileId unique id of the new file\n    * @param size size of the file\n    * @return the uploaded file\n    */\n  private BaseFile createOrUpdateFile(\n      MultipartFile file, List<String> tags, String fileId, String newFileId, long size)\n      throws InterruptedException, ExecutionException,", "first_line_groundtruth": "storageService.batchDelete(bucketName);", "first_line_prediction": " storageService.deleteAll(bucketName);", "match": 0}
{"groundtruth": "resourceBasePath = LdsUtil.getResourceBasePath(basePath);", "prediction": " path = basePath;\n    return documents.stream()\n        .map(\n            doc -> {\n              BaseFile file = new BaseFile();\n              file.setId(doc.getId());\n              file.setPath(path + \"/\" + doc.getId());\n              file.setTags(doc.get(TAGS, List.class));\n              file.setOrderNo(doc.get(ORDER_NO, String.class));\n              return file;\n            })\n        .collect(Collectors.toList());\n  }\n\n  /**\n    * Delete all files in Firestore.\n    *\n    * @throws InterruptedException\n    * @throws ExecutionException\n    */\n ", "first_line_groundtruth": "resourceBasePath = LdsUtil.getResourceBasePath(basePath);", "first_line_prediction": " path = basePath;", "match": 0}
{"groundtruth": "BaseFile oldFile = fileService.getFileById(fileId);", "prediction": " List<String> tagList = getTagList(tags);\n       BaseFile baseFile = fileService.updateFile(fileId, file, tagList);\n       return ResponseEntity.ok().body(new FileResponse(baseFile));\n     });\n   }", "first_line_groundtruth": "BaseFile oldFile = fileService.getFileById(fileId);", "first_line_prediction": " List<String> tagList = getTagList(tags);", "match": 0}
{"groundtruth": "(contextValue.getType(), contextValue.getId());", "prediction": "(contextValue);\n    }\n\n    @Override\n    public boolean isCrossContext() {\n      return false;\n    }\n  }\n\n  private static final String CQL_LIBRARY_ID_KEY = \"cqlLibraryId\";\n  private static final String CQL_LIBRARY_VERSION_KEY = \"cqlLibraryVersion\";\n  private static final String CQL_LIBRARY_DATE_KEY = \"cqlLibraryDate\";\n  private static final String CQL_LIBRARY_DESCRIPTION_KEY = \"cqlLibraryDescription\";\n  private static final String CQL_LIBRARY_EXPRESSION_KEY = \"cqlLibraryExpression\";\n  private static final String CQL_", "first_line_groundtruth": "(contextValue.getType(), contextValue.getId());", "first_line_prediction": "(contextValue);", "match": 0}
{"groundtruth": "enterContext(contextValue.getType());", "prediction": "setContextValue(contextValue.getType(), contextValue.getId());\n    }\n  }\n\n  private static final String CQL_LIBRARY_ID_KEY = \"cqlLibraryId\";\n  private static final String CQL_LIBRARY_VERSION_KEY = \"cqlLibraryVersion\";\n  private static final String CQL_LIBRARY_DATE_KEY = \"cqlLibraryDate\";\n  private static final String CQL_LIBRARY_DESCRIPTION_KEY = \"cqlLibraryDescription\";\n  private static final String CQL_LIBRARY_EXPRESSION_KEY = \"cqlLibraryExpression\";\n  private static final String CQL_LIBRARY_EXPRESSION_DEF_KEY", "first_line_groundtruth": "enterContext(contextValue.getType());", "first_line_prediction": "setContextValue(contextValue.getType(), contextValue.getId());", "match": 0}
{"groundtruth": "contextValue.getId());", "prediction": "0, contextValue.getId());\n    }\n\n    @Override\n    public boolean isCrossContext() {\n      return false;\n    }\n  }\n\n  private static final String CQL_LIBRARY_ID_KEY = \"cqlLibraryId\";\n  private static final String CQL_LIBRARY_VERSION_KEY = \"cqlLibraryVersion\";\n  private static final String CQL_LIBRARY_DATE_KEY = \"cqlLibraryDate\";\n  private static final String CQL_LIBRARY_DESCRIPTION_KEY = \"cqlLibraryDescription\";\n  private static final String CQL_LIBRARY_EXPRESSION_KEY = \"cqlLibraryExpression\";\n  private static final String", "first_line_groundtruth": "contextValue.getId());", "first_line_prediction": "0, contextValue.getId());", "match": 0}
{"groundtruth": "(libraryIds.getVersion()),\n          new CqlTranslatorOptions(TRANSLATOR_OPTIONS),\n          errors);", "prediction": "(libraryIds.getVersion()),\n          errors);\n      if (!errors.isEmpty()) {\n        throw new RuntimeException(\n            \"Failed to resolve library \" + libraryIds.getName() + \" \" + libraryIds.getVersion()\n                + \": \" + errors.get(0).getMessage());\n      }\n    }\n\n    return libraryManager.getLibraries().stream()\n        .map(CompiledLibrary::getLibrary)\n        .collect(toImmutableList());\n  }\n\n  private static ImmutableList<Library> loadLibraries(\n      Path cqlFolder, Collection<CqlLibraryId> cqlLibraryIds, FhirVersionEnum fhirVersion) {\n    Library", "first_line_groundtruth": "(libraryIds.getVersion()),", "first_line_prediction": "(libraryIds.getVersion()),", "match": 1}
{"groundtruth": "super.resolveType(value);", "prediction": " super.resolveType(value);\n        });\n  }", "first_line_groundtruth": "super.resolveType(value);", "first_line_prediction": " super.resolveType(value);", "match": 0}
{"groundtruth": "withId(libraryIds.getName())\n              .withVersion(libraryIds.getVersion()),\n          new CqlTranslatorOptions(TRANSLATOR_OPTIONS),\n          errors);", "prediction": "withId(libraryIds.getName())\n               .withVersion(libraryIds.getVersion()),\n          errors);\n      if (!errors.isEmpty()) {\n        throw new RuntimeException(\n            \"Failed to resolve library \" + libraryIds.getName() + \" \" + libraryIds.getVersion()\n                + \": \" + errors.get(0).getMessage());\n      }\n    }\n\n    return libraryManager.getLibraries().stream()\n        .map(CompiledLibrary::getLibrary)\n        .collect(toImmutableList());\n  }\n\n  private static ImmutableList<Library> loadLibraries(\n      Path cqlFolder, Collection<CqlLibraryId> cqlLibrary", "first_line_groundtruth": "withId(libraryIds.getName())", "first_line_prediction": "withId(libraryIds.getName())", "match": 1}
{"groundtruth": "diceResult.setAmeacas(0);", "prediction": " diceResult.setDesastres(0);\n        } else if (advantage - threat < 0) {\n            diceResult.setVantagens(0);\n            diceResult.setDesastres(threat - advantage);\n        } else {\n            diceResult.setVantagens(0);\n            diceResult.setDesastres(0);\n        }\n\n        if (triumph - despair > 0) {\n            diceResult.setTriunfos(triumph - despair);\n            diceResult.setDesastres(0);\n        } else if (triumph - despair", "first_line_groundtruth": "diceResult.setAmeacas(0);", "first_line_prediction": " diceResult.setDesastres(0);", "match": 0}
{"groundtruth": "diceResult.setFracassos(0);", "prediction": " diceResult.setDificuldade(success - failure);\n        } else if (success - failure == 0) {\n            diceResult.setSucessos(success - failure);\n            diceResult.setDificuldade(success - failure);\n        } else {\n            diceResult.setSucessos(success - failure);\n            diceResult.setDificuldade(success - failure);\n        }\n\n        if (triumph - despair > 0) {\n            diceResult.setTriumphos(triumph - despair);\n            diceResult.setDificuldade(triump", "first_line_groundtruth": "diceResult.setFracassos(0);", "first_line_prediction": " diceResult.setDificuldade(success - failure);", "match": 0}
{"groundtruth": "diceResult.setFracassos(failure - success);", "prediction": " diceResult.setFracassos(success - failure);\n        } else {\n            diceResult.setSucessos(success);\n            diceResult.setFracassos(0);\n        }\n\n        if (triumph - despair > 0) {\n            diceResult.setTriumphos(triumph - despair);\n            diceResult.setDespair(0);\n        } else if (triumph - despair < 0) {\n            diceResult.setTriumphos(0);\n            diceResult.setDespair(triumph - despair);\n        } else {\n            dice", "first_line_groundtruth": "diceResult.setFracassos(failure - success);", "first_line_prediction": " diceResult.setFracassos(success - failure);", "match": 0}
{"groundtruth": "diceResult.setSucessos(success - failure);", "prediction": " diceResult.setResultado(ResultadoSwDTO.Resultado.VITORIA);\n        } else if (success - failure < 0) {\n             diceResult.setResultado(ResultadoSwDTO.Resultado.DERROTA);\n        } else if (success - failure == 0) {\n             diceResult.setResultado(ResultadoSwDTO.Resultado.EMPATE);\n        }\n\n        if (success + triumph + advantage + failure + despair + threat > 0) {\n             diceResult.setResultado(ResultadoSwDTO.Resultado.VITORIA);", "first_line_groundtruth": "diceResult.setSucessos(success - failure);", "first_line_prediction": " diceResult.setResultado(ResultadoSwDTO.Resultado.VITORIA);", "match": 0}
{"groundtruth": "service.rollDisVantage(\"Advantage\", dice);", "prediction": "0;\n    }", "first_line_groundtruth": "service.rollDisVantage(\"Advantage\", dice);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {", "prediction": " return new ResponseEntity<>(HttpStatus.OK);\n  }\n\n  /**\n   * The file upload API.\n   *\n   * @param file the file to upload\n   * @return the file response\n   */\n  @PostMapping(\"/file\")\n  public ResponseEntity<?> uploadFile(@RequestParam(\"file\") MultipartFile file) {\n    log.info(\"Received file upload request\");\n    openTelemetryService.addTraceContext();\n    FileResponse fileResponse = fileService.uploadFile(file);\n    return new ResponseEntity<>(fileResponse, HttpStatus.CREATED);\n  }\n\n  /**\n   * The file download API.\n   *\n   * @param fileId the file", "first_line_groundtruth": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {", "first_line_prediction": " return new ResponseEntity<>(HttpStatus.OK);", "match": 0}
{"groundtruth": "diceResult.setVantagens(advantage - threat);", "prediction": " diceResult.setVantagens(advantage - threat);\n             diceResult.setDesastres(0);\n        } else if (advantage - threat < 0) {\n             diceResult.setVantagens(0);\n             diceResult.setDesastres(threat - advantage);\n        } else {\n             diceResult.setVantagens(0);\n             diceResult.setDesastres(0);\n        }\n\n        if (triumph - despair > 0) {\n             diceResult.setTriunfos(triumph - despair);\n             diceResult.setDesastres", "first_line_groundtruth": "diceResult.setVantagens(advantage - threat);", "first_line_prediction": " diceResult.setVantagens(advantage - threat);", "match": 0}
{"groundtruth": "= HydraulicImpl.instance().mod(modId);", "prediction": " = HydraulicImpl.getInstance().getModManager().getMod(modId);\n\n        // If the mod is not null, add the mod name to the lore\n        if (mod != null) {\n            String modName = mod.getName();\n            listTag.add(new StringTag(modName));\n        }\n\n        compoundTag.put(listTag);\n        newNbt.put(compoundTag);\n        ci.setReturnValue(newNbt);\n    }\n\n    @ModifyVariable(\n            method = \"translateDisplayProperties(Lorg/geysermc/geyser/session/Gey", "first_line_groundtruth": "= HydraulicImpl.instance().mod(modId);", "first_line_prediction": " = HydraulicImpl.getInstance().getModManager().getMod(modId);", "match": 0}
{"groundtruth": "return HydraulicImpl.instance().dataFolder(Constants.MOD_ID)\n                .resolve(\"storage\")\n                .resolve(mod.id());", "prediction": " return HydraulicImpl.instance().modStoragePath().resolve(mod.id());\n    }", "first_line_groundtruth": "return HydraulicImpl.instance().dataFolder(Constants.MOD_ID)", "first_line_prediction": " return HydraulicImpl.instance().modStoragePath().resolve(mod.id());", "match": 0}
{"groundtruth": "diceResult.setDesesperos(0);", "prediction": " diceResult.setDesastres(0);\n        } else if (triumph - despair < 0) {\n            diceResult.setTriunfos(0);\n            diceResult.setDesastres(despair - triumph);\n        } else {\n            diceResult.setTriunfos(0);\n            diceResult.setDesastres(0);\n        }\n\n        return diceResult;\n    }\n\n    public ResultadoSwForceDTO rollSwForceDice(DiceSwDTO dice) {\n        int success = 0;\n        int triumph = 0;\n        int advantage = ", "first_line_groundtruth": "diceResult.setDesesperos(0);", "first_line_prediction": " diceResult.setDesastres(0);", "match": 0}
{"groundtruth": "this.hydraulic.server().registryAccess().registryOrThrow(key);", "prediction": " this.hydraulic.registry(key);\n        return registry.getValues();\n    }\n\n    /**\n     * Gets the values from the specified {@link Registry registry}\n     * that are relevant for the {@link ModInfo mod} this pack is\n     * part of.\n     *\n     * @param key the key of the registry to get the values from\n     * @return the values from the specified registry that are relevant for this mod\n     * @param <V> the type of the registry\n     */\n    @NotNull\n    public <V> Map<ResourceKey<V>, V> registryEntries(@NotNull ResourceKey<Registry<", "first_line_groundtruth": "this.hydraulic.server().registryAccess().registryOrThrow(key);", "first_line_prediction": " this.hydraulic.registry(key);", "match": 0}
{"groundtruth": ".packManager.initialize();", "prediction": ".platform.onServerStarting(server);\n    }\n\n    /**\n     * Called when the server is stopping.\n     */\n    public void onServerStopping() {\n        this.platform.onServerStopping();\n    }\n\n    /**\n     * Called when the server is stopping.\n     */\n    public void onServerStopped() {\n        this.platform.onServerStopped();\n    }\n\n    /**\n     * Called when the server is stopping.\n     */\n    public void onServerStopped(@NotNull MinecraftServer server) {\n        this.server = server;\n\n        this.platform.onServerStopped(server);\n    }\n\n    /**\n     * Called when the", "first_line_groundtruth": ".packManager.initialize();", "first_line_prediction": ".platform.onServerStarting(server);", "match": 0}
{"groundtruth": "this.bootstrap.mods();", "prediction": " this.platform.mods();\n    }\n\n    /**\n     * Gets the mod storage for the given mod.\n     *\n     * @param modId the mod id\n     * @return the mod storage\n     */\n    @Nullable\n    public ModStorage getModStorage(String modId) {\n        return this.modStorage.get(modId);\n    }\n\n    /**\n     * Gets the mod storage for the given mod.\n     *\n     * @param modId the mod id\n     * @return the mod storage\n     */\n    @Nullable\n    public ModStorage getOrCreateModStorage(String modId) {\n        ModStorage modStorage = this", "first_line_groundtruth": "this.bootstrap.mods();", "first_line_prediction": " this.platform.mods();", "match": 0}
{"groundtruth": "forceResult.setLuz(light);", "prediction": " forceResult.setForca(light);\n         forceResult.setDestreza(dark);\n         return forceResult;\n    }", "first_line_groundtruth": "forceResult.setLuz(light);", "first_line_prediction": " forceResult.setForca(light);", "match": 0}
{"groundtruth": "forceResult.setNegro(dark);", "prediction": " forceResult.setEscuridao(dark);\n        return forceResult;\n    }", "first_line_groundtruth": "forceResult.setNegro(dark);", "first_line_prediction": " forceResult.setEscuridao(dark);", "match": 0}
{"groundtruth": "result = boostDice.roll();", "prediction": "roller = boostDice.roll();\n            if (roller == 1) {\n                success++;\n            } else if (roller == 2) {\n                triumph++;\n            } else if (roller == 3) {\n                advantage++;\n            } else if (roller == 4) {\n                failure++;\n            } else if (roller == 5) {\n                despair++;\n            } else if (roller == 6) {\n                threat++;\n            }\n        }\n\n        for (int i = 0; i < ability; i++) {\n            Dice abilityDice = new Dice(6);\n            int roller", "first_line_groundtruth": "result = boostDice.roll();", "first_line_prediction": "roller = boostDice.roll();", "match": 0}
{"groundtruth": "logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));", "prediction": " callback.onClosed(code, reason);\n    }\n\n    @Override\n    public void onClosing(@NotNull WebSocket webSocket, int code, @NotNull String reason) {\n        callback.onClosing(code, reason);\n    }\n\n    @Override\n    public void onFailure(@NotNull WebSocket webSocket, @NotNull Throwable t, @Nullable Response response) {\n        callback.onFailure(t, response);\n    }\n\n    @Override\n    public void onMessage(@NotNull WebSocket webSocket, @NotNull String text) {\n        try {\n            JsonObject json = new JsonParser().parse(text).getAsJsonObject();\n            if (json.has(\"", "first_line_groundtruth": "logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));", "first_line_prediction": " callback.onClosed(code, reason);", "match": 0}
{"groundtruth": "logger.Debug(String.format(\"[%s] [%s] client send message [%s]\", conversationSignature, question, data));", "prediction": " ws.send(data);\n    }", "first_line_groundtruth": "logger.Debug(String.format(\"[%s] [%s] client send message [%s]\", conversationSignature, question, data));", "first_line_prediction": " ws.send(data);", "match": 0}
{"groundtruth": "logger.Debug(String.format(\"[%s] [%s] websocket is received new message [%s]\", conversationSignature, question, textSpited));", "prediction": " if (textSpited.startsWith(\"{\")) {\n                 JsonObject jsonObject = new JsonParser().parse(textSpited).getAsJsonObject();\n                 if (jsonObject.has(\"type\")) {\n                     if (jsonObject.get(\"type\").getAsString().equals(\"participantAdded\")) {\n                         Participant participant = new GsonBuilder().create().fromJson(jsonObject.get(\"participantAdded\").toString(), Participant.class);\n                         logger.Info(String.format(\"[%s] [%s] participant added: [%s]\", conversationSignature, question, participant.getId()));\n                         callback.onParticipantAdded(participant);\n                     } else if (jsonObject.", "first_line_groundtruth": "logger.Debug(String.format(\"[%s] [%s] websocket is received new message [%s]\", conversationSignature, question, textSpited));", "first_line_prediction": " if (textSpited.startsWith(\"{\")) {", "match": 0}
{"groundtruth": "(String.format(\"%s   %s\", country.getEmoji(), country.getName()));", "prediction": "(country.getName());\n    holder.countryCallingCode.setText(country.getCallingCode());\n    holder.countryFlag.setImageResource(country.getFlag());\n\n    // Set the background color for the current list item\n    holder.itemView.setBackgroundColor(darkMode ? Color.BLACK : Color.WHITE);\n  }\n\n  @Override\n  public int getItemCount() {\n    return countries.size();\n  }\n\n  public void setDefaultCountry(int defaultCountry) {\n    this.defaultCountry = defaultCountry;\n  }", "first_line_groundtruth": "(String.format(\"%s   %s\", country.getEmoji(), country.getName()));", "first_line_prediction": "(country.getName());", "match": 0}
{"groundtruth": "setText(String.format(\"%s   %s\", country.getEmoji(), country.getName()));", "prediction": "setText(country.getName());\n    holder.countryCallingCode.setText(country.getCallingCode());\n    holder.countryFlag.setImageResource(country.getFlag());\n\n    // Set the background color for the current list item\n    holder.itemView.setBackgroundColor(darkMode ? Color.BLACK : Color.WHITE);\n  }\n\n  @Override\n  public int getItemCount() {\n    return countries.size();\n  }\n\n  public void setDefaultCountry(int defaultCountry) {\n    this.defaultCountry = defaultCountry;\n  }", "first_line_groundtruth": "setText(String.format(\"%s   %s\", country.getEmoji(), country.getName()));", "first_line_prediction": "setText(country.getName());", "match": 0}
{"groundtruth": "(country.getCallingCode());", "prediction": "(country.getCallingCode());\n\n    // Set the country flag\n    holder.countryFlag.setImageResource(country.getFlag());\n\n    // Set the country's color\n    holder.countryName.setTextColor(darkMode ? Color.WHITE : Color.BLACK);\n    holder.callingCode.setTextColor(darkMode ? Color.WHITE : Color.BLACK);\n    holder.countryFlag.setColorFilter(darkMode ? Color.WHITE : Color.BLACK);\n  }\n\n  @Override\n  public int getItemCount() {\n    return countries.size();\n  }\n\n  public void setDefaultCountry(int defaultCountry) {\n    this.defaultCountry", "first_line_groundtruth": "(country.getCallingCode());", "first_line_prediction": "(country.getCallingCode());", "match": 1}
{"groundtruth": "country.getCode();", "prediction": " country.getIsoCode();\n      }\n    };\n  }", "first_line_groundtruth": "country.getCode();", "first_line_prediction": " country.getIsoCode();", "match": 0}
{"groundtruth": ", String> available = TraceUtils.listCategories();", "prediction": ", String> map = new TreeMap<String, String>();\n                for (String s : set) {\n                    map.put(s, s);\n                }\n                mPrefs.edit().putStringSet(getContext().getString(R.string.pref_key_tags), set).apply();\n                return true;\n            }\n        });\n\n        mRefreshReceiver = new BroadcastReceiver() {\n            @Override\n            public void onReceive(Context context, Intent intent) {\n                if (ACTION_REFRESH_TAGS.equals(intent.getAction())) {\n                    refreshUi();\n                }\n            }\n        };\n\n        mRefreshing = false;\n        m", "first_line_groundtruth": ", String> available = TraceUtils.listCategories();", "first_line_prediction": ", String> map = new TreeMap<String, String>();", "match": 0}
{"groundtruth": "Process perfetto = TraceUtils.exec(cmd, null, false);", "prediction": " Process process = TraceUtils.exec(cmd);\n             BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n             String line;\n             while ((line = reader.readLine()) != null) {\n                 if (line.startsWith(\"  category: \")) {\n                     String category = line.substring(12);\n                     result.put(category, category);\n                 }\n             }\n             return result;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "first_line_groundtruth": "Process perfetto = TraceUtils.exec(cmd, null, false);", "first_line_prediction": " Process process = TraceUtils.exec(cmd);", "match": 0}
{"groundtruth": "TraceUtils.traceStop();", "prediction": " // TODO: remove this when we have a way to stop tracing without saving.\n        prefs.edit().putBoolean(context.getString(\n            R.string.pref_key_tracing_on_without_saving), true).commit();\n    }\n\n    public static void notifySessionStopped(final Context context,\n            Collection<String> tags, int bufferSizeKb, boolean apps,\n            boolean longTrace, int maxLongTraceSizeMb, int maxLongTraceDurationMinutes) {\n        Intent intent = new Intent(context, TraceService.class);\n        intent.setAction(INTENT_ACTION_NOTIFY_SESSION_STOPPED);", "first_line_groundtruth": "TraceUtils.traceStop();", "first_line_prediction": " // TODO: remove this when we have a way to stop tracing without saving.", "match": 0}
{"groundtruth": "false : TraceUtils.isTracingOn();", "prediction": " false :\n                prefs.getBoolean(context.getString(R.string.pref_key_trace_utils_tracing_on), false);\n\n        boolean tracingIsOff = !prefsTracingOn && !traceUtilsTracingOn;\n\n        if (tracingIsOff) {\n            Log.i(TAG, \"Tracing is off\");\n            stopTracing(context);\n        } else {\n            Log.i(TAG, \"Tracing is on\");\n            startTracing(context);\n        }\n    }\n\n    public static void startTracing(Context context) {\n        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n        String tracingTags = prefs.", "first_line_groundtruth": "false : TraceUtils.isTracingOn();", "first_line_prediction": " false :", "match": 0}
{"groundtruth": "(TraceUtils.traceStart(tags, bufferSizeKb, appTracing,\n                longTrace, attachToBugreport, maxLongTraceSizeMb, maxLongTraceDurationMinutes)) {", "prediction": " (attachToBugreport) {\n            TraceUtils.traceStart(tags, bufferSizeKb, appTracing, longTrace,\n                    maxLongTraceSizeMb, maxLongTraceDurationMinutes);\n        } else {\n            TraceUtils.traceStart(tags, bufferSizeKb, appTracing, longTrace,\n                    maxLongTraceSizeMb, maxLongTraceDurationMinutes, false);\n        }\n    }\n\n    private void stopTracingInternal(String outputFilename, boolean notifySessionStopped,\n            boolean notifySessionStolen) {\n        Context context = getApplicationContext();\n        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n        boolean attachToBugreport", "first_line_groundtruth": "(TraceUtils.traceStart(tags, bufferSizeKb, appTracing,", "first_line_prediction": " (attachToBugreport) {", "match": 0}
{"groundtruth": "Process process = TraceUtils.exec(cmd);", "prediction": " Process process = TraceUtils.execWithTimeout(cmd, null, 1000);\n             if (process == null) {\n                 return false;\n             } else if (process.exitValue() != 0) {\n                 Log.e(TAG, \"perfetto is_detached failed with: \" + process.exitValue());\n                 return false;\n             }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        return true;\n    }\n\n    public boolean isTraceDumped() {\n        return Files.exists(Paths.get(TEMP_TRACE_LOCATION));\n    }\n\n   ", "first_line_groundtruth": "Process process = TraceUtils.exec(cmd);", "first_line_prediction": " Process process = TraceUtils.execWithTimeout(cmd, null, 1000);", "match": 0}
{"groundtruth": "(TraceUtils.getOutputFilename(), false, false);", "prediction": "();\n        } else if (intent.getAction().equals(INTENT_ACTION_NOTIFY_SESSION_STOPPED)) {\n            notifySessionStopped(intent.getStringExtra(INTENT_EXTRA_TAGS));\n        } else if (intent.getAction().equals(INTENT_ACTION_NOTIFY_SESSION_STOLEN)) {\n            notifySessionStolen(intent.getStringExtra(INTENT_EXTRA_TAGS));\n        }\n    }\n\n    private void startTracingInternal(Collection<String> tags, int bufferSizeKb,\n            boolean apps, boolean longTrace, int maxLongTraceSizeMb,\n            int maxLongTraceDurationMinutes", "first_line_groundtruth": "(TraceUtils.getOutputFilename(), false, false);", "first_line_prediction": "();", "match": 0}
{"groundtruth": "= TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);", "prediction": " = Runtime.getRuntime().exec(cmd);\n            process.waitFor();\n        } catch (Exception e) {\n            Log.e(TAG, \"Failed to start perfetto trace.\", e);\n            return null;\n        }\n\n        Log.v(TAG, \"Finished perfetto trace.\");\n\n        // The trace file is now in the temp location.\n        File traceFile = new File(TEMP_TRACE_LOCATION);\n        if (!traceFile.exists()) {\n            Log.e(TAG, \"Failed to find trace file.\");\n            return null;\n        }\n\n        // The trace file is now in the temp location.", "first_line_groundtruth": "= TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);", "first_line_prediction": " = Runtime.getRuntime().exec(cmd);", "match": 0}
{"groundtruth": "ps = TraceUtils.exec(\"ps -AT\", null, false);", "prediction": "udevadm = TraceUtils.exec(\"udevadm trigger\");\n            if (udevadm.waitFor() != 0) {\n                Log.e(TAG, \"udevadm trigger failed with: \" + udevadm.exitValue());\n                return false;\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return true;\n    }\n\n    public boolean traceDump(Streamer streamer) {\n        String cmd = \"atrace --async_stop -z -c\";\n\n        Log.v(TAG, \"Dumping async atrace: \" + cmd);", "first_line_groundtruth": "ps = TraceUtils.exec(\"ps -AT\", null, false);", "first_line_prediction": "udevadm = TraceUtils.exec(\"udevadm trigger\");", "match": 0}
{"groundtruth": "prefsTracingOn && !TraceUtils.isTracingOn()) {", "prediction": "prefsTracingOn) {\n            Log.i(TAG, \"Tracing is off, not stopping trace.\");\n            return;\n        }\n        // If the user thinks tracing is on and the trace processor agrees, we have to stop the trace.\n        // We must stop the trace and then start a foreground service, but let's log as an FYI.\n        Log.i(TAG, \"Stopping trace.\");\n        TraceService.stopTrace(context);\n        TraceService.startTraceService(context);\n    }", "first_line_groundtruth": "prefsTracingOn && !TraceUtils.isTracingOn()) {", "first_line_prediction": "prefsTracingOn) {", "match": 0}
{"groundtruth": "TraceUtils.clearSavedTraces();", "prediction": " TraceUtils.clearSavedTraces();\n                                    }\n                                })\n                             .setNegativeButton(R.string.cancel, null)\n                             .show();\n                        return true;\n                    }\n                });\n\n        findPreference(\"clear_saved_traces_with_tags\").setOnPreferenceClickListener(\n                new Preference.OnPreferenceClickListener() {\n                     @Override\n                     public boolean onPreferenceClick(Preference preference) {\n                         new AlertDialog.Builder(getContext())\n                                 .setTitle(R.string.clear_saved_traces_with_tags_question)\n                                 .setMessage(R.string.all_traces_with_tags_will_be_deleted", "first_line_groundtruth": "TraceUtils.clearSavedTraces();", "first_line_prediction": " TraceUtils.clearSavedTraces();", "match": 0}
{"groundtruth": "process = TraceUtils.execWithTimeout(cmd, null, STOP_TIMEOUT_MS);", "prediction": " process = TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);\n            if (process == null) {\n                Log.e(TAG, \"perfetto traceStop failed with: \" + process.exitValue());\n            } else if (process.exitValue() != 0) {\n                Log.e(TAG, \"perfetto traceStop failed with: \" + process.exitValue());\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        Log.v(TAG, \"perfetto traceStop succeeded!\");\n    }\n\n    public", "first_line_groundtruth": "process = TraceUtils.execWithTimeout(cmd, null, STOP_TIMEOUT_MS);", "first_line_prediction": " process = TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);", "match": 0}
{"groundtruth": ").contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {", "prediction": "ArrayList::new).contains(p.getProperty(\"nbt.display.Name\"))) {\n                        Rename newRename = new Rename(p.getProperty(\"nbt.display.Name\"));\n                        newRename.setFile(currentFile);\n                        ConfigManager.configWrite(newRename);\n                    }\n                } else {\n                    Rename newRename = new Rename(p.getProperty(\"nbt.display.Name\"));\n                    newRename.setFile(currentFile);\n                    ConfigManager.configWrite(newRename);\n                }\n            }\n        }\n    }\n\n    public static void jsonToProperties(String inputPath, String outputPath) {\n        File[] files", "first_line_groundtruth": ").contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {", "first_line_prediction": "ArrayList::new).contains(p.getProperty(\"nbt.display.Name\"))) {", "match": 0}
{"groundtruth": "), accessor.getAddition(), recipe.getOutput().getItem(),\n\t\t\t\tnull, null\n\t\t).toJson();", "prediction": "recipe),\n\t\t\t\taccessor.getAddition(recipe),\n\t\t\t\taccessor.getResult(recipe)\n\t\t).toJson();", "first_line_groundtruth": "), accessor.getAddition(), recipe.getOutput().getItem(),", "first_line_prediction": "recipe),", "match": 0}
{"groundtruth": "innerMsg.free();", "prediction": " innerMsg.release();\n        }\n    }", "first_line_groundtruth": "innerMsg.free();", "first_line_prediction": " innerMsg.release();", "match": 0}
{"groundtruth": "System.out.println(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u6210\u529f! \"+conf.getAddress()+\" <<<\");", "prediction": " // \u6ce8\u518c\u8fde\u63a5\u65ad\u5f00\u76d1\u542c\n            Set<Consumer<NettyClient>> consumers = new HashSet<>();\n            consumers.add(this::onLoseConnect);\n            NettyClient.this.conf.getLoseConnectListeners().forEach(consumers::add);\n            consumers.forEach(consumer -> consumer.accept(NettyClient.this));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            workGroup.shutdownGracefully();\n        }\n    }\n\n    private void onLoseConnect(ChannelFuture future){\n        if(future.isSuccess()){\n            return;\n        }\n        if", "first_line_groundtruth": "System.out.println(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u6210\u529f! \"+conf.getAddress()+\" <<<\");", "first_line_prediction": " // \u6ce8\u518c\u8fde\u63a5\u65ad\u5f00\u76d1\u542c", "match": 0}
{"groundtruth": "chIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());", "prediction": " clientIndex = loadBalancePolicy.getClientIndex(ncSet.size());\n            InetSocketAddress inetSocketAddress =\n                    linkedHashSetGetByIndex(ncSet, clientIndex);\n            ch = createClient(serviceName, inetSocketAddress);\n            return put(serviceName, ch);\n        }\n\n        // \u5982\u679c\u4e0a\u8ff0\u64cd\u4f5c ch == null \u6216\u8005 group\u76f8\u7b49 \u90a3\u5c31\u51c6\u5907 \u4ece\u73b0\u6709\u961f\u5217\u4e2d\u9009\u62e9\u4e00\u4f4d\u8fde\u63a5\n        int clientIndex = loadBalancePolicy.getClientIndex(addressSet.size());\n        InetSocketAddress inetSocketAddress =\n                linkedHashSetGetByIndex(addressSet, clientIndex);\n        ch = createClient(serviceName, inetSocketAddress);\n       ", "first_line_groundtruth": "chIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());", "first_line_prediction": " clientIndex = loadBalancePolicy.getClientIndex(ncSet.size());", "match": 0}
{"groundtruth": "(\"\u7cfb\u7edf\u901a\u77e5 - \u6ce8\u610f: \u670d\u52a1\u5668\u8fde\u63a5\u5173\u95ed! >>> \" + conf.getAddress());", "prediction": "(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u5931\u8d25! \"+conf.getAddress()+\" <<<\");\n        if(Objects.nonNull(ch)){\n            ch.close();\n        }\n        ch = null;\n    }", "first_line_groundtruth": "(\"\u7cfb\u7edf\u901a\u77e5 - \u6ce8\u610f: \u670d\u52a1\u5668\u8fde\u63a5\u5173\u95ed! >>> \" + conf.getAddress());", "first_line_prediction": "(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u5931\u8d25! \"+conf.getAddress()+\" <<<\");", "match": 0}
{"groundtruth": "() < lintConf.getClientMaxConnCount()){", "prediction": "() < lintConf.getMaxClientPerGroup()){\n                InetSocketAddress address = null;\n                Iterator<InetSocketAddress> iterator = addressSet.stream().iterator();\n                while (iterator.hasNext()){\n                    address = iterator.next();\n                    String groupName = getGroupName(address);\n\n                    boolean contains = groupNameSet.contains(groupName);\n                    if(!contains){\n                        break;\n                    }\n                }\n\n                ch = createClient(serviceName, address);\n                if(ch != null){\n                    return put(serviceName, ch);\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private NettyClient createClient(String serviceName, InetSocketAddress", "first_line_groundtruth": "() < lintConf.getClientMaxConnCount()){", "first_line_prediction": "() < lintConf.getMaxClientPerGroup()){", "match": 0}
{"groundtruth": "if(null == conf.getAddress()){", "prediction": " Bootstrap bootstrap = new Bootstrap();\n         bootstrap.group(new NioEventLoopGroup())\n                 .channel(NioSocketChannel.class)\n                 .handler(new ChannelInitializer<NioSocketChannel>() {\n                     @Override\n                     protected void initChannel(NioSocketChannel ch) throws Exception {\n                         ChannelPipeline pipeline = ch.pipeline();\n                         pipeline.addLast(new NettyDecoder(conf));\n                         pipeline.addLast(new NettyEncoder(conf));\n                         pipeline.addLast(new NettyClientHandler(conf));\n                     }\n                 });\n         ChannelFuture channelFuture = bootstrap.connect(new InetSocketAddress(conf.getHost(), conf.getPort", "first_line_groundtruth": "if(null == conf.getAddress()){", "first_line_prediction": " Bootstrap bootstrap = new Bootstrap();", "match": 0}
{"groundtruth": ".writeBytes(innerMsg.getRequestHeader().toBytesArray());", "prediction": ".writeBytes(innerMsg.getRequestHeader().toBytes());\n\n            // \u5199\u51fabody\n            byte[] bodyByteArray = null;\n            try(ByteArrayOutputStream out = new ByteArrayOutputStream();\n                ObjectOutputStream oos = new ObjectOutputStream(out);\n             ) {\n                oos.writeObject(innerMsg.getRequestBody());\n                bodyByteArray = out.toByteArray();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            byteBuf.writeBytes(bodyByteArray);\n        }\n    }", "first_line_groundtruth": ".writeBytes(innerMsg.getRequestHeader().toBytesArray());", "first_line_prediction": ".writeBytes(innerMsg.getRequestHeader().toBytes());", "match": 0}
{"groundtruth": "requestBody.setRes(res);", "prediction": " ctx.writeAndFlush(new ResponseContent(requestHeader, res));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }", "first_line_groundtruth": "requestBody.setRes(res);", "first_line_prediction": " ctx.writeAndFlush(new ResponseContent(requestHeader, res));", "match": 0}
{"groundtruth": "NettyClient> closeCallback = conf.getCloseCallback();", "prediction": "Throwable> consumer = conf.getConsumer();\n        if(Objects.nonNull(consumer)){\n            consumer.accept(new Exception(\"\u670d\u52a1\u5668\u8fde\u63a5\u5173\u95ed!\"));\n        }\n    }", "first_line_groundtruth": "NettyClient> closeCallback = conf.getCloseCallback();", "first_line_prediction": "Throwable> consumer = conf.getConsumer();", "match": 0}
{"groundtruth": "bs.connect(conf.getAddress()).sync();", "prediction": " bs.connect(new InetSocketAddress(conf.getAddress(), conf.getPort())).sync();\n            ch = (NioSocketChannel) f.channel();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close(){\n        if(ch != null){\n            ch.close();\n        }\n    }\n\n    public static class NettyConf{\n        private String address;\n        private int port;\n\n        public String getAddress() {\n            return address;\n        }\n\n        public void setAddress(String address) {\n            this.address = address;\n        }\n\n        public int getPort() {\n            return port;", "first_line_groundtruth": "bs.connect(conf.getAddress()).sync();", "first_line_prediction": " bs.connect(new InetSocketAddress(conf.getAddress(), conf.getPort())).sync();", "match": 0}
{"groundtruth": ".setLength(requestBody.toBytesArray().length);", "prediction": ".setRequestId(requestBody.getRequestId());\n        requestHeader.setVersion(requestBody.getVersion());\n        requestHeader.setMethodName(requestBody.getMethodName());\n        requestHeader.setArgs(requestBody.getArgs());\n        requestHeader.setRes(requestBody.getRes());\n\n        ExecuteThread.execute(new Runnable() {\n            @Override\n            public void run() {\n                ctx.writeAndFlush(content);\n            }\n        });\n    }", "first_line_groundtruth": ".setLength(requestBody.toBytesArray().length);", "first_line_prediction": ".setRequestId(requestBody.getRequestId());", "match": 0}
{"groundtruth": "Objects.hash(conf.getAddress().getHostName(), conf.getAddress().getPort());", "prediction": "31 * Objects.hash(conf);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        NettyClient that = (NettyClient) obj;\n        return Objects.equals(conf, that.conf);\n    }", "first_line_groundtruth": "Objects.hash(conf.getAddress().getHostName(), conf.getAddress().getPort());", "first_line_prediction": "31 * Objects.hash(conf);", "match": 0}
{"groundtruth": "loadBalancePolicy.getClientIndex(addressSet.size());", "prediction": "0;\n                    groupNameSet = new LinkedHashSet<>();\n                    for(InetSocketAddress address : addressSet){\n                        String groupName = loadBalancePolicy.select(addressSet);\n                        groupNameSet.add(groupName);\n                        NettyClient nettyClient = new NettyClient(\n                                new NettyConf(groupName, address.getHostName(), address.getPort(),\n                                        lintConf.getTimeout(), lintConf.getConnectTimeout(),\n                                        lintConf.getReadTimeout(), lintConf.getWriteTimeout(),\n                                        lintConf.getKeepAliveTime(), lintConf.getKeepAliveInterval(),\n                                        lintConf.getKeepAliveCount(), lintConf.getKeepAlive", "first_line_groundtruth": "loadBalancePolicy.getClientIndex(addressSet.size());", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "factory = ClientFactory.getInstance();", "prediction": " clientFactory = ClientFactory.getInstance();\n        NettyClient ch = clientFactory.createClient(conf);\n        return ch;\n    }\n\n    private String getGroupName(InetSocketAddress address){\n        return address.getHostName() + \":\" + address.getPort();\n    }\n\n    private InetSocketAddress linkedHashSetGetByIndex(\n            LinkedHashSet<InetSocketAddress> linkedHashSet, int index){\n        int i = 0;\n        for (InetSocketAddress inetSocketAddress : linkedHashSet) {\n            if(i == index){\n                return inetSocketAddress;\n            }\n            i++;\n        }\n        return null;\n    }\n\n    private String linkedHashSetGetByIndex(", "first_line_groundtruth": "factory = ClientFactory.getInstance();", "first_line_prediction": " clientFactory = ClientFactory.getInstance();", "match": 0}
{"groundtruth": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());", "prediction": " clientIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());\n        InetSocketAddress inetSocketAddress =\n                linkedHashSetGetByIndex(addressSet, clientIndex);\n\n        ch = createClient(serviceName, inetSocketAddress);\n        return put(serviceName, ch);\n    }\n\n    private NettyClient createClient(String serviceName, InetSocketAddress inetSocketAddress){\n        NettyClient ch = null;\n        try {\n            ch = ClientFactory.createClient(serviceName, inetSocketAddress);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return ch;\n    }\n\n    private NettyClient put(String serviceName, NettyClient", "first_line_groundtruth": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());", "first_line_prediction": " clientIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());", "match": 0}
{"groundtruth": "msg.getMessage());", "prediction": "msg.getMsg());\n        this.code = msg.getCode();\n        this.errorMessage = msg.getMsg();\n    }\n\n    public Integer getCode() {\n        return code;\n    }\n\n    public void setCode(Integer code) {\n        this.code = code;\n    }\n\n    public String getErrorMessage() {\n        return errorMessage;\n    }\n\n    public void setErrorMessage(String errorMessage) {\n        this.errorMessage = errorMessage;\n    }", "first_line_groundtruth": "msg.getMessage());", "first_line_prediction": "msg.getMsg());", "match": 0}
{"groundtruth": "requestHeader.getLength()){", "prediction": " requestHeader.getContentLength()){\n                buff.resetReaderIndex();\n                return;\n            }\n\n            // \u8bfb\u53d6\u6d88\u606f\u4f53\n            byte[] contentByteArray = new byte[requestHeader.getContentLength()];\n            buff.readBytes(contentByteArray);\n\n            RequestContent requestContent = null;\n            try(ByteArrayInputStream in = new ByteArrayInputStream(contentByteArray);\n                ObjectInputStream ois = new ObjectInputStream(in);\n                 ) {\n\n                requestContent = (RequestContent) ois.readObject();\n            } catch (IOException | ClassNotFoundException e) {\n                e.printStackTrace();\n            }\n\n            // \u8bfb\u53d6\u5b8c\u6bd5 \u91ca\u653e\u8d44\u6e90\n            buff.", "first_line_groundtruth": "requestHeader.getLength()){", "first_line_prediction": " requestHeader.getContentLength()){", "match": 0}
{"groundtruth": "NPCs.search().indexIs(index).first().flatMap(npc ->\n\t\t{", "prediction": " interact(index, actions);", "first_line_groundtruth": "NPCs.search().indexIs(index).first().flatMap(npc ->", "first_line_prediction": " interact(index, actions);", "match": 0}
{"groundtruth": "return Bank.search().indexIs(index).first().flatMap(item ->\n\t\t{", "prediction": "\treturn Bank.search().withIndex(index).first().flatMap(item ->\n\t\t\t{\n\t\t\t\tMousePackets.queueClickPacket();\n\t\t\t\tWidgetPackets.queueWidgetAction(item, actions);\n\t\t\t\treturn Optional.of(true);\n\t\t\t}).orElse(false);", "first_line_groundtruth": "return Bank.search().indexIs(index).first().flatMap(item ->", "first_line_prediction": "\treturn Bank.search().withIndex(index).first().flatMap(item ->", "match": 0}
{"groundtruth": "Players.search().filter(predicate).first().flatMap(Player ->\n\t\t{", "prediction": " Players.search().withPredicate(predicate).first().flatMap(Player ->\n\t\t{\n\t\t\tMousePackets.queueClickPacket();\n\t\t\tPlayerPackets.queuePlayerAction(Player, actions);\n\t\t\treturn Optional.of(true);\n\t\t}).orElse(false);", "first_line_groundtruth": "Players.search().filter(predicate).first().flatMap(Player ->", "first_line_prediction": " Players.search().withPredicate(predicate).first().flatMap(Player ->", "match": 0}
{"groundtruth": "BankInventory.search().indexIs(index).first().flatMap(item ->\n\t\t{", "prediction": " useItem(BankInventory.search().withIndex(index), actions);", "first_line_groundtruth": "BankInventory.search().indexIs(index).first().flatMap(item ->", "first_line_prediction": " useItem(BankInventory.search().withIndex(index), actions);", "match": 0}
{"groundtruth": "NPCs.search().filter(predicate).first().flatMap(npc ->\n\t\t{", "prediction": " NPCs.search().withPredicate(predicate).first().flatMap(npc ->\n\t\t{\n\t\t\tMousePackets.queueClickPacket();\n\t\t\tNPCPackets.queueNPCAction(npc, actions);\n\t\t\treturn Optional.of(true);\n\t\t}).orElse(false);", "first_line_groundtruth": "NPCs.search().filter(predicate).first().flatMap(npc ->", "first_line_prediction": " NPCs.search().withPredicate(predicate).first().flatMap(npc ->", "match": 0}
{"groundtruth": "BufferMethods.du(buffer, (Integer) input);", "prediction": "\twriteObject(ObfuscatedNames.packetBufferNodeDU, buffer, input);\n\t\t\t\tbreak;\n\t\t\tcase \"is\":\n\t\t\t\t\twriteObject(ObfuscatedNames.packetBufferNodeIS, buffer, input);\n\t\t\t\tbreak;\n\t\t\tcase \"isaac\":\n\t\t\t\t\twriteObject(ObfuscatedNames.packetBufferNodeISAAC, buffer, input);\n\t\t\t\tbreak;\n\t\t\tcase \"isaac2\":\n\t\t\t\t\twriteObject(ObfuscatedNames.packetBufferNodeISAAC2, buffer, input);\n\t\t\t\tbreak;\n\t\t\tcase \"isaac3\":\n\t\t\t\t\twriteObject(ObfuscatedNames.packetBufferNodeISAAC", "first_line_groundtruth": "BufferMethods.du(buffer, (Integer) input);", "first_line_prediction": "\twriteObject(ObfuscatedNames.packetBufferNodeDU, buffer, input);", "match": 0}
{"groundtruth": ".getRequestId(), lintConf.getRequestWaitTimeBySeconds());", "prediction": ".getRequestId(),\n                    lintConf.getTimeout()\n            );\n\n            // \u53d6\u51fa\u7ed3\u679c\n            responseMsg = MsgPool.getInstance().get(requestHeader.getRequestId());\n        } catch (Exception e) {\n            throw new RpcException(RpcMsg.EXCEPTION_RPC_ERROR, e);\n        } finally {\n            nc.close();\n        }\n\n        long endTime = System.currentTimeMillis();\n        System.out.println(\"rpc \u8017\u65f6\uff1a\" + (endTime - startTime) + \"ms\");\n        return responseMsg;\n    }", "first_line_groundtruth": ".getRequestId(), lintConf.getRequestWaitTimeBySeconds());", "first_line_prediction": ".getRequestId(),", "match": 0}
{"groundtruth": "()) && this.getBody().build()) {", "prediction": "())) {\n            CompletableFuture.runAsync(() -> {\n                try {\n                    URL url = new URL(this.getUrl());\n                    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n                    connection.setDoOutput(true);\n                    connection.setRequestMethod(\"POST\");\n                    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n\n                    OutputStream outputStream = connection.getOutputStream();\n                    outputStream.write(this.getBody().toString().getBytes());\n                    outputStream.flush();\n                    outputStream.close();\n\n                    connection.connect();\n                    connection.disconnect();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }", "first_line_groundtruth": "()) && this.getBody().build()) {", "first_line_prediction": "())) {", "match": 0}
{"groundtruth": ".getBody().toJson().getBytes());", "prediction": ".getBody().build().getBytes());\n                    stream.flush();\n                    stream.close();\n\n                    connection.connect();\n\n                    if (connection.getResponseCode() != 204) {\n                        throw new Exception(\"Response code is not 204\");\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n    }", "first_line_groundtruth": ".getBody().toJson().getBytes());", "first_line_prediction": ".getBody().build().getBytes());", "match": 0}
{"groundtruth": "Widget bow = HypsApiPlugin.getItem(\"*bow*\");", "prediction": "\tMousePackets.queueClickPacket();\n\t\t\t\t\tWidgetPackets.queueWidgetActionPacket(1, 5046276, -1, 12); //quickPrayer magic\n\t\t\t}\n\t\t\telse if (HypsApiPlugin.getHeadIcon(hunllef) == HeadIcon.RANGE && (!name.contains(\"sword\") && !name.contains(\"mace\")))\n\t\t\t{\n\t\t\t\tMousePackets.queueClickPacket();\n\t\t\t\tWidgetPackets.queueWidgetActionPacket(1, 5046276, -1, 13); //quickPr", "first_line_groundtruth": "Widget bow = HypsApiPlugin.getItem(\"*bow*\");", "first_line_prediction": "\tMousePackets.queueClickPacket();", "match": 0}
{"groundtruth": "<Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();", "prediction": "<Widget> ring_of_wealth = Inventory.search().withId(RING_OF_WEALTH).first();\n\t\t\t\tif (royal_seed_pod.isPresent() && ring_of_wealth.isPresent())\n\t\t\t\t{\n\t\t\t\t\tif (config.teleportToSkulledPlayer())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (teleportedFromSkulledPlayer)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteleportedFromSkulledPlayer = false;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tteleportedFromSkulledPlayer = true;\n\t\t\t\t\t\tif (client.getLocalPlayer() !=", "first_line_groundtruth": "<Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();", "first_line_prediction": "<Widget> ring_of_wealth = Inventory.search().withId(RING_OF_WEALTH).first();", "match": 0}
{"groundtruth": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();", "prediction": "> widget = client.getWidget(WidgetInfo.PVP_WILDERNESS_LEVEL);\n\t\t\t\tif (widget.isPresent())\n\t\t\t\t{\n\t\t\t\t\twidget.get().setText(\"Level: \" + level);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (previousLevel != level)\n\t\t\t{\n\t\t\t\tpreviousLevel = level;\n\t\t\t\tOptional<Widget> widget = client.getWidget(WidgetInfo.PVP_WILDERNESS_LEVEL);\n\t\t\t\tif (widget.isPresent())\n\t\t\t\t{\n\t\t\t\t\twidget.get().setText(\"Level: \" + level);\n\t\t\t\t}\n\t\t\t", "first_line_groundtruth": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();", "first_line_prediction": "> widget = client.getWidget(WidgetInfo.PVP_WILDERNESS_LEVEL);", "match": 0}
{"groundtruth": "> widget = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();", "prediction": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();\n\t\t\t\tOptional<Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();\n\t\t\t\tif (royal_seed_pod.isPresent() || ring_of_wealth.isPresent() || (rowEquipment != null && RING_OF_WEALTH_ITEM_IDS.contains(rowEquipment.getId())))\n\t\t\t\t{\n\t\t\t\t\tteleported = true;\n\t\t\t\t}\n\t\t\t\tif (teleported)\n\t\t\t\t", "first_line_groundtruth": "> widget = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();", "first_line_prediction": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();", "match": 0}
{"groundtruth": "Widget> row = Inventory.search().nameContains(\"Ring of wealth (\").first();", "prediction": "Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();\n\t\t\t\tif (ring_of_wealth.isPresent())\n\t\t\t\t\t{\n\t\t\t\t\tteleported = true;\n\t\t\t\t\tInventoryInteraction.useItem(ring_of_wealth.get(), \"Commune\");\n\t\t\t\t\t}\n\t\t\t\tif (teleported)\n\t\t\t\t\t{\n\t\t\t\t\tteleportedFromSkulledPlayer = true;\n\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\tOptional<Widget> ring_of_wealth_item = Inventory.search().withId(RING_OF", "first_line_groundtruth": "Widget> row = Inventory.search().nameContains(\"Ring of wealth (\").first();", "first_line_prediction": "Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();", "match": 0}
{"groundtruth": "(embed.toArray().entrySet())));", "prediction": "(embed.toArray())));\n\n        result.put(\"embeds\", embedList);\n\n        return result;\n    }", "first_line_groundtruth": "(embed.toArray().entrySet())));", "first_line_prediction": "(embed.toArray())));", "match": 0}
{"groundtruth": "return repository.findByEmailSent(false);", "prediction": " List<ContactForm> contactForms = new ArrayList<>();\n             for(ContactForm contactForm : repository.findAll()){\n                 if(contactForm.isSendEmail()){\n                     contactForms.add(contactForm);\n                 }\n             }\n             return contactForms;\n         }\n    }", "first_line_groundtruth": "return repository.findByEmailSent(false);", "first_line_prediction": " List<ContactForm> contactForms = new ArrayList<>();", "match": 0}
{"groundtruth": "= pluginLoader.getPluginFactories();", "prediction": " = pluginLoader.getFactories();\n        for (String key : factories.keySet()) {\n            PluginFactory factory = factories.get(key);\n            PluginStore.instance.plugins.put(key, factory.createPlugin());\n        }\n    }\n\n    @PreDestroy\n    public void destroy() {\n        for (String key : PluginStore.instance.plugins.keySet()) {\n            PluginStore.instance.plugins.get(key).onShutdown();\n        }\n    }", "first_line_groundtruth": "= pluginLoader.getPluginFactories();", "first_line_prediction": " = pluginLoader.getFactories();", "match": 0}
{"groundtruth": "handler.onCommand(command, arguments);", "prediction": " handler.handleCommand(command, arguments);\n            if (!result) {\n                log.error(\"Command {} not found\", command);\n            }\n        }\n    }", "first_line_groundtruth": "handler.onCommand(command, arguments);", "first_line_prediction": " handler.handleCommand(command, arguments);", "match": 0}
{"groundtruth": "EasyContactFormsApplication.loadPlugins(pluginsPath);", "prediction": " // reload plugins\n        PluginStore.instance.reloadPlugins(pluginsPath);\n\n        // reload plugins\n        this.plugins = this.priorities();\n    }\n\n    /**\n     * Shuts down the application\n     * @param args command line arguments\n     */\n    private void shutdown(String[] args) {\n        if (args.length > 0) {\n            try {\n                int seconds = Integer.parseInt(args[0]);\n                TimeUnit.SECONDS.sleep(seconds);\n            } catch (InterruptedException e) {\n                log.error(\"Interrupted while waiting for shutdown\");\n            }\n        }\n        System.exit(0);\n    }", "first_line_groundtruth": "EasyContactFormsApplication.loadPlugins(pluginsPath);", "first_line_prediction": " // reload plugins", "match": 0}
{"groundtruth": "<ContactForm> forms = contactFormService.getContactForms(true);", "prediction": "<ContactForm> notSendMails = contactFormService.getNotSendMails();\n            for(ContactForm contactForm : notSendMails){\n                try {\n                    sendMail(contactForm);\n                } catch (MessagingException e) {\n                    log.error(\"Error sending mail to \" + contactForm.getEmail(), e);\n                }\n            }\n        }else{\n            List<ContactForm> allMails = contactFormService.getAllMails();\n            for(ContactForm contactForm : allMails){\n                try {\n                    sendMail(contactForm);\n                } catch (MessagingException e) {\n                    log", "first_line_groundtruth": "<ContactForm> forms = contactFormService.getContactForms(true);", "first_line_prediction": "<ContactForm> notSendMails = contactFormService.getNotSendMails();", "match": 0}
{"groundtruth": "lastRange.covers(previous)) {", "prediction": "previous.getEnd() == lastRange.getEnd()) {\n                    lastRange = lastRange.merge(previous);\n                    iterator.remove();\n                } else {\n                    lastRange = previous;\n                }\n            }\n        }\n    }\n    \n    @Override\n    public void accept(String s) {\n        tokens.add(new TokenRange(lastRange.getEnd(), s.length(), Collections.emptyList()));\n        lastRange = new TokenRange(lastRange.getEnd(), s.length(), Collections.emptyList());\n    }\n    \n    @Override\n    public void visit(StringSearcher stringSearcher) {\n        accept(stringSearcher.getSearchString());\n    }", "first_line_groundtruth": "lastRange.covers(previous)) {", "first_line_prediction": "previous.getEnd() == lastRange.getEnd()) {", "match": 0}
{"groundtruth": "lastRange.addRange(previous);", "prediction": " lastRange = lastRange.merge(previous);\n                } else {\n                    iterator.add(lastRange);\n                    lastRange = previous;\n                }\n            }\n        }\n        iterator.add(lastRange);\n    }\n    \n    @Override\n    public void accept(String s) {\n        tokens.add(new TokenRange(s));\n    }\n    \n    @Override\n    public void visit(StringSearcher stringSearcher) {\n        tokens.add(new TokenRange(stringSearcher));\n    }\n    \n    @Override\n    public void visit(StringSearcher.Any any) {\n        tokens.add(new TokenRange(any));\n    }\n    \n    @Override", "first_line_groundtruth": "lastRange.addRange(previous);", "first_line_prediction": " lastRange = lastRange.merge(previous);", "match": 0}
{"groundtruth": "tokens.add(range.recalculate());", "prediction": "lastRange = range;\n        return range;\n    }\n    \n    private TokenRange getAndPushRange() {\n        \n        return getAndPushRange(0);\n    }\n    \n    private TokenRange getAndPushRange(final int length) {\n        \n        TokenRange range = TokenRange.of(lastRange.start(), lastRange.end(), length);\n        tokens.add(range);\n        return range;\n    }\n    \n    @Override\n    public void accept(final String s) {\n        \n        StringSearcher.search(s, this);\n    }", "first_line_groundtruth": "tokens.add(range.recalculate());", "first_line_prediction": "lastRange = range;", "match": 0}
{"groundtruth": "StringSearcher.search(search, this);", "prediction": "", "first_line_groundtruth": "StringSearcher.search(search, this);", "first_line_prediction": "", "match": 0}
{"groundtruth": "cliRunner.start();", "prediction": " return getConnection(cliRunner.getEnginePort(), cliRunner.getSessionToken(), Optional.of(cliRunner));\n        } catch (NumberFormatException nfe) {\n            LOG.error(\"invalid port value in DAGGER_SESSION_PORT\", nfe);\n        }\n        return null;\n    }\n\n    private static Connection getConnection(int port, String sessionToken, Optional<CLIRunner> daggerRunner) {\n        Vertx vertx = Vertx.vertx();\n        VertxDynamicGraphQLClientBuilder builder = VertxDynamicGraphQLClientBuilder.newBuilder()\n                .url(\"http://localhost:\" + port + \"/graphql\")\n               ", "first_line_groundtruth": "cliRunner.start();", "first_line_prediction": " return getConnection(cliRunner.getEnginePort(), cliRunner.getSessionToken(), Optional.of(cliRunner));", "match": 0}
{"groundtruth": "connectParams = cliRunner.getConnectionParams();", "prediction": " params = cliRunner.getConnectParams();\n            return getConnection(params.port, params.token, Optional.of(cliRunner));\n        } catch (Exception e) {\n            LOG.error(\"Failed to initialize connection with engine\", e);\n            throw e;\n        }\n    }\n\n    private static Connection getConnection(int port, String sessionToken, Optional<CLIRunner> daggerRunner) {\n        Vertx vertx = Vertx.vertx();\n        VertxDynamicGraphQLClientBuilder builder = VertxDynamicGraphQLClientBuilder.newBuilder()\n                .url(\"http://localhost:\" + port + \"/graphql\")\n                .vertx", "first_line_groundtruth": "connectParams = cliRunner.getConnectionParams();", "first_line_prediction": " params = cliRunner.getConnectParams();", "match": 0}
{"groundtruth": "(BufferedInputStream in = new BufferedInputStream(fetcher.fetch(checksumMapURL))) {", "prediction": " (InputStream is = fetcher.fetch(checksumMapURL)) {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    String[] parts = line.split(\" \");\n                    checksums.put(parts[0], parts[1]);\n                }\n            }\n        }\n        return checksums;\n    }\n\n    private String extractCLI(String archiveName, String version, Path tmpBin) throws IOException {\n        try (InputStream is = fetcher.fetch(archiveName)) {\n            try (", "first_line_groundtruth": "(BufferedInputStream in = new BufferedInputStream(fetcher.fetch(checksumMapURL))) {", "first_line_prediction": " (InputStream is = fetcher.fetch(checksumMapURL)) {", "match": 0}
{"groundtruth": "basicParameter.getApiUrl() == null) {", "prediction": "basicParameter.isDisableSslVerification()) {\n            builder.disableSslVerification();\n        }\n    }", "first_line_groundtruth": "basicParameter.getApiUrl() == null) {", "first_line_prediction": "basicParameter.isDisableSslVerification()) {", "match": 0}
{"groundtruth": "cliRunner.shutdown();", "prediction": " LOG.error(\"Failed to connect to engine\", ioe);\n             throw ioe;\n        }\n    }\n\n    private static Connection getConnection(int port, String sessionToken, Optional<CLIRunner> daggerRunner) {\n        Vertx vertx = Vertx.vertx();\n        VertxDynamicGraphQLClientBuilder builder = VertxDynamicGraphQLClientBuilder.newBuilder()\n                .url(\"http://localhost:\" + port + \"/graphql\")\n                .vertx(vertx);\n        if (sessionToken != null) {\n            builder.header(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString(sessionToken.getBytes", "first_line_groundtruth": "cliRunner.shutdown();", "first_line_prediction": " LOG.error(\"Failed to connect to engine\", ioe);", "match": 0}
{"groundtruth": "new BufferedInputStream(new DigestInputStream(fetcher.fetch(cliArchiveURL), sha256))) {", "prediction": " fetcher.fetch(cliArchiveURL);\n             DigestInputStream digestIn = new DigestInputStream(in, sha256);\n             ArchiveInputStream archiveIn = getArchiveInputStream(digestIn)) {\n            ArchiveEntry entry;\n            while ((entry = archiveIn.getNextEntry()) != null) {\n                if (entry.isDirectory()) {\n                    continue;\n                }\n                Path destPath = dest.resolve(entry.getName());\n                LOG.info(\"Extracting \" + entry.getName() + \" to \" + destPath);\n                try (OutputStream out = Files.newOutputStream(destPath)) {\n                    byte[] buffer = new", "first_line_groundtruth": "new BufferedInputStream(new DigestInputStream(fetcher.fetch(cliArchiveURL), sha256))) {", "first_line_prediction": " fetcher.fetch(cliArchiveURL);", "match": 0}
{"groundtruth": "parameter.setInit_images(new String[]{", "prediction": "\tparameter.setBase64String(base64String);\n\t\tSdResponses res = Img2Img.generate(parameter);\n\t\tfor (String image : res.getImages()) {\n\t\t\tBufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(Base64.getDecoder().decode(image)));\n\t\t\tFile output = new File(\"image.png\");\n\t\t\tImageIO.write(bufferedImage, \"png\", output);\n\t\t}", "first_line_groundtruth": "parameter.setInit_images(new String[]{", "first_line_prediction": "\tparameter.setBase64String(base64String);", "match": 0}
{"groundtruth": "parameter.setDenoisingStrength(new BigDecimal(\"0.55\"));", "prediction": "\tparameter.getBasicParameter().setScale(1.5);\n\t\t//\u5982\u9700\u8981\u4ee3\u7406\u5219\u89e3\u5f00\u4e0b\u5217\u4ee3\u7801\u6ce8\u91ca", "first_line_groundtruth": "parameter.setDenoisingStrength(new BigDecimal(\"0.55\"));", "first_line_prediction": "\tparameter.getBasicParameter().setScale(1.5);", "match": 0}
{"groundtruth": "(serviceConnection.isEmpty()) tokens.add(token);", "prediction": " (serviceConnection.isEmpty()) {\n                tokens.add(token);\n            }\n        }\n        for (String token : tokens) {\n            map.remove(token);\n            services.remove(token);\n            dhizuku.unbindUserService(token);\n        }\n    }\n\n    static void died(@NonNull Bundle bundle) {\n        String token = bundle.getString(\"token\");\n        DhizukuServiceConnection serviceConnection = map.get(token);\n        if (serviceConnection == null) return;\n        serviceConnection.onServiceDisconnected(bundle.getParcelable(\"name\"));\n    }", "first_line_groundtruth": "(serviceConnection.isEmpty()) tokens.add(token);", "first_line_prediction": " (serviceConnection.isEmpty()) {", "match": 0}
{"groundtruth": "args.build());", "prediction": "iDhizukuUserServiceConnection, args.build());\n    }\n\n    static void onServiceConnected(@NonNull IDhizuku dhizuku, @NonNull DhizukuUserServiceArgs args) throws RemoteException {\n        ComponentName name = args.getComponentName();\n        String token = name.flattenToString();\n        IBinder service = services.get(token);\n        if (service == null) return;\n        map.put(token, args.getServiceConnection());\n        args.getServiceConnection().onServiceConnected(name, service);\n    }\n\n    static void onServiceDisconnected(@NonNull IDhizuku dhiz", "first_line_groundtruth": "args.build());", "first_line_prediction": "iDhizukuUserServiceConnection, args.build());", "match": 0}
{"groundtruth": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());", "prediction": " == null) {\n            service = dhizuku.bindService(args.getIntent(), iDhizukuUserServiceConnection, args.getFlags());\n            services.put(token, service);\n        }\n        map.put(token, args.getServiceConnection());\n    }\n\n    static void stop(@NonNull IDhizuku dhizuku, @NonNull DhizukuUserServiceArgs args) throws RemoteException {\n        ComponentName name = args.getComponentName();\n        String token = name.flattenToString();\n        IBinder service = services.get(token);\n        if (service != null) {\n            dh", "first_line_groundtruth": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());", "first_line_prediction": " == null) {", "match": 0}
{"groundtruth": ".update(SharedDataModel.getReservation());", "prediction": ".updateReservation(SharedDataModel.getReservation());\n        Stage stage = (Stage) btnPay.getScene().getWindow();\n        stage.close();\n    }\n\n    @javafx.fxml.FXML\n    public void handleCancel(ActionEvent actionEvent) {\n        Stage stage = (Stage) btnCancel.getScene().getWindow();\n        stage.close();\n    }", "first_line_groundtruth": ".update(SharedDataModel.getReservation());", "first_line_prediction": ".updateReservation(SharedDataModel.getReservation());", "match": 0}
{"groundtruth": "SharedDataModel.getReservation().state = \"paid\";", "prediction": " Reservation reservation = SharedDataModel.getReservation();\n         reservation.customer = new Customer(tfCustomer.getText());\n         reservation.price = Double.parseDouble(tfPrice.getText());\n         reservation.sessions = Integer.parseInt(tfCntSessions.getText());\n         ReservationDAO.updateReservation(reservation);\n         Stage stage = (Stage) btnPay.getScene().getWindow();\n         stage.close();\n    }\n\n    @javafx.fxml.FXML\n    public void handleCancel(ActionEvent actionEvent) {\n        Stage stage = (Stage) btnCancel.getScene().getWindow();\n        stage.close();\n    }", "first_line_groundtruth": "SharedDataModel.getReservation().state = \"paid\";", "first_line_prediction": " Reservation reservation = SharedDataModel.getReservation();", "match": 0}
{"groundtruth": "customer = CustomerDAO.getCustomerbyID(kundenID);", "prediction": "customer = new Customer(platz, kundenID, uhrzeit);\n    }\n\n    public Reservation(int id, int anzahlPl\u00e4tze, int anzahlEinheiten, float preis, Date datum, Time uhrzeit, int platz, int kundenID, String zustand, Customer customer) {\n        this.id = id;\n        this.court_count = anzahlPl\u00e4tze;\n        this.sessions = anzahlEinheiten;\n        this.price = preis;\n        this.date = datum;\n        this.cusomerID = kundenID", "first_line_groundtruth": "customer = CustomerDAO.getCustomerbyID(kundenID);", "first_line_prediction": "customer = new Customer(platz, kundenID, uhrzeit);", "match": 0}
{"groundtruth": "(), connectParams.getSessionToken(), Optional.of(cliRunner));", "prediction": "(), connectParams.getSessionToken(), Optional.of(cliRunner));\n        } catch (Exception e) {\n            LOG.error(\"Failed to initialize connection with engine\", e);\n            throw e;\n        }\n    }\n\n    private static Connection getConnection(int port, String sessionToken, Optional<CLIRunner> daggerRunner) {\n        Vertx vertx = Vertx.vertx();\n        VertxDynamicGraphQLClientBuilder builder = VertxDynamicGraphQLClientBuilder.newBuilder()\n                .url(\"http://localhost:\" + port + \"/graphql\")\n                .vertx(vertx);\n        if (sessionToken != null) {\n            builder.", "first_line_groundtruth": "(), connectParams.getSessionToken(), Optional.of(cliRunner));", "first_line_prediction": "(), connectParams.getSessionToken(), Optional.of(cliRunner));", "match": 1}
{"groundtruth": "Schema.initialize(in);", "prediction": " new SchemaVisitor().visit(in);\n            CodegenVisitor codegenVisitor = new CodegenVisitor(schema);\n            codegenVisitor.visit(dest);\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"Failed to read schema\", e);\n        }\n    }\n\n    private InputStream daggerSchema() throws IOException {\n        if (online) {\n            return onlineSchema();\n        } else {\n            return localSchema();\n        }\n    }\n\n    private InputStream onlineSchema() throws IOException {\n        URL url = new URL(introspectionQuertyURL);\n        FluentProcess process = FluentProcess.builder()\n                .command(bin, \"", "first_line_groundtruth": "Schema.initialize(in);", "first_line_prediction": " new SchemaVisitor().visit(in);", "match": 0}
{"groundtruth": "().info(String.format(\"Generating scala %s\", type.getName()));", "prediction": "().info(\"Visiting scalar \" + type.getName());\n                    codegen.visitScalar(type);\n                }\n\n                @Override\n                public void visitEnum(Type type) {\n                    getLog().info(\"Visiting enum \" + type.getName());\n                    codegen.visitEnum(type);\n                }\n\n                @Override\n                public void visitObject(Type type) {\n                    getLog().info(\"Visiting object \" + type.getName());\n                    codegen.visitObject(type);\n                }\n\n                @Override\n                public void visitArray(Type type) {\n                    getLog().info(\"Visiting array \" + type.getName());\n                    codegen", "first_line_groundtruth": "().info(String.format(\"Generating scala %s\", type.getName()));", "first_line_prediction": "().info(\"Visiting scalar \" + type.getName());", "match": 0}
{"groundtruth": "= \"```\" + (isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";", "prediction": " = topList.getTopListString();\n        description = description.replace(\"{toplist}\", replacement1);\n\n        //{player} placeholder\n        String replacement2 = leaderboard.getPlayerName();\n        description = description.replace(\"{player}\", replacement2);\n\n        //{score} placeholder\n        String replacement3 = leaderboard.getScore();\n        description = description.replace(\"{score}\", replacement3);\n\n        //{time} placeholder\n        String replacement4 = leaderboard.getTime();\n        description = description.replace(\"{time}\", replacement4);\n\n        //{rank} placeholder\n        String replacement5 = leaderboard.getRank();\n        description =", "first_line_groundtruth": "= \"```\" + (isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";", "first_line_prediction": " = topList.getTopListString();", "match": 0}
{"groundtruth": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());", "prediction": "maxNameLength + 3) + \"s %d%s\", i++, name, intValue, leaderboardConfig.getMetric());\n                }\n            } else {\n                DecimalFormat df = new DecimalFormat(\"#.\" + new String(new char[numberOfFloatingPoints]).replace('\\0', '#'));\n                df.setRoundingMode(RoundingMode.HALF_UP);\n                formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %s%s\", i++, name, df.format(score), leaderboardConfig.getMetric());\n            }\n            sb.append", "first_line_groundtruth": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());", "first_line_prediction": "maxNameLength + 3) + \"s %d%s\", i++, name, intValue, leaderboardConfig.getMetric());", "match": 0}
{"groundtruth": "(isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";", "prediction": " topList.getTopListString(isForWebhook) + \"```\";\n        description = description.replace(\"{toplist}\", replacement1);\n\n        //{player} placeholder\n        String replacement2 = \"```\" +  leaderboard.getPlayerString(isForWebhook) + \"```\";\n        description = description.replace(\"{player}\", replacement2);\n\n        //{score} placeholder\n        String replacement3 = \"```\" +  leaderboard.getScoreString(isForWebhook) + \"```\";\n        description = description.replace(\"{score}\", replacement3);\n\n        //{time} placeholder\n        String replacement4 = \"```\"", "first_line_groundtruth": "(isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";", "first_line_prediction": " topList.getTopListString(isForWebhook) + \"```\";", "match": 0}
{"groundtruth": ") + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());", "prediction": ") + \"s %d\", i, name, intValue);\n                } else {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %d\", i, name, intValue);\n                }\n            } else {\n                if (isWebhookFormat) {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %s\", i, name, getFormattedScore(score));\n                } else {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3)", "first_line_groundtruth": ") + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());", "first_line_prediction": ") + \"s %d\", i, name, intValue);", "match": 0}
{"groundtruth": "if (leaderboard.getConfig().getFloatingpoints() > 0){", "prediction": " if (placeholderType.equals(\"name\")) {\n                     replacement = entry.getKey();\n                 } else if (placeholderType.equals(\"score\")) {\n                     replacement = String.valueOf(intValue);\n                 }\n                 description = description.replace(placeholder, replacement);\n            }\n        }\n\n        //{top-1-name} {top-1-score} placeholders\n        Pattern pattern2 = Pattern.compile(\"\\\\{top-(\\\\d+)-(name|score|time)\\\\}\");\n        Matcher matcher2 = pattern2.matcher(description);\n        while (matcher2.find()) {\n            int position = Integer.parseInt(matcher2.", "first_line_groundtruth": "if (leaderboard.getConfig().getFloatingpoints() > 0){", "first_line_prediction": " if (placeholderType.equals(\"name\")) {", "match": 0}
{"groundtruth": ", Double> playerScores = topList.getTopListAsMap();", "prediction": ", BigDecimal> top1 = topList.getTop1();\n        if (top1.isEmpty()) {\n            description = description.replace(\"{top-1-name}\", \"```No one has scored yet!```\");\n            description = description.replace(\"{top-1-score}\", \"```0```\");\n        } else {\n            description = description.replace(\"{top-1-name}\", top1.get(leaderboard.getConfig().getTop1Name()).toString());\n            description = description.replace(\"{top-1-score}\", top1.get(leaderboard.getConfig().getTop1Name()).toString());", "first_line_groundtruth": ", Double> playerScores = topList.getTopListAsMap();", "first_line_prediction": ", BigDecimal> top1 = topList.getTop1();", "match": 0}
{"groundtruth": "this.leaderboardversion = mainConfig.getPluginVersion();", "prediction": " this.leaderboardversion = mainConfig.getLeaderboardversion();\n        customConfig = new CustomConfig(name);\n        config = customConfig.get();\n        load();\n    }\n\n    //Constructer for load exciting leaderboardConfig\n    public LeaderboardConfig(String name, String placeholder, int top, String delay, String metric, boolean higherisbetter, int floatingpoints, String webhookurl, String webhookAvatarUrl, String webhookUserName, String embedTitle, List<String> embedDescription, String embedUrl, String embedColour, String embedFooter, String embedImage, String embedThumbnail, String leaderboardversion) {", "first_line_groundtruth": "this.leaderboardversion = mainConfig.getPluginVersion();", "first_line_prediction": " this.leaderboardversion = mainConfig.getLeaderboardversion();", "match": 0}
{"groundtruth": "= customConfig.get();", "prediction": " = plugin.getConfig();\n        placeholder = config.getString(\"placeholders.\" + name + \".placeholder\");\n        top = config.getInt(\"placeholders.\" + name + \".top\");\n        delay = config.getString(\"placeholders.\" + name + \".delay\");\n        refreshOnSent = config.getBoolean(\"placeholders.\" + name + \".refreshOnSent\");\n\n        metric = config.getString(\"placeholders.\" + name + \".metric\");\n        higherisbetter = config.getBoolean(\"placeholders.\" + name + \".higherisbetter\");\n        floatingpoints = config.getInt(\"placeholders.\" + name + \".floatingpoints\");\n        webhookurl = config.getString", "first_line_groundtruth": "= customConfig.get();", "first_line_prediction": " = plugin.getConfig();", "match": 0}
{"groundtruth": "customConfig.setup();", "prediction": " config = customConfig.get();\n        config.set(\"placeholder\", placeholder);\n        config.set(\"top\", top);\n        config.set(\"delay\", delay);\n        config.set(\"refreshOnSent\", refreshOnSent);\n        config.set(\"metric\", metric);\n        config.set(\"higherisbetter\", higherisbetter);\n        config.set(\"floatingpoints\", floatingpoints);\n        config.set(\"webhookurl\", webhookurl);\n        config.set(\"webhookAvatarUrl\", webhookAvatarUrl);\n        config.set(\"webhookUserName\", webhookUserName);\n        config.set(\"embedTitle\", embedTitle);\n       ", "first_line_groundtruth": "customConfig.setup();", "first_line_prediction": " config = customConfig.get();", "match": 0}
{"groundtruth": "if (cache.isDiffernt()){", "prediction": " cache.updateCache(currentTime);\n                    break;\n                case \"hour\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORHOUR){\n                        Cache cache = new Cache(leaderboard);\n                        cache.updateCache(currentTime);\n                    }\n                    break;\n                case \"day\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORDAY){\n                        Cache cache = new Cache(leaderboard);\n                        cache.updateCache(currentTime);\n                    }\n                    break;\n                case \"week\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORWEEK", "first_line_groundtruth": "if (cache.isDiffernt()){", "first_line_prediction": " cache.updateCache(currentTime);", "match": 0}
{"groundtruth": "(descriptionGenerator.getDescription(false));", "prediction": "(descriptionGenerator.getDescription());\n        return discordsrvEmbed;\n    }", "first_line_groundtruth": "(descriptionGenerator.getDescription(false));", "first_line_prediction": "(descriptionGenerator.getDescription());", "match": 0}
{"groundtruth": "customConfig.reload();", "prediction": " plugin.getLogger().info(\"LeaderboardConfig saved\");\n    }\n\n    //load methode\n    public void load() {\n        placeholder = config.getString(\"placeholder\");\n        top = config.getInt(\"top\");\n        delay = config.getString(\"delay\");\n        refreshOnSent = config.getBoolean(\"refresh-database-onsent\");\n        metric = config.getString(\"metric\");\n        higherisbetter = config.getBoolean(\"higherisbetter\");\n        floatingpoints = config.getInt(\"floatingpoints\");\n        webhookurl = config.getString(\"webhook-url\");\n        webhookAvatarUrl = config.getString(\"webhook-avatar-url\");", "first_line_groundtruth": "customConfig.reload();", "first_line_prediction": " plugin.getLogger().info(\"LeaderboardConfig saved\");", "match": 0}
{"groundtruth": "discordsrvEmbed.setEmbedImage(image);", "prediction": "\n\n        if (image != null && !image.isEmpty()) {\n            discordsrvEmbed.setEmbedImage(image);\n        }\n\n        if (thumb != null && !thumb.isEmpty()) {\n            discordsrvEmbed.setEmbedThumbnail(thumb);\n        }\n\n        return discordsrvEmbed;\n    }\n\n    public TopList getTopList() {\n        if (topList == null) {\n            topList = new TopList(leaderboard);\n        }\n        return topList;\n    }\n\n    public Leaderboard getLeaderboard() {\n        return leaderboard;\n    }\n\n    public void setLeaderboard(Leaderboard leaderboard) {\n       ", "first_line_groundtruth": "discordsrvEmbed.setEmbedImage(image);", "first_line_prediction": "", "match": 0}
{"groundtruth": "cache.setCache();", "prediction": "\n                    }\n                    break;\n                case \"hourly\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORHOUR){\n                        leaderboard.send();\n                    }\n                    break;\n                case \"daily\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORDAY){\n                        leaderboard.send();\n                    }\n                    break;\n                case \"weekly\":\n                    if (currentTime.getTime() - lastsent.getTime() >= SECSFORWEEK){\n                        leaderboard.send();\n                    }\n                    break;\n                case \"monthly\":\n                    if (currentTime.getTime() - lastsent.getTime", "first_line_groundtruth": "cache.setCache();", "first_line_prediction": "", "match": 0}
{"groundtruth": "content = jsonData.getDataAttributes().get(\"content\");", "prediction": " prompt = jsonData.getPrompt();\n\n        return prompt;\n    }", "first_line_groundtruth": "content = jsonData.getDataAttributes().get(\"content\");", "first_line_prediction": " prompt = jsonData.getPrompt();", "match": 0}
{"groundtruth": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");", "prediction": " productName = jsonData.getDataAttributes().get(\"productName\");\n        String productPrice = jsonData.getDataAttributes().get(\"productPrice\");\n        String productImage = jsonData.getDataAttributes().get(\"productImage\");\n        String productLink = jsonData.getDataAttributes().get(\"productLink\");\n        String productLink2 = jsonData.getDataAttributes().get(\"productLink2\");\n        String productLink3 = jsonData.getDataAttributes().get(\"productLink3\");\n        String productLink4 = jsonData.getDataAttributes().get(\"productLink4\");\n        String productLink5 = jsonData.getDataAttributes().", "first_line_groundtruth": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");", "first_line_prediction": " productName = jsonData.getDataAttributes().get(\"productName\");", "match": 0}
{"groundtruth": "info = jsonData.getDataAttributes().get(\"info\");", "prediction": "ect = jsonData.getDataAttributes().get(\"ect\");\n        String ect2 = jsonData.getDataAttributes().get(\"ect2\");\n        String ect3 = jsonData.getDataAttributes().get(\"ect3\");\n        String ect4 = jsonData.getDataAttributes().get(\"ect4\");\n        String ect5 = jsonData.getDataAttributes().get(\"ect5\");\n        String ect6 = jsonData.getDataAttributes().get(\"ect6\");\n        String ect7 = jsonData.getDataAttributes().get(\"ect7\");\n        String ect8 = jsonData.getDataAttributes().get(\"", "first_line_groundtruth": "info = jsonData.getDataAttributes().get(\"info\");", "first_line_prediction": "ect = jsonData.getDataAttributes().get(\"ect\");", "match": 0}
{"groundtruth": "sentence = jsonData.getDataAttributes().get(\"sentence\");", "prediction": "ects = jsonData.getDataAttributes().get(\"ects\");\n        String price = jsonData.getDataAttributes().get(\"price\");\n        String productName = jsonData.getDataAttributes().get(\"productName\");\n        String productPrice = jsonData.getDataAttributes().get(\"productPrice\");\n        String productImage = jsonData.getDataAttributes().get(\"productImage\");\n        String productImageAlt = jsonData.getDataAttributes().get(\"productImageAlt\");\n        String productImageAlt2 = jsonData.getDataAttributes().get(\"productImageAlt2\");\n        String productImageAlt3 = jsonData.getDataAttributes().get", "first_line_groundtruth": "sentence = jsonData.getDataAttributes().get(\"sentence\");", "first_line_prediction": "ects = jsonData.getDataAttributes().get(\"ects\");", "match": 0}
{"groundtruth": "adminPublish.close();", "prediction": " adminPublish.close();\n        } catch (Exception e) {\n            LOG.error(\"Error closing HtmlUnitClient\", e);\n        }\n    }\n\n    @Test\n    public void testHomePage() throws ClientException, IOException, URISyntaxException {\n        LOG.info(\"testHomePage\");\n        // get the page\n        Page page = cqBaseClassRule.authorRule.getAuthorPage(HOMEPAGE);\n        // get the response\n        SlingHttpResponse response = page.getResponse();\n        // check the response code\n        assertEquals(200, response.getStatusCode());\n        // check the response body\n        CQAssert.assertNoHtmlErrors(", "first_line_groundtruth": "adminPublish.close();", "first_line_prediction": " adminPublish.close();", "match": 0}
{"groundtruth": "jsonData.getTemplateId()) {", "prediction": "language) {\n            case \"en\":\n                promptGuide = \"You are a copywriter AI that can write and edit existing content. You always respond in HTML format for consumption by a rich text editor. Your goal is to produce the content that is requested as instructed without ever identifying yourself or the changes you have made. It should only ever contain content that was requested:  PROMPT: \";\n                break;\n            case \"es\":\n                promptGuide = \"You are a copywriter AI that can write and edit existing content. You always respond in HTML format for consumption by a rich text editor. Your goal is to produce the content", "first_line_groundtruth": "jsonData.getTemplateId()) {", "first_line_prediction": "language) {", "match": 0}
{"groundtruth": "String topic = jsonData.getDataAttributes().get(\"topic\");", "prediction": "\n\n        String prompt = \"\";\n        if (StringUtils.isNotBlank(content)) {\n            prompt += content;\n        }\n        if (StringUtils.isNotBlank(tone)) {\n            prompt += tone;\n        }\n        if (StringUtils.isNotBlank(companyName)) {\n            prompt += companyName;\n        }\n        if (StringUtils.isNotBlank(product)) {\n            prompt += product;\n        }\n        if (StringUtils.isNotBlank(outline)) {\n            prompt += outline;\n        }\n        if (StringUtils.isNotBlank(cta)) {\n            prompt += cta;\n        }\n        if (StringUtils.isNotBlank(title)) {\n            prompt += title;\n        }\n       ", "first_line_groundtruth": "String topic = jsonData.getDataAttributes().get(\"topic\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");", "prediction": "ect = jsonData.getDataAttributes().get(\"ect\");\n        String ectDescription = jsonData.getDataAttributes().get(\"ectDescription\");\n        String ectTitle = jsonData.getDataAttributes().get(\"ectTitle\");\n        String ectDescription2 = jsonData.getDataAttributes().get(\"ectDescription2\");\n        String ectTitle2 = jsonData.getDataAttributes().get(\"ectTitle2\");\n        String ectDescription3 = jsonData.getDataAttributes().get(\"ectDescription3\");\n        String ectTitle3 = jsonData.getDataAttributes().get(\"ectTitle3\");\n        String ectDescription4", "first_line_groundtruth": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");", "first_line_prediction": "ect = jsonData.getDataAttributes().get(\"ect\");", "match": 0}
{"groundtruth": ".addHeader(\"Authorization\", \"Bearer\" + \" \" + config.getOpenAIAPIKey());", "prediction": ".setHeader(\"Authorization\", \"Bearer \" + config.getOpenAIAPIKey());\n        request.setHeader(\"Content-Type\", \"application/json\");\n        request.setEntity(new StringEntity(requestBody));\n\n        HttpResponse response = client.execute(request);\n        String responseBody = EntityUtils.toString(response.getEntity());\n\n        ChatGptResponse chatGptResponse = MAPPER.readValue(responseBody, ChatGptResponse.class);\n        if (chatGptResponse.isError()) {\n            Logger.error(\"Error occurred while generating message: \" + chatGptResponse.getError());\n            return null;", "first_line_groundtruth": ".addHeader(\"Authorization\", \"Bearer\" + \" \" + config.getOpenAIAPIKey());", "first_line_prediction": ".setHeader(\"Authorization\", \"Bearer \" + config.getOpenAIAPIKey());", "match": 0}
{"groundtruth": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");", "prediction": " customerName = jsonData.getDataAttributes().get(\"customerName\");\n        String customerEmail = jsonData.getDataAttributes().get(\"customerEmail\");\n        String customerPhone = jsonData.getDataAttributes().get(\"customerPhone\");\n        String customerAddress = jsonData.getDataAttributes().get(\"customerAddress\");\n        String customerCity = jsonData.getDataAttributes().get(\"customerCity\");\n        String customerState = jsonData.getDataAttributes().get(\"customerState\");\n        String customerZip = jsonData.getDataAttributes().get(\"customerZip\");\n        String customerCountry = jsonData.getDataAttributes().get(\"customerCountry\");\n        String", "first_line_groundtruth": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");", "first_line_prediction": " customerName = jsonData.getDataAttributes().get(\"customerName\");", "match": 0}
{"groundtruth": "audience = jsonData.getDataAttributes().get(\"audience\");", "prediction": "ect = jsonData.getDataAttributes().get(\"ect\");\n        String description = jsonData.getDataAttributes().get(\"description\");\n        String image = jsonData.getDataAttributes().get(\"image\");\n        String imageAlt = jsonData.getDataAttributes().get(\"imageAlt\");\n        String imageCaption = jsonData.getDataAttributes().get(\"imageCaption\");\n        String imageCredit = jsonData.getDataAttributes().get(\"imageCredit\");\n        String imageCreditLink = jsonData.getDataAttributes().get(\"imageCreditLink\");\n        String imageCreditLinkText = jsonData.getDataAttributes().get(\"imageCreditLinkText\");\n        String", "first_line_groundtruth": "audience = jsonData.getDataAttributes().get(\"audience\");", "first_line_prediction": "ect = jsonData.getDataAttributes().get(\"ect\");", "match": 0}
{"groundtruth": "String tone = jsonData.getDataAttributes().get(\"tone\");", "prediction": "\n\n        return content;\n    }", "first_line_groundtruth": "String tone = jsonData.getDataAttributes().get(\"tone\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "String product = jsonData.getDataAttributes().get(\"product\");", "prediction": "\n\n        String prompt = \"\";\n        if (StringUtils.isNotBlank(content)) {\n            prompt += content;\n        }\n        if (StringUtils.isNotBlank(tone)) {\n            prompt += tone;\n        }\n        if (StringUtils.isNotBlank(companyName)) {\n            prompt += companyName;\n        }\n\n        return prompt;\n    }", "first_line_groundtruth": "String product = jsonData.getDataAttributes().get(\"product\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "client.getResourceRefs(path);", "prediction": " client.getReferences(path);\n        for (URI reference : references) {\n            LOG.info(\"Checking resource at {}\", reference.toString());\n            SlingHttpResponse response = client.doGet(reference.toString());\n            assertEquals(\"Request to [\" + reference.toString() + \"] does not return expected returncode 200\",\n                    200, response.getStatus());\n            CQAssert.assertTrue(\"Resource at [\" + reference.toString() + \"] does not return a valid response body\",\n                    response.getContentLength() > 0);\n            CQAssert.assertTrue(\"Resource at [\" + reference.toString() +", "first_line_groundtruth": "client.getResourceRefs(path);", "first_line_prediction": " client.getReferences(path);", "match": 0}
{"groundtruth": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");", "prediction": "\n\n        String prompt = \"\";\n        if (StringUtils.isNotBlank(content)) {\n            prompt += content;\n        }\n        if (StringUtils.isNotBlank(tone)) {\n            prompt += tone;\n        }\n        if (StringUtils.isNotBlank(companyName)) {\n            prompt += companyName;\n        }\n        if (StringUtils.isNotBlank(product)) {\n            prompt += product;\n        }\n        if (StringUtils.isNotBlank(outline)) {\n            prompt += outline;\n        }\n        if (StringUtils.isNotBlank(cta)) {\n            prompt += cta;\n        }\n        if (StringUtils.isNotBlank(title)) {\n            prompt += title;\n        }\n       ", "first_line_groundtruth": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);", "prediction": " SqlUtils.updateLastSent(leaderboardname, currenttimestamp);\n    }\n\n    public void deleteDataIfNeeded(){\n        String leaderboardname = leaderboard.getName();\n        SqlUtils.deleteData(leaderboardname);\n    }\n\n    public boolean isAlredySent(){\n        String leaderboardname = leaderboard.getName();\n        Timestamp lastsent = getLastSent();\n        return lastsent != null;\n    }\n\n    public Timestamp getLastSent(){\n        String leaderboardname = leaderboard.getName();\n        return SqlUtils.getLastSent(leaderboardname);\n    }", "first_line_groundtruth": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);", "first_line_prediction": " SqlUtils.updateLastSent(leaderboardname, currenttimestamp);", "match": 0}
{"groundtruth": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();", "prediction": " String leaderboardname = leaderboard.getName();\n         SqlUtils.deleteScheduleData(leaderboardname);\n    }", "first_line_groundtruth": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();", "first_line_prediction": " String leaderboardname = leaderboard.getName();", "match": 0}
{"groundtruth": "SqlUtils.isScheduleAlredySent(leaderboardname);", "prediction": " SqlUtils.isScheduleAlredySent(leaderboardname);\n        return isalredysent;\n    }\n\n    public void deleteDataIfNeeded(){\n        String leaderboardname = leaderboard.getName();\n        SqlUtils.deleteScheduleData(leaderboardname);\n    }", "first_line_groundtruth": "SqlUtils.isScheduleAlredySent(leaderboardname);", "first_line_prediction": " SqlUtils.isScheduleAlredySent(leaderboardname);", "match": 0}
{"groundtruth": "SqlUtils.deleteAllValues(tablename, ColumnName);", "prediction": " SqlUtils.deleteData(tablename, ColumnName);\n        }\n    }", "first_line_groundtruth": "SqlUtils.deleteAllValues(tablename, ColumnName);", "first_line_prediction": " SqlUtils.deleteData(tablename, ColumnName);", "match": 0}
{"groundtruth": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){", "prediction": " (currentTime.getTime() - lastsent.getTime() >= SECSFORHOUR){\n                        leaderboard.send();\n                        setLastSent(currentTime);\n                    }\n                    break;\n                case \"daily\":\n                    if  (currentTime.getTime() - lastsent.getTime() >= SECSFORDAY){\n                        leaderboard.send();\n                        setLastSent(currentTime);\n                    }\n                    break;\n                case \"weekly\":\n                    if  (currentTime.getTime() - lastsent.getTime() >= SECSFORWEEK){\n                        leaderboard.send();\n                        setLastSent(currentTime);\n                    }\n                    break;\n                case \"monthly\":\n                   ", "first_line_groundtruth": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){", "first_line_prediction": " (currentTime.getTime() - lastsent.getTime() >= SECSFORHOUR){", "match": 0}
{"groundtruth": "webhook.execute();", "prediction": " webhook.send();\n        }catch (IOException e){\n            plugin.getLogger().warning(\"Error while sending leaderboard to discord webhook\");\n            plugin.getLogger().warning(e.getMessage());\n        }\n    }\n\n    private String getOrDefault(String value, String defaultValue){\n        if (value == null || value.equals(\"\") || value.equals(\"-\")) {\n            return defaultValue;\n        }\n        return value;\n    }", "first_line_groundtruth": "webhook.execute();", "first_line_prediction": " webhook.send();", "match": 0}
{"groundtruth": "= mainConfig.getDembedTitle();", "prediction": " = mainConfig.getDefaultEmbedTitle();\n        String dembedColor  = mainConfig.getDefaultEmbedColor();\n        String dembedFooter = mainConfig.getDefaultEmbedFooter();\n        String dembedAuthor = mainConfig.getDefaultEmbedAuthor();\n\n        //getting default values from leaderboard config\n        String embedTitle  = leaderboardConfig.getEmbedTitle();\n        String embedColor  = leaderboardConfig.getEmbedColor();\n        String embedFooter = leaderboardConfig.getEmbedFooter();\n        String embedAuthor = leaderboardConfig.getEmbedAuthor();\n\n        //getting default values from webhook config\n        String webhookUrl = mainConfig.getDefault", "first_line_groundtruth": "= mainConfig.getDembedTitle();", "first_line_prediction": " = mainConfig.getDefaultEmbedTitle();", "match": 0}
{"groundtruth": "webhook.setAvatarUrl(webhookAvatarUrl);", "prediction": " webhook.setAvatarUrl(webhookAvatarUrl);\n        }\n        if (webhookUserName != null && !webhookUserName.equals(\"\") && !webhookUserName.equals(\"-\")){\n             webhook.setUserName(webhookUserName);\n        }\n        if (embedTitle != null && !embedTitle.equals(\"\") && !embedTitle.equals(\"-\")){\n             webhook.setTitle(embedTitle);\n        }\n        if (embedUrl != null && !embedUrl.equals(\"\") && !embedUrl.equals(\"-\")){\n             webhook.setEmbedUrl(embedUrl);\n        }\n        if (embedColour != null && !embedColour.equals(\"\") && !embed", "first_line_groundtruth": "webhook.setAvatarUrl(webhookAvatarUrl);", "first_line_prediction": " webhook.setAvatarUrl(webhookAvatarUrl);", "match": 0}
{"groundtruth": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();", "prediction": " webhookurl = mainConfig.getWebhookurl();\n        String webhookname = mainConfig.getWebhookname();\n        String webhookavatar = mainConfig.getWebhookavatar();\n        String webhookcolor = mainConfig.getWebhookcolor();\n        String webhookfooter = mainConfig.getWebhookfooter();\n        String webhookfootericon = mainConfig.getWebhookfootericon();\n        String webhookdelay = mainConfig.getWebhookdelay();\n\n        //getting default values from leaderboard config\n        String placeholder = leaderboardConfig.getPlaceholder();\n        int top = leaderboardConfig.getTop();\n        WebhookDelay delay = WebhookDelay.valueOf(leader", "first_line_groundtruth": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();", "first_line_prediction": " webhookurl = mainConfig.getWebhookurl();", "match": 0}
{"groundtruth": "dembedImage = mainConfig.getDembedImage();", "prediction": " dwebhookDelay = mainConfig.getDwebhookDelay();\n\n        //getting default values from leaderboard config\n        String placeholder = leaderboardConfig.getPlaceholder();\n        int top = leaderboardConfig.getTop();\n        WebhookDelay delay = WebhookDelay.valueOf(leaderboardConfig.getWebhookDelay());\n\n        //creating webhook\n        DiscordWebhook webhook = new DiscordWebhook(dwebhookurl, dwebhookAvatarUrl, dwebhookUserName);\n\n        //creating embed\n        EmbedBuilder embed = new EmbedBuilder();\n        embed.setTitle(dembedTitle);\n        embed.setThumbnail(dembedUrl);\n        embed.setColor(Color.", "first_line_groundtruth": "dembedImage = mainConfig.getDembedImage();", "first_line_prediction": " dwebhookDelay = mainConfig.getDwebhookDelay();", "match": 0}
{"groundtruth": "String description = descriptionGenerator.getDescription(true);", "prediction": " /*******************\n         *  Description\n         *******************/\n        if (placeholder != null && !placeholder.equals(\"\") && !placeholder.equals(\"-\")){\n            embed.setDescription(descriptionGenerator.getDescription(placeholder));\n        }\n\n        if (embed.getDescription() == null || embed.getDescription().equals(\"\")){\n            embed.setDescription(descriptionGenerator.getDescription(placeholder));\n        }\n\n        /*******************\n         *  Footer\n         *******************/\n        if (embed.getFooter() == null || embed.getFooter().equals(\"\")){\n            embed.setFooter(descriptionGenerator.getFooter(placeholder));\n        }\n\n        /*******************\n         *  Colour", "first_line_groundtruth": "String description = descriptionGenerator.getDescription(true);", "first_line_prediction": " /*******************", "match": 0}
{"groundtruth": "String delay = leaderboardConfig.getDelay();", "prediction": "\n\n        //getting webhook delay from leaderboard config\n        WebhookDelay delay = WebhookDelay.valueOf(leaderboardConfig.getWebhookDelay());\n\n        //getting webhook delay from main config\n        WebhookDelay mainDelay = WebhookDelay.valueOf(mainConfig.getWebhookDelay());\n\n        //getting webhook delay from main config\n        String webhookAvatarUrl = mainConfig.getWebhookAvatarUrl();\n        String webhookUserName = mainConfig.getWebhookUserName();\n        String webhookUrl = mainConfig.getWebhookUrl();\n\n        //getting webhook delay from main config\n        String webhookTitle = mainConfig.getWebhookTitle();\n        String webhookDescription =", "first_line_groundtruth": "String delay = leaderboardConfig.getDelay();", "first_line_prediction": "", "match": 0}
{"groundtruth": "String placeholder = leaderboardConfig.getPlaceholder();", "prediction": " return name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public LeaderboardConfig getLeaderboardConfig() {\n        return leaderboardConfig;\n    }\n\n    public TopList getTopList() {\n        return topList;\n    }\n\n    public void updateTopList(String playerName, int score) {\n        topList.updateTopList(playerName, score);\n    }\n\n    public void updateTopList(String playerName, int score, String message) {\n        topList.updateTopList(playerName, score, message);\n    }\n\n    public void updateTopList(String playerName,", "first_line_groundtruth": "String placeholder = leaderboardConfig.getPlaceholder();", "first_line_prediction": " return name;", "match": 0}
{"groundtruth": "String dembedFooter = mainConfig.getDembedFooter();", "prediction": "\n\n        //getting default values from leaderboard config\n        String placeholder = leaderboardConfig.getPlaceholder();\n        int top = leaderboardConfig.getTop();\n        WebhookDelay delay = WebhookDelay.valueOf(leaderboardConfig.getDelay());\n\n        //creating webhook\n        DiscordWebhook webhook = new DiscordWebhook(dwebhookurl, dwebhookAvatarUrl, dwebhookUserName);\n\n        //creating embed\n        EmbedBuilder embed = new EmbedBuilder();\n        embed.setTitle(dembedTitle);\n        embed.setThumbnail(dembedUrl);\n        embed.setColor(Color.decode(dembedColour));\n        embed.setFooter(\"Leader", "first_line_groundtruth": "String dembedFooter = mainConfig.getDembedFooter();", "first_line_prediction": "", "match": 0}
{"groundtruth": "embedTitle = leaderboardConfig.getEmbedTitle();", "prediction": " webhookDelay = leaderboardConfig.getWebhookDelay();\n        String webhookEmbedTitle = leaderboardConfig.getWebhookEmbedTitle();\n        String webhookEmbedDescription = leaderboardConfig.getWebhookEmbedDescription();\n        String webhookEmbedUrl = leaderboardConfig.getWebhookEmbedUrl();\n        String webhookEmbedColour = leaderboardConfig.getWebhookEmbedColour();\n        String webhookEmbedFooter = leaderboardConfig.getWebhookEmbedFooter();\n        String webhookEmbedImage = leaderboardConfig.getWebhookEmbedImage();\n        String webhookEmbedThumbnail = leaderboardConfig.getWebhookEmbedThumbnail();\n\n        //creating webhook\n        DiscordWebhook webhook = new DiscordWebhook", "first_line_groundtruth": "embedTitle = leaderboardConfig.getEmbedTitle();", "first_line_prediction": " webhookDelay = leaderboardConfig.getWebhookDelay();", "match": 0}
{"groundtruth": "database.getConnection().prepareStatement(\n                        \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                );", "prediction": " database.getConnection().prepareStatement(\"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NULL\");\n                preparedStatement.executeUpdate();\n                preparedStatement.close();\n            } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n                preparedStatement =  database.getConnection().prepareStatement(\"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NULL\");\n                preparedStatement.executeUpdate();\n                preparedStatement.close();\n            }\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.", "first_line_groundtruth": "database.getConnection().prepareStatement(", "first_line_prediction": " database.getConnection().prepareStatement(\"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NULL\");", "match": 0}
{"groundtruth": "database.getConnection().prepareStatement(\n                        \"REPLACE INTO Schedule (Leaderboard, LastSent) VALUES (?, ?)\"\n                );", "prediction": " database.getConnection().prepareStatement(\"INSERT INTO Schedule (Leaderboard, LastSent) VALUES (?, ?) ON DUPLICATE KEY UPDATE LastSent = VALUES(LastSent)\");\n                preparedStatement.setString(1, leaderboard);\n                preparedStatement.setTimestamp(2, timestamp);\n                preparedStatement.executeUpdate();\n                preparedStatement.close();\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 13]\");\n            }\n        }\n   ", "first_line_groundtruth": "database.getConnection().prepareStatement(", "first_line_prediction": " database.getConnection().prepareStatement(\"INSERT INTO Schedule (Leaderboard, LastSent) VALUES (?, ?) ON DUPLICATE KEY UPDATE LastSent = VALUES(LastSent)\");", "match": 0}
{"groundtruth": "SqlUtils.addUserDataToDatabase(placeholderColumnName, uuid, username, value);", "prediction": " database.addUser(username, uuid, placeholderColumnName, value);\n        });\n    }\n\n    //One Player Multiple Placeholders\n    public void addToDatabase(List<String> placeholders){\n        CompletableFuture.runAsync(() -> {\n            for(String placeholder : placeholders){\n                database.addUser(username, uuid, placeholder, value);\n            }\n        });\n    }\n\n    //Multiple Players One Placeholder\n    public void addToDatabase(List<Player> players){\n        CompletableFuture.runAsync(() -> {\n            for(Player player : players){\n                database.addUser(player.getName(), player.getUniqueId().toString(), placeholderColumnName", "first_line_groundtruth": "SqlUtils.addUserDataToDatabase(placeholderColumnName, uuid, username, value);", "first_line_prediction": " database.addUser(username, uuid, placeholderColumnName, value);", "match": 0}
{"groundtruth": "String embedColour = leaderboardConfig.getEmbedColour();", "prediction": " String embedColour = leaderboardConfig.getEmbedColour();\n        String embedFooter = leaderboardConfig.getEmbedFooter();\n        String embedImage = leaderboardConfig.getEmbedImage();\n        String embedThumbnail = leaderboardConfig.getEmbedThumbnail();\n        String embedDescription = leaderboardConfig.getEmbedDescription();\n\n        //getting webhook delay\n        WebhookDelay webhookDelay = WebhookDelay.valueOf(delay);\n\n        //getting webhook delay\n        if(webhookDelay == WebhookDelay.None){\n            webhookurl = \"\";\n            webhookAvatarUrl = \"\";\n            webhookUserName = \"\";\n        }\n\n        //getting webhook delay\n        if(webhook", "first_line_groundtruth": "String embedColour = leaderboardConfig.getEmbedColour();", "first_line_prediction": " String embedColour = leaderboardConfig.getEmbedColour();", "match": 0}
{"groundtruth": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();", "prediction": "\n\n        //getting webhook\n        DiscordWebhook webhook = new DiscordWebhook(webhookurl);\n\n        //getting embed\n        EmbedBuilder embed = new EmbedBuilder();\n        embed.setTitle(dembedTitle);\n        embed.setThumbnail(dembedThumbnail);\n        embed.setFooter(dembedFooter);\n        embed.setUrl(dembedUrl);\n        embed.setColor(Color.decode(dembedColour));\n        embed.setImage(dembedImage);\n        embed.setDescription(dembedDescription);\n\n        //getting top list\n        String topList = this.topList.getTopListAsString(true);\n\n        //adding top list to embed", "first_line_groundtruth": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();", "first_line_prediction": "", "match": 0}
{"groundtruth": "UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.getStorageType());", "prediction": " Exception(\"Storage Type not supported\");\n            }\n            int rowsUpdated = preparedStatement.executeUpdate();\n            preparedStatement.close();\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while deleting all values in database  [code : 16]\");\n        }\n    }\n\n    public static void deleteAllValues(String tableName) {\n        PreparedStatement preparedStatement;\n        MainConfig mainConfig = new MainConfig();\n        Database database = new Database();\n        try {\n            if (mainConfig.getStorage", "first_line_groundtruth": "UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.getStorageType());", "first_line_prediction": " Exception(\"Storage Type not supported\");", "match": 0}
{"groundtruth": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) AS count FROM Schedule WHERE Leaderboard = ?\");", "prediction": " preparedStatement = database.getConnection().prepareStatement(\"SELECT * FROM Schedule WHERE Leaderboard = ?\");\n             preparedStatement.setString(1, leaderboard);\n             ResultSet rs = preparedStatement.executeQuery();\n             if (rs.next()){\n                 preparedStatement.close();\n                 return true;\n             }\n             preparedStatement.close();\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 13.2]\");\n        }\n        return false;\n    }\n\n   ", "first_line_groundtruth": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) AS count FROM Schedule WHERE Leaderboard = ?\");", "first_line_prediction": " preparedStatement = database.getConnection().prepareStatement(\"SELECT * FROM Schedule WHERE Leaderboard = ?\");", "match": 0}
{"groundtruth": "preparedStatement = database.getConnection().prepareStatement(\n                        \"UPDATE \" + tableName + \" SET \" + columnName + \" = NULL\"\n                );", "prediction": " preparedStatement = database.getConnection().prepareStatement(\n                         \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                 );\n            }\n            int rowsUpdated = preparedStatement.executeUpdate();\n            preparedStatement.close();\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while deleting all values in table \" + tableName + \" [code : 04]\");\n        }\n    }\n\n    public static void deleteAllValues(String tableName) {\n        PreparedStatement preparedStatement;\n       ", "first_line_groundtruth": "preparedStatement = database.getConnection().prepareStatement(", "first_line_prediction": " preparedStatement = database.getConnection().prepareStatement(", "match": 0}
{"groundtruth": "database.getConnection().prepareStatement(\"SELECT \" + \"LastSent\" + \" FROM Schedule WHERE Leaderboard = ?\");", "prediction": " database.getConnection().prepareStatement(\"SELECT LastSent FROM Schedule WHERE Leaderboard = ?\");\n            preparedStatement.setString(1, leaderboard);\n            ResultSet rs = preparedStatement.executeQuery();\n            if (rs.next()) {\n                lastsent = rs.getTimestamp(\"LastSent\");\n            }\n            preparedStatement.close();\n        }catch (SQLException ex){\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 15]\");\n        }\n        return lastsent;\n    }\n\n    public static", "first_line_groundtruth": "database.getConnection().prepareStatement(\"SELECT \" + \"LastSent\" + \" FROM Schedule WHERE Leaderboard = ?\");", "first_line_prediction": " database.getConnection().prepareStatement(\"SELECT LastSent FROM Schedule WHERE Leaderboard = ?\");", "match": 0}
{"groundtruth": ", leaderboard.getConfig().getPlaceholder());", "prediction": ", leaderboard.getPlaceholder());\n            leaderboard.addUserData(userData);\n        }\n    }\n\n    public void addUserDataToDBAllPlaceholders(OfflinePlayer offlinePlayer){\n        MainConfig mainConfig = new MainConfig();\n        List<String> leaderboardnamelist = mainConfig.getLeaderboardsList();\n        for (String lbname : leaderboardnamelist){\n            Leaderboard leaderboard = new Leaderboard(lbname);\n            UserData userData = new UserData(offlinePlayer, leaderboard.getPlaceholder());\n            leaderboard.addUserData(userData);\n        }\n    }\n\n    public void addUserDataToDBAll", "first_line_groundtruth": ", leaderboard.getConfig().getPlaceholder());", "first_line_prediction": ", leaderboard.getPlaceholder());", "match": 0}
{"groundtruth": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent WHEN NOT MATCHED THEN INSERT (Leaderboard, LastSent) VALUES (data.Leaderboard, data.LastSent);", "prediction": " database.getConnection().prepareStatement(\"UPDATE Leaderboard SET LastSent = ? WHERE Name = ?\");\n                preparedStatement.setTimestamp(1, timestamp);\n                preparedStatement.setString(2, leaderboard);\n                preparedStatement.executeUpdate();\n                preparedStatement.close();\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while setting last sent timestamp for leaderboard \" + leaderboard + \" [code : 11]\");\n                ex.printStackTrace();\n            }\n        } else if (mainConfig", "first_line_groundtruth": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent WHEN NOT MATCHED THEN INSERT (Leaderboard, LastSent) VALUES (data.Leaderboard, data.LastSent);", "first_line_prediction": " database.getConnection().prepareStatement(\"UPDATE Leaderboard SET LastSent = ? WHERE Name = ?\");", "match": 0}
{"groundtruth": "String databaseName = mainConfig.getStorageType();", "prediction": " if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")){\n\n                preparedStatement = database.getConnection().prepareStatement(\"SELECT PlayerName, \" + placeholderColumnName + \" FROM UserData ORDER BY \" + placeholderColumnName + \" DESC LIMIT \" + top + \";\");\n                ResultSet resultSet = preparedStatement.executeQuery();\n\n                while (resultSet.next()) {\n                    topPlayerScores.put(resultSet.getString(\"PlayerName\"), resultSet.getDouble(placeholderColumnName));\n                }\n\n                resultSet.close();\n                preparedStatement.close();", "first_line_groundtruth": "String databaseName = mainConfig.getStorageType();", "first_line_prediction": " if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")){", "match": 0}
{"groundtruth": "userData.addUserDataToDBAllPlayersThisPlaceholder();", "prediction": " PlayerUtils.syncOfflinePlayerData(plugin);\n                });\n            } catch (Exception e) {\n                p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Invalid Placeholder Name !\");\n                p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GRAY + \"/dl create name 5 %placeholder% Daily\");\n            }\n        }\n        //Delete Command\n        if (args[0].equalsIgnoreCase(\"delete\")) {\n            if (!sender.hasPermission(\"dl.delete\") && !sender.hasPermission(\"dl.admin\")) {", "first_line_groundtruth": "userData.addUserDataToDBAllPlayersThisPlaceholder();", "first_line_prediction": " PlayerUtils.syncOfflinePlayerData(plugin);", "match": 0}
{"groundtruth": "outputEGLSurface = outputEglCore.createOffsetScreenSurface(renderWidth, renderHeight);", "prediction": " outputEglCore.makeCurrent(outputEGLSurface);\n\n        // create output surface\n        outputEGLSurface = outputEglCore.createPbufferSurface(renderWidth, renderHeight);\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.d(TAG, \"onDestroy\");\n\n        outputEglCore.release();\n    }", "first_line_groundtruth": "outputEGLSurface = outputEglCore.createOffsetScreenSurface(renderWidth, renderHeight);", "first_line_prediction": " outputEglCore.makeCurrent(outputEGLSurface);", "match": 0}
{"groundtruth": "quadRenderer.drawTexture(texId, renderWidth, renderHeight);", "prediction": " sharedTexture.draw();\n                }\n            }\n        });\n    }\n\n    private void startOffscreenService() {\n        Intent intent = new Intent(this, OffscreenService.class);\n        startService(intent);\n\n        aidlConnection = new ServiceConnection() {\n            @Override\n            public void onServiceConnected(ComponentName name, IBinder service) {\n                aidlInterface = IOffscreenInterface.Stub.asInterface(service);\n                aidlReady.set(true);\n            }\n\n            @Override\n            public void onServiceDisconnected(ComponentName name) {\n                aidlInterface = null;\n                aidlReady.set", "first_line_groundtruth": "quadRenderer.drawTexture(texId, renderWidth, renderHeight);", "first_line_prediction": " sharedTexture.draw();", "match": 0}
{"groundtruth": "ServerCountryFlags.updateAPILanguage(null);", "prediction": " cfg.locale = \"en_US\";\n        }\n\n        if (cfg.useKm) {\n            cfg.locale = \"en_US\";\n        }\n\n        if (cfg.showDistance) {\n            cfg.showDistance = true;\n        }\n\n        if (cfg.showDistrict) {\n            cfg.showDistrict = true;\n        }\n\n        if (cfg.showISP) {\n            cfg.showISP = true;\n        }\n\n        if (cfg.mapButton) {\n            cfg.mapButton = true;\n        }\n\n        if (cfg.mapButtonRight) {\n            cfg.mapButtonRight = true;\n       ", "first_line_groundtruth": "ServerCountryFlags.updateAPILanguage(null);", "first_line_prediction": " cfg.locale = \"en_US\";", "match": 0}
{"groundtruth": ".setRequestsLeft(requestsLeft - APITimeoutManager.getRequestsSent());", "prediction": ".setCooldown(requestsLeft, secondsLeft);\n\t\t\t}", "first_line_groundtruth": ".setRequestsLeft(requestsLeft - APITimeoutManager.getRequestsSent());", "first_line_prediction": ".setCooldown(requestsLeft, secondsLeft);", "match": 0}
{"groundtruth": "APITimeoutManager.setSecondsLeftUntilReset(secondsLeft);", "prediction": "\tAPITimeoutManager.setSecondsLeft(secondsLeft - APITimeoutManager.getSecondsSent());\n\t\t\t}", "first_line_groundtruth": "APITimeoutManager.setSecondsLeftUntilReset(secondsLeft);", "first_line_prediction": "\tAPITimeoutManager.setSecondsLeft(secondsLeft - APITimeoutManager.getSecondsSent());", "match": 0}
{"groundtruth": "(APITimeoutManager.isOnCooldown()) {", "prediction": " (ip.isEmpty()) {\n\t\t\treturn new APIResponse(localLocation);\n\t\t}", "first_line_groundtruth": "(APITimeoutManager.isOnCooldown()) {", "first_line_prediction": " (ip.isEmpty()) {", "match": 0}
{"groundtruth": "APITimeoutManager.decrementRequestsSent();", "prediction": "", "first_line_groundtruth": "APITimeoutManager.decrementRequestsSent();", "first_line_prediction": "", "match": 0}
{"groundtruth": "APITimeoutManager.incrementRequestsSent();", "prediction": "\tURL url = new URL(apiUrlStr);\n\t\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\t\tconnection.setConnectTimeout(1000);\n\t\t\t\tconnection.setReadTimeout(1000);\n\t\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\t\tconnection.setDoInput(true);\n\t\t\t\tconnection.setDoOutput(false);\n\t\t\t\tconnection.connect();", "first_line_groundtruth": "APITimeoutManager.incrementRequestsSent();", "first_line_prediction": "\tURL url = new URL(apiUrlStr);", "match": 0}
{"groundtruth": "request.setReturnCode(500);", "prediction": " //return error 500\n\t\t\t\treturn error500;\n\t\t\t}\n\t\t\n\t\t//return error 404\n\t\treturn error404;", "first_line_groundtruth": "request.setReturnCode(500);", "first_line_prediction": " //return error 500", "match": 0}
{"groundtruth": ">= server.getMaximumHeaderParameterCount())\n\t\t\t\t\treturn parameters;", "prediction": " == 0)\n\t\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t\tparameters.put(key.toString(), value.toString());\n\t\t\t\tkey.setLength(0);\n\t\t\t\tvalue.setLength(0);\n\t\t\t\tkeyFlag = true;\n\t\t\t}\n\t\t\t\n\t\t\t//add to value\n\t\t\telse\n\t\t\t\tvalue.append(c);\n\t\t}\n\t\t\n\t\treturn parameters;", "first_line_groundtruth": ">= server.getMaximumHeaderParameterCount())", "first_line_prediction": " == 0)", "match": 0}
{"groundtruth": "request.getContentType());", "prediction": " \"text/html; charset=UTF-8\");\n\t\t\n\t\t//default date\n\t\tif(!headers.containsKey(\"Date\"))\n\t\t\theaders.put(\"Date\", ZonedDateTime.now().format(DateTimeFormatter.RFC_1123_DATE_TIME));\n\t\t\n\t\t//default server\n\t\tif(!headers.containsKey(\"Server\"))\n\t\t\theaders.put(\"Server\", \"Konloch HTTPd\");\n\t\t\n\t\t//default connection\n\t\tif(!headers.containsKey(\"Connection\"))\n\t\t\theaders.put(\"Connection\", \"close\");\n\t\t\n\t\t//default cache-control\n\t\tif(!headers.containsKey(\"Cache-", "first_line_groundtruth": "request.getContentType());", "first_line_prediction": " \"text/html; charset=UTF-8\");", "match": 0}
{"groundtruth": "if(cookies.size() >= server.getMaximumCookieCount())\n\t\t\t\t\t\tbreak;", "prediction": "\tif(cookies.size() >= server.getMaximumHeaderParameterSize())\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tvalue.append(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn cookies;", "first_line_groundtruth": "if(cookies.size() >= server.getMaximumCookieCount())", "first_line_prediction": "\tif(cookies.size() >= server.getMaximumHeaderParameterSize())", "match": 0}
{"groundtruth": "size() >= server.getMaximumHeaderParameterSize())\n\t\t\t\t\t\tbreak;", "prediction": "size() >= server.getMaximumParameterCount())\n\t\t\t\t\t\treturn parameters;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t///end of value\n\t\t\t\telse if(c == '\\n' || c == '\\r')\n\t\t\t\t{\n\t\t\t\t\tif(key.length() > 0 && value.length() > 0)\n\t\t\t\t\t\tparameters.put(key.toString(), value.toString());\n\t\t\t\t\t\n\t\t\t\t\tkey = new StringBuilder();\n\t\t\t\t\tvalue = new StringBuilder();\n\t\t\t\t\tkeyFlag = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t///looking for the value\n\t\t\t\telse if(value.length() < server.getMaximum", "first_line_groundtruth": "size() >= server.getMaximumHeaderParameterSize())", "first_line_prediction": "size() >= server.getMaximumParameterCount())", "match": 0}
{"groundtruth": "if(value.length() < server.getMaximumHeaderParameterSize())\n\t\t\t\tvalue.append(c);", "prediction": " if(c == '\\t' || c == ' ')\n\t\t\t\tvalue.append(c);\n\t\t\telse\n\t\t\t\tvalue.append(c);\n\t\t}\n\t\t\n\t\treturn parameters;", "first_line_groundtruth": "if(value.length() < server.getMaximumHeaderParameterSize())", "first_line_prediction": " if(c == '\\t' || c == ' ')", "match": 0}
{"groundtruth": "buffer.writeBody(bytes);", "prediction": "\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e)\n\t\t\t\t\t{\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tclient.setState(100);\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 100:\n\t\t\t\t\t\t///TODO\n\t\t\t\t\t\t// if the request is a post request, we will need to download X bytes and then process them\n\t\t\t\t\t\t// this same piece of code is how we handle multi-form uploads and single form uploads\n\t\t\t\t\t\t// keep-alive is also handled in that same chunk of code\n\t\t\t\t\t\n\t\t\t\t\tif(buffer.request == null)\n\t\t\t\t\t\tbuffer.request = requestBuilder.build(client", "first_line_groundtruth": "buffer.writeBody(bytes);", "first_line_prediction": "", "match": 0}
{"groundtruth": "buffer.writeHeader(bytes);", "prediction": "\t///parse the request\n\t\t\t\t\t\trequestBuilder.parseRequest(bytes, client);\n\t\t\t\t\t\t}\n\t\t\t\t\tcatch(Exception e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(requestBuilder.getRequest() != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t///add the request to the queue\n\t\t\t\t\t\trequestListener.onRequest(requestBuilder.getRequest());\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t///advance to stage 0\n\t\t\t\t\tclient.setState(0);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t});", "first_line_groundtruth": "buffer.writeHeader(bytes);", "first_line_prediction": "\t///parse the request", "match": 0}
{"groundtruth": "= decoder.decodeParameters(new String(buffer.bodyBuffer.toByteArray(), StandardCharsets.UTF_8));", "prediction": " = decoder.decodeParameters(path.substring(path.indexOf('=') + 1));\n\t\t\telse\n\t\t\t\tpost = new HashMap<>();\n\t\t\t\n\t\t\t// decode cookies\n\t\t\tcookies = decoder.decodeCookies(parameters.get(\"Cookie\"));\n\t\t}\n\t\telse\n\t\t\treturn null;\n\t\t\n\t\treturn new Request(client, methodType, path, version, get, post, cookies);", "first_line_groundtruth": "= decoder.decodeParameters(new String(buffer.bodyBuffer.toByteArray(), StandardCharsets.UTF_8));", "first_line_prediction": " = decoder.decodeParameters(path.substring(path.indexOf('=') + 1));", "match": 0}
{"groundtruth": "client.setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));", "prediction": "\t///TODO\n\t\t\t\t\t\t\t// if it's a get request, we will need to process the request and then send a response\n\t\t\t\t\t\t\t// this is how we handle static files\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tclient.setState(4);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 4:\n\t\t\t\t\t\t//TODO\n\t\t\t\t\t\t// if it's a get request, we will need to process the request and then send a response\n\t\t\t\t\t\t// this is how we handle static files\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 10:\n\t\t\t\t\t\t//TODO\n\t\t\t\t\t\t// if it's a", "first_line_groundtruth": "client.setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));", "first_line_prediction": "\t///TODO", "match": 0}
{"groundtruth": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request,\n\t\t\t\t\t\t\t\t\trequestListener.request(buffer.request)));", "prediction": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));\n\t\t\t\t\t\t\n\t\t\t\t\t\tclient.setState(100);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 100:\n\t\t\t\t\t\t///TODO\n\t\t\t\t\t\t// if the request is a post request, we need to download the body and process it\n\t\t\t\t\t\t// if the request is a get request, we need to process the headers and then send the response\n\t\t\t\t\t\t// if the request is a head request, we need to process the headers and then send the response\n\t\t\t\t\t\t// if", "first_line_groundtruth": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request,", "first_line_prediction": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));", "match": 0}
{"groundtruth": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));", "prediction": "\tcookies = decoder.decodeCookies(parameters.get(\"Cookie\"));\n\t\t\telse\n\t\t\t\tcookies = new HashMap<>();\n\t\t\t\n\t\t\treturn new Request(methodType, path, version, get, post, cookies);\n\t\t}\n\t\t\n\t\treturn null;", "first_line_groundtruth": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));", "first_line_prediction": "\tcookies = decoder.decodeCookies(parameters.get(\"Cookie\"));", "match": 0}
{"groundtruth": "List<String> exps = RegexHelper.find(text, \"\\\\$\\\\{", "prediction": " List<String> list = RegexHelper.find(text, \"\\\\$\\\\{(.*?)\\\\}\");\n        if (null == list || list.isEmpty()) {\n            return text;\n        }\n        for (String s : list) {\n            String key = s.substring(2, s.length() - 1);\n            Expression expression = elMap.get(key);\n            if (null == expression) {\n                continue;\n            }\n            text = text.replace(s, expression.parse(map));\n        }\n        return text;\n    }\n\n    /**\n     * \u626b\u63cf\u5e76\u89e3\u6790\u53d8\u91cf\n     *\n     * @param", "first_line_groundtruth": "List<String> exps = RegexHelper.find(text, \"\\\\$\\\\{", "first_line_prediction": " List<String> list = RegexHelper.find(text, \"\\\\$\\\\{(.*?)\\\\}\");", "match": 0}
{"groundtruth": "webAgent.url(url).execute(map);", "prediction": " webAgent.get(url);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    return null;\n                }\n            }).thenApply(parserFunction);\n            cfList.add(cf);\n            cf.thenAccept(consumer);\n        }\n\n        try {\n            CompletableFuture.allOf(cfList.toArray(new CompletableFuture[cfList.size()])).get();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return list;\n    }", "first_line_groundtruth": "webAgent.url(url).execute(map);", "first_line_prediction": " webAgent.get(url);", "match": 0}
{"groundtruth": "data = webAgent.execute(map);", "prediction": " webAgent = this.webAgent;\n        Function<WebAgent, R> parserFunction = this.parserFunction;\n        CompletableFuture<R> cf = CompletableFuture.supplyAsync(() -> {\n            try {\n                return webAgent.execute(map);\n            } catch (Exception e) {\n                e.printStackTrace();\n                return null;\n            }\n        }).thenApply(parserFunction);\n        try {\n            R result = cf.get();\n            if (result != null) {\n                Map<String, Object> resultMap = JsonHelper.jsonToMap(result.toString());\n                Integer total = (Integer) resultMap.get(", "first_line_groundtruth": "data = webAgent.execute(map);", "first_line_prediction": " webAgent = this.webAgent;", "match": 0}
{"groundtruth": "!result.getStatusCode().equals(200)) {", "prediction": "result.getStatusCode() != 200) {\n            throw new RuntimeException(\"http\u72b6\u6001\u7801\u4e0d\u4e3a200\");\n        }\n    }\n\n    public void contentType() {\n        log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n        if (result.getContentType() == null || !result.getContentType().contains(\"text/html\")) {\n            throw new RuntimeException(\"http\u54cd\u5e94\u7c7b\u578b\u4e0d\u4e3atext/html\");\n        }\n    }", "first_line_groundtruth": "!result.getStatusCode().equals(200)) {", "first_line_prediction": "result.getStatusCode() != 200) {", "match": 0}
{"groundtruth": "Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\uff01\");", "prediction": " return new DateHelper(LocalDateTime.ofInstant(timeStamp, ZoneId.systemDefault()));\n    }\n\n    /**\n     * \u521d\u59cb\u5bf9\u8c61\n     *\n     * @param timeStamp \u65f6\u95f4", "first_line_groundtruth": "Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\uff01\");", "first_line_prediction": " return new DateHelper(LocalDateTime.ofInstant(timeStamp, ZoneId.systemDefault()));", "match": 0}
{"groundtruth": "text = text.replace(el, elMap.get(tag).execute(argsMap));", "prediction": " text = text.replace(el, elMap.get(tag).eval(argsMap, map));\n                }\n            }\n        }\n        return text;\n    }\n\n    /**\n     * \u89e3\u6790\u53d8\u91cf\n     *\n     * @param text \u8981\u89e3\u6790\u7684\u6587\u672c\n     * @param map  \u4f20\u5165\u7684\u53c2\u6570\n     * @return String\n     */\n    public static String parser(String text, Map<String, Object> map, boolean isReplace) {\n        if (null == text) {\n            return null;\n        }\n        List<String> exps = RegexHelper.find(text, \"\\\\$\\\\{(\\\\w|\\\\", "first_line_groundtruth": "text = text.replace(el, elMap.get(tag).execute(argsMap));", "first_line_prediction": " text = text.replace(el, elMap.get(tag).eval(argsMap, map));", "match": 0}
{"groundtruth": "return parent.type();", "prediction": " return UnreflectType.of(source);\n    }", "first_line_groundtruth": "return parent.type();", "first_line_prediction": " return UnreflectType.of(source);", "match": 0}
{"groundtruth": "UnreflectType.of(source.getGenericReturnType());", "prediction": " UnreflectType.of(source.getReturnType());\n    }", "first_line_groundtruth": "UnreflectType.of(source.getGenericReturnType());", "first_line_prediction": " UnreflectType.of(source.getReturnType());", "match": 0}
{"groundtruth": "if (result.getStatusCode() == 400) {", "prediction": " {\n                log.warn(\"\u672a\u77e5\u9519\u8bef\uff01\");\n            }\n        }\n    }\n\n    public void contentType() {\n        log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n        if (!result.getContentType().startsWith(\"text/html\")) {\n            log.warn(\"\u54cd\u5e94\u7c7b\u578b\u4e0d\u6b63\u786e\uff01\");\n        }\n    }", "first_line_groundtruth": "if (result.getStatusCode() == 400) {", "first_line_prediction": " {", "match": 0}
{"groundtruth": "(T) accessor.invoke(null, args);", "prediction": " (T) accessor.invoke(args);\n    }", "first_line_groundtruth": "(T) accessor.invoke(null, args);", "first_line_prediction": " (T) accessor.invoke(args);", "match": 0}
{"groundtruth": "UnreflectType.of(source);", "prediction": " new ReflectionUnreflectType(source);\n    }", "first_line_groundtruth": "UnreflectType.of(source);", "first_line_prediction": " new ReflectionUnreflectType(source);", "match": 0}
{"groundtruth": "return (T) JdkInternals.allocateInstance(toClass());", "prediction": " return Unreflect.allocate(toClass());\n    }\n\n    /**\n     * Returns the type of the generic parameter of this type.\n     *\n     * @param index the index of the generic parameter\n     * @return the type of the generic parameter\n     */\n    public UnreflectType getGenericParameter(int index) {\n        return new UnreflectType(typeToken.getGenericParameter(index));\n    }\n\n    /**\n     * Returns the type of the generic parameter of this type.\n     *\n     * @param name the name of the generic parameter\n     * @return the type of the generic parameter\n     */\n    public UnreflectType get", "first_line_groundtruth": "return (T) JdkInternals.allocateInstance(toClass());", "first_line_prediction": " return Unreflect.allocate(toClass());", "match": 0}
{"groundtruth": "return new BytecodeFieldAccess((ReflectionFieldAccess) delegate.bind(object), accessor);", "prediction": " accessor.bind(object);\n         return this;\n    }\n\n    @Override\n    public FieldAccess set(Object value) {\n        accessor.set(value);\n        return this;\n    }\n\n    @Override\n    public FieldAccess get() {\n        return this;\n    }", "first_line_groundtruth": "return new BytecodeFieldAccess((ReflectionFieldAccess) delegate.bind(object), accessor);", "first_line_prediction": " accessor.bind(object);", "match": 0}
{"groundtruth": "return UnreflectType.of(source.getGenericType());", "prediction": " return UnreflectType.of(source.getType());\n    }", "first_line_groundtruth": "return UnreflectType.of(source.getGenericType());", "first_line_prediction": " return UnreflectType.of(source.getType());", "match": 0}
{"groundtruth": "webAgent.getConfig().getUrl()).set(pageIndexKey, String.valueOf(i)).getUrl();", "prediction": "data.getUrl()).addParam(pageIndexKey, i).getUrl();\n            cfList.add(CompletableFuture.supplyAsync(() -> webAgent.execute(url)).thenApply(parserFunction));\n            cfList.get(i).thenAccept(consumer);\n        }\n\n        try {\n            CompletableFuture.allOf(cfList.toArray(new CompletableFuture[cfList.size()])).get();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return list;\n    }", "first_line_groundtruth": "webAgent.getConfig().getUrl()).set(pageIndexKey, String.valueOf(i)).getUrl();", "first_line_prediction": "data.getUrl()).addParam(pageIndexKey, i).getUrl();", "match": 0}
{"groundtruth": "().toClass().getSimpleName() + Parameters.toString(parameters().toList());", "prediction": "().toString() + \" \" + source.getName() + \"()\";\n    }", "first_line_groundtruth": "().toClass().getSimpleName() + Parameters.toString(parameters().toList());", "first_line_prediction": "().toString() + \" \" + source.getName() + \"()\";", "match": 0}
{"groundtruth": "int totalRows = json.get(totalKey, Integer.class);", "prediction": " //\u83b7\u53d6\u603b\u9875\u6570\n        Integer total = json.getInt(totalKey);\n        //\u83b7\u53d6\u603b\u9875\u6570\n        Integer pageCount = total / pageSize + (total % pageSize == 0 ? 0 : 1);\n        for (int i = 1; i <= pageCount; i++) {\n            Map<String, Object> pageMap = new HashMap<>();\n            pageMap.put(pageIndexKey, i);\n            pageMap.putAll(map);\n            CompletableFuture<R> cf = CompletableFuture.supplyAsync(() -> {\n                try {\n                    return webAgent.execute(pageMap);\n                } catch (Exception", "first_line_groundtruth": "int totalRows = json.get(totalKey, Integer.class);", "first_line_prediction": " //\u83b7\u53d6\u603b\u9875\u6570", "match": 0}
{"groundtruth": "(result.getStatusCode() == 401) {", "prediction": " (result.getStatusCode() == 403) {\n                log.warn(\"\u8bbf\u95ee\u88ab\u7981\u6b62\uff01\");\n            } else {\n                log.warn(\"\u672a\u77e5\u9519\u8bef\uff01\");\n            }\n        }\n    }\n\n    public void contentType() {\n        log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n        if (!result.getContentType().startsWith(\"text/html\")) {\n            log.warn(\"\u54cd\u5e94\u7c7b\u578b\u4e0d\u6b63\u786e\uff01\");\n        }\n    }", "first_line_groundtruth": "(result.getStatusCode() == 401) {", "first_line_prediction": " (result.getStatusCode() == 403) {", "match": 0}
{"groundtruth": ".warn(\"\u672a\u652f\u6301\u7684\u72b6\u6001\u7801: {", "prediction": ".warn(\"\u672a\u77e5\u9519\u8bef\uff01\");\n            }\n        }\n    }\n\n    public void contentType() {\n        log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n        if (!result.getContentType().startsWith(\"text/html\")) {\n            log.warn(\"\u54cd\u5e94\u7c7b\u578b\u4e0d\u6b63\u786e\uff01\");\n        }\n    }", "first_line_groundtruth": ".warn(\"\u672a\u652f\u6301\u7684\u72b6\u6001\u7801: {", "first_line_prediction": ".warn(\"\u672a\u77e5\u9519\u8bef\uff01\");", "match": 0}
{"groundtruth": "Assert.isTrue(data.get(0) instanceof JSONArray, \"\u6570\u636e\u683c\u5f0f\u4e0d\u5339\u914d\uff01\");", "prediction": " String temp = \"insert into %s (%s) values %s;\";\n        List<String> values = new ArrayList<>();\n        for (int i = 0; i < data.size(); i++) {\n            JSONObject row = data.getJSONObject(i);\n            List<String> rowValues = new ArrayList<>();\n            for (String key : columns) {\n                rowValues.add(String.format(\"'%s'\", row.getString(key)));\n            }\n            values.add(String.format(\"(%s)\", String.join(\",\", rowValues)));\n        }\n        return String.format(temp, tableName,\n                Arrays.", "first_line_groundtruth": "Assert.isTrue(data.get(0) instanceof JSONArray, \"\u6570\u636e\u683c\u5f0f\u4e0d\u5339\u914d\uff01\");", "first_line_prediction": " String temp = \"insert into %s (%s) values %s;\";", "match": 0}
{"groundtruth": "String type = result.getContentType();", "prediction": " log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n         if (result.getContentType() == null || !result.getContentType().contains(\"text/html\")) {\n             log.warn(\"\u54cd\u5e94\u7c7b\u578b\u4e0d\u6b63\u786e\uff01\");\n         }\n    }", "first_line_groundtruth": "String type = result.getContentType();", "first_line_prediction": " log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());", "match": 0}
{"groundtruth": "return webAgent.execute(map);", "prediction": " result = parserFunction.apply(webAgent);\n            } catch (Exception e) {\n                log.error(\"\u89e3\u6790\u51fd\u6570\u6267\u884c\u5931\u8d25\uff01\", e);\n                throw new RuntimeException(e);\n            }\n            return result;\n        });\n        if (map != null) {\n            cf.thenAccept(r -> {\n                try {\n                    JsonHelper.merge(r, map);\n                } catch (Exception e) {\n                    log.error(\"\u89e3\u6790\u51fd\u6570\u6267\u884c\u5931\u8d25\uff01\", e);\n                    throw new RuntimeException(e);\n                }\n            });\n        }\n        return cf.join();\n    }\n\n    public R execute(Consumer<WebAgent>", "first_line_groundtruth": "return webAgent.execute(map);", "first_line_prediction": " result = parserFunction.apply(webAgent);", "match": 0}
{"groundtruth": "if (result.getStatusCode() >= 500) {", "prediction": " throw new RuntimeException(\"http\u72b6\u6001\u7801\u4e0d\u6b63\u786e\");\n        }\n    }\n\n    public void contentType() {\n        log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());\n        if (!result.getContentType().startsWith(\"text/html\")) {\n            throw new RuntimeException(\"http\u54cd\u5e94\u7c7b\u578b\u4e0d\u6b63\u786e\");\n        }\n    }", "first_line_groundtruth": "if (result.getStatusCode() >= 500) {", "first_line_prediction": " throw new RuntimeException(\"http\u72b6\u6001\u7801\u4e0d\u6b63\u786e\");", "match": 0}
{"groundtruth": "JsonHelper json = data.getJson();", "prediction": " //\u83b7\u53d6\u603b\u9875\u6570\n        int total = JsonHelper.getInt(data.getResponse(), totalKey);\n        //\u83b7\u53d6\u603b\u9875\u6570\n        int pageCount = total / pageSize + (total % pageSize == 0 ? 0 : 1);\n        for (int i = 1; i <= pageCount; i++) {\n            Map<String, Object> pageMap = new HashMap<>();\n            pageMap.put(pageIndexKey, i);\n            pageMap.putAll(map);\n            CompletableFuture<R> cf = CompletableFuture.supplyAsync(() -> {\n                try {\n                    return webAgent.execute(pageMap);", "first_line_groundtruth": "JsonHelper json = data.getJson();", "first_line_prediction": " //\u83b7\u53d6\u603b\u9875\u6570", "match": 0}
{"groundtruth": "isTrue(headHelper.fileContent(), \"\u975e\u6587\u4ef6\u6d41\u8bf7\u6c42\uff0c\u65e0\u6cd5\u8f93\u51fa\u6587\u4ef6\uff01\");", "prediction": "isTrue(headHelper.isSuccess(), \"\u8bf7\u6c42\u5931\u8d25\uff01\");\n        String fileName = this.config.getFileName();\n        if (null == fileName) {\n            fileName = headHelper.getFileName();\n        }\n        String folder = this.config.getFolder();\n        if (null == folder) {\n            folder = ScanVariable.parser(ScanVariable.get(\"easycrawl.output.folder\"), null);\n        }\n        File file = new File(folder, fileName);\n        try (FileOutputStream fos = new FileOutputStream(file)) {\n            fos.write(getResult().getBody().getBytes());\n        } catch (Exception", "first_line_groundtruth": "isTrue(headHelper.fileContent(), \"\u975e\u6587\u4ef6\u6d41\u8bf7\u6c42\uff0c\u65e0\u6cd5\u8f93\u51fa\u6587\u4ef6\uff01\");", "first_line_prediction": "isTrue(headHelper.isSuccess(), \"\u8bf7\u6c42\u5931\u8d25\uff01\");", "match": 0}
{"groundtruth": "setBody(transcoding(result.getBodyAsByes(), charset));", "prediction": "setCharset(charset);\n            }\n        }\n        return result;\n    }", "first_line_groundtruth": "setBody(transcoding(result.getBodyAsByes(), charset));", "first_line_prediction": "setCharset(charset);", "match": 0}
{"groundtruth": "wa = this.webAgent.execute(data);", "prediction": " webAgent = this.webAgent.execute(data);\n        this.result = webAgent.getResult();\n        return this;\n    }\n\n    @Override\n    public WebAgent execute() {\n        WebAgent  webAgent = this.webAgent.execute();\n        this.result = webAgent.getResult();\n        return this;\n    }\n\n    @Override\n    public WebAgent execute(String data) {\n        WebAgent  webAgent = this.webAgent.execute(data);\n        this.result = webAgent.getResult();\n        return this;\n    }\n\n    @Override\n    public WebAgent execute(File file) {\n        Web", "first_line_groundtruth": "wa = this.webAgent.execute(data);", "first_line_prediction": " webAgent = this.webAgent.execute(data);", "match": 0}
{"groundtruth": "hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;", "prediction": "hct.hue()) >= 30;\n    final boolean saturationPasses = hct.saturation() >= 50;\n    final boolean lightnessPasses = hct.lightness() >= 50;\n    return huePasses && saturationPasses && lightnessPasses;\n  }", "first_line_groundtruth": "hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;", "first_line_prediction": "hct.hue()) >= 30;", "match": 0}
{"groundtruth": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);", "prediction": " this.a2 = TonalPalette.fromHueAndChroma(hue, chroma);\n       this.a3 = TonalPalette.fromHueAndChroma(hue, chroma);\n       this.n1 = TonalPalette.fromHueAndChroma(hue, chroma);\n       this.n2 = TonalPalette.fromHueAndChroma(hue, chroma);\n       this.error = TonalPalette.fromHueAndChroma(hue, chroma);\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);", "first_line_groundtruth": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);", "first_line_prediction": " this.a2 = TonalPalette.fromHueAndChroma(hue, chroma);", "match": 0}
{"groundtruth": "ColorUtils.yFromLstar(tone);", "prediction": "100.0 - tone;\n    return ColorUtils.lstarFromY(darkY * ratio + tone);\n  }", "first_line_groundtruth": "ColorUtils.yFromLstar(tone);", "first_line_prediction": "100.0 - tone;", "match": 0}
{"groundtruth": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2));", "prediction": "1.0 + (t1 - t2) / (1.0 - t2);\n  }\n\n  /**\n   * Calculates the luminance of a color given its XYZ values.\n   *\n   * <p>The luminance is defined as Y in XYZ, relative luminance. However, relative luminance is\n   * linear to number of photons, not to perception of lightness. Perceptual luminance, L* in\n   * L*a*b*, T in HCT, is. Designers prefer color spaces with perceptual luminance since they're\n   * accurate to the eye", "first_line_groundtruth": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2));", "first_line_prediction": "1.0 + (t1 - t2) / (1.0 - t2);", "match": 0}
{"groundtruth": "Math.round(hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;", "prediction": "0.0 < hct.hue() && hct.hue() < 0.3;\n    final boolean saturationPasses = 0.0 < hct.saturation() && hct.saturation() < 0.3;\n    final boolean valuePasses = 0.0 < hct.value() && hct.value() < 0.3;\n    return huePasses && saturationPasses && valuePasses;\n  }", "first_line_groundtruth": "Math.round(hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;", "first_line_prediction": "0.0 < hct.hue() && hct.hue() < 0.3;", "match": 0}
{"groundtruth": ".from(hct.getHue(), hct.getChroma(), 70.0);", "prediction": ".lighten(hct, 0.1);\n    }\n    return hct;\n  }", "first_line_groundtruth": ".from(hct.getHue(), hct.getChroma(), 70.0);", "first_line_prediction": ".lighten(hct, 0.1);", "match": 0}
{"groundtruth": "round(hct.getChroma()) > 16.0;", "prediction": "round(hct.getChroma()) >= 100.0;\n    final boolean lumaPasses = Math.round(hct.getLuma()) >= 100.0;\n    return huePasses && chromaPasses && lumaPasses;\n  }", "first_line_groundtruth": "round(hct.getChroma()) > 16.0;", "first_line_prediction": "round(hct.getChroma()) >= 100.0;", "match": 0}
{"groundtruth": "hct.getChroma();", "prediction": "0.5;\n    double saturation = 0.5;\n    double luminance = 0.5;\n    if (isContent) {\n      chroma = 0.75;\n      saturation = 0.75;\n      luminance = 0.75;\n    }\n    a1 = TonalPalette.of(hue, chroma, saturation, luminance);\n    a2 = TonalPalette.of(hue, chroma, saturation, luminance);\n    a3 = TonalPalette.of(hue, chroma, saturation, luminance);\n    n", "first_line_groundtruth": "hct.getChroma();", "first_line_prediction": "0.5;", "match": 0}
{"groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);", "prediction": "a1 = TonalPalette.of(hue, chroma, 0.0);\n      this.a2 = TonalPalette.of(hue, chroma, 0.1);\n      this.a3 = TonalPalette.of(hue, chroma, 0.2);\n      this.n1 = TonalPalette.of(hue, chroma, 0.3);\n      this.n2 = TonalPalette.of(hue, chroma, 0.4);\n      this.error = TonalPalette.of(hue, chroma, 0.5);", "first_line_groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);", "first_line_prediction": "a1 = TonalPalette.of(hue, chroma, 0.0);", "match": 0}
{"groundtruth": "hct.getTone()) < 65.0;", "prediction": "hct.getTone()) >= 10.0;\n    return huePasses && chromaPasses && tonePasses;\n  }", "first_line_groundtruth": "hct.getTone()) < 65.0;", "first_line_prediction": "hct.getTone()) >= 10.0;", "match": 0}
{"groundtruth": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2.);", "prediction": ".a3 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n      this.n2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);\n      this.error = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.", "first_line_groundtruth": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2.);", "first_line_prediction": ".a3 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);", "match": 0}
{"groundtruth": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;", "prediction": "100.0 - tone;\n    if (Math.abs(returnValue - tone) > CONTRAST_RATIO_EPSILON) {\n      return -1.0;\n    }\n    return returnValue;\n  }", "first_line_groundtruth": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;", "first_line_prediction": "100.0 - tone;", "match": 0}
{"groundtruth": "hue = hct.getHue();", "prediction": " h = hct.hue();\n    double  c = hct.chroma();\n    double  s = hct.saturation();\n    double  l = hct.lightness();\n\n    // Create key tones\n    a1 = TonalPalette.of(h, c, s, l, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0", "first_line_groundtruth": "hue = hct.getHue();", "first_line_prediction": " h = hct.hue();", "match": 0}
{"groundtruth": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 4.));", "prediction": " = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n      this.n2  = TonalPalette.fromHueAndChroma(hue + 120., chroma / 2.);\n      this.error = TonalPalette.fromHueAndChroma(hue + 180., chroma / 2.);\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);\n      this", "first_line_groundtruth": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 4.));", "first_line_prediction": " = TonalPalette.fromHueAndChroma(hue, chroma / 2.);", "match": 0}
{"groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma));", "prediction": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2.);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n      this.n2 = TonalPalette.fromHueAndChroma(hue, chroma / 4.);\n    }\n    this.error = TonalPalette", "first_line_groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma));", "first_line_prediction": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);", "match": 0}
{"groundtruth": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));", "prediction": " this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 2.));\n      this.error = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / ", "first_line_groundtruth": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));", "first_line_prediction": " this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 2.));", "match": 0}
{"groundtruth": "= TonalPalette.fromHueAndChroma(hue, 16.);", "prediction": " = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 3.));\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60., max(48., chroma / 2.));\n      this.n1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 12.));\n      this.n2 = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 6.));\n    }\n    this.error = T", "first_line_groundtruth": "= TonalPalette.fromHueAndChroma(hue, 16.);", "first_line_prediction": " = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 3.));", "match": 0}
{"groundtruth": "ColorUtils.blueFromArgb(argb);", "prediction": "0xFF & (argb >> 8);\n    int green = 0xFF & (argb >> 16);\n    return String.format(\"#%02x%02x%02x\", red, green, blue);\n  }", "first_line_groundtruth": "ColorUtils.blueFromArgb(argb);", "first_line_prediction": "0xFF & (argb >> 8);", "match": 0}
{"groundtruth": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 24.);", "prediction": "a3 = TonalPalette.fromHueAndChroma(hue, 12.);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 2.));\n      this.n2 = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 4.));\n    }\n    this.error = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n  }", "first_line_groundtruth": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 24.);", "first_line_prediction": "a3 = TonalPalette.fromHueAndChroma(hue, 12.);", "match": 0}
{"groundtruth": "MathUtils.clampInt(0, 255, (int) Math.round(delinearized * 255.0));", "prediction": "255 * (int) Math.round(delinearized);\n  }", "first_line_groundtruth": "MathUtils.clampInt(0, 255, (int) Math.round(delinearized * 255.0));", "first_line_prediction": "255 * (int) Math.round(delinearized);", "match": 0}
{"groundtruth": "return new TonalPalette(hct.getHue(), hct.getChroma(), hct);", "prediction": " TonalPalette tonalPalette = new TonalPalette();\n     tonalPalette.keyColor = hct;\n     tonalPalette.hue = hct.hue();\n     tonalPalette.chroma = hct.chroma();\n     tonalPalette.cache = new HashMap<>();\n     return tonalPalette;\n  }\n\n  /**\n   * Get the tones for a given hue and chroma.\n   *\n   * @param hue Hue of the tones to get.\n   * @param chroma Chroma of the tones to get.\n   * @return Tones matching the given hue and chroma", "first_line_groundtruth": "return new TonalPalette(hct.getHue(), hct.getChroma(), hct);", "first_line_prediction": " TonalPalette tonalPalette = new TonalPalette();", "match": 0}
{"groundtruth": ".n1 = TonalPalette.fromHueAndChroma(hue, 4.);", "prediction": ".n1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 12.));\n      this.n2 = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 6.));\n    }\n    this.error = TonalPalette.fromHueAndChroma(hue, 16.);\n  }", "first_line_groundtruth": ".n1 = TonalPalette.fromHueAndChroma(hue, 4.);", "first_line_prediction": ".n1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma / 12.));", "match": 0}
{"groundtruth": "return MathUtils.matrixMultiply(new double[] {", "prediction": " double[][] matrix = SRGB_TO_XYZ;\n    double x = matrix[0][0] * r + matrix[0][1] * g + matrix[0][2] * b;\n    double y = matrix[1][0] * r + matrix[1][1] * g + matrix[1][2] * b;\n    double z = matrix[2][0] * r + matrix[2][1] * g + matrix[2][2] * b;\n    return new double[] {x, y, z};\n  }\n\n  /** Converts a color from ARGB to linear", "first_line_groundtruth": "return MathUtils.matrixMultiply(new double[] {", "first_line_prediction": " double[][] matrix = SRGB_TO_XYZ;", "match": 0}
{"groundtruth": "differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {", "prediction": "degreesBetween(hct.getHue(), chosenHct.getHue()) == differenceDegrees) {\n            hasDuplicateHue = true;\n            break;\n          }\n        }\n        if (!hasDuplicateHue) {\n          chosenColors.add(hct);\n        }\n      }\n      if (chosenColors.size() >= desired) {\n        break;\n      }\n    }\n\n    // If the desired number of colors is not available, return the fallback color.\n    if (chosenColors.size() < desired) {\n      chosenColors.add(Hct.fromInt(fallbackColorArgb));\n    }\n\n    // Return the colors in", "first_line_groundtruth": "differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {", "first_line_prediction": "degreesBetween(hct.getHue(), chosenHct.getHue()) == differenceDegrees) {", "match": 0}
{"groundtruth": ") Math.floor(hct.getHue());", "prediction": ") hct.hue();\n      huePopulation[hue]++;\n      populationSum += entry.getValue();\n    }\n\n    // Sort the colors by hue, then by chroma.\n    Collections.sort(colorsHct, new Comparator<Hct>() {\n      @Override\n      public int compare(Hct hct1, Hct hct2) {\n        int hueDiff = (int) Math.round(hct1.hue() - hct2.hue());\n        if (hueDiff != 0) {\n          return hueDiff;\n        }\n        return (int) Math.round(hct1.chrom", "first_line_groundtruth": ") Math.floor(hct.getHue());", "first_line_prediction": ") hct.hue();", "match": 0}
{"groundtruth": "= Math.abs(smallestDeltaHct.getChroma() - chroma);", "prediction": " = smallestDeltaHct.deltaHct();\n    Hct keyColor = smallestDeltaHct;\n    for (double tone = startTone; tone < 100.0; tone += smallestDelta) {\n      Hct hct = Hct.from(hue, chroma, tone);\n      double delta = hct.deltaHct();\n      if (delta < smallestDelta) {\n        smallestDelta = delta;\n        keyColor = hct;\n      }\n    }\n    return keyColor;\n  }\n\n  /**\n    * Get the color of a tone.\n    *\n    * @param tone Tone to", "first_line_groundtruth": "= Math.abs(smallestDeltaHct.getChroma() - chroma);", "first_line_prediction": " = smallestDeltaHct.deltaHct();", "match": 0}
{"groundtruth": "= MathUtils.sanitizeDegreesInt(i);", "prediction": " = i % 360;\n        hueExcitedProportions[neighborHue] += proportion;\n      }\n    }\n\n    // Sort the colors by their HCT hue, then by their HCT chroma.\n    Collections.sort(colorsHct, new Comparator<Hct>() {\n      @Override\n      public int compare(Hct hct1, Hct hct2) {\n        int hueComparison = (int) Math.signum(hct1.getHue() - hct2.getHue());\n        if (hueComparison != 0) {\n          return hueComparison;\n        }\n       ", "first_line_groundtruth": "= MathUtils.sanitizeDegreesInt(i);", "first_line_prediction": " = i % 360;", "match": 0}
{"groundtruth": "if (MathUtils.differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {", "prediction": " if (chosenHct.getHue() == hct.getHue()) {\n             hasDuplicateHue = true;\n             break;\n           }\n        }\n        if (!hasDuplicateHue) {\n          chosenColors.add(hct);\n        }\n      }\n      if (chosenColors.size() >= desired) {\n        break;\n      }\n    }\n\n    // If the desired number of colors is not available, return the fallback color.\n    if (chosenColors.size() < desired) {\n      chosenColors.add(Hct.fromInt(fallbackColorArgb));\n    }\n\n    // Return the colors in the desired order.", "first_line_groundtruth": "if (MathUtils.differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {", "first_line_prediction": " if (chosenHct.getHue() == hct.getHue()) {", "match": 0}
{"groundtruth": "filter && (hct.getChroma() < CUTOFF_CHROMA || proportion <= CUTOFF_EXCITED_PROPORTION)) {", "prediction": "proportion < CUTOFF_EXCITED_PROPORTION) {\n        continue;\n      }\n      double chroma = hct.getChroma();\n      if (chroma < CUTOFF_CHROMA) {\n        continue;\n      }\n      double proportionAbove = hueExcitedProportions[hue - 14];\n      double proportionBelow = hueExcitedProportions[hue + 16];\n      double proportionAboveBelow = proportionAbove + proportionBelow;\n      double proportionAboveBelowProportion = proportionAboveBelow / proportion;\n      double proportionAboveBelowProportionAbove = proportionAboveBelow", "first_line_groundtruth": "filter && (hct.getChroma() < CUTOFF_CHROMA || proportion <= CUTOFF_EXCITED_PROPORTION)) {", "first_line_prediction": "proportion < CUTOFF_EXCITED_PROPORTION) {", "match": 0}
{"groundtruth": "MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));", "prediction": "360 - (int) Math.floor(hct.getHue());\n      double proportion = huePopulation[hue] / populationSum;\n      double chroma = hct.getChroma();\n      double excitedProportion = hueExcitedProportion[hue];\n      double score =\n          WEIGHT_PROPORTION * proportion\n              + WEIGHT_CHROMA_ABOVE * (chroma - CUTOFF_CHROMA)\n              + WEIGHT_CHROMA_BELOW * (CUTOFF_CHROMA - chroma);\n      score += WEIGHT_CHROMA_", "first_line_groundtruth": "MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));", "first_line_prediction": "360 - (int) Math.floor(hct.getHue());", "match": 0}
{"groundtruth": "smallestDeltaHct = Hct.from(hue, chroma, startTone);", "prediction": " hct = Hct.fromHueAndChroma(hue, chroma);\n    return hct.withHue(startTone);\n  }\n\n  /**\n    * Get the color of a tone.\n    *\n    * @param tone Tone to get the color of.\n    * @return ARGB representation of the color.\n    */\n  public int get(int tone) {\n    if (cache.containsKey(tone)) {\n      return cache.get(tone);\n    }\n    Hct hct = keyColor.withHue(tone);\n    int argb = hct.toInt();\n    cache.put(tone", "first_line_groundtruth": "smallestDeltaHct = Hct.from(hue, chroma, startTone);", "first_line_prediction": " hct = Hct.fromHueAndChroma(hue, chroma);", "match": 0}
{"groundtruth": "= MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));", "prediction": " = (int) Math.floor(hct.getHue());\n      double proportion = huePopulation[hue] / populationSum;\n      double chroma = hct.getChroma();\n      double chromaAbove = hct.getChromaAbove(CUTOFF_CHROMA);\n      double chromaBelow = hct.getChromaBelow(CUTOFF_CHROMA);\n      double excitedProportion = hueExcitedProportions[hue];\n      double score =\n          WEIGHT_PROPORTION * proportion\n              + WEIGHT_CHROMA_ABOVE * chromaAbove\n              +", "first_line_groundtruth": "= MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));", "first_line_prediction": " = (int) Math.floor(hct.getHue());", "match": 0}
{"groundtruth": "= Hct.fromInt(entry.getKey());", "prediction": " = Hct.fromArgb(entry.getKey());\n      colorsHct.add(hct);\n      huePopulation[hct.hue] += entry.getValue();\n      populationSum += entry.getValue();\n    }\n\n    // Sort the colors by hue, then by chroma.\n    Collections.sort(colorsHct, new Comparator<Hct>() {\n      @Override\n      public int compare(Hct hct1, Hct hct2) {\n        int hueDiff = hct1.hue - hct2.hue;\n        if (hueDiff != 0) {\n          return hueDiff;\n       ", "first_line_groundtruth": "= Hct.fromInt(entry.getKey());", "first_line_prediction": " = Hct.fromArgb(entry.getKey());", "match": 0}
{"groundtruth": "= TonalPalette.fromHueAndChroma(25, 84.);", "prediction": " = TonalPalette.fromHueAndChroma(hue, 16.);\n  }", "first_line_groundtruth": "= TonalPalette.fromHueAndChroma(25, 84.);", "first_line_prediction": " = TonalPalette.fromHueAndChroma(hue, 16.);", "match": 0}
{"groundtruth": "hct.getChroma() < TARGET_CHROMA ? WEIGHT_CHROMA_BELOW : WEIGHT_CHROMA_ABOVE;", "prediction": "1.0 - Math.max(0.0, hct.getChroma() - CUTOFF_CHROMA) * WEIGHT_CHROMA_ABOVE;\n      double chromaScore = chromaWeight * WEIGHT_CHROMA_BELOW;\n      double score = proportionScore + chromaScore;\n      scoredHcts.add(new ScoredHCT(hct, score));\n    }\n\n    // Sort the colors by score, and return the top desired.\n    Collections.sort(scoredHcts, new Comparator<ScoredHCT>() {\n      @Override", "first_line_groundtruth": "hct.getChroma() < TARGET_CHROMA ? WEIGHT_CHROMA_BELOW : WEIGHT_CHROMA_ABOVE;", "first_line_prediction": "1.0 - Math.max(0.0, hct.getChroma() - CUTOFF_CHROMA) * WEIGHT_CHROMA_ABOVE;", "match": 0}
{"groundtruth": "(), hct.getChroma(), hct);", "prediction": "(), hct.getChroma());\n  }\n\n  /**\n   * Create tones using a HCT hue and chroma.\n   *\n   * @param hue Hue of the tones.\n   * @param chroma Chroma of the tones.\n   */\n  public TonalPalette(double hue, double chroma) {\n    this.hue = hue;\n    this.chroma = chroma;\n    this.cache = new HashMap<>();\n    this.keyColor = Hct.fromHueChroma(hue, chroma);\n  }\n\n  /**\n   * Get the color of a tone.\n   *", "first_line_groundtruth": "(), hct.getChroma(), hct);", "first_line_prediction": "(), hct.getChroma());", "match": 0}
{"groundtruth": "ColorUtils.labFromArgb(color.toInt());", "prediction": " Lab.fromHct(color);\n    double[] lch = Lch.fromLab(lab);\n    double[] xyz = Xyz.fromLch(lch);\n    double[] lab2 = Xyz.toLab(xyz);\n    double[] lch2 = Lab.toLch(lab2);\n    double[] lab3 = Lch.fromLch(lch2);\n    double[] xyz3 = Xyz.fromLab(lab3);\n    double[] lab4 = Xyz.toLab(xyz3);\n    double[] lch4 = Lab.toLch(lab", "first_line_groundtruth": "ColorUtils.labFromArgb(color.toInt());", "first_line_prediction": " Lab.fromHct(color);", "match": 0}
{"groundtruth": "(hue, input.getChroma(), input.getTone());", "prediction": "Hsv(hue, 1., 1.);\n      hcts.add(colorAtHue);\n    }\n    precomputedHctsByHue = hcts;\n    return hcts;\n  }", "first_line_groundtruth": "(hue, input.getChroma(), input.getTone());", "first_line_prediction": "Hsv(hue, 1., 1.);", "match": 0}
{"groundtruth": "int red = ColorUtils.redFromArgb(argb);", "prediction": " return String.format(\"#%02x%02x%02x\", (argb >> 16) & 0xff, (argb >> 8) & 0xff, argb & 0xff);\n  }", "first_line_groundtruth": "int red = ColorUtils.redFromArgb(argb);", "first_line_prediction": " return String.format(\"#%02x%02x%02x\", (argb >> 16) & 0xff, (argb >> 8) & 0xff, argb & 0xff);", "match": 0}
{"groundtruth": "hctAdd = Hct.from(hue, chroma, startTone + delta);", "prediction": " deltaHct = Hct.from(hue, chroma, startTone + delta);\n      final double deltaChroma = Math.abs(deltaHct.getChroma() - chroma);\n      if (deltaChroma < smallestDelta) {\n        smallestDelta = deltaChroma;\n        smallestDeltaHct = deltaHct;\n      }\n    }\n    return smallestDeltaHct;\n  }\n\n  /**\n    * Get the color of a tone.\n    *\n    * @param tone Tone to get the color of.\n    * @return ARGB representation of the color.\n    */\n  public int get(", "first_line_groundtruth": "hctAdd = Hct.from(hue, chroma, startTone + delta);", "first_line_prediction": " deltaHct = Hct.from(hue, chroma, startTone + delta);", "match": 0}
{"groundtruth": "== Math.round(smallestDeltaHct.getChroma())) {", "prediction": " == Math.round(smallestDeltaHct.getChroma())) {\n        return smallestDeltaHct;\n      }\n      Hct deltaHct = Hct.from(hue, chroma, startTone + delta);\n      double deltaChroma = Math.abs(deltaHct.getChroma() - chroma);\n      if (deltaChroma < smallestDelta) {\n        smallestDelta = deltaChroma;\n        smallestDeltaHct = deltaHct;\n      }\n    }\n    return smallestDeltaHct;\n  }\n\n  /**\n    * Get the color of a tone.\n    *\n    * @param", "first_line_groundtruth": "== Math.round(smallestDeltaHct.getChroma())) {", "first_line_prediction": " == Math.round(smallestDeltaHct.getChroma())) {", "match": 0}
{"groundtruth": "input.getHue(), coldestHue, warmestHue);", "prediction": "coldestHue, warmestHue, startHue);\n\n    List<Hct> hctsByTemp = getHctsByTemp();\n    List<Hct> hctsByHue = getHctsByHue();\n\n    int start = 0;\n    int end = hctsByTemp.size();\n    if (startHueIsColdestToWarmest) {\n      start = hctsByTemp.indexOf(getColdest());\n      end = hctsByTemp.indexOf(getWarmest()) + 1;\n    } else {\n      start = hctsByTemp.indexOf(getWarme", "first_line_groundtruth": "input.getHue(), coldestHue, warmestHue);", "first_line_prediction": "coldestHue, warmestHue, startHue);", "match": 0}
{"groundtruth": "coldestHue = getColdest().getHue();", "prediction": " temp = input.getTemp();\n    double  hue = input.getHue();\n    double  chroma = input.getChroma();\n    double  luma = input.getLuma();\n\n    double  hueDelta = hue - 180;\n    double  hueDeltaAbs = Math.abs(hueDelta);\n    double  hueDeltaSign = Math.signum(hueDelta);\n\n    double  chromaDelta = 0;\n    if (hueDeltaAbs > 180) {\n      chromaDelta = 360 - hueDeltaAbs;\n    } else if (hueDeltaAbs", "first_line_groundtruth": "coldestHue = getColdest().getHue();", "first_line_prediction": " temp = input.getTemp();", "match": 0}
{"groundtruth": "round(input.getHue()));", "prediction": "round(startHue));\n    for (int i = 0; i < 100; i++) {\n      double hue = answer.getHue() + directionOfRotation;\n      if (hue < 0.) {\n        hue += 360.;\n      }\n      if (hue > 360.) {\n        hue -= 360.;\n      }\n      double temp = getTempsByHct().get(getHctsByHue().get((int) Math.round(hue)));\n      double error = Math.abs(temp - coldestTemp);\n      if (error < smallestError)", "first_line_groundtruth": "round(input.getHue()));", "first_line_prediction": "round(startHue));", "match": 0}
{"groundtruth": "color = Hct.from(this.hue, this.chroma, tone).toInt();", "prediction": " color = keyColor.tone(tone).toInt();\n       cache.put(tone, color);\n    }\n    return color;\n  }", "first_line_groundtruth": "color = Hct.from(this.hue, this.chroma, tone).toInt();", "first_line_prediction": " color = keyColor.tone(tone).toInt();", "match": 0}
{"groundtruth": ".getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));", "prediction": ".getChroma(), ColorUtils.yInViewingConditions(viewedInVc, vc));\n  }\n\n  private void setInternalState(int argb) {\n    this.argb = argb;\n    hue = HctSolver.hueFromInt(argb);\n    chroma = HctSolver.chromaFromInt(argb);\n    tone = HctSolver.toneFromInt(argb);\n  }", "first_line_groundtruth": ".getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));", "first_line_prediction": ".getChroma(), ColorUtils.yInViewingConditions(viewedInVc, vc));", "match": 0}
{"groundtruth": "hue = MathUtils.sanitizeDegreesInt(startHue + i);", "prediction": "ithHue = (startHue + i) % 360;\n      Hct ithHct = getHctsByHue().get(ithHue);\n      double tempDelta = getRelativeTemperature(ithHct) - lastTemp;\n      absoluteTotalTempDelta += tempDelta;\n      lastTemp = getRelativeTemperature(ithHct);\n      if (absoluteTotalTempDelta >= count) {\n        break;\n      }\n      allColors.add(ithHct);\n    }\n\n    // If the count is too small, we need to remove some colors.\n    if (allColors.size() > count) {", "first_line_groundtruth": "hue = MathUtils.sanitizeDegreesInt(startHue + i);", "first_line_prediction": "ithHue = (startHue + i) % 360;", "match": 0}
{"groundtruth": "Cam16.fromInt(toInt());", "prediction": " Cam16.fromInt(argb);\n    Xyz xyz = cam16.inViewingConditions(vc);\n\n    // 2. Use XYZ coordinates to find L*a*b* of color in specified VC.\n    Lab lab = xyz.inViewingConditions(vc);\n\n    // 3. Use L*a*b* to find HCT of color in specified VC.\n    Hct hct = lab.inViewingConditions(vc);\n\n    return hct;\n  }\n\n  /**\n    * Set the internal state of this color.\n    *\n    * @param argb AR", "first_line_groundtruth": "Cam16.fromInt(toInt());", "first_line_prediction": " Cam16.fromInt(argb);", "match": 0}
{"groundtruth": "recastInVc.getHue(), recastInVc.getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));", "prediction": " recastInVc.hue(),\n         recastInVc.chroma(),\n         ColorUtils.yInViewingConditions(viewedInVc[1], vc));\n  }\n\n  private void setInternalState(int argb) {\n    this.argb = argb;\n    hue = HctSolver.hueFromInt(argb);\n    chroma = HctSolver.chromaFromInt(argb);\n    tone = HctSolver.toneFromInt(argb);\n  }", "first_line_groundtruth": "recastInVc.getHue(), recastInVc.getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));", "first_line_prediction": " recastInVc.hue(),", "match": 0}
{"groundtruth": "= MathUtils.sanitizeDegreesDouble(\n          startHue + directionOfRotation * hueAddend);", "prediction": " = startHue + hueAddend;\n      Hct other = getHctsByHue().get((int) Math.round(hue));\n      double otherRelativeTemp = (1. - getRelativeTemperature(other));\n      double error = Math.abs(complementRelativeTemp - otherRelativeTemp);\n      if (error < smallestError) {\n        smallestError = error;\n        answer = other;\n      }\n    }\n\n    // Rotate the complement to the correct direction.\n    if (startHueIsColdestToWarmest) {\n      directionOfRotation = -1.;\n    }\n    double rotation = (input.getHue", "first_line_groundtruth": "= MathUtils.sanitizeDegreesDouble(", "first_line_prediction": " = startHue + hueAddend;", "match": 0}
{"groundtruth": "fromCam = Cam16.fromInt(from);", "prediction": "uct = Cam16.fromInt(to);\n    double fromHue = ucsCam.getHue();\n    double toHue = uct.getHue();\n    double differenceDegrees = MathUtils.differenceDegrees(fromHue, toHue);\n    double rotationDegrees = Math.min(differenceDegrees * 0.5, 15.0);\n    double outputHue =\n        MathUtils.sanitizeDegreesDouble(\n            fromHue\n                + rotationDegrees * MathUtils.rotationDirection(fromHue, toHue));\n    return Cam16.from(outputHue, ucsCam.getChroma(), ucs", "first_line_groundtruth": "fromCam = Cam16.fromInt(from);", "first_line_prediction": "uct = Cam16.fromInt(to);", "match": 0}
{"groundtruth": "= Cam16.fromInt(ucs);", "prediction": " = Cam16.fromInt(ucs);\n    return ucsCam.toInt();\n  }\n\n  /**\n    * Blends hue from one color into another. The chroma and tone of the original color are\n    * maintained.\n    *\n    * @param from ARGB representation of color\n    * @param to ARGB representation of color\n    * @param amount how much blending to perform; 0.0 >= and <= 1.0\n    * @return from, with a hue blended towards to. Chroma and tone are constant.\n    */\n  public static int hctHue(int from,", "first_line_groundtruth": "= Cam16.fromInt(ucs);", "first_line_prediction": " = Cam16.fromInt(ucs);", "match": 0}
{"groundtruth": ".toRadians(MathUtils.sanitizeDegreesDouble(hue - 50.)));", "prediction": ".toRadians(hue))\n             * Math.cos(Math.toRadians(hue));\n  }\n\n  /**\n    * Returns the temperature of the warmest color in the color wheel.\n    */\n  public Hct getWarmest() {\n    return getHctsByHue().get(0);\n  }\n\n  /**\n    * Returns the temperature of the coldest color in the color wheel.\n    */\n  public Hct getColdest() {\n    return getHctsByHue().get(360);\n  }\n\n  /**\n    * Returns the temperature of the color with the given hue.\n    */\n  public", "first_line_groundtruth": ".toRadians(MathUtils.sanitizeDegreesDouble(hue - 50.)));", "first_line_prediction": ".toRadians(hue))", "match": 0}
{"groundtruth": "tone = ColorUtils.lstarFromArgb(argb);", "prediction": "tone = cam.getTone();\n  }", "first_line_groundtruth": "tone = ColorUtils.lstarFromArgb(argb);", "first_line_prediction": "tone = cam.getTone();", "match": 0}
{"groundtruth": "hue = MathUtils.sanitizeDegreesDouble(Math.toDegrees(Math.atan2(lab[2], lab[1])));", "prediction": " l = lab[0];\n    double a = lab[1];\n    double b = lab[2];\n    double c = Math.sqrt(a * a + b * b);\n    double h = Math.atan2(b, a);\n    double hPrime = h / (2 * Math.PI);\n    double hPrimeSquared = hPrime * hPrime;\n    double hPrimeCubed = hPrimeSquared * hPrime;\n    double hPrimeCubedSquared = hPrimeCubed * hPrimeCubed;\n    double hPrimeCubedSquaredPlusOne = hPrimeCubedSquared + 1;", "first_line_groundtruth": "hue = MathUtils.sanitizeDegreesDouble(Math.toDegrees(Math.atan2(lab[2], lab[1])));", "first_line_prediction": " l = lab[0];", "match": 0}
{"groundtruth": "fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "prediction": "1.0, 1.0);\n    return blended.toInt();\n  }\n\n  /**\n    * Blends chroma from one color into another. The hue and tone of the original color are\n    * maintained.\n    *\n    * @param from ARGB representation of color\n    * @param to ARGB representation of color\n    * @param amount how much blending to perform; 0.0 >= and <= 1.0\n    * @return from, with a chroma blended towards to. Hue and tone are constant.\n    */\n  public static int hctChroma(int from,", "first_line_groundtruth": "fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "first_line_prediction": "1.0, 1.0);", "match": 0}
{"groundtruth": "ucsCam.getHue(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "prediction": "ucsCam.getHue(), fromCam.getChroma(), fromCam.getTone());\n    return blended.toInt();\n  }\n\n  /**\n    * Blends hue from one color into another. The chroma and tone of the original color are\n    * maintained.\n    *\n    * @param from ARGB representation of color\n    * @param to ARGB representation of color\n    * @param amount how much blending to perform; 0.0 >= and <= 1.0\n    * @return from, with a hue blended towards to. Chroma and tone are constant.\n    */\n  public", "first_line_groundtruth": "ucsCam.getHue(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "first_line_prediction": "ucsCam.getHue(), fromCam.getChroma(), fromCam.getTone());", "match": 0}
{"groundtruth": "HctSolver.solveToInt(hue, chroma, tone);", "prediction": "0;\n    if (hue < 0) {\n      hue += 360;\n    }\n    hue = ColorUtils.clamp(hue, 0, 360);\n    if (chroma < 0) {\n      chroma = 0;\n    }\n    if (chroma > 1) {\n      chroma = 1;\n    }\n    if (tone < 0) {\n      tone = 0;\n    }\n    if (tone > 100) {\n      tone = 100;\n    }\n    double chromaMax = chromaMax(hue, tone", "first_line_groundtruth": "HctSolver.solveToInt(hue, chroma, tone);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "toCam.getAstar();", "prediction": "0.0;\n    double toB = 0.0;\n    double fromC = fromCam.getCstar();\n    double toC = 0.0;\n    double fromK = fromCam.getKstar();\n    double toK = 0.0;\n    double fromL = fromCam.getLstar();\n    double toL = 0.0;\n    double fromH = fromCam.getHue();\n    double toH = 0.0;\n    double fromS = fromCam.getSstar();\n    double toS = 0.0;\n    double fromT = fromCam", "first_line_groundtruth": "toCam.getAstar();", "first_line_prediction": "0.0;", "match": 0}
{"groundtruth": "hue = cam.getHue();", "prediction": " hue = cam.getHue();\n     chroma = cam.getChroma();\n     tone = cam.getTone();\n  }", "first_line_groundtruth": "hue = cam.getHue();", "first_line_prediction": " hue = cam.getHue();", "match": 0}
{"groundtruth": "fromCam.getBstar();", "prediction": "0.0;\n    double toJ = toCam.getJstar();\n    double toA = toCam.getAstar();\n    double toB = 0.0;\n    double fromC = fromCam.getCstar();\n    double fromD = fromCam.getDstar();\n    double fromE = fromCam.getEstar();\n    double toC = toCam.getCstar();\n    double toD = toCam.getDstar();\n    double toE = toCam.getEstar();\n    double fromF = fromCam.getFstar();\n    double fromG = fromCam.get", "first_line_groundtruth": "fromCam.getBstar();", "first_line_prediction": "0.0;", "match": 0}
{"groundtruth": "return Cam16.fromUcs(jstar, astar, bstar).toInt();", "prediction": " return Cam16.from(jstar, astar, bstar).toInt();\n  }", "first_line_groundtruth": "return Cam16.fromUcs(jstar, astar, bstar).toInt();", "first_line_prediction": " return Cam16.from(jstar, astar, bstar).toInt();", "match": 0}
{"groundtruth": "double fromJ = fromCam.getJstar();", "prediction": " // TODO: This is a bit of a hack.\n    double fromHue = fromCam.getHue();\n    double toHue = toCam.getHue();\n    double fromChroma = fromCam.getChroma();\n    double toChroma = toCam.getChroma();\n    double fromLstar = ColorUtils.lstarFromArgb(from);\n    double toLstar = ColorUtils.lstarFromArgb(to);\n    double fromUcs = fromCam.getUcs();\n    double toUcs = toCam.getUcs();\n    double fromSat = fromCam.getSat();\n    double", "first_line_groundtruth": "double fromJ = fromCam.getJstar();", "first_line_prediction": " // TODO: This is a bit of a hack.", "match": 0}
{"groundtruth": "toB = toCam.getBstar();", "prediction": "atemp = toA * amount;\n    double btemp = toB * amount;\n    double jtemp = toJ * amount;\n    double a = fromA + atemp;\n    double b = fromB + btemp;\n    double j = fromJ + jtemp;\n    double a2 = a * a;\n    double b2 = b * b;\n    double j2 = j * j;\n    double a3 = a2 * a;\n    double b3 = b2 * b;\n    double j3 = j2 * j;\n    double a4 = a3 * a;\n    double", "first_line_groundtruth": "toB = toCam.getBstar();", "first_line_prediction": "atemp = toA * amount;", "match": 0}
{"groundtruth": "Hct.fromInt(designColor);", "prediction": " Hct.fromArgb(designColor);\n    Hct toHct =  Hct.fromArgb(sourceColor);\n    Hct shiftedHct = fromHct.shiftHueTowards(toHct);\n    return shiftedHct.toArgb();\n  }\n\n  /**\n   * Blend the design color's HCT hue towards the key color's HCT hue, in a way that leaves the\n   * original color recognizable and recognizably shifted towards the key color.\n   *\n   * @param designColor ARGB representation of an arbitrary color.\n   * @param sourceColor ARGB representation of the main", "first_line_groundtruth": "Hct.fromInt(designColor);", "first_line_prediction": " Hct.fromArgb(designColor);", "match": 0}
{"groundtruth": "differenceDegrees = MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());", "prediction": " fromHue = fromHct.getHue();\n    double  toHue = toHct.getHue();\n    double  deltaHue = toHue - fromHue;\n    double  deltaHueAbs = Math.abs(deltaHue);\n    double  deltaHueSign = Math.signum(deltaHue);\n    double  deltaHueAbsSign = Math.signum(deltaHueAbs);\n    double  deltaHueSignSign = Math.signum(deltaHueSign);\n    double  deltaHueSignSignSign = Math.signum(deltaHueSignSign);\n    double  deltaHueSignSignSignSign = Math", "first_line_groundtruth": "differenceDegrees = MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());", "first_line_prediction": " fromHue = fromHct.getHue();", "match": 0}
{"groundtruth": "(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "prediction": "(), fromCam.getChroma(), fromCam.getTone());\n    return blended.toInt();\n  }\n\n  /**\n    * Blends hue from one color into another. The chroma and tone of the original color are\n    * maintained.\n    *\n    * @param from ARGB representation of color\n    * @param to ARGB representation of color\n    * @param amount how much blending to perform; 0.0 >= and <= 1.0\n    * @return from, with a hue blended towards to. Chroma and tone are constant.\n    */\n  public static int hctHue", "first_line_groundtruth": "(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));", "first_line_prediction": "(), fromCam.getChroma(), fromCam.getTone());", "match": 0}
{"groundtruth": "* viewingConditions.getNbb();", "prediction": " / (1.0 + u);\n\n    // chroma\n    double c = Math.sqrt(ac * ac + 1.0);\n\n    // lightness\n    double j = 0.5 * (1.0 + ac);\n\n    // brightness\n    double q = 0.5 * (1.0 - ac);\n\n    // colorfulness\n    double m = 0.5 * (1.0 + 0.5 * (ac - 1.0));\n\n    // saturation\n    double s = 0.5 * (1.0 + 0.5 * (ac + 1", "first_line_groundtruth": "* viewingConditions.getNbb();", "first_line_prediction": " / (1.0 + u);", "match": 0}
{"groundtruth": "= MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());", "prediction": " = toHct.hue - fromHct.hue;\n    double differenceDegreesAbs = Math.abs(differenceDegrees);\n    double differenceDegreesSign = Math.signum(differenceDegrees);\n    double differenceDegreesClamped =\n        differenceDegreesAbs > 180 ? differenceDegreesAbs - 360 : differenceDegreesAbs;\n    double differenceDegreesClampedNormalized =\n        differenceDegreesClamped / differenceDegreesClampedAbs;\n    double differenceDegreesClampedNormalizedClamped =\n        differenceDegreesClampedNormalized > 1 ? 1 : differenceDegreesClampedNormalized;\n    double differenceDegreesClampedNormalizedClamped", "first_line_groundtruth": "= MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());", "first_line_prediction": " = toHct.hue - fromHct.hue;", "match": 0}
{"groundtruth": "fromHct.getHue()\n                + rotationDegrees * MathUtils.rotationDirection(fromHct.getHue(), toHct.getHue()));", "prediction": "360.0 - (fromHct.getHue() + rotationDegrees) % 360.0);\n    return Hct.fromHct(outputHue, fromHct.getChroma(), fromHct.getLuma()).toInt();\n  }\n\n  /**\n   * Blend the design color's HCT hue towards the key color's HCT hue, in a way that leaves the\n   * original color recognizable and recognizably shifted towards the key color.\n   *\n   * @param designColor ARGB representation of an arbitrary color.\n   * @param sourceColor ARGB representation of the", "first_line_groundtruth": "fromHct.getHue()", "first_line_prediction": "360.0 - (fromHct.getHue() + rotationDegrees) % 360.0);", "match": 0}
{"groundtruth": "viewingConditions.getAw() + 4.0)\n            * viewingConditions.getFlRoot();", "prediction": "1.0 + viewingConditions.getAw() / viewingConditions.getC());\n\n    // CAM16 chroma\n    double m =\n        viewingConditions.getC()\n             * viewingConditions.getZ()\n             * Math.pow(\n                viewingConditions.getAw() / viewingConditions.getC(),\n                viewingConditions.getC() * viewingConditions.getZ());\n    double s =\n        viewingConditions.getC()\n             * viewingConditions.getZ()\n             * Math.pow(\n                viewingConditions.getAw() / viewingConditions.getC(),\n                viewingConditions.getC() * viewingConditions.getZ());\n\n    // CAM16 J coordinate\n    double", "first_line_groundtruth": "viewingConditions.getAw() + 4.0)", "first_line_prediction": "1.0 + viewingConditions.getAw() / viewingConditions.getC());", "match": 0}
{"groundtruth": "ColorUtils.argbFromXyz(xyz[0], xyz[1], xyz[2]);", "prediction": "0xff000000 | (int) (255.999 * xyz[0]) << 16 | (int) (255.999 * xyz[1]) << 8 | (int) (255.999 * xyz[2]);\n  }\n\n  /**\n    * @return ARGB representation of the color, in defined viewing conditions.\n    * @param viewingConditions Information about the environment where the color will be viewed.\n    * @param out Array to write the color to.\n    */\n  double[] xyzInViewingConditions(Viewing", "first_line_groundtruth": "ColorUtils.argbFromXyz(xyz[0], xyz[1], xyz[2]);", "first_line_prediction": "0xff000000 | (int) (255.999 * xyz[0]) << 16 | (int) (255.999 * xyz[1]) << 8 | (int) (255.999 * xyz[2]);", "match": 0}
{"groundtruth": "viewingConditions.getC() * viewingConditions.getZ());", "prediction": "1.0 / viewingConditions.getA());\n    double q =\n        viewingConditions.getAw() * viewingConditions.getAw() * viewingConditions.getAw() * j;\n\n    // CAM16 chroma\n    double m =\n        viewingConditions.getAw() * viewingConditions.getAw() * viewingConditions.getAw() * j;\n    double s =\n        viewingConditions.getAw() * viewingConditions.getAw() * viewingConditions.getAw() * j;\n\n    // CAM16 J, a, and b\n    double jstar =\n        viewingConditions.getAw() * viewingConditions.", "first_line_groundtruth": "viewingConditions.getC() * viewingConditions.getZ());", "first_line_prediction": "1.0 / viewingConditions.getA());", "match": 0}
{"groundtruth": "outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();", "prediction": "outputHue, fromHct.getChroma(), fromHct.getLuma()).toInt();\n  }\n\n  /**\n   * Blend the design color's HCT hue towards the key color's HCT hue, in a way that leaves the\n   * original color recognizable and recognizably shifted towards the key color.\n   *\n   * @param designColor ARGB representation of an arbitrary color.\n   * @param sourceColor ARGB representation of the main theme color.\n   * @return The design color with a hue shifted towards the system's color, a slightly\n   *     warmer/cooler variant of the design", "first_line_groundtruth": "outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();", "first_line_prediction": "outputHue, fromHct.getChroma(), fromHct.getLuma()).toInt();", "match": 0}
{"groundtruth": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();", "prediction": "fromHct(outputHue, fromHct.getChroma(), fromHct.getLuma()).toInt();\n  }\n\n  /**\n   * Blend the design color's HCT hue towards the key color's HCT hue, in a way that leaves the\n   * original color recognizable and recognizably shifted towards the key color.\n   *\n   * @param designColor ARGB representation of an arbitrary color.\n   * @param sourceColor ARGB representation of the main theme color.\n   * @return The design color with a hue shifted towards the system's color, a slightly\n   *     warmer/cooler", "first_line_groundtruth": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();", "first_line_prediction": "fromHct(outputHue, fromHct.getChroma(), fromHct.getLuma()).toInt();", "match": 0}
{"groundtruth": "viewingConditions.getRgbD()[0] * rT;", "prediction": "0.950456 * rT + 1.000000 * gT + 1.088835 * bT;\n    double gD = 0.105731 * rT + 0.105731 * gT + 0.894269 * bT;\n    double bD = 0.100417 * rT + 0.089933 * gT + 0.108737 * bT;\n\n    //", "first_line_groundtruth": "viewingConditions.getRgbD()[0] * rT;", "first_line_prediction": "0.950456 * rT + 1.000000 * gT + 1.088835 * bT;", "match": 0}
{"groundtruth": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);", "prediction": "1.0 - rAF - gAF;\n\n    // Convert to CAM16\n    double[] xyz = new double[] {rAF, gAF, bAF};\n    double[] cam16 = XYZ_TO_CAM16.apply(xyz);\n\n    // Convert to CAM16-UCS\n    double[] cam16Ucs = CAM16_TO_CAM16UCS.apply(cam16);\n\n    // Convert to CAM16-UCS\n    double[] cam16Ucs2 = CAM16_TO_CAM16UCS.apply(cam1", "first_line_groundtruth": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);", "first_line_prediction": "1.0 - rAF - gAF;", "match": 0}
{"groundtruth": "* viewingConditions.getZ());", "prediction": " // 1.0 / 2.2\n            );\n    double q =\n        viewingConditions.getAw() * viewingConditions.getAw() * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewingConditions.getAw()\n            * viewing", "first_line_groundtruth": "* viewingConditions.getZ());", "first_line_prediction": " // 1.0 / 2.2", "match": 0}
{"groundtruth": "double blueL = ColorUtils.linearized(blue);", "prediction": " double blueL = ColorUtils.linearized(blue);\n    double[] xyz = CAM16RGB_TO_XYZ[0][0] * redL + CAM16RGB_TO_XYZ[0][1] * greenL + CAM16RGB_TO_XYZ[0][2] * blueL;\n    double[] xyz2 = CAM16RGB_TO_XYZ[1][0] * redL + CAM16RGB_TO_XYZ[1][1] * greenL + CAM16RGB_TO_XYZ[1][2] * blueL;\n    double[]", "first_line_groundtruth": "double blueL = ColorUtils.linearized(blue);", "first_line_prediction": " double blueL = ColorUtils.linearized(blue);", "match": 0}
{"groundtruth": "eHue * viewingConditions.getNc() * viewingConditions.getNcb();", "prediction": "1.0 / viewingConditions.getC() * Math.pow(eHue, 0.25);\n    double m = 1.0 + 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "first_line_groundtruth": "eHue * viewingConditions.getNc() * viewingConditions.getNcb();", "first_line_prediction": "1.0 / viewingConditions.getC() * Math.pow(eHue, 0.25);", "match": 0}
{"groundtruth": "* viewingConditions.getFlRoot();", "prediction": " * viewingConditions.getZ();\n\n    // CAM16 colorfulness\n    double m =\n        viewingConditions.getC()\n             * viewingConditions.getZ()\n             * Math.pow(\n                 viewingConditions.getAw() / viewingConditions.getAw0(),\n                 viewingConditions.getC() * viewingConditions.getZ());\n    double s =\n        viewingConditions.getC()\n             * viewingConditions.getZ()\n             * Math.pow(\n                 viewingConditions.getAw() / viewingConditions.getAw0(),\n                 viewingConditions.getC() * viewingConditions.getZ());\n\n    // CAM16 J, a, and b\n    double j", "first_line_groundtruth": "* viewingConditions.getFlRoot();", "first_line_prediction": " * viewingConditions.getZ();", "match": 0}
{"groundtruth": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42);", "prediction": "rix = rD * viewingConditions.getRgbX()[0] + gD * viewingConditions.getRgbX()[1] + bD * viewingConditions.getRgbX()[2];\n    double gix = rD * viewingConditions.getRgbX()[3] + gD * viewingConditions.getRgbX()[4] + bD * viewingConditions.getRgbX()[5];\n    double bix = rD * viewingConditions.getRgbX()[6] + gD * viewingConditions.getRgbX()[7] + bD * viewingConditions.getRgbX()[8];\n\n    //", "first_line_groundtruth": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42);", "first_line_prediction": "rix = rD * viewingConditions.getRgbX()[0] + gD * viewingConditions.getRgbX()[1] + bD * viewingConditions.getRgbX()[2];", "match": 0}
{"groundtruth": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));", "prediction": " // 50% saturation\n            * Math.pow(\n                viewingConditions.getAw() / viewingConditions.getAwMax(),\n                viewingConditions.getC() * viewingConditions.getZ());\n\n    // CAM16 color\n    double r = (rA + 100.0 * q) / 100.0;\n    double g = (gA + 100.0 * q) / 100.0;\n    double b = (bA + 100.0 * q) / 100.0;\n\n    // CAM16 color\n   ", "first_line_groundtruth": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));", "first_line_prediction": " // 50% saturation", "match": 0}
{"groundtruth": "double redL = ColorUtils.linearized(red);", "prediction": " // Convert to XYZ\n    double[] xyz = new double[3];\n    xyz[0] = (red * 0.4124564 + green * 0.3575761 + blue * 0.1804375) / 0.95047;\n    xyz[1] = (red * 0.2126729 + green * 0.7151522 + blue * 0.0721750) / 1.00000;\n   ", "first_line_groundtruth": "double redL = ColorUtils.linearized(red);", "first_line_prediction": " // Convert to XYZ", "match": 0}
{"groundtruth": "m = c * viewingConditions.getFlRoot();", "prediction": "ql = 1.0 - q;\n    double qb = 1.0 - q;\n    double qc = 1.0 - q;\n    double qd = 1.0 - q;\n    double qe = 1.0 - q;\n    double qf = 1.0 - q;\n    double qg = 1.0 - q;\n    double qh = 1.0 - q;\n    double qi = 1.0 - q;\n    double qj = 1.0 - q;\n    double qk = 1.0 - q", "first_line_groundtruth": "m = c * viewingConditions.getFlRoot();", "first_line_prediction": "ql = 1.0 - q;", "match": 0}
{"groundtruth": "viewingConditions.getAw(),\n                viewingConditions.getC() * viewingConditions.getZ());", "prediction": "100.0,\n                viewingConditions.getJab()\n                    ? viewingConditions.getJabPower()\n                    : viewingConditions.getJabPower() + 1.0)\n            / viewingConditions.getJabPower();\n    double q =\n        viewingConditions.getJab()\n            ? viewingConditions.getJabPower() * viewingConditions.getJabPower()\n            : viewingConditions.getJabPower() + 1.0;\n\n    // CAM16 chroma\n    double m =\n        viewingConditions.getJab()\n            ? viewingConditions.getJabPower() * viewing", "first_line_groundtruth": "viewingConditions.getAw(),", "first_line_prediction": "100.0,", "match": 0}
{"groundtruth": "pow(0.29, viewingConditions.getN()), 0.73) * Math.pow(t, 0.9);", "prediction": "pow(t, 0.25), 0.42)\n            * viewingConditions.getFl()\n            * viewingConditions.getFl()\n            * viewingConditions.getFl();\n    double jstar = 100.0 * Math.pow(alpha / viewingConditions.getAw(), 0.42);\n    double astar = 100.0 * Math.pow(alpha / viewingConditions.getAw(), 0.42);\n    double bstar = 100.0 * Math.pow(alpha / viewingConditions.getAw(), 0.4", "first_line_groundtruth": "pow(0.29, viewingConditions.getN()), 0.73) * Math.pow(t, 0.9);", "first_line_prediction": "pow(t, 0.25), 0.42)", "match": 0}
{"groundtruth": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));", "prediction": "1.0 - Math.pow(m, 2.0)) / (1.0 + Math.pow(m, 2.0))) * viewingConditions.getFlRoot();\n\n    // CAM16 color\n    double r = (rA + rAF) / 2.0;\n    double g = (gA + gAF) / 2.0;\n    double b = (bA + bAF) / 2.0;\n\n    // CAM16 color\n    double[] rgb = {r, g, b};\n\n    // CAM16 color\n    return new Cam16(", "first_line_groundtruth": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));", "first_line_prediction": "1.0 - Math.pow(m, 2.0)) / (1.0 + Math.pow(m, 2.0))) * viewingConditions.getFlRoot();", "match": 0}
{"groundtruth": "viewingConditions.getFlRoot();", "prediction": "0.0228;\n    double m = c * 0.0228;\n    double s =\n        50.0 * Math.sqrt((c * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));\n    double jstar = (1.0 + 100.0 * 0.007) * j / (1.0 + 0.007 * j);\n    double astar = m * Math.cos(Math.toRadians(h));\n    double bstar = m * Math.sin(Math", "first_line_groundtruth": "viewingConditions.getFlRoot();", "first_line_prediction": "0.0228;", "match": 0}
{"groundtruth": "Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());", "prediction": "0.007\n             * Math.pow(t, 0.9)\n             * Math.pow(1.0 + 0.007 * getJ(), 0.9);\n    double a = ac * Math.cos(eHue);\n    double b = ac * Math.sin(eHue);\n\n    double[] xyz =\n        ColorUtils.xyzFromLch(\n            getJ(), getChroma(), getHue(), viewingConditions, returnArray);\n    xyz[0] = xyz[0] * a + xyz[1] * b + xyz[2];\n    return xyz;", "first_line_groundtruth": "Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());", "first_line_prediction": "0.007", "match": 0}
{"groundtruth": ") / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());", "prediction": "viewingConditions) / 100.0, viewingConditions.getN())\n             * Math.pow(t, 0.9);\n    double a = ac * Math.cos(eHue);\n    double b = ac * Math.sin(eHue);\n\n    double[] xyz =\n        ColorUtils.xyzFromLch(\n            getJ(viewingConditions), getChroma(), getHue(), viewingConditions, returnArray);\n    xyz[0] = xyz[0] * a + xyz[1] * b + xyz[2];\n    return xyz;\n  }\n\n  /**\n    * @return AR", "first_line_groundtruth": ") / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());", "first_line_prediction": "viewingConditions) / 100.0, viewingConditions.getN())", "match": 0}
{"groundtruth": "(100.0 / viewingConditions.getFl()) * Math.pow(gCBase, 1.0 / 0.42);", "prediction": "100.0 * Math.pow(gCBase, 1.0 / 0.42);\n    double bCBase = max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    double bC =\n        Math.signum(bA) * 100.0 * Math.pow(bCBase, 1.0 / 0.42);\n\n    double r = rC * rA;\n    double g = gC * gA;\n    double b", "first_line_groundtruth": "(100.0 / viewingConditions.getFl()) * Math.pow(gCBase, 1.0 / 0.42);", "first_line_prediction": "100.0 * Math.pow(gCBase, 1.0 / 0.42);", "match": 0}
{"groundtruth": "double c = m2 / viewingConditions.getFlRoot();", "prediction": " // CAM16-UCS components\n    double j = (1.0 + 100.0 * 0.007) * jstar / (1.0 + 0.007 * jstar);\n    double q =\n        4.0\n             / viewingConditions.getC()\n             * Math.sqrt(j / 100.0)\n             * (viewingConditions.getAw() + 4.0)\n             * viewingConditions.getFlRoot();\n    double c = m2 * viewingConditions.getFlRoot();\n    double s =\n        50", "first_line_groundtruth": "double c = m2 / viewingConditions.getFlRoot();", "first_line_prediction": " // CAM16-UCS components", "match": 0}
{"groundtruth": "ac / viewingConditions.getNbb());", "prediction": "1.0 - eHue) * (50000.0 / 13.0) * viewingConditions.getNc() * viewingConditions.getNcb();\n    double p3 =\n        viewingConditions.getAw()\n            * Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());\n    double p4 =\n        viewingConditions.getAw()\n            * Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());\n   ", "first_line_groundtruth": "ac / viewingConditions.getNbb());", "first_line_prediction": "1.0 - eHue) * (50000.0 / 13.0) * viewingConditions.getNc() * viewingConditions.getNcb();", "match": 0}
{"groundtruth": "return QuantizerWsmeans.quantize(pixels, wuClusters, maxColors);", "prediction": " // TODO: Implement the Celebi algorithm.\n    return null;\n  }", "first_line_groundtruth": "return QuantizerWsmeans.quantize(pixels, wuClusters, maxColors);", "first_line_prediction": " // TODO: Implement the Celebi algorithm.", "match": 0}
{"groundtruth": "/ viewingConditions.getRgbD()[0];", "prediction": " * (1.0 + 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "first_line_groundtruth": "/ viewingConditions.getRgbD()[0];", "first_line_prediction": " * (1.0 + 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "match": 0}
{"groundtruth": "- Math.pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 0.9);", "prediction": " - Math.pow(0.29, viewingConditions.getN()), 0.73), 0.9)\n            * Math.pow(getJ() / 100.0, 0.9);\n    double u = 1.0 + 0.305 * t;\n    double a = getAstar() * u;\n    double b = getBstar() * u;\n    double x = a * viewingConditions.getC() / (u + 0.305);\n    double y = b * viewingConditions.getC() / (u + 0.", "first_line_groundtruth": "- Math.pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 0.9);", "first_line_prediction": " - Math.pow(0.29, viewingConditions.getN()), 0.73), 0.9)", "match": 0}
{"groundtruth": "lab = ColorUtils.labFromArgb(argb);", "prediction": "ary = new double[3];\n    ColorUtils.fromInt(argb, ary);\n    return ary;\n  }\n\n  /**\n   * Convert a color represented in RGB to a 3-element array of L*a*b* coordinates of the color.\n   */\n  @Override\n  public double[] fromRgb(int rgb) {\n    double[] ary = new double[3];\n    ColorUtils.fromRgb(rgb, ary);\n    return ary;\n  }\n\n  /**\n   * Convert a color represented in LAB to a 3-element array of L*a*b* coordinates of", "first_line_groundtruth": "lab = ColorUtils.labFromArgb(argb);", "first_line_prediction": "ary = new double[3];", "match": 0}
{"groundtruth": "errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);", "prediction": "errorPalette = new TonalPalette(0xFF000000);\n  }\n\n  public DynamicScheme(\n      int sourceColorArgb,\n      Variant variant,\n      boolean isDark,\n      double contrastLevel,\n      TonalPalette primaryPalette,\n      TonalPalette secondaryPalette,\n      TonalPalette tertiaryPalette,\n      TonalPalette neutralPalette,\n      TonalPalette neutralVariantPalette) {\n    this.sourceColorArgb = sourceColorArgb;\n    this.sourceColorHct = Hct.fromInt(sourceColorArgb);\n    this.variant = variant;\n    this.isDark = isDark", "first_line_groundtruth": "errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);", "first_line_prediction": "errorPalette = new TonalPalette(0xFF000000);", "match": 0}
{"groundtruth": "ColorUtils.whitePointD65(),\n        (200.0 / Math.PI * ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);", "prediction": "1.0, 11.72, lstar, 2.0, false);\n  }\n\n  /**\n    * Create sRGB-like viewing conditions with a custom background lstar.\n    *\n    * <p>Default viewing conditions have a lstar of 50, midgray.\n    */\n  public static ViewingConditions defaultWithBackgroundLstar() {\n    return ViewingConditions.defaultWithBackgroundLstar(50.0);\n  }\n\n  /**\n    * Create sRGB-like viewing conditions with a custom background lstar.\n    *\n    * <p>Default viewing conditions have a l", "first_line_groundtruth": "ColorUtils.whitePointD65(),", "first_line_prediction": "1.0, 11.72, lstar, 2.0, false);", "match": 0}
{"groundtruth": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);", "prediction": "0;\n    }\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < hues.length; i++) {\n      if (hues[i] < min) {\n        min = hues[i];\n      }\n      if (hues[i] > max) {\n        max = hues[i];\n      }\n    }\n    double minDiff = Math.abs(max - min);\n    double minDiffRotated = Math.abs(max - min + rotations[0]);\n    double minDiffRotated", "first_line_groundtruth": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "gC / viewingConditions.getRgbD()[1];", "prediction": "0.0;\n    double bF = 0.0;\n    if (rF > 0.0031308) {\n      rF = 1.055 * Math.pow(rF, 1.0 / 2.4) - 0.055;\n    }\n    if (gF > 0.0031308) {\n      gF = 1.055 * Math.pow(gF, 1.0 / 2.4) - 0.055;\n    }\n    if", "first_line_groundtruth": "gC / viewingConditions.getRgbD()[1];", "first_line_prediction": "0.0;", "match": 0}
{"groundtruth": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);", "prediction": "0xff000000 | ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);\n  }", "first_line_groundtruth": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);", "first_line_prediction": "0xff000000 | ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);", "match": 0}
{"groundtruth": "n = (ColorUtils.yFromLstar(backgroundLstar) / whitePoint[1]);", "prediction": "ql = 1.0 + (0.015 * k4F * k4F * k4F * k4F);\n    double flRoot = Math.sqrt(fl);\n    double n = 1.0 + (0.045 * k4F * k4F * k4F * k4F);\n    double nbb = 1.0 + (0.015 * k4F * k4F * k4F * k4F);\n    double ncb = 1.0 + (0.03 * k4F * k4", "first_line_groundtruth": "n = (ColorUtils.yFromLstar(backgroundLstar) / whitePoint[1]);", "first_line_prediction": "ql = 1.0 + (0.015 * k4F * k4F * k4F * k4F);", "match": 0}
{"groundtruth": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42);", "prediction": "rCBase + 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "first_line_groundtruth": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42);", "first_line_prediction": "rCBase + 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "match": 0}
{"groundtruth": "d = MathUtils.clampDouble(0.0, 1.0, d);", "prediction": " // Transform 'cone'/'rgb' responses to 'cone'/'xyz' responses\n    double[][] matrixInv = Cam16.CAM16RGB_TO_XYZ;\n    double[] xyzW = new double[3];\n    xyzW[0] = (rW * matrixInv[0][0]) + (gW * matrixInv[0][1]) + (bW * matrixInv[0][2]);\n    xyzW[1] = (rW * matrixInv[1][0]) + (gW * matrixInv[1][1]) + (bW * matrixInv[1", "first_line_groundtruth": "d = MathUtils.clampDouble(0.0, 1.0, d);", "first_line_prediction": " // Transform 'cone'/'rgb' responses to 'cone'/'xyz' responses", "match": 0}
{"groundtruth": "sourceColorArgb = sourceColorHct.toInt();", "prediction": "sourceColorHct = sourceColorHct;\n    this.sourceColorArgb = sourceColorHct.toArgb();\n    this.variant = variant;\n    this.isDark = isDark;\n    this.contrastLevel = contrastLevel;\n\n    this.primaryPalette = primaryPalette;\n    this.secondaryPalette = secondaryPalette;\n    this.tertiaryPalette = tertiaryPalette;\n    this.neutralPalette = neutralPalette;\n    this.neutralVariantPalette = neutralVariantPalette;\n    this.errorPalette = new TonalPalette(0xFF000000);\n  }\n\n  public DynamicScheme", "first_line_groundtruth": "sourceColorArgb = sourceColorHct.toInt();", "first_line_prediction": "sourceColorHct = sourceColorHct;", "match": 0}
{"groundtruth": ": MathUtils.lerp(0.525, 0.59, ((f - 0.8) * 10.0));", "prediction": " : MathUtils.lerp(0.59, 0.69, (f * 10.0));\n    double n = 1.0 + (c * 0.045);\n    double[] rgbD = new double[3];\n    rgbD[0] = (rW * n) / (n * nbb);\n    rgbD[1] = (gW * n) / (n * ncb);\n    rgbD[2] = (bW * n) / (n * nc);\n    // Transform 'rgb' responses to 'xyz' responses\n   ", "first_line_groundtruth": ": MathUtils.lerp(0.525, 0.59, ((f - 0.8) * 10.0));", "first_line_prediction": " : MathUtils.lerp(0.59, 0.69, (f * 10.0));", "match": 0}
{"groundtruth": "final double sourceHue = sourceColorHct.getHue();", "prediction": " int sourceColorHue = sourceColorHct.getHue();\n     int sourceColorHueIndex = MathUtils.indexOf(hues, sourceColorHue);\n     int rotatedHueIndex = sourceColorHueIndex + (int) Math.round(rotations[sourceColorHueIndex]);\n     return hues[rotatedHueIndex % hues.length];\n  }", "first_line_groundtruth": "final double sourceHue = sourceColorHct.getHue();", "first_line_prediction": " int sourceColorHue = sourceColorHct.getHue();", "match": 0}
{"groundtruth": "MathUtils.lerp(this.low, this.normal, (contrastLevel - -1) / 1);", "prediction": "1.0 + (contrastLevel * (this.normal - 1.0));\n    } else if (contrastLevel < 0.5) {\n      return this.normal;\n    } else if (contrastLevel < 1.0) {\n      return 1.0 + (contrastLevel * (this.medium - 1.0));\n    } else {\n      return this.medium;\n    }\n  }\n\n  /**\n    * Returns the contrast ratio at a given contrast level.\n    *\n    * @param contrastLevel The contrast level. 0.0 is the default (normal); -1.0 is", "first_line_groundtruth": "MathUtils.lerp(this.low, this.normal, (contrastLevel - -1) / 1);", "first_line_prediction": "1.0 + (contrastLevel * (this.normal - 1.0));", "match": 0}
{"groundtruth": "(CorePalette.of(argb));", "prediction": "(CorePalette.fromArgb(argb));\n  }\n\n  /** Creates a light theme Scheme from a source color in ARGB, i.e. a hex code. */\n  public static Scheme light(int argb, int alpha) {\n    return lightFromCorePalette(CorePalette.fromArgb(argb, alpha));\n  }\n\n  /** Creates a light theme Scheme from a source color in ARGB, i.e. a hex code. */\n  public static Scheme light(int argb, int alpha, int red, int green, int blue) {\n    return lightFromCorePalette(CorePalette.from", "first_line_groundtruth": "(CorePalette.of(argb));", "first_line_prediction": "(CorePalette.fromArgb(argb));", "match": 0}
{"groundtruth": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);", "prediction": "1.0;\n    } else if (contrastLevel < 1.0) {\n      return MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0.5) / 0.5);\n    } else {\n      return this.medium;\n    }\n  }", "first_line_groundtruth": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);", "first_line_prediction": "1.0;", "match": 0}
{"groundtruth": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);", "prediction": "1.0;\n    } else {\n      return MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);\n    }\n  }", "first_line_groundtruth": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);", "first_line_prediction": "1.0;", "match": 0}
{"groundtruth": "lightFromCorePalette(CorePalette.contentOf(argb));", "prediction": " lightFromCorePalette(CorePalette.ofContent(argb));\n  }", "first_line_groundtruth": "lightFromCorePalette(CorePalette.contentOf(argb));", "first_line_prediction": " lightFromCorePalette(CorePalette.ofContent(argb));", "match": 0}
{"groundtruth": "ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);", "prediction": "100.0),\n        lstar,\n        2.0,\n        false);\n  }\n\n  /**\n    * Create sRGB-like viewing conditions with a custom background lstar.\n    *\n    * <p>Default viewing conditions have a lstar of 50, midgray.\n    */\n  public static ViewingConditions defaultWithBackgroundLstar() {\n    return ViewingConditions.defaultWithBackgroundLstar(50.0);\n  }\n\n  /**\n    * Create sRGB-like viewing conditions with a custom background lstar.\n    *\n    * <p>Default viewing conditions have a lstar of ", "first_line_groundtruth": "ColorUtils.yFromLstar(50.0) / 100.f),", "first_line_prediction": "100.0),", "match": 0}
{"groundtruth": "pointProvider.toInt(clusters[i]);", "prediction": "0;\n      while (argbToPopulation.containsKey(possibleNewCluster)) {\n        possibleNewCluster++;\n      }\n      argbToPopulation.put(possibleNewCluster, count);\n    }\n\n    Map<Integer, Integer> argbToColor = new LinkedHashMap<>();\n    for (int i = 0; i < clusterCount; i++) {\n      int count = pixelCountSums[i];\n      if (count == 0) {\n        continue;\n      }\n\n      int possibleNewCluster = 0;\n      while (argbToColor.containsKey(possibleNewCluster)) {\n        possibleNewCluster++;\n      }", "first_line_groundtruth": "pointProvider.toInt(clusters[i]);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "distance = pointProvider.distance(clusters[i], clusters[j]);", "prediction": "rix = 0.0;\n          double riy = 0.0;\n          double riz = 0.0;\n          double rix = 0.0;\n          double riy2 = 0.0;\n          double riz2 = 0.0;\n          double rix2 = 0.0;\n          double riy3 = 0.0;\n          double riz3 = 0.0;\n          double rix3 = 0.0;\n          double riy4 = 0.0;\n          double riz4 = 0.0;\n          double r", "first_line_groundtruth": "distance = pointProvider.distance(clusters[i], clusters[j]);", "first_line_prediction": "rix = 0.0;", "match": 0}
{"groundtruth": "pointProvider.fromInt(inputPixel);", "prediction": " new double[] {pointProvider.getRed(inputPixel), pointProvider.getGreen(inputPixel), pointProvider.getBlue(inputPixel)};\n        pixels[pointCount] = inputPixel;\n        pixelToCount.put(inputPixel, 1);\n        pointCount++;\n      } else {\n        pixelToCount.put(inputPixel, pixelCount + 1);\n      }\n    }\n\n    // Initialize the clusters.\n    int[] clusters = new int[maxColors];\n    for (int i = 0; i < clusters.length; i++) {\n      clusters[i] = i;\n    }\n\n   ", "first_line_groundtruth": "pointProvider.fromInt(inputPixel);", "first_line_prediction": " new double[] {pointProvider.getRed(inputPixel), pointProvider.getGreen(inputPixel), pointProvider.getBlue(inputPixel)};", "match": 0}
{"groundtruth": "(Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {", "prediction": " (answer < 50) {\n          answer = 50;\n        } else {\n          answer = 60;\n        }\n      }\n\n      return answer;\n    }\n  }\n\n  /** Returns the contrast curve of the color. */\n  @NonNull\n  public ContrastCurve getContrastCurve() {\n    return contrastCurve;\n  }\n\n  /** Returns the background color of the color. */\n  @Nullable\n  public DynamicColor getBackground() {\n    return background;\n  }\n\n  /** Returns the name of the color. */\n  @NonNull\n  public String getName() {\n    return name;\n  }\n\n  /** Returns the palette of", "first_line_groundtruth": "(Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {", "first_line_prediction": " (answer < 50) {", "match": 0}
{"groundtruth": "if (Contrast.ratioOfTones(upper, answer) >= desiredRatio\n            && Contrast.ratioOfTones(lower, answer) >= desiredRatio) {", "prediction": " // If the background is darker, use the lower tone.\n        if (scheme.isDark) {\n          answer = lower;\n        } else {\n          answer = upper;\n        }\n      }\n\n      return answer;\n    }\n  }\n\n  /** Returns the contrast curve for the given scheme. */\n  public ContrastCurve getContrastCurve(@NonNull DynamicScheme scheme) {\n    return contrastCurve.apply(scheme);\n  }\n\n  /** Returns the contrast curve for the given scheme. */\n  public ContrastCurve getContrastCurve() {\n    return contrastCurve;\n  }\n\n  /** Returns the background color for the given scheme. */\n ", "first_line_groundtruth": "if (Contrast.ratioOfTones(upper, answer) >= desiredRatio", "first_line_prediction": " // If the background is darker, use the lower tone.", "match": 0}
{"groundtruth": "= Contrast.lighter(upper, desiredRatio);", "prediction": " = Contrast.ratioOfTones(upper, desiredRatio);\n        double darkOption = Contrast.ratioOfTones(lower, desiredRatio);\n\n        if (lightOption >= 0 && darkOption >= 0) {\n          answer = MathUtils.clampDouble(0, 100, (lightOption + darkOption) / 2);\n        } else if (lightOption >= 0) {\n          answer = MathUtils.clampDouble(0, 100, lightOption);\n        } else if (darkOption >= 0) {\n          answer = MathUtils.clampDouble(0", "first_line_groundtruth": "= Contrast.lighter(upper, desiredRatio);", "first_line_prediction": " = Contrast.ratioOfTones(upper, desiredRatio);", "match": 0}
{"groundtruth": "().quantize(pixels, colorCount);", "prediction": "Result();\n    int[] map = mapResult.getMap();\n    int[] counts = mapResult.getCounts();\n    int[] colors = mapResult.getColors();\n    int[] colorCounts = mapResult.getColorCounts();\n    int[] colorMap = mapResult.getColorMap();\n    int[] colorCountsMap = mapResult.getColorCountsMap();\n    int[] colorCountsMap2 = mapResult.getColorCountsMap2();\n    int[] colorCountsMap3 = mapResult.getColorCountsMap3();\n    int[] colorCountsMap4 = mapResult.getColorCountsMap4();\n    int[] colorCountsMap5 =", "first_line_groundtruth": "().quantize(pixels, colorCount);", "first_line_prediction": "Result();", "match": 0}
{"groundtruth": "pointProvider.distance(point, clusters[j]);", "prediction": "0;\n          for (int k = 0; k < 3; k++) {\n            distance += Math.pow(point[k] - previousCluster[k], 2);\n          }\n          distance = Math.sqrt(distance);\n          if (distance < minimumDistance) {\n            minimumDistance = distance;\n            newClusterIndex = j;\n          }\n        }\n\n        if (newClusterIndex == -1) {\n          continue;\n        }\n\n        int newClusterCount = counts[i];\n        int previousClusterCount = counts[previousClusterIndex];\n        counts[i] = previousClusterCount + newClusterCount;", "first_line_groundtruth": "pointProvider.distance(point, clusters[j]);", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "red = ColorUtils.redFromArgb(pixel);", "prediction": " r = ColorUtils.red(pixel);\n      int  g = ColorUtils.green(pixel);\n      int  b = ColorUtils.blue(pixel);\n      int index = getIndex(r, g, b);\n      weights[index] += count;\n      momentsR[index] += count * r;\n      momentsG[index] += count * g;\n      momentsB[index] += count * b;\n      moments[index] += count;\n    }\n  }\n\n  void createMoments() {\n    for (int i = 0; i < TOTAL_SIZE; i++)", "first_line_groundtruth": "red = ColorUtils.redFromArgb(pixel);", "first_line_prediction": " r = ColorUtils.red(pixel);", "match": 0}
{"groundtruth": "previousDistance = pointProvider.distance(point, previousCluster);", "prediction": " previousClusterDistance = pointProvider.distance(point, previousCluster);\n        int newClusterIndex = indexMatrix[previousClusterIndex][previousClusterIndex];\n        double[] newCluster = clusters[newClusterIndex];\n        double newClusterDistance = pointProvider.distance(point, newCluster);\n        if (newClusterDistance < previousClusterDistance) {\n          clusterIndices[i] = newClusterIndex;\n          pointsMoved++;\n        }\n      }\n\n      if (pointsMoved == 0) {\n        break;\n      }\n    }\n\n    int[] colors = new int[clusterCount];\n    for (int i = 0; i", "first_line_groundtruth": "previousDistance = pointProvider.distance(point, previousCluster);", "first_line_prediction": " previousClusterDistance = pointProvider.distance(point, previousCluster);", "match": 0}
{"groundtruth": ") -> palette, (s) -> hct.getTone());", "prediction": ") -> palette, (s) -> hct.chroma());\n  }\n\n  /**\n    * Create a DynamicColor from a hex code.\n    *\n    * <p>Result has no background; thus no support for increasing/decreasing contrast for a11y.\n    *\n    * @param name The name of the dynamic color.\n    * @param argb The source color from which to extract the hue and chroma.\n    * @param isBackground Whether this dynamic color is a background, with some other color as the\n    *     foreground.\n    */\n  @NonNull\n  public static DynamicColor fromArgb(\n     ", "first_line_groundtruth": ") -> palette, (s) -> hct.getTone());", "first_line_prediction": ") -> palette, (s) -> hct.chroma());", "match": 0}
{"groundtruth": "return MathUtils.signum(component) * 400.0 * af / (af + 27.13);", "prediction": " return (af <= 0.008856) ? (component / 903.3) : (Math.pow(af, 1.0 / 3.0) * 116.0 - 16.0);\n  }\n\n  static double trueLinearized(double component) {\n    double linearized = 0.0;\n    if (component <= 0.04045) {\n      linearized = component / 12.92;\n    } else {\n      linearized = Math.pow((component + 0.055", "first_line_groundtruth": "return MathUtils.signum(component) * 400.0 * af / (af + 27.13);", "first_line_prediction": " return (af <= 0.008856) ? (component / 903.3) : (Math.pow(af, 1.0 / 3.0) * 116.0 - 16.0);", "match": 0}
{"groundtruth": "Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n              ? fInitialTone\n              : DynamicColor.foregroundTone(bgTone, fContrast);", "prediction": " Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n               ? fInitialTone\n               : DynamicColor.foregroundTone(bgTone, fContrast);\n\n      // 2nd round: solve to max, each\n      double nMaxContrast = nearer.contrastCurve.getContrast(scheme.contrastLevel);\n      double fMaxContrast = farther.contrastCurve.getContrast(scheme.contrastLevel);\n      double nMaxTone = nearer.tone.apply(scheme);\n      double fMaxTone = farther.tone.apply(scheme);\n      double nMinContrast = farther.", "first_line_groundtruth": "Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast", "first_line_prediction": " Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast", "match": 0}
{"groundtruth": "Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast\n              ? nInitialTone\n              : DynamicColor.foregroundTone(bgTone, nContrast);", "prediction": "0.5 * (nInitialTone + (nContrast - nInitialTone) * (1 - delta) * expansionDir);\n      // Initial and adjusted tones for `farther`\n      double fInitialTone = farther.tone.apply(scheme);\n      @Var\n      double fTone =\n          0.5 * (fInitialTone + (fContrast - fInitialTone) * (1 + delta) * expansionDir);\n\n      // 2nd round: solve to max, each\n      double nContrast2 = nearer.contrastCurve.getContrast(scheme.contrastLevel);\n      double fContrast2 =", "first_line_groundtruth": "Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast", "first_line_prediction": "0.5 * (nInitialTone + (nContrast - nInitialTone) * (1 - delta) * expansionDir);", "match": 0}
{"groundtruth": "ColorUtils.blueFromArgb(pixel);", "prediction": " ColorUtils.blueFromArgb(pixel);\n      int index = getIndex(red, green, blue);\n      weights[index] += count;\n      momentsR[index] += count * red;\n      momentsG[index] += count * green;\n      momentsB[index] += count * blue;\n      moments[index] += count;\n    }\n  }\n\n  void createMoments() {\n    for (int i = 0; i < TOTAL_SIZE; i++) {\n      momentsR[i] /= weights[i];\n      momentsG[i] /= weights[i];", "first_line_groundtruth": "ColorUtils.blueFromArgb(pixel);", "first_line_prediction": " ColorUtils.blueFromArgb(pixel);", "match": 0}
{"groundtruth": "Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {", "prediction": "decreasingContrast) {\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      } else {\n        answer = DynamicColor.backgroundTone(bgTone, desiredRatio);\n      }\n\n      return answer;\n    }\n  }\n\n  /** Returns the contrast curve for the color. */\n  @NonNull\n  public ContrastCurve getContrastCurve() {\n    return contrastCurve;\n  }\n\n  /** Returns the background color. */\n  @Nullable\n  public DynamicColor getBackground() {\n    return background;\n  }\n\n  /** Returns the foreground color. */\n  @Nullable\n  public DynamicColor getForeground() {\n    return foreground;", "first_line_groundtruth": "Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {", "first_line_prediction": "decreasingContrast) {", "match": 0}
{"groundtruth": "MathUtils.matrixMultiply(linrgb, SCALED_DISCOUNT_FROM_LINRGB);", "prediction": " {\n        linrgb[0] / 100.0,\n        linrgb[1] / 100.0,\n        linrgb[2] / 100.0,\n    };\n    double[] discount = new double[3];\n    for (int i = 0; i < 3; i++) {\n      discount[i] = scaledDiscount[i] * 0.950456;\n    }\n    double[] transformed = new double[3];\n    for (int i = 0; i < 3; i++) {\n      transformed[i]", "first_line_groundtruth": "MathUtils.matrixMultiply(linrgb, SCALED_DISCOUNT_FROM_LINRGB);", "first_line_prediction": " {", "match": 0}
{"groundtruth": "alpha = MathUtils.clampInt(0, 255, (int) Math.round(percentage * 255));", "prediction": "ialpha = (int) (255 * percentage);\n    return Color.argb(ialpha, Color.red(argb), Color.green(argb), Color.blue(argb));\n  }\n\n  /**\n    * Returns a HCT object.\n    *\n    * @param scheme Defines the conditions of the user interface, for example, whether or not it is\n    *     dark mode or light mode, and what the desired contrast level is.\n    */\n  @NonNull\n  public Hct getHct(@NonNull DynamicScheme scheme) {\n    TonalPalette palette = this.palette.apply(scheme", "first_line_groundtruth": "alpha = MathUtils.clampInt(0, 255, (int) Math.round(percentage * 255));", "first_line_prediction": "ialpha = (int) (255 * percentage);", "match": 0}
{"groundtruth": "fTone = MathUtils.clampDouble(0, 100, nTone + delta * expansionDir);", "prediction": " // If a color is good enough, it is not adjusted.\n         // Initial and adjusted tones for `farther`\n        double fInitialTone = farther.tone.apply(scheme);\n        @Var\n        double fTone =\n            Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n                 ? fInitialTone\n                 : DynamicColor.foregroundTone(bgTone, fContrast);\n        if ((fTone - nTone) * expansionDir < delta) {\n          // 3rd round: expand farther to match delta.\n          // If a color is good enough, it is not", "first_line_groundtruth": "fTone = MathUtils.clampDouble(0, 100, nTone + delta * expansionDir);", "first_line_prediction": " // If a color is good enough, it is not adjusted.", "match": 0}
{"groundtruth": "MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);", "prediction": " MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);\n        }\n      }\n\n      // If constraint is not satisfied, try another round.\n      if ((fTone - nTone) * expansionDir < delta) {\n        // 4th round: expand farther to match delta.\n        fTone = MathUtils.clampDouble(0, 100, nTone + delta * expansionDir);\n        // If constraint is not satisfied, try another round.\n        if ((fTone - nTone) * expansionDir < delta) {\n          // 5th round: contract", "first_line_groundtruth": "MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);", "first_line_prediction": " MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);", "match": 0}
{"groundtruth": "TonalPalette.fromInt(argb);", "prediction": " TonalPalette.fromHct(hct);\n    return new DynamicColor(\n        name,\n        palette,\n        hct.chroma,\n        /* isBackground= */ false,\n        /* background= */ null,\n        /* secondBackground= */ null,\n        /* contrastCurve= */ null,\n        /* toneDeltaPair= */ null);\n  }\n\n  /**\n    * Create a DynamicColor from a hex code.\n    *\n    * <p>Result has no background; thus no support for increasing/decreasing contrast for a11y.\n    *\n    * @param name The name of the dynamic color.\n    *", "first_line_groundtruth": "TonalPalette.fromInt(argb);", "first_line_prediction": " TonalPalette.fromHct(hct);", "match": 0}
{"groundtruth": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);", "prediction": " WebhookVerifier(WebhookSigner.gitHubSha1(secret), WebhookSigner.Encoder.BASE64);", "first_line_groundtruth": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);", "first_line_prediction": " WebhookVerifier(WebhookSigner.gitHubSha1(secret), WebhookSigner.Encoder.BASE64);", "match": 0}
{"groundtruth": "ResponseUtil.errorNotFound();", "prediction": " ResponseUtil.error(e.getMessage());\n        }\n    }\n\n    @GetMapping(value = \"/{transactionId}\")\n    public ResponseEntity<Map<String,Object>> getTransactionById(@RequestHeader(\"Authorization\") String authHeader,\n                                                                 @PathVariable(\"transactionId\") String transactionId) {\n\n        try {\n            //? Extract the token\n            String token = authHeader.substring(7);\n\n            //? Verify the JWT\n            FirebaseToken decodedToken = firebaseAuthService.verifyToken(token);\n\n            //? Get transaction by id\n            Transaction transaction = transactionService.getTransactionById(transactionId);\n\n            //? Return response\n            return Response", "first_line_groundtruth": "ResponseUtil.errorNotFound();", "first_line_prediction": " ResponseUtil.error(e.getMessage());", "match": 0}
{"groundtruth": "ResponseUtil.handleDashboardInfo(dashboardInfo);", "prediction": " ResponseUtil.buildResponse(HttpStatus.OK, dashboardInfo);\n        } catch (FirebaseAuthException e) {\n            return ResponseUtil.buildResponse(HttpStatus.UNAUTHORIZED, e.getMessage());\n        } catch (InterruptedException | ExecutionException | ParseException e) {\n            return ResponseUtil.buildResponse(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage());\n        }\n    }\n\n    @GetMapping(value=\"/month\")\n    public ResponseEntity<?> getDashBoardByMonth(@RequestHeader(\"Authorization\") String authHeader,\n                                                  @RequestParam(defaultValue = \"\", required = false) String creationDate,\n                                                  @RequestParam(defaultValue = \"\",required", "first_line_groundtruth": "ResponseUtil.handleDashboardInfo(dashboardInfo);", "first_line_prediction": " ResponseUtil.buildResponse(HttpStatus.OK, dashboardInfo);", "match": 0}
{"groundtruth": "if(TransactionUtil.isValidYear(creationYear)){", "prediction": " if(TransactionUtil.isValidYear(creationYear)) {\n            query = query\n                    .whereEqualTo(\"creationYear\",Integer.parseInt(creationYear));\n        }\n        //? Order by Creation date\n        else {\n            query = query.orderBy(\"creationDate\", Query.Direction.DESCENDING);\n        }\n\n        //? Get the data\n        QuerySnapshot querySnapshot = query.get().get();\n\n        //? Get the data\n        List<Transaction> transactions = querySnapshot.toObjects(Transaction.class);\n\n        //? Get the total amount\n        AtomicDouble totalAmount = new AtomicDouble(0.0);\n        transactions.forEach", "first_line_groundtruth": "if(TransactionUtil.isValidYear(creationYear)){", "first_line_prediction": " if(TransactionUtil.isValidYear(creationYear)) {", "match": 0}
{"groundtruth": "= DateUtil.getUnixTimeFromDate(startDate);", "prediction": " = DateUtil.convertDateToUnixTimeStamp(startDate);\n        String endUnixTimeStamp = DateUtil.convertDateToUnixTimeStamp(endDate);\n\n        //? Query By ProfileId\n        Query query = transactionCollectionRef.whereEqualTo(\"profileId\", profileId);\n\n        //? Check if Date was passed\n        if(DateUtil.isValidDate(startDate)){\n            query = query.whereGreaterThanOrEqualTo(\"creationDate\",startUnixTimeStamp);\n        }\n        //? Check if Date was passed\n        else if(DateUtil.isValidDate(endDate)){\n            query = query.whereLessThanOrEqualTo(\"creationDate\",endUnixTimeStamp);\n        }", "first_line_groundtruth": "= DateUtil.getUnixTimeFromDate(startDate);", "first_line_prediction": " = DateUtil.convertDateToUnixTimeStamp(startDate);", "match": 0}
{"groundtruth": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "prediction": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)){\n            System.out.println(\"Inside date\");\n            query = query.whereGreaterThanOrEqualTo(\"creationDate\",startDate).whereLessThanOrEqualTo(\"creationDate\",endDate);\n        }\n\n        //? Check if creationDate is passed and valid\n        else if(DateUtil.isValidDate(creationDate)){\n            System.out.println(\"Inside creation date\");\n            query = query.whereEqualTo(\"creationDate\",creationDate);\n        }\n\n        //? Check if creationMonth is passed and valid\n        else if(TransactionUtil.isValidMonth(creationMonth) &&", "first_line_groundtruth": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "first_line_prediction": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)){", "match": 0}
{"groundtruth": "(TransactionUtil.idValidAmount(amount)) {", "prediction": "(TransactionUtil.isValidAmount(amount)) {\n            timeQuery = timeQuery.whereEqualTo(\"amount\",amount);\n        }\n        else {\n            throw new NullPointerException(\"A valid amount must be passed\");\n        }\n\n        //? Check if type is passed and valid\n        if(TransactionUtil.isValidType(type)) {\n            timeQuery = timeQuery.whereEqualTo(\"type\",type);\n        }\n        else {\n            throw new NullPointerException(\"A valid type must be passed\");\n        }\n\n        //? Check if tag is passed and valid\n        if(TransactionUtil.isValidTag(tag)) {\n            timeQuery = timeQuery.where", "first_line_groundtruth": "(TransactionUtil.idValidAmount(amount)) {", "first_line_prediction": "(TransactionUtil.isValidAmount(amount)) {", "match": 0}
{"groundtruth": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "prediction": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)){\n            System.out.println(\"Inside date\");\n            query = query.whereGreaterThanOrEqualTo(\"creationDate\",startDate).whereLessThanOrEqualTo(\"creationDate\",endDate);\n        }\n\n        //? Check if creationDate is passed and valid\n        else if(DateUtil.isValidDate(creationDate)){\n            System.out.println(\"Inside creation date\");\n            query = query.whereEqualTo(\"creationDate\",creationDate);\n        }\n\n        //? Check if creationMonth and creationYear is passed and valid\n        else if(TransactionUtil.isValidMonth(creationMonth)", "first_line_groundtruth": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "first_line_prediction": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)){", "match": 0}
{"groundtruth": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate)){", "prediction": "(DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {\n                //? Get Dashboard By Date Range for a profile\n                Map<String,Object> dashboardInfo = dashboardService.getDashboardByDateRange(\n                        decodedToken.getUid(),\n                        startDate,\n                        endDate\n                );\n\n                //? Return response\n                return ResponseUtil.handleDashboardInfo(dashboardInfo);\n            } else {\n                return new ResponseEntity<>(\"Invalid Date Range!!\", HttpStatus.BAD_REQUEST);\n            }\n\n        } catch (FirebaseAuthException | ExecutionException | InterruptedException | ParseException e) {\n            System.out.println(\"Error:", "first_line_groundtruth": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate)){", "first_line_prediction": "(DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {", "match": 0}
{"groundtruth": "whereGreaterThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(startDate))\n                    .whereLessThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(endDate));", "prediction": "whereGreaterThanOrEqualTo(\"creationDate\",startDate).whereLessThanOrEqualTo(\"creationDate\",endDate);\n        }\n        else if(DateUtil.isValidDate(startDate) && !DateUtil.isValidDate(endDate)) {\n            query = query.whereGreaterThanOrEqualTo(\"creationDate\",startDate);\n        }\n        else if(!DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {\n            query = query.whereLessThanOrEqualTo(\"creationDate\",endDate);\n        }\n        else {\n            throw new NullPointerException(\"A valid start date and end date must be passed\");\n        }\n\n        //? Check if creationDate is passed\n       ", "first_line_groundtruth": "whereGreaterThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(startDate))", "first_line_prediction": "whereGreaterThanOrEqualTo(\"creationDate\",startDate).whereLessThanOrEqualTo(\"creationDate\",endDate);", "match": 0}
{"groundtruth": "&& TransactionUtil.isValidYear(creationYear)) {", "prediction": " && creationYear != null){\n            query = query.whereEqualTo(\"creationMonth\",creationMonth).whereEqualTo(\"creationYear\",creationYear);\n        }\n        //? Check if month was passed -> year\n        else if(TransactionUtil.isValidMonth(creationMonth)  && creationYear == null){\n            query = query.whereEqualTo(\"creationMonth\",creationMonth);\n        }\n        //? Check if year was passed\n        else if(creationYear != null){\n            query = query.whereEqualTo(\"creationYear\",creationYear);\n        }\n\n        //? Get the data\n        QuerySnapshot querySnapshot = query.get().get();", "first_line_groundtruth": "&& TransactionUtil.isValidYear(creationYear)) {", "first_line_prediction": " && creationYear != null){", "match": 0}
{"groundtruth": "ResponseUtil.errorLimitExceeded();", "prediction": " ResponseUtil.badRequest(\"Query limit exceeds\");\n\n        //? Check if user is authenticated\n        FirebaseToken decodedToken = null;\n        try {\n            decodedToken = firebaseAuthService.verifyToken(authHeader);\n        } catch (FirebaseAuthException e) {\n            return ResponseUtil.unauthorized(\"Unauthorized\");\n        }\n\n        //? Get user id\n        String userId = decodedToken.getUid();\n\n        //? Get all transactions\n        List<Transaction> transactions = null;\n        try {\n            transactions = transactionService.getAllTransactions(userId, limit);\n        } catch (InterruptedException | ExecutionException e) {\n            return ResponseUtil.", "first_line_groundtruth": "ResponseUtil.errorLimitExceeded();", "first_line_prediction": " ResponseUtil.badRequest(\"Query limit exceeds\");", "match": 0}
{"groundtruth": "(TransactionUtil.idValidAmount(transactionAmount)) {", "prediction": " (TransactionUtil.idValidAmount(transactionAmount)) {\n            query = query.whereEqualTo(\"transactionAmount\", Double.parseDouble(transactionAmount));\n        }\n        else {\n            throw new NullPointerException(\"A valid start/end amount must be passed\");\n        }\n        System.out.println(\"End of build query by amount range\");\n        return query;\n    }", "first_line_groundtruth": "(TransactionUtil.idValidAmount(transactionAmount)) {", "first_line_prediction": " (TransactionUtil.idValidAmount(transactionAmount)) {", "match": 0}
{"groundtruth": "DateUtil.isValidDate(endDate)){", "prediction": "DateUtil.isValidDate(endDate)) {\n                return new ResponseEntity<>(\"Invalid Date Range!!\", HttpStatus.BAD_REQUEST);\n            }\n\n            //? Get Dashboard By Date Range for a profile\n            Map<String,Object> dashboardInfo = dashboardService.getDashboardByDateRange(\n                    decodedToken.getUid(),\n                    startDate,\n                    endDate\n            );\n\n            //? Return response\n            return ResponseUtil.handleDashboardInfo(dashboardInfo);\n\n        } catch (FirebaseAuthException | ExecutionException | InterruptedException | ParseException e) {\n            System.out.println(\"Error: \"+e);\n            return new ResponseEntity<>(\"Unauthenticated!! Invalid token", "first_line_groundtruth": "DateUtil.isValidDate(endDate)){", "first_line_prediction": "DateUtil.isValidDate(endDate)) {", "match": 0}
{"groundtruth": "ResponseUtil.errorParsingEntity(\"Required Date must be passed in query and should be in dd-MM-yyyy format\");", "prediction": " new ResponseEntity<>(\"Invalid Date Range!!\",HttpStatus.BAD_REQUEST);\n            }\n\n            //? Get Dashboard By Date Range for a profile\n            Map<String,Object> dashboardInfo = dashboardService.getDashboardByDateRange(\n                    decodedToken.getUid(),\n                    startDate,\n                    endDate\n            );\n\n            //? Return response\n            return ResponseUtil.handleDashboardInfo(dashboardInfo);\n\n        } catch (FirebaseAuthException | ExecutionException | InterruptedException | ParseException e) {\n            System.out.println(\"Error: \"+e);\n            return new ResponseEntity<>(\"Unauthenticated!! Invalid token\", HttpStatus.UNAUTHORIZED);\n        }\n    }", "first_line_groundtruth": "ResponseUtil.errorParsingEntity(\"Required Date must be passed in query and should be in dd-MM-yyyy format\");", "first_line_prediction": " new ResponseEntity<>(\"Invalid Date Range!!\",HttpStatus.BAD_REQUEST);", "match": 0}
{"groundtruth": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");", "prediction": " return ResponseUtil.errorBadRequest();\n            }\n\n            //? Check if valid amount\n            if (!TransactionUtil.isValidAmount(transaction.getAmount())) {\n                return ResponseUtil.errorBadRequest();\n            }\n\n            //? Check if valid type\n            if (!TransactionUtil.isValidType(transaction.getType())) {\n                return ResponseUtil.errorBadRequest();\n            }\n\n            //? Check if valid tag\n            if (!TransactionUtil.isValidTag(transaction.getTag())) {\n                return ResponseUtil.errorBadRequest();\n            }\n\n            //? Check if valid remarks\n            if (!TransactionUtil.isValidRemarks(transaction.getRemarks())) {", "first_line_groundtruth": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");", "first_line_prediction": " return ResponseUtil.errorBadRequest();", "match": 0}
{"groundtruth": "(this.isNumber() && other.isNumber()) {", "prediction": " (this.equals(other)) {\n            result = Value.TRUE;\n        }\n        return result;\n    }", "first_line_groundtruth": "(this.isNumber() && other.isNumber()) {", "first_line_prediction": " (this.equals(other)) {", "match": 0}
{"groundtruth": "other.assertNumber();", "prediction": " if (other.isNumber()) {\n            return Value.of(action.apply(this.asInteger(), other.asInteger()));\n         }\n         throw new WrongTypeException(\n             \"Couldn't evaluate numeric expression '%s' \u2013 not a number\"\n                 .formatted(this.value)\n         );\n    }", "first_line_groundtruth": "other.assertNumber();", "first_line_prediction": " if (other.isNumber()) {", "match": 0}
{"groundtruth": "ResponseUtil.errorUnauthorized();", "prediction": " ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");\n        }\n    }\n\n    @PutMapping(value = \"/update\")\n    public ResponseEntity<Map<String,Object>> updateTransaction(@RequestHeader(\"Authorization\") String authHeader,\n                                                @RequestBody Transaction transaction) {\n        try {\n            //? Extract the token\n            String token = authHeader.substring(7);\n\n            //? Verify the JWT\n            FirebaseToken decodedToken = firebaseAuthService.verifyToken(token);\n\n            //? Check if valid date format\n            if (!DateUtil.isValidDate(transaction.getCreationDate())) {", "first_line_groundtruth": "ResponseUtil.errorUnauthorized();", "first_line_prediction": " ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");", "match": 0}
{"groundtruth": "userDetail.getAuthorities());", "prediction": " AuthorityUtils.commaSeparatedStringToAuthorityList(userDetail.getAuthorities()));\n        return Jwts.builder()\n                .setClaims(claims)\n                .signWith(SignatureAlgorithm.HS512, SECRET)\n                .setExpiration(new Date(System.currentTimeMillis() + EXPIRE_TIME))\n                .compact();\n    }\n\n    /**\n     * \u89e3\u6790\u4ee4\u724c\n     *\n     * @param token \u4ee4\u724c\n     * @return \u89e3\u6790\u540e\u7684\u7528\u6237\u4fe1\u606f\n     */\n    public static Claims getClaims(String token) {\n        Claims claims = null;\n        try {\n            claims =", "first_line_groundtruth": "userDetail.getAuthorities());", "first_line_prediction": " AuthorityUtils.commaSeparatedStringToAuthorityList(userDetail.getAuthorities()));", "match": 0}
{"groundtruth": "return ResponseUtil.successAddOne();", "prediction": " return ResponseUtil.successPostOne(transaction);\n\n        } catch (FirebaseAuthException | ExecutionException | InterruptedException | ParseException e) {\n            return ResponseUtil.errorNotFound();\n        }\n    }", "first_line_groundtruth": "return ResponseUtil.successAddOne();", "first_line_prediction": " return ResponseUtil.successPostOne(transaction);", "match": 0}
{"groundtruth": "getSourceIndex(), body.getDestinationIndex());", "prediction": "getGameId());", "first_line_groundtruth": "getSourceIndex(), body.getDestinationIndex());", "first_line_prediction": "getGameId());", "match": 0}
{"groundtruth": "body.getSourceIndex(), body.getDestinationIndex());", "prediction": " body.getGameId());", "first_line_groundtruth": "body.getSourceIndex(), body.getDestinationIndex());", "first_line_prediction": " body.getGameId());", "match": 0}
{"groundtruth": "DeluxeMenuCommand> command = parser.parse(commandArgs);", "prediction": "DeluxeMenuCommand> command = parser.parse(commandArgs);\n        if (command.isEmpty()) {\n            logger.warn(\"Could not parse command '\" + commandType + \"' in input '\" + input + \"'\");\n            return Optional.empty();\n        }\n\n        if (decorators != null) {\n            for (var decorator : decorators.split(\" \")) {\n                var decoratorMatcher = DECORATOR_ARG_LOCATOR.matcher(decorator);\n                if (!decoratorMatcher.find()) {\n                    logger.warn(\"Could not find decorator argument in input '\" + input + \"'\");\n                    return Optional.empty();\n                }\n\n                var decorator", "first_line_groundtruth": "DeluxeMenuCommand> command = parser.parse(commandArgs);", "first_line_prediction": "DeluxeMenuCommand> command = parser.parse(commandArgs);", "match": 1}
{"groundtruth": "= helixWrapper.fetchChatters(channelId, accessToken);", "prediction": " = helixWrapper.getChatters(channelId, accessToken);\n    return mapToUsers(vips);\n  }\n\n  public Set<UserDto> getModerators(String channelId, String accessToken) {\n    Set<Moderator> moderators = helixWrapper.getModerators(channelId, accessToken);\n    return mapToUsers(moderators);\n  }\n\n  public Set<UserDto> getVips(String channelId, String accessToken) {\n    Set<ChannelVip> vips = helixWrapper.getVips(channelId, accessToken);\n    return mapToUsers(vips);\n  }", "first_line_groundtruth": "= helixWrapper.fetchChatters(channelId, accessToken);", "first_line_prediction": " = helixWrapper.getChatters(channelId, accessToken);", "match": 0}
{"groundtruth": "channel.isAccessTokenExpired()) {", "prediction": "channel.getAccessToken() != null) {\n      return channel.getAccessToken();\n    }\n\n    OAuth2Credential credential = identityProvider.getAccessToken(channelId);\n    channel.setAccessToken(credential.getAccessToken());\n    channelRepository.save(channel);\n    return credential.getAccessToken();\n  }\n\n  public List<Channel> getChannels(String accessToken) throws InvalidTokenRequestException {\n    List<Channel> channels = new ArrayList<>();\n    try {\n      identityProvider.getIdentity(accessToken);\n    } catch (Exception e) {\n      throw new InvalidTokenRequestException(\"invalid token\");\n    }\n\n    identityProvider.getScopes(accessToken).", "first_line_groundtruth": "channel.isAccessTokenExpired()) {", "first_line_prediction": "channel.getAccessToken() != null) {", "match": 0}
{"groundtruth": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);", "prediction": "Moderator> moderators = helixWrapper.fetchModerators(channelId, accessToken);\n    return mapToUsers(moderators);\n  }\n\n  public Set<UserDto> getVips(String channelId, String accessToken) {\n    Set<ChannelVip> vips = helixWrapper.fetchVips(channelId, accessToken);\n    return mapToUsers(vips);\n  }", "first_line_groundtruth": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);", "first_line_prediction": "Moderator> moderators = helixWrapper.fetchModerators(channelId, accessToken);", "match": 0}
{"groundtruth": "channel.getScopeNames());", "prediction": "0);\n\n    OAuth2Credential credential =\n        identityProvider.refreshCredential(channelCredential, channel.getScopes());\n\n    channel.setAccessToken(credential.getToken());\n    channel.setRefreshToken(credential.getRefreshToken());\n    channelRepository.save(channel);\n  }", "first_line_groundtruth": "channel.getScopeNames());", "first_line_prediction": "0);", "match": 0}
{"groundtruth": "sum += x.getSubTotal();", "prediction": "\tsum += x.getPrice() * x.getQuantity();\n\t\t}\n\t\treturn sum;", "first_line_groundtruth": "sum += x.getSubTotal();", "first_line_prediction": "\tsum += x.getPrice() * x.getQuantity();", "match": 0}
{"groundtruth": "setDescription(game.getDescription());", "prediction": "setGameName(game.getGameName());\n                updateToGame.setGameDescription(game.getGameDescription());\n                updateToGame.setGameImage(game.getGameImage());\n                updateToGame.setGamePrice(game.getGamePrice());\n                updateToGame.setGameGenre(game.getGameGenre());\n                updateToGame.setGamePlatform(game.getGamePlatform());\n                updateToGame.setGameDeveloper(game.getGameDeveloper());\n                updateToGame.setGamePublisher(game.getGamePublisher());\n                updateToGame.setGameReleaseDate(game.get", "first_line_groundtruth": "setDescription(game.getDescription());", "first_line_prediction": "setGameName(game.getGameName());", "match": 0}
{"groundtruth": "setId(game.getId());", "prediction": "setGameName(game.getGameName());\n                updateToGame.setGameDescription(game.getGameDescription());\n                updateToGame.setGamePrice(game.getGamePrice());\n                updateToGame.setGameImage(game.getGameImage());\n                updateToGame.setGameGenre(game.getGameGenre());\n                updateToGame.setGamePlatform(game.getGamePlatform());\n                updateToGame.setGameDeveloper(game.getGameDeveloper());\n                updateToGame.setGamePublisher(game.getGamePublisher());\n                updateToGame.setGameReleaseDate(game.get", "first_line_groundtruth": "setId(game.getId());", "first_line_prediction": "setGameName(game.getGameName());", "match": 0}
{"groundtruth": "(game.getId() == id){", "prediction": "(game.getId() == id){\n                games.remove(game);\n                System.out.println(\"Game deleted\");\n                break;\n            }\n        }\n    }\n\n    @Override\n    public List<Game> getAllGames() {\n        return games;\n    }\n\n    @Override\n    public Game getGameById(int id) {\n        for (Game game : games) {\n            if(game.getId() == id){\n                return game;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public void updateGame(Game game) {\n        for (Game game1 : games) {\n            if(game1", "first_line_groundtruth": "(game.getId() == id){", "first_line_prediction": "(game.getId() == id){", "match": 1}
{"groundtruth": "game.setCountOwner(game.getCountOwner() + 1);", "prediction": " System.out.println(\"Game \" + game.getName() + \" not sold to \" + customer.getName());\n        }\n    }", "first_line_groundtruth": "game.setCountOwner(game.getCountOwner() + 1);", "first_line_prediction": " System.out.println(\"Game \" + game.getName() + \" not sold to \" + customer.getName());", "match": 0}
{"groundtruth": "(!(customer.getGames().contains(game))){", "prediction": "(game.getCountOwner()==campaignService.getCampaigns().size()){\n            game.setCountOwner(0);\n            game.setCost(game.getCost()+(game.getCost()*campaignService.getCampaigns().get(0).getDiscountAmount()/100));\n            System.out.println(\"New Cost \"+ game.getName()+\" is \"+game.getCost());\n            System.out.println(\"Game \" + game.getName() + \" sold to \" + customer.getName());\n            customer.addGame(game);\n        }\n    }", "first_line_groundtruth": "(!(customer.getGames().contains(game))){", "first_line_prediction": "(game.getCountOwner()==campaignService.getCampaigns().size()){", "match": 0}
{"groundtruth": ".equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {", "prediction": " == customer.getSurName() &&\n                    customer2.getPhone() == customer.getPhone() &&\n                    customer2.getAge() == customer.getAge()) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": ".equals(customer.getSurName()) &&", "first_line_prediction": " == customer.getSurName() &&", "match": 0}
{"groundtruth": "(game1.getId()==id){", "prediction": "(game1.getId() == id){\n                updateToGame = game1;\n                updateToGame.setGameName(game.getGameName());\n                updateToGame.setGameDescription(game.getGameDescription());\n                updateToGame.setGamePrice(game.getGamePrice());\n                updateToGame.setGameImage(game.getGameImage());\n                updateToGame.setGameGenre(game.getGameGenre());\n                updateToGame.setGamePlatform(game.getGamePlatform());\n                updateToGame.setGameDeveloper(game.getGameDeveloper());\n                updateToGame.set", "first_line_groundtruth": "(game1.getId()==id){", "first_line_prediction": "(game1.getId() == id){", "match": 0}
{"groundtruth": "customer2.getSurName().equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {", "prediction": " customer2.getSurname().equals(customer.getSurname()) &&\n                     customer2.getPhone().equals(customer.getPhone())) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": "customer2.getSurName().equals(customer.getSurName()) &&", "first_line_prediction": " customer2.getSurname().equals(customer.getSurname()) &&", "match": 0}
{"groundtruth": ") == customer.getBirthYear()) {", "prediction": "customer.getBirthYear())) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": ") == customer.getBirthYear()) {", "first_line_prediction": "customer.getBirthYear())) {", "match": 0}
{"groundtruth": "customer2.getBirthYear() == customer.getBirthYear()) {", "prediction": " customer2.getPhone().equals(customer.getPhone())) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": "customer2.getBirthYear() == customer.getBirthYear()) {", "first_line_prediction": " customer2.getPhone().equals(customer.getPhone())) {", "match": 0}
{"groundtruth": ".getName() + \" sold to \" + customer.getName()+\" cost: \"+game.getCost());", "prediction": ".getName() + \" sold to \" + customer.getName());\n        }\n    }", "first_line_groundtruth": ".getName() + \" sold to \" + customer.getName()+\" cost: \"+game.getCost());", "first_line_prediction": ".getName() + \" sold to \" + customer.getName());", "match": 0}
{"groundtruth": "p1.getCategories().add(cat2);", "prediction": "\n\t\tUser user = new User(null, \"admin\", \"admin\", \"<EMAIL>\", \"123456\", \"admin\", \"admin\", Instant.now(), Instant.now());\n\t\tuserRepository.save(user);\n\t\t\n\t\tOrder order = new Order(null, user, OrderStatus.PENDING, Instant.now());\n\t\torderRepository.save(order);\n\t\t\n\t\tOrderItem orderItem = new OrderItem(null, order, p1, 1, 10.0, 10.0);\n\t\torderItemRepository.save(orderItem);\n\t\t\n\t\tPayment payment", "first_line_groundtruth": "p1.getCategories().add(cat2);", "first_line_prediction": "", "match": 0}
{"groundtruth": "setDiscountAmount(campaign.getDiscountAmount());", "prediction": "setPrice(campaign.getPrice());\n                updateToCampaign.setStartDate(campaign.getStartDate());\n                updateToCampaign.setEndDate(campaign.getEndDate());\n                updateToCampaign.setGame(campaign.getGames().get(id));\n                updateToCampaign.setPrice(campaign.getPrice());\n                updateToCampaign.setStartDate(campaign.getStartDate());\n                updateToCampaign.setEndDate(campaign.getEndDate());\n                System.out.println(\"Campaign updated\");\n            }\n        }\n    }\n\n    @Override\n    public List<Campaign> getAllCampaigns() {\n        return campaigns;\n    }\n\n   ", "first_line_groundtruth": "setDiscountAmount(campaign.getDiscountAmount());", "first_line_prediction": "setPrice(campaign.getPrice());", "match": 0}
{"groundtruth": "()+\" cost: \"+game.getCost());", "prediction": "());\n        }\n    }", "first_line_groundtruth": "()+\" cost: \"+game.getCost());", "first_line_prediction": "());", "match": 0}
{"groundtruth": "(campaign1.getId()==id){", "prediction": "(campaign1.getId() == id){\n                updateToCampaign = campaign1;\n            }\n        }\n        if(updateToCampaign != null){\n            updateToCampaign.setName(campaign.getName());\n            updateToCampaign.setDescription(campaign.getDescription());\n            updateToCampaign.setStartDate(campaign.getStartDate());\n            updateToCampaign.setEndDate(campaign.getEndDate());\n            updateToCampaign.setBudget(campaign.getBudget());\n            updateToCampaign.setGoal(campaign.getGoal());\n            updateToCampaign.setGoalReached(campaign.getGoalReached());\n            updateToCampaign.setGoalReachedPercentage", "first_line_groundtruth": "(campaign1.getId()==id){", "first_line_prediction": "(campaign1.getId() == id){", "match": 0}
{"groundtruth": "(campaign.getGames().get(id));", "prediction": "(campaign.getGame());\n                updateToCampaign.setPrice(campaign.getPrice());\n                updateToCampaign.setStartDate(campaign.getStartDate());\n                updateToCampaign.setEndDate(campaign.getEndDate());\n                updateToCampaign.setPlatform(campaign.getPlatform());\n                updateToCampaign.setGenre(campaign.getGenre());\n                updateToCampaign.setPublisher(campaign.getPublisher());\n                updateToCampaign.setDeveloper(campaign.getDeveloper());\n                updateToCampaign.setPublisher(campaign.getPublisher());\n                updateToCampaign.setDeveloper(campaign.getDeveloper());\n                updateToCampaign.", "first_line_groundtruth": "(campaign.getGames().get(id));", "first_line_prediction": "(campaign.getGame());", "match": 0}
{"groundtruth": "p2.getCategories().add(cat3);", "prediction": "", "first_line_groundtruth": "p2.getCategories().add(cat3);", "first_line_prediction": "", "match": 0}
{"groundtruth": "System.out.println(user2.getName() +\" is updated to \" + customer.getName());", "prediction": " userToUpdate = user2;\n            }\n        }\n        if (userToUpdate != null) {\n            userToUpdate.setFirstName(customer.getFirstName());\n            userToUpdate.setLastName(customer.getLastName());\n            userToUpdate.setEmail(customer.getEmail());\n            userToUpdate.setPhone(customer.getPhone());\n            System.out.println(\"User: \" + id + \" is updated.\");\n        } else {\n            System.out.println(\"User: \" + id + \" is not in database.\");\n        }\n    }", "first_line_groundtruth": "System.out.println(user2.getName() +\" is updated to \" + customer.getName());", "first_line_prediction": " userToUpdate = user2;", "match": 0}
{"groundtruth": ".out.println(user2.getName() +\" is updated to \" + customer.getName());", "prediction": ".out.println(\"User: \" + user2.getId() + \" is updated.\");\n                userToUpdate = user2;\n                break;\n            }\n        }\n        if (userToUpdate == null) {\n            System.out.println(\"User: \" + id + \" is not in database.\");\n        } else {\n            userToUpdate.setFirstName(customer.getFirstName());\n            userToUpdate.setLastName(customer.getLastName());\n            userToUpdate.setEmail(customer.getEmail());\n            userToUpdate.setPhone(customer.getPhone());\n            userToUpdate.setAddress(customer.getAddress());\n            userToUpdate.set", "first_line_groundtruth": ".out.println(user2.getName() +\" is updated to \" + customer.getName());", "first_line_prediction": ".out.println(\"User: \" + user2.getId() + \" is updated.\");", "match": 0}
{"groundtruth": "p3.getCategories().add(cat3);", "prediction": "", "first_line_groundtruth": "p3.getCategories().add(cat3);", "first_line_prediction": "", "match": 0}
{"groundtruth": "p4.getCategories().add(cat3);", "prediction": "", "first_line_groundtruth": "p4.getCategories().add(cat3);", "first_line_prediction": "", "match": 0}
{"groundtruth": ", p1.getPrice());", "prediction": ");\n\t\tOrderItem oi2 = new OrderItem(o1, p2, 1);\n\t\tOrderItem oi3 = new OrderItem(o1, p3, 1);\n\t\tOrderItem oi4 = new OrderItem(o1, p4, 1);\n\t\tOrderItem oi5 = new OrderItem(o1, p5, 1);", "first_line_groundtruth": ", p1.getPrice());", "first_line_prediction": ");", "match": 0}
{"groundtruth": "setSurName(customer.getSurName());", "prediction": "setPhone(customer.getPhone());\n                break;\n            }\n        }\n        if (userToUpdate == null) {\n            System.out.println(\"User is not in database.\");\n        }\n    }", "first_line_groundtruth": "setSurName(customer.getSurName());", "first_line_prediction": "setPhone(customer.getPhone());", "match": 0}
{"groundtruth": "2, p5.getPrice());", "prediction": "1, p5.getPrice());", "first_line_groundtruth": "2, p5.getPrice());", "first_line_prediction": "1, p5.getPrice());", "match": 0}
{"groundtruth": "userToUpdate.setBirthYear(customer.getBirthYear());", "prediction": " break;\n            }\n        }\n        if (userToUpdate == null) {\n            System.out.println(\"User is not in database.\");\n        }\n    }", "first_line_groundtruth": "userToUpdate.setBirthYear(customer.getBirthYear());", "first_line_prediction": " break;", "match": 0}
{"groundtruth": "setTc(customer.getTc());", "prediction": "setBirthMonth(customer.getBirthMonth());\n                userToUpdate.setBirthDay(customer.getBirthDay());\n                userToUpdate.setGender(customer.getGender());\n                userToUpdate.setAddress(customer.getAddress());\n                userToUpdate.setPhoneNumber(customer.getPhoneNumber());\n                userToUpdate.setCreditCardNumber(customer.getCreditCardNumber());\n                userToUpdate.setCreditCardCVV(customer.getCreditCardCVV());\n                userToUpdate.setCreditCardExpirationDate(customer.getCreditCardExpirationDate());\n                break;\n            }\n        }\n        if (userToUpdate == null) {\n            System.out", "first_line_groundtruth": "setTc(customer.getTc());", "first_line_prediction": "setBirthMonth(customer.getBirthMonth());", "match": 0}
{"groundtruth": ", p3, 2, p3.getPrice());", "prediction": ", p2, 1, p2.getPrice());\n\t\tOrderItem oi4 = new OrderItem(o2, p4, 1, p4.getPrice());\n\t\tOrderItem oi5 = new OrderItem(o3, p5, 1, p5.getPrice());", "first_line_groundtruth": ", p3, 2, p3.getPrice());", "first_line_prediction": ", p2, 1, p2.getPrice());", "match": 0}
{"groundtruth": "p5.getCategories().add(cat2);", "prediction": "", "first_line_groundtruth": "p5.getCategories().add(cat2);", "first_line_prediction": "", "match": 0}
{"groundtruth": "(ClientCommandInternals.executeCommand(command)) {", "prediction": " (ClientCommandInternals.isCommandForged(command)) {\n            cir.setReturnValue(true);\n        }\n    }\n\n    @Inject(method = \"sendChatMessage(Lnet/minecraft/text/Text;)V\", at = @At(\"HEAD\"))\n    private void onSendChatMessage(Text message, CallbackInfo ci) {\n        ClientCommandInternals.onChatMessage(message);\n    }", "first_line_groundtruth": "(ClientCommandInternals.executeCommand(command)) {", "first_line_prediction": " (ClientCommandInternals.isCommandForged(command)) {", "match": 0}
{"groundtruth": "ClientCommandInternals.finalizeInit();", "prediction": "\n    \tdispatcher.execute(commandSource, packet.command());\n    }\n\n    @Inject(method = \"onCommandTree\", at = @At(\"RETURN\"))\n    private void onCommandTree(CommandTreeS2CPacket packet, CallbackInfo info) {\n        ClientCommandInternals.setActiveDispatcher(commandDispatcher);\n    }", "first_line_groundtruth": "ClientCommandInternals.finalizeInit();", "first_line_prediction": "", "match": 0}
{"groundtruth": "ClientCommandInternals.getActiveDispatcher();", "prediction": " ClientCommandInternals.getActiveDispatcher();\n    }\n\n    /**\n     * Creates a literal command node.\n     *\n     * <p>The literal command node is a command that can be executed by the client.\n     *\n     * <p>The literal command node is a command that can be executed by the client.\n     *\n     * <p>The literal command node is a command that can be executed by the client.\n     *\n     * <p>The literal command node is a command that can be executed by the client.\n     *\n     * <p>The literal command node is a command that can be executed by the client", "first_line_groundtruth": "ClientCommandInternals.getActiveDispatcher();", "first_line_prediction": " ClientCommandInternals.getActiveDispatcher();", "match": 0}
{"groundtruth": "activeDispatcher.register(ClientCommandManager.literal(API_COMMAND_NAME).then(help));", "prediction": " activeDispatcher.getRoot();\n            mainNode.addChild(help.build());\n\n            activeDispatcher.findAmbiguities(AmbiguityConsumer.ignore());\n        }\n    }\n\n    private static int executeRootHelp(CommandContext<FabricClientCommandSource> context) {\n        List<String> children = Iterables.transform(activeDispatcher.getRoot().getChildren(), CommandNode::getName);\n        context.getSource().sendFeedback(Text.join(children, \"\\n\"), false);\n        return 1;\n    }\n\n    private static int executeArgumentHelp(CommandContext<FabricClientCommandSource> context) {\n        String command = context.", "first_line_groundtruth": "activeDispatcher.register(ClientCommandManager.literal(API_COMMAND_NAME).then(help));", "first_line_prediction": " activeDispatcher.getRoot();", "match": 0}
{"groundtruth": "register(ClientCommandManager.literal(SHORT_API_COMMAND_NAME).redirect(mainNode));", "prediction": "findAmbiguities(mainNode, (AmbiguityConsumer<FabricClientCommandSource>) (context, builder) -> {\n                List<ParsedCommandNode<FabricClientCommandSource>> nodes = builder.build();\n                if (nodes.size() > 1) {\n                    context.getSource().sendError(Text.translatable(\"command.dispatcher.ambiguity\", Iterables.getLast(nodes).getCommand()));\n                }\n            });\n        }\n    }\n\n    private static int executeRootHelp(CommandContext<FabricClientCommandSource> context) {\n        context.getSource().sendFeedback(Text.translatable(\"command.help", "first_line_groundtruth": "register(ClientCommandManager.literal(SHORT_API_COMMAND_NAME).redirect(mainNode));", "first_line_prediction": "findAmbiguities(mainNode, (AmbiguityConsumer<FabricClientCommandSource>) (context, builder) -> {", "match": 0}
{"groundtruth": "LiteralArgumentBuilder<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\");", "prediction": " // registered.\n            CommandDispatcher<FabricClientCommandSource> dispatcher = activeDispatcher;\n            CommandNode<FabricClientCommandSource> root = dispatcher.getRoot();\n            CommandNode<FabricClientCommandSource> apiCommand = root.addChild(API_COMMAND_NAME, LiteralArgumentBuilder.<FabricClientCommandSource>literal(API_COMMAND_NAME).build());\n            CommandNode<FabricClientCommandSource> shortApiCommand = root.addChild(SHORT_API_COMMAND_NAME, LiteralArgumentBuilder.<FabricClientCommandSource>literal(SHORT_API_COMMAND_NAME).build());\n\n            // Register the API command as the default", "first_line_groundtruth": "LiteralArgumentBuilder<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\");", "first_line_prediction": " // registered.", "match": 0}
{"groundtruth": "HelpCommandAccessor.getFailedException().create();", "prediction": " CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand();\n        }\n\n        ParsedCommandNode<FabricClientCommandSource> node = nodes.get(0);\n        return executeHelp(node, context);\n    }\n\n    private static int executeHelp(CommandNode<FabricClientCommandSource> node, CommandContext<FabricClientCommandSource> context) {\n        HelpCommandAccessor helpAccessor = (HelpCommandAccessor) node;\n        List<Text> text = helpAccessor.getHelpText(context.getSource());\n\n        if (text.isEmpty()) {\n            context.getSource().sendError(Texts.toText(\"", "first_line_groundtruth": "HelpCommandAccessor.getFailedException().create();", "first_line_prediction": " CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand();", "match": 0}
{"groundtruth": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");", "prediction": " + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\"));\n\t\t}\n\t\treturn stats.getModifier(stats.getIntelligence());", "first_line_groundtruth": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");", "first_line_prediction": " + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\"));", "match": 0}
{"groundtruth": "type.getSubRace();", "prediction": " type.getSubRace();", "first_line_groundtruth": "type.getSubRace();", "first_line_prediction": " type.getSubRace();", "match": 0}
{"groundtruth": "type.getSubRace()).containsKey(\"strength\")){", "prediction": "stats.getStrength()) > 0){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\tcase \"dexterity\":\n\t\t\t\tif (type.getAbilityScoreIncrease(stats.getDexterity()) > 0){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\tcase \"constitution\":\n\t\t\t\tif (type.getAbilityScoreIncrease(stats.getConstitution()) > 0){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn ", "first_line_groundtruth": "type.getSubRace()).containsKey(\"strength\")){", "first_line_prediction": "stats.getStrength()) > 0){", "match": 0}
{"groundtruth": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");", "prediction": "getModifier(stats.getStrength()) + type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn stats.getModifier(stats.getStrength());\n\t\t\t\t}\n\t\t\tcase \"dexterity\":\n\t\t\t\tif (type.getAbilityScoreIncrease(type.getSubRace()).containsKey(\"dexterity\")){\n\t\t\t\t\treturn stats.getModifier(stats.getDexterity()) + type.getAbilityScoreIncrease(type.getSubRace()).get(\"dexterity\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn stats.getModifier(stats", "first_line_groundtruth": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");", "first_line_prediction": "getModifier(stats.getStrength()) + type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");", "match": 0}
{"groundtruth": "type.getSpeed();", "prediction": "10 + stats.getModifier(stats.getDexterity());", "first_line_groundtruth": "type.getSpeed();", "first_line_prediction": "10 + stats.getModifier(stats.getDexterity());", "match": 0}
{"groundtruth": "stats.getModifier(stats.getCharisma());", "prediction": "0;\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}", "first_line_groundtruth": "stats.getModifier(stats.getCharisma());", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "stats.getModifier(stats.getStrength());", "prediction": "0;\n\t\t\tcase \"dexterity\":\n\t\t\t\tif (type.getAbilityScoreIncrease(type.getSubRace()).containsKey(\"dexterity\")){\n\t\t\t\t\treturn stats.getModifier(stats.getDexterity()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"dexterity\");\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\tcase \"constitution\":\n\t\t\t\tif (type.getAbilityScoreIncrease(type.getSubRace()).containsKey(\"constitution\")){\n\t\t\t\t\treturn stats.getModifier(stats.getConstitution()) + (int) type.getAbility", "first_line_groundtruth": "stats.getModifier(stats.getStrength());", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "return stats.getSavingThrow(stats.getStrength(), true);", "prediction": "\treturn stats.getModifier(stats.getStrength()) + (int) type.getSavingThrowIncrease(type.getSubRace()).get(\"strength\");\n\t\t\tcase \"dexterity\":\n\t\t\t\t\treturn stats.getModifier(stats.getDexterity()) + (int) type.getSavingThrowIncrease(type.getSubRace()).get(\"dexterity\");\n\t\t\tcase \"constitution\":\n\t\t\t\t\treturn stats.getModifier(stats.getConstitution()) + (int) type.getSavingThrowIncrease(type.getSubRace()).get(\"constitution\");\n\t\t\tcase \"intelligence\":\n\t\t\t\t\t", "first_line_groundtruth": "return stats.getSavingThrow(stats.getStrength(), true);", "first_line_prediction": "\treturn stats.getModifier(stats.getStrength()) + (int) type.getSavingThrowIncrease(type.getSubRace()).get(\"strength\");", "match": 0}
{"groundtruth": "stats.getCharisma(), false);", "prediction": "stats.getCharisma(), true);\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}", "first_line_groundtruth": "stats.getCharisma(), false);", "first_line_prediction": "stats.getCharisma(), true);", "match": 0}
{"groundtruth": "return stats.getSavingThrow(stats.getDexterity(), false);", "prediction": "\treturn stats.getSavingThrow(stats.getDexterity(), true);\n\t\t\tcase \"constitution\":\n\t\t\t\treturn stats.getSavingThrow(stats.getConstitution(), true);\n\t\t\tcase \"intelligence\":\n\t\t\t\treturn stats.getSavingThrow(stats.getIntelligence(), true);\n\t\t\tcase \"wisdom\":\n\t\t\t\treturn stats.getSavingThrow(stats.getWisdom(), true);\n\t\t\tcase \"charisma\":\n\t\t\t\treturn stats.getSavingThrow(stats.getCharisma(), true);\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}", "first_line_groundtruth": "return stats.getSavingThrow(stats.getDexterity(), false);", "first_line_prediction": "\treturn stats.getSavingThrow(stats.getDexterity(), true);", "match": 0}
{"groundtruth": "(stats.getIntelligence(), true);", "prediction": "(stats.getIntelligence(), false);\n\t\t\tcase \"wisdom\":\n\t\t\t\treturn stats.getSavingThrow(stats.getWisdom(), false);\n\t\t\tcase \"charisma\":\n\t\t\t\treturn stats.getSavingThrow(stats.getCharisma(), false);\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}", "first_line_groundtruth": "(stats.getIntelligence(), true);", "first_line_prediction": "(stats.getIntelligence(), false);", "match": 0}
{"groundtruth": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(command));", "prediction": "readResult, \"IsoDep select response: \" + Utils.bytesToHex(responseSelect));\n\n                // now we run the read command\n                command = readApdu();\n                byte[] responseRead = isoDep.transceive(command);\n                writeToUiAppend(readResult, \"IsoDep read response: \" + Utils.bytesToHex(responseRead));\n\n                // now we run the write command\n                command = writeApdu();\n                byte[] responseWrite = isoDep.transceive(command);\n                writeToUiAppend(readResult, \"IsoDep write response: \" + Utils.bytesToHex(responseWrite));", "first_line_groundtruth": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(command));", "first_line_prediction": "readResult, \"IsoDep select response: \" + Utils.bytesToHex(responseSelect));", "match": 0}
{"groundtruth": "writeToUiAppend(readResult, \"select CC: \" + Utils.bytesToHex(command));", "prediction": " //System.out.println(\"responseSelectCc: \" + Utils.bytesToHex(responseSelectCc));\n                writeToUiAppend(readResult, \"selectApdu with selectCapabilityContainer: \" + Utils.bytesToHex(command));\n                writeToUiAppend(readResult, \"selectApdu response: \" + Utils.bytesToHex(responseSelectCc));\n\n                if (responseSelectCc == null) {\n                    writeToUiAppend(readResult, \"selectApdu with selectCapabilityContainer fails (null)\");\n                } else {\n                    writeToUiAppend(readResult, \"responseSelectCc length: \" + responseSelect", "first_line_groundtruth": "writeToUiAppend(readResult, \"select CC: \" + Utils.bytesToHex(command));", "first_line_prediction": " //System.out.println(\"responseSelectCc: \" + Utils.bytesToHex(responseSelectCc));", "match": 0}
{"groundtruth": "readResult, \"selectApdu response: \" + Utils.bytesToHex(responseSelect));", "prediction": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(responseSelect));\n\n                // now we run the read command\n                command = readApdu();\n                responseSelect = isoDep.transceive(command);\n                writeToUiAppend(readResult, \"readApdu: \" + Utils.bytesToHex(command));\n                writeToUiAppend(readResult, \"readApdu: \" + Utils.bytesToHex(responseSelect));\n\n                // now we run the write command\n                command = writeApdu();\n                responseSelect = isoDep.transceive(command);\n                writeToUiAppend(", "first_line_groundtruth": "readResult, \"selectApdu response: \" + Utils.bytesToHex(responseSelect));", "first_line_prediction": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(responseSelect));", "match": 0}
{"groundtruth": "(\"sendBinaryFromCc response: \" + Utils.bytesToHex(responseSendBinaryFromCc));", "prediction": "(\"responseSendBinaryFromCc: \" + Utils.bytesToHex(responseSendBinaryFromCc));\n\n                if (!Utils.isSucceed(responseSendBinaryFromCc)) {\n                    writeToUiAppend(readResult, \"responseSendBinaryFromCc is not 90 00 - aborted\");\n                    System.out.println(\"responseSendBinaryFromCc is not 90 00 - aborted \");\n                    return;\n                }\n\n                // Sending ReadBinary from CC...\n                String sendBinareFromCc2 = \"00b000000f\";\n                command = Utils.hexStringToByteArray(", "first_line_groundtruth": "(\"sendBinaryFromCc response: \" + Utils.bytesToHex(responseSendBinaryFromCc));", "first_line_prediction": "(\"responseSendBinaryFromCc: \" + Utils.bytesToHex(responseSendBinaryFromCc));", "match": 0}
{"groundtruth": "System.out.println(\"capabilityContainerHeader: \" + Utils.bytesToHex(capabilityContainerHeader));", "prediction": " // Capability Container data:\n                byte[] capabilityContainerData = Arrays.copyOfRange(responseSendBinaryFromCc, responseSendBinaryFromCc.length - 2, responseSendBinaryFromCc.length);\n                writeToUiAppend(readResult, \"capabilityContainerData length: \" + capabilityContainerData.length + \" data: \" + Utils.bytesToHex(capabilityContainerData));\n\n                // Capability Container data:\n                byte[] capabilityContainerData2 = Arrays.copyOfRange(responseSendBinaryFromCc, responseSendBinaryFromCc.length - 2, responseSendBinaryFromCc.length);\n                writeToUi", "first_line_groundtruth": "System.out.println(\"capabilityContainerHeader: \" + Utils.bytesToHex(capabilityContainerHeader));", "first_line_prediction": " // Capability Container data:", "match": 0}
{"groundtruth": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));", "prediction": "(\"responseSelect length: \" + responseSelect.length + \" data: \" + Utils.bytesToHex(responseSelect));\n                    if (responseSelect.length == 2 && responseSelect[0] == 0x90 && responseSelect[1] == 0x00) {\n                        // now we run the read command\n                        command = readApdu();\n                        responseSelect = isoDep.transceive(command);\n                        writeToUiAppend(readResult, \"readApdu: \" + Utils.bytesToHex(command));\n                        writeToUiAppend(readResult, \"readApdu response: \" +", "first_line_groundtruth": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));", "first_line_prediction": "(\"responseSelect length: \" + responseSelect.length + \" data: \" + Utils.bytesToHex(responseSelect));", "match": 0}
{"groundtruth": ",\"ndefLen: \" + Utils.bytesToHex(ndefLen) + \" len (dec): \" + ndefLenInt);", "prediction": ", \"ndefLen: \" + Utils.bytesToHex(ndefLen));\n                writeToUiAppend(readResult, \"cmdLen: \" + Utils.bytesToHex(cmdLen));\n                writeToUiAppend(readResult, \"ndefLenInt: \" + ndefLenInt);\n                System.out.println(\"ndefLen: \" + Utils.bytesToHex(ndefLen));\n                System.out.println(\"cmdLen: \" + Utils.bytesToHex(cmdLen));\n                System.out.println(\"ndefLenInt: \" + ndefLenInt);\n\n                if (ndefLenInt > 0", "first_line_groundtruth": ",\"ndefLen: \" + Utils.bytesToHex(ndefLen) + \" len (dec): \" + ndefLenInt);", "first_line_prediction": ", \"ndefLen: \" + Utils.bytesToHex(ndefLen));", "match": 0}
{"groundtruth": "writeToUiAppend(readResult, \"responseSelect length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));", "prediction": " if (responseSelectCc == null) {\n                    writeToUiAppend(readResult, \"select CC fails (null)\");\n                } else {\n                    writeToUiAppend(readResult, \"responseSelectCc length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));\n                    System.out.println(\"responseSelectCc: \" + Utils.bytesToHex(responseSelectCc));\n                }\n\n                if (!Utils.isSucceed(responseSelectCc)) {\n                    writeToUiAppend(readResult, \"responseSelectCc is not 90 00 - aborted\");\n                   ", "first_line_groundtruth": "writeToUiAppend(readResult, \"responseSelect length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));", "first_line_prediction": " if (responseSelectCc == null) {", "match": 0}
{"groundtruth": "= \"00b000\" + Utils.bytesToHex(cmdLenNew);", "prediction": " = \"00b00000\" + ndefLenIntRequest;\n                command = Utils.hexStringToByteArray(sendReadBinaryNdefData);\n                byte[] responseSendBinaryNdefData = isoDep.transceive(command);\n                writeToUiAppend(readResult, \"sendBinaryNdefData: \" + Utils.bytesToHex(command));\n                writeToUiAppend(readResult, \"sendBinaryNdefData response: \" + Utils.bytesToHex(responseSendBinaryNdefData));\n                writeToUiAppend(readResult, \"sendBinaryNdefData response length: \" + response", "first_line_groundtruth": "= \"00b000\" + Utils.bytesToHex(cmdLenNew);", "first_line_prediction": " = \"00b00000\" + ndefLenIntRequest;", "match": 0}
{"groundtruth": "] cmdLenNew = Utils.convertIntToByteArray(ndefLenIntRequest, 2);", "prediction": " ] cmdLenNew = Utils.intToByteArray(ndefLenIntRequest);\n                byte[] cmdLenNew2 = Arrays.copyOfRange(cmdLenNew, 0, 2);\n                byte[] cmdLenNew3 = Arrays.copyOfRange(cmdLenNew, 2, cmdLenNew.length);\n                byte[] cmdLenNew4 = Arrays.copyOfRange(cmdLenNew, 4, cmdLenNew.length);\n                byte[] cmdLenNew5 = Arrays.copyOfRange(cmdLenNew, 6, cmdLenNew.length);\n                byte[] cmdLenNew6 = Arrays.copyOf", "first_line_groundtruth": "] cmdLenNew = Utils.convertIntToByteArray(ndefLenIntRequest, 2);", "first_line_prediction": " ] cmdLenNew = Utils.intToByteArray(ndefLenIntRequest);", "match": 0}
{"groundtruth": "writeToUiAppend(readResult,\"ndefLen new (dec): \" + ndefLenIntRequest + \" data: \" + Utils.bytesToHex(cmdLenNew) );", "prediction": " //byte[] cmdLenNew = Utils.hexStringToByteArray(sendReadBinaryNlen);\n                byte[] cmdLenNew = Arrays.copyOfRange(cmdLen, 0, 2);\n                cmdLenNew[0] = cmdLenNew[0] & 0x00;\n                cmdLenNew[1] = cmdLenNew[1] & 0x00;\n                cmdLenNew[1] = cmdLenNew[1] | 0x02;\n                cmdLenNew[0] = cmdLenNew[0] | 0x02;\n                cmdLenNew", "first_line_groundtruth": "writeToUiAppend(readResult,\"ndefLen new (dec): \" + ndefLenIntRequest + \" data: \" + Utils.bytesToHex(cmdLenNew) );", "first_line_prediction": " //byte[] cmdLenNew = Utils.hexStringToByteArray(sendReadBinaryNlen);", "match": 0}
{"groundtruth": "if (!Utils.isSucceed(responseSelect)) {", "prediction": " // now we run the read command\n                command = readApdu();\n                responseSelect = isoDep.transceive(command);\n                writeToUiAppend(readResult, \"readApdu: \" + Utils.bytesToHex(command));\n                writeToUiAppend(readResult, \"readApdu response: \" + Utils.bytesToHex(responseSelect));\n\n                if (responseSelect == null) {\n                    writeToUiAppend(readResult, \"readApdu fails (null)\");\n                } else {\n                    writeToUiAppend(readResult, \"responseSelect length: \" + responseSelect.length + \" data: \" +", "first_line_groundtruth": "if (!Utils.isSucceed(responseSelect)) {", "first_line_prediction": " // now we run the read command", "match": 0}
{"groundtruth": "Utils.getTimestamp();", "prediction": " Calendar.getInstance().getTime().toString();\n                    dataToSend.setText(messageWithTimestamp);\n                } else if (rbUrl.isChecked()) {\n                    dataToSend.setText(dataToSendString + \" \" + DEFAULT_URL);\n                } else if (rbTimestamp.isChecked()) {\n                    dataToSend.setText(dataToSendString + \" on \" +\n                            Calendar.getInstance().getTime().toString());\n                }\n            }\n        });\n\n        rbTimestamp.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n                if (isChecked) {", "first_line_groundtruth": "Utils.getTimestamp();", "first_line_prediction": " Calendar.getInstance().getTime().toString();", "match": 0}
{"groundtruth": "] cmdLen = Utils.hexStringToByteArray(sendReadBinaryNlen);", "prediction": " ] ndefData = Arrays.copyOfRange(responseSendBinaryNlen, 2, responseSendBinaryNlen.length);\n                writeToUiAppend(readResult, \"ndefLen length: \" + ndefLen.length + \" data: \" + Utils.bytesToHex(ndefLen));\n                writeToUiAppend(readResult, \"ndefData length: \" + ndefData.length + \" data: \" + Utils.bytesToHex(ndefData));\n                System.out.println(\"ndefLen: \" + Utils.bytesToHex(ndefLen));\n                System.out.println(\"ndefData:", "first_line_groundtruth": "] cmdLen = Utils.hexStringToByteArray(sendReadBinaryNlen);", "first_line_prediction": " ] ndefData = Arrays.copyOfRange(responseSendBinaryNlen, 2, responseSendBinaryNlen.length);", "match": 0}
{"groundtruth": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getID().toString());", "prediction": "(\"id\", identifierBroadcastMessageEntry.getKey().toString());\n            arrayOfMessagePresets.add(object);\n        }\n        config.add(\"message_presets\", arrayOfMessagePresets);\n\n        try {\n            Files.writeString(getConfigurationFile().toPath(), gson.toJson(config));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void loadConfig() {\n        Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().disableHtmlEscaping().create();\n        try {\n            JsonObject config = gson.fromJson(new FileReader(getConfigurationFile()), JsonObject.class);", "first_line_groundtruth": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getID().toString());", "first_line_prediction": "(\"id\", identifierBroadcastMessageEntry.getKey().toString());", "match": 0}
{"groundtruth": "resource.canBeOpened() ) {", "prediction": " resource.exists() ) {\n            loadProperties( resource );\n        } else if ( !quiet ) {\n            getLog().warn( String.format( \"File '%s' does not exist\", resource.getFilename() ) );\n        }\n    }\n\n    private void loadProperties( Resource resource ) throws MojoExecutionException {\n        try (InputStream is = resource.getInputStream()) {\n            Properties properties = new Properties();\n            properties.load( is );\n            for ( String key : properties.stringPropertyNames() ) {\n                String value = properties.getProperty( key );\n                if ( keyPrefix != null ) {\n                    key = keyPrefix", "first_line_groundtruth": "resource.canBeOpened() ) {", "first_line_prediction": " resource.exists() ) {", "match": 0}
{"groundtruth": "<Path> pathStream = pathParser.streamFilesMatchingAntPath(antPattern)) {", "prediction": "<Path> paths = pathParser.findFilesByPattern(project.getBasedir().toPath(), antPattern)) {\n                paths.forEach(path -> load(new FileResource(path.toFile())));\n            } catch (IOException e) {\n                throw new MojoExecutionException(\"Failed to load properties from files by pattern: \" + antPattern, e);\n            }\n        }\n    }\n\n    private void loadUrls() throws MojoExecutionException {\n        for ( String url : urls ) {\n            load( new UrlResource( url ) );\n        }\n    }\n\n    private void load( Resource resource ) throws MojoExecutionException {\n       ", "first_line_groundtruth": "<Path> pathStream = pathParser.streamFilesMatchingAntPath(antPattern)) {", "first_line_prediction": "<Path> paths = pathParser.findFilesByPattern(project.getBasedir().toPath(), antPattern)) {", "match": 0}
{"groundtruth": "circularDefinitionPreventer.throwCircularDefinitionException();", "prediction": " throw new IllegalArgumentException(\"Circular dependency detected: \" + key);\n        }\n\n        String value = mavenProjectProperties.getProperty(key);\n        if (value == null) {\n            value = environment.getProperty(key);\n        }\n\n        if (value == null) {\n            value = System.getProperty(key);\n        }\n\n        if (value == null) {\n            return key;\n        }\n\n        if (value.startsWith(\"${\")) {\n            String resolved = getPropertyValue(value.substring(2, value.length() - 1), mavenProjectProperties, environment, circularDefinitionPreventer);\n            return StringUtils.replace(value, \"${", "first_line_groundtruth": "circularDefinitionPreventer.throwCircularDefinitionException();", "first_line_prediction": " throw new IllegalArgumentException(\"Circular dependency detected: \" + key);", "match": 0}
{"groundtruth": "( InputStream stream = resource.getInputStream() ) {", "prediction": " (InputStream is = resource.openStream()) {\n                Properties properties = new Properties();\n                properties.load( is );\n                for ( String key : properties.stringPropertyNames() ) {\n                    String value = properties.getProperty( key );\n                    if ( keyPrefix != null ) {\n                        key = keyPrefix + \".\" + key;\n                    }\n                    resolver.setProperty( key, value );\n                }\n            }\n        } catch ( IOException e ) {\n            missing( resource );\n        }\n    }\n\n    private void missing( Resource resource ) throws MojoExecutionException {\n        if ( quiet ) {\n            getLog().debug( \"Skipping loading properties", "first_line_groundtruth": "( InputStream stream = resource.getInputStream() ) {", "first_line_prediction": " (InputStream is = resource.openStream()) {", "match": 0}
{"groundtruth": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer.cloneWithAdditionalKey(key));", "prediction": " newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer);\n            if (newValue == null) {\n                return null;\n            }\n            buffer.replace(newValue);\n        }\n\n        return buffer.toString();\n    }\n\n    private String fromPropertiesThenSystemThenEnvironment(String key, Properties mavenProjectProperties, Properties environment) {\n        String value = mavenProjectProperties.getProperty(key);\n        if (value == null) {\n            value = System.getProperty(key);\n        }\n        if (value == null) {\n            value = environment.getProperty(key);\n        }\n        return value;\n    }", "first_line_groundtruth": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer.cloneWithAdditionalKey(key));", "first_line_prediction": " newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer);", "match": 0}
{"groundtruth": "circularDefinitionPreventer.isPropertyAlreadyVisited(key)) {", "prediction": "circularDefinitionPreventer.isCircular(key)) {\n            throw new IllegalArgumentException(\"Circular dependency detected: \" + key);\n        }\n\n        String value = mavenProjectProperties.getProperty(key);\n        if (StringUtils.isBlank(value)) {\n            value = environment.getProperty(key);\n        }\n\n        if (StringUtils.isBlank(value)) {\n            return key;\n        }\n\n        if (value.contains(\"${\")) {\n            return getPropertyValue(value, mavenProjectProperties, environment, circularDefinitionPreventer);\n        }\n\n        return value;\n    }", "first_line_groundtruth": "circularDefinitionPreventer.isPropertyAlreadyVisited(key)) {", "first_line_prediction": "circularDefinitionPreventer.isCircular(key)) {", "match": 0}
{"groundtruth": "size = queryResult.getValueListSize();", "prediction": " count = 0;\n          while (queryResult.next()) {\n            count++;\n            if (count % batch_size == 0) {\n              Instant statementStartTime = Instant.now();\n              connection.executeQuery(\n                  StringUtils.replaceParameters(statement, values).getStatement());\n              writeStatementEvent(\n                  statementStartTime, statement.getId(), Status.SUCCESS, /* payload= */ null);\n            }\n          }\n        }\n      } catch (Exception e) {\n        writeStatementEvent(\n            statement.getStartTime(), statement.getId(), Status.FAILURE, e.getMessage());\n        throw new ClientException(e);\n      }\n\n     ", "first_line_groundtruth": "size = queryResult.getValueListSize();", "first_line_prediction": " count = 0;", "match": 0}
{"groundtruth": "(file.getStatements().size() != 1) {", "prediction": " (file.getStatement() instanceof StatementExec) {\n        StatementExec statement = (StatementExec) file.getStatement();\n        queryResult = connection.executeStatement(statement.getStatement(), values);\n      } else {\n        throw new ClientException(\"Unsupported statement type: \" + file.getStatement().getClass());\n      }\n\n      Instant fileEndTime = Instant.now();\n      this.telemetryRegistry.logFileExecution(\n          file.getFilePath(),\n          fileStartTime,\n          fileEndTime,\n          Status.SUCCESS,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,", "first_line_groundtruth": "(file.getStatements().size() != 1) {", "first_line_prediction": " (file.getStatement() instanceof StatementExec) {", "match": 0}
{"groundtruth": ".putAll(queryResult.getStringMappings(j, localMax));", "prediction": ".put(\n                this.arguments.getDependentTaskInputColumn(), queryResult.getValueList().subList(j, localMax));\n            Instant statementStartTime = Instant.now();\n            connection.executeQuery(\n                StringUtils.replaceParameters(statement, localValues).getStatement());\n            writeStatementEvent(\n                statementStartTime, statement.getId(), Status.SUCCESS, /* payload= */ null);\n          }\n        }\n      } catch (Exception e) {\n        writeStatementEvent(\n            fileStartTime, statement.getId(), Status.FAILURE, e.getMessage());\n        throw new ClientException(e);\n      }\n    }\n  }", "first_line_groundtruth": ".putAll(queryResult.getStringMappings(j, localMax));", "first_line_prediction": ".put(", "match": 0}
{"groundtruth": "statement.getId(),\n                Status.FAILURE,\n                e.getMessage() + \";", "prediction": "0,\n                Status.FAILED,\n                \"Exception executing statement: \" + statement.getId(),\n                e.getMessage());\n            throw e;\n          }\n          writeStatementEvent(statementStartTime, 0, Status.COMPLETED, \"Completed statement: \" + statement.getId());\n        }\n      } catch (Exception e) {\n        LOGGER.error(\"Exception executing file: \" + file.getId());\n        writeFileEvent(fileStartTime, 0, Status.FAILED, \"Exception executing file: \" + file.getId(), e.getMessage());\n        throw e;\n      }\n      writeFileEvent(fileStartTime, 0, Status", "first_line_groundtruth": "statement.getId(),", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "statement.getId(), StringUtils.format(statement.getStatement(), parameterValues));", "prediction": " statement.getStatement(),\n         statement.getStatementType(),\n         statement.getStatementId(),\n         statement.getStatementName(),\n         statement.getStatementDescription(),\n         statement.getStatementTimeout(),\n         statement.getStatementTimeoutUnit(),\n         statement.getStatementTimeoutTimeUnit(),\n         statement.getStatementTimeoutTimeUnit(),\n         statement.getStatementTimeoutTimeUnit(),\n         statement.getStatementTimeoutTimeUnit(),\n         statement.getStatementTimeoutTimeUnit(),\n         statement.getStatementTimeoutTimeUnit(),\n         statement.getStatementTimeoutTimeUnit(),\n         statement.getStatementTimeoutTimeUnit(),\n         statement.getStatementTimeoutTimeUnit(),\n         statement.getStatementTimeoutTimeUnit(),", "first_line_groundtruth": "statement.getId(), StringUtils.format(statement.getStatement(), parameterValues));", "first_line_prediction": " statement.getStatement(),", "match": 0}
{"groundtruth": "if (queryResult == null || queryResult.containsEmptyResultColumnOnly()) {", "prediction": " // Store the result of the first query in an intermediate object.\n          values.put(\n              this.arguments.getDependentTaskIntermediateResultName(), queryResult.getRows());\n        }\n\n        // Execute the second query repeatedly.\n        for (int i = 0; i < batch_size; i++) {\n          Instant statementStartTime = Instant.now();\n          queryResult =\n              connection.executeQuery(\n                  StringUtils.replaceParameters(statement, values).getStatement());\n          writeStatementEvent(\n              statementStartTime, statement.getId(), Status.SUCCESS, /* payload= */ null);\n        }\n      } catch (Exception e) {", "first_line_groundtruth": "if (queryResult == null || queryResult.containsEmptyResultColumnOnly()) {", "first_line_prediction": " // Store the result of the first query in an intermediate object.", "match": 0}
{"groundtruth": "+ statement.getId());", "prediction": " + statement.getStatement(), e);\n            EventInfo eventInfo = new ImmutableEventInfo.Builder()\n                .withEventType(EventType.ERROR)\n                .withStatus(Status.FAILED)\n                .withStartTime(fileStartTime)\n                .withEndTime(statementStartTime)\n                .withMessage(e.getMessage())\n                .build();\n            telemetryRegistry.recordEvent(eventInfo);\n            throw new ClientException(e);\n          }\n          Instant statementEndTime = Instant.now();\n          EventInfo eventInfo = new ImmutableEventInfo.Builder()\n              .withEventType(EventType.SUCCESS)\n              .withStatus(Status.SUCCESS)", "first_line_groundtruth": "+ statement.getId());", "first_line_prediction": " + statement.getStatement(), e);", "match": 0}
{"groundtruth": "file.getId(),\n            Status.FAILURE,\n            /* payload= */ e.getMessage() + \";", "prediction": "0,\n            Status.FAILURE,\n            \"Exception executing file: \" + file.getId() + \" \" + e.getMessage());\n        throw new ClientException(e);\n      }\n    }\n  }", "first_line_groundtruth": "file.getId(),", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "readValue(StringUtils.replaceEnvVars(new File(filePath)), objectType);", "prediction": "readValue(new File(filePath), objectType);\n  }", "first_line_groundtruth": "readValue(StringUtils.replaceEnvVars(new File(filePath)), objectType);", "first_line_prediction": "readValue(new File(filePath), objectType);", "match": 0}
{"groundtruth": "getId(), StringUtils.format(statement.getStatement(), parameterValues));", "prediction": "getStatement(),\n        statement.getStatementType(),\n        statement.getStatementId(),\n        statement.getStatementName(),\n        statement.getStatementDescription(),\n        statement.getStatementTimeout(),\n        statement.getStatementTimeoutUnit(),\n        statement.getStatementTimeoutTimeUnit(),\n        statement.getStatementTimeoutTimeUnit(),\n        statement.getStatementTimeoutTimeUnit(),\n        statement.getStatementTimeoutTimeUnit(),\n        statement.getStatementTimeoutTimeUnit(),\n        statement.getStatementTimeoutTimeUnit(),\n        statement.getStatementTimeoutTimeUnit(),\n        statement.getStatementTimeoutTimeUnit(),\n        statement.getStatementTimeoutTimeUnit(),\n        statement.getStatementTimeoutTimeUnit(),\n        statement", "first_line_groundtruth": "getId(), StringUtils.format(statement.getStatement(), parameterValues));", "first_line_prediction": "getStatement(),", "match": 0}
{"groundtruth": "(prompt.getOption()) {", "prediction": "(prompt.getOption(), prompt.getIndex()) {\n                @Override\n                public String addStatement(String code) {\n                    return prompt.getSnippet().replace(\"{query}\", code);\n                }\n            };\n            actionManager.registerAction(idPrefix + prompt.getIndex(), oldAction);\n            actionGroup.add(oldAction);\n        }\n        popupMenu.add(actionGroup);\n    }\n\n    private void clear(DefaultActionGroup popupMenu, DefaultActionGroup actionGroup) {\n        for (AnAction action : popupMenu.getChildren(null)) {\n            popupMenu.remove(action);\n        }\n        for (AnAction action", "first_line_groundtruth": "(prompt.getOption()) {", "first_line_prediction": "(prompt.getOption(), prompt.getIndex()) {", "match": 0}
{"groundtruth": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {", "prediction": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),o.getIndex()))) {\n            return false;\n        }\n        return prompts.add(o);\n    }\n\n    public Prompt get(int index) {\n        return prompts.get(index);\n    }\n\n    public Prompt get(String option) {\n        return prompts.stream().filter(prompt -> prompt.getOption().equals(option)).findFirst().orElse(null);\n    }\n\n    public Prompt get(int index, String option) {\n        return prompts.stream().filter(prompt -> prompt.", "first_line_groundtruth": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {", "first_line_prediction": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),o.getIndex()))) {", "match": 0}
{"groundtruth": "(rowIndex).setSnippet(str);", "prediction": "(rowIndex).setValue(str);\n                }\n            } else {\n                //\u5220\u9664prompts\u4e2d\u7684\u503c\n                prompts.remove(rowIndex);\n            }\n            //\u5237\u65b0\u8868\u683c\n            fireTableCellUpdated(rowIndex, columnIndex);\n        }\n\n        @Override\n        public Object getValueAt(int rowIndex, int columnIndex) {\n            Prompt prompt = prompts.get(rowIndex);\n            if (columnIndex == NAME_COLUMN) {\n                return prompt.getOption();\n            } else if (columnIndex == VALUE_COLUMN) {\n                return prompt.getValue();\n            }\n            return null;\n        }\n\n        @Override\n        public String getColumnName(int", "first_line_groundtruth": "(rowIndex).setSnippet(str);", "first_line_prediction": "(rowIndex).setValue(str);", "match": 0}
{"groundtruth": "stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());", "prediction": " stringStringHashMap.put(prompt.getOption(), prompt.getTo());\n        }\n        return stringStringHashMap;\n    }", "first_line_groundtruth": "stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());", "first_line_prediction": " stringStringHashMap.put(prompt.getOption(), prompt.getTo());", "match": 0}
{"groundtruth": ".put(prompt.getOption(), prompt.getSnippet());", "prediction": ".put(prompt.getOption(), prompt.getTo());\n        }\n        return stringStringHashMap;\n    }", "first_line_groundtruth": ".put(prompt.getOption(), prompt.getSnippet());", "first_line_prediction": ".put(prompt.getOption(), prompt.getTo());", "match": 0}
{"groundtruth": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {", "prediction": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),o.getIndex()))) {\n            return false;\n        }\n        return prompts.add(o);\n    }\n\n    public Prompt get(int index) {\n        return prompts.get(index);\n    }\n\n    public Prompt get(String option) {\n        return prompts.stream().filter(prompt -> prompt.getOption().equals(option)).findFirst().orElse(null);\n    }\n\n    public Prompt get(int index, String option) {\n        return prompts.stream().filter(prompt -> prompt", "first_line_groundtruth": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {", "first_line_prediction": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),o.getIndex()))) {", "match": 0}
{"groundtruth": "prompts.get(rowIndex).setOption(str);", "prediction": " prompts.get(rowIndex).setName(str);\n                } else {\n                    prompts.get(rowIndex).setValue(str);\n                }\n                //\u5237\u65b0\u8868\u683c\n                fireTableCellUpdated(rowIndex, columnIndex);\n            }\n        }\n\n        @Override\n        public Object getValueAt(int rowIndex, int columnIndex) {\n            if (columnIndex == NAME_COLUMN) {\n                return prompts.get(rowIndex).getName();\n            } else {\n                return prompts.get(rowIndex).getValue();\n            }\n        }\n\n        @Override\n        public String getColumnName(int columnIndex) {\n            if (columnIndex == NAME_COLUMN) {", "first_line_groundtruth": "prompts.get(rowIndex).setOption(str);", "first_line_prediction": " prompts.get(rowIndex).setName(str);", "match": 0}
{"groundtruth": "actionManager.unregisterAction(idPrefix + prompt.getOption());", "prediction": " actionManager.unregisterAction(idPrefix + prompt.getOption());\n            }\n            BasePilotPluginAction newAction = new BasePilotPluginAction(prompt.getOption(), prompt.getIndex()) {\n                @Override\n                public String addStatement(String code) {\n                    return prompt.getSnippet().replace(\"{query}\", code);\n                }\n            };\n            actionManager.registerAction(idPrefix + prompt.getIndex(), newAction);\n            actionGroup.add(newAction);\n        }\n        popupMenu.add(actionGroup);\n    }\n\n    private void clear(DefaultActionGroup popupMenu, DefaultActionGroup actionGroup) {\n        for (", "first_line_groundtruth": "actionManager.unregisterAction(idPrefix + prompt.getOption());", "first_line_prediction": " actionManager.unregisterAction(idPrefix + prompt.getOption());", "match": 0}
{"groundtruth": "appSettingsStorage.unregisterActions();", "prediction": " state = form.getState();\n         appSettingsStorage.setState(state);\n    }\n\n    @Override\n    public void reset() {\n        state = appSettingsStorage.getState();\n        form.setState(state);\n    }\n\n    @Override\n    public void disposeUIResources() {\n        form = null;\n    }", "first_line_groundtruth": "appSettingsStorage.unregisterActions();", "first_line_prediction": " state = form.getState();", "match": 0}
{"groundtruth": "(idPrefix + prompt.getOption());", "prediction": "(idPrefix + prompt.getIndex());\n            if (oldAction != null) {\n                popupMenu.remove(oldAction);\n            }\n            BasePilotPluginAction newAction = new BasePilotPluginAction(prompt.getOption(), prompt.getIndex()) {\n                @Override\n                public String addStatement(String code) {\n                    return prompt.getSnippet().replace(\"{query}\", code);\n                }\n            };\n            actionManager.registerAction(idPrefix + prompt.getIndex(), newAction);\n            popupMenu.add(newAction);\n        }\n    }\n\n    private void clear(DefaultActionGroup popupMenu, DefaultActionGroup actionGroup)", "first_line_groundtruth": "(idPrefix + prompt.getOption());", "first_line_prediction": "(idPrefix + prompt.getIndex());", "match": 0}
{"groundtruth": "ddlFileStatements = SQLParser.getStatements(ddlFile).getStatements();", "prediction": " ddlStatements = SQLParser.getStatements(ddlFile).getStatements();\n      for (StatementExec statement : ddlStatements) {\n        statement.execute(connection, parameterValues);\n      }\n    }\n  }\n\n  public void addEvent(EventInfo event) {\n    eventsStream.add(event);\n  }\n\n  public void flush() throws ClientException {\n    if (eventsStream.isEmpty()) {\n      return;\n    }\n    try (Connection connection = connectionManager.createConnection()) {\n      for (StatementExec statement : insertFileStatements) {\n        statement.execute(connection, Collections.emptyMap());\n      }\n     ", "first_line_groundtruth": "ddlFileStatements = SQLParser.getStatements(ddlFile).getStatements();", "first_line_prediction": " ddlStatements = SQLParser.getStatements(ddlFile).getStatements();", "match": 0}
{"groundtruth": "connection.execute(currentQuery);", "prediction": " connection.execute(currentQuery);\n      }\n    }\n  }\n\n  public void addEvent(EventInfo event) {\n    eventsStream.add(event);\n  }\n\n  public void flush() throws ClientException {\n    if (eventsStream.isEmpty()) {\n      return;\n    }\n    try (Connection connection = connectionManager.createConnection()) {\n      for (StatementExec statement : insertFileStatements) {\n        connection.execute(statement.getStatement());\n      }\n      for (EventInfo event : eventsStream) {\n        connection.execute(event.getInsertStatement());\n      }\n    }\n    eventsStream.clear();\n  }", "first_line_groundtruth": "connection.execute(currentQuery);", "first_line_prediction": " connection.execute(currentQuery);", "match": 0}
{"groundtruth": "task.getTimeTravelPhaseId() != null) {", "prediction": "task.getCustomTaskExecutorArguments() != null) {\n      CustomTaskExecutorArguments customTaskExecutorArguments = task.getCustomTaskExecutorArguments();\n      for (Map.Entry<String, Object> entry : customTaskExecutorArguments.getRuntimeParameters().entrySet()) {\n        values.put(entry.getKey(), entry.getValue());\n      }\n    }\n    return values;\n  }\n\n  private TaskExecutor getTaskExecutor(TaskExec task) {\n    String taskExecutorClassName = task.getTaskExecutorClassName();\n    try {\n      Class<?> taskExecutorClass = Class.forName(taskExecutorClassName);\n      Constructor<?> taskExecutorConstructor", "first_line_groundtruth": "task.getTimeTravelPhaseId() != null) {", "first_line_prediction": "task.getCustomTaskExecutorArguments() != null) {", "match": 0}
{"groundtruth": ".forName(task.getCustomTaskExecutor())\n                .getDeclaredConstructor(\n                    SQLTelemetryRegistry.class, String.class, CustomTaskExecutorArguments.class);", "prediction": ".forName(task.getCustomTaskExecutor()).getConstructor(SQLTelemetryRegistry.class, String.class);\n        return (TaskExecutor) constructor.newInstance(this.telemetryRegistry, this.experimentStartTime);\n      } catch (Exception e) {\n        throw new RuntimeException(\"Failed to instantiate custom task executor: \" + task.getCustomTaskExecutor(), e);\n      }\n    }\n  }\n\n  private void writeTaskEvent(Instant startTime, String taskId, Status status) {\n    EventInfo eventInfo =\n        ImmutableEventInfo.builder()\n            .eventType(EventType.TASK)\n            .status(status)\n            .startTime(", "first_line_groundtruth": ".forName(task.getCustomTaskExecutor())", "first_line_prediction": ".forName(task.getCustomTaskExecutor()).getConstructor(SQLTelemetryRegistry.class, String.class);", "match": 0}
{"groundtruth": "+ task.getId());", "prediction": " + task.getName(), e);\n          EventInfo eventInfo =\n              ImmutableEventInfo.builder()\n                  .experimentStartTime(experimentStartTime)\n                  .sessionStartTime(sessionStartTime)\n                  .taskStartTime(taskStartTime)\n                  .taskEndTime(Instant.now())\n                  .taskName(task.getName())\n                  .taskType(task.getType())\n                  .taskStatus(Status.FAILED)\n                  .taskDuration(ChronoUnit.MILLIS.between(taskStartTime, Instant.now()))\n                  .taskException(e.getMessage())\n                  .build();\n          telemetryRegistry.logEvent(eventInfo);\n          throw e", "first_line_groundtruth": "+ task.getId());", "first_line_prediction": " + task.getName(), e);", "match": 0}
{"groundtruth": "\"Unable to load custom task class: \" + task.getCustomTaskExecutor(), e);", "prediction": " \"Failed to instantiate custom task executor: \" + task.getCustomTaskExecutor(), e);\n      }\n    }\n  }\n\n  private void writeTaskEvent(Instant startTime, String taskId, Status status) {\n    EventInfo eventInfo =\n        ImmutableEventInfo.builder()\n            .eventType(EventType.TASK)\n            .status(status)\n            .startTime(startTime)\n            .taskId(taskId)\n            .build();\n    this.telemetryRegistry.writeEvent(eventInfo);\n  }\n\n  private void writeSessionEvent(Instant startTime, String sessionId, Status status) {\n    EventInfo eventInfo =\n        ImmutableEventInfo.builder", "first_line_groundtruth": "\"Unable to load custom task class: \" + task.getCustomTaskExecutor(), e);", "first_line_prediction": " \"Failed to instantiate custom task executor: \" + task.getCustomTaskExecutor(), e);", "match": 0}
{"groundtruth": "form.getSettings().clone();", "prediction": " form.getState();\n        appSettingsStorage.registerActions();\n    }\n\n    @Override\n    public void reset() {\n        state = appSettingsStorage.getState();\n        form.setState(state);\n    }\n\n    @Override\n    public void disposeUIResources() {\n        form = null;\n    }", "first_line_groundtruth": "form.getSettings().clone();", "first_line_prediction": " form.getState();", "match": 0}
{"groundtruth": ", eventInfo.getEndTime()));", "prediction": ", Instant.now()));\n          eventInfo.setEndTime(DateTimeFormatter.U_FORMATTER.format(Instant.now()));\n          eventInfo.setDuration(\n              ChronoUnit.SECONDS.between(phaseStartTime, Instant.now()));\n          eventInfo.setMetadata(experimentMetadata);\n          telemetryRegistry.registerEvent(eventInfo);\n        }\n        // Wait for all threads to finish\n        executor.shutdown();\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);\n        // Write experiment end event\n        writeExperimentEvent(repetitionStartTime, Status.SUCCESS);\n      } catch (InterruptedException e) {\n       ", "first_line_groundtruth": ", eventInfo.getEndTime()));", "first_line_prediction": ", Instant.now()));", "match": 0}
{"groundtruth": "if (phase.getSessions().size() > maxConcurrentSessions) {", "prediction": " maxConcurrentSessions = Math.max(maxConcurrentSessions, phase.getSessions().size());\n    }\n    ExecutorService executorService = Executors.newFixedThreadPool(maxConcurrentSessions);\n    List<Future<SessionExec>> futures = new ArrayList<>();\n    for (PhaseExec phase : workload.getPhases()) {\n      for (SessionExec session : phase.getSessions()) {\n        futures.add(executorService.submit(session));\n      }\n    }\n    executorService.shutdown();\n    executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);\n    for (Future<SessionExec> future : futures) {\n     ", "first_line_groundtruth": "if (phase.getSessions().size() > maxConcurrentSessions) {", "first_line_prediction": " maxConcurrentSessions = Math.max(maxConcurrentSessions, phase.getSessions().size());", "match": 0}
{"groundtruth": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);", "prediction": " throw new ClientException(e);\n        }\n        Instant taskEndTime = Instant.now();\n        Instant taskDuration = taskEndTime.minus(taskStartTime);\n        Instant taskEndTimeInPhase = taskEndTime.plus(taskDuration);\n        Instant taskEndTimeInSession = taskEndTimeInPhase.plus(taskDuration);\n        Instant taskEndTimeInExperiment = taskEndTimeInSession.plus(taskDuration);\n        Instant taskEndTimeInPhaseInExperiment = taskEndTimeInExperiment.plus(taskDuration);\n        Instant taskEndTimeInSessionInExperiment = taskEndTimeInPhaseInExperiment.plus(taskDuration);\n        Instant taskEndTimeInExperimentInExperiment", "first_line_groundtruth": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);", "first_line_prediction": " throw new ClientException(e);", "match": 0}
{"groundtruth": ".info(\"Running \" + phase.getId() + \" phase...\");", "prediction": ".info(\"Starting phase: {}\", phase.getId());\n          final Instant phaseStartTime = Instant.now();\n          final List<Future<SessionExec>> sessionExecs = new ArrayList<>();\n          for (SessionExec session : phase.getSessions()) {\n            sessionExecs.add(\n                executor.submit(\n                    () -> {\n                      try {\n                        return session.execute(config, telemetryRegistry);\n                      } catch (Exception e) {\n                        throw new RuntimeException(e);\n                      }\n                    }));\n          }\n          for (Future<SessionExec> sessionExec : sessionExecs) {\n            sessionExec.get();\n          }\n          phaseId", "first_line_groundtruth": ".info(\"Running \" + phase.getId() + \" phase...\");", "first_line_prediction": ".info(\"Starting phase: {}\", phase.getId());", "match": 0}
{"groundtruth": "return instance.getState();", "prediction": " return instance.get();\n    }\n\n    @Override\n    public AppSettings clone() {\n        return (AppSettings) super.clone();\n    }\n\n    public void addDefaultPrompts(Prompts prompts) {\n        prompts.addPrompt(new Prompt(\"testConnMsg\", \"Test Connection\", \"Test Connection\", \"Test Connection\"));\n        prompts.addPrompt(new Prompt(\"gptKey\", \"GPT Key\", \"GPT Key\", \"GPT Key\"));\n        prompts.addPrompt(new Prompt(\"gptModel\", \"GPT Model\", \"GPT Model\", \"GPT Model\"));", "first_line_groundtruth": "return instance.getState();", "first_line_prediction": " return instance.get();", "match": 0}
{"groundtruth": "phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, eventInfo.getEndTime()));", "prediction": " phase.getId(),\n               ChronoUnit.SECONDS.between(phaseStartTime, Instant.now()));\n          eventInfo =\n              writePhaseEvent(phaseStartTime, phase.getId(), Status.SUCCESS, eventInfo);\n          phaseIdToEndTime.put(phase.getId(), Instant.now());\n        }\n        writeExperimentEvent(repetitionStartTime, experimentMetadata, Status.SUCCESS);\n      } catch (Exception e) {\n        LOGGER.error(\"Exception executing experiment: \" + config.getId());\n        writeExperimentEvent(repetitionStartTime, experimentMetadata, Status.FAILURE);\n        throw e;\n      } finally {\n        if (executor", "first_line_groundtruth": "phase.getId(),", "first_line_prediction": " phase.getId(),", "match": 0}
{"groundtruth": ", session.getId(), Status.FAILURE);", "prediction": ", Status.FAILURE);\n      throw e;\n    }\n    writeSessionEvent(sessionStartTime, Status.SUCCESS);\n    return true;\n  }\n\n  private void writeSessionEvent(Instant startTime, Status status) {\n    EventInfo eventInfo =\n        ImmutableEventInfo.builder()\n            .experimentStartTime(experimentStartTime)\n            .sessionStartTime(startTime)\n            .sessionEndTime(Instant.now())\n            .sessionStatus(status)\n            .build();\n    telemetryRegistry.writeEvent(eventInfo);\n  }\n\n  private void writeTaskEvent(Instant startTime, String taskId, Status status) {\n    EventInfo eventInfo =\n        Immutable", "first_line_groundtruth": ", session.getId(), Status.FAILURE);", "first_line_prediction": ", Status.FAILURE);", "match": 0}
{"groundtruth": "String reportFileName = contributionFilesService.getFileName(start, finish);", "prediction": " return contributionFilesService.generateReport(contributionFiles);\n    }", "first_line_groundtruth": "String reportFileName = contributionFilesService.getFileName(start, finish);", "first_line_prediction": " return contributionFilesService.generateReport(contributionFiles);", "match": 0}
{"groundtruth": "experiment.execute();", "prediction": " experiment.run();\n  }\n\n  /** Create command line options. */\n  private static Options createOptions() {\n    final Options options = new Options();\n    options.addOption(\n        Option.builder(OPT_INPUT_TASK_LIBRARY_FILE)\n            .longOpt(OPT_INPUT_TASK_LIBRARY_FILE)\n            .hasArg()\n            .desc(\"Task library file\")\n            .build());\n    options.addOption(\n        Option.builder(OPT_INPUT_WORKLOAD_FILE)\n            .longOpt(OPT_INPUT_WORKLOAD_FILE)\n            .hasArg()\n            .desc(\"Workload file", "first_line_groundtruth": "experiment.execute();", "first_line_prediction": " experiment.run();", "match": 0}
{"groundtruth": "settings = AppSettingsStorage.getInstance().getState();", "prediction": " appSettings = AppSettingsStorage.getInstance(project).getAppSettings();\n        if (appSettings.isUseGpt()) {\n            GPTClient gptClient = new GPTClient(appSettings.getGptApiKey());\n            List<CompletionChoice> choices = gptClient.completion(statement);\n            if (choices != null && !choices.isEmpty()) {\n                String completion = choices.get(0).getText();\n                editor.getDocument().replaceString(editor.getSelectionModel().getSelectionStart(), editor.getSelectionModel().getSelectionEnd(), completion);\n            }\n        }\n    }\n\n    private String addStatement(String code", "first_line_groundtruth": "settings = AppSettingsStorage.getInstance().getState();", "first_line_prediction": " appSettings = AppSettingsStorage.getInstance(project).getAppSettings();", "match": 0}
{"groundtruth": "fdcFileMapper.processRequest(files.toArray(new String[0]), getFileName(start, finish));", "prediction": " fdcFileMapper.mapFiles(files, start, finish);\n    }\n\n    public String getFileName(LocalDate start, LocalDate end) {\n        return String.format(FILE_NAME_TEMPLATE, start, end);\n    }", "first_line_groundtruth": "fdcFileMapper.processRequest(files.toArray(new String[0]), getFileName(start, finish));", "first_line_prediction": " fdcFileMapper.mapFiles(files, start, finish);", "match": 0}
{"groundtruth": "(next.getOption()));", "prediction": "(next.name));\n        _prompts.addAll(prompts.getPrompts());\n    }\n\n    public static Prompts addDefaultPrompts(Prompts prompts) {\n        prompts.addPrompt(new Prompt(\"testConnMsg\", \"Test Connection Message\", \"Test Connection Message\"));\n        prompts.addPrompt(new Prompt(\"enableProxy\", \"Enable Proxy\", \"Enable Proxy\"));\n        prompts.addPrompt(new Prompt(\"proxyHost\", \"Proxy Host\", \"Proxy Host\"));\n        prompts.addPrompt(new Prompt(\"proxyPort\", \"Proxy Port\", \"Proxy", "first_line_groundtruth": "(next.getOption()));", "first_line_prediction": "(next.name));", "match": 0}
{"groundtruth": ", phase.getId(), Status.SUCCESS);", "prediction": ", phaseIdToEndTime);\n          } catch (Exception e) {\n            eventInfo = writePhaseEvent(phaseStartTime, phaseIdToEndTime, e);\n          }\n          experimentMetadata.put(phase.getId(), eventInfo);\n        }\n        // Write experiment end event\n        writeExperimentEvent(repetitionStartTime, experimentMetadata);\n      } finally {\n        if (executor != null) {\n          executor.shutdown();\n          executor.awaitTermination(1, TimeUnit.MINUTES);\n        }\n      }\n    }\n  }\n\n  private void checkResults(List<Future<Void>> futures) throws InterruptedException {\n    for (Future<Void", "first_line_groundtruth": ", phase.getId(), Status.SUCCESS);", "first_line_prediction": ", phaseIdToEndTime);", "match": 0}
{"groundtruth": "<String> contributionFiles = contributionFilesService.getFiles(start, finish);", "prediction": "<File> files = contributionFilesService.getContributionFiles(start, finish);\n        return files.get(0);\n    }", "first_line_groundtruth": "<String> contributionFiles = contributionFilesService.getFiles(start, finish);", "first_line_prediction": "<File> files = contributionFilesService.getContributionFiles(start, finish);", "match": 0}
{"groundtruth": "(task.getCustomTaskExecutor() == null) {", "prediction": " (task.getCustomTaskExecutorClass() != null) {\n      try {\n        Class<?> clazz = Class.forName(task.getCustomTaskExecutorClass());\n        Constructor<?> constructor = clazz.getConstructor(CustomTaskExecutorArguments.class);\n        return (TaskExecutor) constructor.newInstance(task.getCustomTaskExecutorArguments());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Failed to instantiate custom task executor: \" + e.getMessage(), e);\n      }\n    } else {\n      return new TaskExecutor();\n    }\n  }\n\n  private void writeSessionEvent(Instant startTime, String sessionId, Status status)", "first_line_groundtruth": "(task.getCustomTaskExecutor() == null) {", "first_line_prediction": " (task.getCustomTaskExecutorClass() != null) {", "match": 0}
{"groundtruth": "contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);", "prediction": " contributionFilesService.generateReport(contributionFiles, reportFileName);\n    }", "first_line_groundtruth": "contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);", "first_line_prediction": " contributionFilesService.generateReport(contributionFiles, reportFileName);", "match": 0}
{"groundtruth": "(Prompt.of(\"\u6b65\u9aa4\u6ce8\u91ca\", \"\u5e2e\u6211\u7ed9\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u6b65\u9aa4\u6dfb\u52a0\u6ce8\u91ca\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{", "prediction": "(Prompt.of(\"Explain\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"Explain\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"Explain\", \"help me add comments to the key steps of the following code", "first_line_groundtruth": "(Prompt.of(\"\u6b65\u9aa4\u6ce8\u91ca\", \"\u5e2e\u6211\u7ed9\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u6b65\u9aa4\u6dfb\u52a0\u6ce8\u91ca\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{", "first_line_prediction": "(Prompt.of(\"Explain\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));", "match": 0}
{"groundtruth": "( getFdcValue(DateUtils.convertXmlGregorianToString(o),true));", "prediction": " String.format(FDC_FORMAT,DateUtils.formatDate(o));\n    }\n\n    private File createCsvFile(String fileName) throws IOException {\n        File file = new File(fileName);\n        if (file.exists()) {\n            file.delete();\n        }\n        file.createNewFile();\n        return file;\n    }\n\n    private void setFilePermissions(File file) {\n        Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rw-rw-rw-\");\n        FileAttribute<Set<PosixFilePermission>> fileAttribute = PosixFilePermissions.asFileAttribute(perms);", "first_line_groundtruth": "( getFdcValue(DateUtils.convertXmlGregorianToString(o),true));", "first_line_prediction": " String.format(FDC_FORMAT,DateUtils.formatDate(o));", "match": 0}
{"groundtruth": "return fdcFilesService.processFiles(contributionFiles, start, end);", "prediction": " return fdcFilesService.processFiles(\n                contributionFiles,\n                start,\n                end,\n                fdcFilesService.getFileName(start, end)\n         );\n    }", "first_line_groundtruth": "return fdcFilesService.processFiles(contributionFiles, start, end);", "first_line_prediction": " return fdcFilesService.processFiles(", "match": 0}
{"groundtruth": "Prompt.of(\"emptyForYou\", \"balabala{", "prediction": "Prompt.of(\"\u4f18\u5316\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"\u4f18\u5316\u4ee3\u7801\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"\u4f18\u5316\u4ee3\u7801\u7247\u6bb5\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"\u4f18\u5316\u4ee3\u7801\u7247\u6bb5\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u4e00\u6bb5", "first_line_groundtruth": "Prompt.of(\"emptyForYou\", \"balabala{", "first_line_prediction": "Prompt.of(\"\u4f18\u5316\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));", "match": 0}
{"groundtruth": "form.getGptKey();", "prediction": " form.getPreferredFocusedComponent();\n    }", "first_line_groundtruth": "form.getGptKey();", "first_line_prediction": " form.getPreferredFocusedComponent();", "match": 0}
{"groundtruth": "add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{", "prediction": "addPrompt(new Prompt(\"y\", \"yes\", \"yes\"));\n        prompts.addPrompt(new Prompt(\"n\", \"no\", \"no\"));\n        prompts.addPrompt(new Prompt(\"y\", \"yes\", \"yes\"));\n        prompts.addPrompt(new Prompt(\"n\", \"no\", \"no\"));\n        prompts.addPrompt(new Prompt(\"y\", \"yes\", \"yes\"));\n        prompts.addPrompt(new Prompt(\"n\", \"no\", \"no\"));\n        prompts.addPrompt(new Prompt(\"y\", \"yes\", \"yes\"));\n        prompts.addPrompt", "first_line_groundtruth": "add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{", "first_line_prediction": "addPrompt(new Prompt(\"y\", \"yes\", \"yes\"));", "match": 0}
{"groundtruth": ".add(Prompt.of(\"List Steps\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{", "prediction": ".add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet", "first_line_groundtruth": ".add(Prompt.of(\"List Steps\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{", "first_line_prediction": ".add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));", "match": 0}
{"groundtruth": ".add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{", "prediction": ".add(Prompt.of(\"List Steps with Comments\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"List Steps with Comments and Comments\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"List Steps with Comments and Comments and Comments\", \"help me add comments to the key steps of the following code snippet and return the optimized", "first_line_groundtruth": ".add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{", "first_line_prediction": ".add(Prompt.of(\"List Steps with Comments\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. Here is the code snippet:{query}\"));", "match": 0}
{"groundtruth": "(AppSettings.getProject(), \"Test connection failed!\", NotificationType.ERROR);", "prediction": "(AppSettings.getProject(), \"Test connection failed!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.ERROR);\n            }\n        });\n    }\n\n    private boolean checkSettings() {\n        if (StringUtils.isBlank(gptKey.getText())) {\n            NotifyUtils.notifyMessage(AppSettings.getProject(), \"Please input your OpenAI API key\", NotificationType.ERROR);\n            return true;\n        }\n        if (StringUtils.isBlank(gptModel.getText())) {\n            NotifyUtils.notifyMessage(AppSettings.getProject(), \"Please input your OpenAI model\", NotificationType.ERROR);\n            return true", "first_line_groundtruth": "(AppSettings.getProject(), \"Test connection failed!\", NotificationType.ERROR);", "first_line_prediction": "(AppSettings.getProject(), \"Test connection failed!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.ERROR);", "match": 0}
{"groundtruth": "String, String> stringStringMap = prompts.asMap();", "prediction": "String, Prompt> promptsMap = prompts.getPromptsMap();\n        for (Prompt prompt : _prompts) {\n            promptsMap.put(prompt.getKey(), prompt);\n        }\n    }\n\n    public static Prompts addDefaultPrompts(Prompts prompts) {\n        prompts.addPrompt(new Prompt(\"testConnMsg\", \"Test Connection Message\", \"Test Connection Message\", \"Test Connection Message\"));\n        prompts.addPrompt(new Prompt(\"enableProxy\", \"Enable Proxy\", \"Enable Proxy\", \"Enable Proxy\"));\n        prompts.addPrompt(new Prompt", "first_line_groundtruth": "String, String> stringStringMap = prompts.asMap();", "first_line_prediction": "String, Prompt> promptsMap = prompts.getPromptsMap();", "match": 0}
{"groundtruth": "gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");", "prediction": "", "first_line_groundtruth": "gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "notifyMessage(AppSettings.getProject(), \"Test connection successfully!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.INFORMATION);", "prediction": "notifySuccess(\"GPT\u6d4b\u8bd5\u6210\u529f\", \"GPT\u6d4b\u8bd5\u6210\u529f\");\n            } else {\n                NotifyUtils.notifyError(\"GPT\u6d4b\u8bd5\u5931\u8d25\", \"GPT\u6d4b\u8bd5\u5931\u8d25\");\n            }\n        });\n    }\n\n    private boolean checkSettings() {\n        if (StringUtils.isBlank(gptKey.getText())) {\n            NotifyUtils.notifyError(\"GPT API Key\u4e0d\u80fd\u4e3a\u7a7a\", \"GPT API Key\u4e0d\u80fd\u4e3a\u7a7a\");\n            return true;\n        }\n        if (StringUtils.isBlank(gptModel.getText())) {\n            NotifyUtils.notifyError(\"GPT Model\u4e0d\u80fd\u4e3a\u7a7a\", \"GPT Model\u4e0d\u80fd\u4e3a\u7a7a\");\n            return true;\n        }\n       ", "first_line_groundtruth": "notifyMessage(AppSettings.getProject(), \"Test connection successfully!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.INFORMATION);", "first_line_prediction": "notifySuccess(\"GPT\u6d4b\u8bd5\u6210\u529f\", \"GPT\u6d4b\u8bd5\u6210\u529f\");", "match": 0}
{"groundtruth": "= original.clone();", "prediction": " = original;\n        this.promptsTable = new PromptsTable(original.getPrompts());\n        this.promptsPane.add(promptsTable.getRootPane(), BorderLayout.CENTER);\n        this.promptsTable.getRootPane().setBorder(BorderFactory.createTitledBorder(\"Prompts\"));\n        this.promptsTable.getRootPane().setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        this.promptsTable.getRootPane().setBorder(BorderFactory.createCompoundBorder(\n                Border", "first_line_groundtruth": "= original.clone();", "first_line_prediction": " = original;", "match": 0}
{"groundtruth": "campaign.getGames().get(id));", "prediction": "campaign.getGame());\n                updateToCampaign.setPlatform(campaign.getPlatform());\n                updateToCampaign.setPrice(campaign.getPrice());\n                updateToCampaign.setPublisher(campaign.getPublisher());\n                updateToCampaign.setReleaseDate(campaign.getReleaseDate());\n                updateToCampaign.setGenre(campaign.getGenre());\n                updateToCampaign.setDeveloper(campaign.getDeveloper());\n                updateToCampaign.setSummary(campaign.getSummary());\n                updateToCampaign.setRating(campaign.getRating());\n                updateToCampaign.setReviews(campaign.getReviews());\n                updateToCampaign", "first_line_groundtruth": "campaign.getGames().get(id));", "first_line_prediction": "campaign.getGame());", "match": 0}
{"groundtruth": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");", "prediction": "append(singleStrings.toString());\n                }\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            } finally {\n                if (is != null) {\n                    try {\n                        is.close();\n                    } catch (IOException e1) {\n                        e1.printStackTrace();\n                    }\n                }\n            }\n        } catch (IOException e1) {\n            e1.printStackTrace();\n        }\n\n        if (sb.length() > 0) {\n            try {\n                FileUtils.write(file, sb.toString());\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n        }\n\n       ", "first_line_groundtruth": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");", "first_line_prediction": "append(singleStrings.toString());", "match": 0}
{"groundtruth": "setBirthYear(customer.getBirthYear());", "prediction": "setPhone(customer.getPhone());\n                userToUpdate.setAddress(customer.getAddress());\n                userToUpdate.setBirthDate(customer.getBirthDate());\n                userToUpdate.setGender(customer.getGender());\n                userToUpdate.setRole(customer.getRole());\n                break;\n            }\n        }\n        System.out.println(\"User is not in database.\");\n    }", "first_line_groundtruth": "setBirthYear(customer.getBirthYear());", "first_line_prediction": "setPhone(customer.getPhone());", "match": 0}
{"groundtruth": "println(user2.getName() +\" is updated to \" + customer.getName());", "prediction": "println(\"User: \" + user2.getId() + \" is updated.\");\n                userToUpdate = user2;\n                break;\n            }\n        }\n        if (userToUpdate == null) {\n            System.out.println(\"User: \" + id + \" is not in database.\");\n        } else {\n            userToUpdate.setFirstName(customer.getFirstName());\n            userToUpdate.setLastName(customer.getLastName());\n            userToUpdate.setEmail(customer.getEmail());\n            userToUpdate.setPhone(customer.getPhone());\n            userToUpdate.setAddress(customer.getAddress());\n            userToUpdate.setCity(customer", "first_line_groundtruth": "println(user2.getName() +\" is updated to \" + customer.getName());", "first_line_prediction": "println(\"User: \" + user2.getId() + \" is updated.\");", "match": 0}
{"groundtruth": "if(campaign1.getId()==id){", "prediction": " if(campaign1.getId() == id){\n                 updateToCampaign = campaign1;\n             }\n        }\n        if(updateToCampaign != null){\n            updateToCampaign.setName(campaign.getName());\n            updateToCampaign.setDescription(campaign.getDescription());\n            updateToCampaign.setStartDate(campaign.getStartDate());\n            updateToCampaign.setEndDate(campaign.getEndDate());\n            updateToCampaign.setBudget(campaign.getBudget());\n            updateToCampaign.setGoal(campaign.getGoal());\n            updateToCampaign.setGoalReached(campaign.getGoalReached());\n            updateToCampaign.setGoalReached", "first_line_groundtruth": "if(campaign1.getId()==id){", "first_line_prediction": " if(campaign1.getId() == id){", "match": 0}
{"groundtruth": "\"\\\"=\\\"\" + string.getValue() + \"\\\";", "prediction": " \"\\\" = \\\"\"+string.getValue()+\"\\\";\");\n                        }\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } finally {\n                    if (is != null) {\n                        try {\n                            is.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * \u626b\u63cf.m\u6587\u4ef6\n     * @param is\n     * @param className\n     * @param oldContent\n     * @return\n     */\n    private List<StringEntity> extraClassEntity(InputStream is, String className, StringBuilder oldContent,Map<String,", "first_line_groundtruth": "\"\\\"=\\\"\" + string.getValue() + \"\\\";", "first_line_prediction": " \"\\\" = \\\"\"+string.getValue()+\"\\\";\");", "match": 0}
{"groundtruth": "(campaign.getId() == id){", "prediction": "(campaign.getId() == id){\n                campaigns.remove(campaign);\n                System.out.println(\"Campaign deleted\");\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void updateCampaign(Campaign campaign) {\n        for (Campaign campaign1 : campaigns) {\n            if(campaign1.getId() == campaign.getId()){\n                campaigns.remove(campaign1);\n                campaigns.add(campaign);\n                System.out.println(\"Campaign updated\");\n                break;\n            }\n        }\n    }\n\n    @Override\n    public List<Campaign> getAllCampaigns() {\n        return campaigns;\n   ", "first_line_groundtruth": "(campaign.getId() == id){", "first_line_prediction": "(campaign.getId() == id){", "match": 1}
{"groundtruth": "!(customer.getGames().contains(game))){", "prediction": "game.getCountOwner()==campaignService.getCampaigns().size()){\n            game.setCountOwner(0);\n            game.setCost(game.getCost()+(game.getCost()*campaignService.getCampaigns().get(0).getDiscountAmount()/100));\n            System.out.println(\"New Cost \"+ game.getName()+\" is \"+game.getCost());\n            System.out.println(\"Game \" + game.getName() + \" sold to \" + customer.getName());\n            customer.addGame(game);\n        }\n    }", "first_line_groundtruth": "!(customer.getGames().contains(game))){", "first_line_prediction": "game.getCountOwner()==campaignService.getCampaigns().size()){", "match": 0}
{"groundtruth": "while (iterator.temProximo()) {", "prediction": "\n\t\twhile (iterator.hasNext()) {\n\t\t\tPlaylistItem item = iterator.next();\n\t\t\tSystem.out.println(item.toString());\n\t\t}", "first_line_groundtruth": "while (iterator.temProximo()) {", "first_line_prediction": "", "match": 0}
{"groundtruth": ".println(playlist1.execute());", "prediction": ".println(\"Musica original: \" + musicaComNotaLetraOriginal.toString());\n\t\tSystem.out.println(\"Musica traduzida: \" + musicaComNotaLetraOriginalTraduzida.toString());\n\t\tSystem.out.println(\"Musica somente com nota: \" + musicaSomenteComNota.toString());\n\t\tSystem.out.println(\"Playlist 1: \" + playlist1.toString());\n\t\tSystem.out.println(\"Playlist 2: \" + playlist2.toString());", "first_line_groundtruth": ".println(playlist1.execute());", "first_line_prediction": ".println(\"Musica original: \" + musicaComNotaLetraOriginal.toString());", "match": 0}
{"groundtruth": "listener.onChangeMode();", "prediction": "\tlistener.update();\n\t\t}", "first_line_groundtruth": "listener.onChangeMode();", "first_line_prediction": "\tlistener.update();", "match": 0}
{"groundtruth": "= playlistItem.execute();", "prediction": " = playlistItem.execute();\n\t\t\tSystem.out.println(content);", "first_line_groundtruth": "= playlistItem.execute();", "first_line_prediction": " = playlistItem.execute();", "match": 0}
{"groundtruth": "playlist1.insert(playlist2);", "prediction": "\n\t\tPlaylist playlist3 = new Playlist(\"Minha playlist 3\");\n\t\tplaylist3.insert(musicaComNotaLetraOriginal);\n\t\tplaylist3.insert(musicaComNotaLetraOriginalTraduzida);", "first_line_groundtruth": "playlist1.insert(playlist2);", "first_line_prediction": "", "match": 0}
{"groundtruth": "iterator = player.createIterator();", "prediction": "\tSystem.out.println(\"RepeatAll\");\n\t\t\t} else if (numero % 3 == 0){\n\t\t\t\tplayer.setMode(PlayerMode.RepeatOne);\n\t\t\t\t\tSystem.out.println(\"RepeatOne\");\n\t\t\t} else {\n\t\t\t\tplayer.setMode(PlayerMode.Shuffle);\n\t\t\t\t\tSystem.out.println(\"Shuffle\");\n\t\t\t}\n\t\t}", "first_line_groundtruth": "iterator = player.createIterator();", "first_line_prediction": "\tSystem.out.println(\"RepeatAll\");", "match": 0}
{"groundtruth": "playlistItem = iterator.proximo();", "prediction": "ithItem = iterator.getProximo();\n\t\t\tithItem.execute();", "first_line_groundtruth": "playlistItem = iterator.proximo();", "first_line_prediction": "ithItem = iterator.getProximo();", "match": 0}
{"groundtruth": "(\"\\n::::::::::::\\nModo: %s, est\u00e1 ativado!\\n\", player.getMode());", "prediction": "(\"Modem alterado para %s\\n\", player.getMode());", "first_line_groundtruth": "(\"\\n::::::::::::\\nModo: %s, est\u00e1 ativado!\\n\", player.getMode());", "first_line_prediction": "(\"Modem alterado para %s\\n\", player.getMode());", "match": 0}
{"groundtruth": "player.createIterator();", "prediction": " player.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tPlaylistItem item = iterator.next();\n\t\t\tSystem.out.println(item.execute());\n\t\t}", "first_line_groundtruth": "player.createIterator();", "first_line_prediction": " player.iterator();", "match": 0}
{"groundtruth": "MessageUtils.showNotify(\"\u8bf7\u9009\u62e9\u5e03\u5c40\u6587\u4ef6\");", "prediction": " return;\n            }\n            List<StringEntity> strings;\n            StringBuilder oldContent = new StringBuilder();\n            try {\n                oldContent.append(new String(file.contentsToByteArray(), \"utf-8\"));\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n            InputStream is = null;\n            try {\n                is = file.getInputStream();\n                strings = extraLayoutEntity(is, file.getNameWithoutExtension().toLowerCase(), oldContent, valueKeyMap);\n                if (strings != null) {\n                    for (StringEntity string : strings) {\n                        sb.append(\"\\n    <string name", "first_line_groundtruth": "MessageUtils.showNotify(\"\u8bf7\u9009\u62e9\u5e03\u5c40\u6587\u4ef6\");", "first_line_prediction": " return;", "match": 0}
{"groundtruth": "tokens.addAll(Lexer.tokenize(s));", "prediction": " tokens.addAll(Lexer.tokenize(s));\n\n            reader.close();\n        } catch (IOException e) {\n            System.out.println(\"Error while reading file\");\n            System.exit(1);\n        }\n\n        return tokens;\n    }\n\n    // Returns a file path to a file which is selected from the user\n    private static String selectFile() {\n        File file = new File(\"src/core/files\");\n        File[] files = file.listFiles();\n\n        if (files == null) {\n            System.out.println(\"No files found\");\n            System.exit(1);\n        }\n\n        String[] file", "first_line_groundtruth": "tokens.addAll(Lexer.tokenize(s));", "first_line_prediction": " tokens.addAll(Lexer.tokenize(s));", "match": 0}
{"groundtruth": "+ \": \"+ selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";", "prediction": " + \" \" + comment;\n            else currComment = currComment + \"\\n\" + formattedDate + \" \" + comment;\n            collision.setComment(currComment);\n            collision.setEngineer(selectedEngineer);\n            collisionsRepository.save(collision);\n        }\n    }\n\n    public Page<Collision> findAll(Pageable pageable) {\n        return collisionsRepository.findAll(pageable);\n    }\n\n    public Page<Collision> findAllByProject(Project project, Pageable pageable) {\n        return collisionsRepository.findAllByProjectBase(project, pageable);\n    }\n\n    public Page<Collision> findAllBy", "first_line_groundtruth": "+ \": \"+ selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";", "first_line_prediction": " + \" \" + comment;", "match": 0}
{"groundtruth": "> foundCollision = collisionsRepository.findByIdFetchEngineer(id);", "prediction": "> foundCollision = collisionsRepository.findById(id);\n\n        return foundCollision.orElse(null);\n    }\n\n    public Collision save(Collision collision) {\n        return collisionsRepository.save(collision);\n    }\n\n    public void delete(Collision collision) {\n        collisionsRepository.delete(collision);\n    }\n\n    public Page<Collision> findAll(Pageable pageable) {\n        return collisionsRepository.findAll(pageable);\n    }\n\n    public List<Collision> findAll() {\n        return collisionsRepository.findAll();\n    }\n\n    public List<Collision> findAllByProjectBase(Project project) {\n        return collisionsRepository.findAllByProject", "first_line_groundtruth": "> foundCollision = collisionsRepository.findByIdFetchEngineer(id);", "first_line_prediction": "> foundCollision = collisionsRepository.findById(id);", "match": 0}
{"groundtruth": "originalEngineer = engineersService.findOne(id);", "prediction": " engineer = engineersService.findOne(id);\n        engineer.setFirstName(updatedEngineer.getFirstName());\n        engineer.setLastName(updatedEngineer.getLastName());\n        engineer.setBirthDate(updatedEngineer.getBirthDate());\n        engineer.setAddress(updatedEngineer.getAddress());\n        engineer.setPhone(updatedEngineer.getPhone());\n        engineer.setEmail(updatedEngineer.getEmail());\n        engineer.setRole(updatedEngineer.getRole());\n        engineer.setCollisions(updatedEngineer.getCollisions());\n\n        engineersService.save(engineer);\n\n        return", "first_line_groundtruth": "originalEngineer = engineersService.findOne(id);", "first_line_prediction": " engineer = engineersService.findOne(id);", "match": 0}
{"groundtruth": "\"engineers\", engineersService.findAll());", "prediction": "project);\n        model.addAttribute(\"engineers\", engineersService.findAll());\n\n        return \"projects/new\";\n    }\n\n    @PostMapping(\"/new\")\n    public String createProject(@Valid @ModelAttribute(\"project\") Project project,\n                                BindingResult bindingResult) {\n        if (bindingResult.hasErrors()) {\n            return \"projects/new\";\n        }\n\n        projectService.save(project);\n\n        return \"redirect:/projects/\" + project.getId();\n    }\n\n    @GetMapping(\"/{id}/edit\")\n    public String editProject(@PathVariable(\"id\") int project_id, Model model) {\n        Project project = project", "first_line_groundtruth": "\"engineers\", engineersService.findAll());", "first_line_prediction": "project);", "match": 0}
{"groundtruth": ".findByIdFetchCollisions(engineerDetails.getEngineer().getId());", "prediction": " .getEngineerById(engineerDetails.getEngineerId());\n\n        model.addAttribute(\"engineer\", engineer);\n        model.addAttribute(\"collisions\", collisionsService.getCollisionsByEngineerId(engineerDetails.getEngineerId()));\n        model.addAttribute(\"projects\", projectService.getProjectsByEngineerId(engineerDetails.getEngineerId()));\n\n        return \"account\";\n    }", "first_line_groundtruth": ".findByIdFetchCollisions(engineerDetails.getEngineer().getId());", "first_line_prediction": " .getEngineerById(engineerDetails.getEngineerId());", "match": 0}
{"groundtruth": "Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);", "prediction": " collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {\n                    collision.setComment(comment);\n                    collision.setEngineer(selectedEngineer);\n                }\n         );\n    }\n\n    public Page<Collision> findAll(Pageable pageable) {\n        return collisionsRepository.findAll(pageable);\n    }\n\n    public Page<Collision> findAllByProject(Project project, Pageable pageable) {\n        return collisionsRepository.findAllByProjectBase(project, pageable);\n    }\n\n    public Page<Collision> findAllByProjectAndEngineer(Project project, Engineer engineer, Pageable pageable)", "first_line_groundtruth": "Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);", "first_line_prediction": " collisionsRepository.findByIdFetchEngineer(id).ifPresent(", "match": 0}
{"groundtruth": "= engineersService.findByIdFetchCollisions(id);", "prediction": " = engineersService.findById(id);\n        model.addAttribute(\"engineer\", engineer);\n        return \"engineers/show\";\n    }\n\n    @GetMapping(\"/new\")\n    public String newEngineer(Model model) {\n        model.addAttribute(\"engineer\", new Engineer());\n        return \"engineers/new\";\n    }\n\n    @PostMapping(\"/new\")\n    public String createEngineer(@Valid Engineer engineer, BindingResult bindingResult, Model model) {\n        if (bindingResult.hasErrors()) {\n            return \"engineers/new\";\n        }\n\n        engineersService.save(engineer);\n        return \"redirect:/", "first_line_groundtruth": "= engineersService.findByIdFetchCollisions(id);", "first_line_prediction": " = engineersService.findById(id);", "match": 0}
{"groundtruth": "\"engineer\", engineersService.findOne(id));", "prediction": "engineersService.findByIdFetchCollisions(id));\n        return \"engineers/edit\";\n    }\n\n    @PostMapping(\"/{id}/edit\")\n    public String update(@Valid @ModelAttribute Engineer engineer, BindingResult bindingResult, Model model) {\n        if (bindingResult.hasErrors()) {\n            return \"engineers/edit\";\n        }\n\n        engineersService.update(engineer);\n        return \"redirect:/engineers/\" + engineer.getId();\n    }\n\n    @GetMapping(\"/new\")\n    public String newEngineer(Model model) {\n        model.addAttribute(new Engineer());\n        return \"engineers/edit", "first_line_groundtruth": "\"engineer\", engineersService.findOne(id));", "first_line_prediction": "engineersService.findByIdFetchCollisions(id));", "match": 0}
{"groundtruth": "collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {", "prediction": " collisionsRepository.release(id);\n    }\n\n    public Page<Collision> findAll(Pageable pageable) {\n        return collisionsRepository.findAll(pageable);\n    }\n\n    public Page<Collision> findAllByProject(Project project, Pageable pageable) {\n        return collisionsRepository.findAllByProjectBase(project, pageable);\n    }\n\n    public Page<Collision> findAllByProjectAndEngineer(Project project, Engineer engineer, Pageable pageable) {\n        return collisionsRepository.findAllByProjectAndEngineer(project, engineer, pageable);\n    }\n\n    public Page<Collision> findAllByProjectAndEngine", "first_line_groundtruth": "collisionsRepository.findByIdFetchEngineer(id).ifPresent(", "first_line_prediction": " collisionsRepository.release(id);", "match": 0}
{"groundtruth": "(engineerDAO.index());", "prediction": " (engineersRepository.findAll());\n        engineers.sort(Comparator.comparing(Engineer::getCollisions).reversed());\n        return engineers;\n    }\n\n    public List<Engineer> findAllSortedByCollisionsSize(int project_id) {\n        List<Engineer> engineers = new ArrayList<> (engineersRepository.findAllOnProject(project_id));\n        engineers.sort(Comparator.comparing(Engineer::getCollisions).reversed());\n        return engineers;\n    }\n\n    public List<Engineer> findAllSortedByCollisionsSize(int project_id, int limit)", "first_line_groundtruth": "(engineerDAO.index());", "first_line_prediction": " (engineersRepository.findAll());", "match": 0}
{"groundtruth": "model.addAttribute(\"comments\", collision.getComments());", "prediction": " model.addAttribute(\"project\", projectService.findOne(project_id));\n\n        if (authority.equals(\"ROLE_ADMIN\") || collisionOwner.getId() == engineer.getId()) {\n            return \"collisions/show\";\n        } else {\n            return \"redirect:/projects/\" + project_id + \"/collisions\";\n        }\n    }\n\n    @GetMapping(\"/{id}/edit\")\n    public String edit(@PathVariable(\"id\") int id,\n                       @PathVariable(\"project_id\") int project_id,\n                       Model model) {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        String authority = authentication.", "first_line_groundtruth": "model.addAttribute(\"comments\", collision.getComments());", "first_line_prediction": " model.addAttribute(\"project\", projectService.findOne(project_id));", "match": 0}
{"groundtruth": "= collisionsService.findOneAndEngineer(id);", "prediction": " = collisionsService.findOne(id);\n        Project project = projectService.findOne(project_id);\n\n        if (collision == null) {\n            return \"redirect:/projects/\" + project_id + \"/collisions\";\n        }\n\n        if (authority.equals(\"ROLE_ENGINEER\")) {\n            engineer = engineersService.findByEmail(collision.getEngineer().getEmail());\n            model.addAttribute(\"engineer\", engineer);\n        }\n\n        model.addAttribute(\"collision\", collision);\n        model.addAttribute(\"project\", project);\n\n        return \"collisions/show\";\n    }\n\n    @GetMapping(\"/{id}/download\")\n   ", "first_line_groundtruth": "= collisionsService.findOneAndEngineer(id);", "first_line_prediction": " = collisionsService.findOne(id);", "match": 0}
{"groundtruth": "(id, engineerDetails.getEngineer(), comment);", "prediction": "(id, comment, engineerDetails.getEngineer());\n        return \"redirect:/projects/\" + project_id + \"/collisions/\" + id;\n    }", "first_line_groundtruth": "(id, engineerDetails.getEngineer(), comment);", "first_line_prediction": "(id, comment, engineerDetails.getEngineer());", "match": 0}
{"groundtruth": "Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);", "prediction": "Engineer> foundEngineer = engineersRepository.findById(id);\n\n        if (foundEngineer.isPresent()) {\n            foundEngineer.get().getCollisions();\n        }\n\n        return foundEngineer.orElse(null);\n    }\n\n    public void save(Engineer engineer) {\n        if (engineer.getPassword() != null) {\n            engineer.setPassword(passwordEncoder.encode(engineer.getPassword()));\n        }\n\n        engineersRepository.save(engineer);\n    }\n\n    public void delete(Engineer engineer) {\n        engineersRepository.delete(engineer);\n    }\n\n    public void delete", "first_line_groundtruth": "Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);", "first_line_prediction": "Engineer> foundEngineer = engineersRepository.findById(id);", "match": 0}
{"groundtruth": "handle = getHandle(mapper.getLayout(target.getClass()));", "prediction": " handle = getHandle(segment.layout());\n            }\n            handle.set(target, getGetter(segment.layout()).invoke());\n        } else if(fieldType.equals(MemorySegment.class)){\n            var offset = getOffset(segment.layout());\n            if(offset != null){\n                handle.set(target, segment.asSlice(offset));\n            }\n        } else if(fieldType.equals(Array.class)){\n            handle.set(target, segment.asSlice(getOffset(segment.layout())));\n        } else if(fieldType.equals(Pointer.class)){\n            handle.set(target, segment", "first_line_groundtruth": "handle = getHandle(mapper.getLayout(target.getClass()));", "first_line_prediction": " handle = getHandle(segment.layout());", "match": 0}
{"groundtruth": "mapper.getLayout(target.getClass()).byteOffset(MemoryLayout.PathElement.groupElement(model.name()));", "prediction": "0;\n        if(model.isPointer()){\n            offset = Pointer.getAddress(segment);\n        }\n        return segment.asSlice(offset, mapper.sizeOf(model.type()));\n    }\n\n    @Override\n    public void copy(NativeMapper mapper, MemorySegment source, T target) throws IllegalAccessException {\n        var fieldType = field.getType();\n        if(fieldType.equals(VarHandle.class)){\n            if(handle == null){\n                handle = getHandle(mapper.getLayout(target.getClass()));\n            }\n            handle.set(target, source);\n        }else if(fieldType.equals(MemorySegment", "first_line_groundtruth": "mapper.getLayout(target.getClass()).byteOffset(MemoryLayout.PathElement.groupElement(model.name()));", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "var structDef = mapper.getOrDefineStruct(fieldType);", "prediction": " field.set(target, new Pointer<>(\n                     pointerSegmentForField(mapper, target, segment),\n                     mapper.getLayout(model.type()),\n                     model.type(),\n                     model.isPointer()\n                     ));\n        }\n    }\n\n    @Override\n    public void copy(NativeMapper mapper, T source, T target) throws IllegalAccessException {\n        if(Util.skipField(field, target)){\n            return;\n        }\n\n        var fieldType = field.getType();\n        if(fieldType.equals(VarHandle.class)){\n            if(handle == null){\n                handle = getHandle(mapper.getLayout(target.getClass", "first_line_groundtruth": "var structDef = mapper.getOrDefineStruct(fieldType);", "first_line_prediction": " field.set(target, new Pointer<>(", "match": 0}
{"groundtruth": "instance.getCore().debug(\"Plugin is not setup / ProxyProtocol is off / Player is on DirectConnectWhitelist (return)\");", "prediction": " channel.pipeline().addLast(new ProxyProtocolHandler());\n                }\n            }\n        };\n\n        // Handle future channels\n        beginInitProtocol = new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel channel) {\n                channel.pipeline().addLast(new ProxyProtocolHandler());\n            }\n        };\n    }\n\n    private void registerChannelHandler() {\n        // Create the server channel handler\n        serverChannelHandler = new ServerChannelInitializer();\n        createServerChannelHandler();\n\n        // Create the proxy protocol handler\n        ProxyProtocolHandler proxyProtocolHandler = new ProxyProtocolHandler();\n\n        // Register the proxy protocol handler\n        serverChannel", "first_line_groundtruth": "instance.getCore().debug(\"Plugin is not setup / ProxyProtocol is off / Player is on DirectConnectWhitelist (return)\");", "first_line_prediction": " channel.pipeline().addLast(new ProxyProtocolHandler());", "match": 0}
{"groundtruth": "instance.getCore().debug(\"Adding Handler...\");", "prediction": " // Get the server connection\n                    Object serverConnection = getServerConnection.get(getMinecraftServer.get(instance.getServer().getBukkitServer()));\n\n                    // Get the network managers\n                    if (networkManagersFieldAccessor != null) {\n                        networkManagers = networkManagersFieldAccessor.get(serverConnection);\n                    } else {\n                        networkManagers = (List<Object>) getNetworkMarkers.invoke(serverConnection);\n                    }\n\n                    // Get the network manager\n                    Object networkManager = networkManagers.stream().filter(networkManager -> socketAddressFieldAccessor.get(networkManager) instanceof InetSocketAddress).findFirst().orElse(null);\n\n                   ", "first_line_groundtruth": "instance.getCore().debug(\"Adding Handler...\");", "first_line_prediction": " // Get the server connection", "match": 0}
{"groundtruth": ".getEventManager(), neoProtectVelocity.getLogger()));", "prediction": "\n                                                                                                  .getScheduler()\n                                                                                                  .buildTask(neoProtectVelocity, () -> neoProtectVelocity.getProxy()\n                                                                                                                                                 .getPlayers()\n                                                                                                                                                 .stream()\n                                                                                                                                                 .filter(ConnectedPlayer.class::isInstance)\n                                                                                                                                                 .map(ConnectedPlayer.class::cast)\n                                                                                                                                                 .filter(p -> p.getPlayer()\n                                                                                                                                                         .getUniqueId()\n                                                                                                                                                         .equals(player.getUniqueId()))\n                                                                                                                                                 .findFirst()\n                                                                                                                                                 .ifPresent(p -> p.getChannel()\n                                                                                                                                                         .pipeline()\n                                                                                                                                                         .remove", "first_line_groundtruth": ".getEventManager(), neoProtectVelocity.getLogger()));", "first_line_prediction": "", "match": 0}
{"groundtruth": "core.severe(exception.getMessage(), exception);", "prediction": " core.severe(request + \" failed cause (\" + exception + \")\");\n        }\n        return null;\n    }\n\n    protected Request.Builder defaultBuilder() {\n        return new Request.Builder();\n    }\n\n    protected String getSubDirectory(RequestType type, Object... value) {\n        StringBuilder builder = new StringBuilder();\n        Formatter formatter = new Formatter(builder);\n        formatter.format(type.toString(), value);\n        return builder.toString();\n    }\n\n    protected String getSubDirectory(RequestType type) {\n        return type.toString();\n    }\n\n    protected RequestBody getRequestBody(RequestType type, Object... value) {\n        return null", "first_line_groundtruth": "core.severe(exception.getMessage(), exception);", "first_line_prediction": " core.severe(request + \" failed cause (\" + exception + \")\");", "match": 0}
{"groundtruth": "instance.getCore().debug(\"Player connected over IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (warning)\");", "prediction": " instance.getCore().debug(\"Player is not on a NeoServerIP (return)\");\n                    return;\n                }\n\n                channel.pipeline().addLast(new ProxyProtocolDecoder());\n                channel.pipeline().addLast(new ProxyProtocolEncoder());\n                channel.pipeline().addLast(new ProxyProtocolHandler());\n            }\n        };\n\n        // Handle future channels\n        beginInitProtocol = new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel channel) {\n                channel.pipeline().addLast(new ProxyProtocolDecoder());\n                channel.pipeline().addLast(new ProxyProtocolEncoder());\n                channel.pipeline().add", "first_line_groundtruth": "instance.getCore().debug(\"Player connected over IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (warning)\");", "first_line_prediction": " instance.getCore().debug(\"Player is not on a NeoServerIP (return)\");", "match": 0}
{"groundtruth": "core.severe(\"Failed to load API-Key. Key is null or not valid\");", "prediction": " core.getLogger().severe(\"APIKey is invalid!\");\n             core.getLogger().severe(\"Please generate a new APIKey in the config.yml\");\n             core.getLogger().severe(\"You can generate a new APIKey by running the command /apikey\");\n             core.getLogger().severe(\"If you don't want to use the API, please set the APIKey to an empty string\");\n             core.getLogger().severe(\"If you want to use the API, please set the APIKey to a valid 64 character string\");\n             core.getLogger().severe(\"If you don't want to use", "first_line_groundtruth": "core.severe(\"Failed to load API-Key. Key is null or not valid\");", "first_line_prediction": " core.getLogger().severe(\"APIKey is invalid!\");", "match": 0}
{"groundtruth": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, ex);", "prediction": " // Damn you, late bind\n                    instance.getCore().info(\"Delaying server channel injection due to late bind.\");\n\n                    new BukkitRunnable() {\n                        @Override\n                        public void run() {\n                            registerChannelHandler();\n                            instance.getCore().info(\"Late bind injection successful.\");\n                        }\n                    }.runTask(instance);\n                }\n            }\n        };\n\n        // Handle future channels\n        beginInitProtocol = new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel channel) {\n                if (!Config.isProxyProtocol() | !instance.getCore().isSetup() | instance.get", "first_line_groundtruth": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, ex);", "first_line_prediction": " // Damn you, late bind", "match": 0}
{"groundtruth": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");", "prediction": "\n\n        if (updateIP) {\n            core.info(\"Auto-Update of IP-Address is enabled\");\n        } else {\n            core.info(\"Auto-Update of IP-Address is disabled\");\n        }\n\n        if (debugMode) {\n            core.info(\"DebugMode is enabled\");\n        } else {\n            core.info(\"DebugMode is disabled\");\n        }\n\n        if (geyserServerIP.isEmpty()) {\n            core.severe(\"Failed to load GeyserServerIP. IP is null\");\n            return;\n        }\n\n        core.info(\"GeyserServerIP loaded successful '\" + gey", "first_line_groundtruth": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "core.severe(\"Failed to load GameshieldID. ID is null\");", "prediction": " core.severe(\"Failed to load gameshield.serverId. Key is null or not valid\");\n             return;\n        }\n        if (backendID.isEmpty()) {\n            core.severe(\"Failed to load gameshield.backendId. Key is null or not valid\");\n            return;\n        }\n        if (geyserBackendID.isEmpty()) {\n            core.severe(\"Failed to load gameshield.geyserBackendId. Key is null or not valid\");\n            return;\n        }\n        if (geyserServerIP.isEmpty()) {\n            core.severe(\"Failed to load geyser", "first_line_groundtruth": "core.severe(\"Failed to load GameshieldID. ID is null\");", "first_line_prediction": " core.severe(\"Failed to load gameshield.serverId. Key is null or not valid\");", "match": 0}
{"groundtruth": "core.info(\"API-Key loaded successful '\" + \"******************************\" + APIKey.substring(32) + \"'\");", "prediction": "\n\n        if (VersionUtils.isVersionAtLeast(\"1.16.5\")) {\n            updateSetting = config.getString(\"updateSetting\", \"1\");\n        } else {\n            updateSetting = config.getString(\"updateSetting\", \"0\");\n        }\n\n        List<String> languages = new ArrayList<>();\n        languages.add(\"de\");\n        languages.add(\"en\");\n        languages.add(\"es\");\n        languages.add(\"fr\");\n        languages.add(\"it\");\n        languages.add(\"ja\");\n        languages.add(\"ko\");\n        languages.add(\"pt\");\n        languages.add(\"ru\");\n        languages", "first_line_groundtruth": "core.info(\"API-Key loaded successful '\" + \"******************************\" + APIKey.substring(32) + \"'\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "core.info(\"GameshieldID loaded successful '\" + gameShieldID + \"'\");", "prediction": "\n\n        if (updateIP) {\n            core.info(\"Auto-Update of IP-Address is enabled\");\n        } else {\n            core.info(\"Auto-Update of IP-Address is disabled\");\n        }\n\n        if (debugMode) {\n            core.info(\"Debug-Mode is enabled\");\n        } else {\n            core.info(\"Debug-Mode is disabled\");\n        }\n\n        if (geyserServerIP.isEmpty()) {\n            core.severe(\"Failed to load GeyserServerIP. IP is null\");\n            return;\n        }\n\n        core.info(\"GeyserServerIP loaded successful '\" +", "first_line_groundtruth": "core.info(\"GameshieldID loaded successful '\" + gameShieldID + \"'\");", "first_line_prediction": "", "match": 0}
{"groundtruth": ".equals(core.getRestAPI().getStatsServer())) {", "prediction": "\n                    .startsWith(\"https://api.neoprotect.net/v2/auth/login\")) {\n                core.getLogger().error(\"Connection to NeoProtect API failed: \" + connectionException.getMessage());\n            }\n            return null;\n        }\n    }\n\n    protected Request.Builder defaultBuilder() {\n        return new Request.Builder();\n    }\n\n    protected String getSubDirectory(RequestType type, Object... value) {\n        Formatter formatter = new Formatter();\n        formatter.format(type.toString(), value);\n        return formatter.toString();\n    }\n\n    protected String getSubDirectory(RequestType type) {\n        return type.toString();", "first_line_groundtruth": ".equals(core.getRestAPI().getStatsServer())) {", "first_line_prediction": "", "match": 0}
{"groundtruth": "(Config.getAPIKey());", "prediction": "(false);\n    }\n\n    protected Request.Builder defaultBuilder(boolean isStats) {\n        return new Request.Builder().addHeader(\"Authorization\", \"Bearer \" + (isStats ? core.getRestAPI().getStatsToken() : core.getRestAPI().getToken()));\n    }\n\n    protected String getSubDirectory(RequestType type, Object... value) {\n        StringBuilder builder = new StringBuilder();\n        Formatter formatter = new Formatter(builder);\n        formatter.format(type.toString(), value);\n        formatter.close();\n        return builder.toString();\n    }", "first_line_groundtruth": "(Config.getAPIKey());", "first_line_prediction": "(false);", "match": 0}
{"groundtruth": "instance.getCore().severe(\"Error: The server was unable to set the IP address from the 'HAProxyMessage'. Therefore we closed the channel.\", exception);", "prediction": " exception.printStackTrace();\n            }\n\n            super.channelRead(ctx, msg);\n        }\n    }\n\n    private boolean isIPInRange(String ipRange, String ip) {\n        String[] ipRangeParts = ipRange.split(\"\\\\.\");\n        String[] ipParts = ip.split(\"\\\\.\");\n\n        for (int i = 0; i < 4; i++) {\n            int ipRangePart = Integer.parseInt(ipRangeParts[i]);\n            int ipPart = Integer.parseInt(ipParts[i]);\n\n            if (ipRangePart > ipPart)\n                return false;\n\n            if (ipRangePart < ip", "first_line_groundtruth": "instance.getCore().severe(\"Error: The server was unable to set the IP address from the 'HAProxyMessage'. Therefore we closed the channel.\", exception);", "first_line_prediction": " exception.printStackTrace();", "match": 0}
{"groundtruth": "instance.getCore().info(\"Proceeding with the server channel injection...\");", "prediction": " // Get the network managers\n            networkManagers = getNetworkMarkers != null ? (List<Object>) getNetworkMarkers.invoke(getServerConnection.invoke(getMinecraftServer.invoke(Bukkit.getServer()))) : networkManagersFieldAccessor.get(getServerConnection.invoke(getMinecraftServer.invoke(Bukkit.getServer())));\n\n            // Get the channel handlers\n            serverChannelHandler = new ServerChannelInitializer(this);\n            beginInitProtocol = new ChannelInitializer<Channel>() {\n                @Override\n                protected void initChannel(Channel channel) throws Exception {\n                    channel.pipeline().addLast(new ProxyProtocolDecoder());\n                    channel.pipeline", "first_line_groundtruth": "instance.getCore().info(\"Proceeding with the server channel injection...\");", "first_line_prediction": " // Get the network managers", "match": 0}
{"groundtruth": "instance.getCore().info(\"Late bind injection successful.\");", "prediction": " instance.getCore().info(\"Server channel injection delayed.\");\n                }\n            }.runTaskLater(instance, 1);\n        }\n    }\n\n    /**\n     * Register the channel handler for the server channel.\n     * <p>\n     * This is done in a separate thread to avoid a deadlock.\n     */\n    private void registerChannelHandler() {\n        new BukkitRunnable() {\n            @Override\n            public void run() {\n                serverChannelHandler = new ServerChannelInitializer();\n                serverChannelHandler.initChannel(instance.getServer().getHandle());\n\n                instance.getCore().info(\"Server channel handler registered.\");\n            }", "first_line_groundtruth": "instance.getCore().info(\"Late bind injection successful.\");", "first_line_prediction": " instance.getCore().info(\"Server channel injection delayed.\");", "match": 0}
{"groundtruth": "Reflection.getField(serverConnection.getClass(), List.class, i).get(serverConnection);", "prediction": " networkManagers.get(i);\n            if (list.size() > 0) {\n                networkManagers = list;\n                looking = false;\n            }\n        }\n\n        // Add the proxy protocol handler to the pipeline\n        networkManagers.forEach(networkManager -> {\n            try {\n                Reflection.invoke(networkManager, \"a\", serverChannelHandler);\n            } catch (Exception ex) {\n                instance.getCore().severe(\"Cannot inject incoming channel \" + networkManager, ex);\n            }\n        });\n    }\n\n    private boolean isIPInRange(String ipRange, String ip) {\n        String[] split = ipRange", "first_line_groundtruth": "Reflection.getField(serverConnection.getClass(), List.class, i).get(serverConnection);", "first_line_prediction": " networkManagers.get(i);", "match": 0}
{"groundtruth": "instance.getCore().info(\"Delaying server channel injection due to late bind.\");", "prediction": " instance.getCore().info(\"Proceeding with the server channel injection...\");\n             registerChannelHandler();\n        }\n\n        instance.getCore().info(\"Proceeding with the server channel injection...\");\n        registerChannelHandler();\n    }\n\n    /**\n     * Registers the channel handler for the server channel.\n     * <p>\n     * This is done in a separate thread, so that the server channel is not blocked.\n     */\n    private void registerChannelHandler() {\n        new BukkitRunnable() {\n            @Override\n            public void run() {\n                try {\n                    serverChannelHandler = new ServerChannelInitializer();\n                    serverChannelHandler.initChannel", "first_line_groundtruth": "instance.getCore().info(\"Delaying server channel injection due to late bind.\");", "first_line_prediction": " instance.getCore().info(\"Proceeding with the server channel injection...\");", "match": 0}
{"groundtruth": "this.instance.getCore().info(\"Found the server channel and added the handler. Injection successfully!\");", "prediction": " // We don't need to add the proxy message handler to the pipeline, because it's already added by the decoder\n                //serverChannel.pipeline().addAfter(\"haproxy-decoder\", \"haproxy-handler\", HAPROXY_MESSAGE_HANDLER);\n            }\n        }\n    }\n\n    private boolean isIPInRange(String ipRange, String ip) {\n        String[] ipRangeParts = ipRange.split(\"\\\\.\");\n        String[] ipParts = ip.split(\"\\\\.\");\n\n        for (int i = 0; i < 4; i++) {\n            int ipRangePart = Integer.parseInt(ipRangeParts[i", "first_line_groundtruth": "this.instance.getCore().info(\"Found the server channel and added the handler. Injection successfully!\");", "first_line_prediction": " // We don't need to add the proxy message handler to the pipeline, because it's already added by the decoder", "match": 0}
{"groundtruth": "if (instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getServer().getOnlineMode())) {", "prediction": " if (instance.getCore().isSetup() && instance.getCore().getPlayerInSetup().contains(player.getUniqueId())) {\n            instance.sendMessage(player, localization.get(locale, \"setup.in-progress\"));\n         }\n\n        if (instance.getCore().isSetup() && instance.getCore().getPlayerInSetup().isEmpty()) {\n            instance.sendMessage(player, localization.get(locale, \"setup.complete\"));\n            instance.getCore().setSetup(false);\n        }\n\n        if (instance.getCore().isSetup() && instance.getCore().getPlayerInSetup().contains(", "first_line_groundtruth": "if (instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getServer().getOnlineMode())) {", "first_line_prediction": " if (instance.getCore().isSetup() && instance.getCore().getPlayerInSetup().contains(player.getUniqueId())) {", "match": 0}
{"groundtruth": "instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "prediction": "instance.getCore().isSetup() && instance.getCore().getPlayerInSetup().contains(player.getUniqueId())) {\n                    instance.sendMessage(player, localization.get(locale, \"setup.required.third\"));\n                }\n\n                if (instance.getCore().isSetup() && !instance.getCore().getPlayerInSetup().contains(player.getUniqueId())) {\n                    instance.sendMessage(player, localization.get(locale, \"setup.required.second\"));\n                }\n\n                if (instance.getCore().isSetup() && instance.getCore().getPlayerInSetup().contains(player.getUniqueId())", "first_line_groundtruth": "instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "first_line_prediction": "instance.getCore().isSetup() && instance.getCore().getPlayerInSetup().contains(player.getUniqueId())) {", "match": 0}
{"groundtruth": ".forLanguageTag(Config.getLanguage()), new File(\"plugins/NeoProtect/languages/\"));", "prediction": ".getDefault().getLanguage(), languageEN, languageDE, languageRU, languageUA);\n        this.restAPIRequests = new RestAPIRequests(this);\n    }\n\n    public void startDebug() {\n        if (isDebugRunning) {\n            return;\n        }\n\n        isDebugRunning = true;\n        plugin.getServer().getScheduler().runTaskTimer(plugin, () -> {\n            if (isDebugRunning) {\n                plugin.getServer().broadcastMessage(localization.getMessage(\"debug.ping\"));\n            }\n        }, 0, 20L);\n    }\n\n    public void stopDebug() {\n        if (!isDebugRunning) {", "first_line_groundtruth": ".forLanguageTag(Config.getLanguage()), new File(\"plugins/NeoProtect/languages/\"));", "first_line_prediction": ".getDefault().getLanguage(), languageEN, languageDE, languageRU, languageUA);", "match": 0}
{"groundtruth": ").isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "prediction": "player).getStats() == null) {\n                    instance.getCore(player).setStats(new Stats(player.getUniqueId()));\n                }\n\n                if (instance.getCore(player).getStats().getLoginCount() == 0) {\n                    instance.getCore(player).getStats().setFirstLogin(true);\n                }\n\n                instance.getCore(player).getStats().setLoginCount(instance.getCore(player).getStats().getLoginCount() + 1);\n                instance.getCore(player).getStats().setLastLogin(System.currentTimeMillis());\n\n                if (instance.", "first_line_groundtruth": ").isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {", "first_line_prediction": "player).getStats() == null) {", "match": 0}
{"groundtruth": "\"NeoProtect\", \"NeoPlugin\", \"v\" + plugin.getPluginVersion(), VersionUtils.UpdateSetting.DISABLED).message();", "prediction": "plugin.getDescription().getVersion());\n        this.localization = new Localization(plugin.getLogger(), plugin.getDescription().getName(), plugin.getDescription().getVersion());\n        this.restAPIRequests = new RestAPIRequests(plugin);\n    }\n\n    public void startDebug() {\n        if (isDebugRunning) {\n            return;\n        }\n\n        isDebugRunning = true;\n        plugin.getServer().getScheduler().runTaskTimer(plugin, () -> {\n            if (isDebugRunning) {\n                plugin.getServer().broadcastMessage(localization.getMessage(\"debug.ping\"));\n            }\n        }, 0, 20L);\n    }\n\n    public", "first_line_groundtruth": "\"NeoProtect\", \"NeoPlugin\", \"v\" + plugin.getPluginVersion(), VersionUtils.UpdateSetting.DISABLED).message();", "first_line_prediction": "plugin.getDescription().getVersion());", "match": 0}
{"groundtruth": "return restAPIRequests.isSetup();", "prediction": " return playerInSetup.size() > 0;\n    }\n\n    public List<Object> getPlayerInSetup() {\n        return playerInSetup;\n    }\n\n    public List<String> getDirectConnectWhitelist() {\n        return directConnectWhitelist;\n    }\n\n    public ConcurrentHashMap<KeepAliveResponseKey, Long> getPingMap() {\n        return pingMap;\n    }\n\n    public ConcurrentHashMap<Long, Timestamp> getTimestampsMap() {\n        return timestampsMap;\n    }\n\n    public ConcurrentHashMap<String, ArrayList<DebugPingResponse>> getDebugPingResponses() {\n        return debugPingResponses;\n    }\n\n    public VersionUtils", "first_line_groundtruth": "return restAPIRequests.isSetup();", "first_line_prediction": " return playerInSetup.size() > 0;", "match": 0}
{"groundtruth": "(Config.isDebugMode()) ((Logger) LogManager.getLogger().logger).log(Level.SEVERE, output);", "prediction": " (isDebugRunning) {\n            plugin.getLogger().log(Level.INFO, prefix + output);\n        }\n    }\n\n    public void debug(String output, Throwable throwable) {\n        if  (isDebugRunning) {\n            plugin.getLogger().log(Level.SEVERE, prefix + output, throwable);\n        }\n    }\n\n    public void debug(String output, Object... objects) {\n        if  (isDebugRunning) {\n            plugin.getLogger().log(Level.INFO, prefix + output, objects);\n        }\n    }\n\n    public void debug(String output, Throwable throwable, Object... objects) {\n        if  (isDebug", "first_line_groundtruth": "(Config.isDebugMode()) ((Logger) LogManager.getLogger().logger).log(Level.SEVERE, output);", "first_line_prediction": " (isDebugRunning) {", "match": 0}
{"groundtruth": "instance.getCore().getDebugPingResponses().put(player.getName(), new ArrayList<>());", "prediction": " map.put(player.getName(), new ArrayList<>());\n                        }\n\n                        map.get(player.getName()).add(new DebugPingResponse(keepAliveResponseKey.getAddress().getAddress().getHostAddress(), keepAliveResponseKey.getAddress().getPort(), neoRTT, backendRTT, ping));\n                    }\n\n                    pingMap.remove(keepAliveResponseKey);\n                }\n            }\n        });\n    }\n\n    public boolean isIPInRange(String ipRange, String ip) {\n        String[] ipRangeParts = ipRange.split(\"\\\\.\");\n        String[] ipParts = ip.split(\"\\\\.\");\n\n        for (int i =", "first_line_groundtruth": "instance.getCore().getDebugPingResponses().put(player.getName(), new ArrayList<>());", "first_line_prediction": " map.put(player.getName(), new ArrayList<>());", "match": 0}
{"groundtruth": "instance.getCore().getPingMap().remove(keepAliveResponseKey);", "prediction": "\n\n                    pingMap.remove(keepAliveResponseKey);\n                    break;\n                }\n            }\n        });\n    }\n\n    public boolean isIPInRange(String ipRange, String ip) {\n        String[] ipRangeParts = ipRange.split(\"\\\\.\");\n        String[] ipParts = ip.split(\"\\\\.\");\n\n        for (int i = 0; i < 4; i++) {\n            int ipRangePart = Integer.parseInt(ipRangeParts[i]);\n            int ipPart = Integer.parseInt(ipParts[i]);\n\n            if (ipRangePart > ipPart) {\n                return false;\n            }\n\n            if (", "first_line_groundtruth": "instance.getCore().getPingMap().remove(keepAliveResponseKey);", "first_line_prediction": "", "match": 0}
{"groundtruth": ".request(RequestType.GET_GAMESHIELD_BANDWIDTH, null, Config.getGameShieldID()).getResponseBodyObject();", "prediction": ".request(RequestType.GET_GAMESHIELD_TRAFFIC, null, Config.getGameShieldID()).getResponseBodyObject();\n    }\n\n    public JSONObject getBackend(String backendID) {\n        return rest.request(RequestType.GET_GAMESHIELD_BACKEND, null, Config.getGameShieldID(),backendID).getResponseBodyObject();\n    }\n\n    public JSONObject getBackend(String backendID, String gameshieldID) {\n        return rest.request(RequestType.GET_GAMESHIELD_BACKEND, null, gameshieldID,backendID).getResponseBodyObject();\n    }\n\n    public JSONObject", "first_line_groundtruth": ".request(RequestType.GET_GAMESHIELD_BANDWIDTH, null, Config.getGameShieldID()).getResponseBodyObject();", "first_line_prediction": ".request(RequestType.GET_GAMESHIELD_TRAFFIC, null, Config.getGameShieldID()).getResponseBodyObject();", "match": 0}
{"groundtruth": "POST_GAMESHIELD_BACKEND_UPDATE, requestBody, Config.getGameShieldID(),backendID).checkCode(200);", "prediction": "UPDATE_BACKEND, requestBody, backendID).checkCode(200);\n    }\n\n    private boolean updateFirewall(RequestBody requestBody, String backendID) {\n        return rest.request(RequestType.UPDATE_FIREWALL, requestBody, backendID).checkCode(200);\n    }\n\n    private boolean updateGameshield(RequestBody requestBody, String gameshieldID) {\n        return rest.request(RequestType.UPDATE_GAMESHIELD, requestBody, gameshieldID).checkCode(200);\n    }\n\n    private boolean updateAttack(RequestBody requestBody, String gameshieldID) {\n        return", "first_line_groundtruth": "POST_GAMESHIELD_BACKEND_UPDATE, requestBody, Config.getGameShieldID(),backendID).checkCode(200);", "first_line_prediction": "UPDATE_BACKEND, requestBody, backendID).checkCode(200);", "match": 0}
{"groundtruth": "(isAPIInvalid(Config.getAPIKey())) {", "prediction": " (Config.getGameShieldID() == null || Config.getGameShieldID().isEmpty()) {\n            core.getLogger().info(\"No Gameshield ID set, please set it in the config.yml\");\n        }\n\n        if (Config.getGameShieldPassword() == null || Config.getGameShieldPassword().isEmpty()) {\n            core.getLogger().info(\"No Gameshield Password set, please set it in the config.yml\");\n        }\n\n        if (Config.getGameShieldID() != null && Config.getGameShieldID().isEmpty()) {\n            core.getLogger().info(\"No Gameshield ID set,", "first_line_groundtruth": "(isAPIInvalid(Config.getAPIKey())) {", "first_line_prediction": " (Config.getGameShieldID() == null || Config.getGameShieldID().isEmpty()) {", "match": 0}
{"groundtruth": ".request(RequestType.GET_GAMESHIELD_ISUNDERATTACK, null, Config.getGameShieldID()).getResponseBody().equals(\"true\");", "prediction": ".callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_ATTACKS)).build()).checkCode(200);\n    }\n\n    private boolean isStats() {\n        return rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_STATS)).build()).checkCode(200);\n    }\n\n    private boolean isVersion() {\n        return rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_VERSION)).", "first_line_groundtruth": ".request(RequestType.GET_GAMESHIELD_ISUNDERATTACK, null, Config.getGameShieldID()).getResponseBody().equals(\"true\");", "first_line_prediction": ".callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_ATTACKS)).build()).checkCode(200);", "match": 0}
{"groundtruth": "Config.getGameShieldID());", "prediction": " Config.getGameShieldID());\n    }\n\n    public void setProxyProtocol(boolean setting, String gameshieldID) {\n        rest.request(RequestType.POST_GAMESHIELD_UPDATE, RequestBody.create(MediaType.parse(\"application/json\"), new JsonBuilder().appendField(\"proxyProtocol\", String.valueOf(setting)).build().toString()),  gameshieldID);\n    }\n\n    public void setProxyProtocol(boolean setting, String gameshieldID, String backendID) {\n        rest.request(RequestType.POST_GAMESHIELD_BACKEND_UPDATE, RequestBody.create(MediaType.parse(\"", "first_line_groundtruth": "Config.getGameShieldID());", "first_line_prediction": " Config.getGameShieldID());", "match": 0}
{"groundtruth": "if (Config.isUpdateIP()) {", "prediction": " //TODO: remove this\n        new Timer().schedule(new TimerTask() {\n            @Override\n            public void run() {\n                setup = true;\n            }\n        }, 1000);\n    }\n\n    private void testCredentials() {\n        if (Config.getInstance().getAPIKey() == null || Config.getInstance().getAPIKey().isEmpty()) {\n            core.getLogger().info(\"No API key found, API requests will not work!\");\n        }\n    }\n\n    private void attackCheckSchedule() {\n        new Timer().schedule(new TimerTask() {\n            @Override\n            public void run() {\n                if (setup", "first_line_groundtruth": "if (Config.isUpdateIP()) {", "first_line_prediction": " //TODO: remove this", "match": 0}
{"groundtruth": "setProxyProtocol(Config.isProxyProtocol());", "prediction": " core.info(\"API is valid!\");\n    }\n\n    public void attackCheckSchedule() {\n        Timer timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                if (isAttack()) {\n                    core.info(\"Gameshield is under attack!\");\n                    core.severe(\"Please wait until the gameshield is under attack to use the plugin!\");\n                }\n            }\n        }, 0, 1000 * 60 * 10);\n    }\n\n    public void statsUpdateSchedule() {\n        Timer timer = new Timer();\n        timer.schedule(new", "first_line_groundtruth": "setProxyProtocol(Config.isProxyProtocol());", "first_line_prediction": " core.info(\"API is valid!\");", "match": 0}
{"groundtruth": "Config.addAutoUpdater(getPlan().equalsIgnoreCase(\"Basic\"));", "prediction": " if (Config.isUpdateIP()) {\n            backendServerIPUpdater();\n        }\n    }\n\n    public void attackCheckSchedule() {\n        Timer timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                if (isAttack()) {\n                    core.severe(\"Gameshield is under attack!\");\n                }\n            }\n        }, 0, 1000 * 60 * 10);\n    }\n\n    public void statsUpdateSchedule() {\n        Timer timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override\n            public void", "first_line_groundtruth": "Config.addAutoUpdater(getPlan().equalsIgnoreCase(\"Basic\"));", "first_line_prediction": " if (Config.isUpdateIP()) {", "match": 0}
{"groundtruth": "Config.getGameShieldID()).getCode();", "prediction": " Config.getGameShieldID()).getResponseBodyCode();\n            return code;\n        } else {\n            int code = rest.request(RequestType.POST_GAMESHIELD_UPDATE,\n                    RequestBody.create(MediaType.parse(\"application/json\"), settings.put(mode, true).toString()),\n                     Config.getGameShieldID()).getResponseBodyCode();\n            return code;\n        }\n    }\n\n    public boolean isSetup() {\n        return setup;\n    }\n\n    public boolean isAttack() {\n        return isAttack();\n    }\n\n    public boolean isUnderAttack() {\n        return rest.request(RequestType.GET_G", "first_line_groundtruth": "Config.getGameShieldID()).getCode();", "first_line_prediction": " Config.getGameShieldID()).getResponseBodyCode();", "match": 0}
{"groundtruth": "core.severe(\"Gameshield is not valid! Please run /neoprotect setgameshield to set the gameshield\");", "prediction": " core.severe(\"Gameshield is not valid! Please run /neoprotect setup to set the Gameshield ID\");\n             setup = false;\n             return;\n        } else {\n            setup = true;\n        }\n\n        if (isBackendInvalid(Config.getBackendID())) {\n            core.severe(\"Backend is not valid! Please run /neoprotect setup to set the Backend ID\");\n            setup = false;\n            return;\n        }\n\n        if (isAttack()) {\n            core.severe(\"You are currently under attack! Please wait until the attack is over\");\n            setup = false;\n            return;\n        }\n\n       ", "first_line_groundtruth": "core.severe(\"Gameshield is not valid! Please run /neoprotect setgameshield to set the gameshield\");", "first_line_prediction": " core.severe(\"Gameshield is not valid! Please run /neoprotect setup to set the Gameshield ID\");", "match": 0}
{"groundtruth": "core.severe(\"API is not valid! Please run /neoprotect setup to set the API Key\");", "prediction": " Config.setAPIKey(null);\n        }\n\n        if (isGameshieldInvalid(Config.getGameShieldID())) {\n            Config.setGameShieldID(null);\n        }\n\n        if (isBackendInvalid(Config.getBackendID())) {\n            Config.setBackendID(null);\n        }\n\n        if (Config.getAPIKey() == null || Config.getGameShieldID() == null || Config.getBackendID() == null) {\n            Config.setAPIKey(null);\n            Config.setGameShieldID(null);\n            Config.setBackendID(null);\n            Config.setProxy", "first_line_groundtruth": "core.severe(\"API is not valid! Please run /neoprotect setup to set the API Key\");", "first_line_prediction": " Config.setAPIKey(null);", "match": 0}
{"groundtruth": "null, Config.getGameShieldID()).getResponseBodyArray();", "prediction": " null, Config.getGameShieldID()).getResponseBodyArray();\n\n        for (Object object : backends) {\n            JSONObject jsonObject = (JSONObject) object;\n            list.add(new Backend(jsonObject.getString(\"id\"), jsonObject.getString(\"name\")));\n        }\n\n        return list;\n    }\n\n    public boolean isSetup() {\n        return setup;\n    }\n\n    public boolean isAttacking() {\n        return isAttack();\n    }\n\n    public boolean isPanicMode() {\n        return rest.request(RequestType.GET_GAMESHIELD_INFO, null, Config.getGameShieldID()).getResponseBodyObject().getJSONObject(\"game", "first_line_groundtruth": "null, Config.getGameShieldID()).getResponseBodyArray();", "first_line_prediction": " null, Config.getGameShieldID()).getResponseBodyArray();", "match": 0}
{"groundtruth": "Config.setGeyserBackendID(args[1]);", "prediction": " Config.setGeyserBackendID(args[1]);\n\n        instance.sendMessage(sender, localization.get(locale, \"set.backend\", \"geyser\", args[1]));\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().", "first_line_groundtruth": "Config.setGeyserBackendID(args[1]);", "first_line_prediction": " Config.setGeyserBackendID(args[1]);", "match": 0}
{"groundtruth": "Config.setBackendID(args[1]);", "prediction": " Config.setJavaBackendID(args[1]);\n         instance.sendMessage(sender, localization.get(locale, \"set.backend\", \"java\", args[1]));", "first_line_groundtruth": "Config.setBackendID(args[1]);", "first_line_prediction": " Config.setJavaBackendID(args[1]);", "match": 0}
{"groundtruth": "int response = instance.getCore().getRestAPI().toggle(args[1]);", "prediction": " instance.getCore().getRestAPI().toggle(args[1]);\n             instance.sendMessage(sender, localization.get(locale, \"command.toggle\", args[1], instance.getCore().getRestAPI().isAPIEnabled(args[1]) ? \"utils.activated\" : \"utils.deactivated\"));\n        }\n    }\n\n    private void analytics() {\n        instance.getCore().getAnalytics().sendAnalytics(sender);\n    }\n\n    private void firewall(String[] args) {\n        if (args.length == 2) {\n            if (args[0].toLowerCase().equals(\"whitelist\")) {", "first_line_groundtruth": "int response = instance.getCore().getRestAPI().toggle(args[1]);", "first_line_prediction": " instance.getCore().getRestAPI().toggle(args[1]);", "match": 0}
{"groundtruth": "getBackends().stream().noneMatch(e -> e.compareById(backendID));", "prediction": " !new ResponseManager(rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_BACKEND_INFO, backendID)).build())).checkCode(200);\n    }\n\n    public boolean isFirewallInvalid(String firewallID) {\n        return  !new ResponseManager(rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_FIREWALL_INFO, firewallID)).build())).checkCode(200);\n    }\n\n    public boolean isIPValid(String ip) {\n       ", "first_line_groundtruth": "getBackends().stream().noneMatch(e -> e.compareById(backendID));", "first_line_prediction": " !new ResponseManager(rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_BACKEND_INFO, backendID)).build())).checkCode(200);", "match": 0}
{"groundtruth": "= instance.getCore().getRestAPI().getTraffic();", "prediction": " = analytics.getJSONObject(ak);\n                instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bTraffic \u00a77\u00a7l---------\");\n                traffic.keySet().forEach(ak2 -> {\n                    instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7b\" + ak2 + \" \u00a77\u00a7l---------\");\n                    traffic.getJSONArray(ak2).forEach(ak3 -> {\n                        instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7b\" + ak3 + \" \u00a77\u00a7l---------\");\n                    });\n                });\n                return;\n            }\n\n            instance.sendMessage(sender, ak + \":", "first_line_groundtruth": "= instance.getCore().getRestAPI().getTraffic();", "first_line_prediction": " = analytics.getJSONObject(ak);", "match": 0}
{"groundtruth": "Config.setGameShieldID(args[1]);", "prediction": " instance.getCore().getRestAPI().setGameshield(args[1]);\n         instance.sendMessage(sender, localization.get(locale, \"set.gameshield\", args[1]));\n    }\n\n    private void setGamemode(String[] args) {\n        if (args.length < 2) {\n            instance.sendMessage(sender, localization.get(locale, \"set.gamemode.usage\"));\n            return;\n        }\n\n        if (args[1].equalsIgnoreCase(\"creative\")) {\n            instance.getCore().getRestAPI().setGamemode(args[1]);\n            instance.sendMessage(sender,", "first_line_groundtruth": "Config.setGameShieldID(args[1]);", "first_line_prediction": " instance.getCore().getRestAPI().setGameshield(args[1]);", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l----- \u00a7bFirewall (\" + args[0].toUpperCase() + \")\u00a77\u00a7l -----\");", "prediction": " instance.getCore().getFirewall().toggle(args[0]);\n             instance.sendMessage(sender, localization.get(locale, \"command.firewall\", args[0],\n                     localization.get(locale, instance.getCore().getFirewall().isOn(args[0]) ? \"utils.activated\" : \"utils.deactivated\")));\n        } else {\n            instance.sendMessage(sender, localization.get(locale, \"usage.firewall\"));\n        }\n    }\n\n    private void debugTool(String[] args) {\n        if (args.length == 1) {\n            if (args[0].equals(\"", "first_line_groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l----- \u00a7bFirewall (\" + args[0].toUpperCase() + \")\u00a77\u00a7l -----\");", "first_line_prediction": " instance.getCore().getFirewall().toggle(args[0]);", "match": 0}
{"groundtruth": "Config.setAPIKey(msg);", "prediction": " if (instance.getCore().getRestAPI().isAPIExpired(msg)) {\n            instance.sendMessage(sender, localization.get(locale, \"apikey.expired\"));\n            return;\n        }\n\n        if (instance.getCore().getRestAPI().isAPIDisabled(msg)) {\n            instance.sendMessage(sender, localization.get(locale, \"apikey.disabled\"));\n            return;\n        }\n\n        if (instance.getCore().getRestAPI().isAPIBlocked(msg)) {\n            instance.sendMessage(sender, localization.get(locale, \"apikey.blocked\"));\n            return;\n        }\n\n        if (", "first_line_groundtruth": "Config.setAPIKey(msg);", "first_line_prediction": " if (instance.getCore().getRestAPI().isAPIExpired(msg)) {", "match": 0}
{"groundtruth": "(instance.getPluginType() == NeoProtectPlugin.PluginType.SPIGOT) {", "prediction": " (args.length == 1) {\n            instance.sendMessage(sender, \"\u00a77\u00a7l----- \u00a7bDebug Tool\u00a77\u00a7l -----\");\n            instance.getCore().getRestAPI().getDebugTool().forEach((debugTool ->\n                    instance.sendMessage(sender, \"IP: \" + debugTool.getIp() + \" ID(\" + debugTool.getId() + \")\")));\n        } else if (args.length == 3) {\n            String ip = args[2];\n            String action = args[1];\n            String mode = args[0].toUpperCase();\n            int response = instance.get", "first_line_groundtruth": "(instance.getPluginType() == NeoProtectPlugin.PluginType.SPIGOT) {", "first_line_prediction": " (args.length == 1) {", "match": 0}
{"groundtruth": "instance.getCore().severe(ex.getMessage(), ex);", "prediction": " instance.sendMessage(sender, localization.get(locale, \"debug.finished.error\") + ex.getMessage());\n                         instance.getCore().setDebugRunning(false);\n                     }\n                });\n            }\n        }, 10000, 10000);\n    }", "first_line_groundtruth": "instance.getCore().severe(ex.getMessage(), ex);", "first_line_prediction": " instance.sendMessage(sender, localization.get(locale, \"debug.finished.error\") + ex.getMessage());", "match": 0}
{"groundtruth": "response = instance.getCore().getRestAPI().updateFirewall(ip, action, mode);", "prediction": "irc = 0;\n            int geyser = 0;\n            int bedrock = 0;\n\n            if (mode.equals(\"IRC\")) {\n                irc = 1;\n            } else if (mode.equals(\"Geyser\")) {\n                geyser = 1;\n            } else if (mode.equals(\"Bedrock\")) {\n                bedrock = 1;\n            }\n\n            if (action.equals(\"add\")) {\n                instance.getCore().getRestAPI().addFirewall(ip, irc, geyser, bedrock);\n                instance.sendMessage(sender, \"\u00a7a", "first_line_groundtruth": "response = instance.getCore().getRestAPI().updateFirewall(ip, action, mode);", "first_line_prediction": "irc = 0;", "match": 0}
{"groundtruth": "instance.getCore().getDirectConnectWhitelist().add(args[1]);", "prediction": " instance.getCore().getRestAPI().setDirectConnectWhitelist(args[1]);\n             instance.sendMessage(sender, localization.get(locale, \"command.directconnectwhitelist\", args[1]));\n        } else {\n            instance.sendMessage(sender, localization.get(locale, \"usage.directconnectwhitelist\"));\n        }\n    }\n\n    private void toggle(String[] args) {\n        if (args.length == 1) {\n            instance.getCore().getRestAPI().toggle();\n            instance.sendMessage(sender, localization.get(locale, \"command.toggle\", instance.getCore().getRestAPI", "first_line_groundtruth": "instance.getCore().getDirectConnectWhitelist().add(args[1]);", "first_line_prediction": " instance.getCore().getRestAPI().setDirectConnectWhitelist(args[1]);", "match": 0}
{"groundtruth": "(\"general.ProxyPlugins\", instance.getPlugins());", "prediction": "(\"general.ProxyPlayers\", stats.getOnlinePlayers());\n                        configuration.set(\"general.ProxyMaxPlayers\", stats.getMaxPlayers());\n                        configuration.set(\"general.ProxyOnlinePlayers\", stats.getOnlinePlayers());\n                        configuration.set(\"general.ProxyMaxPlayers\", stats.getMaxPlayers());\n                        configuration.set(\"general.ProxyOnlinePlayers\", stats.getOnlinePlayers());\n                        configuration.set(\"general.ProxyMaxPlayers\", stats.getMaxPlayers());\n                        configuration.set(\"general.ProxyOnlinePlayers\", stats.getOnlinePlayers());\n                        configuration.set(\"general.ProxyMaxPlayers\", stats.getMaxPlayers());\n                       ", "first_line_groundtruth": "(\"general.ProxyPlugins\", instance.getPlugins());", "first_line_prediction": "(\"general.ProxyPlayers\", stats.getOnlinePlayers());", "match": 0}
{"groundtruth": "if (instance.getCore().getRestAPI().isAPIInvalid(msg)) {", "prediction": " if (isViaConsole) {\n             if (args.length > 0) {\n                 if (args[0].equalsIgnoreCase(\"debug\")) {\n                     if (args.length > 1) {\n                         if (args[1].equalsIgnoreCase(\"start\")) {\n                             debugTimer.schedule(new DebugTimerTask(instance), 0, 1000);\n                         } else if (args[1].equalsIgnoreCase(\"stop\")) {\n                             debugTimer.cancel();\n                         }\n                     }\n                 }\n             }\n         } else {\n             if (args.length > 0) {\n                 if (args[0].equalsIgnoreCase(\"debug", "first_line_groundtruth": "if (instance.getCore().getRestAPI().isAPIInvalid(msg)) {", "first_line_prediction": " if (isViaConsole) {", "match": 0}
{"groundtruth": "instance.getCore().setDebugRunning(false);", "prediction": " instance.sendMessage(sender, localization.get(locale, \"debug.cancel\"));\n                return;\n            }\n\n            if (args[1].equals(\"start\")) {\n                debugTimer.schedule(new DebugTimerTask(), 0, 1000);\n                instance.sendMessage(sender, localization.get(locale, \"debug.start\"));\n                return;\n            }\n\n            if (args[1].equals(\"stop\")) {\n                debugTimer.cancel();\n                instance.sendMessage(sender, localization.get(locale, \"debug.stop\"));\n                return;\n            }\n\n            if (args[1].equals(\"info", "first_line_groundtruth": "instance.getCore().setDebugRunning(false);", "first_line_prediction": " instance.sendMessage(sender, localization.get(locale, \"debug.cancel\"));", "match": 0}
{"groundtruth": "instance.getCore().isDebugRunning()) {", "prediction": "args.length == 1) {\n            if (instance.getCore().isDebugRunning()) {\n                instance.sendMessage(sender, localization.get(locale, \"debug.running\"));\n                return;\n            }\n\n            if (instance.getCore().isDebugRunning()) {\n                instance.sendMessage(sender, localization.get(locale, \"debug.running\"));\n                return;\n            }\n\n            if (instance.getCore().isDebugRunning()) {\n                instance.sendMessage(sender, localization.get(locale, \"debug.running\"));\n                return;\n            }\n\n            if (instance.getCore().isDebugRunning()) {\n                instance.", "first_line_groundtruth": "instance.getCore().isDebugRunning()) {", "first_line_prediction": "args.length == 1) {", "match": 0}
{"groundtruth": "instance.getCore().getPlayerInSetup().add(sender);", "prediction": " if (instance.getCore().isSetup()) {\n            instance.sendMessage(sender, localization.get(locale, \"setup.already.setup\"));\n            return;\n        }\n\n        instance.getCore().setup();\n        instance.sendMessage(sender, localization.get(locale, \"setup.success\"));\n    }\n\n    private void iPanic(String[] args) {\n        if (args.length == 1) {\n            instance.sendMessage(sender, localization.get(locale, \"ipanic.usage\"));\n            return;\n        }\n\n        if (args[1].equals(\"enable\")) {\n            instance.getCore", "first_line_groundtruth": "instance.getCore().getPlayerInSetup().add(sender);", "first_line_prediction": " if (instance.getCore().isSetup()) {", "match": 0}
{"groundtruth": ", instance.getCore().getRestAPI().togglePanicMode() ? \"utils.activated\" : \"utils.deactivated\")));", "prediction": ", \"utils.click\"),\n                    \"OPEN_URL\", \"https://panel.neoprotect.net/ipanic\",\n                    \"SHOW_TEXT\", args[0]));\n        }\n    }\n\n    private void directConnectWhitelist(String[] args) {\n        if (args.length != 1) {\n            instance.sendMessage(sender, localization.get(locale, \"usage.directconnectwhitelist\"));\n        } else {\n            instance.sendMessage(sender, localization.get(locale, \"command.directconnectwhitelist\",\n                    localization.get(locale, \"utils.click\"),\n                    \"OPEN_URL\", \"https://", "first_line_groundtruth": ", instance.getCore().getRestAPI().togglePanicMode() ? \"utils.activated\" : \"utils.deactivated\")));", "first_line_prediction": ", \"utils.click\"),", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bAnalytics \u00a77\u00a7l---------\");", "prediction": " instance.getCore().getAnalytics().sendAnalytics(sender);\n    }\n\n    private void firewall(String[] args) {\n        if (args.length != 2) {\n            instance.sendMessage(sender, localization.get(locale, \"usage.firewall\"));\n            return;\n        }\n\n        if (args[0].equals(\"whitelist\")) {\n            instance.getCore().getFirewall().addWhitelist(args[1]);\n            instance.sendMessage(sender, localization.get(locale, \"command.firewall.whitelist\", args[1]));\n        } else if (args[0].equals(\"blacklist\")) {\n            instance.", "first_line_groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bAnalytics \u00a77\u00a7l---------\");", "first_line_prediction": " instance.getCore().getAnalytics().sendAnalytics(sender);", "match": 0}
{"groundtruth": "instance.getCore().getDebugPingResponses().clear();", "prediction": " instance.getCore().getDebugPingResponses().clear();\n\n                        instance.sendMessage(sender, localization.get(locale, \"debug.pasting\") + \" \" + pasteKey);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                });\n            }\n        }, 10000, 10000);\n    }", "first_line_groundtruth": "instance.getCore().getDebugPingResponses().clear();", "first_line_prediction": " instance.getCore().getDebugPingResponses().clear();", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \"\u00a7cCan not found setting '\" + args[1] + \"'\");", "prediction": " instance.sendMessage(sender, localization.get(locale, \"err.unknown\"));\n                return;\n            }\n\n            instance.sendMessage(sender, localization.get(locale, \"command.toggle\", args[1], response == 200 ? \"utils.activated\" : \"utils.deactivated\"));\n        }\n    }\n\n    private void analytics() {\n        instance.getCore().getAnalytics().sendAnalytics(sender);\n    }\n\n    private void firewall(String[] args) {\n        if (args.length != 2) {\n            instance.sendMessage(sender, localization.get(locale, \"usage.firewall\"));", "first_line_groundtruth": "instance.sendMessage(sender, \"\u00a7cCan not found setting '\" + args[1] + \"'\");", "first_line_prediction": " instance.sendMessage(sender, localization.get(locale, \"err.unknown\"));", "match": 0}
{"groundtruth": "instance.getCore().setDebugRunning(true);", "prediction": " if (args.length == 1) {\n            instance.getCore().setDebugRunning(true);\n            instance.getCore().setDebugTimer(new Timer());\n            debugTimer.schedule(new TimerTask() {\n                @Override\n                public void run() {\n                    instance.getCore().setDebugRunning(false);\n                    instance.sendMessage(sender, localization.get(locale, \"debug.cancelled\"));\n                }\n            }, 1000 * 60 * 10);\n            instance.sendMessage(sender, localization.get(locale, \"debug.started\"));\n            return;\n        }\n\n        if", "first_line_groundtruth": "instance.getCore().setDebugRunning(true);", "first_line_prediction": " if (args.length == 1) {", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np analytics\");", "prediction": " instance.sendMessage(sender, \" - /np debug\");\n        instance.sendMessage(sender, \" - /np debug start\");\n        instance.sendMessage(sender, \" - /np debug stop\");\n        instance.sendMessage(sender, \" - /np debug ping\");\n        instance.sendMessage(sender, \" - /np debug ping <amount>\");\n        instance.sendMessage(sender, \" - /np debug paste\");\n        instance.sendMessage(sender, \" - /np debug paste <amount>\");\n        instance.sendMessage(sender, \" - /np debug clear\");\n        instance.sendMessage(sender, \" - /np debug clear <", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np analytics\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np debug\");", "match": 0}
{"groundtruth": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();", "prediction": " new BukkitRunnable() {\n            @Override\n            public void run() {\n                if (instance.getCore().getGameshieldSelector() != null) {\n                    instance.getCore().getGameshieldSelector().openSelector(sender);\n                    cancel();\n                }\n            }\n        }.runTaskLater(instance, 20L);\n    }\n\n    private void gameshieldSelector(Player player) {\n        instance.sendMessage(player, localization.get(locale, \"select.gameshield\"));", "first_line_groundtruth": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();", "first_line_prediction": " new BukkitRunnable() {", "match": 0}
{"groundtruth": "instance.getCore().getDebugPingResponses().keySet().forEach((playerName -> {", "prediction": " configuration.set(\"general.uptime\", (System.currentTimeMillis() - startTime) / 1000);\n                        configuration.set(\"general.onlinePlayers\", stats.getOnlinePlayers());\n                        configuration.set(\"general.maxPlayers\", stats.getMaxPlayers());\n                        configuration.set(\"general.tps\", stats.getTps());\n                        configuration.set(\"general.tps_max\", stats.getTpsMax());\n                        configuration.set(\"general.tps_min\", stats.getTpsMin());\n                        configuration.set(\"general.tps_average\", stats.getTpsAverage());\n                        configuration.set(\"general.tps_", "first_line_groundtruth": "instance.getCore().getDebugPingResponses().keySet().forEach((playerName -> {", "first_line_prediction": " configuration.set(\"general.uptime\", (System.currentTimeMillis() - startTime) / 1000);", "match": 0}
{"groundtruth": "instance.getCore().getRestAPI().isGameshieldInvalid(args[1])) {", "prediction": "args.length < 2) {\n            instance.sendMessage(sender, localization.get(locale, \"error.notEnoughArguments\"));\n            return;\n        }\n\n        try {\n            int gameshieldId = Integer.parseInt(args[1]);\n            instance.getCore().setGameshield(gameshieldId);\n            instance.sendMessage(sender, localization.get(locale, \"set.gameshield\", gameshieldId));\n        } catch (NumberFormatException ex) {\n            instance.sendMessage(sender, localization.get(locale, \"error.notAnInteger\"));\n        }\n    }\n\n    private void setGamemode(", "first_line_groundtruth": "instance.getCore().getRestAPI().isGameshieldInvalid(args[1])) {", "first_line_prediction": "args.length < 2) {", "match": 0}
{"groundtruth": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);", "prediction": " configuration.set(\"general.debugPingResponses.\" + playerName, instance.getCore().getDebugPingResponses().get(playerName));\n                        }));\n\n                        configuration.set(\"general.debugPingResponses.time\", System.currentTimeMillis() - startTime);\n\n                        configuration.save(file);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                });\n            }\n        }, 10000);\n    }\n\n    private boolean isInteger(String s) {\n        try {\n            Integer.parseInt(s);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        return true;\n   ", "first_line_groundtruth": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);", "first_line_prediction": " configuration.set(\"general.debugPingResponses.\" + playerName, instance.getCore().getDebugPingResponses().get(playerName));", "match": 0}
{"groundtruth": "instance.getCore().getRestAPI().getAnalytics().keySet().forEach(ak -> {", "prediction": "\n\n        if (analytics.has(\"total_players\")) {\n            instance.sendMessage(sender, \"\u00a77\u00a7lTotal Players: \u00a7b\" + analytics.getInt(\"total_players\"));\n        }\n\n        if (analytics.has(\"total_online\")) {\n            instance.sendMessage(sender, \"\u00a77\u00a7lTotal Online: \u00a7b\" + analytics.getInt(\"total_online\"));\n        }\n\n        if (analytics.has(\"total_online_bedrock\")) {\n            instance.sendMessage(sender, \"\u00a77\u00a7lTotal Online Bedrock: \u00a7b\" + analytics.getInt(\"total_online_bed", "first_line_groundtruth": "instance.getCore().getRestAPI().getAnalytics().keySet().forEach(ak -> {", "first_line_prediction": "", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np toggle (option)\");", "prediction": " instance.sendMessage(sender, \" - /np debug\");\n        instance.sendMessage(sender, \" - /np debug start\");\n        instance.sendMessage(sender, \" - /np debug stop\");\n        instance.sendMessage(sender, \" - /np debug ping\");\n        instance.sendMessage(sender, \" - /np debug ping <amount>\");\n        instance.sendMessage(sender, \" - /np debug paste\");\n        instance.sendMessage(sender, \" - /np debug paste <amount>\");\n        instance.sendMessage(sender, \" - /np debug clear\");\n        instance.sendMessage(sender, \" - /np debug clear <", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np toggle (option)\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np debug\");", "match": 0}
{"groundtruth": "backendList = instance.getCore().getRestAPI().getBackends();", "prediction": " backendList = instance.getCore().getRestAPI().getBackends();\n\n        instance.sendMessage(sender, localization.get(locale, \"select.java.backend\"));\n\n        for (Backend backend : backendList) {\n            instance.sendMessage(sender, \"\u00a75\" + backend.getName() + localization.get(locale, \"utils.click\"),\n                    \"RUN_COMMAND\", \"/np setjavabackend \" + backend.getId(),\n                    \"SHOW_TEXT\", localization.get(locale, \"hover.java.backend\", backend.getName(), backend.getId()));\n        }\n    }\n\n    private void setJavaBackend", "first_line_groundtruth": "backendList = instance.getCore().getRestAPI().getBackends();", "first_line_prediction": " backendList = instance.getCore().getRestAPI().getBackends();", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np debugTool (cancel / amount)\");", "prediction": " instance.sendMessage(sender, \" - /np debug (amount)\");\n        instance.sendMessage(sender, \" - /np setgameshield (id)\");\n        instance.sendMessage(sender, \" - /np setbackend (id)\");\n        instance.sendMessage(sender, \" - /np setgeyserbackend (id)\");\n        instance.sendMessage(sender, \" - /np setdebug (true/false)\");\n        instance.sendMessage(sender, \" - /np setlocale (locale)\");\n        instance.sendMessage(sender, \" - /np setdebug (true/false)\");\n        instance.sendMessage(sender, \" - /", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np debugTool (cancel / amount)\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np debug (amount)\");", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np setup\");", "prediction": " instance.sendMessage(sender, \"\u00a75/np reload\", \"RUN_COMMAND\", \"/np reload\", \"SHOW_TEXT\", localization.get(locale, \"hover.reload\"));\n         instance.sendMessage(sender, \"\u00a75/np debug\", \"RUN_COMMAND\", \"/np debug\", \"SHOW_TEXT\", localization.get(locale, \"hover.debug\"));\n         instance.sendMessage(sender, \"\u00a75/np setup\", \"RUN_COMMAND\", \"/np setup\", \"SHOW_TEXT\", localization.get(locale, \"hover.setup\"));\n         instance.sendMessage(sender, \"\u00a75/np", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np setup\");", "first_line_prediction": " instance.sendMessage(sender, \"\u00a75/np reload\", \"RUN_COMMAND\", \"/np reload\", \"SHOW_TEXT\", localization.get(locale, \"hover.reload\"));", "match": 0}
{"groundtruth": "instance.getCore().getPlayerInSetup().remove(sender)) {", "prediction": "instance.getCore().getRestAPI().isGeyserBackendInvalid(args[1])) {\n            instance.sendMessage(sender, localization.get(locale, \"invalid.geyserbackend\", args[1]));\n            return;\n        }\n\n        instance.getCore().getRestAPI().testGeyserCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testGeyserCredentials();\n\n        instance.getCore().getRestAPI().testCredentials();\n\n        instance.getCore().getRestAPI().testGeyserCredentials();\n\n        instance.", "first_line_groundtruth": "instance.getCore().getPlayerInSetup().remove(sender)) {", "first_line_prediction": "instance.getCore().getRestAPI().isGeyserBackendInvalid(args[1])) {", "match": 0}
{"groundtruth": "instance.getCore().getRestAPI().testCredentials();", "prediction": "\n\n        neoBackendSelector();\n    }\n\n    private void neoBackendSelector() {\n        List<Backend> backendList = instance.getCore().getRestAPI().getBackends();\n\n        instance.sendMessage(sender, localization.get(locale, \"select.backend\", \"neo\"));\n\n        for (Backend backend : backendList) {\n            if(!backend.isGeyser())continue;\n            instance.sendMessage(sender, \"\u00a75\" + backend.getIp() + \":\" + backend.getPort() + localization.get(locale, \"utils.click\"),\n                     \"RUN_COMMAND\", \"/np setbackend \"", "first_line_groundtruth": "instance.getCore().getRestAPI().testCredentials();", "first_line_prediction": "", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");", "prediction": " instance.sendMessage(sender, \" - /np debug (option)\");\n        instance.sendMessage(sender, \" - /np setgameshield (id)\");\n        instance.sendMessage(sender, \" - /np setbackend (id)\");\n        instance.sendMessage(sender, \" - /np setgeyserbackend (id)\");\n        instance.sendMessage(sender, \" - /np setlocale (locale)\");\n        instance.sendMessage(sender, \" - /np setdebug (option)\");\n        instance.sendMessage(sender, \" - /np setdebug (option)\");\n        instance.sendMessage(sender, \" - /np setdebug (", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np debug (option)\");", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np directConnectWhitelist (ip)\");", "prediction": " instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");\n        instance.", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np directConnectWhitelist (ip)\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np debugPing (cancel / amount)\");", "match": 0}
{"groundtruth": "instance.sendMessage(sender, \" - /np setgameshield [id]\");", "prediction": " instance.sendMessage(sender, \" - /np directConnectBlacklist (ip)\");\n        instance.sendMessage(sender, \" - /np setgameshield (id)\");\n        instance.sendMessage(sender, \" - /np setbackend (id)\");\n        instance.sendMessage(sender, \" - /np setgeyserbackend (id)\");\n        instance.sendMessage(sender, \" - /np setdebug (true/false)\");\n        instance.sendMessage(sender, \" - /np setdebug (true/false)\");\n        instance.sendMessage(sender, \" - /np setdebug (true/false)\");\n        instance.sendMessage(", "first_line_groundtruth": "instance.sendMessage(sender, \" - /np setgameshield [id]\");", "first_line_prediction": " instance.sendMessage(sender, \" - /np directConnectBlacklist (ip)\");", "match": 0}
{"groundtruth": "if(backend.isGeyser())continue;", "prediction": " instance.sendMessage(sender, \"\u00a75\" + backend.getName() + localization.get(locale, \"utils.click\"),\n                     \"RUN_COMMAND\", \"/np setbackend \" + backend.getId(),\n                     \"SHOW_TEXT\", localization.get(locale, \"hover.backend\", backend.getName(), backend.getId()));\n        }\n    }\n\n    private void setBackend(String[] args) {\n\n        if (instance.getCore().getRestAPI().isBackendInvalid(args[1])) {\n            instance.sendMessage(sender, localization.get(locale, \"invalid.backend\", args[1]));\n            return", "first_line_groundtruth": "if(backend.isGeyser())continue;", "first_line_prediction": " instance.sendMessage(sender, \"\u00a75\" + backend.getName() + localization.get(locale, \"utils.click\"),", "match": 0}
{"groundtruth": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));", "prediction": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));\n        }\n    }\n\n    private void setBackend(String[] args) {\n\n        if (instance.getCore().getRestAPI().isBackendInvalid(args[1])) {\n            instance.sendMessage(sender, localization.get(locale, \"invalid.backend\", args[1]));\n            return;\n        }\n\n        Config.setBackendID(args[1]);\n        instance.sendMessage(sender, localization.get(locale, \"set.backend\", args[1]));\n\n        neoBackendSelector();\n    }\n\n   ", "first_line_groundtruth": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));", "first_line_prediction": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));", "match": 1}
{"groundtruth": "gameshield.getName(), gameshield.getId()));", "prediction": "1, gameshield.getName()));\n        }\n    }\n\n    private void gameshieldSelector(Player player) {\n        instance.sendMessage(player, localization.get(locale, \"select.gameshield\"));\n\n        List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();\n\n        for (Gameshield gameshield : gameshieldList) {\n            instance.sendMessage(player, \"\u00a75\" + gameshield.getName() + localization.get(locale, \"utils.click\"),\n                    \"RUN_COMMAND\", \"/np setgameshield \" + gameshield.getId(),\n                    \"SHOW_", "first_line_groundtruth": "gameshield.getName(), gameshield.getId()));", "first_line_prediction": "1, gameshield.getName()));", "match": 0}
{"groundtruth": "Component.text(core.getPrefix() + text);", "prediction": " Component.text(text);\n        if (clickAction != null) {\n            msg.clickEvent(ClickEvent.clickEvent(ClickEvent.Action.RUN_COMMAND, clickAction));\n        }\n        if (clickMsg != null) {\n            msg.hoverEvent(HoverEvent.showText(Component.text(clickMsg)));\n        }\n        if (hoverAction != null) {\n            msg.hoverEvent(HoverEvent.showText(Component.text(hoverAction)));\n        }\n        if (hoverMsg != null) {\n            msg.hoverEvent(HoverEvent.showText(Component.text(hoverMsg", "first_line_groundtruth": "Component.text(core.getPrefix() + text);", "first_line_prediction": " Component.text(text);", "match": 0}
{"groundtruth": "set(\"general.pluginVersion\", stats.getPluginVersion());", "prediction": "set(\"general.osArch\", System.getProperty(\"os.arch\"));\n                        configuration.set(\"general.osVersion\", System.getProperty(\"os.version\"));\n                        configuration.set(\"general.osLanguage\", System.getProperty(\"user.language\"));\n                        configuration.set(\"general.osCountry\", System.getProperty(\"user.country\"));\n                        configuration.set(\"general.osTimezone\", System.getProperty(\"user.timezone\"));\n                        configuration.set(\"general.osLocale\", System.getProperty(\"user.locale\"));\n                        configuration.set(\"general.osName\", System.getProperty(\"os.name\"));\n                        configuration.set(\"", "first_line_groundtruth": "set(\"general.pluginVersion\", stats.getPluginVersion());", "first_line_prediction": "set(\"general.osArch\", System.getProperty(\"os.arch\"));", "match": 0}
{"groundtruth": "\"general.ProxyVersion\", stats.getServerVersion());", "prediction": "stats.getServerName() + \".onlinePlayers\", stats.getOnlinePlayers());\n                        configuration.set(stats.getServerName() + \".maxPlayers\", stats.getMaxPlayers());\n                        configuration.set(stats.getServerName() + \".motd\", stats.getMotd());\n                        configuration.set(stats.getServerName() + \".version\", stats.getVersion());\n                        configuration.set(stats.getServerName() + \".uptime\", stats.getUptime());\n                        configuration.set(stats.getServerName() + \".motd\", stats.getMotd());\n                        configuration.set(stats.getServerName() + \".", "first_line_groundtruth": "\"general.ProxyVersion\", stats.getServerVersion());", "first_line_prediction": "stats.getServerName() + \".onlinePlayers\", stats.getOnlinePlayers());", "match": 0}
{"groundtruth": ", stats.getServerName());", "prediction": " , stats.getProxyName());\n                        configuration.set(\"general.ProxyVersion\" , stats.getProxyVersion());\n                        configuration.set(\"general.ProxyBuild\" , stats.getProxyBuild());\n                        configuration.set(\"general.ProxyBuildDate\" , stats.getProxyBuildDate());\n                        configuration.set(\"general.ProxyBuildTime\" , stats.getProxyBuildTime());\n                        configuration.set(\"general.ProxyBuildTimeMillis\" , stats.getProxyBuildTimeMillis());\n                        configuration.set(\"general.ProxyBuildTimeMillis2\" , stats.getProxyBuildTimeMillis2());\n                        configuration.set(\"", "first_line_groundtruth": ", stats.getServerName());", "first_line_prediction": " , stats.getProxyName());", "match": 0}
{"groundtruth": "), gameshield.getId()));", "prediction": "instance.getCore().getLanguage())));\n        }\n    }\n\n    private void gameshieldSelector(Player player) {\n        instance.sendMessage(player, localization.get(locale, \"select.gameshield\"));\n\n        List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();\n\n        for (Gameshield gameshield : gameshieldList) {\n            instance.sendMessage(player, \"\u00a75\" + gameshield.getName() + localization.get(locale, \"utils.click\"),\n                    \"RUN_COMMAND\", \"/np setgameshield \" + gameshield.getId(),\n                    \"SHOW", "first_line_groundtruth": "), gameshield.getId()));", "first_line_prediction": "instance.getCore().getLanguage())));", "match": 0}
{"groundtruth": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");", "prediction": " product.setDisableButton(false);\n            }\n        }\n        model.addAttribute(\"products\", products);\n        return \"main-user\";\n    }\n\n    @GetMapping(\"/main-admin\")\n    public String getMainAdminPage(Model model, HttpServletRequest request) {\n        HttpSession session = request.getSession();\n        User user = (User) session.getAttribute(\"user\");\n\n        List<Product> products = productService.findAll();\n        Long currentUserId = user.getId();\n        for (Product product : products) {\n            if (transactionService.isProductInTransactions(product)) {\n                product.setDescription(\"\u042d\u0442\u043e\u0442 \u0442", "first_line_groundtruth": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");", "first_line_prediction": " product.setDisableButton(false);", "match": 0}
{"groundtruth": "setEmail(user.getEmail());", "prediction": "setPassword(<PASSWORD>());\n                existUser.setEmail(user.getEmail());\n                existUser.setRole(user.getRole());\n                existUser.setStatus(user.getStatus());\n                userRepository.save(existUser);\n            }\n        }\n        return \"redirect:/table-users\";\n    }\n\n    @PostMapping(\"/delete/{id}\")\n    public String deleteUser(@PathVariable(\"id\") Long id, HttpSession session) {\n        User currentUser = (User) session.getAttribute(\"user\");\n        if (!currentUser.getId().equals(id)) {\n            Optional<User> optUser = userRepository.findById(id);", "first_line_groundtruth": "setEmail(user.getEmail());", "first_line_prediction": "setPassword(<PASSWORD>());", "match": 0}
{"groundtruth": "existUser.setRole(user.getRole());", "prediction": " userRepository.save(existUser);\n            }\n        }\n        return \"redirect:/table-users\";\n    }\n\n    @PostMapping(\"/delete/{id}\")\n    public String deleteUser(@PathVariable(\"id\") Long id, HttpSession session) {\n        User currentUser = (User) session.getAttribute(\"user\");\n        if (!currentUser.getId().equals(id)) {\n            Optional<User> optUser = userRepository.findById(id);\n            if (optUser.isPresent()) {\n                userRepository.deleteById(id);\n            }\n        }\n        return \"redirect:/table-users\";\n    }", "first_line_groundtruth": "existUser.setRole(user.getRole());", "first_line_prediction": " userRepository.save(existUser);", "match": 0}
{"groundtruth": "(user.getRole().equals(\"ADMIN\")) {", "prediction": " (user.getRole().equals(\"ROLE_ADMIN\")) {\n                return \"redirect:/admin/dashboard\";\n            } else {\n                return \"redirect:/user/dashboard\";\n            }\n        } else {\n            model.addAttribute(\"error\", \"Invalid email or password\");\n            return \"authorisation\";\n        }\n    }", "first_line_groundtruth": "(user.getRole().equals(\"ADMIN\")) {", "first_line_prediction": " (user.getRole().equals(\"ROLE_ADMIN\")) {", "match": 0}
{"groundtruth": "if (product.getCreatedBy().getId().equals(currentUserId)) {", "prediction": " if (product.getOwnerId().equals(currentUserId)) {\n                product.setDisableButton(false);\n            }\n        }\n        model.addAttribute(\"products\", products);\n        return \"main-user\";\n    }\n\n    @GetMapping(\"/main-admin\")\n    public String getMainAdminPage(Model model, HttpServletRequest request) {\n        HttpSession session = request.getSession();\n        User user = (User) session.getAttribute(\"user\");\n\n        List<Product> products = productService.findAll();\n        Long currentUserId = user.getId();\n        for (Product product : products) {\n            if (transactionService.isProductIn", "first_line_groundtruth": "if (product.getCreatedBy().getId().equals(currentUserId)) {", "first_line_prediction": " if (product.getOwnerId().equals(currentUserId)) {", "match": 0}
{"groundtruth": "user.setStatus(\"\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439\");", "prediction": " userRepository.save(user);\n        return \"redirect:/registration\";\n    }", "first_line_groundtruth": "user.setStatus(\"\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439\");", "first_line_prediction": " userRepository.save(user);", "match": 0}
{"groundtruth": "(!currentUser.getId().equals(id)) {", "prediction": " (currentUser.getRole().equals(\"ADMIN\")) {\n            Optional<User> userOptional = userRepository.findById(id);\n            if (userOptional.isPresent()) {\n                userRepository.save(user);\n                return \"redirect:/table-users\";\n            }\n        }\n        return \"redirect:/table-users\";\n    }\n\n    @PostMapping(\"/delete/{id}\")\n    public String deleteUser(@PathVariable(\"id\") Long id, HttpSession session) {\n        User currentUser = (User) session.getAttribute(\"user\");\n        if  (currentUser.getRole().equals(\"ADMIN\")) {\n            Optional<User> userOptional =", "first_line_groundtruth": "(!currentUser.getId().equals(id)) {", "first_line_prediction": " (currentUser.getRole().equals(\"ADMIN\")) {", "match": 0}
{"groundtruth": "product.setArtist(updatedProduct.getArtist());", "prediction": " productRepository.save(product);\n        return \"redirect:/table-products\";\n    }", "first_line_groundtruth": "product.setArtist(updatedProduct.getArtist());", "first_line_prediction": " productRepository.save(product);", "match": 0}
{"groundtruth": "user.setCreationDate(LocalDateTime.now());", "prediction": " user.setCreatedAt(LocalDateTime.now());\n        userRepository.save(user);\n        return \"redirect:/registration\";\n    }", "first_line_groundtruth": "user.setCreationDate(LocalDateTime.now());", "first_line_prediction": " user.setCreatedAt(LocalDateTime.now());", "match": 0}
{"groundtruth": "\"productId\", product.get().getId());", "prediction": "transactionService.getChartData(transaction));\n\n            return \"transaction\";\n        } else {\n            return \"redirect:/\";\n        }\n    }\n\n    @PostMapping(\"/billing\")\n    public String billing(@ModelAttribute Transaction transaction, Model model, HttpServletRequest request) {\n        HttpSession session = request.getSession();\n        User seller = (User) session.getAttribute(\"user\");\n        transaction.setSellerId(seller.getId());\n        transactionRepository.save(transaction);\n        return \"redirect:/\";\n    }\n\n    @GetMapping(\"/transactions\")\n    public String transactions(Model model, HttpServletRequest request) {\n        HttpSession session = request.getSession", "first_line_groundtruth": "\"productId\", product.get().getId());", "first_line_prediction": "transactionService.getChartData(transaction));", "match": 0}
{"groundtruth": "setImageUrl(updatedProduct.getImageUrl());", "prediction": "setPrice(updatedProduct.getPrice());\n        productRepository.save(product);\n        return \"redirect:/table-products\";\n    }", "first_line_groundtruth": "setImageUrl(updatedProduct.getImageUrl());", "first_line_prediction": "setPrice(updatedProduct.getPrice());", "match": 0}
{"groundtruth": "List<Comment> comments = commentRepository.findByProductId(id);", "prediction": " model.addAttribute(\"product\", product.get());\n             return \"product-details\";\n        }\n        return \"redirect:/table-products\";\n    }\n\n    @GetMapping(\"/{id}/edit\")\n    public String editProduct(@PathVariable long id, Model model) {\n        Optional<Product> product = productRepository.findById(id);\n        if (product.isPresent()) {\n            model.addAttribute(\"product\", product.get());\n            return \"product-edit\";\n        }\n        return \"redirect:/table-products\";\n    }\n\n    @PostMapping(\"/{id}/edit\")\n    public String updateProduct(@ModelAttribute Product product, @PathVariable", "first_line_groundtruth": "List<Comment> comments = commentRepository.findByProductId(id);", "first_line_prediction": " model.addAttribute(\"product\", product.get());", "match": 0}
{"groundtruth": "product.setCreationDate(LocalDateTime.now());", "prediction": " product.setCreatedDate(LocalDateTime.now());\n        productRepository.save(product);\n        return \"redirect:/table-products\";\n    }\n\n    @GetMapping(\"/edit/{id}\")\n    public String editProduct(@PathVariable(\"id\") Long id, Model model) {\n        Optional<Product> product = productRepository.findById(id);\n        if (product.isPresent()) {\n            model.addAttribute(\"product\", product.get());\n            return \"product-edit\";\n        }\n        return \"redirect:/table-products\";\n    }\n\n    @PostMapping(\"/edit/{id}\")\n    public String updateProduct(@ModelAttribute Product product, @PathVariable", "first_line_groundtruth": "product.setCreationDate(LocalDateTime.now());", "first_line_prediction": " product.setCreatedDate(LocalDateTime.now());", "match": 0}
{"groundtruth": "user.setRole(\"USER\");", "prediction": " user.setCreatedAt(LocalDateTime.now());\n        userRepository.save(user);\n        return \"redirect:/registration\";\n    }", "first_line_groundtruth": "user.setRole(\"USER\");", "first_line_prediction": " user.setCreatedAt(LocalDateTime.now());", "match": 0}
{"groundtruth": "product.get().getPrice().doubleValue());", "prediction": "product.get().getPrice());\n            transaction.setProductId(product.get().getId());\n\n            transactionService.saveTransaction(transaction);\n\n            return \"redirect:/\";\n        } else {\n            return \"redirect:/\";\n        }\n    }\n\n    @GetMapping(\"/transactions\")\n    public String transactions(Model model, HttpServletRequest request) {\n        HttpSession session = request.getSession();\n        User user = (User) session.getAttribute(\"user\");\n\n        List<Transaction> transactions = transactionRepository.findBySellerId(user.getId());\n\n        model.addAttribute(\"transactions\", transactions);\n\n        return \"transactions\";\n    }\n\n    @GetMapping(\"/transaction", "first_line_groundtruth": "product.get().getPrice().doubleValue());", "first_line_prediction": "product.get().getPrice());", "match": 0}
{"groundtruth": "System.out.println(transaction.getBuyerId());", "prediction": " transactionService.processTransaction(transaction, productId);\n        } catch (Exception e) {\n            model.addAttribute(\"error\", e.getMessage());\n            return \"redirect:/billing\";\n        }\n\n        return \"redirect:/billing\";\n    }\n\n    @GetMapping(\"/billing\")\n    public String billing(Model model, HttpServletRequest request) {\n        HttpSession session = request.getSession();\n        User buyer = (User) session.getAttribute(\"user\");\n\n        List<Transaction> transactions = transactionRepository.findByBuyerId(buyer.getId());\n\n        model.addAttribute(\"transactions\", transactions);\n\n        return \"billing\";\n    }\n\n    @GetMapping(\"/billing-", "first_line_groundtruth": "System.out.println(transaction.getBuyerId());", "first_line_prediction": " transactionService.processTransaction(transaction, productId);", "match": 0}
{"groundtruth": "instance.getCore().getDebugPingResponses().put(player.getUsername(), new ArrayList<>());", "prediction": " map.put(player.getUsername(), new ArrayList<>());\n                        }\n\n                        ArrayList<DebugPingResponse> debugPingResponses = map.get(player.getUsername());\n\n                        debugPingResponses.add(new DebugPingResponse(ping, neoRTT, backendRTT));\n\n                        instance.getCore().debug(\"DebugPingResponse added\");\n                    }\n\n                    pingMap.remove(keepAliveResponseKey);\n                }\n            }\n        });\n    }\n\n    public boolean isIPInRange(String ipRange, String ip) {\n        String[] ipRangeParts = ipRange.split(\"\\\\.\");\n        String[] ipParts = ip.split(\"\\\\", "first_line_groundtruth": "instance.getCore().getDebugPingResponses().put(player.getUsername(), new ArrayList<>());", "first_line_prediction": " map.put(player.getUsername(), new ArrayList<>());", "match": 0}
{"groundtruth": "<OrderItem> orderItems = productService.findOrderItemsByProduct(id);", "prediction": "<OrderItem> orderItems = productService.getProductOrderItems(id);\n        if (orderItems.isEmpty()) {\n            productService.deleteProductById(id);\n            redirectAttributes.addFlashAttribute(\"success\", \"Product deleted successfully!\");\n        } else {\n            redirectAttributes.addFlashAttribute(\"error\", \"Product cannot be deleted because it is in use!\");\n        }\n        return \"redirect:/products\";\n    }", "first_line_groundtruth": "<OrderItem> orderItems = productService.findOrderItemsByProduct(id);", "first_line_prediction": "<OrderItem> orderItems = productService.getProductOrderItems(id);", "match": 0}
{"groundtruth": "Optional<User> userOptional = userService.validateUser(username, password);", "prediction": " Optional<User> user = userService.findByUsername(username);\n         if (user.isPresent()) {\n             User userFromDb = user.get();\n             if (userFromDb.getPassword().equals(password)) {\n                 session.setAttribute(\"user\", userFromDb);\n                 return \"redirect:/\";\n             } else {\n                 model.addAttribute(\"error\", PASSWORD_MISMATCH);\n                 return \"login\";\n             }\n         } else {\n             model.addAttribute(\"error\", INVALID_USER);\n             return \"login\";\n         }\n    }\n\n    @PostMapping(\"/register\")\n    public String handleRegistration(@ModelAttribute User user, Model model", "first_line_groundtruth": "Optional<User> userOptional = userService.validateUser(username, password);", "first_line_prediction": " Optional<User> user = userService.findByUsername(username);", "match": 0}
{"groundtruth": "return orderItemRepository.findAllByProduct_Id(productId);", "prediction": " return orderItemRepository.findByProductId(productId);\n    }", "first_line_groundtruth": "return orderItemRepository.findAllByProduct_Id(productId);", "first_line_prediction": " return orderItemRepository.findByProductId(productId);", "match": 0}
{"groundtruth": "TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {", "prediction": "typeCanonicalText.startsWith(\"java.lang\")) {\n                return typeCanonicalText;\n            }\n            // \u7b80\u5355\u7c7b\u578b\n            if (typeCanonicalText.startsWith(\"java.lang\")) {\n                return typeCanonicalText;\n            }\n            // \u7b80\u5355\u7c7b\u578b\n            if (typeCanonicalText.startsWith(\"java.util\")) {\n                return typeCanonicalText;\n            }\n            // \u7b80\u5355\u7c7b\u578b\n            if (typeCanonicalText.startsWith(\"java.util.concurrent\")) {\n                return typeCanonicalText;\n            }\n            // \u7b80\u5355\u7c7b\u578b\n            if (typeCanonicalText.startsWith(\"java.util.function\")) {\n                return typeCanonicalText", "first_line_groundtruth": "TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {", "first_line_prediction": "typeCanonicalText.startsWith(\"java.lang\")) {", "match": 0}
{"groundtruth": "(TypeUtils.isMap(typeCanonicalText)) {", "prediction": " (TypeUtils.isMap(typeCanonicalText)) {\n            String keyType = TypeUtils.getMapKeyType(typeCanonicalText);\n            String valueType = TypeUtils.getMapValueType(typeCanonicalText);\n            return Collections.singletonMap(assemblePsiClass(keyType, project, autoCorrelationCount, putClass), assemblePsiClass(valueType, project, autoCorrelationCount, putClass));\n        }\n\n        // \u96c6\u5408\n        if (TypeUtils.isCollection(typeCanonicalText)) {\n            String elementType = TypeUtils.getCollectionElementType(typeCanonicalText);\n            return Collections.singletonList(assemblePsiClass(elementType,", "first_line_groundtruth": "(TypeUtils.isMap(typeCanonicalText)) {", "first_line_prediction": " (TypeUtils.isMap(typeCanonicalText)) {", "match": 0}
{"groundtruth": "= TypeUtils.primitiveToBox(typeCanonicalText);", "prediction": " = TypeUtils.getPrimitiveType(typeCanonicalText);\n        PsiShortNamesCache shortNamesCache = PsiShortNamesCache.getInstance(project);\n        GlobalSearchScope scope = GlobalSearchScope.allScope(project);\n        return shortNamesCache.getClassesByName(typeCanonicalText, scope).stream()\n                .filter(psiClass -> psiClass.getQualifiedName() != null)\n                .findFirst()\n                .orElse(null);\n    }", "first_line_groundtruth": "= TypeUtils.primitiveToBox(typeCanonicalText);", "first_line_prediction": " = TypeUtils.getPrimitiveType(typeCanonicalText);", "match": 0}
{"groundtruth": "if (TypeUtils.isPrimitiveOrSimpleType(fieldType.replaceAll(\"\\\\[]\", \"\"))) {", "prediction": " if (TypeUtils.isPrimitiveOrSimpleType(fieldType)) {\n                map.put(field.getName(), TypeUtils.getExampleValue(fieldType, false));\n                continue;\n            }\n            map.put(field.getName(), assemblePsiClass(fieldType, project, autoCorrelationCount, putClass));\n        }\n        return map;\n    }\n\n    public static PsiClass findPsiClass(String typeCanonicalText, Project project) {\n        PsiShortNamesCache shortNamesCache = PsiShortNamesCache.getInstance(project);\n        GlobalSearchScope scope = GlobalSearchScope.allScope(project);\n        return shortNamesCache.", "first_line_groundtruth": "if (TypeUtils.isPrimitiveOrSimpleType(fieldType.replaceAll(\"\\\\[]\", \"\"))) {", "first_line_prediction": " if (TypeUtils.isPrimitiveOrSimpleType(fieldType)) {", "match": 0}
{"groundtruth": "TypeUtils.getExampleValue(typeCanonicalText, false);", "prediction": "1;\n            }\n            // \u679a\u4e3e\n            if (TypeUtils.isEnum(typeCanonicalText)) {\n                return Collections.singletonList(assemblePsiEnum(typeCanonicalText, project, autoCorrelationCount, putClass));\n            }\n            // \u81ea\u5b9a\u4e49\u7c7b\n            if (TypeUtils.isCustomClass(typeCanonicalText)) {\n                return Collections.singletonList(assemblePsiClass(typeCanonicalText, project, autoCorrelationCount, putClass));\n            }\n            // \u81ea\u5b9a\u4e49\u63a5\u53e3\n            if (TypeUtils.isCustomInterface(typeCanonicalText)) {\n                return Collections.singletonList(assemblePsiInterface(typeCanonicalText, project", "first_line_groundtruth": "TypeUtils.getExampleValue(typeCanonicalText, false);", "first_line_prediction": "1;", "match": 0}
{"groundtruth": ".equals(date) && booking.getTime().equals(time)) {", "prediction": " == date && booking.getTime() == time) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": ".equals(date) && booking.getTime().equals(time)) {", "first_line_prediction": " == date && booking.getTime() == time) {", "match": 0}
{"groundtruth": ".getId() == tableId && booking.getDate().equals(date) && booking.getTime().equals(time)) {", "prediction": " != null && booking.getTable().getId() == tableId &&\n                    booking.getDate().equals(date) && booking.getTime().equals(time)) {\n                return true;\n            }\n        }\n        return false;\n    }", "first_line_groundtruth": ".getId() == tableId && booking.getDate().equals(date) && booking.getTime().equals(time)) {", "first_line_prediction": " != null && booking.getTable().getId() == tableId &&", "match": 0}
{"groundtruth": "staffRepository.findByLogin(login) != null;", "prediction": " staffRepository.existsByLogin(login);\n    }", "first_line_groundtruth": "staffRepository.findByLogin(login) != null;", "first_line_prediction": " staffRepository.existsByLogin(login);", "match": 0}
{"groundtruth": "staff.setApparatusEmployed(new java.sql.Date(currentDate.getTime()));", "prediction": " staff.setCreateDate(currentDate);\n         staff.setUpdateDate(currentDate);\n         staffService.addStaff(staff);\n         model.addAttribute(\"staff\", staffService.getAllStaff());\n         model.addAttribute(\"newStaff\", new Staff());\n         model.addAttribute(\"currentUser\", getCurrentUser());\n         return \"redirect:/staff\";\n    }\n\n    @GetMapping(\"/staff/edit\")\n    public String editStaff(@RequestParam(\"id\") int id, Model model) {\n        model.addAttribute(\"staff\", staffService.getStaffById(id));\n        model.addAttribute(\"newStaff\", staffService.getStaffById(id", "first_line_groundtruth": "staff.setApparatusEmployed(new java.sql.Date(currentDate.getTime()));", "first_line_prediction": " staff.setCreateDate(currentDate);", "match": 0}
{"groundtruth": "dishService.editDishDetails(id, name, description, recipe);", "prediction": " if (dishService.checkIfDishIsOrdered(id)) {\n         } else {\n            dishService.editDishDetails(id, name, description, recipe);\n         }\n        return \"redirect:/menu\";\n    }", "first_line_groundtruth": "dishService.editDishDetails(id, name, description, recipe);", "first_line_prediction": " if (dishService.checkIfDishIsOrdered(id)) {", "match": 0}
{"groundtruth": "DishType dishType = dishTypeRepository.findByName(typeName);", "prediction": " DishType dishType = dishTypeRepository.findByName(typeName);\n         if (dishType != null) {\n             Dish dish = new Dish();\n             dish.setName(name);\n             dish.setCost(cost);\n             dish.setType(dishType);\n             dishRepository.save(dish);\n         }\n    }", "first_line_groundtruth": "DishType dishType = dishTypeRepository.findByName(typeName);", "first_line_prediction": " DishType dishType = dishTypeRepository.findByName(typeName);", "match": 0}
{"groundtruth": "(dishService.checkIfDishIsOrdered(id)) {", "prediction": " (id == 0) {\n            dishService.createDish(name, cost, typeName);\n        } else {\n            dishService.updateDish(id, name, cost, typeName);\n        }\n        return \"redirect:/menu\";\n    }\n\n    @PostMapping(\"/menu/delete\")\n    public String deleteDish(@RequestParam(\"id\") int id) {\n        dishService.deleteDish(id);\n        return \"redirect:/menu\";\n    }\n\n    @PostMapping(\"/menu/upload\")\n    public String uploadDish(@RequestParam(\"file\") MultipartFile file) throws IOException {\n        dishService", "first_line_groundtruth": "(dishService.checkIfDishIsOrdered(id)) {", "first_line_prediction": " (id == 0) {", "match": 0}
{"groundtruth": "orderedDish.setStatus(status);", "prediction": " orderedDish.setStatus(status);\n             orderedDishRepository.save(orderedDish);\n        }\n        return \"redirect:/kitchen\";\n    }", "first_line_groundtruth": "orderedDish.setStatus(status);", "first_line_prediction": " orderedDish.setStatus(status);", "match": 0}
{"groundtruth": "<OrderedDish> dishesInOrder = orderedDishRepository.findAllByOrder(orderedDish.getOrder());", "prediction": "<OrderedDish> orderedDishes = orderedDishRepository.findAll();\n            List<OrderedDish> acceptedDishes = orderedDishes.stream()\n                    .filter(dish -> dish.getStatus().equals(\"\u041f\u0440\u0438\u043d\u044f\u0442\"))\n                    .collect(Collectors.toList());\n            return \"redirect:/kitchen\";\n        }\n        return \"redirect:/kitchen\";\n    }\n\n    @GetMapping(\"/order-dish/{id}\")\n    public String orderDish(@PathVariable(\"id\") int id, Model model) {\n        Optional<OrderedDish> optionalOrderedDish = orderedDishRepository.findById(id);\n       ", "first_line_groundtruth": "<OrderedDish> dishesInOrder = orderedDishRepository.findAllByOrder(orderedDish.getOrder());", "first_line_prediction": "<OrderedDish> orderedDishes = orderedDishRepository.findAll();", "match": 0}
{"groundtruth": "if (dishService.checkIfDishIsOrdered(id)) {", "prediction": " dishService.deleteDish(id);\n        return \"redirect:/menu\";\n    }\n\n    @PostMapping(\"/menu/add\")\n    public String addDish(@RequestParam(\"name\") String name, @RequestParam(\"cost\") double cost,\n                           @RequestParam(\"type\") String typeName, @RequestParam(\"image\") MultipartFile image) throws IOException {\n        dishService.addDish(name, cost, typeName, image);\n        return \"redirect:/menu\";\n    }", "first_line_groundtruth": "if (dishService.checkIfDishIsOrdered(id)) {", "first_line_prediction": " dishService.deleteDish(id);", "match": 0}
{"groundtruth": "model.addAttribute(\"staff\", staffService.getAllStaff());", "prediction": " return \"staff\";\n        }\n        staffService.addStaff(staff);\n        return \"redirect:/staff\";\n    }\n\n    @GetMapping(\"/staff/edit\")\n    public String editStaff(@RequestParam(\"id\") Long id, Model model) {\n        model.addAttribute(\"staff\", staffService.getStaffById(id));\n        model.addAttribute(\"currentUser\", getCurrentUser());\n        return \"staff\";\n    }\n\n    @PostMapping(\"/staff/edit\")\n    public String editStaff(@ModelAttribute Staff staff, Model model) {\n        staffService.editStaff(staff);\n        return \"redirect:/staff\";\n    }\n\n    @GetMapping(\"/staff", "first_line_groundtruth": "model.addAttribute(\"staff\", staffService.getAllStaff());", "first_line_prediction": " return \"staff\";", "match": 0}
{"groundtruth": "<Tables> allTables = tableBookingService.getAllTables();", "prediction": "<TableBooking> bookings = tableBookingService.getAllBookings();\n        model.addAttribute(\"bookings\", bookings);\n\n        List<Tables> allTables = tableBookingService.getAllTables();\n        model.addAttribute(\"tables\", allTables);\n\n        Date currentDate = Date.valueOf(LocalDate.now());\n        Date maxDate = Date.valueOf(LocalDate.now().plusDays(3));\n\n        model.addAttribute(\"currentDate\", currentDate);\n        model.addAttribute(\"maxDate\", maxDate);\n\n        List<LocalTime> times = new ArrayList<>();\n        for (LocalTime timeOption = LocalTime.of(1", "first_line_groundtruth": "<Tables> allTables = tableBookingService.getAllTables();", "first_line_prediction": "<TableBooking> bookings = tableBookingService.getAllBookings();", "match": 0}
{"groundtruth": "= orderedDish.getOrder();", "prediction": " = orderedDish.getOrder();\n                order.setStatus(\"\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e\");\n                orderRepository.save(order);\n            }\n        }\n        return \"redirect:/kitchen\";\n    }", "first_line_groundtruth": "= orderedDish.getOrder();", "first_line_prediction": " = orderedDish.getOrder();", "match": 0}
{"groundtruth": "loginExists(staff.getLogin())) {", "prediction": "addStaff(staff)) {\n            model.addAttribute(\"staff\", staffService.getAllStaff());\n            model.addAttribute(\"newStaff\", new Staff());\n            model.addAttribute(\"currentUser\", getCurrentUser());\n            return \"staff\";\n        } else {\n            model.addAttribute(\"staff\", staffService.getAllStaff());\n            model.addAttribute(\"newStaff\", staff);\n            model.addAttribute(\"currentUser\", getCurrentUser());\n            return \"staff\";\n        }\n    }\n\n    @GetMapping(\"/staff/delete\")\n    public String deleteStaff(@RequestParam(\"id\") int id, Model model) {\n        if (staffService.deleteStaff(id)) {", "first_line_groundtruth": "loginExists(staff.getLogin())) {", "first_line_prediction": "addStaff(staff)) {", "match": 0}
{"groundtruth": "!config.getMajorRules().isEmpty() || !config.getMinorRules().isEmpty()) {", "prediction": "config.getMajorUpdatePattern() != null) {\n                majorUpdatePatterns.add(Pattern.compile(config.getMajorUpdatePattern(), patternFlags));\n            }\n            if (config.getMinorUpdatePattern() != null) {\n                minorUpdatePatterns.add(Pattern.compile(config.getMinorUpdatePattern(), patternFlags));\n            }\n        }\n\n        tagPattern = Pattern.compile(tagRegex, patternFlags);\n    }\n\n    /**\n     * Returns the next version based on the commit history.\n     *\n     * @param changeSets the commit history\n     * @return the next version\n     */\n    public Version getNextVersion", "first_line_groundtruth": "!config.getMajorRules().isEmpty() || !config.getMinorRules().isEmpty()) {", "first_line_prediction": "config.getMajorUpdatePattern() != null) {", "match": 0}
{"groundtruth": ").isEmpty() || !config.getMinorRules().isEmpty()) {", "prediction": "majorUpdatePatterns).isEmpty()) {\n                majorUpdatePatterns.addAll(config.getMajorRules(majorUpdatePatterns));\n            }\n            if (!config.getMinorRules(minorUpdatePatterns).isEmpty()) {\n                minorUpdatePatterns.addAll(config.getMinorRules(minorUpdatePatterns));\n            }\n        }\n\n        tagPattern = Pattern.compile(tagRegex, patternFlags);\n    }\n\n    /**\n     * Returns the next version based on the commit history.\n     *\n     * @param changeSets the commit history\n     * @return the next version\n     */\n    public Version getNextVersion(List<ChangeSet> changeSets) {", "first_line_groundtruth": ").isEmpty() || !config.getMinorRules().isEmpty()) {", "first_line_prediction": "majorUpdatePatterns).isEmpty()) {", "match": 0}
{"groundtruth": "semverConfigVersionTag = config.getVersionTag();", "prediction": " tagRegexOverride = config.getTagRegex();\n            if (tagRegexOverride != null) {\n                tagRegex = tagRegexOverride;\n            }\n\n            for (String pattern : config.getMajorUpdatePatterns()) {\n                majorUpdatePatterns.add(Pattern.compile(pattern, patternFlags));\n            }\n\n            for (String pattern : config.getMinorUpdatePatterns()) {\n                minorUpdatePatterns.add(Pattern.compile(pattern, patternFlags));\n            }\n        }\n\n        tagPattern = Pattern.compile(tagRegex, patternFlags);\n    }\n\n    /**\n     * Returns the next version based on the commit history.\n     *\n    ", "first_line_groundtruth": "semverConfigVersionTag = config.getVersionTag();", "first_line_prediction": " tagRegexOverride = config.getTagRegex();", "match": 0}
{"groundtruth": "commitHistory.getChanges()) {", "prediction": " commitHistory.getChangeSets()) {\n            Version.Element element = Version.Element.from(change.getRevision());\n            if (element.ordinal() > maxElement.ordinal()) {\n                maxElement = element;\n            }\n        }\n        return maxElement;\n    }\n\n    public Version getNextVersion(CommitHistory commitHistory) {\n        Version.Element maxElement = getMaxElementSinceLastVersionTag(commitHistory);\n        Version.Element nextElement = maxElement.next();\n        return Version.valueOf(maxElement.toString() + \".\" + nextElement.toString());\n    }\n\n    public boolean isMajorUpdate(ChangeSet change", "first_line_groundtruth": "commitHistory.getChanges()) {", "first_line_prediction": " commitHistory.getChangeSets()) {", "match": 0}
{"groundtruth": "= versionRules.getTagPattern().matcher(tag);", "prediction": " = versionRules.getVersionTagPattern().matcher(tag);\n                        if (matcher.matches()) {\n                            return matcher.group(1);\n                        }\n                        return null;\n                     })\n                     .filter(Objects::nonNull)\n                     .collect(Collectors.toList());\n\n                if (versionTags.size() > 0) {\n                    latestVersionTag = versionTags.get(versionTags.size() - 1);\n                }\n            }\n        }\n    }", "first_line_groundtruth": "= versionRules.getTagPattern().matcher(tag);", "first_line_prediction": " = versionRules.getVersionTagPattern().matcher(tag);", "match": 0}
{"groundtruth": "= commitHistory.getLastVersionTag();", "prediction": " = versionRules.getLatestVersionTag(commitHistory);\n        String latestVersionCommit = versionRules.getLatestVersionCommit(commitHistory);\n\n        if (latestVersionTag != null) {\n            LOG.debug(\"Latest version tag      : {}\", latestVersionTag);\n            LOG.debug(\"Latest version commit   : {}\", latestVersionCommit);\n            LOG.debug(\"Latest version tag      : {}\", latestVersionTag);\n            LOG.debug(\"Latest version commit   : {}\", latestVersionCommit);\n            LOG.debug(\"Using latest version tag\");\n            usingTag = true;\n        } else {\n            LOG.debug(\"Using latest version commit", "first_line_groundtruth": "= commitHistory.getLastVersionTag();", "first_line_prediction": " = versionRules.getLatestVersionTag(commitHistory);", "match": 0}
{"groundtruth": "userRepository.getUserByUserId(userId);", "prediction": " null;\n        }\n    }\n\n    public User getUserByEmail(String email) {\n        User existingUser = userRepository.getUserByEmail(email);\n        if (existingUser != null) {\n            return existingUser;\n        } else {\n            return  null;\n        }\n    }\n\n    public User getUserByUsername(String username) {\n        User existingUser = userRepository.getUserByUsername(username);\n        if (existingUser != null) {\n            return existingUser;\n        } else {\n            return  null;\n        }\n    }\n\n    public User createUser(User user) {\n        user.setUserId(UUID.", "first_line_groundtruth": "userRepository.getUserByUserId(userId);", "first_line_prediction": " null;", "match": 0}
{"groundtruth": "List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> {", "prediction": " List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                 .filter(res -> reservationsId.contains(res.getReservationId()))\n                 .collect(Collectors.toList());\n         reservations.forEach(res -> res.setStatus(Status.APPROVED));\n         reservationRepository.saveAll(reservations);\n         return reservations;\n    }\n\n    public List<Reservation> rejectReservations(List<String> reservationsId) {\n        List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> reservationsId.contains(res", "first_line_groundtruth": "List<Reservation> reservations = reservationRepository.getAllReservations().stream()", "first_line_prediction": " List<Reservation> reservations = reservationRepository.getAllReservations().stream()", "match": 0}
{"groundtruth": "User existingUser = userRepository.getUserByUserId(userId);", "prediction": " return userRepository.getUserById(userId);\n    }\n\n    public User getUserByEmail(String email) {\n        return userRepository.getUserByEmail(email);\n    }\n\n    public User getUserByUsername(String username) {\n        return userRepository.getUserByUsername(username);\n    }\n\n    public User createUser(User user) {\n        user.setId(UUID.randomUUID().toString());\n        userRepository.save(user);\n        return user;\n    }\n\n    public User updateUser(User user) {\n        userRepository.save(user);\n        return user;\n    }\n\n    public void deleteUser(String userId) {", "first_line_groundtruth": "User existingUser = userRepository.getUserByUserId(userId);", "first_line_prediction": " return userRepository.getUserById(userId);", "match": 0}
{"groundtruth": "ArrayList<>(userRepository.getAllUsers());", "prediction": " ArrayList<User>() {{\n            add(user1);\n            add(user2);\n        }};\n    }\n\n    public User getUser(String id) {\n        return userRepository.getUser(id);\n    }\n\n    public User getUserByEmail(String email) {\n        return userRepository.getUserByEmail(email);\n    }\n\n    public User getUserByUsername(String username) {\n        return userRepository.getUserByUsername(username);\n    }\n\n    public User getUserByToken(String token) {\n        return userRepository.getUserByToken(token);\n    }\n\n    public User getUserByToken(String token, String username) {\n       ", "first_line_groundtruth": "ArrayList<>(userRepository.getAllUsers());", "first_line_prediction": " ArrayList<User>() {{", "match": 0}
{"groundtruth": "= deepCopy(object.getApplication());", "prediction": " = new HashMap<>(bindings);\n        final Map<String, Entity> local       = new HashMap<>(bindings);\n        final Map<String, Entity> localBinds  = new HashMap<>(bindings);\n        final Map<String, Entity> localBinds2 = new HashMap<>(bindings);\n        final Map<String, Entity> localBinds3 = new HashMap<>(bindings);\n        final Map<String, Entity> localBinds4 = new HashMap<>(bindings);\n        final Map<String, Entity> localBinds5 = new HashMap<>(bindings);\n        final Map<String, Entity> localBinds6 = new HashMap<>(", "first_line_groundtruth": "= deepCopy(object.getApplication());", "first_line_prediction": " = new HashMap<>(bindings);", "match": 0}
{"groundtruth": "locator = ((Locator) binding.getValue()).getPath();", "prediction": "ary = new ArrayList<>();\n                        ary.add(binding.getKey());\n                        final String name = String.format(\"\u03bd%d\", Flatter.counter);\n                        Flatter.counter += 1;\n                        this.box.put(name, ary);\n                        bindings.put(binding.getKey(), new FlatObject(name, \"\u03be\"));\n                        found = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }", "first_line_groundtruth": "locator = ((Locator) binding.getValue()).getPath();", "first_line_prediction": "ary = new ArrayList<>();", "match": 0}
{"groundtruth": "orgGroupSendHeaders.setXAcsDingtalkAccessToken(accessTokenService.getAccessToken());", "prediction": " orgGroupSendHeaders.setAuthorization(accessTokenService.getAccessToken());\n        OrgGroupSendRequest orgGroupSendRequest = new OrgGroupSendRequest();\n        orgGroupSendRequest.setOpenConversationId(openConversationId);\n        orgGroupSendRequest.setMsgtype(\"text\");\n        orgGroupSendRequest.setText(new JSONObject().fluentPut(\"content\", text));\n        OrgGroupSendResponse orgGroupSendResponse = robotClient.orgGroupSend(orgGroupSendHeaders, orgGroupSendRequest);\n        return Objects.requireNonNull(orgGroupSendResponse).getMessageId();\n    }", "first_line_groundtruth": "orgGroupSendHeaders.setXAcsDingtalkAccessToken(accessTokenService.getAccessToken());", "first_line_prediction": " orgGroupSendHeaders.setAuthorization(accessTokenService.getAccessToken());", "match": 0}
{"groundtruth": "box.get(object.getName()));", "prediction": "box.content());\n        final Map<String, Entity> flat = new HashMap<>(bindings);\n        final Map<String, Entity> local = new HashMap<>(bindings);\n        final Map<String, Entity> global = new HashMap<>(bindings);\n        final Map<String, Entity> localBinds = new HashMap<>();\n        final Map<String, Entity> globalBinds = new HashMap<>();\n        final Map<String, Entity> localBindsCopy = new HashMap<>();\n        final Map<String, Entity> globalBindsCopy = new HashMap<>();\n        final Map<String, Entity> localBindsCopy2 = new HashMap<>();", "first_line_groundtruth": "box.get(object.getName()));", "first_line_prediction": "box.content());", "match": 0}
{"groundtruth": "tokenizer.getToken();", "prediction": "tokenizer.next();\n        if (token instanceof BracketToken) {\n            return this.bracket();\n        }\n        if (token instanceof StringToken) {\n            return this.string();\n        }\n        throw new IllegalStateException(\n            String.format(\"Unexpected token: %s\", token)\n        );\n    }\n\n    /**\n     * Reads all entities.\n     * @return The parsed entities.\n     */\n    public Iterable<Entity> all() {\n        final Map<String, Entity> entities = new HashMap<>();\n        while (true) {\n            final Entity entity = this.one();\n            if (entity instanceof Empty) {\n                break;\n           ", "first_line_groundtruth": "tokenizer.getToken();", "first_line_prediction": "tokenizer.next();", "match": 0}
{"groundtruth": ").getName();", "prediction": "\n                        .getValue()).getName();\n                    if (!uses.contains(value)) {\n                        queue.add(value);\n                    }\n                }\n            }\n        }\n        final List<String> toRemove = new ArrayList<>();\n        for (final Map.Entry<String, Entity> entry : this.box.content().entrySet()) {\n            if (!uses.contains(entry.getKey())) {\n                toRemove.add(entry.getKey());\n            }\n        }\n        for (final String name : toRemove) {\n            this.box.remove(name);\n        }\n    }", "first_line_groundtruth": ").getName();", "first_line_prediction": "", "match": 0}
{"groundtruth": "((FlatObject) binding.getValue()).getLocator())\n                    );", "prediction": "0)\n                    );\n                }\n            }\n        }\n    }", "first_line_groundtruth": "((FlatObject) binding.getValue()).getLocator())", "first_line_prediction": "0)", "match": 0}
{"groundtruth": "robotGroupMessagesService.send(openConversationId, \"hello\");", "prediction": " robotGroupMessagesService.sendRobotMessage(openConversationId, msg);\n                } catch (Exception e) {\n                    log.error(\"send robot message error, openConversationId={}, msg={}\", openConversationId, msg, e);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"receive robot message error, message={}\", message, e);\n        }\n        return null;\n    }", "first_line_groundtruth": "robotGroupMessagesService.send(openConversationId, \"hello\");", "first_line_prediction": " robotGroupMessagesService.sendRobotMessage(openConversationId, msg);", "match": 0}
{"groundtruth": "this.tokenizer.next();", "prediction": " result.put(name, this.one());\n        }\n        return result;\n    }", "first_line_groundtruth": "this.tokenizer.next();", "first_line_prediction": " result.put(name, this.one());", "match": 0}
{"groundtruth": "(storage.getName());", "prediction": "(Text.of(visitors.config.getWelcomeMemberName()));\n        player.setCustomNameVisible(true);\n    }", "first_line_groundtruth": "(storage.getName());", "first_line_prediction": "(Text.of(visitors.config.getWelcomeMemberName()));", "match": 0}
{"groundtruth": ".add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));", "prediction": ".add(BlockRegistry.get(member.rack()), beautifyName(member.rack()));\n            }\n        }\n    }", "first_line_groundtruth": ".add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));", "first_line_prediction": ".add(BlockRegistry.get(member.rack()), beautifyName(member.rack()));", "match": 0}
{"groundtruth": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");", "prediction": ".add(BlockRegistry.get(member.raft()), beautifyName(member.raft()));\n                builder.add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));\n                builder.add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));\n                builder.add(BlockRegistry.get(member.crossedFence()), beautifyName(member.crossedFence()));\n                builder.add(BlockRegistry.get(member.rack()), beautifyName(member.rack()));\n            }\n        }\n    }", "first_line_groundtruth": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");", "first_line_prediction": ".add(BlockRegistry.get(member.raft()), beautifyName(member.raft()));", "match": 0}
{"groundtruth": ".add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));", "prediction": ".add(BlockRegistry.get(member.rack()), beautifyName(member.rack()));\n            }\n        }\n    }", "first_line_groundtruth": ".add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));", "first_line_prediction": ".add(BlockRegistry.get(member.rack()), beautifyName(member.rack()));", "match": 0}
{"groundtruth": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));", "prediction": "(BlockRegistry.get(member.pole()), beautifyName(member.pole()));\n                builder.add(BlockRegistry.get(member.poleBroken()), beautifyName(member.poleBroken()));\n                builder.add(BlockRegistry.get(member.poleBrokenCrossed()), beautifyName(member.poleBrokenCrossed()));\n                builder.add(BlockRegistry.get(member.poleBrokenCrossedBroken()), beautifyName(member.poleBrokenCrossedBroken()));\n                builder.add(BlockRegistry.get(member.poleBrokenCrossedBrokenCros", "first_line_groundtruth": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));", "first_line_prediction": "(BlockRegistry.get(member.pole()), beautifyName(member.pole()));", "match": 0}
{"groundtruth": "beautifyName(member.raft()));", "prediction": " \"Rack Processing\");\n            }\n        }\n    }", "first_line_groundtruth": "beautifyName(member.raft()));", "first_line_prediction": " \"Rack Processing\");", "match": 0}
{"groundtruth": "fence()), beautifyName(member.fence()));", "prediction": "rack()), beautifyName(member.rack()));\n            }\n        }\n    }", "first_line_groundtruth": "fence()), beautifyName(member.fence()));", "first_line_prediction": "rack()), beautifyName(member.rack()));", "match": 0}
{"groundtruth": "member.rack()), beautifyName(member.rack()));", "prediction": "member.pole()), beautifyName(member.pole()));\n                builder.add(BlockRegistry.get(member.poleBroken()), beautifyName(member.poleBroken()));\n                builder.add(BlockRegistry.get(member.poleBrokenCrossed()), beautifyName(member.poleBrokenCrossed()));\n                builder.add(BlockRegistry.get(member.poleBrokenCrossedBroken()), beautifyName(member.poleBrokenCrossedBroken()));\n                builder.add(BlockRegistry.get(member.poleBrokenCrossedBrokenCrossed()), beautifyName", "first_line_groundtruth": "member.rack()), beautifyName(member.rack()));", "first_line_prediction": "member.pole()), beautifyName(member.pole()));", "match": 0}
{"groundtruth": ".get(member.crossedFence()), beautifyName(member.crossedFence()));", "prediction": ".get(member.pole()), beautifyName(member.pole()));\n                builder.add(BlockRegistry.get(member.pole2()), beautifyName(member.pole2()));\n                builder.add(BlockRegistry.get(member.pole3()), beautifyName(member.pole3()));\n                builder.add(BlockRegistry.get(member.pole4()), beautifyName(member.pole4()));\n                builder.add(BlockRegistry.get(member.pole5()), beautifyName(member.pole5()));\n                builder.add(BlockRegistry.get(member.", "first_line_groundtruth": ".get(member.crossedFence()), beautifyName(member.crossedFence()));", "first_line_prediction": ".get(member.pole()), beautifyName(member.pole()));", "match": 0}
{"groundtruth": ", beautifyName(member.brokenRaft()));", "prediction": " + \".broken\", beautifyName(member.brokenRaft()));\n            }\n        }\n    }", "first_line_groundtruth": ", beautifyName(member.brokenRaft()));", "first_line_prediction": " + \".broken\", beautifyName(member.brokenRaft()));", "match": 0}
{"groundtruth": "Logger.writeError(\"Invalid server response\");", "prediction": "\tLogger.writeInfo(\"Server is not responding\");\n\t\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t} catch (IOException e){\n\t\t\tLogger.writeError(\"Error while connecting to server\");\n\t\t\tSystem.exit(0);\n\t\t}", "first_line_groundtruth": "Logger.writeError(\"Invalid server response\");", "first_line_prediction": "\tLogger.writeInfo(\"Server is not responding\");", "match": 0}
{"groundtruth": "(\"position fen \"+b.getFEN());", "prediction": "(\"position fen \"+b.getFen());\n\t\twriteCommand(\"go depth 1\");\n\t\tString line = getOutput(1000);\n\t\tString[] split = line.split(\" \");\n\t\treturn split[split.length-1];", "first_line_groundtruth": "(\"position fen \"+b.getFEN());", "first_line_prediction": "(\"position fen \"+b.getFen());", "match": 0}
{"groundtruth": "username = jwtUtil.verifyToken(token);", "prediction": " newToken = refreshTokenManager.reissueToken(token);\n\t\t\t\tresponse.setHeader(\"Refresh-Token\", newToken);\n\t\t\t\tresponseUtil.setJwtHeader(response, newToken);\n\t\t\t} catch (RefreshTokenMismatchException e) {\n\t\t\t\tthrow new JWTVerificationException(\"Refresh-Token mismatch\", e);\n\t\t\t} catch (RefreshTokenServiceUnavailableException e) {\n\t\t\t\tthrow new JWTVerificationException(\"Refresh-Token service unavailable\", e);\n\t\t\t}\n\t\t}", "first_line_groundtruth": "username = jwtUtil.verifyToken(token);", "first_line_prediction": " newToken = refreshTokenManager.reissueToken(token);", "match": 0}
{"groundtruth": "getIncrementTime(), b.getIncrementTime()));", "prediction": "getIncrement(Color.WHITE), b.getIncrement(Color.BLACK)));\n\t\tString line = getOutput(1000);\n\t\tif (line.startsWith(\"bestmove\")){\n\t\t\treturn line.substring(8);\n\t\t} else {\n\t\t\treturn null;\n\t\t}", "first_line_groundtruth": "getIncrementTime(), b.getIncrementTime()));", "first_line_prediction": "getIncrement(Color.WHITE), b.getIncrement(Color.BLACK)));", "match": 0}
{"groundtruth": "Color.WHITE), b.getTime(Color.BLACK), b.getIncrementTime(), b.getIncrementTime()));", "prediction": "true), b.getTime(false), b.getIncrement(true), b.getIncrement(false)));\n\t\tString line = getOutput(1000);\n\t\tif (line.startsWith(\"bestmove\")){\n\t\t\treturn line.substring(8);\n\t\t} else {\n\t\t\treturn null;\n\t\t}", "first_line_groundtruth": "Color.WHITE), b.getTime(Color.BLACK), b.getIncrementTime(), b.getIncrementTime()));", "first_line_prediction": "true), b.getTime(false), b.getIncrement(true), b.getIncrement(false)));", "match": 0}
{"groundtruth": "cm.reply();", "prediction": "\tcm.start();\n\t\t\t\t} catch (IOException ex){\n\t\t\t\t\tLogger.writeError(\"Error accepting client\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tlistener.start();", "first_line_groundtruth": "cm.reply();", "first_line_prediction": "\tcm.start();", "match": 0}
{"groundtruth": "user = userDetailsService.loadUserByUsername((String)auth.getPrincipal());", "prediction": " userDetails = userDetailsService.loadUserByUsername(auth.getUsername());", "first_line_groundtruth": "user = userDetailsService.loadUserByUsername((String)auth.getPrincipal());", "first_line_prediction": " userDetails = userDetailsService.loadUserByUsername(auth.getUsername());", "match": 0}
{"groundtruth": "auth.eraseCredentials();", "prediction": "\t// \uc778", "first_line_groundtruth": "auth.eraseCredentials();", "first_line_prediction": "\t// \uc778", "match": 0}
{"groundtruth": "ecoproveedor.calcularPuntosTotales();", "prediction": "0;\n        for(Producto p : ecoproveedor.getListaProductos()){\n            puntos += p.getPuntos();\n        }\n        ecoproveedor.setPuntos(puntos);\n        repository.save(ecoproveedor);\n    }", "first_line_groundtruth": "ecoproveedor.calcularPuntosTotales();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "builder.add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.chinese + \"\u7b4f\");", "prediction": " builder.add(BlockRegistry.get(member.brokenRaft()), member.chinese + \"", "first_line_groundtruth": "builder.add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.chinese + \"\u7b4f\");", "first_line_prediction": " builder.add(BlockRegistry.get(member.brokenRaft()), member.chinese + \"", "match": 0}
{"groundtruth": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();", "prediction": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();\n\t\tfor (int i = 0; i < pawns; i++){\n\t\t\tif (i == 0){\n\t\t\t\tif (color == Color.WHITE){\n\t\t\t\t\tcaptures.add(pieces.get(i));\n\t\t\t\t} else {\n\t\t\t\t\tcaptures.add(pieces.get(i+1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (color == Color.WHITE){\n\t\t\t\t\tcaptures.add(pieces.get(i+1));\n\t\t\t", "first_line_groundtruth": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();", "first_line_prediction": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();", "match": 1}
{"groundtruth": "Flotage.id(id), block);", "prediction": " Flotage.id(id), block);\n    }", "first_line_groundtruth": "Flotage.id(id), block);", "first_line_prediction": " Flotage.id(id), block);", "match": 0}
{"groundtruth": "().getNamespace(), \"block/\" + member.log().getPath());", "prediction": "().getNamespace(), \"block/\" + member.log().getPath());\n        return new TextureMap(id, member.log().getPath());\n    }\n\n    @Override\n    public void generateItemModels(ItemModelGenerator generator) {\n        itemGenerator = generator;\n        for (BlockMember member : BlockMember.values()) {\n            itemMember(member);\n        }\n    }", "first_line_groundtruth": "().getNamespace(), \"block/\" + member.log().getPath());", "first_line_prediction": "().getNamespace(), \"block/\" + member.log().getPath());", "match": 1}
{"groundtruth": "() && p.getColor() == piece.getColor()){", "prediction": "()){\n\t\t\t\t\tidentical.add(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (Piece p : identical){\n\t\t\t\tp.setX(p.getX() + (p.getX() - p1[0]));\n\t\t\t\tp.setY(p.getY() + (p.getY() - p1[1]));\n\t\t\t}\n\t\t\tpiece.setX(p2[0]);\n\t\t\tpiece.setY(p2[1]);\n\t\t\t\n\t\t\tif (prom != null){\n\t\t\t\tpromote(piece.getColor(), Piece.Pieces.valueOf(prom));\n\t\t\t}\n\t\t\t\n\t\t\tif", "first_line_groundtruth": "() && p.getColor() == piece.getColor()){", "first_line_prediction": "()){", "match": 0}
{"groundtruth": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();", "prediction": "piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();\n\t\tint bishops = (int)pieces.stream(piece -> piece.getType().getName() == Piece.PIECE_BISHOP).count();\n\t\tint queens = (int)pieces.stream(piece -> piece.getType().getName() == Piece.PIECE_QUEEN).count();\n\t\tint kings = (int)pieces.stream(piece -> piece.getType().getName() == Piece.PIECE_KING).count();\n\t\tint total = pawns", "first_line_groundtruth": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();", "first_line_prediction": "piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();", "match": 0}
{"groundtruth": "if (piece == null || piece.getColor() != this.player) return false;", "prediction": "\tif (piece == null) return false;\n\t\t\tif (piece.getColor() != this.player) return false;\n\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN && piece.getY() == 1 && piece.getX() == p1[1]) return false;\n\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN && piece.getY() == 6 && piece.getX() == p1[1]) return false;\n\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN &&", "first_line_groundtruth": "if (piece == null || piece.getColor() != this.player) return false;", "first_line_prediction": "\tif (piece == null) return false;", "match": 0}
{"groundtruth": "> pieces = getPiecesOnBoard().stream().filter(piece -> piece.getColor() == color).toList();", "prediction": "> pieces = getPiecesOnBoard().stream().filter(p -> p.getColor() == color).collect(Collectors.toList());\n\t\tfor (Piece piece : pieces){\n\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN){\n\t\t\t\tif (piece.getY() == 1){\n\t\t\t\t\tthis.blackCaptured.add(piece);\n\t\t\t\t} else if (piece.getY() == 6){\n\t\t\t\t\tthis.whiteCaptured.add(piece);\n\t\t\t\t}\n\t\t\t}\n\t\t}", "first_line_groundtruth": "> pieces = getPiecesOnBoard().stream().filter(piece -> piece.getColor() == color).toList();", "first_line_prediction": "> pieces = getPiecesOnBoard().stream().filter(p -> p.getColor() == color).collect(Collectors.toList());", "match": 0}
{"groundtruth": "p.getColor() == piece.getColor()){", "prediction": " p.getColor() == piece.getColor()){\n\t\t\t\t\tidentical.add(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (Piece p : identical){\n\t\t\t\tp.setX(p.getX() + p1[0] - p2[0]);\n\t\t\t\tp.setY(p.getY() + p1[1] - p2[1]);\n\t\t\t}\n\t\t\tpiece.setX(p2[0]);\n\t\t\tpiece.setY(p2[1]);\n\t\t\t\n\t\t\tif (prom != null){\n\t\t\t\tpromote(piece.getColor(), Piece.Pieces.valueOf(", "first_line_groundtruth": "p.getColor() == piece.getColor()){", "first_line_prediction": " p.getColor() == piece.getColor()){", "match": 0}
{"groundtruth": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){", "prediction": ".WHITE){\n\t\t\t\tthis.whiteChecks.addAll(boardPiece.getChecks(newLegalMoves));\n\t\t\t} else {\n\t\t\t\tthis.blackChecks.addAll(boardPiece.getChecks(newLegalMoves));\n\t\t\t}\n\t\t}", "first_line_groundtruth": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){", "first_line_prediction": ".WHITE){", "match": 0}
{"groundtruth": "pos) == recipe.getMode()) {", "prediction": "1, recipe.getWorkingMode())) {\n                    if (tile.processTime >= tile.processTimeTotal) {\n                        tile.processTime = 0;\n                        tile.processTimeTotal = 0;\n                        tile.clean();\n                        flag = true;\n                    } else {\n                        tile.processTime++;\n                        flag = true;\n                    }\n                }\n            }\n        }\n\n        if (flag) {\n            tile.markDirty();\n            world.updateListeners(pos, state, state, (1) | (1 << 1));\n        }\n    }\n\n    @Override\n    public void clear() {\n        for (int i", "first_line_groundtruth": "pos) == recipe.getMode()) {", "first_line_prediction": "1, recipe.getWorkingMode())) {", "match": 0}
{"groundtruth": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();", "prediction": "\n\t\t\t\t.filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK)\n\t\t\t\t.filter(piece -> piece.getColor() == color)\n\t\t\t\t.count();\n\t\tint knights = (int)pieces.stream()\n\t\t\t\t.filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT)\n\t\t\t\t.filter(piece -> piece.getColor() == color)\n\t\t\t\t.count();\n\t\tint bishops = (int)pieces.stream()\n\t\t\t\t.filter(piece -> piece.getType().getName() == Piece.PI", "first_line_groundtruth": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();", "first_line_prediction": "", "match": 0}
{"groundtruth": "if (MapUtils.isNotEmpty(this.properties.getConfig())) {", "prediction": " // 1. get request args\n        Request request = (Request) args[FEIGN_REQUEST_ARGS_INDEX];\n        // 2. get options args\n        Options options = (Options) args[FEIGN_REQUEST_OPTION_ARGS_INDEX];\n        // 3. get timeout config\n        TimeoutProperty timeoutProperty = getTimeoutProperty(request.url());\n        // 4. get timeout\n        Integer timeout = timeoutProperty.getTimeout();\n        // 5. set timeout\n        options.timeout(timeout);\n        // 6. invoke\n        return invocation.proceed();\n    }\n\n    /**\n     * get timeout property\n    ", "first_line_groundtruth": "if (MapUtils.isNotEmpty(this.properties.getConfig())) {", "first_line_prediction": " // 1. get request args", "match": 0}
{"groundtruth": ".wrapperTimeoutOptions(this.properties.getHostConfig(uri.getHost()), uri);", "prediction": ".options(uri);\n                } else if (args.length == FEIGN_ARGS_LEN + 1) {\n                    Request request = (Request) args[FEIGN_REQUEST_ARGS_INDEX];\n                    URI uri = URI.create(request.url());\n                    options = this.options(uri);\n                    args[FEIGN_REQUEST_OPTION_ARGS_INDEX] = options;\n                }\n                if (Objects.nonNull(options)) {\n                    TimeoutProperty timeoutProperty = this.properties.getConfig().get(options.key());\n                    if (Objects.nonNull(timeoutProperty)) {\n                        options.read", "first_line_groundtruth": ".wrapperTimeoutOptions(this.properties.getHostConfig(uri.getHost()), uri);", "first_line_prediction": ".options(uri);", "match": 0}
{"groundtruth": "[capture.getX()][capture.getY()] = null;", "prediction": "[p2[0]][p1[1]] = null;\n\t\t\t}\n\t\t\t\n\t\t\tthis.board[p1[0]][p1[1]] = null;\n\t\t\tthis.board[p2[0]][p2[1]] = piece;\n\t\t\t\n\t\t\tif (prom != null){\n\t\t\t\tpromote(piece.getColor(), piece.getType());\n\t\t\t}\n\t\t\t\n\t\t\tif (capture != null){\n\t\t\t\tcapture(capture);\n\t\t\t}\n\t\t\t\n\t\t\tif (identical.size() > 0){\n\t\t\t\tfor (Piece p : identical){\n\t\t\t\t\tthis.board[p.getX()][", "first_line_groundtruth": "[capture.getX()][capture.getY()] = null;", "first_line_prediction": "[p2[0]][p1[1]] = null;", "match": 0}
{"groundtruth": "add(BlockRegistry.get(member.crossedFence()), member.chinese + \"\u5341\u5b57\u6805\u680f\");", "prediction": "add(BlockRegistry.get(member.crossedFence()), \"\u590d\u6742\" + member.chinese + \"", "first_line_groundtruth": "add(BlockRegistry.get(member.crossedFence()), member.chinese + \"\u5341\u5b57\u6805\u680f\");", "first_line_prediction": "add(BlockRegistry.get(member.crossedFence()), \"\u590d\u6742\" + member.chinese + \"", "match": 0}
{"groundtruth": "display.getMode().toString()));", "prediction": " display.getInputEntries().get(0).get(0).asString()));\n        widgets.add(Widgets.createTextWidget(text, new Point(bgBounds.x + 39, bgBounds.y + 18)));\n\n        widgets.add(Widgets.createSlot(new Point(bgBounds.x + 7, bgBounds.y + 29))\n                 .entries(display.getOutputEntries().get(0)).markOutput().disableBackground());\n\n        widgets.add(Widgets.createTexturedWidget(GUI_TEXTURE, new Rectangle(bgBounds.x + 7, bgBounds.y +", "first_line_groundtruth": "display.getMode().toString()));", "first_line_prediction": " display.getInputEntries().get(0).get(0).asString()));", "match": 0}
{"groundtruth": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u7f6e\u7269\u67b6\");", "prediction": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u67b6\");\n            }\n        }\n    }", "first_line_groundtruth": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u7f6e\u7269\u67b6\");", "first_line_prediction": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u67b6\");", "match": 0}
{"groundtruth": "member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");", "prediction": "member.fence()), member.chinese + \"", "first_line_groundtruth": "member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");", "first_line_prediction": "member.fence()), member.chinese + \"", "match": 0}
{"groundtruth": "inventory.getStack(0).getNbt();", "prediction": " itemStack.getNbt();\n        nbtCompound.putInt(\"processtime\", processtime);\n        nbtCompound.putInt(\"mode\", mode.ordinal());\n        return itemStack;\n    }\n\n    @Override\n    public boolean fits(int width, int height) {\n        return true;\n    }\n\n    @Override\n    public ItemStack getOutput() {\n        return this.result;\n    }\n\n    @Override\n    public Identifier getId() {\n        return this.id;\n    }\n\n    @Override\n    public RecipeSerializer<?> getSerializer() {\n        return RackRecipeSerializer.INSTANCE;\n    }\n\n    @Override\n    public RecipeType", "first_line_groundtruth": "inventory.getStack(0).getNbt();", "first_line_prediction": " itemStack.getNbt();", "match": 0}
{"groundtruth": "add(Widgets.withTooltip(arrow, Text.translatable(\"tip.flotage.rack.processtime\", display.getProcesstime() / 20), text));", "prediction": "add(Widgets.createTextWidget(text, new Point(bgBounds.x + 39, bgBounds.y + 35)));\n\n        widgets.add(Widgets.createSlot(new Point(bgBounds.x + 7, bgBounds.y + 35))\n                 .entries(display.getOutputEntries().get(0)).disableBackground());\n\n        return widgets;\n    }\n\n    private Rectangle centeredIntoRecipeBase(Point origin, int width, int height) {\n        return new Rectangle(origin.x - width / 2, origin.y - height / 2, width, height);\n   ", "first_line_groundtruth": "add(Widgets.withTooltip(arrow, Text.translatable(\"tip.flotage.rack.processtime\", display.getProcesstime() / 20), text));", "first_line_prediction": "add(Widgets.createTextWidget(text, new Point(bgBounds.x + 39, bgBounds.y + 35)));", "match": 0}
{"groundtruth": "add(BlockRegistry.get(member.crossedFence()));", "prediction": "add(BlockRegistry.get(member.axe()));\n            pickaxe.add(BlockRegistry.get(member.pickaxe()));\n        }\n    }", "first_line_groundtruth": "add(BlockRegistry.get(member.crossedFence()));", "first_line_prediction": "add(BlockRegistry.get(member.axe()));", "match": 0}
{"groundtruth": ".board.getPlayer() != this.viewPoint && (this.engineMove || !this.overTheBoard)){", "prediction": ".currentSelection != null){\n\t\t\t\t\t\tif (this.currentSelection.equals(not)){\n\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t\tthis.currentMoves = null;\n\t\t\t\t\t\t\tthis.board.setMove(null);\n\t\t\t\t\t\t\tthis.board.setMove(this.board.getMove());\n\t\t\t\t\t\t\tthis.board.setMove(null);\n\t\t\t\t\t\t\tthis.board.setMove(this.board.getMove());\n\t\t\t\t\t\t\tthis.board.setMove(null);\n\t\t\t\t\t\t\tthis.board.setMove(this.board.getMove());\n\t\t\t\t\t\t\tthis.board.setMove(null", "first_line_groundtruth": ".board.getPlayer() != this.viewPoint && (this.engineMove || !this.overTheBoard)){", "first_line_prediction": ".currentSelection != null){", "match": 0}
{"groundtruth": "this.client.getColor();", "prediction": "0;\n\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t\tthis.currentMoves = null;\n\t\t\t\t\t\t\tthis.draggingPiece = null;\n\t\t\t\t\t\t\tthis.dragX = 0;\n\t\t\t\t\t\t\tthis.dragY = 0;\n\t\t\t\t\t\t\tthis.promotionPiece = null;\n\t\t\t\t\t\t\tthis.engineMove = false;\n\t\t\t\t\t\t\tthis.overTheBoard = false;\n\t\t\t\t\t\t\tthis.gameFinished = false;\n\t\t\t\t\t\t\tthis.engine.setEngine(this.client);\n\t\t\t\t\t\t\tthis.engine.start();\n\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\t\t\tLogger.write", "first_line_groundtruth": "this.client.getColor();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "this.client.getMessage();", "prediction": " this.client.getMessage();\n\t\t\t\t\t\t\t\t\tif (message != null){\n\t\t\t\t\t\t\t\t\t\tif (message.startsWith(\"move\")){\n\t\t\t\t\t\t\t\t\t\t\tString[] split = message.split(\" \");\n\t\t\t\t\t\t\t\t\t\t\tif (split.length == 4){\n\t\t\t\t\t\t\t\t\t\t\t\tString not = split[2];\n\t\t\t\t\t\t\t\t\t\t\t\tint x = Integer.parseInt(split[3]);\n\t\t\t\t\t\t\t\t\t\t\t\tint y = Integer.parseInt(split[1]);\n\t\t\t\t\t\t\t\t\t\t\t\tif (this.board.getBoard()[x][y] != null){\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.board.getBoard()[x][y].setX(x);\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.board.getBoard()[x][", "first_line_groundtruth": "this.client.getMessage();", "first_line_prediction": " this.client.getMessage();", "match": 0}
{"groundtruth": "(this.board.getFEN()+\"\\n\\n\"+this.board.getPGN());", "prediction": "();\n\t\t\t\t\tdata.setEditable(false);\n\t\t\t\t\tdata.setWrapText(true);\n\t\t\t\t\tdata.setPromptText(\"Server data\");\n\t\t\t\t\tdata.setMaxWidth(400);\n\t\t\t\t\tdata.setMaxHeight(400);\n\t\t\t\t\tButton startClient = new Button(\"Start client\");\n\t\t\t\t\tstartClient.setOnAction(ev -> {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tString ip = cip.getText().equals(\"\") ? \"192.168.1.247\" : cip.getText();\n\t\t\t\t\t\t\tint port = cport.getText().equals(\"\") ? ", "first_line_groundtruth": "(this.board.getFEN()+\"\\n\\n\"+this.board.getPGN());", "first_line_prediction": "();", "match": 0}
{"groundtruth": "if (this.board.getBoard()[x][y].getColor() == this.viewPoint){", "prediction": " if (this.board.getBoard()[x][y] != null){\n\t\t\t\t\t\t\t\tthis.premoves.clear();\n\t\t\t\t\t\t\t\tthis.premoves.add(new Premove(not, not, null));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.currentSelection = not;\n\t\t\t\t\t\t\tthis.currentMoves = this.board.getMoves(this.currentSelection);\n\t\t\t\t\t\t\tthis.currentHold = null;\n\t\t\t\t\t\t\tthis.moveStart = null;\n\t\t\t\t\t\t\tthis.moveEnd = null;\n\t\t\t\t\t\t\tthis.draggingPiece = null;\n\t\t\t\t\t\t\tthis.dragX = e.getX();\n\t\t\t\t\t\t\tthis.drag", "first_line_groundtruth": "if (this.board.getBoard()[x][y].getColor() == this.viewPoint){", "first_line_prediction": " if (this.board.getBoard()[x][y] != null){", "match": 0}
{"groundtruth": "out.println(this.board.getFEN());", "prediction": "out.println(\"Double click\");\n\t\t\t\t\tif (this.currentSelection != null){\n\t\t\t\t\t\tString not = getNotation(e);\n\t\t\t\t\t\tint x = (int)(e.getX()/SQUARE_SIZE);\n\t\t\t\t\t\tint y = (int)((e.getY()-SPACE)/SQUARE_SIZE);\n\t\t\t\t\t\tif (this.viewPoint == Color.BLACK){\n\t\t\t\t\t\t\tx = 7-x;\n\t\t\t\t\t\t\ty = 7-y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (not != null){\n\t\t\t\t\t\t\tif (this.board.getBoard()[x][y] != null){\n\t\t\t\t\t\t\t\tif", "first_line_groundtruth": "out.println(this.board.getFEN());", "first_line_prediction": "out.println(\"Double click\");", "match": 0}
{"groundtruth": "(this.board.getBoard()[x][y] == null && !getPremoves().contains(not)){", "prediction": " (this.board.getPiece(x, y) != null){\n\t\t\t\t\t\t\t\tthis.currentSelection = not;\n\t\t\t\t\t\t\t\tthis.currentMoves = this.board.getMoves(this.currentSelection);\n\t\t\t\t\t\t\t\tthis.currentHold = null;\n\t\t\t\t\t\t\t\tthis.moveStart = null;\n\t\t\t\t\t\t\t\tthis.moveEnd = null;\n\t\t\t\t\t\t\t\tthis.draggingPiece = null;\n\t\t\t\t\t\t\t\tthis.dragX = 0;\n\t\t\t\t\t\t\t\tthis.dragY = 0;\n\t\t\t\t\t\t\t\tthis.promotionPiece = null;\n\t\t\t\t\t\t\t\tthis.overTheBoard = false;\n\t\t\t\t\t\t\t\tthis.engineMove = false;", "first_line_groundtruth": "(this.board.getBoard()[x][y] == null && !getPremoves().contains(not)){", "first_line_prediction": " (this.board.getPiece(x, y) != null){", "match": 0}
{"groundtruth": "this.board.getBoard()[x][y] != null){", "prediction": "this.currentMoves != null){\n\t\t\t\t\t\t\tshowMoves = makeUserMove(this.currentMoves.get(0), x, y, true, \"Q\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (showMoves){\n\t\t\t\t\t\t\tthis.currentMoves = getMoves(this.currentSelection);\n\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (e.getButton() == MouseButton.SECONDARY){\n\t\t\t\tif (this.currentSelection != null){\n\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t} else if (this.currentMoves != null){", "first_line_groundtruth": "this.board.getBoard()[x][y] != null){", "first_line_prediction": "this.currentMoves != null){", "match": 0}
{"groundtruth": "this.gameFinished = this.board.isGameFinished();", "prediction": "\n\t\t\t\t\t\t\t\t\t\t\tif (this.board.getBoard()[Integer.parseInt(message.split(\" \")[0])][Integer.parseInt(message.split(\" \")[1])] != null){\n\t\t\t\t\t\t\t\t\t\t\t\tthis.overTheBoard = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif (this.board.getGameTime() == 0){\n\t\t\t\t\t\t\t\t\t\t\t\tthis.gameFinished = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlistener.start();\n\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t", "first_line_groundtruth": "this.gameFinished = this.board.isGameFinished();", "first_line_prediction": "", "match": 0}
{"groundtruth": ")+\"\\n\\n\"+this.board.getPGN());", "prediction": "this.viewPoint));\n\t\t\t\t\tdata.setEditable(false);\n\t\t\t\t\tButton load = new Button(\"Load\");\n\t\t\t\t\tload.setOnAction(ev -> {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tString fen = data.getText();\n\t\t\t\t\t\t\tthis.board = new Board(fen, 180000, 0);\n\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t\tthis.currentMoves = null;\n\t\t\t\t\t\t\tthis.currentHold = null;\n\t\t\t\t\t\t\tthis.premoves.clear();\n\t\t\t\t\t\t\tthis.overTheBoard = true;\n\t\t\t\t\t\t\tthis.engineMove = false;\n\t\t\t\t\t\t\tthis", "first_line_groundtruth": ")+\"\\n\\n\"+this.board.getPGN());", "first_line_prediction": "this.viewPoint));", "match": 0}
{"groundtruth": "= Piece.getType(prom);", "prediction": " = piece.getType().getName() == Piece.PIECE_PAWN ? Piece.Pieces.QUEEN : Piece.Pieces.ROOK;\n\t\t\t\t\tpromote(piece.getColor(), promotion);\n\t\t\t\t\tcastle = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (castle){\n\t\t\t\tthis.whiteRightCastleAllowed = true;\n\t\t\t\tthis.whiteLeftCastleAllowed = true;\n\t\t\t\tthis.blackRightCastleAllowed = true;\n\t\t\t\tthis.blackLeftCastleAllowed = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (identical.size() > 0){\n\t\t\t\tfor (Piece p : identical){", "first_line_groundtruth": "= Piece.getType(prom);", "first_line_prediction": " = piece.getType().getName() == Piece.PIECE_PAWN ? Piece.Pieces.QUEEN : Piece.Pieces.ROOK;", "match": 0}
{"groundtruth": "= this.board.getValidMoves(this.board.getBoard()[x][y]);", "prediction": " = getMoves(this.currentSelection);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (e.getButton() == MouseButton.SECONDARY){\n\t\t\t\tif (this.board.getBoard()[(int)(e.getX()/SQUARE_SIZE)][(int)((e.getY()-SPACE)/SQUARE_SIZE)] != null){\n\t\t\t\t\tthis.draggingPiece = this.board.getBoard()[(int)(e.getX()/SQUARE_SIZE)][(int)((e.getY()-SPACE)/SQUARE_SIZE)];\n\t\t\t\t\tthis.dragX = e.getX();", "first_line_groundtruth": "= this.board.getValidMoves(this.board.getBoard()[x][y]);", "first_line_prediction": " = getMoves(this.currentSelection);", "match": 0}
{"groundtruth": "!this.client.isConnected()){", "prediction": "this.client.isConnected()){\n\t\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tButton quit = new Button(\"Quit\");\n\t\t\t\t\tquit.setOnAction(ev -> {\n\t\t\t\t\t\talert.close();\n\t\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t});\n\t\t\t\t\tlayout.add(sip, 0, 0);\n\t\t\t\t\tlayout.add(sport, 1, 0);\n\t\t\t\t\tlayout.add(cip, 0, 1);\n\t\t\t\t\tlayout.add(cport", "first_line_groundtruth": "!this.client.isConnected()){", "first_line_prediction": "this.client.isConnected()){", "match": 0}
{"groundtruth": "println(this.board.getPGN());", "prediction": "println(this.board.getBoard());\n\t\t\t\t\tSystem.out.println(this.board.getValidMoves(this.board.getBoard()[(int)(e.getX()/SQUARE_SIZE)][(int)((e.getY()-SPACE)/SQUARE_SIZE)]));\n\t\t\t\t\tSystem.out.println(this.board.getValidMoves(this.board.getBoard()[(int)(e.getX()/SQUARE_SIZE)][(int)((e.getY()-SPACE)/SQUARE_SIZE)]).size());\n\t\t\t\t\tSystem.out.println(this.board.getValidMoves(this", "first_line_groundtruth": "println(this.board.getPGN());", "first_line_prediction": "println(this.board.getBoard());", "match": 0}
{"groundtruth": "this.board.getGameTime(), this.board.getIncrementTime());", "prediction": "0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tButton quit = new Button(\"Quit\");\n\t\t\t\t\tquit.setOnAction(ev -> {\n\t\t\t\t\t\talert.close();\n\t\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t});\n\t\t\t\t\tlayout.add(sip, 0, 0);\n\t\t\t\t\tlayout.add(sport, 1, 0);\n\t\t\t\t\tlayout.add(cip, 0, 1);\n\t\t\t\t\tlayout.add(cport, 1,", "first_line_groundtruth": "this.board.getGameTime(), this.board.getIncrementTime());", "first_line_prediction": "0);", "match": 0}
{"groundtruth": "getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) != null){", "prediction": "prom != null){\n\t\t\t\tint[] p3 = convertNotation(prom);\n\t\t\t\tsetPiece(new Piece(piece.getType(), piece.getColor(), p3[0], p3[1]), p2[0], p2[1]);\n\t\t\t}\n\t\t\t\n\t\t\tif (capture != null){\n\t\t\t\tthis.board[capture.getX()][capture.getY()] = capture;\n\t\t\t\tcapture.setX(p2[0]);\n\t\t\t\tcapture.setY(p2[1]);\n\t\t\t}\n\t\t\t\n\t\t\tif (identical.size() > 0){\n\t\t\t\tfor (Piece p :", "first_line_groundtruth": "getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) != null){", "first_line_prediction": "prom != null){", "match": 0}
{"groundtruth": "return jdbcProcessors.path(driver, generatedHost, generatedDatabase);", "prediction": " return new OddrnPath(generatedHost, generatedUser, generatedDatabase, driver, url);\n    }\n\n    private HostUserPath parseHostUserPath(final String host) {\n        final String[] hostParts = host.split(\"@\");\n        final String[] hostParts2 = hostParts[0].split(\":\");\n        final String hostName = hostParts2[0];\n        final String hostPort;\n        if (hostParts2.length > 1) {\n            hostPort = hostParts2[1];\n        } else {\n            hostPort = null;\n        }\n\n        final String[] hostParts3 = hostParts", "first_line_groundtruth": "return jdbcProcessors.path(driver, generatedHost, generatedDatabase);", "first_line_prediction": " return new OddrnPath(generatedHost, generatedUser, generatedDatabase, driver, url);", "match": 0}
{"groundtruth": "if (booking.isApproved()) {", "prediction": "\n\n        bookingRepository.delete(booking);\n    }\n\n    public Booking save(Booking booking) {\n        booking.setCreatedAt(LocalDateTime.now());\n        booking.setApprovedAt(LocalDateTime.now());\n        booking.setApprovedBy(booking.getProfessor().getId());\n        booking.setApproved(true);\n        booking.setApprovedBy(booking.getProfessor().getId());\n        booking.setApproved(true);\n        booking.setApprovedBy(booking.getProfessor().getId());\n        booking.setApproved(true);\n        booking.setApprovedBy(booking.getProfessor().getId());\n        booking.", "first_line_groundtruth": "if (booking.isApproved()) {", "first_line_prediction": "", "match": 0}
{"groundtruth": "bookingRepository.deleteByTimeFinalBefore(LocalDateTime.now());", "prediction": " List<Booking> pending = findPending();\n         pending.forEach(b -> {\n             if (b.getTimeInit().isBefore(LocalDateTime.now())) {\n                 bookingRepository.approveBooking(b.getId());\n             }\n         });\n    }", "first_line_groundtruth": "bookingRepository.deleteByTimeFinalBefore(LocalDateTime.now());", "first_line_prediction": " List<Booking> pending = findPending();", "match": 0}
{"groundtruth": "booking.setTimeRequest(LocalDateTime.now());", "prediction": "\n\n        booking.setTimeInit(initialTime);\n        booking.setTimeFinal(finalTime);\n\n        bookingRepository.save(booking);\n    }", "first_line_groundtruth": "booking.setTimeRequest(LocalDateTime.now());", "first_line_prediction": "", "match": 0}
{"groundtruth": "b.getId());", "prediction": "b);\n        });\n    }\n\n    public void rejectBooking(Optional<Booking> booking) {\n        booking.ifPresent(b -> {\n            logService.insertedRejected(booking.get());\n            bookingRepository.rejectBooking(b);\n        });\n    }\n\n    @Async\n    public void createBooking(Booking booking) {\n        bookingRepository.save(booking);\n    }\n\n    @Scheduled(fixedRate = 10000)\n    public void updatePendingBookings() {\n        List<Booking> pendingBookings = findPending();\n        pendingBookings.forEach(b -> {\n            if (b.getTimeInit().", "first_line_groundtruth": "b.getId());", "first_line_prediction": "b);", "match": 0}
{"groundtruth": "protectionRune = CustomItems.createProtectionRune();", "prediction": " protectionRune = CustomItems.createProtectionRune();\n                    protectionRune.setAmount(1);\n                    player.getInventory().addItem(protectionRune);\n                }, 20L);\n            } else {\n                player.sendMessage(\"\u00a7cYou do not have enough levels to buy a Protection Rune.\");\n            }\n        }\n    }", "first_line_groundtruth": "protectionRune = CustomItems.createProtectionRune();", "first_line_prediction": " protectionRune = CustomItems.createProtectionRune();", "match": 0}
{"groundtruth": "ItemStack protectionRune = CustomItems.createProtectionRune();", "prediction": " ItemStack protectionRune = new ItemStack(CustomItems.PROTECTION_RUNE);\n         ItemMeta protectionRuneMeta = protectionRune.getItemMeta();\n         if (protectionRuneMeta != null) {\n            protectionRuneMeta.setDisplayName(\"\u00a76Protection Rune\");\n            protectionRune.setItemMeta(protectionRuneMeta);\n         }\n         shop.setItem(PROTECTION_RUNE_SLOT, protectionRune);", "first_line_groundtruth": "ItemStack protectionRune = CustomItems.createProtectionRune();", "first_line_prediction": " ItemStack protectionRune = new ItemStack(CustomItems.PROTECTION_RUNE);", "match": 0}
{"groundtruth": "bookingService.save(login, subject, lab, date, timeInit, timeFinal);", "prediction": "\n\n        bookingService.saveBooking(login, lab, subject, date, timeInit, timeFinal);\n        attributes.addFlashAttribute(\"success\", \"Booking saved successfully\");\n        return \"redirect:/\";\n    }", "first_line_groundtruth": "bookingService.save(login, subject, lab, date, timeInit, timeFinal);", "first_line_prediction": "", "match": 0}
{"groundtruth": "(professorService.getProfessorByLogin(login));", "prediction": "(professorService.findByLogin(login));\n        booking.setSubject(subjectService.findBySubject(subject));\n        booking.setLab(labService.findByLab(lab));\n        booking.setTimeInit(initialTime);\n        booking.setTimeFinal(finalTime);\n        bookingRepository.save(booking);\n    }", "first_line_groundtruth": "(professorService.getProfessorByLogin(login));", "first_line_prediction": "(professorService.findByLogin(login));", "match": 0}
{"groundtruth": "int count = bookingRepository.isBusy(b.getLab().getId(), b.getTimeInit(), b.getTimeFinal());", "prediction": " if (b.isApproved()) {\n                 return b.getProfessor().isBusy();\n             } else {\n                 return b.getSubject().isBusy();\n             }\n         }).orElse(false);\n    }\n\n    public boolean isBusy(Long id) {\n        return isBusy(bookingRepository.findById(id));\n    }\n\n    public boolean isBusy(Booking booking) {\n        if (booking.isApproved()) {\n            return booking.getProfessor().isBusy();\n        } else {\n            return booking.getSubject().isBusy();\n        }\n    }\n\n    public void approve(Long id) {\n        Booking booking", "first_line_groundtruth": "int count = bookingRepository.isBusy(b.getLab().getId(), b.getTimeInit(), b.getTimeFinal());", "first_line_prediction": " if (b.isApproved()) {", "match": 0}
{"groundtruth": ".BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());", "prediction": ".BOLD + \"Enhancement\");\n        } else {\n            return Component.text(Utils.getEnhancementInfo(enhancementLevel).getEnhanceColor() + \"\" + ChatColor.BOLD + \"Enhancement \" + enhancementLevel);\n        }\n    }\n\n    public static Component getEnhancementDescription(int enhancementLevel) {\n        return Component.text(Utils.getEnhancementInfo(enhancementLevel).getDescription());\n    }\n\n    public static Component getEnhancementInfo(int enhancementLevel) {\n        return Component.text(Utils.getEnhancementInfo(enhancementLevel).getInfo());\n    }\n\n    public static Enhancement", "first_line_groundtruth": ".BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());", "first_line_prediction": ".BOLD + \"Enhancement\");", "match": 0}
{"groundtruth": "booking.setTimeInit(initialTime);", "prediction": "\n\n        if (isBusy(booking)) {\n            booking.setTimeInit(initialTime);\n            booking.setTimeFinal(finalTime);\n            booking.setStatus(\"PENDING\");\n            bookingRepository.save(booking);\n        } else {\n            booking.setTimeInit(initialTime);\n            booking.setTimeFinal(finalTime);\n            booking.setStatus(\"APPROVED\");\n            bookingRepository.save(booking);\n        }\n    }", "first_line_groundtruth": "booking.setTimeInit(initialTime);", "first_line_prediction": "", "match": 0}
{"groundtruth": "), b.getTimeInit(), b.getTimeFinal());", "prediction": "b.getProfessor().getId()));\n            return count > 0;\n        }).orElse(false);\n    }\n\n    public Booking save(Booking booking) {\n        booking.setApproved(false);\n        booking.setApprovedAt(LocalDateTime.now());\n        booking.setApprovedBy(professorService.getLoggedProfessor());\n        booking.setSubject(subjectService.findById(booking.getSubject().getId()));\n        booking.setLab(labService.findById(booking.getLab().getId()));\n        bookingRepository.save(booking);\n        logService.createdPending(booking);\n        return booking;\n    }\n\n   ", "first_line_groundtruth": "), b.getTimeInit(), b.getTimeFinal());", "first_line_prediction": "b.getProfessor().getId()));", "match": 0}
{"groundtruth": ", b.getTimeInit(), b.getTimeFinal());", "prediction": " + \"\", b.getProfessor().getId() + \"\", b.getSubject().getId() + \"\");\n            return count > 0;\n        }).orElse(false);\n    }\n\n    public Booking save(Booking booking) {\n        booking.setApproved(false);\n        booking.setCreatedAt(LocalDateTime.now());\n        booking.setUpdatedAt(LocalDateTime.now());\n        bookingRepository.save(booking);\n        return booking;\n    }\n\n    public Booking update(Booking booking) {\n        booking.setUpdatedAt(LocalDateTime.now());\n        bookingRepository.save(booking);\n        return booking;\n    }\n\n    @Async\n    public void", "first_line_groundtruth": ", b.getTimeInit(), b.getTimeFinal());", "first_line_prediction": " + \"\", b.getProfessor().getId() + \"\", b.getSubject().getId() + \"\");", "match": 0}
{"groundtruth": "(Environment.getProgram(), taintFunction);", "prediction": "(taintFunction);\n        if (decompileResults == null) {\n            System.out.println(\"Error: decompile function failed\");\n            return;\n        }\n\n        taintExpression = decompileResults.getDecompiledCode();\n        if (taintExpression == null) {\n            System.out.println(\"Error: decompile function failed\");\n            return;\n        }\n\n        // identify input locations\n        PCodeBlock[] blocks = PCodeUtil.getBlocks(taintFunction);\n        for (PCodeBlock block: blocks) {\n            if (block.isCall()) {\n                PCodeBlock[] callBlocks =", "first_line_groundtruth": "(Environment.getProgram(), taintFunction);", "first_line_prediction": "(taintFunction);", "match": 0}
{"groundtruth": "analyzer.startAnalyzing();", "prediction": "\n            \n            analyzer.analyze();\n            //analyzer.saveResult();\n        }\n\n        // endTime = System.currentTimeMillis();\n        // System.out.println(\"Total time: \" + (endTime - startTime) + \" ms\");\n    }\n\n    private static boolean loadConfig(String configFile) {\n        try {\n            JSONObject config = new JSONObject(new String(FileUtil.readFile(configFile)));\n            Configs.ANALYZE_CONNECT = config.getBoolean(\"analyzeConnect\");\n            Configs.ANALYZE_META = config.getBoolean(\"analyzeMeta\");\n            Configs.OUTPUT_DIR = config.getString(\"outputDir\");\n           ", "first_line_groundtruth": "analyzer.startAnalyzing();", "first_line_prediction": "", "match": 0}
{"groundtruth": "setSubject(subjectService.getSubject(subject));", "prediction": "setSubject(subjectService.getSubjectByName(subject));\n        booking.setLab(labService.getLabByName(lab));\n        booking.setTimeInit(initialTime);\n        booking.setTimeFinal(finalTime);\n        bookingRepository.save(booking);\n    }", "first_line_groundtruth": "setSubject(subjectService.getSubject(subject));", "first_line_prediction": "setSubject(subjectService.getSubjectByName(subject));", "match": 0}
{"groundtruth": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), connAdd);", "prediction": "qlConnect = highFunction.getFunction(Constants.QL_CONNECT);\n        if (qlConnect == null) {\n            invalid = true;\n            return;\n        }\n\n        // get the connect type\n        connectType = qlConnect.getEntryPoint().getHighFunction().getEntryPoint().getCallType();\n\n        // get the signal and slot functions\n        signalFunction = qlConnect.getParameter(0).getName();\n        slotFunction = qlConnect.getParameter(1).getName();\n\n        // get the signal and slot classes\n        signalClassType = qlConnect.getParameter(0).getDataType().getName();\n        slotClassType = ", "first_line_groundtruth": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), connAdd);", "first_line_prediction": "qlConnect = highFunction.getFunction(Constants.QL_CONNECT);", "match": 0}
{"groundtruth": ".decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));", "prediction": ".decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalExp));\n            if (decompileResults == null)\n                return;\n            highFunction = decompileResults.getHighFunction();\n            Iterator<PcodeOpAST> pcodeOpASTIterator2 = highFunction.getPcodeOps(signalExp);\n            PcodeOpAST pcodeAST2 = null;\n            while (pcodeOpASTIterator2.hasNext()) {\n                PcodeOpAST tmp = pcodeOpASTIterator2.next();\n                if (tmp.getMnemonic().equals(\"CALL\")) {\n                    pcodeAST2", "first_line_groundtruth": ".decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));", "first_line_prediction": ".decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalExp));", "match": 0}
{"groundtruth": "decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));", "prediction": "decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalExp));\n            if (decompileResults == null)\n                return;\n            highFunction = decompileResults.getHighFunction();\n            Iterator<PcodeOpAST> pcodeOpASTIterator2 = highFunction.getPcodeOps(signalExp);\n            PcodeOpAST pcodeAST2 = null;\n            while (pcodeOpASTIterator2.hasNext()) {\n                PcodeOpAST tmp = pcodeOpASTIterator2.next();\n                if (tmp.getMnemonic().equals(\"CALL\")) {\n                    pcodeAST2 =", "first_line_groundtruth": "decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));", "first_line_prediction": "decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalExp));", "match": 0}
{"groundtruth": "= FileUtil.readFromFile(configPath);", "prediction": " = FileUtil.readFile(configPath);\n            JSONObject json = new JSONObject(config);\n            Configs.ANALYZE_CONNECT = json.getBoolean(\"analyzeConnect\");\n            Configs.ANALYZE_META = json.getBoolean(\"analyzeMeta\");\n            Configs.OUTPUT_DIR = json.getString(\"outputDir\");\n            Configs.BINARY_FILE_LIST = json.getString(\"binaryFileList\");\n            return true;\n        } catch (Exception e) {\n            System.out.println(\"Unable to load config from \" + configPath);\n            return false;\n        }\n    }\n\n    public static void initLanguage()", "first_line_groundtruth": "= FileUtil.readFromFile(configPath);", "first_line_prediction": " = FileUtil.readFile(configPath);", "match": 0}
{"groundtruth": "jo.getProperty(name).cast(JSFunction.class);", "prediction": " context.createJSFunction(object, simpleMethod);\n      JSValue result = function.call(context, parameters);\n      return resultAdapter.fromJSValue(context, result);\n    });\n  }\n\n  @Override\n  public boolean isInstance(Object value) {\n    return rawType.isInstance(value);\n  }\n\n  @Override\n  public boolean isAssignable(Type type) {\n    return rawType.isAssignableFrom(JavaTypes.getRawType(type));\n  }\n\n  @Override\n  public boolean isAssignable(Type type, TypeAdapter<?> adapter) {\n    return rawType.isAssignableFrom(JavaTypes.getRawType(type", "first_line_groundtruth": "jo.getProperty(name).cast(JSFunction.class);", "first_line_prediction": " context.createJSFunction(object, simpleMethod);", "match": 0}
{"groundtruth": "DecompileResults decompileResults = Decompiler.decompileFuncRegister(Environment.getProgram(), currentFunc);", "prediction": "\n\n        // locate block at the target function\n        CodeBlock[] currentBlocks = BlockUtil.locateBlockWithAddress(program, currentFunc.getEntryPoint());\n        if (currentBlocks == null || currentBlocks.length == 0) {\n            System.out.println(\"Error: block not found for address: \" + currentFunc.getEntryPoint());\n            return;\n        }\n\n        CodeBlock currentBlock = currentBlocks[0];\n        List<CodeBlockReference> refList = currentBlock.getReferencesFrom();\n        for (CodeBlockReference ref: refList) {\n            if (ref.getReferenceType() == CodeBlockReference", "first_line_groundtruth": "DecompileResults decompileResults = Decompiler.decompileFuncRegister(Environment.getProgram(), currentFunc);", "first_line_prediction": "", "match": 0}
{"groundtruth": "getFunctionWith(Environment.getProgram(), inputs[0].getAddress());", "prediction": "getFunctionWith(Environment.getProgram(), op.getSeqnum().getTarget());\n                    String funcName = func.getName();\n                    jsonArray.put(funcName);\n                }\n                else if (mnem.equals(\"STORE\")) {\n                    String expOfSrc = PCodeUtil.evaluateVarNode(inputs[2]);\n                    if (expOfSrc!= null && expOfSrc.contains(taintExpression)) {\n                        String expToAdd = PCodeUtil.evaluateVarNode(inputs[1]);\n                        jsonArray.put(expToAdd);\n                    }\n                }\n                else if (mnem.equals(\"LOAD\"))", "first_line_groundtruth": "getFunctionWith(Environment.getProgram(), inputs[0].getAddress());", "first_line_prediction": "getFunctionWith(Environment.getProgram(), op.getSeqnum().getTarget());", "match": 0}
{"groundtruth": "jo.getJavaObject();", "prediction": " Proxy.newProxyInstance(rawType.getClassLoader(), new Class<?>[]{rawType}, (proxy, method, args) -> {\n      String name = method.getName();\n      JavaMethod methodInfo = methods.get(name);\n      if (methodInfo == null) return null;\n\n      Object[] newArgs = new Object[args.length];\n      for (int i = 0; i < newArgs.length; i++) {\n        newArgs[i] = JavaTypes.resolve(methodInfo.parameterTypes[i], methodInfo.returnType, args[i]);\n      }\n\n      return methodInfo.invoke(", "first_line_groundtruth": "jo.getJavaObject();", "first_line_prediction": " Proxy.newProxyInstance(rawType.getClassLoader(), new Class<?>[]{rawType}, (proxy, method, args) -> {", "match": 0}
{"groundtruth": "enhancementLevel).getEnhanceColor() + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());", "prediction": "enhancementLevel).getEnhanceColor() + \"\" + ChatColor.BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName() + \" \" + ChatColor.GRAY + \"Level \" + enhancementLevel);\n        }\n    }\n\n    public static EnhancementInfo getEnhancementInfo(int enhancementLevel) {\n        return EnhancementInfo.getEnhancementInfo(enhancementLevel);\n    }\n\n    public static ItemStack getEnhancementItem(int enhancementLevel) {\n        ItemStack item = new ItemStack(Material.DIAMOND_SWORD);\n        ItemMeta meta = item.getItemMeta();", "first_line_groundtruth": "enhancementLevel).getEnhanceColor() + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());", "first_line_prediction": "enhancementLevel).getEnhanceColor() + \"\" + ChatColor.BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName() + \" \" + ChatColor.GRAY + \"Level \" + enhancementLevel);", "match": 0}
{"groundtruth": "CustomItems.createBlackStoneWeapon();", "prediction": " CustomItems.getWeapon(amount);\n            } else if (itemType.equals(\"armor\")) {\n                itemToGive =  CustomItems.getArmor(amount);\n            } else if (itemType.equals(\"helmet\")) {\n                itemToGive =  CustomItems.getHelmet(amount);\n            } else if (itemType.equals(\"chestplate\")) {\n                itemToGive =  CustomItems.getChestplate(amount);\n            } else if (itemType.equals(\"leggings\")) {\n                itemToGive =  CustomItems.getLeggings(amount);\n            } else if", "first_line_groundtruth": "CustomItems.createBlackStoneWeapon();", "first_line_prediction": " CustomItems.getWeapon(amount);", "match": 0}
{"groundtruth": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();", "prediction": " protectionStone = CustomItems.createProtectionStone();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), protectionStone);\n        }\n    }\n\n    private boolean isHostileMob(LivingEntity entity) {\n        return entity instanceof Monster || entity instanceof Slime || entity instanceof Stray || entity instanceof Wither || entity instanceof Enderman || entity instanceof Creeper || entity instanceof EnderDragon || entity instanceof Endermite || entity instanceof Giant || entity instanceof Husk || entity instanceof IronGolem || entity instanceof PigZombie || entity instanceof Silverfish || entity instanceof Skeleton ||", "first_line_groundtruth": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();", "first_line_prediction": " protectionStone = CustomItems.createProtectionStone();", "match": 0}
{"groundtruth": "CustomItems.createConcentratedMagicalBlackStoneWeapon();", "prediction": " CustomItems.createBlackStoneCWeapon();\n            } else if (itemType.equals(\"carmor\")) {\n                itemToGive =  CustomItems.createBlackStoneCArmor();\n            } else if (itemType.equals(\"helmet\")) {\n                itemToGive =  CustomItems.createBlackStoneHelmet();\n            } else if (itemType.equals(\"chestplate\")) {\n                itemToGive =  CustomItems.createBlackStoneChestplate();\n            } else if (itemType.equals(\"leggings\")) {\n                itemToGive =  CustomItems.createBlackStoneLeggings();\n           ", "first_line_groundtruth": "CustomItems.createConcentratedMagicalBlackStoneWeapon();", "first_line_prediction": " CustomItems.createBlackStoneCWeapon();", "match": 0}
{"groundtruth": "itemToGive = CustomItems.createProtectionRune();", "prediction": " itemToGive = CustomItems.createPotionOfBlackStone();\n            } else if (itemType.equals(\"pstone2\")) {\n                 itemToGive = CustomItems.createPotionOfBlackStone2();\n            } else if (itemType.equals(\"pstone3\")) {\n                 itemToGive = CustomItems.createPotionOfBlackStone3();\n            } else if (itemType.equals(\"pstone4\")) {\n                 itemToGive = CustomItems.createPotionOfBlackStone4();\n            } else if (itemType.equals(\"pstone5\")) {\n                 itemToGive = Custom", "first_line_groundtruth": "itemToGive = CustomItems.createProtectionRune();", "first_line_prediction": " itemToGive = CustomItems.createPotionOfBlackStone();", "match": 0}
{"groundtruth": "? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();", "prediction": " ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), blackStone);\n        }\n        if (isHostileMob(entity) && shouldDropProtectionStone()) {\n            ItemStack protectionStone = CustomItems.createProtectionStone();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), protectionStone);\n        }\n    }\n\n    private boolean isHostileMob(LivingEntity entity) {\n        return entity instanceof Monster || entity instanceof Slime || entity instanceof Stray", "first_line_groundtruth": "? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();", "first_line_prediction": " ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();", "match": 0}
{"groundtruth": "25, enhanceGUI.createEnhanceButton());", "prediction": "25, EnhanceGUI.createEnhanceButton());\n        }, 20L);\n    }\n\n    private void enhanceItem(Player player, Inventory inventory, int itemSlot, int blackStoneSlot) {\n        ItemStack itemToEnhance = inventory.getItem(itemSlot);\n        ItemStack blackStone = inventory.getItem(blackStoneSlot);\n\n        if (itemToEnhance == null || itemToEnhance.getType() == Material.AIR || blackStone == null || blackStone.getType() == Material.AIR) {\n            return;\n        }\n\n        ItemMeta blackStoneMeta = blackStone.getItemMeta();\n        if", "first_line_groundtruth": "25, enhanceGUI.createEnhanceButton());", "first_line_prediction": "25, EnhanceGUI.createEnhanceButton());", "match": 0}
{"groundtruth": ".nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();", "prediction": ".nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), protectionStone);\n        }\n    }\n\n    private boolean isHostileMob(LivingEntity entity) {\n        return entity instanceof Monster || entity instanceof Slime || entity instanceof Stray || entity instanceof Wither || entity instanceof Enderman || entity instanceof Creeper || entity instanceof EnderDragon || entity instanceof Endermite || entity instanceof Giant || entity instanceof Husk || entity instanceof IronGolem || entity instanceof PigZ", "first_line_groundtruth": ".nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();", "first_line_prediction": ".nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();", "match": 0}
{"groundtruth": "nextBoolean() ? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();", "prediction": "nextBoolean() ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), blackStone);\n        }\n        if (isHostileMob(entity) && shouldDropProtectionStone()) {\n            ItemStack protectionStone = CustomItems.createProtectionStone();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), protectionStone);\n        }\n    }\n\n    private boolean isHostileMob(LivingEntity entity) {\n        return entity instanceof Monster || entity instanceof Slime || entity", "first_line_groundtruth": "nextBoolean() ? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();", "first_line_prediction": "nextBoolean() ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();", "match": 0}
{"groundtruth": "add(inputBox1.getVBox());", "prediction": "add(inputBox1);\n\n        //Crear la segunda instancia de InputBox con el valor de ComboBox \"EUR\"\n        counter++;\n        InputBox inputBox2 = new InputBox();\n        inputBox2.setId(counter);\n        inputBox2.getComboBox().setValue(\"EUR\");\n        inputBox2.getTextField().setText(\"1\");\n        inputBoxes.add(inputBox2);\n        subContainer.getChildren().add(inputBox2);\n\n        //Crear la tercera instancia de InputBox con el valor de ComboBox \"GBP\"\n        counter++;\n        InputBox inputBox3 =", "first_line_groundtruth": "add(inputBox1.getVBox());", "first_line_prediction": "add(inputBox1);", "match": 0}
{"groundtruth": "inputBox1.setInitialConversion(false);", "prediction": " inputBox2.setInitialConversion(true);\n        inputBox2.startConversion();\n\n    }\n\n    public static void setSubContainer(VBox subContainer) {\n        MainController.subContainer = subContainer;\n    }\n\n    public static void setInputBoxes(List<InputBox> inputBoxes) {\n        MainController.inputBoxes = inputBoxes;\n    }", "first_line_groundtruth": "inputBox1.setInitialConversion(false);", "first_line_prediction": " inputBox2.setInitialConversion(true);", "match": 0}
{"groundtruth": "inputBox1.startConversion();", "prediction": "\n\n    }\n\n    public static void setSubContainer(VBox subContainer) {\n        MainController.subContainer = subContainer;\n    }\n\n    public static void setInputBoxes(List<InputBox> inputBoxes) {\n        MainController.inputBoxes = inputBoxes;\n    }\n\n    public static List<InputBox> getInputBoxes() {\n        return inputBoxes;\n    }", "first_line_groundtruth": "inputBox1.startConversion();", "first_line_prediction": "", "match": 0}
{"groundtruth": "inputBox1.setInitialConversion(true);", "prediction": " conversor();\n    }\n\n    public static void conversor(){\n        //Realizar la conversi\u00f3n inicial\n        double valor1 = Double.parseDouble(inputBoxes.get(0).getTextField().getText());\n        double valor2 = Double.parseDouble(inputBoxes.get(1).getTextField().getText());\n        double resultado = valor1 * valor2;\n        inputBoxes.get(0).getTextField().setText(String.valueOf(resultado));\n    }\n\n    public static void addInputBox(InputBox inputBox){\n        inputBoxes.add(inputBox);\n        subContainer.getChildren().add(inputBox.getV", "first_line_groundtruth": "inputBox1.setInitialConversion(true);", "first_line_prediction": " conversor();", "match": 0}
{"groundtruth": "professorService.deleteById(id);", "prediction": " professorService.delete(id);\n    }\n\n    @GetMapping(\"/get/{id}\")\n    public Professor get(@PathVariable Long id){\n        return professorService.get(id);\n    }\n\n    @GetMapping(\"/getAll\")\n    public List<Professor> getAll(){\n        return professorService.getAll();\n    }", "first_line_groundtruth": "professorService.deleteById(id);", "first_line_prediction": " professorService.delete(id);", "match": 0}
{"groundtruth": "List<Booking> bookings = bookingRepository.findByProfessor(id);", "prediction": " List<Booking> bookings = bookingRepository.findByProfessor(id);\n         List<BookingDTO> bookingDTOs = new ArrayList<>();\n         for (Booking booking : bookings) {\n             bookingDTOs.add(new BookingDTO(booking));\n         }\n         return bookingDTOs;\n    }\n\n    public List<BookingDTO> findByLab(Long id) {\n         List<Booking> bookings = bookingRepository.findByLab(id);\n         List<BookingDTO> bookingDTOs = new ArrayList<>();\n         for (Booking booking : bookings) {\n             bookingDTOs.add(new BookingDTO(", "first_line_groundtruth": "List<Booking> bookings = bookingRepository.findByProfessor(id);", "first_line_prediction": " List<Booking> bookings = bookingRepository.findByProfessor(id);", "match": 0}
{"groundtruth": "bookingRepository.approve(id);", "prediction": "\n\n        if (b.isApproved()) {\n            return ResponseEntity.status(HttpStatus.CONFLICT).body(\"This booking is already approved.\");\n        }\n\n        b.setApproved(true);\n        bookingRepository.update(b);\n        logService.Approved(bookingRepository.findById(b.getId()).get());\n        return ResponseEntity.ok(\"Booking approved.\");\n    }\n\n    public ResponseEntity<String> reject(Long id) {\n        Optional<Booking> booking = bookingRepository.findById(id);\n        Booking b = booking.get();\n\n        if (b.isApproved()) {\n            return ResponseEntity.status(HttpStatus.CONF", "first_line_groundtruth": "bookingRepository.approve(id);", "first_line_prediction": "", "match": 0}
{"groundtruth": "InputBox.setBaseIndex(1);", "prediction": "\n\n    }\n\n    public static void setSubContainer(VBox subContainer) {\n        MainController.subContainer = subContainer;\n    }\n\n    public static void setInputBoxes(List<InputBox> inputBoxes) {\n        MainController.inputBoxes = inputBoxes;\n    }\n\n    public static void setMainContainer(VBox mainContainer) {\n        MainController.mainContainer = mainContainer;\n    }", "first_line_groundtruth": "InputBox.setBaseIndex(1);", "first_line_prediction": "", "match": 0}
{"groundtruth": "newComponent.getVBox().setId(String.valueOf(counter));", "prediction": " newComponent.getComboBox().setValue(\"PEN\");\n        inputBoxes.add(newComponent);\n        subContainer.getChildren().add(newComponent.getVBox());\n        newComponent.getTextField().setText(\"1\");\n        newComponent.setInitialConversion(true);\n        newComponent.startConversion();\n        newComponent.setInitialConversion(false);\n        InputBox.setBaseIndex(counter);\n    }\n\n    @FXML\n    protected void addButton2() {\n        InputBox newComponent = new InputBox();\n        counter++;\n        newComponent.setId(counter);\n        newComponent.getComboBox().setValue(\"USD\");\n        inputBoxes", "first_line_groundtruth": "newComponent.getVBox().setId(String.valueOf(counter));", "first_line_prediction": " newComponent.getComboBox().setValue(\"PEN\");", "match": 0}
{"groundtruth": "String exchangeRate = conversion.getExchangeRate();", "prediction": "\n\n        if (result != null) {\n            Platform.runLater(() -> {\n                inputBox.getTextField().setText(result);\n                inputBox.getTextField().setStyle(\"-fx-text-fill: green;\");\n                inputBox.getTextField().setPromptText(\"Resultado\");\n                inputBox.getTextField().setEditable(false);\n                inputBox.getTextField().setFocusTraversable(false);\n                inputBox.getTextField().setFocusColor(Color.TRANSPARENT);\n                inputBox.getTextField().setFocusTraversable(false);\n                inputBox.getTextField().setFocusColor(Color.TRANSP", "first_line_groundtruth": "String exchangeRate = conversion.getExchangeRate();", "first_line_prediction": "", "match": 0}
{"groundtruth": "Errors.noConexion();", "prediction": " return \"no hay internet\";\n        } catch (Exception e) {\n            System.out.println(\"error\");\n            return \"error\";\n        }\n    }\n\n    public String getExchangeRate() {\n        return exchangeRate;\n    }", "first_line_groundtruth": "Errors.noConexion();", "first_line_prediction": " return \"no hay internet\";", "match": 0}
{"groundtruth": "inputBox.getComboBox().getValue());", "prediction": "1);\n        Platform.runLater(() -> {\n            inputBox.setResult(result);\n            inputBox.setResultColor(Color.GREEN);\n            inputBox.setResultDate(LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\")));\n            inputBox.setFound(true);\n        });\n    }", "first_line_groundtruth": "inputBox.getComboBox().getValue());", "first_line_prediction": "1);", "match": 0}
{"groundtruth": "String resultOffline = conversion.convertOffline(exchangeRateOffline, baseTextField);", "prediction": " Platform.runLater(() -> {\n                             inputBox.setTextField(\"offline\");\n                             inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" | Fecha: \" + date);\n                         });\n                    }\n                });\n            });\n        }\n    }", "first_line_groundtruth": "String resultOffline = conversion.convertOffline(exchangeRateOffline, baseTextField);", "first_line_prediction": " Platform.runLater(() -> {", "match": 0}
{"groundtruth": "inputBox.setTextField(resultOffline);", "prediction": " Platform.runLater(() -> {\n                             inputBox.setTextField(resultOffline);\n                             inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" | Fecha: \" + date);\n                         });\n                    }\n                });\n            });\n        }\n    }", "first_line_groundtruth": "inputBox.setTextField(resultOffline);", "first_line_prediction": " Platform.runLater(() -> {", "match": 0}
{"groundtruth": "startsWith(baseComboBox) && key.toString().endsWith(inputBox.getComboBox().getValue())) {", "prediction": "contains(baseComboBox + \"->\" + inputBox.getComboBox().getValue())) {\n                        inputBox.setTextField(\"offline\");\n                        inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + value);\n                    }\n                });\n            });\n        }\n    }", "first_line_groundtruth": "startsWith(baseComboBox) && key.toString().endsWith(inputBox.getComboBox().getValue())) {", "first_line_prediction": "contains(baseComboBox + \"->\" + inputBox.getComboBox().getValue())) {", "match": 0}
{"groundtruth": "inputBox.getComboBox().getValue() + \" : \" + exchangeRate);", "prediction": " inputBox.getComboBox().getValue() + \" = \" + exchangeRate);\n                    inputBox.setComboBox(baseComboBox);\n                    inputBox.setComboBox2(inputBox.getComboBox().getValue());\n                    inputBox.setComboBox3(baseComboBox);\n                    inputBox.setComboBox4(inputBox.getComboBox().getValue());\n                    inputBox.setComboBox5(baseComboBox);\n                    inputBox.setComboBox6(inputBox.getComboBox().getValue());\n                    inputBox.setComboBox7(baseComboBox);\n                    inputBox.setComboBox8(inputBox.getComboBox().getValue());\n                    inputBox.set", "first_line_groundtruth": "inputBox.getComboBox().getValue() + \" : \" + exchangeRate);", "first_line_prediction": " inputBox.getComboBox().getValue() + \" = \" + exchangeRate);", "match": 0}
{"groundtruth": "inputBox.getLabel2().setTextFill(Color.RED);", "prediction": " inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" | Fecha: \" + date);\n                    }\n                });\n            });\n        }\n    }", "first_line_groundtruth": "inputBox.getLabel2().setTextFill(Color.RED);", "first_line_prediction": " inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" | Fecha: \" + date);", "match": 0}
{"groundtruth": "inputBox.setTextField(result);", "prediction": " inputBox.getComboBox().getItems().add(inputBox.getComboBox().getValue());\n                     inputBox.getComboBox().setValue(inputBox.getComboBox().getValue());\n                     inputBox.getComboBox().getSelectionModel().select(inputBox.getComboBox().getItems().size() - 1);\n                     inputBox.getComboBox().getSelectionModel().select(inputBox.getComboBox().getItems().size() - 1);\n                     inputBox.getComboBox().getSelectionModel().select(inputBox.getComboBox().getItems().size() - 1);\n                     inputBox.getComboBox().getSelectionModel().select(inputBox.", "first_line_groundtruth": "inputBox.setTextField(result);", "first_line_prediction": " inputBox.getComboBox().getItems().add(inputBox.getComboBox().getValue());", "match": 0}
{"groundtruth": "inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" ) \u26a0\");", "prediction": "\n                    }\n                });\n            });\n        }\n    }", "first_line_groundtruth": "inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" ) \u26a0\");", "first_line_prediction": "", "match": 0}
{"groundtruth": "inputBox.setLabel2(\" | No hay datos guardados \u26a0\");", "prediction": " inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : Offline\");\n                    }\n            });\n        }\n    }", "first_line_groundtruth": "inputBox.setLabel2(\" | No hay datos guardados \u26a0\");", "first_line_prediction": " inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : Offline\");", "match": 0}
{"groundtruth": "Node node : MainController.getVBox().getChildren()) {", "prediction": "InputBox inputBox : inputBoxes) {\n            if (inputBox.getId() == Integer.parseInt(activeInput)) {\n                inputBox.textField.setText(\"\");\n                inputBox.comboBox.setValue(\"USD\");\n                inputBox.textField.requestFocus();\n                break;\n            }\n        }\n    }\n\n    public void startConversion() {\n        if (textField.getText().equals(\"\")) {\n            return;\n        }\n        if (initialConversion) {\n            return;\n        }\n        initialConversion = true;\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        executorService.execute(() -> {\n            try {\n                String active", "first_line_groundtruth": "Node node : MainController.getVBox().getChildren()) {", "first_line_prediction": "InputBox inputBox : inputBoxes) {", "match": 0}
{"groundtruth": "= Utils.addCurrencies();", "prediction": " = Utils.getCurrencies();\n        for (String currency : currencies) {\n            comboBox.getItems().add(currency);\n        }\n\n        comboBox.setPromptText(\"Select a currency\");\n\n        comboBox.setEditable(true);\n        comboBox.setEditable(false);\n\n        comboBox.setPromptText(\"Select a currency\");\n\n        comboBox.setEditable(true);\n        comboBox.setEditable(false);\n\n        comboBox.setPromptText(\"Select a currency\");\n\n        comboBox.setEditable(true);\n        comboBox.setEditable(false);\n\n        comboBox.setPromptText(\"Select a", "first_line_groundtruth": "= Utils.addCurrencies();", "first_line_prediction": " = Utils.getCurrencies();", "match": 0}
{"groundtruth": "modified |= mySettingsComponent.isAutoPopup() != settings.autoPopup;", "prediction": " return modified;\n    }\n\n    @Override\n    public void apply() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        settings.OPENAI_API_KEY = mySettingsComponent.get_OPENAI_API_KEY();\n    }\n\n    @Override\n    public void reset() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        mySettingsComponent.set_OPENAI_API_KEY(settings.OPENAI_API_KEY);\n    }\n\n    @Override\n    public void disposeUIResources() {\n        mySettingsComponent = null;\n    }", "first_line_groundtruth": "modified |= mySettingsComponent.isAutoPopup() != settings.autoPopup;", "first_line_prediction": " return modified;", "match": 0}
{"groundtruth": "|= mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;", "prediction": " |= mySettingsComponent.isAutoReplaceCodeWithComments() != settings.autoReplaceCodeWithComments;\n        modified |= mySettingsComponent.isAutoReplaceCodeWithComments() != settings.autoReplaceCodeWithComments;\n        modified |= mySettingsComponent.isAutoReplaceCodeWithComments() != settings.autoReplaceCodeWithComments;\n        modified |= mySettingsComponent.isAutoReplaceCodeWithComments() != settings.autoReplaceCodeWithComments;\n        modified |= mySettingsComponent.isAutoReplaceCodeWithComments() != settings.autoReplaceCodeWithComments;\n        modified |= mySettingsComponent.isAutoReplaceCodeWithComments() !=", "first_line_groundtruth": "|= mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;", "first_line_prediction": " |= mySettingsComponent.isAutoReplaceCodeWithComments() != settings.autoReplaceCodeWithComments;", "match": 0}
{"groundtruth": "Utils.obtenerCodigoPais(item);", "prediction": " item.substring(0, 3);\n                    String currency = item.substring(3);\n                    String symbol = Utils.addSymbol(countryCode);\n                    setGraphic(imageView);\n                    imageView.setImage(new Image(Utils.getFlag(countryCode)));\n                    imageView.setFitHeight(20);\n                    imageView.setFitWidth(20);\n                    setText(symbol + currency);\n                }\n            }\n        });\n\n        comboBox.setItems(currencies);\n\n        inputBoxes.add(this);\n\n        if (inputIdInit) {\n            inputId++;\n        } else {\n            inputIdInit = true;\n       ", "first_line_groundtruth": "Utils.obtenerCodigoPais(item);", "first_line_prediction": " item.substring(0, 3);", "match": 0}
{"groundtruth": "modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;", "prediction": " return modified;\n    }\n\n    @Override\n    public void apply() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        settings.OPENAI_API_KEY = mySettingsComponent.get_OPENAI_API_KEY();\n        settings.autoPopup = mySettingsComponent.isAutoPopup();\n    }\n\n    @Override\n    public void reset() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        mySettingsComponent.set_OPENAI_API_KEY(settings.OPENAI_API_KEY);\n        mySettingsComponent.setAutoPopup(settings.autoPopup);\n    }\n\n    @Override\n   ", "first_line_groundtruth": "modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;", "first_line_prediction": " return modified;", "match": 0}
{"groundtruth": "modified = !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);", "prediction": " modified = false;\n        if (settings.getApiKey() != mySettingsComponent.getApiKey()) {\n            modified = true;\n        }\n        if (settings.getApiSecret() != mySettingsComponent.getApiSecret()) {\n            modified = true;\n        }\n        if (settings.getApiEndpoint() != mySettingsComponent.getApiEndpoint()) {\n            modified = true;\n        }\n        if (settings.getApiPath() != mySettingsComponent.getApiPath()) {\n            modified = true;\n        }\n        if (settings.getApiTimeout() != mySettingsComponent.getApiTimeout()) {\n            modified =", "first_line_groundtruth": "modified = !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);", "first_line_prediction": " modified = false;", "match": 0}
{"groundtruth": "!mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);", "prediction": " mySettingsComponent.isAutoSaveToExistingFile() != settings.autoSaveToExistingFile;\n        modified |= mySettingsComponent.isAutoSaveToExistingFileAs() != settings.autoSaveToExistingFileAs;\n        modified |= mySettingsComponent.isAutoSaveToExistingFileAs_extension() != settings.autoSaveToExistingFileAs_extension;\n        modified |= mySettingsComponent.isAutoSaveToExistingFileAs_extension_value() != settings.autoSaveToExistingFileAs_extension_value;\n        modified |= mySettingsComponent.isAutoSaveToExistingFileAs_extension_value_value()", "first_line_groundtruth": "!mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);", "first_line_prediction": " mySettingsComponent.isAutoSaveToExistingFile() != settings.autoSaveToExistingFile;", "match": 0}
{"groundtruth": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;", "prediction": " mySettingsComponent.isAutoAddTags() != settings.autoAddTags;\n        modified |=  mySettingsComponent.isAutoAddImages() != settings.autoAddImages;\n        modified |=  mySettingsComponent.isAutoAddLinks() != settings.autoAddLinks;\n        modified |=  mySettingsComponent.isAutoAddQuotes() != settings.autoAddQuotes;\n        modified |=  mySettingsComponent.isAutoAddSpoilers() != settings.autoAddSpoilers;\n        modified |=  mySettingsComponent.isAutoAddLists() != settings.autoAddLists;\n        modified |=  mySettingsComponent.isAuto", "first_line_groundtruth": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;", "first_line_prediction": " mySettingsComponent.isAutoAddTags() != settings.autoAddTags;", "match": 0}
{"groundtruth": ".setText(Utils.addSymbol(baseComboBox) + \"0\");", "prediction": ".setText(\"Base\");\n\n        // Agregar el Label al HBox\n        hBoxLabels.getChildren().add(label1);\n        hBoxLabels.getChildren().add(label2);\n\n        // Agregar el VBox al HBox\n        hBox.getChildren().add(vBox);\n\n        // Agregar el HBox al VBox\n        vBox.getChildren().add(hBox);\n\n        // Agregar el VBox al HBox\n        hBox.getChildren().add(vBox);\n\n        // Agregar el VBox al HBox\n        hBox.getChildren().add(vBox);\n\n       ", "first_line_groundtruth": ".setText(Utils.addSymbol(baseComboBox) + \"0\");", "first_line_prediction": ".setText(\"Base\");", "match": 0}
{"groundtruth": "label1.setText(Utils.addSymbol(baseComboBox) + formattedNumber);", "prediction": " textField.setText(formattedNumber);\n        }\n    }\n\n    public void startConversion() {\n        if (textField.getText().equals(\"\") || comboBox.getValue().equals(\"\")) {\n            return;\n        }\n        if (initialConversion) {\n            return;\n        }\n        initialConversion = true;\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        executorService.execute(() -> {\n            try {\n                String text = textField.getText();\n                String currency = comboBox.getValue();\n                String symbol = Utils.addSymbol(currency);\n                String url = \"https://free.currconv.com/api/", "first_line_groundtruth": "label1.setText(Utils.addSymbol(baseComboBox) + formattedNumber);", "first_line_prediction": " textField.setText(formattedNumber);", "match": 0}
{"groundtruth": "ok(this.orderService.getCustomerOrders(id));", "prediction": "ok(this.orderService.getOutsideOrders(id));\n    }\n\n    @GetMapping(\"/summary\")\n    public ResponseEntity<List<OrderSummary>> getSummary() {\n        return ResponseEntity.ok(this.orderService.getSummary());\n    }\n\n    @PostMapping\n    public ResponseEntity<OrderEntity> create(@RequestBody RandomOrderDto randomOrderDto) {\n        return ResponseEntity.ok(this.orderService.create(randomOrderDto));\n    }", "first_line_groundtruth": "ok(this.orderService.getCustomerOrders(id));", "first_line_prediction": "ok(this.orderService.getOutsideOrders(id));", "match": 0}
{"groundtruth": "ok(this.pizzaService.getCheapest(price));", "prediction": "ok(this.pizzaService.getCheapestPizzas(price));\n    }\n\n    @GetMapping(\"/expensive/{price}\")\n    public ResponseEntity<List<PizzaEntity>> getExpensivePizzas(@PathVariable double price) {\n        return ResponseEntity.ok(this.pizzaService.getExpensivePizzas(price));\n    }\n\n    @PostMapping\n    public ResponseEntity<PizzaEntity> create(@RequestBody PizzaEntity pizza) {\n        return ResponseEntity.ok(this.pizzaService.create(pizza));\n    }\n\n    @PutMapping(\"/{idPizza}\")\n    public ResponseEntity<P", "first_line_groundtruth": "ok(this.pizzaService.getCheapest(price));", "first_line_prediction": "ok(this.pizzaService.getCheapestPizzas(price));", "match": 0}
{"groundtruth": "orderRepository.findAllByMethodIn(methods);", "prediction": "orderRepository.findAllByDeliveryMethodIn(methods);\n    }\n\n    public List<OrderEntity> getOnSiteOrders() {\n        List<String> methods = Arrays.asList(ON_SITE);\n        return this.orderRepository.findAllByDeliveryMethodIn(methods);\n    }\n\n    public List<OrderSummary> getSummary() {\n        return this.orderRepository.getSummary();\n    }\n\n    public OrderEntity create(RandomOrderDto randomOrderDto) {\n        OrderEntity order = new OrderEntity();\n        order.setDeliveryMethod(randomOrderDto.getDeliveryMethod());\n        order.setAddress(randomOrderDto", "first_line_groundtruth": "orderRepository.findAllByMethodIn(methods);", "first_line_prediction": "orderRepository.findAllByDeliveryMethodIn(methods);", "match": 0}
{"groundtruth": "orderRepository.findCustomerOrders(idCustomer);", "prediction": "orderRepository.findAllByCustomer_Id(idCustomer);\n    }\n\n    public List<OrderSummary> getSummary() {\n        return this.orderRepository.getSummary();\n    }\n\n    public OrderEntity create(RandomOrderDto randomOrderDto) {\n        OrderEntity order = new OrderEntity();\n        order.setCustomer(randomOrderDto.getCustomer());\n        order.setAddress(randomOrderDto.getAddress());\n        order.setMethod(randomOrderDto.getMethod());\n        order.setDate(randomOrderDto.getDate());\n        order.setTotal(randomOrderDto.getTotal());\n        order.setCreatedAt(LocalDateTime.", "first_line_groundtruth": "orderRepository.findCustomerOrders(idCustomer);", "first_line_prediction": "orderRepository.findAllByCustomer_Id(idCustomer);", "match": 0}
{"groundtruth": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);", "prediction": " this.pizzaRepository.findByIngredientsContainingIgnoreCase(ingredient);\n    }\n\n    public PizzaEntity getById(Long id) {\n        return this.pizzaRepository.findById(id).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));\n    }\n\n    @Transactional\n    public PizzaEntity save(PizzaEntity pizzaEntity) {\n        return this.pizzaRepository.save(pizzaEntity);\n    }\n\n    @Transactional\n    public PizzaEntity update(PizzaEntity pizzaEntity) {\n        return this.pizzaRepository.save(pizzaEntity);\n    }\n\n    @Transactional\n    public void delete(", "first_line_groundtruth": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);", "first_line_prediction": " this.pizzaRepository.findByIngredientsContainingIgnoreCase(ingredient);", "match": 0}
{"groundtruth": "orderRepository.findSummary(orderId);", "prediction": "orderRepository.getSummary(orderId);\n    }\n\n    public OrderEntity create(RandomOrderDto randomOrderDto) {\n        OrderEntity order = new OrderEntity();\n        order.setMethod(randomOrderDto.getMethod());\n        order.setDate(randomOrderDto.getDate());\n        order.setCustomer(randomOrderDto.getCustomer());\n        order.setAddress(randomOrderDto.getAddress());\n        order.setPhone(randomOrderDto.getPhone());\n        order.setTotal(randomOrderDto.getTotal());\n        order.setMethod(randomOrderDto.getMethod());\n        order.setCreatedAt(LocalDateTime.now());", "first_line_groundtruth": "orderRepository.findSummary(orderId);", "first_line_prediction": "orderRepository.getSummary(orderId);", "match": 0}
{"groundtruth": "return this.pizzaRepository.findFirstByAvailableTrueAndNameIgnoreCase(name).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));", "prediction": " return this.pizzaRepository.findByName(name);\n    }\n\n    public PizzaEntity getById(Long id) {\n        return this.pizzaRepository.findById(id).orElse(null);\n    }\n\n    public PizzaEntity save(PizzaEntity pizzaEntity) {\n        return this.pizzaRepository.save(pizzaEntity);\n    }\n\n    public PizzaEntity update(Long id, UpdatePizzaPriceDto updatePizzaPriceDto) {\n        PizzaEntity pizzaEntity = this.pizzaRepository.findById(id).orElse(null);\n\n        if (pizzaEntity == null) {\n           ", "first_line_groundtruth": "return this.pizzaRepository.findFirstByAvailableTrueAndNameIgnoreCase(name).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));", "first_line_prediction": " return this.pizzaRepository.findByName(name);", "match": 0}
{"groundtruth": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();", "prediction": " return mergePluginManagement;\n    }\n\n    public void setMergePluginManagement(boolean mergePluginManagement) {\n        this.mergePluginManagement = mergePluginManagement;\n    }\n\n    public boolean isMergePlugins() {\n        return mergePlugins;\n    }\n\n    public void setMergePlugins(boolean mergePlugins) {\n        this.mergePlugins = mergePlugins;\n    }\n\n    public boolean isMergeReporting() {\n        return mergeReporting;\n    }\n\n    public void setMergeReporting(boolean mergeReporting) {\n        this.mergeReporting = mergeReporting;\n    }\n\n    public boolean isMergeProperties() {\n        return mergeProperties;\n    }\n\n    public void", "first_line_groundtruth": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();", "first_line_prediction": " return mergePluginManagement;", "match": 0}
{"groundtruth": ".pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);", "prediction": ".pizzaRepository.findAllByAvailableTrueAndPriceLessThanEqual(price);\n    }\n\n    public List<PizzaEntity> getMostVegan() {\n        return this.pizzaRepository.findAllByAvailableTrueAndVeganTrue();\n    }\n\n    public List<PizzaEntity> getMostGlutenFree() {\n        return this.pizzaRepository.findAllByAvailableTrueAndGlutenFreeTrue();\n    }\n\n    public List<PizzaEntity> getMostSugarFree() {\n        return this.pizzaRepository.findAllByAvailableTrueAndSugarFreeTrue();\n    }\n\n    public List<P", "first_line_groundtruth": ".pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);", "first_line_prediction": ".pizzaRepository.findAllByAvailableTrueAndPriceLessThanEqual(price);", "match": 0}
{"groundtruth": "null ? mergePlugins : mixins.isMergePlugins();", "prediction": " null ? mergePlugins : mixins.isMergePlugins();\n    }\n\n    public void setMergePlugins(Boolean mergePlugins) {\n        this.mergePlugins = mergePlugins;\n    }\n\n    public boolean isMergeReporting() {\n        return mergeReporting != null ? mergeReporting : mixins.isMergeReporting();\n    }\n\n    public void setMergeReporting(Boolean mergeReporting) {\n        this.mergeReporting = mergeReporting;\n    }\n\n    public boolean isMergeProperties() {\n        return mergeProperties != null ? mergeProperties : mixins.isMergeProperties();\n    }\n\n    public void setMergeProperties(Boolean mergeProperties) {\n        this.mergeProperties", "first_line_groundtruth": "null ? mergePlugins : mixins.isMergePlugins();", "first_line_prediction": " null ? mergePlugins : mixins.isMergePlugins();", "match": 0}
{"groundtruth": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();", "prediction": " null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();\n    }\n\n    public void setMergeDistributionManagement(Boolean mergeDistributionManagement) {\n        this.mergeDistributionManagement = mergeDistributionManagement;\n    }\n\n    public boolean isMergeScm() {\n        return mergeScm != null ? mergeScm : mixins.isMergeScm();\n    }\n\n    public void setMergeScm(Boolean mergeScm) {\n        this.mergeScm = mergeScm;\n    }\n\n    public boolean isMergeRepositories() {\n        return mergeRepositories != null ? mergeRepositories : mixins.isMergeRepositories();\n    }\n\n    public void", "first_line_groundtruth": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();", "first_line_prediction": " null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();", "match": 0}
{"groundtruth": "!= null ? activateProfiles : mixins.isActivateProfiles();", "prediction": " != null ? activateProfiles : mixins.isActivateProfiles();\n    }\n\n    public void setActivateProfiles(Boolean activateProfiles) {\n        this.activateProfiles = activateProfiles;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getKey() {\n        return key;\n    }\n\n    public void setKey(String key) {\n        this.key = key;\n    }\n\n    public void execute(MavenSession session, MavenProject project) throws MavenExecutionException {\n        if (groupId == null) {\n            groupId = project", "first_line_groundtruth": "!= null ? activateProfiles : mixins.isActivateProfiles();", "first_line_prediction": " != null ? activateProfiles : mixins.isActivateProfiles();", "match": 0}
{"groundtruth": "mixins.getDefaultMixinType();", "prediction": " mixins.getType();\n        }\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getKey() {\n        return key;\n    }\n\n    public void setKey(String key) {\n        this.key = key;\n    }\n\n    public void execute(MavenSession session, MavenProject project) throws MavenExecutionException {\n        if (project.getPackaging().equals(\"pom\")) {\n            return;\n        }\n        Model model = project.getModel();\n        if (model == null) {\n            return;\n        }\n        if (groupId == null) {\n           ", "first_line_groundtruth": "mixins.getDefaultMixinType();", "first_line_prediction": " mixins.getType();", "match": 0}
{"groundtruth": "recurse != null ? recurse : mixins.isRecurse();", "prediction": " recurse != null ? recurse : mixins.isRecurse();\n    }\n\n    public void setRecurse(Boolean recurse) {\n        this.recurse = recurse;\n    }\n\n    public boolean isMergeRepositories() {\n        return mergeRepositories != null ? mergeRepositories : mixins.isMergeRepositories();\n    }\n\n    public void setMergeRepositories(Boolean mergeRepositories) {\n        this.mergeRepositories = mergeRepositories;\n    }\n\n    public boolean isMergePluginRepositories() {\n        return mergePluginRepositories != null ? mergePluginRepositories : mixins.isMergePluginRepositories();\n    }\n\n    public void setMergePluginRepositories(Boolean mergePluginRepositories) {", "first_line_groundtruth": "recurse != null ? recurse : mixins.isRecurse();", "first_line_prediction": " recurse != null ? recurse : mixins.isRecurse();", "match": 0}
{"groundtruth": "!= null ? mergeRepositories : mixins.isMergeRepositories();", "prediction": " != null ? mergeRepositories : mixins.isMergeRepositories();\n    }\n\n    public void setMergeRepositories(Boolean mergeRepositories) {\n        this.mergeRepositories = mergeRepositories;\n    }\n\n    public boolean isMergePluginRepositories() {\n        return mergePluginRepositories != null ? mergePluginRepositories : mixins.isMergePluginRepositories();\n    }\n\n    public void setMergePluginRepositories(Boolean mergePluginRepositories) {\n        this.mergePluginRepositories = mergePluginRepositories;\n    }\n\n    public boolean isRecurse() {\n        return recurse != null ? recurse : mixins.isRecurse();\n    }\n\n    public void setRecurse(Boolean recurse)", "first_line_groundtruth": "!= null ? mergeRepositories : mixins.isMergeRepositories();", "first_line_prediction": " != null ? mergeRepositories : mixins.isMergeRepositories();", "match": 0}
{"groundtruth": "ok(eventService.getUserEvents(userId));", "prediction": "badRequest().build();\n        }\n        List<Event> events = eventService.getUserEventsByRole(userId, role);\n        return ResponseEntity.ok(events);\n    }\n\n    @GetMapping(\"/user/{userId}/branch/{branch}\")\n    @PreAuthorize(Constants.HAS_ROLE_MEMBER_AND_ABOVE)\n    public ResponseEntity<List<Event>> getUserEventsByRoleAndBranch(@PathVariable Integer userId, @PathVariable String branch, @RequestParam(\"role\") @Nullable String role) {\n        if (role == null){\n            return ResponseEntity.badRequest().build();\n        }\n        List<Event> events = event", "first_line_groundtruth": "ok(eventService.getUserEvents(userId));", "first_line_prediction": "badRequest().build();", "match": 0}
{"groundtruth": "attendanceRepository.findByUserIdAndRole(userId, role).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );", "prediction": " user.get().getRoles().forEach(\n                role1 -> {\n                    if (role1.getRole().equals(role)) {\n                        attendanceRepository.findByUserId(userId).forEach(\n                                attendance -> events.add(attendance.getEvent())\n                        );\n                    }\n                }\n        );\n        return events;\n    }\n\n    public Event createEvent(Event event) {\n        return eventRepository.save(event);\n    }\n\n    public Event updateEvent(Integer eventId, Event event) {\n        Optional<Event> event1 = eventRepository.findById(eventId);\n        if (event1.isEmpty()) {\n            throw new", "first_line_groundtruth": "attendanceRepository.findByUserIdAndRole(userId, role).forEach(", "first_line_prediction": " user.get().getRoles().forEach(", "match": 0}
{"groundtruth": "eventService.getSingleEvent(eventId);", "prediction": " eventService.getSingleEvent(eventId);\n        return ResponseEntity.ok(event);\n    }\n\n    @PostMapping\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<Event> createEvent(@RequestBody Event event){\n        Event createdEvent = eventService.createEvent(event);\n        return ResponseEntity.status(HttpStatus.CREATED).body(createdEvent);\n    }\n\n    @PutMapping(\"/{eventId}\")\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<Event> updateEvent(@PathVariable Integer eventId, @RequestBody Event event){\n        Event updatedEvent = eventService.updateEvent", "first_line_groundtruth": "eventService.getSingleEvent(eventId);", "first_line_prediction": " eventService.getSingleEvent(eventId);", "match": 0}
{"groundtruth": "String username = jwtService.extractUsername(jwtToken);", "prediction": " UserDetails userDetails = userService.loadUserByUsername(jwtService.getUsernameFromToken(jwtToken));\n        if(userDetails == null) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(\n                userDetails, null, userDetails.getAuthorities()\n        );\n        authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        filterChain.doFilter(request, response);\n    }", "first_line_groundtruth": "String username = jwtService.extractUsername(jwtToken);", "first_line_prediction": " UserDetails userDetails = userService.loadUserByUsername(jwtService.getUsernameFromToken(jwtToken));", "match": 0}
{"groundtruth": "attendanceRepository.findByUserId(userId).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );", "prediction": " Optional<User> user = userRepository.findById(userId);\n         if (user.isEmpty()) {\n             throw new AcmException(\"User doesn't not exist with id :\" + userId, HttpStatus.NOT_FOUND);\n         }\n         user.get().getEvents().forEach(events::add);\n         return events;\n    }\n\n    public Event createEvent(Event event) {\n        if (eventRepository.existsByBranchAndName(event.getBranch(), event.getName())) {\n            throw new AcmException(\"Event already exists with branch :\" + event.getBranch() + \" and name :\" + event.getName(),", "first_line_groundtruth": "attendanceRepository.findByUserId(userId).forEach(", "first_line_prediction": " Optional<User> user = userRepository.findById(userId);", "match": 0}
{"groundtruth": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);", "prediction": " return this.pizzaRepository.findByIngredientsContainingIgnoreCase(ingredient);\n    }\n\n    public PizzaEntity getById(Long id) {\n        return this.pizzaRepository.findById(id).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));\n    }\n\n    @Transactional\n    public PizzaEntity save(PizzaEntity pizzaEntity) {\n        return this.pizzaRepository.save(pizzaEntity);\n    }\n\n    @Transactional\n    public PizzaEntity update(Long id, UpdatePizzaPriceDto updatePizzaPriceDto) {\n        PizzaEntity pizzaEntity = this.pizzaRepository.findById(", "first_line_groundtruth": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);", "first_line_prediction": " return this.pizzaRepository.findByIngredientsContainingIgnoreCase(ingredient);", "match": 0}
{"groundtruth": ".orderRepository.findCustomerOrders(idCustomer);", "prediction": ".orderRepository.findAllByCustomer_Id(idCustomer);\n    }\n\n    public List<OrderSummary> getSummary() {\n        return this.orderRepository.getSummary();\n    }\n\n    public OrderEntity create(RandomOrderDto randomOrderDto) {\n        OrderEntity order = new OrderEntity();\n        order.setCustomer(randomOrderDto.getCustomer());\n        order.setAddress(randomOrderDto.getAddress());\n        order.setMethod(randomOrderDto.getMethod());\n        order.setDate(randomOrderDto.getDate());\n        order.setTotal(randomOrderDto.getTotal());\n        order.setCreatedAt(LocalDateTime", "first_line_groundtruth": ".orderRepository.findCustomerOrders(idCustomer);", "first_line_prediction": ".orderRepository.findAllByCustomer_Id(idCustomer);", "match": 0}
{"groundtruth": "this.pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);", "prediction": " this.pizzaRepository.findAllByAvailableTrueAndPriceLessThanEqual(price);\n    }\n\n    public List<PizzaEntity> getMostVegan() {\n        return this.pizzaRepository.findAllByAvailableTrueAndVeganTrue();\n    }\n\n    public List<PizzaEntity> getMostVegan(int page, int elements) {\n        Pageable pageRequest = PageRequest.of(page, elements);\n        return this.pizzaRepository.findAllByAvailableTrueAndVeganTrue(pageRequest);\n    }\n\n    public List<PizzaEntity> getMostVegan(int", "first_line_groundtruth": "this.pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);", "first_line_prediction": " this.pizzaRepository.findAllByAvailableTrueAndPriceLessThanEqual(price);", "match": 0}
{"groundtruth": "this.orderService.getCustomerOrders(id));", "prediction": "this.orderService.getOutsideOrders(id));\n    }\n\n    @GetMapping(\"/summary\")\n    public ResponseEntity<List<OrderSummary>> getSummary() {\n        return ResponseEntity.ok(this.orderService.getSummary());\n    }\n\n    @PostMapping\n    public ResponseEntity<OrderEntity> create(@RequestBody RandomOrderDto randomOrderDto) {\n        return ResponseEntity.ok(this.orderService.create(randomOrderDto));\n    }", "first_line_groundtruth": "this.orderService.getCustomerOrders(id));", "first_line_prediction": "this.orderService.getOutsideOrders(id));", "match": 0}
{"groundtruth": "!= null && !encryptor.isEncrypted(propValue)) {", "prediction": " != null && encryptor.isEncrypted(propValue)) {\n\t\t\t\tpropValue = encryptor.decrypt(propValue).toString();\n\t\t\t}", "first_line_groundtruth": "!= null && !encryptor.isEncrypted(propValue)) {", "first_line_prediction": " != null && encryptor.isEncrypted(propValue)) {", "match": 0}
{"groundtruth": "return customerRepository.findCustomerByName(name);", "prediction": " return customerRepository.findByName(name);\n    }", "first_line_groundtruth": "return customerRepository.findCustomerByName(name);", "first_line_prediction": " return customerRepository.findByName(name);", "match": 0}
{"groundtruth": "encryptor.decrypt(encryptedValue).toString();", "prediction": " encryptor.decrypt(encryptedValue);\n    }\n\n    private static boolean isTransformationAnnotated(Field field) {\n        return field.isAnnotationPresent(Transformation.class);\n    }\n\n    private static boolean isTypeAnnotated(Field field) {\n        return field.isAnnotationPresent(Encrypted.class);\n    }\n\n    private static boolean isCollectionParameter(Parameter parameter) {\n        return parameter.name().equals(\"collection\");\n    }\n\n    private static Transformation getTransformationField(Field field) {\n        return field.getAnnotation(Transformation.class);\n    }\n\n    private static Transformation getTransformationField(Field field, Transformation transformationAnnotation) {\n        Transformation", "first_line_groundtruth": "encryptor.decrypt(encryptedValue).toString();", "first_line_prediction": " encryptor.decrypt(encryptedValue);", "match": 0}
{"groundtruth": "= encryptor.decrypt(value).toString();", "prediction": " = encryptor.decrypt(value);\n\t\t\t}", "first_line_groundtruth": "= encryptor.decrypt(value).toString();", "first_line_prediction": " = encryptor.decrypt(value);", "match": 0}
{"groundtruth": "if (encryptor.isEncrypted(value)) {", "prediction": "", "first_line_groundtruth": "if (encryptor.isEncrypted(value)) {", "first_line_prediction": "", "match": 0}
{"groundtruth": "loader.mergeMixins();", "prediction": " loader.load();\n        }\n    }", "first_line_groundtruth": "loader.mergeMixins();", "first_line_prediction": " loader.load();", "match": 0}
{"groundtruth": "mDiracSound.getMusic() == 1;", "prediction": " mDiracSound.isEnabled();\n    }\n\n    public void setScenario(int scenario) {\n        mDiracSound.setScenario(scenario);\n    }\n\n    public void setMusic(int music) {\n        mDiracSound.setMusic(music);\n    }\n\n    public void setVolume(int volume) {\n        mDiracSound.setVolume(volume);\n    }\n\n    public void setMute(boolean mute) {\n        mDiracSound.setMute(mute);\n    }\n\n    public void setAudioStream(int stream) {\n        mDiracSound.setAudioStream(stream);\n    }\n\n    public", "first_line_groundtruth": "mDiracSound.getMusic() == 1;", "first_line_prediction": " mDiracSound.isEnabled();", "match": 0}
{"groundtruth": "String name = wrapper.getName();", "prediction": " classTable.put(wrapper.getName(), wrapper);\n        }\n    }\n\n    public T getEntity(String name) {\n        return classTable.get(name);\n    }\n\n    public List<String> getChildren(String name) {\n        return pointerTable.getOrDefault(name, new ArrayList<>());\n    }", "first_line_groundtruth": "String name = wrapper.getName();", "first_line_prediction": " classTable.put(wrapper.getName(), wrapper);", "match": 0}
{"groundtruth": "return getFriendlyString().compareTo(o.getFriendlyString());", "prediction": " return version.compareTo(o.getFriendlyString());\n    }\n\n    @Override\n    public int hashCode() {\n        return version.hashCode();\n    }", "first_line_groundtruth": "return getFriendlyString().compareTo(o.getFriendlyString());", "first_line_prediction": " return version.compareTo(o.getFriendlyString());", "match": 0}
{"groundtruth": "mod.getMetadata().getId() + \"->\" + value;", "prediction": " \"OldEntry{\" +\n                    \"mod=\" + mod +\n                    \", value='\" + value + '\\'' +\n                    '}';\n        }\n\n        @Override\n        public ModContainer getModContainer() {\n            return mod;\n        }\n\n        @Override\n        public <T> T getOrCreate(Class<T> type) throws Exception {\n            if (object == null) {\n                object = mod.getModClassLoader().loadClass(value).newInstance();\n            }\n\n            return type.cast(object);\n        }\n\n        @Override\n        public boolean isOptional() {\n            return false;\n        }\n    }\n\n    private static class NewEntry implements Entry {\n       ", "first_line_groundtruth": "mod.getMetadata().getId() + \"->\" + value;", "first_line_prediction": " \"OldEntry{\" +", "match": 0}
{"groundtruth": "return VersionParser.parseSemantic(s);", "prediction": " return VersionParser.parse(s);\n    }", "first_line_groundtruth": "return VersionParser.parseSemantic(s);", "first_line_prediction": " return VersionParser.parse(s);", "match": 0}
{"groundtruth": "return o.hasWildcard() ? 0 : -1;", "prediction": " return -1;\n             } else {\n                 return 1;\n             }\n        }\n\n        Optional<String> buildA = getBuildKey();\n        Optional<String> buildB = o.getBuildKey();\n\n        if (buildA.isPresent() || buildB.isPresent()) {\n            if (buildA.isPresent() && buildB.isPresent()) {\n                StringTokenizer buildATokenizer = new StringTokenizer(buildA.get(), \".\");\n                StringTokenizer buildBTokenizer = new StringTokenizer(buildB.get(), \".\");\n\n                while (buildATokenizer.hasMoreElements()) {\n                    if (buildBTokenizer.hasMore", "first_line_groundtruth": "return o.hasWildcard() ? 0 : -1;", "first_line_prediction": " return -1;", "match": 0}
{"groundtruth": "return VersionParser.parse(string, false);", "prediction": " return VersionParser.parse(string);\n    }\n\n    /**\n     * Parses a version from a string notation.\n     *\n     * @param string the string notation of the version\n     * @return the parsed version\n     * @throws VersionParsingException if a problem arises during version parsing\n     */\n    static Version parse(String string, boolean allowPreRelease) throws VersionParsingException {\n        return VersionParser.parse(string, allowPreRelease);\n    }\n\n    /**\n     * Parses a version from a string notation.\n     *\n     * @param string the string notation of the version\n     * @return the parsed version\n     * @throws", "first_line_groundtruth": "return VersionParser.parse(string, false);", "first_line_prediction": " return VersionParser.parse(string);", "match": 0}
{"groundtruth": "().getMetadata().getId(), ex);", "prediction": "(), ex);\n            }\n        }\n\n        return instance;\n    }\n\n    @Override\n    public String getProvider() {\n        return entry.getProvider();\n    }\n\n    @Override\n    public ModContainer getMod() {\n        return entry.getMod();\n    }\n\n    @Override\n    public String toString() {\n        return \"EntrypointContainerImpl{\" +\n                \"key='\" + key + '\\'' +\n                \", type=\" + type +\n                \", entry=\" + entry +\n                \", instance=\" + instance +\n                '}';\n    }", "first_line_groundtruth": "().getMetadata().getId(), ex);", "first_line_prediction": "(), ex);", "match": 0}
{"groundtruth": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);", "prediction": " exception = new EntrypointException(t);\n                }\n\n                exception.addSuppressed(t);\n            }\n        }\n\n        if (exception != null) {\n            throw exception;\n        }\n\n        return results;\n    }\n\n    public <T> T getOrCreateEntrypoint(String key, Class<T> type) throws Exception {\n        List<Entry> entries = entryMap.get(key);\n        if (entries == null) return null;\n\n        EntrypointException exception = null;\n        T result = null;\n\n        for (Entry entry : entries) {\n            try {\n                result = entry.getOrCreate(type);\n\n               ", "first_line_groundtruth": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);", "first_line_prediction": " exception = new EntrypointException(t);", "match": 0}
{"groundtruth": "(ForgePatch.getGameDir());", "prediction": "(new File(System.getProperty(\"user.dir\")));\n    }\n\n    @Override\n    public void setGameDir(File gameDir) {\n        this.gameDir = gameDir.toPath();\n        this.configDir = this.gameDir.resolve(\"config\");\n    }\n\n    @Override\n    public Path getConfigDir() {\n        return configDir;\n    }\n\n    @Override\n    public Path getGameDir() {\n        return gameDir;\n    }\n\n    @Override\n    public void setGameInstance(Object gameInstance) {\n        this.gameInstance = gameInstance;\n    }\n\n    @Override\n    public Object getGameInstance", "first_line_groundtruth": "(ForgePatch.getGameDir());", "first_line_prediction": "(new File(System.getProperty(\"user.dir\")));", "match": 0}
{"groundtruth": "parent.getVersionComponentCount();", "prediction": "0;\n    }\n\n    @Override\n    public int getVersionComponent(int index) {\n        return 0;\n    }\n\n    @Override\n    public int getMajor() {\n        return parent.getMajor();\n    }\n\n    @Override\n    public int getMinor() {\n        return parent.getMinor();\n    }\n\n    @Override\n    public int getPatch() {\n        return parent.getPatch();\n    }\n\n    @Override\n    public int getBuild() {\n        return parent.getBuild();\n    }\n\n    @Override\n    public int getRevision() {\n        return parent.getRevision();\n    }\n\n    @Override\n    public int getPre", "first_line_groundtruth": "parent.getVersionComponentCount();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "userDAO.getById(id);", "prediction": " userDAO.findById(id);\n    }\n\n    @Override\n    public BotUser findByUsername(String username) {\n        return userDAO.findByUsername(username);\n    }\n\n    @Override\n    public BotUser findByEmail(String email) {\n        return userDAO.findByEmail(email);\n    }\n\n    @Override\n    public BotUser save(BotUser user) {\n        return userDAO.save(user);\n    }\n\n    @Override\n    public void delete(BotUser user) {\n        userDAO.delete(user);\n    }", "first_line_groundtruth": "userDAO.getById(id);", "first_line_prediction": " userDAO.findById(id);", "match": 0}
{"groundtruth": "parent = SemanticVersion.parse(version);", "prediction": " parent = new SemanticVersionImpl(version, storeX);\n    }\n\n    public SemanticVersionImpl(String version) throws VersionParsingException {\n        parent = new SemanticVersionImpl(version, false);\n    }\n\n    public SemanticVersionImpl(SemanticVersion parent) {\n        this.parent = parent;\n    }\n\n    @Override\n    public boolean isSnapshot() {\n        return parent != null && parent.isSnapshot();\n    }\n\n    @Override\n    public boolean isRelease() {\n        return parent != null && parent.isRelease();\n    }\n\n    @Override\n    public boolean isLegacy() {\n        return parent != null && parent.isLegacy", "first_line_groundtruth": "parent = SemanticVersion.parse(version);", "first_line_prediction": " parent = new SemanticVersionImpl(version, storeX);", "match": 0}
{"groundtruth": "userDAO.getCount();", "prediction": "0;\n    }", "first_line_groundtruth": "userDAO.getCount();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "userDAO.getByName(name);", "prediction": " userDAO.findByName(name);\n    }", "first_line_groundtruth": "userDAO.getByName(name);", "first_line_prediction": " userDAO.findByName(name);", "match": 0}
{"groundtruth": "documentDAO.getCount();", "prediction": "0;\n    }", "first_line_groundtruth": "documentDAO.getCount();", "first_line_prediction": "0;", "match": 0}
{"groundtruth": "return mod.getMetadata().getId() + \"->(0.3.x)\" + value;", "prediction": " return mod.getMetadata().getId() + \"->\" + value;\n        }\n\n        @SuppressWarnings({ \"unchecked\" })\n        @Override\n        public synchronized <T> T getOrCreate(Class<T> type) throws Exception {\n            if (instanceMap.containsKey(type)) {\n                return (T) instanceMap.get(type);\n            } else {\n                Object instance = type.newInstance();\n                instanceMap.put(type, instance);\n                return (T) instance;\n            }\n        }\n\n        @Override\n        public boolean isOptional() {\n            return false;\n        }\n\n        @Override\n        public ModContainer getModContainer()", "first_line_groundtruth": "return mod.getMetadata().getId() + \"->(0.3.x)\" + value;", "first_line_prediction": " return mod.getMetadata().getId() + \"->\" + value;", "match": 0}
{"groundtruth": "controllerInfo.getMethod();", "prediction": " controllerInfo.getMethod();\n                PsiUtilBase.ensureValid(targetMethod);\n                Editor editor = JavaSourceFileUtil.openEditor(targetMethod);\n                if (editor != null) {\n                    editor.getCaretModel().moveToOffset(targetMethod.getTextOffset());\n                    editor.getScrollingModel().scrollToCaret(ScrollType.CENTER_UP);\n                }\n            }\n        }\n    }\n\n    private boolean isMatched(ControllerInfo info, String searchText) {\n        return info.getControllerName().contains(searchText);\n    }", "first_line_groundtruth": "controllerInfo.getMethod();", "first_line_prediction": " controllerInfo.getMethod();", "match": 0}
{"groundtruth": "if(controllerInfo.getRequestMethod().toLowerCase().contains(lowerCase)){", "prediction": " return controllerInfo.getControllerName().toLowerCase().contains(lowerCase) ||\n                 controllerInfo.getMethodName().toLowerCase().contains(lowerCase);\n    }", "first_line_groundtruth": "if(controllerInfo.getRequestMethod().toLowerCase().contains(lowerCase)){", "first_line_prediction": " return controllerInfo.getControllerName().toLowerCase().contains(lowerCase) ||", "match": 0}
{"groundtruth": "if(controllerInfo.getPath().toLowerCase().contains(lowerCase)){", "prediction": " return controllerInfo.getControllerName().toLowerCase().contains(lowerCase);\n    }", "first_line_groundtruth": "if(controllerInfo.getPath().toLowerCase().contains(lowerCase)){", "first_line_prediction": " return controllerInfo.getControllerName().toLowerCase().contains(lowerCase);", "match": 0}
{"groundtruth": "getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){", "prediction": "getControllerClass().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        return false;\n    }", "first_line_groundtruth": "getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){", "first_line_prediction": "getControllerClass().toLowerCase().contains(lowerCase)){", "match": 0}
{"groundtruth": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){", "prediction": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        return false;\n    }", "first_line_groundtruth": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){", "first_line_prediction": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){", "match": 1}
{"groundtruth": "controllerInfo.getSwaggerNotes() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){", "prediction": "controllerInfo.getRemarks() != null && controllerInfo.getRemarks().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        return false;\n    }", "first_line_groundtruth": "controllerInfo.getSwaggerNotes() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){", "first_line_prediction": "controllerInfo.getRemarks() != null && controllerInfo.getRemarks().toLowerCase().contains(lowerCase)){", "match": 0}
{"groundtruth": "= controllerInfo.getMethod().getContainingFile();", "prediction": " = PsiUtilBase.findFile(controllerInfo.getControllerClass());\n        if (file instanceof PsiJavaFile) {\n            PsiClass controllerClass = (PsiClass) file;\n            PsiMethod method = controllerClass.findMethodBySignature(controllerInfo.getControllerMethod(), false);\n            if (method != null) {\n                Editor editor = EditorFactory.getInstance().createEditor(method.getContainingFile(), controllerClass.getProject(), controllerClass.getContainingFile().getVirtualFile(), true);\n                editor.getCaretModel().moveToOffset(method.getTextOffset());\n                editor.getScrollingModel().scrollToCaret(", "first_line_groundtruth": "= controllerInfo.getMethod().getContainingFile();", "first_line_prediction": " = PsiUtilBase.findFile(controllerInfo.getControllerClass());", "match": 0}
{"groundtruth": "(feignInfo.getMethod());", "prediction": "(feignInfo.getPsiClass());\n                }\n            }\n        }\n        return elementList;\n    }\n\n    /**\n     * \u5224\u65ad\u65b9\u6cd5\u662f\u5426\u5339\u914d\n     *\n     * @param feignInfo  feign\u4fe1\u606f\n     * @param controllerMethod  controller\u65b9\u6cd5\n     * @return boolean\n     */\n    private boolean isMethodMatch(ControllerInfo feignInfo, PsiMethod controllerMethod) {\n        String controllerMethodName = controllerMethod.getName();\n        String feignMethodName = feignInfo.getPsiClass().getName();\n        return StringUtils.equals(controllerMethodName, feignMethodName);\n    }\n\n    /**\n     * \u5224\u65ad\u662f\u5426\u5728controller\u7c7b", "first_line_groundtruth": "(feignInfo.getMethod());", "first_line_prediction": "(feignInfo.getPsiClass());", "match": 0}
{"groundtruth": "if(controllerInfo.getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){", "prediction": " return false;\n    }", "first_line_groundtruth": "if(controllerInfo.getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){", "first_line_prediction": " return false;", "match": 0}
{"groundtruth": "database.getConnection().close();", "prediction": " // Closing server socket\n            serverSocket.close();\n        }\n    }", "first_line_groundtruth": "database.getConnection().close();", "first_line_prediction": " // Closing server socket", "match": 0}
{"groundtruth": "genre.setTitle(resultSet.getString(\"title\"));", "prediction": " genre.setId(resultSet.getInt(\"id\"));\n             genre.setTitle(resultSet.getString(\"title\"));\n             genre.setDescription(resultSet.getString(\"description\"));\n        }\n\n        return genre;\n    }\n\n    public List<Genre> getAllGenres() throws SQLException {\n        String query = \"SELECT * FROM genres\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n\n        ResultSet resultSet = statement.executeQuery();\n        List<Genre> genres = new ArrayList<>();\n\n        while(resultSet.next()){\n            Genre genre = new Genre();\n            genre.setId(resultSet.getInt(\"id\"));\n            genre.setTitle(resultSet", "first_line_groundtruth": "genre.setTitle(resultSet.getString(\"title\"));", "first_line_prediction": " genre.setId(resultSet.getInt(\"id\"));", "match": 0}
{"groundtruth": "genre.setId(resultSet.getInt(\"id\"));", "prediction": " genre.setId(resultSet.getInt(\"id\"));\n        }\n\n        return genre;\n    }\n\n    public List<Genre> getAllGenres() throws SQLException {\n        String query = \"SELECT * FROM genres\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n\n        ResultSet resultSet = statement.executeQuery();\n        List<Genre> genres = new ArrayList<>();\n\n        while(resultSet.next()){\n            Genre genre = new Genre();\n            genre.setTitle(resultSet.getString(\"title\"));\n            genre.setDescription(resultSet.getString(\"description\"));\n            genre.setId(resultSet.getInt(\"id\"));\n            genres.add(", "first_line_groundtruth": "genre.setId(resultSet.getInt(\"id\"));", "first_line_prediction": " genre.setId(resultSet.getInt(\"id\"));", "match": 0}
{"groundtruth": "comment.setText(res.getString(\"text\"));", "prediction": " comment.setId(res.getInt(\"id\"));\n             comment.setText(res.getString(\"text\"));\n             comment.setUser(res.getInt(\"user\"));\n             comment.setMusic(res.getInt(\"music\"));\n             comments.add(comment);\n        }\n\n        return comments;\n    }", "first_line_groundtruth": "comment.setText(res.getString(\"text\"));", "first_line_prediction": " comment.setId(res.getInt(\"id\"));", "match": 0}
{"groundtruth": "relocation.getPattern(),\n                        relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));", "prediction": " relocation.getPattern(),\n                         relocation.getReplacement(),\n                         relocation.getIncludes(),\n                         relocation.getExcludes()\n                ));\n            }\n\n            final Object jarRelocator = this.jarRelocatorConstructor.newInstance(\n                    in.toFile(),\n                    out.toFile(),\n                    rules\n            );\n\n            this.jarRelocatorRunMethod.invoke(jarRelocator);\n        } catch (final ReflectiveOperationException e) {\n            throw new RuntimeException(e);\n        }\n    }", "first_line_groundtruth": "relocation.getPattern(),", "first_line_prediction": " relocation.getPattern(),", "match": 0}
{"groundtruth": "relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));", "prediction": "0,\n                        0\n                ));\n            }\n\n            final Object jarRelocator = this.jarRelocatorConstructor.newInstance(\n                    in.toFile(),\n                    out.toFile(),\n                    rules\n            );\n\n            this.jarRelocatorRunMethod.invoke(jarRelocator);\n        } catch (final ReflectiveOperationException e) {\n            throw new RuntimeException(e);\n        }\n    }", "first_line_groundtruth": "relocation.getIncludes(),", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));", "prediction": "0,\n                        relocation.getReplacements(),\n                        relocation.getExcludes()\n                ));\n            }\n\n            final Object jarRelocator = this.jarRelocatorConstructor.newInstance(\n                    in.toFile(),\n                    out.toFile(),\n                    rules\n            );\n\n            this.jarRelocatorRunMethod.invoke(jarRelocator);\n        } catch (final ReflectiveOperationException e) {\n            throw new RuntimeException(e);\n        }\n    }", "first_line_groundtruth": "relocation.getRelocatedPattern(),", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "comment.setId(res.getInt(\"id\"));", "prediction": " comments.add(comment);\n        }\n\n        return comments;\n    }", "first_line_groundtruth": "comment.setId(res.getInt(\"id\"));", "first_line_prediction": " comments.add(comment);", "match": 0}
{"groundtruth": "playlist.setUser(res.getInt(\"user\"));", "prediction": " playlist.setDescription(res.getString(\"description\"));\n            playlist.setUser(res.getInt(\"user\"));\n            playlist.setPublic(res.getBoolean(\"is_public\"));\n            playlist.setMusic(getMusicOfPlaylist(playlist.getId()));\n            playlists.add(playlist);\n        }\n\n        return playlists;\n    }\n\n    public List<Music> getMusicOfPlaylist(int playlistId) throws SQLException {\n        String query = \"SELECT * FROM music WHERE playlist_id=?\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n        statement.setInt(1, playlistId);\n\n        ResultSet res = statement.", "first_line_groundtruth": "playlist.setUser(res.getInt(\"user\"));", "first_line_prediction": " playlist.setDescription(res.getString(\"description\"));", "match": 0}
{"groundtruth": "playlist.setPublic(res.getBoolean(\"is_public\"));", "prediction": " playlist.setPublic(res.getBoolean(\"is_public\"));\n            playlists.add(playlist);\n        }\n\n        return playlists;\n    }\n\n    public void addMusicToPlaylist(int playlistId, int musicId) throws SQLException {\n        String query = \"INSERT INTO playlist_music (playlist, music) VALUES (?,?)\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n        statement.setInt(1, playlistId);\n        statement.setInt(2, musicId);\n\n        statement.executeUpdate();\n    }\n\n    public List<Music> getMusicOfPlaylist(int playlistId) throws SQLException {\n        String", "first_line_groundtruth": "playlist.setPublic(res.getBoolean(\"is_public\"));", "first_line_prediction": " playlist.setPublic(res.getBoolean(\"is_public\"));", "match": 0}
{"groundtruth": ".setArtistObj(crudArtist.getArtistById(music.getArtist()));", "prediction": ".setArtist(crudArtist.getArtistById(music.getArtist()));\n\n            CrudAlbum crudAlbum = new CrudAlbum(database);\n            music.setAlbum(crudAlbum.getAlbumById(music.getAlbum()));\n\n            return music;\n        }\n        return null;\n    }\n\n    public List<Music> getAllMusics() throws SQLException {\n        String query = \"SELECT * FROM musics\";\n\n        PreparedStatement statement = database.getConnection().prepareStatement(query);\n        ResultSet res = statement.executeQuery();\n\n        List<Music> musics = new ArrayList<>();\n\n        while(res.next()){\n            Music music =", "first_line_groundtruth": ".setArtistObj(crudArtist.getArtistById(music.getArtist()));", "first_line_prediction": ".setArtist(crudArtist.getArtistById(music.getArtist()));", "match": 0}
{"groundtruth": "String json = request.getJson();", "prediction": " Response response = new Response();\n         response.setSuccess(false);\n         response.setErrorMessage(\"You are not authorized to perform this action!\");\n         return response;\n    }\n\n    public Response createNewArtist(Request request){\n        Response response = new Response();\n        response.setSuccess(false);\n        response.setErrorMessage(\"You are not authorized to perform this action!\");\n        return response;\n    }\n\n    public Response login(Request request){\n        Response response = new Response();\n        response.setSuccess(false);\n        response.setErrorMessage(\"You are not authorized to perform this action!\");\n        return response;\n    }\n\n    public Response", "first_line_groundtruth": "String json = request.getJson();", "first_line_prediction": " Response response = new Response();", "match": 0}
{"groundtruth": "response.setMessage(\"Username already exists!\");", "prediction": " response.setSuccess(false);\n                 response.setMessage(\"Username already exists!\");\n            }\n            else{\n                crudUser.createUser(user);\n                response.setSuccess(true);\n                response.setMessage(\"User created!\");\n            }\n        } catch (SQLException e) {\n            response.setSuccess(false);\n            response.setMessage(\"Error creating user!\");\n        }\n\n        return response;\n    }\n\n    public Response createNewArtist(Request request){\n        String json = request.getJson();\n        Gson gson = new Gson();\n        Artist artist = gson.fromJson(json, Artist.class);\n        CrudArtist crudArtist", "first_line_groundtruth": "response.setMessage(\"Username already exists!\");", "first_line_prediction": " response.setSuccess(false);", "match": 0}
{"groundtruth": "String command = request.getCommand();", "prediction": " // Handle the request\n        switch (request.getCommand()) {\n            case \"login\":\n                login(request);\n                break;\n            case \"logout\":\n                logout(request);\n                break;\n            case \"register\":\n                register(request);\n                break;\n            case \"get_user_info\":\n                getUserInfo(request);\n                break;\n            case \"get_user_playlists\":\n                getUserPlaylists(request);\n                break;\n            case \"get_user_playlists_tracks\":\n                getUserPlaylistsTracks(request);\n                break;\n            case \"get_user_playlists_tracks_info\":\n               ", "first_line_groundtruth": "String command = request.getCommand();", "first_line_prediction": " // Handle the request", "match": 0}
{"groundtruth": "response.setStatusCode(201);", "prediction": " response.setStatusCode(200);\n            }\n        } catch (SQLException e) {\n            response.setMessage(\"Error in creating user!\");\n            response.setStatusCode(500);\n        }\n\n        return response;\n    }\n\n    public Response createNewArtist(Request request){\n        String json = request.getJson();\n        Gson gson = new Gson();\n        Artist artist = gson.fromJson(json, Artist.class);\n        CrudArtist crudArtist = new CrudArtist(database);\n        Response response = new Response();\n\n        try {\n            if(crudArtist.doesArtistExist(artist.getUsername())){\n                response", "first_line_groundtruth": "response.setStatusCode(201);", "first_line_prediction": " response.setStatusCode(200);", "match": 0}
{"groundtruth": "loggedInAccount = gson.fromJson(response.getJson(), Artist.class);", "prediction": " role = \"artist\";\n                }\n            }\n            else if(crudUser.doesUserExist(account.getUsername())){\n                response = crudUser.login(account.getUsername(), account.getPassword());\n                if(response.getStatusCode() == 200){\n                    isLoggedIn = true;\n                    role = \"user\";\n                }\n            }\n            else{\n                response.setMessage(\"Username does not exist!\");\n                response.setStatusCode(400);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            response.setMessage(\"Error while logging in!\");\n            System.out.println(response.getMessage", "first_line_groundtruth": "loggedInAccount = gson.fromJson(response.getJson(), Artist.class);", "first_line_prediction": " role = \"artist\";", "match": 0}
{"groundtruth": "response.setMessage(\"Error while creating the user!\");", "prediction": " response.setMessage(\"Error creating user!\");\n             response.setStatusCode(500);\n        }\n\n        return response;\n    }\n\n    public Response createNewArtist(Request request){\n        String json = request.getJson();\n        Gson gson = new Gson();\n        Artist artist = gson.fromJson(json, Artist.class);\n        CrudArtist crudArtist = new CrudArtist(database);\n        Response response = new Response();\n\n        try {\n            if(crudArtist.doesArtistExist(artist.getUsername())){\n                response.setMessage(\"Artist already exists!\");\n                response.setStatusCode(400);\n            }\n            else", "first_line_groundtruth": "response.setMessage(\"Error while creating the user!\");", "first_line_prediction": " response.setMessage(\"Error creating user!\");", "match": 0}
{"groundtruth": "(response.getStatusCode() == 200) {", "prediction": " (response.getStatus().equals(\"success\")) {\n            User user = gson.fromJson(response.getJson(), User.class);\n            StaticData.user = user;\n            StaticData.objOut.writeObject(new Request(\"get_user\"));\n            StaticData.objOut.flush();\n            StaticData.objIn.readObject();\n            StaticData.objOut.writeObject(new Request(\"get_user_info\"));\n            StaticData.objOut.flush();\n            StaticData.objIn.readObject();\n            StaticData.objOut.writeObject(new Request(\"get_user_playlists", "first_line_groundtruth": "(response.getStatusCode() == 200) {", "first_line_prediction": " (response.getStatus().equals(\"success\")) {", "match": 0}
{"groundtruth": "album.setReleaseDate(new java.sql.Date(new java.util.Date().getTime()));", "prediction": " Request request = new Request(\"addAlbum\", album);\n        try {\n            StaticData.objOut.writeObject(request);\n            StaticData.objOut.flush();\n            Response response = (Response) StaticData.objIn.readObject();\n            System.out.println(response.getMessage());\n            if(response.getStatusCode() == 200){\n                Alert alert = new Alert(Alert.AlertType.INFORMATION);\n                alert.setTitle(\"Success\");\n                alert.setHeaderText(\"Album added\");\n                alert.setContentText(\"Album added successfully\");\n                alert.showAndWait();\n                Stage stage = (Stage", "first_line_groundtruth": "album.setReleaseDate(new java.sql.Date(new java.util.Date().getTime()));", "first_line_prediction": " Request request = new Request(\"addAlbum\", album);", "match": 0}
{"groundtruth": ".setText(String.valueOf(album.getArtist()));", "prediction": ".setText(album.getArtist());\n        dateTxt.setText(album.getDate());\n        popularityTxt.setText(String.valueOf(album.getPopularity()));\n        genreCombo.setValue(album.getGenre());\n        coverImg.setImage(new Image(album.getCover()));\n    }\n\n    public void save() {\n        Request request = new Request(\"editAlbum\");\n        request.setJson(new Gson().toJson(album));\n\n        try {\n            StaticData.objOut.writeObject(request);\n            StaticData.objOut.flush();\n\n            Response response = (Response) StaticData.objIn.", "first_line_groundtruth": ".setText(String.valueOf(album.getArtist()));", "first_line_prediction": ".setText(album.getArtist());", "match": 0}
{"groundtruth": "genre.getId() == albumId){", "prediction": "genre.getId() == album.getGenreId()){\n                        albumGenre = genre;\n                    }\n                }\n                genreCombo.getSelectionModel().select(albumGenre);\n            }\n        } catch (IOException | ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void save() {\n        Request request = new Request(\"editAlbum\");\n        request.setJson(new Gson().toJson(album));\n        try {\n            StaticData.objOut.writeObject(request);\n            StaticData.objOut.flush();\n            Response response = (Response) StaticData.objIn.readObject();\n            System", "first_line_groundtruth": "genre.getId() == albumId){", "first_line_prediction": "genre.getId() == album.getGenreId()){", "match": 0}
{"groundtruth": "(buffer.asInputStream())\n                .build()\n            );", "prediction": "(buffer.toString())\n                     .headers(headers)\n                     .build()\n            );\n        }\n    }", "first_line_groundtruth": "(buffer.asInputStream())", "first_line_prediction": "(buffer.toString())", "match": 0}
{"groundtruth": "a.getVariable());", "prediction": " a.getValue()).toLowerCase();\n            String stringB = ((String)  b.getValue()).toLowerCase();\n\n            return stringA + stringB;\n        }\n\n        return null;\n    }", "first_line_groundtruth": "a.getVariable());", "first_line_prediction": " a.getValue()).toLowerCase();", "match": 0}
{"groundtruth": "a.isString() && b.isString()) {", "prediction": "a.isString() && b.isString()) {\n            return a.toString() + b.toString();\n        }\n\n        return null;\n    }", "first_line_groundtruth": "a.isString() && b.isString()) {", "first_line_prediction": "a.isString() && b.isString()) {", "match": 1}
{"groundtruth": "(a.isString() && b.isString()) {", "prediction": " (a.isString() && b.isString()) {\n            return a.toString() + b.toString();\n        }\n\n        return null;\n    }", "first_line_groundtruth": "(a.isString() && b.isString()) {", "first_line_prediction": " (a.isString() && b.isString()) {", "match": 0}
{"groundtruth": "[i] = new Token(tokenMethod.getMethod().process(a));", "prediction": "[i] = new Token(method.process(a));\n                }\n                continue;\n            }\n        }\n\n        for (int i = 0; i < resultTokens.length; i++) {\n            if (resultTokens[i] == null) {\n                resultTokens[i] = new TokenString(\"\");\n            }\n        }\n\n        return resultTokens;\n    }\n\n    private List<Instruction> getInstructions(List<Token> tokens) {\n        List<Instruction> instructions = new ArrayList<>();\n\n        for (Token token : tokens) {\n            if (token instanceof TokenOperator) {\n                TokenOperator tokenOperator = (TokenOperator", "first_line_groundtruth": "[i] = new Token(tokenMethod.getMethod().process(a));", "first_line_prediction": "[i] = new Token(method.process(a));", "match": 0}
{"groundtruth": "((TokenMethod) token).getMethod());", "prediction": "methods.get(((TokenMethod) token).getMethod().getName()));\n            }\n        }\n        return operators;\n    }\n\n    private int getHighPriority(List<Instruction> operators) {\n        int maxPriority = 0;\n        for (Instruction instruction : operators) {\n            if (instruction.getPriority() > maxPriority) {\n                maxPriority = instruction.getPriority();\n            }\n        }\n        return maxPriority;\n    }\n\n    private List<Token> tokenize(String input) {\n        List<Token> tokens = new ArrayList<>();\n        for (String token : input.split(\" \")) {\n            if (token.isEmpty())", "first_line_groundtruth": "((TokenMethod) token).getMethod());", "first_line_prediction": "methods.get(((TokenMethod) token).getMethod().getName()));", "match": 0}
{"groundtruth": ".setAttribute(\"user_reg\", teacher.getName());", "prediction": ".setAttribute(\"userType\", \"teacher\");\n\t\t\tresp.sendRedirect(\"teacherHome.jsp\");\n\t\t}\n\t\telse {\n\t\t\treq.setAttribute(\"error\", \"Invalid mail or password\");\n\t\t\treq.getRequestDispatcher(\"teacherLogin.jsp\").forward(req, resp);\n\t\t}", "first_line_groundtruth": ".setAttribute(\"user_reg\", teacher.getName());", "first_line_prediction": ".setAttribute(\"userType\", \"teacher\");", "match": 0}
{"groundtruth": "genre.getId() == music.getGenre()){", "prediction": "genre.getName().equals(music.getGenre())){\n                        musicGenre = genre;\n                    }\n                }\n                genreMenu.setValue(musicGenre);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        Request request2 = new Request(\"getAlbums\");\n        try {\n            StaticData.objOut.writeObject(request2);\n            StaticData.objOut.flush();\n            Response response2 = (Response) StaticData.objIn.readObject();\n            System.out.println(response2.getMessage());\n           ", "first_line_groundtruth": "genre.getId() == music.getGenre()){", "first_line_prediction": "genre.getName().equals(music.getGenre())){", "match": 0}
{"groundtruth": "u.setName(rs.getString(3));", "prediction": "\n\t\t\t\t\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn u;", "first_line_groundtruth": "u.setName(rs.getString(3));", "first_line_prediction": "", "match": 0}
{"groundtruth": "u.setPassword(rs.getString(4));", "prediction": "", "first_line_groundtruth": "u.setPassword(rs.getString(4));", "first_line_prediction": "", "match": 0}
{"groundtruth": "u.setMail(rs.getString(1));", "prediction": "\tu.setTeacher_id(rs.getInt(\"teacher_id\"));\n\t\t\t\t\tu.setTeacher_name(rs.getString(\"teacher_name\"));\n\t\t\t\t\tu.setTeacher_email(rs.getString(\"teacher_email\"));\n\t\t\t\t\tu.setTeacher_password(rs.getString(\"<PASSWORD>\"));\n\t\t\t\t\tu.setTeacher_phone(rs.getString(\"teacher_phone\"));\n\t\t\t\t\tu.setTeacher_address(rs.getString(\"teacher_address\"));\n\t\t\t\t\tu.setTeacher_gender(rs.getString(\"teacher_gender\"));\n\t\t\t\t\tu.setTeacher_dob(rs.", "first_line_groundtruth": "u.setMail(rs.getString(1));", "first_line_prediction": "\tu.setTeacher_id(rs.getInt(\"teacher_id\"));", "match": 0}
{"groundtruth": "u.setPass(rs.getString(2));", "prediction": " u.setPassword(rs.getString(2));\n\t\t\t\t u.setTeacher_id(rs.getInt(3));\n\t\t\t\t u.setTeacher_name(rs.getString(4));\n\t\t\t\t u.setTeacher_dept(rs.getString(5));\n\t\t\t\t u.setTeacher_phone(rs.getString(6));\n\t\t\t\t u.setTeacher_address(rs.getString(7));\n\t\t\t\t u.setTeacher_qualification(rs.getString(8));\n\t\t\t\t u.setTeacher_experience(rs.getString(9));\n\t\t\t\t u.setTeacher_salary(rs.getString(10));\n\t\t\t\t u.", "first_line_groundtruth": "u.setPass(rs.getString(2));", "first_line_prediction": " u.setPassword(rs.getString(2));", "match": 0}
{"groundtruth": "u.setReg(rs.getString(3));", "prediction": " u.setReg(rs.getString(2));\n\t\t\t\t u.setPassword(rs.getString(3));\n\t\t\t}", "first_line_groundtruth": "u.setReg(rs.getString(3));", "first_line_prediction": " u.setReg(rs.getString(2));", "match": 0}
{"groundtruth": "return reduce.get(0).getVariable();", "prediction": " return reduce.get(0).getValue();\n        }\n\n        return process(reduce, operators);\n    }\n\n    private List<Token> reduce(Token[] tokens) {\n        List<Token> result = new ArrayList<>();\n        for (Token token : tokens) {\n            if (token != null) {\n                result.add(token);\n            }\n        }\n        return result;\n    }\n\n    private List<Instruction> getInstructions(List<Token> tokens) {\n        List<Instruction> result = new ArrayList<>();\n        for (Token token : tokens) {\n            if (token instanceof TokenOperator) {\n                TokenOperator tokenOperator =", "first_line_groundtruth": "return reduce.get(0).getVariable();", "first_line_prediction": " return reduce.get(0).getValue();", "match": 0}
{"groundtruth": "u.setFullname(rs.getString(1));", "prediction": "\tu.setReg(em);\n\t\t\t\t\tu.setPassword(<PASSWORD>);\n\t\t\t\t\tu.setFullname(rs.getString(2));\n\t\t\t\t\tu.setEmail(rs.getString(3));\n\t\t\t\t\tu.setPhone(rs.getString(4));\n\t\t\t\t\tu.setAddress(rs.getString(5));\n\t\t\t\t\tu.setGender(rs.getString(6));\n\t\t\t\t\tu.setReg(rs.getString(7));\n\t\t\t\t\tu.setPass(rs.getString(8));\n\t\t\t\t\tu.setReg(rs.getString(9));\n\t\t\t\t\tu.setPass", "first_line_groundtruth": "u.setFullname(rs.getString(1));", "first_line_prediction": "\tu.setReg(em);", "match": 0}
{"groundtruth": "album.getId() == music.getArtist()){", "prediction": "album.getId() == music.getAlbum()){\n                        musicAlbum = album;\n                    }\n                }\n\n                albumMenu.setValue(musicAlbum);\n            }\n        } catch (IOException | ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void saveMusic(ActionEvent event){\n        if(titleTxt.getText().isEmpty()){\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n            alert.setTitle(\"Error\");\n            alert.setHeaderText(\"Title cannot be empty\");\n            alert.showAndWait();\n            return;\n        }\n\n        if(pathTxt.getText().isEmpty()){\n            Alert", "first_line_groundtruth": "album.getId() == music.getArtist()){", "first_line_prediction": "album.getId() == music.getAlbum()){", "match": 0}
{"groundtruth": "(album.getId() == music.getArtist()){", "prediction": "(album.getId() == music.getAlbum()){\n                        musicAlbum = album;\n                    }\n                }\n\n                albumMenu.setValue(musicAlbum);\n            }\n        } catch (IOException | ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void saveMusic(ActionEvent event){\n        if(titleTxt.getText().isEmpty()){\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n            alert.setTitle(\"Error\");\n            alert.setHeaderText(\"Title cannot be empty\");\n            alert.showAndWait();\n            return;\n        }\n\n        if(pathTxt.getText().isEmpty()){\n           ", "first_line_groundtruth": "(album.getId() == music.getArtist()){", "first_line_prediction": "(album.getId() == music.getAlbum()){", "match": 0}
{"groundtruth": "playlistName.setText(playlist.getTitle());", "prediction": " for(Music music : musics){\n                     musicsList.add(music.getUri());\n                 }\n\n                for(Music music : musics){\n                    Button button = new Button(music.getName());\n                    button.setId(music.getUri());\n                    button.setOnAction(new EventHandler<ActionEvent>() {\n                        @Override\n                        public void handle(ActionEvent event) {\n                            try {\n                                Request request = new Request(\"playMusic\");\n                                request.setJson(new Gson().toJson(new Music(event.getSource().getId())));\n\n                                StaticData.objOut.writeObject(request);\n                                StaticData.objOut.", "first_line_groundtruth": "playlistName.setText(playlist.getTitle());", "first_line_prediction": " for(Music music : musics){", "match": 0}
{"groundtruth": "(genre.getId() == music.getGenre()){", "prediction": "(genre.getName().equals(music.getGenre())){\n                        musicGenre = genre;\n                    }\n                }\n                genreMenu.setValue(musicGenre);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        Request request2 = new Request(\"getAlbums\");\n        try {\n            StaticData.objOut.writeObject(request2);\n            StaticData.objOut.flush();\n            Response response2 = (Response) StaticData.objIn.readObject();\n            System.out.println(response2.getMessage());", "first_line_groundtruth": "(genre.getId() == music.getGenre()){", "first_line_prediction": "(genre.getName().equals(music.getGenre())){", "match": 0}
{"groundtruth": "Operator operator = tokenOperator.getOperation();", "prediction": " if (tokenOperator.getPriority() <= maxPriority) {\n                     resultTokens[i] = processOperator(tokenOperator, resultTokens, i);\n                 }\n            }\n        }\n\n        return resultTokens;\n    }\n\n    private Token processOperator(TokenOperator tokenOperator, Token[] tokens, int i) {\n        TokenOperator operator = tokenOperator;\n        Token left = tokens[i - 1];\n        Token right = tokens[i + 1];\n\n        if (operator.getOperator() == Operator.OperatorType.ASSIGN) {\n            return processAssign(operator, left, right);\n        }\n\n        if (operator.", "first_line_groundtruth": "Operator operator = tokenOperator.getOperation();", "first_line_prediction": " if (tokenOperator.getPriority() <= maxPriority) {", "match": 0}
{"groundtruth": "Token(operator.getName() + resultTokens[i + 1].getVariable());", "prediction": " TokenString(operator.getLeft());\n                    continue;\n                }\n                Token b = getSafeToken(resultTokens, i + 1);\n                if (b == null) {\n                    setSafeToken(resultTokens, i, null);\n                    resultTokens[i - 1] = new  TokenString(operator.getRight());\n                    continue;\n                }\n                if (operator.validate(a, b)) {\n                    setSafeToken(resultTokens, i, null);\n                    resultTokens[i - 1] = new  TokenString(operator.getLeft());\n                    resultTokens[i + 1] =", "first_line_groundtruth": "Token(operator.getName() + resultTokens[i + 1].getVariable());", "first_line_prediction": " TokenString(operator.getLeft());", "match": 0}
{"groundtruth": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());", "prediction": " = new Token(operator.getName() + resultTokens[i + 1].getVariable());\n                    continue;\n                }\n\n                Token b = getSafeToken(resultTokens, i + 1);\n                if (b == null) {\n                    setSafeToken(resultTokens, i, null);\n                    resultTokens[i - 1] = new Token(operator.getName() + resultTokens[i - 1].getVariable());\n                    continue;\n                }\n\n                if (b instanceof TokenOperator) {\n                    setSafeToken(resultTokens, i, null);\n                    setSafeToken(resultTokens, i + 1", "first_line_groundtruth": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());", "first_line_prediction": " = new Token(operator.getName() + resultTokens[i + 1].getVariable());", "match": 0}
{"groundtruth": "response.getJson(), Music.class);", "prediction": "response.getMessage(), Music.class);\n            musicTitleLbl.setText(music.getTitle());\n            musics.add(music.getTitle());\n            songIndex = 0;\n            running = false;\n            volumeSlider.setValue(music.getVolume());\n            volumeSlider.valueProperty().addListener(new ChangeListener<Number>() {\n                @Override\n                public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n                    music.setVolume(newValue.intValue());\n                    Request request1 = new Request(\"setMusicVolume\");\n                    request1.setJson(new Gson().toJson(music));\n                   ", "first_line_groundtruth": "response.getJson(), Music.class);", "first_line_prediction": "response.getMessage(), Music.class);", "match": 0}
{"groundtruth": "System.out.println(\"test\" + response.getMessage());", "prediction": " music = new Gson().fromJson(response.getJson(), Music.class);\n            } catch (IOException | ClassNotFoundException e) {\n                throw new RuntimeException(e);\n            }\n\n            try {\n                String musicFile = \"src/main/resources/com/ap/spotify/downloads/\" + musics.get(songIndex);\n                sound = new Media(new File(musicFile).toURI().toString());\n            }\n            catch (Exception e){\n                download();\n                String musicFile = \"src/main/resources/com/ap/spotify/downloads/\" + musics.get(songIndex);\n                sound =", "first_line_groundtruth": "System.out.println(\"test\" + response.getMessage());", "first_line_prediction": " music = new Gson().fromJson(response.getJson(), Music.class);", "match": 0}
{"groundtruth": "setHeaderText(response1.getMessage());", "prediction": "setHeaderText(\"Music added to playlist!\");\n                            alert.setContentText(\"You can now listen to your music!\");\n                            alert.showAndWait();\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                });\n                addToPlaylistVbox.getChildren().add(button);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void putMusic(Music music){\n        musicName.setText(music.getName());\n        artist.setText(music.getArtist());\n        genre.setText(music.getGenre());\n        date.setText(music.getDate());\n       ", "first_line_groundtruth": "setHeaderText(response1.getMessage());", "first_line_prediction": "setHeaderText(\"Music added to playlist!\");", "match": 0}
{"groundtruth": "a.getVariable().toString().isEmpty()) {", "prediction": " !(a instanceof TokenMethod)) {\n                    setSafeToken(resultTokens, i, null);\n                    setSafeToken(resultTokens, i - 1, null);\n                    resultTokens[i + 1] = new Token(operator.getName() + resultTokens[i + 1].getVariable());\n                    continue;\n                }\n\n                Token b = getSafeToken(resultTokens, i + 1);\n                if (b == null) {\n                    setSafeToken(resultTokens, i, null);\n                    resultTokens[i + 1] = new Token(operator.getName() + resultTokens[i + ", "first_line_groundtruth": "a.getVariable().toString().isEmpty()) {", "first_line_prediction": " !(a instanceof TokenMethod)) {", "match": 0}
{"groundtruth": "(album.getCoverPicPath() != null) {", "prediction": " (album.getCoverPicPath() != null) {\n                        try {\n                            albumCover = new ImageView(Test.class.getResource(\"cloud/\").toExternalForm() + album.getCoverPicPath());\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    albumCover.setFitHeight(110);\n                    albumCover.setPreserveRatio(false);\n                    albumCover.setFitWidth(130);\n                    albumCover.setFitHeight(130);\n\n                    Label title = new Label(album.getTitle());\n                    title.setPrefWidth(Double.MAX_", "first_line_groundtruth": "(album.getCoverPicPath() != null) {", "first_line_prediction": " (album.getCoverPicPath() != null) {", "match": 0}
{"groundtruth": "final GptTurboModel model = GptTurboDto.convertToGptTurboModel(dto);", "prediction": " List<String> result = chatServiceimpl.completions(dto);\n             return Result.success(result);\n        } catch (Exception e) {\n            log.error(\"GPT-Turbo 3.5 \u63a5\u53e3\u8c03\u7528\u5931\u8d25\", e);\n            return Result.fail(e.getMessage());\n        }\n    }\n\n    /**\n     * Generate result.\n     *\n     * @param dto the dto\n     * @return the result\n     */\n    @PostMapping(value = \"/chat/generate\", name = \"GPT-Turbo 3.5\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public Result generate", "first_line_groundtruth": "final GptTurboModel model = GptTurboDto.convertToGptTurboModel(dto);", "first_line_prediction": " List<String> result = chatServiceimpl.completions(dto);", "match": 0}
{"groundtruth": "() + \"_\" + getIdentityResolver().getIdentityKey(), getConfiguration());", "prediction": "(), getConfiguration());\n    }", "first_line_groundtruth": "() + \"_\" + getIdentityResolver().getIdentityKey(), getConfiguration());", "first_line_prediction": "(), getConfiguration());", "match": 0}
{"groundtruth": "dslParser.parse(arrangement);", "prediction": " dslParser.parse(arrangement);\n    }\n\n    public void arrange(List<String> arrangement) {\n        dslParser.parse(arrangement);\n    }\n\n    public void arrange(String[] arrangement) {\n        dslParser.parse(arrangement);\n    }\n\n    public void arrange(List<String> arrangement, ThreadPoolExecutor threadPoolExecutor) {\n        dslParser.parse(arrangement, threadPoolExecutor);\n    }\n\n    public void arrange(String[] arrangement, ThreadPoolExecutor threadPoolExecutor) {\n        dslParser.parse(arrangement, threadPoolExecutor);\n    }\n\n   ", "first_line_groundtruth": "dslParser.parse(arrangement);", "first_line_prediction": " dslParser.parse(arrangement);", "match": 0}
{"groundtruth": "el.getTypename();", "prediction": " el.getType();\n            var value =  el.getValue();\n            var id =  el.getId();\n            var entity = new JsonObject();\n            entity.addProperty(\"type\", type);\n            entity.addProperty(\"id\", id);\n            entity.addProperty(\"value\", value);\n            entities.getAsJsonArray().add(entity);\n        }\n\n        json.add(\"variables\", variables);\n        json.add(\"entities\", entities);\n\n        var document = new Parser().parseDocument(query);\n        var operationDefinition = (OperationDefinition) document.getDefinitions().get(0);\n        var selectionSet = operationDefinition.getSelectionSet();\n       ", "first_line_groundtruth": "el.getTypename();", "first_line_prediction": " el.getType();", "match": 0}
{"groundtruth": "body.getVariables().getRepresentations();", "prediction": " new ArrayList<RepresentationsItem>();\n        for (RepresentationsItem item : body.getRepresentations()) {\n            list.add(item);\n        }\n\n        var document = new Parser().parseDocument(query);\n        var operationDefinition = (OperationDefinition) document.getDefinitions().get(0);\n        var selectionSet = (SelectionSet) operationDefinition.getSelectionSet();\n        var fields = selectionSet.getSelections();\n\n        for (Field field : fields) {\n            if (field.getSelectionSet() != null) {\n                var inlineFragment = (InlineFragment) field;\n                var fragmentName = inlineFragment.getTypeCondition", "first_line_groundtruth": "body.getVariables().getRepresentations();", "first_line_prediction": " new ArrayList<RepresentationsItem>();", "match": 0}
{"groundtruth": "query = body.getQuery().replaceFirst(\".+?\\\\)\", \"\");", "prediction": "ql = body.getRepresentations().stream()\n                .filter(r -> r.getRepresentation().equals(body.getRepresentation()))\n                .findFirst()\n                .orElseThrow();\n\n        var document = new Parser().parseDocument(ql.getQuery());\n        var operation = document.getDefinitions().stream()\n                .filter(d -> d instanceof OperationDefinition)\n                .findFirst()\n                .orElseThrow();\n\n        var selections = new ArrayList<SelectionSet>();\n        selections.add(operation.getSelectionSet());\n\n        var fragments = new HashMap<String, InlineFragment>();\n        for (var fragment : operation.getSelectionSet().getSelections())", "first_line_groundtruth": "query = body.getQuery().replaceFirst(\".+?\\\\)\", \"\");", "first_line_prediction": "ql = body.getRepresentations().stream()", "match": 0}
{"groundtruth": "int status = ProcessUtils.runAndWait(cmd, tempDir);", "prediction": "\n\n            ProcessUtils.run(cmd, tempDir, new StdListener(options.verbose));\n\n            FileUtils.delete(installerFile);\n        }\n    }", "first_line_groundtruth": "int status = ProcessUtils.runAndWait(cmd, tempDir);", "first_line_prediction": "", "match": 0}
{"groundtruth": "FileUtils.writeFile(new File(cwd, \"eula.txt\"), \"eula=true\");", "prediction": " cmd += \" --eula\";\n        }\n\n        if (options.offline) {\n            cmd += \" --offline\";\n        }\n\n        if (options.force) {\n            cmd += \" --force\";\n        }\n\n        if (options.noGui) {\n            cmd += \" --no-gui\";\n        }\n\n        if (options.noUpdates) {\n            cmd += \" --no-updates\";\n        }\n\n        if (options.noSplash) {\n            cmd += \" --no-splash\";\n        }\n\n        if (options.noSound) {\n            cmd += \" --no-sound\";\n        }\n\n        if (options.", "first_line_groundtruth": "FileUtils.writeFile(new File(cwd, \"eula.txt\"), \"eula=true\");", "first_line_prediction": " cmd += \" --eula\";", "match": 0}
{"groundtruth": "Logger.info(\"Process exited with code: \" + exitCode);", "prediction": " if (exitCode != 0) {\n                 throw new MCDException(\"Server exited with code \" + exitCode);\n             }\n        } catch (MCDException e) {\n            Logger.error(e.getMessage());\n            return 1;\n        }\n\n        return 0;\n    }", "first_line_groundtruth": "Logger.info(\"Process exited with code: \" + exitCode);", "first_line_prediction": " if (exitCode != 0) {", "match": 0}
{"groundtruth": "setNumero(endereco.getNumero());", "prediction": "setRua(endereco.getRua());\n        enderecoSalvo.setNumero(endereco.getNumero());\n        enderecoSalvo.setBairro(endereco.getBairro());\n        enderecoSalvo.setCidade(endereco.getCidade());\n        enderecoSalvo.setEstado(endereco.getEstado());\n        enderecoSalvo.setCep(endereco.getCep());\n    }\n\n    public void removerEndereco(UUID uuid) {\n        if(!enderecoMap.containsKey(uuid)) {\n            throw new En", "first_line_groundtruth": "setNumero(endereco.getNumero());", "first_line_prediction": "setRua(endereco.getRua());", "match": 0}
{"groundtruth": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);", "prediction": " endereco = modelMapper.toModel(enderecoForm);\n        enderecoRepository.save(endereco);\n\n        return ResponseEntity.ok().build();\n    }\n\n    @Operation(summary = \"Atualizar endere\u00e7o\", description = \"Atualizar endere\u00e7o\", tags = { \"Endere\u00e7o\" })\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"Sucesso\", content = @Content),\n            @ApiResponse(responseCode = \"400\", description = \"Dados inv\u00e1lidos\", content = @Content)\n    })\n    @PutMapping", "first_line_groundtruth": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);", "first_line_prediction": " endereco = modelMapper.toModel(enderecoForm);", "match": 0}
{"groundtruth": "setComplemento(endereco.getComplemento());", "prediction": "setCep(endereco.getCep());\n        enderecoSalvo.setCidade(endereco.getCidade());\n        enderecoSalvo.setEstado(endereco.getEstado());\n        enderecoSalvo.setBairro(endereco.getBairro());\n        enderecoSalvo.setRua(endereco.getRua());\n    }\n\n    public void removerEndereco(UUID uuid) {\n        if(!enderecoMap.containsKey(uuid)) {\n            throw new EnderecoNaoEncontradoException(String.format(\"Endere\u00e7o", "first_line_groundtruth": "setComplemento(endereco.getComplemento());", "first_line_prediction": "setCep(endereco.getCep());", "match": 0}
{"groundtruth": "DownloadUtils.download(this.url, finalFile, ignoreExist);", "prediction": " if (finalFile.exists() && !ignoreExist) {\n            return;\n        }\n\n        DownloadUtils.download(this.url, finalFile);\n    }\n\n    public void install(File directory) throws IOException {\n        File finalFile = new File(directory, this.getJARName());\n        if (!finalFile.exists()) {\n            throw new IOException(\"File not found: \" + finalFile.getAbsolutePath());\n        }\n\n        ProcessUtils.run(new String[] { \"java\", \"-jar\", finalFile.getAbsolutePath() }, new StdListener());\n    }\n\n    public void uninstall(File directory) throws IOException {\n        File", "first_line_groundtruth": "DownloadUtils.download(this.url, finalFile, ignoreExist);", "first_line_prediction": " if (finalFile.exists() && !ignoreExist) {", "match": 0}
{"groundtruth": "FileUtils.deleteRecursive(tempDir);", "prediction": " FileUtils.delete(installerFile);\n        }\n    }\n\n    public void launch(RunOptions options) throws IOException, InterruptedException {\n        String cmd = this.software.getLaunch().replace(\"{version}\", version).replace(\"{java}\", options.java);\n        ProcessUtils.runAndWait(cmd, options.cwd);\n    }\n\n    public void launch(RunOptions options, StdListener listener) throws IOException, InterruptedException {\n        String cmd = this.software.getLaunch().replace(\"{version}\", version).replace(\"{java}\", options.java);\n        ProcessUtils.runAndWait(cmd, options.cwd, listener);\n    }", "first_line_groundtruth": "FileUtils.deleteRecursive(tempDir);", "first_line_prediction": " FileUtils.delete(installerFile);", "match": 0}
{"groundtruth": "installerFile = DownloadUtils.downloadTemp(this.url);", "prediction": "uberJar = new File(options.cwd, this.getJARName());\n            File installerFile = new File(options.cwd, installer.getJAR());\n\n            FileUtils.copy(installerFile, uberJar);\n\n            ProcessUtils.run(installer.getCommand(), new StdListener(options.verbose), uberJar);\n        }\n    }\n\n    public void uninstall(RunOptions options) throws IOException, InterruptedException {\n        SoftwareUninstaller uninstaller = this.software.getUninstaller();\n\n        if (uninstaller == null) {\n            throw new IOException(\"No uninstaller found for \" + this.software.getID());\n       ", "first_line_groundtruth": "installerFile = DownloadUtils.downloadTemp(this.url);", "first_line_prediction": "uberJar = new File(options.cwd, this.getJARName());", "match": 0}
{"groundtruth": "DebugChannel channel = Preconditions.checkNonNull(getChannel(key));", "prediction": " DebugChannel channel = getChannel(key);\n        if (channel == null) return false;\n\n        if (channel.getListeners().add(player)) {\n            player.sendMessage(Component.text(\"Subscribed to debug channel: \").append(channel.getFriendlyName()));\n            return true;\n        }\n\n        return false;\n    }", "first_line_groundtruth": "DebugChannel channel = Preconditions.checkNonNull(getChannel(key));", "first_line_prediction": " DebugChannel channel = getChannel(key);", "match": 0}
{"groundtruth": "FileUtils.writeFile(new File(options.cwd, \".mcdeploy\"), this.getJARName());", "prediction": " if (installer != null) {\n            installer.getExecute().replace(\"{version}\", version).replace(\"{java}\", options.java);\n         }\n    }\n\n    public void run(RunOptions options) throws IOException, InterruptedException {\n        if (this.software.getExecute() != null) {\n            ProcessUtils.runAndWait(this.software.getExecute().replace(\"{version}\", version).replace(\"{java}\", options.java), options.cwd);\n        }\n    }\n\n    public void run(RunOptions options, StdListener listener) throws IOException, InterruptedException {\n        if (this.software.getExecute() != null) {", "first_line_groundtruth": "FileUtils.writeFile(new File(options.cwd, \".mcdeploy\"), this.getJARName());", "first_line_prediction": " if (installer != null) {", "match": 0}
{"groundtruth": "FileUtils.readFile(dotMCDFile);", "prediction": " dotMCDFile.exists() ? dotMCDFile.listFiles()[0].getName() : \"server.jar\";\n        }\n\n        if (this.cwd == null) {\n            this.cwd = new File(System.getProperty(\"user.dir\"));\n        }\n\n        if (this.cwd.exists()) {\n            if (!this.cwd.isDirectory()) {\n                throw new MCDException(\"Not a directory\");\n            }\n        } else {\n            throw new MCDException(\"Directory does not exist\");\n        }\n\n        if (this.cwd.listFiles() == null) {\n            throw new MCDException(\"", "first_line_groundtruth": "FileUtils.readFile(dotMCDFile);", "first_line_prediction": " dotMCDFile.exists() ? dotMCDFile.listFiles()[0].getName() : \"server.jar\";", "match": 0}
{"groundtruth": "modelMapper.getMapper().map(enderecoForm, Endereco.class);", "prediction": " enderecoRepository.getEnderecoPeloUUID(uuid);\n        endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);\n        endereco = enderecoRepository.atualizarEndereco(endereco);\n        return ResponseEntity.ok().body(endereco);\n    }\n\n    @Operation(summary = \"Excluir endere\u00e7o\", description = \"Excluir endere\u00e7o\", tags = { \"Endere\u00e7o\" })\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"Sucesso\", content = @", "first_line_groundtruth": "modelMapper.getMapper().map(enderecoForm, Endereco.class);", "first_line_prediction": " enderecoRepository.getEnderecoPeloUUID(uuid);", "match": 0}
{"groundtruth": "List<Endereco> enderecoPelosCEP = enderecoRepository.getEnderecosPeloCEP(cep);", "prediction": " Optional<Endereco> endereco = enderecoRepository.findByCep(cep);", "first_line_groundtruth": "List<Endereco> enderecoPelosCEP = enderecoRepository.getEnderecosPeloCEP(cep);", "first_line_prediction": " Optional<Endereco> endereco = enderecoRepository.findByCep(cep);", "match": 0}
{"groundtruth": "listaEnderecos = enderecoRepository.getEnderecoList();", "prediction": " enderecos = enderecoRepository.listarEnderecos();\n        return ResponseEntity.ok().body(enderecos);\n    }\n\n    private List<String> validar(EnderecoForm enderecoForm) {\n        Set<ConstraintViolation<EnderecoForm>> violations = validator.validate(enderecoForm);\n        return violations.stream()\n                .map(ConstraintViolation::getMessage)\n                .collect(Collectors.toList());\n    }", "first_line_groundtruth": "listaEnderecos = enderecoRepository.getEnderecoList();", "first_line_prediction": " enderecos = enderecoRepository.listarEnderecos();", "match": 0}
{"groundtruth": "return R.error(\"\u672a\u77e5\u9519\u8bef\");", "prediction": " return R.success(res);\n    }", "first_line_groundtruth": "return R.error(\"\u672a\u77e5\u9519\u8bef\");", "first_line_prediction": " return R.success(res);", "match": 0}
{"groundtruth": ").put(\"name\", source.name()).put(\"version\", source.version()));", "prediction": "\n                \"name\", source.name(), \"version\", source.version(), \"type\", \"npm\"));\n  }\n\n  private ObjectNode createNode(PackageRef source, Set<com.redhat.exhort.api.PackageRef> allDeps) {\n    ObjectNode node = mapper.createObjectNode();\n    node.put(\"id\", getId(source));\n    node.set(\n        \"info\",\n        mapper.createObjectNode(\n            \"name\", source.name(), \"version\", source.version(), \"type\", \"npm\"));\n    node.set(\"children\", mapper.createArrayNode());\n    allDeps.stream()", "first_line_groundtruth": ").put(\"name\", source.name()).put(\"version\", source.version()));", "first_line_prediction": "", "match": 0}
{"groundtruth": ").purl().getType());", "prediction": "0).getPackageManager());\n        }\n      }\n      return new DependencyTree(root, deps);\n    } catch (IOException | InvalidSPDXAnalysisException e) {\n      throw new ClientErrorException(Response.Status.BAD_REQUEST, e.getMessage());\n    }\n  }\n\n  private Map<PackageRef, DirectDependency> buildDeps(SpdxWrapper wrapper) throws InvalidSPDXAnalysisException {\n    Map<PackageRef, DirectDependency> deps = new HashMap<>();\n    Set<PackageRef> visited = new HashSet<>();\n    Predicate<Relationship> isDirect = r -> r.isRelationshipOf(Relationship.RelationshipType.CONTAIN", "first_line_groundtruth": ").purl().getType());", "first_line_prediction": "0).getPackageManager());", "match": 0}
{"groundtruth": "().map(v -> v.purl().getType()).distinct().toList();", "prediction": "().map(PackageRef::getType).collect(Collectors.toList());\n        packageManager = types.contains(\"maven\") ? Constants.MAVEN_PKG_MANAGER : Constants.NPM_PKG_MANAGER;\n      }\n\n      for (Component component : bom.getComponents()) {\n        if (component.getPurl() != null) {\n          direct.computeIfAbsent(PackageRef.builder().purl(component.getPurl()).build(),\n              k -> DirectDependency.builder().packageManager(packageManager)).addComponent(component);\n        }\n      }\n\n      for (Map.Entry<PackageRef, DirectDependency.Builder>", "first_line_groundtruth": "().map(v -> v.purl().getType()).distinct().toList();", "first_line_prediction": "().map(PackageRef::getType).collect(Collectors.toList());", "match": 0}
{"groundtruth": "severity(SeverityUtils.fromScore(score));", "prediction": "severity(SeverityUtils.fromCvssScore(score))\n         .references(List.of(data.get(\"reference\").asText()));\n  }", "first_line_groundtruth": "severity(SeverityUtils.fromScore(score));", "first_line_prediction": "severity(SeverityUtils.fromCvssScore(score))", "match": 0}
{"groundtruth": "tree.root(), allDeps);", "prediction": "allDeps);\n    ArrayNode arrayNode = depGraph.putArray(\"pkgs\");\n    arrayNode.add(rootNode);\n    return rootNode;\n  }\n\n  private ObjectNode createNode(Set<PackageRef> allDeps) {\n    ObjectNode rootNode = mapper.createObjectNode();\n    rootNode.put(\"name\", Constants.ROOT_PACKAGE);\n    rootNode.set(\"deps\", createDepsNode(allDeps));\n    return rootNode;\n  }\n\n  private ArrayNode createDepsNode(Set<PackageRef> allDeps) {\n    ArrayNode arrayNode = mapper.createArrayNode();\n    for (", "first_line_groundtruth": "tree.root(), allDeps);", "first_line_prediction": "allDeps);", "match": 0}
{"groundtruth": "(\"pkgs\", addPackages(depGraph, req.tree()));", "prediction": "(\"packages\", toSnykPackages(req.packages()));\n\n    return mapper.writeValueAsString(depGraph);\n  }\n\n  private JsonNode toSnykPackageManager(String pkgManager) {\n    if (pkgManager.equals(Constants.NPM)) {\n      return mapper.createObjectNode().put(\"name\", \"npm\");\n    } else if (pkgManager.equals(Constants.YARN)) {\n      return mapper.createObjectNode().put(\"name\", \"yarn\");\n    } else if (pkgManager.equals(Constants.GRADLE)) {\n      return mapper.createObjectNode().put(\"name\", \"gradle\");\n    }", "first_line_groundtruth": "(\"pkgs\", addPackages(depGraph, req.tree()));", "first_line_prediction": "(\"packages\", toSnykPackages(req.packages()));", "match": 0}
{"groundtruth": "().add(createPkg(tree.root()));", "prediction": "();\n    for (com.redhat.exhort.api.PackageRef pkg : allDeps) {\n      if (pkg.isRoot()) {\n        continue;\n      }\n      ObjectNode node = createNode(pkg, allDeps);\n      nodes.add(node);\n      pkgs.add(node);\n    }\n    depGraph.set(\"nodes\", nodes);\n    depGraph.set(\"pkgs\", pkgs);\n    return depGraph;\n  }\n\n  private ObjectNode createNode(PackageRef pkg, Set<com.redhat.exhort.api.PackageRef> allDeps) {\n    ObjectNode node = mapper", "first_line_groundtruth": "().add(createPkg(tree.root()));", "first_line_prediction": "();", "match": 0}
{"groundtruth": "c -> PackageRef.builder().purl(c.getPurl()).build())));", "prediction": " c -> new PackageRef(c.getPurl(), packageManager))));\n      }\n\n      if (bom.getComponents() != null) {\n        for (Component component : bom.getComponents()) {\n          if (component.getDependencies() != null) {\n            for (String dependency : component.getDependencies()) {\n              PackageRef dependencyPurl = new PackageRef(dependency, packageManager);\n              if (componentPurls.containsKey(dependency)) {\n                direct.computeIfAbsent(componentPurls.get(dependency), k -> DirectDependency.builder())\n                      .addDependency(dependencyPurl);\n              }\n            }", "first_line_groundtruth": "c -> PackageRef.builder().purl(c.getPurl()).build())));", "first_line_prediction": " c -> new PackageRef(c.getPurl(), packageManager))));", "match": 0}
{"groundtruth": "&& !req.tree().getAll().isEmpty();", "prediction": " && req.tree().has(\"dependencies\");\n  }\n\n  public List<Issue> buildIssues(GraphRequest req) {\n    List<Issue> issues = new ArrayList<>();\n    if (hasDependencies(req)) {\n      issues.addAll(buildIssues(req.tree().get(\"dependencies\")));\n    }\n    issues.addAll(buildIssues(req.tree().get(\"vulnerabilities\")));\n    return issues;\n  }\n\n  private List<Issue> buildIssues(JsonNode node) {\n    List<Issue> issues = new ArrayList<>();\n    if (node.isArray()) {\n      node.forEach(n -> issues.addAll(build", "first_line_groundtruth": "&& !req.tree().getAll().isEmpty();", "first_line_prediction": " && req.tree().has(\"dependencies\");", "match": 0}
{"groundtruth": "ref.name()).append(\"@\").append(ref.version()).toString();", "prediction": "Constants.SNYK_PACKAGE_PREFIX)\n         .append(ref.name())\n         .append(\":\")\n         .append(ref.version())\n         .toString();\n  }\n\n  private String toSnykPackageManager(String pkgManager) {\n    switch (pkgManager) {\n      case \"maven\":\n        return \"maven\";\n      case \"npm\":\n        return \"npm\";\n      case \"pip\":\n        return \"pip\";\n      case \"rubygems\":\n        return \"rubygems\";\n      case \"cargo\":\n        return \"cargo\";\n      case \"composer\":\n        return \"composer\";\n      case \"gradle\":\n        return \"gradle\";\n     ", "first_line_groundtruth": "ref.name()).append(\"@\").append(ref.version()).toString();", "first_line_prediction": "Constants.SNYK_PACKAGE_PREFIX)", "match": 0}
{"groundtruth": "PackageRef.builder().purl(pkgRef).build();", "prediction": " PackageRef.fromCoordinates(pkgRef);\n            JsonNode details = n.get(\"details\");\n            JsonNode vulnerabilities = details.get(\"vulnerabilities\");\n            if (vulnerabilities != null) {\n              List<Issue> issues = new ArrayList<>();\n              vulnerabilities.forEach(\n                  v -> {\n                    String id = v.get(\"id\").asText();\n                    String title = v.get(\"title\").asText();\n                    String description = v.get(\"description\").asText();\n                    String cvss = v.get(\"cvss\").asText();\n                    String severity = v.get(\"severity\").asText();\n                   ", "first_line_groundtruth": "PackageRef.builder().purl(pkgRef).build();", "first_line_prediction": " PackageRef.fromCoordinates(pkgRef);", "match": 0}
{"groundtruth": "\"/*?\" + stonecutter.currentActive() + \" {", "prediction": " \"/*?\");\n                editor.getSelectionModel().setSelection(selectionStart, selectionStart + 4);\n            });\n        }\n\n        private void clickNewElse(ActionEvent e) {\n            StackingPopupDispatcher.getInstance().closeActivePopup();\n            String selectionText = editor.getSelectionModel().getSelectedText();\n            if (selectionText == null)\n                return;\n            WriteCommandAction.runWriteCommandAction(project, null, null, () -> {\n                int selectionStart = editor.getSelectionModel().getSelectionStart(),\n                        selectionEnd = editor.getSelectionModel().getSelectionEnd(),\n                        startLine = editor.getDocument().getLineNumber(selectionStart", "first_line_groundtruth": "\"/*?\" + stonecutter.currentActive() + \" {", "first_line_prediction": " \"/*?\");", "match": 0}
{"groundtruth": ").missingTokens.isEmpty() ? \"\" : stonecutter.tokenCache().missingTokens.iterator().next());", "prediction": "project).get(0).identifier);\n        tReader.setText(stonecutter.tokenCache(project).get(0).reader);\n        tWriter.setText(stonecutter.tokenCache(project).get(0).writer);\n    }\n\n    private void initValidation() {\n        tIdentifier.addDocumentListener(e -> {\n            if (tIdentifier.getText().isEmpty()) {\n                highlighters.forEach(RangeHighlighter::dispose);\n                highlighters.clear();\n                return;\n            }\n\n            highlighters.forEach(RangeHighlighter::dispose);\n            highlighters.clear();\n\n            highlighters.add(", "first_line_groundtruth": ").missingTokens.isEmpty() ? \"\" : stonecutter.tokenCache().missingTokens.iterator().next());", "first_line_prediction": "project).get(0).identifier);", "match": 0}
{"groundtruth": "(ref.name(), issues);", "prediction": "(pkgRef, issues);\n            }\n          } catch (Exception e) {\n            LOGGER.error(\"Failed to parse OSS Index response for package {}\", pkgRef, e);\n          }\n        });\n    return reports;\n  }\n\n  private Issue toIssue(JsonNode vulnerability) {\n    String id = vulnerability.get(\"id\").asText();\n    String name = vulnerability.get(\"name\").asText();\n    String description = vulnerability.get(\"description\").asText();\n    String cvss = vulnerability.get(\"cvss\").asText();\n    String severity = SeverityUtils.getSeverity(cvss);\n    JsonNode references = vulnerability", "first_line_groundtruth": "(ref.name(), issues);", "first_line_prediction": "(pkgRef, issues);", "match": 0}
{"groundtruth": "add(ref.purl().getType());", "prediction": "add(ref.type());\n    }\n    for (PackageRef child : tree.children()) {\n      types.add(child.type());\n    }\n    Predicate<String> isType = type -> types.contains(type);\n    validate(tree, isType);\n  }\n\n  protected void validate(DependencyTree tree, Predicate<String> isType) {\n    List<PackageRef> children = tree.children();\n    for (PackageRef child : children) {\n      if (isType.test(child.type())) {\n        validate(child, isType);\n      } else {\n        throw new IllegalArgumentException(String.", "first_line_groundtruth": "add(ref.purl().getType());", "first_line_prediction": "add(ref.type());", "match": 0}
{"groundtruth": "(ref.name()).append(\"@\").append(ref.version()).toString();", "prediction": "(Constants.SNYK_PACKAGE_PREFIX)\n         .append(ref.name())\n         .append(\":\")\n         .append(ref.version())\n         .toString();\n  }\n\n  private String toSnykPackageManager(String pkgManager) {\n    switch (pkgManager) {\n      case \"maven\":\n        return \"maven\";\n      case \"npm\":\n        return \"npm\";\n      case \"pip\":\n        return \"pip\";\n      case \"rubygems\":\n        return \"rubygems\";\n      case \"cargo\":\n        return \"cargo\";\n      case \"gradle\":\n        return \"gradle\";\n      case \"docker\":\n        return \"docker\";", "first_line_groundtruth": "(ref.name()).append(\"@\").append(ref.version()).toString();", "first_line_prediction": "(Constants.SNYK_PACKAGE_PREFIX)", "match": 0}
{"groundtruth": "CharUtil.isBlankChar(str.charAt(i))) {", "prediction": "Character.isWhitespace(str.charAt(i))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public static boolean isNotBlank(CharSequence str) {\n        return !isBlank(str);\n    }\n\n    public static String trim(String str) {\n        return str == null ? null : str.trim();\n    }\n\n    public static String trimToNull(String str) {\n        return str == null ? null : str.trim();\n    }\n\n    public static String trimToEmpty(String str) {\n        return str == null ? \"\" : str.trim();\n    }\n\n    public static String", "first_line_groundtruth": "CharUtil.isBlankChar(str.charAt(i))) {", "first_line_prediction": "Character.isWhitespace(str.charAt(i))) {", "match": 0}
{"groundtruth": "stonecutter.tokenCache().tokensByVersion.get(cVersion.getSelectedItem()).values());", "prediction": "stonecutter.tokens().getTokens().values());\n            tTokens.setModel(new AbstractTableModel() {\n                @Override\n                public int getRowCount() {\n                    return loadedTokens.size();\n                }\n\n                @Override\n                public int getColumnCount() {\n                    return 2;\n                }\n\n                @Override\n                public Object getValueAt(int rowIndex, int columnIndex) {\n                    return loadedTokens.get(rowIndex).name;\n                }\n            });\n        }\n\n        private void versionChanged(ActionEvent e) {\n            WriteCommandAction.runWriteCommandAction(project, null, null, () -> {\n                stonecutter.currentActive", "first_line_groundtruth": "stonecutter.tokenCache().tokensByVersion.get(cVersion.getSelectedItem()).values());", "first_line_prediction": "stonecutter.tokens().getTokens().values());", "match": 0}
{"groundtruth": "(stonecutter.currentActive());", "prediction": "(stonecutter.getVersions().size() + \" versions\");\n        bTokens.setText(stonecutter.getTokens().size() + \" tokens\");\n\n        bVersions.setIcon(stonecutter.getVersions().size() > 0 ? ICON : null);\n        bTokens.setIcon(stonecutter.getTokens().size() > 0 ? ICON : null);\n\n        bVersions.setToolTipText(stonecutter.getVersions().size() > 0 ? null : \"No versions\");\n        bTokens.setToolTipText(stonecutter.getTokens().size() > 0 ? null : \"", "first_line_groundtruth": "(stonecutter.currentActive());", "first_line_prediction": "(stonecutter.getVersions().size() + \" versions\");", "match": 0}
{"groundtruth": "(moduleByRoot.get((setup.gradleProject().getChildProjects().get(version)).getProjectDir()), setup);", "prediction": "(setup.module(), setup);\n    }\n\n    private void exploreGradleProject(ExternalProject externalProject, Function<File, Module> moduleByRoot) {\n        if (externalProject.isVersioned()) {\n            for (DataNode<ProjectData> projectDataNode : externalProject.getLinkedExternalProject().getLinkedProjects()) {\n                ProjectData projectData = projectDataNode.getData();\n                if (projectData == null)\n                    continue;\n\n                for (DataNode<ExternalProject> linkedProjectDataNode : projectData.getLinkedExternalProjects()) {\n                    ExternalProject linkedProject = linkedProjectDataNode.getData();\n                    if (linkedProject ==", "first_line_groundtruth": "(moduleByRoot.get((setup.gradleProject().getChildProjects().get(version)).getProjectDir()), setup);", "first_line_prediction": "(setup.module(), setup);", "match": 0}
{"groundtruth": "conditionResult = stonecutter.testVersion(expression);", "prediction": " conditionResult = stonecutter.conditionEvaluator().evaluate(expression);\n\n                    if (conditionResult)\n                        conditions.push(true);\n                    else\n                        conditions.push(false);\n                }\n            }\n        }\n    }\n\n    private String read(String pattern, Reader input, StringBuilder output) throws IOException {\n        StringBuilder builder = new StringBuilder();\n        while (true) {\n            int c = input.read();\n            if (c == -1)\n                return null;\n            if (c == '\\n')\n                break;\n            if (c == '\\r')\n                continue;\n            if (c == '/') {\n                int next = input", "first_line_groundtruth": "conditionResult = stonecutter.testVersion(expression);", "first_line_prediction": " conditionResult = stonecutter.conditionEvaluator().evaluate(expression);", "match": 0}
{"groundtruth": "req.tree() != null && !req.tree().getAll().isEmpty();", "prediction": " req.getDependencies() != null && !req.getDependencies().isEmpty();\n  }\n\n  public String buildRequest(GraphRequest req) throws JsonProcessingException {\n    Map<String, Object> params = new HashMap<>();\n    params.put(\"coordinates\", req.getPurl());\n    params.put(\"includeDependencies\", hasDependencies(req));\n    params.put(\"includeVulnerabilities\", true);\n    params.put(\"includeVulnerablePaths\", true);\n    params.put(\"includeVulnerablePaths\", true);\n    params.put(\"includeVulnerablePaths\", true);\n    params.put(\"includeVulner", "first_line_groundtruth": "req.tree() != null && !req.tree().getAll().isEmpty();", "first_line_prediction": " req.getDependencies() != null && !req.getDependencies().isEmpty();", "match": 0}
{"groundtruth": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY);", "prediction": ".of(param));\n        this.delJob = RetryJob.wrap(DelJob.of(param));\n    }\n\n    public static MoveJob of(DualSideParam param) {\n        return new MoveJob(param);\n    }\n\n    @Override\n    public void run() {\n        log.info(\"MoveJob start\");\n        copyJob.run();\n        rollBackJob.run();\n        delJob.run();\n        log.info(\"MoveJob end\");\n    }", "first_line_groundtruth": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY);", "first_line_prediction": ".of(param));", "match": 0}
{"groundtruth": "PackageRef ref = tree.root();", "prediction": " Set<PackageRef> packages = new HashSet<>();\n     Predicate<PackageRef> isNotAlreadyAdded = p -> !packages.add(p);\n     tree.getPackages().forEach(isNotAlreadyAdded);\n     tree.getDependencies().forEach(d -> {\n       d.getPackages().forEach(isNotAlreadyAdded);\n       d.getDependencies().forEach(d2 -> {\n         d2.getPackages().forEach(isNotAlreadyAdded);\n         d2.getDependencies().forEach(d3 -> {\n           d3.getPackages().forEach(isNotAlreadyAdded);\n           d3.getDependencies().forEach(d4 ->", "first_line_groundtruth": "PackageRef ref = tree.root();", "first_line_prediction": " Set<PackageRef> packages = new HashSet<>();", "match": 0}
{"groundtruth": "findExternalProject(entry.getValue().gradleProject(), entry.getKey()).keySet()) {", "prediction": "getSourceSetNames(entry.getKey()))\n                if (entry.getValue().sourceSets().contains(sourceSetName))\n                    byController.put(entry.getKey(), entry.getValue());\n    }\n\n    private void exploreGradleProject(ExternalProject externalProject, Function<File, Module> moduleByRoot) {\n        if (externalProject.isRoot())\n            return;\n\n        File projectDir = externalProject.getProjectDir();\n        File buildFile = new File(projectDir, \"build.gradle\");\n        if (!buildFile.exists())\n            return;\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(buildFile, Standard", "first_line_groundtruth": "findExternalProject(entry.getValue().gradleProject(), entry.getKey()).keySet()) {", "first_line_prediction": "getSourceSetNames(entry.getKey()))", "match": 0}
{"groundtruth": "job.setJobIndex(listIndexHolder.getAndIncrement());", "prediction": " {\n                if (job instanceof RetryJob) {\n                    RetryJob retryJob = (RetryJob) job;\n                    retryJob.setRetryCount(mirrorParam.getRetryCount());\n                    retryJob.setRetryInterval(mirrorParam.getRetryInterval());\n                }\n                if (job instanceof CloneJob) {\n                    CloneJob cloneJob = (CloneJob) job;\n                    cloneJob.setPath(path);\n                    cloneJob.setFilePredicate(filePredicate);\n                }\n                if (job instanceof MkdirJob) {\n                    MkdirJob mkdirJob = (MkdirJob) job;\n                    mkdirJob.set", "first_line_groundtruth": "job.setJobIndex(listIndexHolder.getAndIncrement());", "first_line_prediction": " {", "match": 0}
{"groundtruth": "(StrUtil.isBlank(str)) {", "prediction": " (str == null || str.length() == 0) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static boolean isInteger(CharSequence str) {\n        if (str == null || str.length() == 0) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.", "first_line_groundtruth": "(StrUtil.isBlank(str)) {", "first_line_prediction": " (str == null || str.length() == 0) {", "match": 0}
{"groundtruth": "filePipe.close();", "prediction": " System.out.println(\"\u6267\u884c\u5b8c\u6bd5\");\n        }\n    }", "first_line_groundtruth": "filePipe.close();", "first_line_prediction": " System.out.println(\"\u6267\u884c\u5b8c\u6bd5\");", "match": 0}
{"groundtruth": "deleteJob.run();", "prediction": " try (InputStream in = input.read(path)) {\n             output.write(path, in);\n         } catch (IOException e) {\n             throw new RuntimeException(e);\n         } finally {\n             deleteJob.run();\n         }\n    }", "first_line_groundtruth": "deleteJob.run();", "first_line_prediction": " try (InputStream in = input.read(path)) {", "match": 0}
{"groundtruth": "deleteJob = RetryJob.fastFailWrap(DelJob.of(param.outputSideParam()));", "prediction": "deleteJob = param.getDeleteJob();\n    }\n\n    public static IJob create(DualSideParam param) {\n        return new CopyJob(param);\n    }\n\n    @Override\n    public void run() {\n        try (InputStream inputStream = input.read(path)) {\n            output.write(path, inputStream);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (deleteJob != null) {\n                deleteJob.run();\n            }\n        }\n    }", "first_line_groundtruth": "deleteJob = RetryJob.fastFailWrap(DelJob.of(param.outputSideParam()));", "first_line_prediction": "deleteJob = param.getDeleteJob();", "match": 0}
{"groundtruth": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_FULL).equals(MIRROR_MODE_APPEND);", "prediction": " = param.isAppend();\n        this.cloneResultStorePath = param.getCloneResultStorePath();\n    }\n\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    @Override\n    public void run() {\n        try {\n            if (isAppend) {\n                cloneAppend();\n            } else {\n                cloneFull();\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private void cloneFull() throws IOException {\n        if (Files.notExists(Paths.get(path))) {\n            throw new RuntimeException(\"path not exists\");\n        }\n        if (", "first_line_groundtruth": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_FULL).equals(MIRROR_MODE_APPEND);", "first_line_prediction": " = param.isAppend();", "match": 0}
{"groundtruth": "stonecutter.versions())\n                versionModel.add(version);", "prediction": " stonecutter.currentActive().getVersions())\n                versionModel.addElement(version);\n            cVersion.setModel(versionModel);\n            cVersion.addActionListener(e -> {\n                if (cVersion.getSelectedItem() == null)\n                    return;\n                bTokens.setEnabled(true);\n                bNewToken.setEnabled(true);\n                bCreateFlag.setEnabled(true);\n                bTokens.setText(\"Tokens for \" + cVersion.getSelectedItem());\n                tTokens.setModel(new TokensTableModel(stonecutter.currentActive().getTokens(cVersion.getSelectedItem())));\n            });\n\n            bNewToken.addActionListener(", "first_line_groundtruth": "stonecutter.versions())", "first_line_prediction": " stonecutter.currentActive().getVersions())", "match": 0}
{"groundtruth": "return ActivityJDBC.instance().update(ctx.body().asPojo(Activity.class).setId(id));", "prediction": " return ActivityJDBC.instance().update(found.getId(), ctx.body().asJsonObject().mapTo(Activity.class));\n        }).onComplete(ar -> {\n            if(ar.failed()) ctx.fail(ar.cause());\n            ctx.response().end();\n        });\n    }\n\n    private static void apiDelete(RoutingContext ctx) {\n        Long id = Long.valueOf(ctx.request().getParam(\"id\"));\n        ActivityJDBC.instance().getById(id).compose(found -> {\n            if(found == null || found.getIdUserCreate() != ctx.user().principal().getLong(\"sub\").longValue())", "first_line_groundtruth": "return ActivityJDBC.instance().update(ctx.body().asPojo(Activity.class).setId(id));", "first_line_prediction": " return ActivityJDBC.instance().update(found.getId(), ctx.body().asJsonObject().mapTo(Activity.class));", "match": 0}
{"groundtruth": "(request.getLogin(), request.getPassword()).onComplete(ar -> {", "prediction": "(request.getUsername(), request.getPassword(), res -> {\n            if (res.succeeded()) {\n                ctx.response().putHeader(HttpHeaders.CONTENT_TYPE, \"application/json\").end(res.result().toJson().encodePrettily());\n            } else {\n                ctx.response().setStatusCode(401).end();\n            }\n        });\n    }\n\n    private static void apiChangePassword(RoutingContext ctx) {\n        RequestChangePassword request = ctx.body().asPojo(RequestChangePassword.class);\n        UserJDBC.instance().changePassword(request.getUsername(), request.getPassword(), res", "first_line_groundtruth": "(request.getLogin(), request.getPassword()).onComplete(ar -> {", "first_line_prediction": "(request.getUsername(), request.getPassword(), res -> {", "match": 0}
{"groundtruth": "ActivityJDBC.instance().getById(id).compose(found -> {", "prediction": " ActivityJDBC.instance().update(id, ctx.body().asJsonObject().mapTo(Activity.class)).onComplete(ar -> {\n            if(ar.failed()) ctx.fail(ar.cause());\n            ctx.response().end();\n         });\n    }\n\n    private static void apiDelete(RoutingContext ctx) {\n        Long id = Long.valueOf(ctx.request().getParam(\"id\"));\n        ActivityJDBC.instance().delete(id).onComplete(ar -> {\n            if(ar.failed()) ctx.fail(ar.cause());\n            ctx.response().end();\n         });\n    }\n\n    public static void register", "first_line_groundtruth": "ActivityJDBC.instance().getById(id).compose(found -> {", "first_line_prediction": " ActivityJDBC.instance().update(id, ctx.body().asJsonObject().mapTo(Activity.class)).onComplete(ar -> {", "match": 0}
{"groundtruth": "UserJDBC.instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {", "prediction": " auth.authenticate(request.getUsername(), request.getPassword(), res -> {\n            if (res.succeeded()) {\n                ctx.response().putHeader(HttpHeaders.CONTENT_TYPE, \"application/json\").end(res.result().principal().toJson().encodePrettily());\n            } else {\n                ctx.fail(res.cause());\n            }\n        });\n    }\n\n    private static void apiChangePassword(RoutingContext ctx) {\n        RequestChangePassword request = ctx.body().asPojo(RequestChangePassword.class);\n        UserJDBC.changePassword(request.getUsername(), request.getPassword(), res -> {", "first_line_groundtruth": "UserJDBC.instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {", "first_line_prediction": " auth.authenticate(request.getUsername(), request.getPassword(), res -> {", "match": 0}
{"groundtruth": "task.getOutputDir().set(task.getInputDir().get());", "prediction": " task.getOutputDir().set(afterEvaluate.file(\"./build/stonecutter/\" + versionData.version()));\n                task.setChiseled(afterEvaluate.getTasks().named(\"chiseledStonecutter\"));\n                task.setChiseledInputDir(afterEvaluate.file(\"./build/stonecutter/\" + versionData.version() + \"/chiseled\"));\n                task.setChiseledOutputDir(afterEvaluate.file(\"./build/stonecutter/\" + versionData.version() + \"/chiseled/chiseled\"));\n                task.setChiseledVersion(versionData", "first_line_groundtruth": "task.getOutputDir().set(task.getInputDir().get());", "first_line_prediction": " task.getOutputDir().set(afterEvaluate.file(\"./build/stonecutter/\" + versionData.version()));", "match": 0}
{"groundtruth": "instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {", "prediction": "login(request.getUsername(), request.getPassword(), ctx.vertx(), res -> {\n            if (res.succeeded()) {\n                ctx.response().putHeader(HttpHeaders.CONTENT_TYPE, \"application/json\").end(res.result().toJson().encode());\n            } else {\n                ctx.fail(res.cause());\n            }\n        });\n    }\n\n    private static void apiChangePassword(RoutingContext ctx) {\n        RequestChangePassword request = ctx.body().asPojo(RequestChangePassword.class);\n        UserJDBC.changePassword(request.getUsername(), request.getPassword(), ctx.vertx(), res -> {", "first_line_groundtruth": "instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {", "first_line_prediction": "login(request.getUsername(), request.getPassword(), ctx.vertx(), res -> {", "match": 0}
{"groundtruth": "task.getInputDir().set(afterEvaluate.file(\"./src\"));", "prediction": " task.dependsOn(versionProject.getTasks().named(\"setupStonecutterBuild\"));\n            }\n        });\n    }\n\n    public void setupChiseledStonecutterBuild(TaskProvider<StonecutterTask> task) {\n        task.configure(task1 -> {\n            task1.setGroup(\"stonecutter\");\n            task1.setDescription(\"Sets up the chiseled stonecutter build\");\n            task1.setFromVersion(setup.current());\n            task1.setToVersion(setup.current());\n            task1.dependsOn(setup.current() + \":setupStonecutterBuild\");", "first_line_groundtruth": "task.getInputDir().set(afterEvaluate.file(\"./src\"));", "first_line_prediction": " task.dependsOn(versionProject.getTasks().named(\"setupStonecutterBuild\"));", "match": 0}
{"groundtruth": ".getOutputDir().set(task.getInputDir().get());", "prediction": ".getOutputDir().set(afterEvaluate.file(\"./build/stonecutter\"));\n                task.setChiseled(afterEvaluate.getTasks().named(\"chiseledStonecutter\"));\n                task.setChiseledInputDir(afterEvaluate.file(\"./build/stonecutter/chiseled\"));\n                task.setChiseledOutputDir(afterEvaluate.file(\"./build/stonecutter/chiseled/chiseled\"));\n                task.setChiseledVersion(versionData.version());\n                task.setChiseledVersionData(versionData);\n                task.setChiseled", "first_line_groundtruth": ".getOutputDir().set(task.getInputDir().get());", "first_line_prediction": ".getOutputDir().set(afterEvaluate.file(\"./build/stonecutter\"));", "match": 0}
{"groundtruth": "switch (matchPlayer.getTeam()) {", "prediction": " if (matchPlayer.getTeam() == MatchTeam.RED) {\n                 redPlayers.add(matchPlayer);\n             } else {\n                 bluePlayers.add(matchPlayer);\n             }\n        }\n\n        red = new MatchTeam(redPlayers);\n        blue = new MatchTeam(bluePlayers);\n\n        rounds = new LinkedList<>();\n\n        return this;\n    }\n\n    public Match fetchData() throws IOException {\n        if (fetched) {\n            return this;\n        }\n\n        JsonObject object = valorantAPI.getMatch(matchId);\n\n        return fetchData(object);\n    }\n\n    public MatchPlayer getPlayer(String playerId", "first_line_groundtruth": "switch (matchPlayer.getTeam()) {", "first_line_prediction": " if (matchPlayer.getTeam() == MatchTeam.RED) {", "match": 0}
{"groundtruth": "(valorantAPI.sendRestRequest(\"/v2/match/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));", "prediction": "(valorantAPI.getMatch(matchId));\n    }\n\n    public String getMatchId() {\n        return matchId;\n    }\n\n    public Map getMap() {\n        return map;\n    }\n\n    public String getGameVersion() {\n        return gameVersion;\n    }\n\n    public long getGameLength() {\n        return gameLength;\n    }\n\n    public String getGameStart() {\n        return gameStart;\n    }\n\n    public int getRoundsPlayed() {\n        return roundsPlayed;\n    }\n\n    public GameMode getGameMode() {\n        return gameMode;\n    }\n\n    public String getSeasonId() {", "first_line_groundtruth": "(valorantAPI.sendRestRequest(\"/v2/match/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));", "first_line_prediction": "(valorantAPI.getMatch(matchId));", "match": 0}
{"groundtruth": "JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject().getAsJsonObject(\"data\");", "prediction": " return new ServerStatus(this).fetchData(sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject());\n    }\n\n    public List<StatusEntry> getServerStatus(Region region, Language language) throws IOException {\n        return new ServerStatus(this).fetchData(sendRestRequest(\"/v1/status/\" + region.getQuery() + \"?language=\" + language.getQuery()).getAsJsonObject());\n    }\n\n    public List<StatusEntry> getServerStatus(Region region, Language language, String locale) throws IOException {\n        return new ServerStatus(this).fetchData(sendRestRequest(\"/v1", "first_line_groundtruth": "JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject().getAsJsonObject(\"data\");", "first_line_prediction": " return new ServerStatus(this).fetchData(sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject());", "match": 0}
{"groundtruth": "+ region.getQuery() + \"?name=\" + data[0] + \"&tag=\" + data[1]).getAsJsonArray();", "prediction": " + region.getQuery() + \"/\" + data[0] + \"/\" + data[1]).getAsJsonArray();\n        }\n\n        List<LeaderboardPlayer> leaderboard = new LinkedList<>();\n\n        for(JsonElement element : leaderboardData) {\n            leaderboard.add(new LeaderboardPlayer(element.getAsJsonObject()));\n        }\n\n        return leaderboard;\n    }\n\n    public List<StatusEntry> getStatus() throws IOException {\n        JsonArray statusData = sendRestRequest(\"/v1/status\").getAsJsonArray();\n\n        List<StatusEntry> status = new LinkedList<>();\n\n        for(JsonElement element : statusData) {\n            status", "first_line_groundtruth": "+ region.getQuery() + \"?name=\" + data[0] + \"&tag=\" + data[1]).getAsJsonArray();", "first_line_prediction": " + region.getQuery() + \"/\" + data[0] + \"/\" + data[1]).getAsJsonArray();", "match": 0}
{"groundtruth": "commands.getOrderById(orderId),\n                HttpStatus.OK);", "prediction": " commands.getOrder(orderId),\n                 HttpStatus.OK);\n    }\n\n    @PutMapping(\"{orderId}\")\n    public ResponseEntity<Map<String, String>> updateOrder(@PathVariable Long orderId, @RequestBody Map<String, String> body){\n        Map<String, String> response = new HashMap<>();\n        String result = commands.updateOrder(orderId, body.get(\"status\"))\n                .toString();\n        response.put(\"operationResult\", result);\n        return new ResponseEntity<>(response,HttpStatus.OK);\n    }", "first_line_groundtruth": "commands.getOrderById(orderId),", "first_line_prediction": " commands.getOrder(orderId),", "match": 0}
{"groundtruth": "= commands.createRequest(body.get(\"bookId\"))\n                .toString();", "prediction": " = commands.createRequest(body);\n        response.put(\"result\", result);\n        return new ResponseEntity<>(response, HttpStatus.OK);\n    }", "first_line_groundtruth": "= commands.createRequest(body.get(\"bookId\"))", "first_line_prediction": " = commands.createRequest(body);", "match": 0}
{"groundtruth": "> booksToOrder = bookService.getBooksByIds(ids);", "prediction": "> books = bookService.getBooksByIds(ids);\n        if (books.isEmpty()) {\n            return ResultOfOperation.CreateOrder.WRONG_BOOK_ID;\n        }\n        Order order = entityFactory.buildOrder(books);\n        orderService.saveOrder(order);\n        return ResultOfOperation.CreateOrder.ORDER_CREATED;\n    }\n\n    /**\n     * return list of orders, sorted by param orderSort\n     * if no correct sort values entered, return list sorted by id\n     *\n     * @param orderSort can be name, price, status or id and should be got from user\n     * @", "first_line_groundtruth": "> booksToOrder = bookService.getBooksByIds(ids);", "first_line_prediction": "> books = bookService.getBooksByIds(ids);", "match": 0}
{"groundtruth": "<>(commands.getNumberOfRequestsOnBook(bookId),\n                HttpStatus.OK);", "prediction": "<>(commands.getNumberOfRequestsOnBook(bookId),\n                HttpStatus.OK);\n    }", "first_line_groundtruth": "<>(commands.getNumberOfRequestsOnBook(bookId),", "first_line_prediction": "<>(commands.getNumberOfRequestsOnBook(bookId),", "match": 1}
{"groundtruth": "List<jenaTripleParser> result = serviceJena.getTriples(filePath, url, ontologyContentEncoded64) ;", "prediction": "\n        \t\t\t// call the service\n        \t\t\tList<String> triples = serviceJena.rdfToTriples(filePath, url, ontologyContentEncoded64);\n        \t\t\t\n        \t\t\t// return the result\n        \t\t\treturn ResponseEntity.ok(triples);\n        \t\t} catch (Exception e) {\n        \t\t\treturn ResponseEntity.badRequest().body(e.getMessage());\n        \t\t}\n    }\n    \n    private int countParams(String ontologyContentEncoded64, String filePath, String url) {\n        int count = 0;\n        if (ontologyContentEncoded64 != null && !ontologyContentEncoded64", "first_line_groundtruth": "List<jenaTripleParser> result = serviceJena.getTriples(filePath, url, ontologyContentEncoded64) ;", "first_line_prediction": "", "match": 0}
{"groundtruth": "dependency.getVersion(),\n                dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );", "prediction": " dependency.getVersion(),\n                dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope());\n    }\n\n    private static BiConsumer<String, String> nodeChanger(PomTransformer.NodeGavtcs nodeGavtcs) {\n        return (key, value) -> {\n            if (nodeGavtcs.hasProperty(key)) {\n                nodeGavtcs.setProperty(key, value);\n            } else {\n                nodeGavtcs.addProperty(key, value);\n            }\n        };\n    }", "first_line_groundtruth": "dependency.getVersion(),", "first_line_prediction": " dependency.getVersion(),", "match": 0}
{"groundtruth": "dependency.getClassifier(),\n                dependency.getScope()\n        );", "prediction": " dependency.getClassifier(),\n                dependency.getScope());\n    }\n\n    private static BiConsumer<String, String> nodeChanger(PomTransformer.NodeGavtcs nodeGavtcs) {\n        return (key, value) -> {\n            if (nodeGavtcs.getAttributes().containsKey(key)) {\n                nodeGavtcs.getAttributes().put(key, value);\n            } else {\n                nodeGavtcs.getAttributes().put(key, value);\n            }\n        };\n    }", "first_line_groundtruth": "dependency.getClassifier(),", "first_line_prediction": " dependency.getClassifier(),", "match": 0}
{"groundtruth": "pomFile).execute(() -> dependencyCommand().accept(pomFile, dependency));", "prediction": "pomFile, dependency);\n\n            getLog().info(String.format(\"dependency added to the \\\"%s\\\" file\", pomFile));\n        } catch (Exception e) {\n            getLog().error(String.format(\"error adding the dependency: %s to the \\\"%s\\\" file\", dependency, pomFile), e);\n            rollback(pomFile);\n            throw new MojoExecutionException(e.getMessage(), e);\n        }\n    }\n\n    private void change(Path pomFile, Dependency dependency) {\n        addDependencyCommand.accept(pomFile, dependency);\n    }\n\n    private void rollback(Path pomFile) {\n        rollback", "first_line_groundtruth": "pomFile).execute(() -> dependencyCommand().accept(pomFile, dependency));", "first_line_prediction": "pomFile, dependency);", "match": 0}
{"groundtruth": "dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );", "prediction": " dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope());\n    }\n\n    private static BiConsumer<String, String> nodeChanger(PomTransformer.NodeGavtcs nodeGavtcs) {\n        return (key, value) -> {\n            if (nodeGavtcs.hasProperty(key)) {\n                nodeGavtcs.setProperty(key, value);\n            } else {\n                nodeGavtcs.addProperty(key, value);\n            }\n        };\n    }", "first_line_groundtruth": "dependency.getType(),", "first_line_prediction": " dependency.getType(),", "match": 0}
{"groundtruth": "SWRLService.SWRLruleReclassification(filePath, url,reqBodies,reqHead);", "prediction": " SWRLService.execRule(filePath, url, ontologyContentDecoded64, reqBodies, reqHead);\n            \t} else {\n            \t\tresult =  SWRLService.execRule(reqBodies, reqHead);\n            \t}\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n    }\n    \n    //Post API For Complex\n    @PostMapping(\"/alternative_exec_rule_complex\")\n    public ResponseEntity<?> postReclassificationComplex(@RequestBody(required = false) ruleSWRLInputComplex request) {", "first_line_groundtruth": "SWRLService.SWRLruleReclassification(filePath, url,reqBodies,reqHead);", "first_line_prediction": " SWRLService.execRule(filePath, url, ontologyContentDecoded64, reqBodies, reqHead);", "match": 0}
{"groundtruth": "equivalentClass = request.getEquivalentClass();", "prediction": " isAll = request.getIsAll();\n        String filePath = request.getFilePath();\n        String url = request.getUrl();\n        String ontologyContentEncoded64 = request.getOntologyContentEncoded64();\n    \tbyte[] ontologyContentDecoded64Bytes = null;\n    \tString ontologyContentDecoded64 = null;\n    \tif (ontologyContentEncoded64 != null && !ontologyContentEncoded64.isEmpty()) {\n    \t ontologyContentDecoded64Bytes = Base64.getMimeDecoder().decode(ontologyContentEncoded64);\n    \t ontologyContentDecoded64 = new String(ontologyContentDecoded64Bytes", "first_line_groundtruth": "equivalentClass = request.getEquivalentClass();", "first_line_prediction": " isAll = request.getIsAll();", "match": 0}
{"groundtruth": "result = SWRLService.SWRLruleReclassificationB64(ontologyContentDecoded64,reqBodies,reqHead);", "prediction": "\tresult = SWRLService.SWRLruleReclassification(ontologyContentDecoded64, reqBodies,reqHead);\n            \t}\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n    }\n    //Post API For Complex\n    @PostMapping(\"/alternative_exec_rule_complex\")\n    public ResponseEntity<?> postReclassificationComplex(@RequestBody(required = false) ruleSWRLInputComplex request) { \n    \t// This Class works only for Classess\n        String filePath = request.getFilePath();\n        String", "first_line_groundtruth": "result = SWRLService.SWRLruleReclassificationB64(ontologyContentDecoded64,reqBodies,reqHead);", "first_line_prediction": "\tresult = SWRLService.SWRLruleReclassification(ontologyContentDecoded64, reqBodies,reqHead);", "match": 0}
{"groundtruth": "DisjointClasses  = request.getDisjointClasses();", "prediction": " DisjointClasses = request.getDisjointClasses();\n        Boolean differentIndividual = request.getDifferentIndividual();\n        Boolean HasValue = request.getHasValue();\n        Boolean InverseObjectProperties = request.getInverseObjectProperties();\n        Boolean AllValuesFrom = request.getAllValuesFrom();\n        Boolean SomeValuesFrom = request.getSomeValuesFrom();\n        Boolean DomainAndRange = request.getDomainAndRange();\n        Boolean ClassAssertion = request.getClassAssertion();\n        Boolean SubClass = request.getSubClass();\n        Boolean DataPropertyCharacteristic = request.getDataPropertyCharacteristic();\n        Boolean EquivalentDataProperty = request.getEquivalentData", "first_line_groundtruth": "DisjointClasses  = request.getDisjointClasses();", "first_line_prediction": " DisjointClasses = request.getDisjointClasses();", "match": 0}
{"groundtruth": "= request.getParams();", "prediction": " = request.getReqParametres();\n        String[] reqParametresValues = request.getReqParametresValues();\n        String[] reqParametresTypes = request.getReqParametresTypes();\n        String[] reqParametresValuesEncoded64 = request.getReqParametresValuesEncoded64();\n        String[] reqParametresTypesEncoded64 = request.getReqParametresTypesEncoded64();\n        String[] reqParametresValuesEncoded64Encoded64 = request.getReqParametresValuesEncoded64Encoded64();\n        String[] reqParametresTypesEncoded64Encoded64 = request.", "first_line_groundtruth": "= request.getParams();", "first_line_prediction": " = request.getReqParametres();", "match": 0}
{"groundtruth": "= reasonerService.getUnsatisfaisableClasses(filePath, url);", "prediction": " = reasonerService.getUnsatisfaisableClasses(filePath, url);\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n    }\n\n    @GetMapping(\"/unsatisfiable/classes\")\n    public ResponseEntity<?> getUnsatisfaisableClasses(\n            @RequestParam(required = false) String filePath,\n            @RequestParam(required = false) String url,\n            @RequestParam(required = false) String classes) { \n    \tint parametersCount = countNumberOfParametres( filePath, url);\n        if (parametersCount ==", "first_line_groundtruth": "= reasonerService.getUnsatisfaisableClasses(filePath, url);", "first_line_prediction": " = reasonerService.getUnsatisfaisableClasses(filePath, url);", "match": 0}
{"groundtruth": "= reasonerService.postConsistency(filePath, url);", "prediction": " = reasonerService.getConsistency(filePath, url, ontologyContentDecoded64);\n            \t} else {\n            \t\tresult = reasonerService.getConsistency(ontologyContentDecoded64);\n            \t}\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n        \n     }\n     //Post API For STRING\n     @PostMapping(\"/inference\")\n     public ResponseEntity<?> postInference(@RequestBody(required = false) reasonerInput request) { \n         // extract input parameters from the request object\n         String filePath = request.getFilePath();\n         String", "first_line_groundtruth": "= reasonerService.postConsistency(filePath, url);", "first_line_prediction": " = reasonerService.getConsistency(filePath, url, ontologyContentDecoded64);", "match": 0}
{"groundtruth": "reasonerService.postConsistencyContent(ontologyContentDecoded64);", "prediction": " reasonerService.postConsistency(ontologyContentDecoded64);\n            \t}\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n        \n     }\n     //Post API For STRING\n     @PostMapping(\"/inference\")\n     public ResponseEntity<?> postInference(@RequestBody(required = false) reasonerInput request) { \n         // extract input parameters from the request object\n         String filePath = request.getFilePath();\n         String url = request.getUrl();\n         String ontologyContentEncoded64 = request.getOntologyContentEncoded64();\n         byte[] ontology", "first_line_groundtruth": "reasonerService.postConsistencyContent(ontologyContentDecoded64);", "first_line_prediction": " reasonerService.postConsistency(ontologyContentDecoded64);", "match": 0}
{"groundtruth": "reasonerService.postInferences(filePath, url,valuesList);", "prediction": " reasonerService.postInference(filePath, url, valuesList);\n                 // Here if we use filePath or Url\n            \t }else {\n            \tresult = reasonerService.postInferenceContent(ontologyContentDecoded64, valuesList);\n            \t // Here if we use the Encoded Content\n            \t }\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n         }\n     //Post API For STRING\n     @PostMapping(\"/unsatisfaisableClasses\")\n     public ResponseEntity<?> postUnsatisfaisableClasses(@RequestBody(required = false", "first_line_groundtruth": "reasonerService.postInferences(filePath, url,valuesList);", "first_line_prediction": " reasonerService.postInference(filePath, url, valuesList);", "match": 0}
{"groundtruth": "result = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);", "prediction": "\tresult = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);\n            \t}\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n         }\n     //Post API For STRING\n     @PostMapping(\"/unsatisfaisableClasses\")\n     public ResponseEntity<?> postUnsatisfaisableClasses(@RequestBody(required = false) reasonerInput request) { \n         // extract input parameters from the request object\n         String filePath = request.getFilePath();\n         String url = request.getUrl();\n         String ontology", "first_line_groundtruth": "result = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);", "first_line_prediction": "\tresult = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);", "match": 0}
{"groundtruth": "result = reasonerService.getInferences(filePath, url);", "prediction": " result = reasonerService.getInference(filePath, url);\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n            \n        \t\n        \n     }\n     @GetMapping(\"/reasoner\")\n    public ResponseEntity<?> getReasoner(@RequestParam(required = false) String filePath,\n             @RequestParam(required = false) String url) {\n        \n    \t\tint parametersCount = countNumberOfParametres( filePath, url);\n        \tif (parametersCount == 0) {\n            \treturn ResponseEntity.badRequest().body(\"At least one of params should", "first_line_groundtruth": "result = reasonerService.getInferences(filePath, url);", "first_line_prediction": " result = reasonerService.getInference(filePath, url);", "match": 0}
{"groundtruth": "= reasonerService.postUnsatisfaisableClasses(filePath, url);", "prediction": " = reasonerService.postUnsatisfiable(filePath, url);\n                 // Here if we use filePath or Url\n            \t }else {\n            \tresult = reasonerService.postUnsatisfiableContent(ontologyContentDecoded64);\n            \t // Here if we use the Encoded Content\n            \t }\n                return ResponseEntity.ok(result);\n            } catch (Exception e) {\n                return ResponseEntity.badRequest().body(e.getMessage());\n            }\n        \n    \t}\n     //Post API For STRING\n     @PostMapping(\"/satisfiable\")\n     public ResponseEntity<?> postSatisfiable(@RequestBody(required = false) reasonerInput request) { \n        ", "first_line_groundtruth": "= reasonerService.postUnsatisfaisableClasses(filePath, url);", "first_line_prediction": " = reasonerService.postUnsatisfiable(filePath, url);", "match": 0}
{"groundtruth": "callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);", "prediction": " callbackConfigCall = RestAdapter.createApi().getJsonFileId(url);\n            }\n        } else {\n            callbackConfigCall = RestAdapter.createApi().getJsonFileId(url);\n        }\n        callbackConfigCall.enqueue(new Callback<CallbackConfig>() {\n            @Override\n            public void onResponse(@NonNull Call<CallbackConfig> call, @NonNull Response<CallbackConfig> response) {\n                if (response.isSuccessful()) {\n                    if (response.body() != null) {\n                        if (response.body().getAdNetwork() != null) {\n                            Constant.AD_NETWORK = response.", "first_line_groundtruth": "callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);", "first_line_prediction": " callbackConfigCall = RestAdapter.createApi().getJsonFileId(url);", "match": 0}
{"groundtruth": "RestAdapter.createApi().getDriveJsonFileId(url);", "prediction": " RestAdapter.createApi().getJsonUrl(url);\n        }\n        callbackConfigCall.enqueue(new Callback<CallbackConfig>() {\n            @Override\n            public void onResponse(@NonNull Call<CallbackConfig> call, @NonNull Response<CallbackConfig> response) {\n                if (response.isSuccessful()) {\n                    if (response.body() != null) {\n                        if (response.body().getAdNetwork() != null) {\n                            Constant.AD_NETWORK = response.body().getAdNetwork();\n                        }\n                        if (response.body().getAdStatus() != null) {\n                            Constant.AD_STATUS", "first_line_groundtruth": "RestAdapter.createApi().getDriveJsonFileId(url);", "first_line_prediction": " RestAdapter.createApi().getJsonUrl(url);", "match": 0}
{"groundtruth": "()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);", "prediction": "()).getAdMobAppOpenAd().loadAd(Constant.ADMOB_APP_OPEN_AD_ID);\n                            }\n                            break;\n                        case APPLOVIN:\n                            if (!Constant.APPLOVIN_APP_OPEN_AD_ID.equals(\"0\")) {\n                                ((MyApplication) getApplication()).getAppLovinAppOpenAd().loadAd(Constant.APPLOVIN_APP_OPEN_AD_ID);\n                            }\n                            break;\n                        case WORTISE:\n                            if (!Constant.WORTISE_APP_OPEN_AD_ID.equals(\"0\")) {", "first_line_groundtruth": "()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);", "first_line_prediction": "()).getAdMobAppOpenAd().loadAd(Constant.ADMOB_APP_OPEN_AD_ID);", "match": 0}
{"groundtruth": "displayData(sharedPref.getPostList());", "prediction": " /*\n        * 1. get data from database\n        * 2. set data to adapter\n        * */\n        List<Post> postList = sharedPref.getPostList();\n        adapterPost.setPostList(postList);\n    }\n\n    private void loadBannerAd() {\n        bannerAd = new BannerAd.Builder(this, Constant.BANNER_AD_ID);\n        bannerAd.setBannerAdListener(new BannerAd.BannerAdListener() {\n            @Override\n            public void onAdLoaded(BannerAd bannerAd) {\n                Toast.makeText(SecondActivity.this, \"Banner Ad Loaded\", Toast", "first_line_groundtruth": "displayData(sharedPref.getPostList());", "first_line_prediction": " /*", "match": 0}
{"groundtruth": "= RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);", "prediction": " = RestAdapter.getAPI().getCallbackConfig(googleDriveFileId);\n            } else {\n                callbackConfigCall  = RestAdapter.getAPI().getCallbackConfig(url);\n            }\n        } else {\n            callbackConfigCall  = RestAdapter.getAPI().getCallbackConfig(url);\n        }\n        callbackConfigCall.enqueue(new Callback<CallbackConfig>() {\n            @Override\n            public void onResponse(@NonNull Call<CallbackConfig> call, @NonNull Response<CallbackConfig> response) {\n                if (response.isSuccessful()) {\n                    if (response.body() != null) {\n                        if (", "first_line_groundtruth": "= RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);", "first_line_prediction": " = RestAdapter.getAPI().getCallbackConfig(googleDriveFileId);", "match": 0}
{"groundtruth": "adapterPost.setOnItemClickListener((view, obj, position) -> {", "prediction": " recyclerView.setVisibility(View.VISIBLE);\n        } else {\n            recyclerView.setVisibility(View.GONE);\n        }\n    }\n\n    private void loadBannerAd() {\n        bannerAd = new BannerAd.Builder(this, Constant.BANNER_AD_ID);\n        bannerAd.setBannerAdListener(new BannerAd.BannerAdListener() {\n            @Override\n            public void onAdLoaded(BannerAd bannerAd) {\n                bannerAd.showBannerAd();\n            }\n\n            @Override\n            public void onAdFailedToLoad(BannerAd bannerAd, String s) {\n                Toast.makeText(SecondActivity", "first_line_groundtruth": "adapterPost.setOnItemClickListener((view, obj, position) -> {", "first_line_prediction": " recyclerView.setVisibility(View.VISIBLE);", "match": 0}
{"groundtruth": "(Tools.getAdSizeMREC());", "prediction": "(AdSize.SMART_BANNER);\n                            adView.setAdListener(new AdListener() {\n                                @Override\n                                public void onAdLoaded() {\n                                    adStatus = AD_STATUS_OFF;\n                                    adNetwork = \"\";\n                                    backupAdNetwork = \"\";\n                                    adMobBannerId = \"\";\n                                    googleAdManagerBannerId = \"\";\n                                    fanBannerId = \"\";\n                                    unityBannerId = \"\";\n                                    appLovinBannerId = \"\";\n                                    appLovinBannerZoneId = \"\";\n                                    mopubBannerId = \"\";\n                                    ironSourceBannerId = \"\";\n                                    placementStatus = 0;\n                                    darkTheme", "first_line_groundtruth": "(Tools.getAdSizeMREC());", "first_line_prediction": "(AdSize.SMART_BANNER);", "match": 0}
{"groundtruth": "writer.writeInt(length);", "prediction": " writer.writeInt(length);\n         for (int i : value) {\n             writer.writeInt(i);\n         }\n    }\n\n    public void writeLongArray(long[] value) throws IOException {\n        int length = value.length;", "first_line_groundtruth": "writer.writeInt(length);", "first_line_prediction": " writer.writeInt(length);", "match": 0}
{"groundtruth": ": return NbtTagValue.fromByte(readByte());", "prediction": ":\n                return NbtTagValue.of(readByte());\n            case NbtTagValue.TAG_SHORT:\n                return NbtTagValue.of(readShort());\n            case NbtTagValue.TAG_INT:\n                return NbtTagValue.of(readInt());\n            case NbtTagValue.TAG_LONG:\n                return NbtTagValue.of(readLong());\n            case NbtTagValue.TAG_FLOAT:\n                return NbtTagValue.of(readFloat());\n            case NbtTagValue.TAG_DOUBLE:\n                return NbtTagValue.of(readDouble());\n            case NbtTagValue.TAG_BYTE_ARRAY:", "first_line_groundtruth": ": return NbtTagValue.fromByte(readByte());", "first_line_prediction": ":", "match": 0}
{"groundtruth": "writer.writeShortUnsigned(value.length());", "prediction": " writer.writeString(value);\n    }\n\n    public void writeBoolean(boolean value) throws IOException {\n        writer.writeBoolean(value);\n    }\n\n    public void writeByteTag(byte value) throws IOException {\n        writer.writeByte(value);\n    }\n\n    public void writeShortTag(short value) throws IOException {\n        writer.writeShort(value);\n    }\n\n    public void writeIntTag(int value) throws IOException {\n        writer.writeInt(value);\n    }\n\n    public void writeLongTag(long value) throws IOException {\n        writer.writeLong(value);\n    }\n\n    public void writeFloatTag(", "first_line_groundtruth": "writer.writeShortUnsigned(value.length());", "first_line_prediction": " writer.writeString(value);", "match": 0}
{"groundtruth": "visitor.visitByte(value);", "prediction": " visitor.visitByte(value);\n            }\n\n            @Override\n            public boolean equals(Object o) {\n                if (this == o) return true;\n                if (o == null || getClass() != o.getClass()) return false;\n                NbtTagValue<?> that = (NbtTagValue<?>) o;\n                return value == that.value;\n            }\n\n            @Override\n            public int hashCode() {\n                return Objects.hash(value);\n            }\n        };\n    }\n\n    public static NbtTagValue<Short> fromShort(short value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte", "first_line_groundtruth": "visitor.visitByte(value);", "first_line_prediction": " visitor.visitByte(value);", "match": 0}
{"groundtruth": "writer.writeInt(value.length);", "prediction": " writer.writeByteArray(value);\n    }\n\n    public void writeString(String value) throws IOException {\n        writer.writeString(value);\n    }\n\n    public void writeBoolean(boolean value) throws IOException {\n        writer.writeBoolean(value);\n    }\n\n    public void writeByteTag(byte value) throws IOException {\n        writer.writeByte(value);\n    }\n\n    public void writeShortTag(short value) throws IOException {\n        writer.writeShort(value);\n    }\n\n    public void writeIntTag(int value) throws IOException {\n        writer.writeInt(value);\n    }\n\n    public void writeLongTag(long", "first_line_groundtruth": "writer.writeInt(value.length);", "first_line_prediction": " writer.writeByteArray(value);", "match": 0}
{"groundtruth": "DoMainUtil.firstLevel(subDoMain)) {", "prediction": "StringUtils.isEmpty(parsingRecord.getDomain())) {\n            domain = DoMainUtil.getDomain(parsingRecord.getRecordId());\n            rr = parsingRecord.getRecordId();\n        } else {\n            domain = parsingRecord.getDomain();\n            rr = parsingRecord.getRecordId();\n        }\n        String recordType = RecordTypeEnum.valueOf(parsingRecord.getRecordType()).getRecordType();\n        AliDnsUtils.addSubDomainRecord(client, subDoMain, domain, rr, recordType, ip);\n    }\n\n    @Override\n    public void delete(ParsingRecord parsingRecord) throws Exception {\n       ", "first_line_groundtruth": "DoMainUtil.firstLevel(subDoMain)) {", "first_line_prediction": "StringUtils.isEmpty(parsingRecord.getDomain())) {", "match": 0}
{"groundtruth": "= reader.readInt();", "prediction": " = readInt();\n        byte[] bytes = reader.readByteArray(length);\n\n        return bytes;\n    }\n\n    public String readString() throws IOException {\n        int length  = readInt();\n        byte[] bytes = reader.readByteArray(length);\n\n        return new String(bytes, StandardCharsets.UTF_8);\n    }\n\n    public NbtTagCompound readCompound() throws IOException {\n        NbtTagCompound compound = new NbtTagCompound();\n\n        int size = readInt();\n        for (int i = 0; i < size; i++) {\n            String key = readString();\n            NbtTagValue value = readTag();", "first_line_groundtruth": "= reader.readInt();", "first_line_prediction": " = readInt();", "match": 0}
{"groundtruth": "reader.readBytes(data);", "prediction": " for (int i = 0; i < length; i++) {\n             data[i] = reader.readByte();\n         }\n\n        return data;\n    }\n\n    public String readString() throws IOException {\n        int length = reader.readInt();\n        byte[] data = new byte[length];\n\n        for (int i = 0; i < length; i++) {\n            data[i] = reader.readByte();\n        }\n\n        return new String(data, StandardCharsets.UTF_8);\n    }\n\n    public NbtTagCompound readCompound() throws IOException {\n        NbtTagCompound compound = new NbtTagCompound();", "first_line_groundtruth": "reader.readBytes(data);", "first_line_prediction": " for (int i = 0; i < length; i++) {", "match": 0}
{"groundtruth": "int length = reader.readShort();", "prediction": " int length = reader.readInt();\n         byte[] data = new byte[length];", "first_line_groundtruth": "int length = reader.readShort();", "first_line_prediction": " int length = reader.readInt();", "match": 0}
{"groundtruth": ".matcher(rule.getKafkaTopicTemplate());", "prediction": ".matcher(mappedKafkaTopic);\n\n                while (placeholderMatcher.find()) {\n                    String placeholder = placeholderMatcher.group();\n                    String placeholderValue = matcher.group(placeholderMatcher.groupCount());\n\n                    placeholders.put(placeholder, placeholderValue);\n                }\n\n                // find MQTT_TOPIC_PLACEHOLDER_REGEX in the kafkaKeyTemplate.\n                placeholderMatcher = this.placeholderPattern.matcher(kafkaKey);\n\n                while (placeholderMatcher.find()) {\n                    String placeholder = placeholderMatcher.group();\n                    String placeholderValue = matcher.group(placeholderMatcher.groupCount());\n\n                    placeholders.put(placeholder, placeholderValue);\n                }", "first_line_groundtruth": ".matcher(rule.getKafkaTopicTemplate());", "first_line_prediction": ".matcher(mappedKafkaTopic);", "match": 0}
{"groundtruth": "kafkaConfig.getProducerConfig().getConfig());", "prediction": "producerAckLevel.getProducerProperties());\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        return new KafkaProducer<>(props);\n    }", "first_line_groundtruth": "kafkaConfig.getProducerConfig().getConfig());", "first_line_prediction": "producerAckLevel.getProducerProperties());", "match": 0}
{"groundtruth": "ACKS_CONFIG, String.valueOf(producerAckLevel.getValue()));", "prediction": "KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(ProducerConfig.ACKS_CONFIG, producerAckLevel.toString());\n        return new KafkaProducer<>(props);\n    }", "first_line_groundtruth": "ACKS_CONFIG, String.valueOf(producerAckLevel.getValue()));", "first_line_prediction": "KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());", "match": 0}
{"groundtruth": "length = reader.readInt();", "prediction": " length = reader.readInt();\n\n        NbtTagList<?> list = new NbtTagList<>(type, length);\n\n        for (int i = 0; i < length; i++) {\n            list.add(readTag());\n        }\n\n        return list;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public NbtTagCompound readCompound() throws IOException {\n        NbtTagCompound compound = new NbtTagCompound();\n\n        while (true) {\n            byte type = reader.readByte();\n\n            if (type == NbtTagValue.END) {\n                break;\n            }\n\n            String name = readString();\n            NbtTagValue<?> value =", "first_line_groundtruth": "length = reader.readInt();", "first_line_prediction": " length = reader.readInt();", "match": 0}
{"groundtruth": "type = reader.readByte()) != NbtTagValue.TAG_END;", "prediction": "type = reader.readByte()) != NbtTagCompound.END; ) {\n            String name = readString();\n            compound.put(name, readTag(type));\n        }\n\n        return compound;\n    }\n\n    @Nullable\n    public NbtTagValue<?> readTag(byte type) throws IOException {\n        switch (type) {\n            case NbtTagCompound.END:\n                return null;\n            case NbtTagCompound.BYTE:\n                return NbtTagValue.of(readByte());\n            case NbtTagCompound.SHORT:\n                return NbtTagValue.of(readShort());\n            case NbtTagCompound.INT:\n                return Nbt", "first_line_groundtruth": "type = reader.readByte()) != NbtTagValue.TAG_END;", "first_line_prediction": "type = reader.readByte()) != NbtTagCompound.END; ) {", "match": 0}
{"groundtruth": "?> codec = MetadataCodec.getCodec(type);", "prediction": "MetadataValue> codec = MetadataCodec.getCodec(type);\n            if (codec == null) {\n                throw new RuntimeException(\"Unknown metadata type: \" + type);\n            }\n\n            map.put(index, codec.read(this));\n        }\n\n        return map;\n    }", "first_line_groundtruth": "?> codec = MetadataCodec.getCodec(type);", "first_line_prediction": "MetadataValue> codec = MetadataCodec.getCodec(type);", "match": 0}
{"groundtruth": "> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);", "prediction": "> codec = MetadataCodec.getCodec(type);\n            if (codec == null) {\n                throw new RuntimeException(\"Unknown metadata type: \" + type);\n            }\n\n            Object data = value.getData();\n            if (data == null) {\n                writeByte((byte) 0);\n            } else {\n                writeByte((byte) 1);\n                writeVarInt(type);\n                codec.write(this, data);\n            }\n        }\n    }", "first_line_groundtruth": "> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);", "first_line_prediction": "> codec = MetadataCodec.getCodec(type);", "match": 0}
{"groundtruth": "matcher(rule.getMqttTopicPattern());", "prediction": "matcher(mqttTopic);\n                    while (mqttTopicMatcher.find()) {\n                        String placeholderKey = mqttTopicMatcher.group();\n                        String placeholderValue = placeholders.get(placeholderKey);\n                        if (placeholderValue != null) {\n                            mappedKafkaTopic = mappedKafkaTopic.replace(placeholderKey, placeholderValue);\n                        }\n                    }\n                }\n\n                return new MappingResult(mappedKafkaTopic, kafkaKey);\n            }\n        }\n\n        return null;\n    }\n\n    @Override\n    public String getMqttTopicTemplate(String kafkaTopic) {\n        for (MappingRule rule : this.rules) {\n            Matcher matcher = this.patterns", "first_line_groundtruth": "matcher(rule.getMqttTopicPattern());", "first_line_prediction": "matcher(mqttTopic);", "match": 0}
{"groundtruth": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR);", "prediction": " = rule.getMqttTopicPattern().split(MQTT_TOPIC_PLACEHOLDER_REGEX);\n            ruleRegex = new StringBuilder();\n            for (String mqttTopicPatternPart : mqttTopicPatternParts) {\n                if (mqttTopicPatternPart.contains(MQTT_TOPIC_SINGLE_LEVEL_WILDCARD_CHARACTER)) {\n                    ruleRegex.append(SINGLE_LEVEL_WILDCARD_REGEX);\n                } else if (mqttTopicPatternPart.contains(MQTT_TOPIC_MULTI_LEVEL_WILDCARD_CHARACTER)) {\n                    ruleRegex.append(WILDCARD_REGEX);\n                } else", "first_line_groundtruth": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR);", "first_line_prediction": " = rule.getMqttTopicPattern().split(MQTT_TOPIC_PLACEHOLDER_REGEX);", "match": 0}
{"groundtruth": "properties.getCachePrefix() + \":\" + beanName + \":\" + method + \":%s:\" + key.toString();", "prediction": " properties.getCacheKey() + beanName + method + key.toString();\n        delete(cacheKey);\n    }\n\n    /**\n     * \u6309\u7167bean\u5220\u9664\u7f13\u5b58\n     */\n    default void delete(String beanName, String method, Object bindData) {\n        delete(beanName, method, bindData, null);\n    }\n\n    /**\n     * \u6309\u7167bean\u5220\u9664\u7f13\u5b58\n     */\n    default void delete(String beanName, String method) {\n        delete(beanName, method, null);\n    }\n\n    /**\n     * \u6309\u7167bean\u5220\u9664\u7f13\u5b58\n     */\n    default void delete(String beanName) {\n        delete(beanName,", "first_line_groundtruth": "properties.getCachePrefix() + \":\" + beanName + \":\" + method + \":%s:\" + key.toString();", "first_line_prediction": " properties.getCacheKey() + beanName + method + key.toString();", "match": 0}
{"groundtruth": "cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));", "prediction": " cache.put(String.format(cacheKey, FAIL), null, Duration.ofSeconds(cacheTime));\n            }\n        } finally {\n            lock.unlock(stamp);\n        }\n        gen.writeObject(result);\n    }\n\n    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n        if (property == null) {\n            return this;\n        }\n        SerializerProvider serializerProvider = prov.findValueSerializer(property.getType(), property);\n        if (serializerProvider == null) {\n            return this;\n        }\n        return new ExpandSerializer(beanName, method", "first_line_groundtruth": "cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));", "first_line_prediction": " cache.put(String.format(cacheKey, FAIL), null, Duration.ofSeconds(cacheTime));", "match": 0}
{"groundtruth": "(!jacksonExpandProperties.isCanExpandToNotExistField() && writeClass == null) {", "prediction": " (writeClass == null) {\n            gen.writeObject(bindData);\n            return;\n        }\n\n        // \u7f13\u5b58key\n        String cacheKey = String.format(\"%s_%s_%s\", beanName, method, writeField);\n        // \u7f13\u5b58\u9501\n        StampedLock lock = lockCache.getLock(cacheKey);\n        // \u7f13\u5b58\u65f6\u95f4\n        Duration cacheDuration = jacksonExpandProperties.getCacheDuration();\n        // \u7f13\u5b58\u65f6\u95f4\n        long stamp = lock.tryOptimisticRead();\n        // \u7f13\u5b58\u8fc7\u671f\n        if (stamp == 0) {\n            stamp = lock.readLock();\n           ", "first_line_groundtruth": "(!jacksonExpandProperties.isCanExpandToNotExistField() && writeClass == null) {", "first_line_prediction": " (writeClass == null) {", "match": 0}
{"groundtruth": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {", "prediction": " if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.INCLUDE) {\n            writeField = writeFieldPath;\n        }\n\n        // \u7f13\u5b58key\n        String cacheKey = beanName + \":\" + method + \":\" + writeField;\n        // \u7f13\u5b58\u9501\n        StampedLock lock = lockCache.getLock(cacheKey);\n        // \u7f13\u5b58\u65f6\u95f4\n        Duration cacheDuration = jacksonExpandProperties.getCacheDuration();\n        // \u7f13\u5b58\u65f6\u95f4\n        long stamp = lock.tryOptimisticRead();\n        // \u7f13\u5b58\u8fc7\u671f\n        if (stamp == 0) {\n            // \u7f13\u5b58\u8fc7\u671f\n            lock.", "first_line_groundtruth": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {", "first_line_prediction": " if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.INCLUDE) {", "match": 0}
{"groundtruth": "setCacheTime(jacksonExpandProperties.getCacheTimeout());", "prediction": "setCacheTime(jacksonExpandProperties.getCacheTime());\n                }\n                // \u7f13\u5b58\u524d\u7f00\n                if (StringUtils.hasText(params.getCachePrefix())) {\n                    jacksonExpandProperties.setCachePrefix(params.getCachePrefix());\n                }\n                // \u7f13\u5b58\u524d\u7f00\n                if (StringUtils.hasText(params.getRemoteParams())) {\n                    jacksonExpandProperties.setRemoteParams(params.getRemoteParams());\n                }\n                // \u7f13\u5b58\u524d\u7f00\n                if (StringUtils.hasText(params.getWriteField())) {\n                    jacksonExpandProperties.setWriteField(params.getWriteField());\n                }", "first_line_groundtruth": "setCacheTime(jacksonExpandProperties.getCacheTimeout());", "first_line_prediction": "setCacheTime(jacksonExpandProperties.getCacheTime());", "match": 0}
{"groundtruth": "cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));", "prediction": " // \u7f13\u5b58\n                cache.put(cacheKey, result, cacheTime);\n                gen.writeObject(result);\n                return;\n            }\n        } finally {\n            lock.unlockWrite(stamp);\n        }\n        gen.writeObject(bindData);\n    }\n\n    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n        if (property == null) {\n            return this;\n        }\n        // \u6ce8\u89e3\u53c2\u6570\u5904\u7406\n        params = property.getAnnotation(SerializerParam.class);\n        if (params == null) {\n            params = property.getDeclaringClass().getAnnotation", "first_line_groundtruth": "cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));", "first_line_prediction": " // \u7f13\u5b58", "match": 0}
{"groundtruth": "jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COVER) {", "prediction": "StringUtils.hasText(writeField) && !writeField.equals(beanName)) {\n            gen.writeObject(bindData);\n            return;\n        }\n\n        // \u7f13\u5b58key\n        String cacheKey = beanName + \".\" + method + \".\" + writeFieldPath;\n        // \u672c\u5730\u9501\n        StampedLock lock = lockCache.getLock(cacheKey);\n        // \u672c\u5730\u9501\u83b7\u53d6\n        long stamp = lock.tryOptimisticRead();\n        // \u672c\u5730\u9501\u83b7\u53d6\u6210\u529f\n        if (lock.validate(stamp)) {\n            // \u672c\u5730\u9501\u83b7\u53d6\u5931\u8d25\uff0c\u8fdc\u7a0b\u8c03\u7528\n            Object result = loadService(beanName,", "first_line_groundtruth": "jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COVER) {", "first_line_prediction": "StringUtils.hasText(writeField) && !writeField.equals(beanName)) {", "match": 0}
{"groundtruth": "cache.get(String.format(cacheKey, OK));", "prediction": " cache.get(cacheKey);\n        if (result == null) {\n            result = cache.get(String.format(cacheKey, FAIL));\n        }\n        return result;\n    }\n\n    /**\n     * \u83b7\u53d6\u53c2\u6570\n     *\n     * @param paramName \u53c2\u6570\u540d\n     * @return\n     */\n    private Set<String> getParam(String paramName) {\n        Set<String> result = new HashSet<>();\n        if (StringUtils.hasText(paramName)) {\n            String[] paramNames = paramName.split(\",\");\n            for (String param : paramNames) {\n                result.add(param);\n            }\n        }\n       ", "first_line_groundtruth": "cache.get(String.format(cacheKey, OK));", "first_line_prediction": " cache.get(cacheKey);", "match": 0}
{"groundtruth": "lock = lockCache.get(cacheKey, new StampedLock(), Duration.ofSeconds(300));", "prediction": " stampedLock = lockCache.getLock(cacheKey);\n        long stamp = stampedLock.tryOptimisticRead();\n        if (stampedLock.validate(stamp)) {\n            result = getCacheInfo(cacheKey);\n            if (result != null) {\n                LOG.info(\"{} Expand cache \u547d\u4e2d: {}\", beanName, result);\n                gen.writeObject(result);\n                return;\n            }\n        }\n\n        // \u8fdc\u7a0b\u8c03\u7528\n        Object rsp = null;\n        try {\n            RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n            ServletRequestAttributes servletRequestAttributes = null;\n            if (requestAttributes", "first_line_groundtruth": "lock = lockCache.get(cacheKey, new StampedLock(), Duration.ofSeconds(300));", "first_line_prediction": " stampedLock = lockCache.getLock(cacheKey);", "match": 0}
{"groundtruth": "format(jacksonExpandProperties.getCopyStrategyFormat(), gen.getOutputContext().getCurrentName());", "prediction": "format(\"%s.%s\", writeFieldPath, writeField);\n        }\n\n        // \u7f13\u5b58\n        StampedLock lock = lockCache.getLock(writeField);\n        long stamp = lock.tryOptimisticRead();\n        if (lock.validate(stamp)) {\n            Object value = cache.get(writeField);\n            if (value != null) {\n                gen.writeObject(value);\n                return;\n            }\n        }\n\n        // \u7f13\u5b58\n        lock.lock();\n        try {\n            Object value = cache.get(writeField);\n            if (value != null) {\n                gen.writeObject(value);\n                return", "first_line_groundtruth": "format(jacksonExpandProperties.getCopyStrategyFormat(), gen.getOutputContext().getCurrentName());", "first_line_prediction": "format(\"%s.%s\", writeFieldPath, writeField);", "match": 0}
{"groundtruth": "(jacksonExpandProperties.getDynamicExpandParameterName());", "prediction": "Field(bindData);\n            expand = needExpandField.contains(writeFieldPath);\n        } else {\n            expand = true;\n        }\n\n        // \u7f13\u5b58\n        StampedLock lock = lockCache.getLock(bindData.getClass().getName());\n        long stamp = lock.tryOptimisticRead();\n        if (lock.validate(stamp)) {\n            Object cacheData = cache.get(bindData.getClass().getName(), writeFieldPath);\n            if (cacheData != null) {\n                gen.writeObject(cacheData);\n                return;\n            }\n        }\n\n        // \u7f13\u5b58\n        lock.lock();\n       ", "first_line_groundtruth": "(jacksonExpandProperties.getDynamicExpandParameterName());", "first_line_prediction": "Field(bindData);", "match": 0}
{"groundtruth": "(this.mqttConfig.getHost(), this.mqttConfig.getPort()).sync();", "prediction": "(this.mqttConfig.getPort()).sync();\n        logger.info(\"MqttServer started on port {}\", this.mqttConfig.getPort());\n    }\n\n    /**\n     * Stop the server.\n     */\n    public void stop() {\n        if (this.channelFuture != null) {\n            this.channelFuture.channel().close();\n        }\n        this.masterGroup.shutdownGracefully();\n        this.workerGroup.shutdownGracefully();\n    }", "first_line_groundtruth": "(this.mqttConfig.getHost(), this.mqttConfig.getPort()).sync();", "first_line_prediction": "(this.mqttConfig.getPort()).sync();", "match": 0}
{"groundtruth": "mqttConfig = MqttConfig.fromMap(map);", "prediction": " mqttConfig = MqttConfig.fromMap(map);\n        final KafkaConfig kafkaConfig = KafkaConfig.fromMap(map);\n        return new BridgeConfig(map, mqttConfig, kafkaConfig);\n    }\n\n    /**\n     * Get the MQTT configuration properties\n     *\n     * @return MQTT configuration properties\n     */\n    public MqttConfig getMqttConfig() {\n        return mqttConfig;\n    }\n\n    /**\n     * Get the Kafka configuration properties\n     *\n     * @return Kafka configuration properties\n     */\n    public KafkaConfig getKafkaConfig() {\n        return kafkaConfig;\n    }\n\n    /**\n     * Get the bridge identification number\n     *\n    ", "first_line_groundtruth": "mqttConfig = MqttConfig.fromMap(map);", "first_line_prediction": " mqttConfig = MqttConfig.fromMap(map);", "match": 0}
{"groundtruth": "dataHolder.setVideoPopularLink(videoData.get(8));", "prediction": "\n\t\t\t\n\t\t\treturn youtubeService.save(dataHolder);\n\t\t}\n\t\treturn null;", "first_line_groundtruth": "dataHolder.setVideoPopularLink(videoData.get(8));", "first_line_prediction": "", "match": 0}
{"groundtruth": "(config.getKafkaConfig());", "prediction": "(config.getKafkaConfig());\n        this.serverBootstrap = new ServerBootstrap();\n        this.serverBootstrap.group(masterGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new MqttServerInitializer(this.mqttConfig, this.kafkaBridgeProducer))\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childOption(ChannelOption.SO_BACKLOG, 1024)\n                .childOption(option);\n    }\n\n    /**\n     * Starts the server.\n     *\n     * @throws Exception\n     */\n    public void start", "first_line_groundtruth": "(config.getKafkaConfig());", "first_line_prediction": "(config.getKafkaConfig());", "match": 1}
{"groundtruth": "config.getMqttConfig();", "prediction": " config.getMqttConfig();\n        this.kafkaBridgeProducer = new KafkaBridgeProducer(config.getKafkaConfig());\n        this.serverBootstrap = new ServerBootstrap();\n        this.serverBootstrap.group(masterGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new MqttServerInitializer(this.mqttConfig, this.kafkaBridgeProducer))\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childOption(ChannelOption.SO_BACKLOG, 1024)\n                .childOption(ChannelOption.TCP_NODELAY,", "first_line_groundtruth": "config.getMqttConfig();", "first_line_prediction": " config.getMqttConfig();", "match": 0}
{"groundtruth": "mqttServer.stop();", "prediction": " mqttServer.stop();\n                     latch.await();\n                } catch (Exception e) {\n                    logger.error(\"Error while shutting down the MQTT server\", e);\n                }\n            }));\n\n            mqttServer.start();\n            latch.countDown();\n\n            logger.info(\"Strimzi MQTT Bridge {} is started\", Main.class.getPackage().getImplementationVersion());\n        } catch (Exception e) {\n            logger.error(\"Error while starting the MQTT server\", e);\n        }\n    }\n\n    private static String getAbsoluteFilePath(String path) {\n        if (path == null) {\n            return null;\n       ", "first_line_groundtruth": "mqttServer.stop();", "first_line_prediction": " mqttServer.stop();", "match": 0}
{"groundtruth": ", this.mqttConfig.getPort()).sync();", "prediction": " + \":\" + this.mqttConfig.getPort()).sync();\n        logger.info(\"MqttServer started on port \" + this.mqttConfig.getPort());\n    }\n\n    /**\n     * Stop the server.\n     */\n    public void stop() {\n        if (this.channelFuture != null) {\n            this.channelFuture.channel().close();\n        }\n        this.masterGroup.shutdownGracefully();\n        this.workerGroup.shutdownGracefully();\n    }", "first_line_groundtruth": ", this.mqttConfig.getPort()).sync();", "first_line_prediction": " + \":\" + this.mqttConfig.getPort()).sync();", "match": 0}
{"groundtruth": "MappingRulesLoader.getInstance().init(mappingRulesFile);", "prediction": " bridgeConfig.setMappingRulesFile(mappingRulesFile);\n\n            //load the mapping rules\n            MappingRulesLoader mappingRulesLoader = new MappingRulesLoader(bridgeConfig.getMappingRulesFile());\n            bridgeConfig.setMappingRules(mappingRulesLoader.loadMappingRules());\n\n            //start the MQTT server\n            EventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n            CountDownLatch latch = new CountDownLatch(1);\n            MqttServer mqttServer = new MqttServer(bridgeConfig, eventLoopGroup, latch);\n            mqttServer.start();\n\n            //wait for the server to be stopped\n            latch.", "first_line_groundtruth": "MappingRulesLoader.getInstance().init(mappingRulesFile);", "first_line_prediction": " bridgeConfig.setMappingRulesFile(mappingRulesFile);", "match": 0}
{"groundtruth": "return Integer.toString(record.getStatus());", "prediction": " return record.getStatus();\n            case \"content_type\":\n                return record.getContentType();\n            case \"content_length\":\n                return record.getContentLength();\n            case \"content_encoding\":\n                return record.getContentEncoding();\n            case \"content_language\":\n                return record.getContentLanguage();\n            case \"content_disposition\":\n                return record.getContentDisposition();\n            case \"content_md5\":\n                return record.getContentMd5();\n            case \"content_sha1\":\n                return record.getContentSha1();\n            case \"content_sha256\":\n                return record.getContentSha256();", "first_line_groundtruth": "return Integer.toString(record.getStatus());", "first_line_prediction": " return record.getStatus();", "match": 0}
{"groundtruth": "record.getTruncated();", "prediction": " record.isTruncated() ? \"true\" : \"false\";\n            case \"content_type\":\n                return record.getContentType();\n            case \"content_length\":\n                return record.getContentLength();\n            case \"content_encoding\":\n                return record.getContentEncoding();\n            case \"content_language\":\n                return record.getContentLanguage();\n            case \"content_md5\":\n                return record.getContentMd5();\n            case \"content_sha1\":\n                return record.getContentSha1();\n            case \"content_sha256\":\n                return record.getContentSha256();\n            case \"content_sha5", "first_line_groundtruth": "record.getTruncated();", "first_line_prediction": " record.isTruncated() ? \"true\" : \"false\";", "match": 0}
{"groundtruth": "CCMimeCounter.main(new String[]{", "prediction": " String[] args2 = new String[args.length - 1];\n             System.arraycopy(args, 1, args2, 0, args.length - 1);\n             CCFileExtractor.main(args2);\n        } else if (command.equals(\"CountMimesIndices\")) {\n            String[] args2 = new String[args.length - 1];\n            System.arraycopy(args, 1, args2, 0, args.length - 1);\n            CCIndexFetcher.main(args2);\n        } else if (command.equals(\"Extract\")) {\n            CCFileExtractor", "first_line_groundtruth": "CCMimeCounter.main(new String[]{", "first_line_prediction": " String[] args2 = new String[args.length - 1];", "match": 0}
{"groundtruth": "CCFileExtractor.main(new String[]{", "prediction": " String url = args[1];\n             String out = args[2];\n             String[] urls = url.split(\",\");\n             for (String u : urls) {\n                 System.out.println(\"Fetching \" + u);\n                 String truncated = CCFetcher.fetch(u);\n                 Files.write(Paths.get(out), truncated.getBytes());\n             }\n        } else if (command.equals(\"Extract\")) {\n            String url = args[1];\n            String out = args[2];\n            String[] urls = url.split(\",\");\n            for (String u : urls) {\n                System.out.println(\"", "first_line_groundtruth": "CCFileExtractor.main(new String[]{", "first_line_prediction": " String url = args[1];", "match": 0}
{"groundtruth": "R.error(\"bad request\");", "prediction": " R.error(\"\u8bf7\u6c42\u53c2\u6570\u9519\u8bef\");\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public R map(MethodArgumentNotValidException e) {\n        List<FieldError> fieldErrors = e.getBindingResult().getFieldErrors();\n        List<String> errors = new ArrayList<>();\n        for (FieldError fieldError : fieldErrors) {\n            errors.add(fieldError.getField() + \" \" + fieldError.getDefaultMessage());\n        }\n        return R.error(errors);\n    }\n\n    @ExceptionHandler(MethodArgumentTypeMismatchException.class)\n    public R map(MethodArgumentTypeMismatchException e", "first_line_groundtruth": "R.error(\"bad request\");", "first_line_prediction": " R.error(\"\u8bf7\u6c42\u53c2\u6570\u9519\u8bef\");", "match": 0}
{"groundtruth": "return R.error(error.get(\"errorMsg\").toString());", "prediction": " return R.error(error);\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public R map(MethodArgumentNotValidException e) {\n        List<FieldError> fieldErrors = e.getBindingResult().getFieldErrors();\n        Map<String, Object> error = this.getValidError(fieldErrors);\n        return R.error(error);\n    }\n\n    @ExceptionHandler(MethodArgumentTypeMismatchException.class)\n    public R map(MethodArgumentTypeMismatchException e) {\n        Map<String, Object> error = new HashMap<>();\n        error.put(\"error\", e.getName());\n       ", "first_line_groundtruth": "return R.error(error.get(\"errorMsg\").toString());", "first_line_prediction": " return R.error(error);", "match": 0}
{"groundtruth": "R.error();", "prediction": " R.error(\"\u7cfb\u7edf\u5f02\u5e38\");\n    }", "first_line_groundtruth": "R.error();", "first_line_prediction": " R.error(\"\u7cfb\u7edf\u5f02\u5e38\");", "match": 0}
{"groundtruth": "r.getOffset(), r.getLength(), r.getTruncated());", "prediction": " r.getOffset(), r.getLength(), r.getTruncated());\n            return true;\n        }\n    }\n\n    private void fetchBytes(CCIndexRecord r) throws IOException {\n        fileFromCCWarcFetcher.fetchBytes(r);\n    }", "first_line_groundtruth": "r.getOffset(), r.getLength(), r.getTruncated());", "first_line_prediction": " r.getOffset(), r.getLength(), r.getTruncated());", "match": 0}
{"groundtruth": "R.ok(\"Verify successfully\");", "prediction": " R.ok(\n                SessionResp.builder()\n                         .auth(true)\n                         .model(ApiRunMode.get(appProperties).getName())\n                         .build()\n        );\n    }\n\n    @PostMapping(\"/chat\")\n    public R<SseEmitter> chat(@RequestBody @Validated ChatProcessReq req) {\n        SseEmitter emitter = new SseEmitter(req.getTimeoutMs());\n        asyncTaskExecutor.execute(() -> {\n            try {\n                emitter.send(openAiApiService.chat(req.getChatId(), req.getMessage()));\n            } catch (SocketException | SocketTimeoutException | IOException | OpenAi", "first_line_groundtruth": "R.ok(\"Verify successfully\");", "first_line_prediction": " R.ok(", "match": 0}
{"groundtruth": "!clause.select(val)) {", "prediction": "clause.select(val)) {\n                    return true;\n                }\n            }\n        }\n\n        for (Map.Entry<String, List<SelectorClause>> e : should.entrySet()) {\n            String val = getStringValue(e.getKey(), record);\n            if (val == null) {\n                LOGGER.warn(\"Value is null for '{}' in the should clause. Record not selected.\",\n                        e.getKey());\n                return false;\n            }\n            for (SelectorClause clause : e.getValue()) {\n                if (clause.select(val)) {\n                    return true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n   ", "first_line_groundtruth": "!clause.select(val)) {", "first_line_prediction": "clause.select(val)) {", "match": 0}
{"groundtruth": "StringBuilder sb = new StringBuilder(SpringUtil.getClientIp()).append(\"-\");", "prediction": " MethodSignature signature = (MethodSignature) point.getSignature();\n         Method method = signature.getMethod();\n         return method.getDeclaringClass().getName() + \".\" + method.getName();\n    }", "first_line_groundtruth": "StringBuilder sb = new StringBuilder(SpringUtil.getClientIp()).append(\"-\");", "first_line_prediction": " MethodSignature signature = (MethodSignature) point.getSignature();", "match": 0}
{"groundtruth": "), r.getLength(), r.getTruncated());", "prediction": "r.getFilename()), r.getLength(r.getFilename()), r.getTruncated());\n            return true;\n        }\n    }\n\n    private void fetchBytes(CCIndexRecord r) throws IOException {\n        fileFromCCWarcFetcher.fetchBytes(r);\n    }", "first_line_groundtruth": "), r.getLength(), r.getTruncated());", "first_line_prediction": "r.getFilename()), r.getLength(r.getFilename()), r.getTruncated());", "match": 0}
{"groundtruth": "sse.isDone()) {", "prediction": "sse.isLast()) {\n                        emitter.onNext(sse);\n                        emitter.onComplete();\n                        emitDone = true;\n                    } else {\n                        emitter.onNext(sse);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            emitter.onError(e);\n        } finally {\n            try {\n                if (reader != null) {\n                    reader.close();\n                }\n            } catch (IOException e) {\n                emitter.onError(e);\n            }\n        }\n    }\n\n    @Override\n    public void onFailure(Call<ResponseBody> call, Throwable t) {\n        if (t instanceof OpenAiHttpException) {", "first_line_groundtruth": "sse.isDone()) {", "first_line_prediction": "sse.isLast()) {", "match": 0}
{"groundtruth": "extracted = counter.getFilesExtracted().incrementAndGet();", "prediction": " truncated = counter.getTruncated().incrementAndGet();\n            if (fetcherConfig.getMaxFilesTruncated() > -1 &&\n                    truncated >= fetcherConfig.getMaxFilesTruncated()) {\n                LOGGER.info(\"hit max truncated files\");\n                return false;\n            }\n            if (fetcherConfig.isExtractTruncated()) {\n                TRUNCATED_URLS_LOGGER.info(\"truncated: {}\", r.getTruncated());\n            }\n            if (fetcherConfig.isExtractTruncatedFull()) {\n                TRUNCATED_URLS_FULL_LOGGER.info(\"truncated: {}\", r.getTruncated());\n            }\n            fileFromCCW", "first_line_groundtruth": "extracted = counter.getFilesExtracted().incrementAndGet();", "first_line_prediction": " truncated = counter.getTruncated().incrementAndGet();", "match": 0}
{"groundtruth": "url = r.getUrl();", "prediction": " url = r.getUrl();\n            if (url.length() > 1000) {\n                TRUNCATED_URLS_LOGGER.info(\"truncated url: {}\", url);\n                TRUNCATED_URLS_FULL_LOGGER.info(\"truncated url: {}\", r.getTruncated());\n            }\n            return true;\n        }\n    }\n\n    private void fetchBytes(CCIndexRecord r) throws IOException {\n        fileFromCCWarcFetcher.fetchBytes(r);\n    }", "first_line_groundtruth": "url = r.getUrl();", "first_line_prediction": " url = r.getUrl();", "match": 0}
{"groundtruth": "if (fetcherConfig.getNumThreads() > 10) {", "prediction": " this.reportEvery = fetcherConfig.getReportEvery();\n    }\n\n    @Override\n    public void process(CCIndexRecord record) {\n        if (record.isDeleted()) {\n            return;\n        }\n        String url = record.getUrl();\n        if (StringUtils.isBlank(url)) {\n            return;\n        }\n        if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n            try {\n                Optional<String> truncatedUrl = fileFromCCWarcFetcher.fetch(url);\n                if (truncatedUrl.isPresent()) {\n                    TRUNCATED_URLS_LOGGER.info", "first_line_groundtruth": "if (fetcherConfig.getNumThreads() > 10) {", "first_line_prediction": " this.reportEvery = fetcherConfig.getReportEvery();", "match": 0}
{"groundtruth": "getNormalizedMimeDetected(), r.getFilename(),\n                    r.getOffset(), r.getLength(), r.getTruncated());", "prediction": "getNormalizedMimeDetected(),\n                    r.getWarcFile(), r.getWarcOffset(), r.getWarcLength(),\n                    r.getTruncated());\n            return true;\n        }\n    }\n\n    private void fetchBytes(CCIndexRecord r) throws IOException {\n        fileFromCCWarcFetcher.fetchBytes(r);\n    }", "first_line_groundtruth": "getNormalizedMimeDetected(), r.getFilename(),", "first_line_prediction": "getNormalizedMimeDetected(),", "match": 0}
{"groundtruth": "(fetcherConfig.getMaxFilesTruncated() > -1 &&\n                    truncated >= fetcherConfig.getMaxFilesTruncated()) {", "prediction": " (truncated % reportEvery == 0) {\n                TRUNCATED_URLS_LOGGER.info(\"truncated: {}\", counter);\n            }\n            if (fetcherConfig.getMaxTruncated() > -1 && truncated >= fetcherConfig.getMaxTruncated()) {\n                TRUNCATED_URLS_FULL_LOGGER.info(\"hit max truncated\");\n                return false;\n            }\n        }\n        fileFromCCWarcFetcher.process(r);\n        return true;\n    }", "first_line_groundtruth": "(fetcherConfig.getMaxFilesTruncated() > -1 &&", "first_line_prediction": " (truncated % reportEvery == 0) {", "match": 0}
{"groundtruth": "if (fetcherConfig.isExtractTruncated() || StringUtils.isBlank(r.getTruncated())) {", "prediction": " //check for hit max\n         //return false;\n\n        String url = r.getUrl();\n        if (url.length() > fetcherConfig.getMaxUrlLength()) {\n            TRUNCATED_URLS_LOGGER.info(\"hit max url length\");\n            TRUNCATED_URLS_FULL_LOGGER.info(\"hit max url length\");\n            return false;\n        }\n        if (fetcherConfig.isFetchTruncated() && StringUtils.isNotBlank(r.getTruncated())) {\n            TRUNCATED_URLS_LOGGER.info(\"hit truncated url\");\n            TRUNCATED_URLS_FULL_LOGGER.info(\"", "first_line_groundtruth": "if (fetcherConfig.isExtractTruncated() || StringUtils.isBlank(r.getTruncated())) {", "first_line_prediction": " //check for hit max", "match": 0}
{"groundtruth": "if (fetcherConfig.isDryRun()) {", "prediction": "\n\n            if (fetcherConfig.isExtractTruncated()) {\n                TRUNCATED_URLS_LOGGER.info(\"extracting truncated url: {}\", r.getTruncated());\n            }\n            fileFromCCWarcFetcher.extract(r);\n            TRUNCATED_URLS_FULL_LOGGER.info(\"extracted truncated url: {}\", r.getTruncated());\n        }\n        return true;\n    }", "first_line_groundtruth": "if (fetcherConfig.isDryRun()) {", "first_line_prediction": "", "match": 0}
{"groundtruth": ".indexFetcher = fetcherConfig.newIndexFetcher();", "prediction": ".indexFetcher = fetcherConfig.getIndexFetcher();\n        }\n\n        @Override\n        public Long call() throws Exception {\n            try {\n                while (true) {\n                    FetchEmitTuple fetchEmitTuple = indexUrls.poll(100, TimeUnit.MILLISECONDS);\n                    if (fetchEmitTuple == null) {\n                        break;\n                    }\n                    String url = fetchEmitTuple.getFetchEmitKey();\n                    if (StringUtils.isBlank(url)) {\n                        continue;\n                    }\n                    if (url.endsWith(\".gz\")) {\n                        url = url.substring(0, url.length() - 3);\n                    }\n                    if", "first_line_groundtruth": ".indexFetcher = fetcherConfig.newIndexFetcher();", "first_line_prediction": ".indexFetcher = fetcherConfig.getIndexFetcher();", "match": 0}
{"groundtruth": "ccIndexReaderCounter.getEmptyPayload().incrementAndGet();", "prediction": " return;\n        }\n        WarcPayload warcPayload = payload.get();\n        if (warcPayload.contentLength() == 0) {\n            LOGGER.debug(\"empty payload {}\", id);\n            return;\n        }\n        String filename = ccIndexRecord.getFilename();\n        String contentType = warcPayload.contentType().toString();\n        String contentEncoding = warcPayload.contentEncoding().toString();\n        String contentMd5 = warcPayload.contentMd5();\n        String contentSha1 = warcPayload.contentSha1();\n        String contentSha256 = warcPayload.contentSha256", "first_line_groundtruth": "ccIndexReaderCounter.getEmptyPayload().incrementAndGet();", "first_line_prediction": " return;", "match": 0}
{"groundtruth": "finishedWorkers < fetcherConfig.getNumThreads()) {", "prediction": "finishedWorkers < totalThreads) {\n                Future<Long> future = executorCompletionService.take();\n                try {\n                    future.get(10, TimeUnit.SECONDS);\n                    finishedWorkers++;\n                } catch (InterruptedException | ExecutionException | TimeoutException e) {\n                    LOGGER.error(\"Error processing\", e);\n                }\n            }\n        } catch (InterruptedException e) {\n            LOGGER.error(\"Error processing\", e);\n        }\n        executorService.shutdown();\n        executorService.awaitTermination(10, TimeUnit.SECONDS);\n        indexIterator.close();\n        indexPathsList.put(new FetchEmitTuple(null, null));\n       ", "first_line_groundtruth": "finishedWorkers < fetcherConfig.getNumThreads()) {", "first_line_prediction": "finishedWorkers < totalThreads) {", "match": 0}
{"groundtruth": "streamEmitter = fetcherConfig.newEmitter();", "prediction": " emitter = fetcherConfig.newEmitter();\n            Metadata metadata = new Metadata();\n            metadata.set(Metadata.RESOURCE_NAME_KEY, \"index\");\n            metadata.set(Metadata.CONTENT_TYPE, \"application/gzip\");\n            metadata.set(Metadata.CONTENT_ENCODING, \"gzip\");\n            metadata.set(Metadata.CONTENT_LENGTH, \"0\");\n            metadata.set(Metadata.CONTENT_DISPOSITION, \"attachment; filename=index.gz\");\n            metadata.set(Metadata.CONTENT_DESCRIPTION, \"index\");\n            metadata.set(Metadata.CONTENT_LANGUAGE, \"en\");\n            metadata.", "first_line_groundtruth": "streamEmitter = fetcherConfig.newEmitter();", "first_line_prediction": " emitter = fetcherConfig.newEmitter();", "match": 0}
{"groundtruth": ", record.getFilename(), record.getOffset(),\n                record.getLength());", "prediction": " + record.getWarcId() + \" \" + record.getWarcUrl());\n        FetchKey fetchKey = new FetchKey(record.getWarcId(), record.getWarcUrl());\n        fetcher.fetch(fetchKey, emitter);\n        emitter.emit(new EmitKey(record.getWarcId(), record.getWarcUrl()));\n        EXTRACTED_LOGGER.info(record.getWarcId() + \" \" + record.getWarcUrl());\n        ccIndexReaderCounter.increment();\n    }\n\n    public void fetchToPath(CCIndexRecord record, boolean extract", "first_line_groundtruth": ", record.getFilename(), record.getOffset(),", "first_line_prediction": " + record.getWarcId() + \" \" + record.getWarcUrl());", "match": 0}
{"groundtruth": ".debug(\"going to fetch {", "prediction": ".info(\"fetching {} to {}\", record.getWarcId(), record.getFilePath());\n        FetchKey fetchKey = new FetchKey(record.getWarcId());\n        fetcher.fetch(fetchKey, emitter);\n        FetchEmitTuple tuple = emitter.getEmitTuple(fetchKey);\n        if (tuple == null) {\n            throw new RuntimeException(\"no tuple for \" + fetchKey);\n        }\n        Path targetPath = tuple.getEmitKey().getPath();\n        if (targetPath == null) {\n            throw new RuntimeException(\"no path for \" + fetchKey);\n        }\n        if (targetPath", "first_line_groundtruth": ".debug(\"going to fetch {", "first_line_prediction": ".info(\"fetching {} to {}\", record.getWarcId(), record.getFilePath());", "match": 0}
{"groundtruth": "record.getLength());", "prediction": " record.getOffset() + record.getLength());\n        FetchKey fetchKey = new FetchKey(record.getFilename(), record.getOffset(),\n                record.getOffset() + record.getLength());\n        fetcher.fetch(fetchKey, emitter);\n        emitter.emit(new EmitKey(record.getFilename(), record.getOffset(),\n                record.getOffset() + record.getLength()));\n        emitter.close();\n    }\n\n    public void extract(CCIndexRecord record) throws IOException, TikaException {\n        Path targetPath = targetPathRewriter.rewrite(record.getFilename());\n        if (targetPath", "first_line_groundtruth": "record.getLength());", "first_line_prediction": " record.getOffset() + record.getLength());", "match": 0}
{"groundtruth": "run(), TimeConverter.toTicks(delay, unit)\n                )\n        );", "prediction": "run(),\n                        TimeConverter.toBukkit(delay, unit)\n                )\n        );\n    }\n\n    @Override\n    public WrappedTask runLater(Runnable runnable, long delay, TimeUnit unit, int ticks) {\n        return new WrappedFoliaTask(\n                this.globalRegionScheduler.runDelayed(\n                        plugin, task -> runnable.run(),\n                        TimeConverter.toBukkit(delay, unit),\n                        ticks\n                )\n        );\n    }\n\n    @Override\n    public WrappedTask runLater(Runnable runnable, long delay, TimeUnit unit, int ticks, int priority) {\n        return new WrappedFolia", "first_line_groundtruth": "run(), TimeConverter.toTicks(delay, unit)", "first_line_prediction": "run(),", "match": 0}
{"groundtruth": "TimeConverter.toTicks(period, unit))\n        );", "prediction": " TimeConverter.toTicks(period, unit)\n                )\n        );\n    }\n\n    @Override\n    public WrappedTask runTimerAsync(Runnable runnable, long delay, long period, TimeUnit unit) {\n        return new WrappedBukkitTask(\n                this.scheduler.runTaskTimerAsynchronously(\n                        plugin, runnable,\n                        TimeConverter.toTicks(delay, unit),\n                         TimeConverter.toTicks(period, unit)\n                )\n        );\n    }\n\n    @Override\n    public CompletableFuture<EntityTaskResult> runTask(Entity entity, Runnable runnable) {\n        CompletableFuture<EntityTaskResult> future = new CompletableFuture<>();\n\n       ", "first_line_groundtruth": "TimeConverter.toTicks(period, unit))", "first_line_prediction": " TimeConverter.toTicks(period, unit)", "match": 0}
{"groundtruth": "TimeConverter.toTicks(delay, unit),\n                        TimeConverter.toTicks(period, unit)\n                )\n        );", "prediction": "0, TimeConverter.toTicks(period, unit)\n                )\n        );\n    }\n\n    @Override\n    public WrappedTask runTimerAsync(Runnable runnable, long delay, long period, TimeUnit unit) {\n        return new WrappedFoliaTask(\n                this.asyncScheduler.runAtFixedRate(\n                        plugin, task -> runnable.run(),\n                        delay, TimeConverter.toTicks(period, unit)\n                )\n        );\n    }\n\n    @Override\n    public WrappedTask runTimer(Runnable runnable, long delay, TimeUnit unit) {\n        return new WrappedFoliaTask(\n                this.globalRegion", "first_line_groundtruth": "TimeConverter.toTicks(delay, unit),", "first_line_prediction": "0, TimeConverter.toTicks(period, unit)", "match": 0}
{"groundtruth": "TimeConverter.toTicks(delay, unit),\n                        TimeConverter.toTicks(period, unit))\n        );", "prediction": "0, TimeConverter.toTicks(period, unit)\n                )\n        );\n    }\n\n    @Override\n    public WrappedTask runTimerAsync(Runnable runnable, long delay, long period, TimeUnit unit) {\n        return new WrappedBukkitTask(\n                this.scheduler.runTaskTimerAsynchronously(\n                        plugin, runnable,\n                        0, TimeConverter.toTicks(period, unit)\n                )\n        );\n    }\n\n    @Override\n    public CompletableFuture<EntityTaskResult> runTask(Entity entity, Runnable runnable) {\n        CompletableFuture<EntityTaskResult> future = new CompletableFuture<>();\n\n        this.scheduler.runTask(", "first_line_groundtruth": "TimeConverter.toTicks(delay, unit),", "first_line_prediction": "0, TimeConverter.toTicks(period, unit)", "match": 0}
{"groundtruth": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))\n        );", "prediction": "runTaskLater(plugin, runnable, unit.toMillis(delay))\n        );\n    }\n\n    @Override\n    public WrappedTask runLater(Runnable runnable, long delay) {\n        return new WrappedBukkitTask(\n                this.scheduler.runTaskLater(plugin, runnable, delay)\n        );\n    }\n\n    @Override\n    public WrappedTask runLater(Runnable runnable) {\n        return new WrappedBukkitTask(\n                this.scheduler.runTaskLater(plugin, runnable)\n        );\n    }\n\n    @Override\n    public WrappedTask runTimer(Runnable runnable, long delay, TimeUnit unit) {\n       ", "first_line_groundtruth": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))", "first_line_prediction": "runTaskLater(plugin, runnable, unit.toMillis(delay))", "match": 0}
{"groundtruth": "record.getOffset() + record.getLength() - 1), new EmitKey());", "prediction": "0, record.getLength(), record.getChecksum()),\n                new EmitKey(record.getFilename(), record.getFilename(),\n                        record.getOffset(), 0, record.getLength(),\n                        record.getChecksum()));\n        fetcher.fetch(t);\n        if (t.getFetchResult().isSuccess()) {\n            try {\n                Path targetPath = targetPathRewriter.rewrite(record.getFilename());\n                EXTRACTED_LOGGER.info(\"extracted {} to {}\", record.getFilename(), targetPath);\n                EXTRACTED_ALL_LOGGER.info(\"extracted {} to {}\", record.getFilename", "first_line_groundtruth": "record.getOffset() + record.getLength() - 1), new EmitKey());", "first_line_prediction": "0, record.getLength(), record.getChecksum()),", "match": 0}
{"groundtruth": ".equals(ccIndexRecord.getDigest())) {", "prediction": ".equals(ccIndexRecord.getSha1())) {\n                LOGGER.debug(\"sha1 mismatch {} {} {}\", id, ccIndexRecord.getSha1(), base32Sha1);\n                ccIndexReaderCounter.getSha1Mismatch().incrementAndGet();\n                return;\n            }\n            targetDigest = base32Sha1;\n            Path targetPath = targetPathRewriter.rewrite(ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(), targetDigest);\n            EXTRACTED_LOGGER.info(\"extracted {} {}->{} to {}\", ccIndexRecord.getFilename(),", "first_line_groundtruth": ".equals(ccIndexRecord.getDigest())) {", "first_line_prediction": ".equals(ccIndexRecord.getSha1())) {", "match": 0}
{"groundtruth": ".getOffset() + record.getLength() - 1), new EmitKey());", "prediction": ".getLength()));\n        fetcher.fetch(t);\n        if (t.getEmitKey() != null) {\n            emitter.emit(t.getEmitKey());\n        }\n    }\n\n    public void extract(CCIndexRecord record) throws IOException, TikaException {\n        Path targetPath = targetPathRewriter.rewrite(record.getFilename());\n        if (targetPath == null) {\n            return;\n        }\n        EXTRACTED_LOGGER.info(\"extracting {} to {}\", record.getFilename(), targetPath);\n        try (InputStream is = fetcher.getInputStream(record.getFilename())) {\n            if", "first_line_groundtruth": ".getOffset() + record.getLength() - 1), new EmitKey());", "first_line_prediction": ".getLength()));", "match": 0}
{"groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);", "prediction": "0,\n                    length,\n                    targetPath,\n                    targetDigest);\n        } else {\n            EXTRACTED_LOGGER.info(\"\", ccIndexRecord.getUrl(),\n                    ccIndexRecord.getNormalizedMime(),\n                    ccIndexRecord.getNormalizedMimeDetected(),\n                    ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(),\n                    length,\n                    targetPath,\n                    targetDigest);\n        }\n    }\n\n    private byte[] fetchWarcBytes(FetchEmitTuple t) throws IOException, TikaException {\n        try (InputStream is = fetcher.fetch(t)) {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            IOUtils", "first_line_groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "totalCounts, r.getNormalizedMimeDetected());", "prediction": "r.getMimeType(), r.getTruncated());\n            return true;\n        }\n\n        private void increment(String mimeType, boolean truncated) {\n            MutableLong total = totalCounts.computeIfAbsent(mimeType, k -> new MutableLong(0));\n            total.increment();\n            if (truncated) {\n                MutableLong truncatedCount = truncatedCounts.computeIfAbsent(mimeType, k -> new MutableLong(0));\n                truncatedCount.increment();\n            }\n        }\n\n        @Override\n        public void close() throws IOException {\n            counter.close();\n        }\n    }", "first_line_groundtruth": "totalCounts, r.getNormalizedMimeDetected());", "first_line_prediction": "r.getMimeType(), r.getTruncated());", "match": 0}
{"groundtruth": ".getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);", "prediction": ".getOffset(),\n                    ccIndexRecord.getLength(),\n                    ccIndexRecord.getDigest(),\n                    ccIndexRecord.getEncoding(),\n                    ccIndexRecord.getTruncated(),\n                    ccIndexRecord.getTruncatedLength(),\n                    ccIndexRecord.getTruncatedDigest(),\n                    ccIndexRecord.getTruncatedEncoding(),\n                    ccIndexRecord.getTruncatedOffset(),\n                    ccIndexRecord.getTruncatedLength(),\n                    ccIndexRecord.getTruncatedOffset(),\n                    ccIndexRecord.getTruncatedLength(),\n                    ccIndexRecord.getTruncatedOffset(),\n                    ccIndexRecord.getTruncatedLength(),\n                    ccIndexRecord.getTruncatedOffset(),\n                    ccIndex", "first_line_groundtruth": ".getOffset(), ccIndexRecord.getLength(),", "first_line_prediction": ".getOffset(),", "match": 0}
{"groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);", "prediction": "0, length,\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);\n        }\n    }\n\n    private byte[] fetchWarcBytes(FetchEmitTuple t) throws IOException, TikaException {\n        try (InputStream is = fetcher.fetch(t)) {\n            return IOUtils.toByteArray(is);\n        }\n    }\n\n    private void parseWarc(String id, CCIndexRecord ccIndexRecord, byte[] warcRecordGZBytes)\n            throws IOException {\n        try (InputStream is = new GZIPInputStream(new ByteArrayInputStream(warcRecordGZBytes))) {\n            WarcReader reader", "first_line_groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),", "first_line_prediction": "0, length,", "match": 0}
{"groundtruth": "targetPath = targetPathRewriter.rewrite(targetDigest);", "prediction": " targetPath = targetPathRewriter.rewrite(id, targetDigest, length);\n            EXTRACTED_LOGGER.info(\"extracted {} to {}\", id, targetPath);\n            EXTRACTED_ALL_LOGGER.info(\"extracted {} to {}\", id, targetPath);\n            ccIndexReaderCounter.getExtracted().incrementAndGet();\n            try (InputStream is = Files.newInputStream(tmp)) {\n                emitter.emit(new FetchEmitTuple(targetPath,\n                        new FetchKey(\"\", targetPath, 0, length - 1),\n                        new EmitKey()));\n            }\n        } finally {\n            Files.delete", "first_line_groundtruth": "targetPath = targetPathRewriter.rewrite(targetDigest);", "first_line_prediction": " targetPath = targetPathRewriter.rewrite(id, targetDigest, length);", "match": 0}
{"groundtruth": "RangeFetcher) fetcherConfig.newFetcher();", "prediction": "RangeFetcher) fetcherConfig.newFetcher();\n        this.targetPathRewriter = fetcherConfig.getTargetPathRewriter();\n        this.extractTruncated = fetcherConfig.isExtractTruncated();\n        this.ccIndexReaderCounter = ccIndexReaderCounter;\n    }\n\n    public void extract(FetchEmitTuple tuple) throws IOException, TikaException {\n        FetchKey fetchKey = tuple.getFetchKey();\n        EmitKey emitKey = tuple.getEmitKey();\n        Metadata metadata = tuple.getMetadata();\n        Path targetPath = targetPathRewriter.rewrite(fetchKey, emitKey, metadata);\n        if (", "first_line_groundtruth": "RangeFetcher) fetcherConfig.newFetcher();", "first_line_prediction": "RangeFetcher) fetcherConfig.newFetcher();", "match": 1}
{"groundtruth": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);", "prediction": " ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);\n        }\n    }\n\n    private byte[] fetchWarcBytes(FetchEmitTuple t) throws IOException, TikaException {\n        try (InputStream is = fetcher.fetch(t)) {\n            return IOUtils.toByteArray(is);\n        }\n    }\n\n    private void parseWarc(String id, CCIndexRecord ccIndexRecord, byte[] warcRecordGZBytes)\n            throws IOException {\n        try (InputStream is = new GZIP", "first_line_groundtruth": "ccIndexRecord.getFilename(),", "first_line_prediction": " ccIndexRecord.getFilename(),", "match": 0}
{"groundtruth": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();", "prediction": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();\n        this.extractTruncated = fetcherConfig.isExtractTruncated();\n        this.ccIndexReaderCounter = ccIndexReaderCounter;\n    }\n\n    public void extract(FetchEmitTuple tuple) throws IOException, TikaException {\n        FetchKey fetchKey = tuple.getFetchKey();\n        EmitKey emitKey = tuple.getEmitKey();\n        Metadata metadata = tuple.getMetadata();\n        Path targetPath = targetPathRewriter.rewrite(fetchKey, emitKey, metadata);\n        if (targetPath == null) {\n            return;\n        }\n       ", "first_line_groundtruth": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();", "first_line_prediction": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();", "match": 1}
{"groundtruth": "ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);", "prediction": "0, length, targetPath, targetDigest);\n        } else {\n            EXTRACTED_LOGGER.info(\"\", ccIndexRecord.getUrl(),\n                    ccIndexRecord.getNormalizedMime(),\n                    ccIndexRecord.getNormalizedMimeDetected(),\n                    ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    0, length, targetPath, targetDigest);\n        }\n    }\n\n    private byte[] fetchWarcBytes(FetchEmitTuple t) throws IOException, TikaException {\n        try (InputStream is = fetcher.fetch(t)) {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "first_line_groundtruth": "ccIndexRecord.getTruncated(), targetDigest, length,", "first_line_prediction": "0, length, targetPath, targetDigest);", "match": 0}
{"groundtruth": "r.getNormalizedMimeDetected());", "prediction": "1l);\n            }\n            return true;\n        }\n\n        private void increment(Map<String, MutableLong> counts, long val) {\n            MutableLong c = counts.get(val);\n            if (c == null) {\n                c = new MutableLong(0);\n                counts.put(val, c);\n            }\n            c.increment();\n        }\n\n        @Override\n        public void close() throws IOException {\n            counter.close();\n        }\n    }", "first_line_groundtruth": "r.getNormalizedMimeDetected());", "first_line_prediction": "1l);", "match": 0}
{"groundtruth": ".INSTANCE.getNumberPlan(deviceContext.getLineType(), deviceContext.getCountryCode());", "prediction": ".getNumberPlan(deviceContext.getCountryCode());\n        }\n\n        if (numberplan == null) {\n            numberplan = NumberPlanFactory.getNumberPlan(wrapper.getCountryCode());\n        }\n\n        if (numberplan == null) {\n            LOGGER.debug(\"NumberPlan was not initialized\");\n            return null;\n        }\n\n        if (numberplan.isNdcOptional()) {\n            if (deviceContext != null) {\n                if (deviceContext.getLineType() == DeviceContextLineType.NDC) {\n                    return wrapper.getDialableNumber();\n                } else {\n                    return fallbackNormalizationFromDeviceContextToDefaultRegion", "first_line_groundtruth": ".INSTANCE.getNumberPlan(deviceContext.getLineType(), deviceContext.getCountryCode());", "first_line_prediction": ".getNumberPlan(deviceContext.getCountryCode());", "match": 0}
{"groundtruth": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());", "prediction": ".put(DeFixedLineNumberPlan.DE_FIXED_LINE_1.getCountryCode(), new DeFixedLineNumberPlan.DE_FIXED_LINE_1());\n        fixedLineNumberPlans.put(DeFixedLineNumberPlan.DE_FIXED_LINE_2.getCountryCode(), new DeFixedLineNumberPlan.DE_FIXED_LINE_2());\n        fixedLineNumberPlans.put(DeFixedLineNumberPlan.DE_FIXED_LINE_3.getCountryCode(), new DeFixedLineNumberPlan.DE_FIXED_LINE_3());\n        fixedLineNumberPlans.put(DeFixedLineNumberPlan.DE_FIXED_LINE_4.get", "first_line_groundtruth": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());", "first_line_prediction": ".put(DeFixedLineNumberPlan.DE_FIXED_LINE_1.getCountryCode(), new DeFixedLineNumberPlan.DE_FIXED_LINE_1());", "match": 0}
{"groundtruth": "(), deviceContext.getCountryCode());", "prediction": "(), deviceContext.getCountryCode());\n        }\n\n        if (numberplan == null) {\n            numberplan = NumberPlanFactory.INSTANCE.getNumberPlan(wrapper.getCountryCode());\n        }\n\n        if (numberplan == null) {\n            LOGGER.debug(\"NumberPlan was not initialized\");\n            return null;\n        }\n\n        if (numberplan.isNdcOptional()) {\n            return wrapper.getDialableNumber();\n        }\n\n        if (numberplan.isNdcRequired()) {\n            if (deviceContext != null) {\n                if (deviceContext.getNdc() != null) {\n                    return wrapper.getDialable", "first_line_groundtruth": "(), deviceContext.getCountryCode());", "first_line_prediction": "(), deviceContext.getCountryCode());", "match": 1}
{"groundtruth": "deviceContext.getNationalDestinationCode());", "prediction": " numberplan, deviceContext);\n        }\n\n        if (wrapper.hasRegionNationalDestinationCode() && deviceContext != null) {\n            //Number plan is using a NationalPrefix aka Trunc Code ... so we could add Area Code if not included in the number.\n            return wrapper.extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalDestinationCode(), numberplan, deviceContext);\n        }\n\n        if (wrapper.hasRegionNationalDestinationCode() && deviceContext == null) {\n            //Number plan is using a NationalPrefix aka Trunc Code ... so we could add Area Code if not included in the number.\n           ", "first_line_groundtruth": "deviceContext.getNationalDestinationCode());", "first_line_prediction": " numberplan, deviceContext);", "match": 0}
{"groundtruth": "(!normalizedDeviceContext.getCountryCode().equals(DeviceContext.UNKNOWN_VALUE)) {", "prediction": " (normalizedDeviceContext == null) {\n            return fallbackNormalizationFromDeviceContextToDefaultRegionCode(number, normalizerPhoneNumber.getDialableNumber());\n        }\n\n        PhoneLibWrapper wrapper = new PhoneLibWrapper(number, normalizedDeviceContext.getCountryCode());\n\n        if (wrapper.getSemiNormalizedNumber() == null) {\n            return wrapper.getDialableNumber();\n        }\n\n        if (wrapper.isShortNumber()) {\n            //if it is a short number, we can't add area code nor country code, so returning the dialable.\n            return wrapper.getDialableNumber();\n        }\n\n        // international", "first_line_groundtruth": "(!normalizedDeviceContext.getCountryCode().equals(DeviceContext.UNKNOWN_VALUE)) {", "first_line_prediction": " (normalizedDeviceContext == null) {", "match": 0}
{"groundtruth": "= PhoneLibWrapper.getRegionCodeForCountryCode(normalizedDeviceContext.getCountryCode());", "prediction": " = normalizedDeviceContext.getCountryCode();\n            PhoneLibWrapper wrapper = new PhoneLibWrapper(number, regionCode);\n            if (wrapper.getSemiNormalizedNumber() == null) {\n                return wrapper.getDialableNumber();\n            }\n        }\n\n        return fallbackNormalizationFromDeviceContextToDefaultRegionCode(number, normalizerPhoneNumber.getDialableNumber());\n    }", "first_line_groundtruth": "= PhoneLibWrapper.getRegionCodeForCountryCode(normalizedDeviceContext.getCountryCode());", "first_line_prediction": " = normalizedDeviceContext.getCountryCode();", "match": 0}
{"groundtruth": "if (! normalizerPhoneNumber.isNormalizingTried()) {", "prediction": " if (normalizerPhoneNumber.getSemiNormalizedNumber() == null) {\n             return normalizerPhoneNumber.getDialableNumber();\n         }\n\n        // if the number is not valid, we return the dialable number.\n        if (!normalizerPhoneNumber.isValid()) {\n            return normalizerPhoneNumber.getDialableNumber();\n        }\n\n        // if the number is valid, we check if the number has a special format or is not valid at all.\n        PhoneLibWrapper wrapper = new PhoneLibWrapper(number, deviceContext.getCountryCode());\n\n        if (wrapper.getSemiNormalizedNumber() == null) {\n            return", "first_line_groundtruth": "if (! normalizerPhoneNumber.isNormalizingTried()) {", "first_line_prediction": " if (normalizerPhoneNumber.getSemiNormalizedNumber() == null) {", "match": 0}
{"groundtruth": "(PhoneLibWrapper.getCountryCodeForRegion(fallBackRegionCode) > 0) {", "prediction": " (fallBackRegionCode != null) {\n            this.fallbackRegionCode = fallBackRegionCode;\n        }\n    }\n\n    @Override\n    public String normalize(String phoneNumber, DeviceContext deviceContext) {\n        if (phoneNumber == null) {\n            return null;\n        }\n        if (deviceContext != null) {\n            deviceContext = DeviceContextMapper.map(deviceContext);\n        }\n        String normalizedPhoneNumber = normalize(phoneNumber, deviceContext, fallbackRegionCode);\n        if (normalizedPhoneNumber == null) {\n            LOGGER.warn(\"Failed to normalize phone number: {}\", phoneNumber);\n        }\n        return normalizedPhoneNumber;\n    }", "first_line_groundtruth": "(PhoneLibWrapper.getCountryCodeForRegion(fallBackRegionCode) > 0) {", "first_line_prediction": " (fallBackRegionCode != null) {", "match": 0}
{"groundtruth": "(wrapper.hasRegionNationalAccessCode() && deviceContext != null) {", "prediction": " (wrapper.isNdcOptional(numberplan)) {\n            //if NDC is optional, we can't add area code nor country code, so returning the dialable.\n            return wrapper.getDialableNumber();\n        }\n\n        if (wrapper.isNacOptional(numberplan)) {\n            //if NAC is optional, we can't add area code nor country code, so returning the dialable.\n            return wrapper.getDialableNumber();\n        }\n\n        if (wrapper.isNdcRequired(numberplan)) {\n            //if NDC is required, we can't add area code nor country code,", "first_line_groundtruth": "(wrapper.hasRegionNationalAccessCode() && deviceContext != null) {", "first_line_prediction": " (wrapper.isNdcOptional(numberplan)) {", "match": 0}
{"groundtruth": ".extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), deviceContext.getNationalDestinationCode());", "prediction": ".getDialableNumber();\n        }\n\n        if (wrapper.hasRegionNationalDestinationCode() && deviceContext != null) {\n            //Number plan is using a NationalPrefix aka Trunc Code ... so we could add Area Code if not included in the number.\n            return wrapper.getDialableNumber();\n        }\n\n        if (wrapper.hasRegionNationalDestinationCode() && deviceContext == null) {\n            //Number plan is using a NationalPrefix aka Trunc Code ... so we could add Area Code if not included in the number.\n            return wrapper.getDialableNumber();\n        }\n\n        if (wrapper.has", "first_line_groundtruth": ".extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), deviceContext.getNationalDestinationCode());", "first_line_prediction": ".getDialableNumber();", "match": 0}
{"groundtruth": ") : wrapper.getE164Formatted();", "prediction": "wrapper.getNationalAccessCode()) :\n                wrapper.extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), wrapper.getNationalDestinationCode());\n    }\n\n    @Override\n    public String normalizePhoneNumber(String number, DeviceContext deviceContext) {\n        PhoneLibWrapper wrapper = new PhoneLibWrapper(number, deviceContext.getCountryCode());\n\n        if (wrapper.getSemiNormalizedNumber() == null) {\n            return wrapper.getDialableNumber();\n        }\n        if (wrapper.isShortNumber()) {\n             ///if it is a short number, we can't add area code nor country code,", "first_line_groundtruth": ") : wrapper.getE164Formatted();", "first_line_prediction": "wrapper.getNationalAccessCode()) :", "match": 0}
{"groundtruth": "return wrapper.getE164Formatted();", "prediction": " return wrapper.extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalDestinationCode(), deviceContext.getCountryCode());\n    }\n\n    @Override\n    public String normalizePhoneNumber(String number, String dialableNumber) {\n        if (number == null) {\n            return null;\n        }\n\n        if (dialableNumber == null) {\n            dialableNumber = number;\n        }\n\n        if (dialableNumber.length() < 10) {\n            return dialableNumber;\n        }\n\n        if (dialableNumber.startsWith(\"+\")) {\n            dialableNumber = dialableNumber.substring(1);\n        }\n\n        if", "first_line_groundtruth": "return wrapper.getE164Formatted();", "first_line_prediction": " return wrapper.extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalDestinationCode(), deviceContext.getCountryCode());", "match": 0}
{"groundtruth": "boolean hasNoCCAndNoNAC = wrapper.hasNoCountryCodeNorNationalAccessCode();", "prediction": " if (wrapper.getNationalNumber().equals(wrapper.getSemiNormalizedNumber())) {\n             return wrapper.getE164Formatted();\n         }\n\n        DeviceContext deviceContext = DeviceContextMapper.INSTANCE.getDeviceContext(wrapper.getCountryCode(), wrapper.getNationalNumber());\n\n        if (deviceContext != null) {\n            return normalize(wrapper, deviceContext);\n        }\n\n        return fallbackNormalizationFromDeviceContextToDefaultRegionCode(number, wrapper.getDialableNumber());\n    }", "first_line_groundtruth": "boolean hasNoCCAndNoNAC = wrapper.hasNoCountryCodeNorNationalAccessCode();", "first_line_prediction": " if (wrapper.getNationalNumber().equals(wrapper.getSemiNormalizedNumber())) {", "match": 0}
{"groundtruth": "!normalizedDeviceContext.getNationalDestinationCode().equals(DeviceContext.UNKNOWN_VALUE)) {", "prediction": "normalizerPhoneNumber.isNormalizingTried()) {\n                return normalize(normalizerPhoneNumber, normalizedDeviceContext);\n            }\n        }\n\n        // fallback to default region code\n        return fallbackNormalizationFromDeviceContextToDefaultRegionCode(number, normalizerPhoneNumber.getDialableNumber());\n    }", "first_line_groundtruth": "!normalizedDeviceContext.getNationalDestinationCode().equals(DeviceContext.UNKNOWN_VALUE)) {", "first_line_prediction": "normalizerPhoneNumber.isNormalizingTried()) {", "match": 0}
{"groundtruth": "(hitIndicator.expired())\n                latestHitIndicators.remove(i);", "prediction": "(hitIndicator.isExpired()) {\n                latestHitIndicators.remove(i);\n            }\n        }\n\n        if(currentHitMarker != null) {\n            currentHitMarker.tick();\n            if(currentHitMarker.isExpired()) {\n                currentHitMarker = null;\n            }\n        }\n    }\n\n    public static void render() {\n        if(!HitIndicatorClientConfigs.EnableHitIndication.get())\n            return;\n\n        for(HitIndicator hitIndicator : latestHitIndicators) {\n            hitIndicator.render();\n        }\n\n        if(currentHitMarker != null) {\n            currentHitMarker.render();\n        }\n    }", "first_line_groundtruth": "(hitIndicator.expired())", "first_line_prediction": "(hitIndicator.isExpired()) {", "match": 0}
{"groundtruth": "if (!destroyed || !capacity.isDestroyed() || this.stress != Integer.MAX_VALUE){", "prediction": " getOrCreateNetwork().remove(block);\n            }\n            block.detachKinetics();\n            block.setSpeed(0);\n            block.setStress(0);\n            block.setOverStressed(false);\n            block.setCapacity(0);\n            block.setLastStressApplied(0);\n            block.setLastCapacityProvided(0);\n            block.setLifeBlock(0);\n            block.setLifeBlockBlocked(false);\n            block.setDestroyed(true);\n            block.setRemoved();\n            block.setChanged();\n            block.setRemoved();\n            block.setChanged();\n            block.", "first_line_groundtruth": "if (!destroyed || !capacity.isDestroyed() || this.stress != Integer.MAX_VALUE){", "first_line_prediction": " getOrCreateNetwork().remove(block);", "match": 0}
{"groundtruth": "capacity.setDestroyed(true);", "prediction": " block.getLevel().playSound(null, block.getBlockPos(), SoundEvents.BLOCK_FIRE_EXTINGUISH, SoundSource.BLOCKS, 1, 1);\n                }\n            }\n        }\n\n        if (left<0){\n            if (getOrCreateNetwork()!=null){\n                if (!destroyed || !capacity.isDestroyed() || this.stress != Integer.MAX_VALUE){\n                    destroyed = true;\n                    getOrCreateNetwork().updateCapacityFor(block,0);\n                    getOrCreateNetwork().updateStressFor(block, Integer.MAX_VALUE);\n                    getOrCreateNetwork().updateNetwork();\n                   ", "first_line_groundtruth": "capacity.setDestroyed(true);", "first_line_prediction": " block.getLevel().playSound(null, block.getBlockPos(), SoundEvents.BLOCK_FIRE_EXTINGUISH, SoundSource.BLOCKS, 1, 1);", "match": 0}
{"groundtruth": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacity(block.getBlockState().getBlock());", "prediction": " if (block.level.isClientSide){\n             return;\n         }\n        if (block.level.isClientSide){\n            return;\n        }\n        if (block.level.isClientSide){\n            return;\n        }\n        if (block.level.isClientSide){\n            return;\n        }\n        if (block.level.isClientSide){\n            return;\n        }\n        if (block.level.isClientSide){\n            return;\n        }\n        if (block.level.isClientSide){\n            return;\n        }\n        if (block.level.isClientSide){\n            return;\n        }\n       ", "first_line_groundtruth": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacity(block.getBlockState().getBlock());", "first_line_prediction": " if (block.level.isClientSide){", "match": 0}
{"groundtruth": "(capacity.getDurability()+damage_for_speed);", "prediction": "(capacity.getDurability() - damage_for_speed);\n            block.setSpeed(block.getSpeed() - damage_for_speed);\n            block.setStress(block.getStress() + 1);\n            block.setOverStressed(true);\n            block.setLifeBlock(block.getLifeBlock() - 1);\n            block.setLifeBlockBlocked(true);\n            block.setLastStressApplied(block.getStress());\n            block.setLastCapacityProvided(block.getCapacity());\n            block.setCapacity(capacity.getDurability());\n            block", "first_line_groundtruth": "(capacity.getDurability()+damage_for_speed);", "first_line_prediction": "(capacity.getDurability() - damage_for_speed);", "match": 0}
{"groundtruth": "= config.durabilityMax - capacity.getDurability();", "prediction": " = 100 - (float)block.getLevel().random.nextInt(100);\n        if (left < 0){\n            left = 0;\n        }\n        if (left > 100){\n            left = 100;\n        }\n        if (left > 0){\n            if (chance < left){\n                if (block.getLevel().random.nextBoolean()){\n                    block.getLevel().setBlock(block.getBlockPos(), Blocks.AIR.defaultBlockState(), 3);\n                }else{\n                    block.getLevel().setBlock(block.getBlockPos(),", "first_line_groundtruth": "= config.durabilityMax - capacity.getDurability();", "first_line_prediction": " = 100 - (float)block.getLevel().random.nextInt(100);", "match": 0}
{"groundtruth": "(MachineCapacityStorage.getInstance().isBlackListBlock(block)){", "prediction": " (block.level.isClientSide){\n            return;\n        }\n        if (block.level.getBlockEntity(block.worldPosition) != block){\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() != block.getBlockState().getBlock()){\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() != block.getBlockState().getBlock()){\n            return;\n        }\n        if (block.level.getBlockState(block.worldPosition).getBlock() != block.getBlockState().getBlock()){\n            return;\n        }\n       ", "first_line_groundtruth": "(MachineCapacityStorage.getInstance().isBlackListBlock(block)){", "first_line_prediction": " (block.level.isClientSide){", "match": 0}
{"groundtruth": "put(\"machine_capacity\",createMachineCapacity().toTag());", "prediction": "putInt(\"capacity\", this.machineCapacity.getCapacity());\n        return nbt;\n    }\n\n    @Override\n    public void deserializeNBT(CompoundTag nbt) {\n        this.machineCapacity = new MachineCapacity(nbt.getInt(\"capacity\"));\n    }", "first_line_groundtruth": "put(\"machine_capacity\",createMachineCapacity().toTag());", "first_line_prediction": "putInt(\"capacity\", this.machineCapacity.getCapacity());", "match": 0}
{"groundtruth": "(!MachineCapacityStorage.getInstance().active){", "prediction": " (block.level.isClientSide) return;\n        if (block.level.getBlockEntity(block.worldPosition) != block) return;\n        if (block.level.getBlockState(block.worldPosition).getBlock() != block.getBlockState().getBlock()) return;\n        if (block.level.getBlockState(block.worldPosition).getBlock() != Blocks.CRUSHING_WHEEL) return;\n        if (block.level.getBlockState(block.worldPosition).getValue(CrushingWheelBlockEntity.FACING) != block.getBlockState().getValue(CrushingWheelBlock", "first_line_groundtruth": "(!MachineCapacityStorage.getInstance().active){", "first_line_prediction": " (block.level.isClientSide) return;", "match": 0}
{"groundtruth": "element.setContent(text);", "prediction": " element.setText(text);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return elements;\n    }\n\n    private int getLengthOfType(Node node, int type) {\n        int count = 0;\n        for (int i = 0; i < node.getChildNodes().getLength(); i++) {\n            Node child = node.getChildNodes().item(i);\n            if (child.getNodeType() == type) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private Map<String, String> mapAttributes(NamedNodeMap attributes) {\n        Map<String, String>", "first_line_groundtruth": "element.setContent(text);", "first_line_prediction": " element.setText(text);", "match": 0}
{"groundtruth": "itemheight = element.getHeight(this.width);", "prediction": " height = element.height();\n                fullHeight += height;\n            }\n        }\n\n        if (fullHeight > this.lastFullHeight) {\n            this.scrollAmount += (fullHeight - this.lastFullHeight) / 2;\n        } else if (fullHeight < this.lastFullHeight) {\n            this.scrollAmount -= (this.lastFullHeight - fullHeight) / 2;\n        }\n\n        this.lastFullHeight = fullHeight;\n    }\n\n    @Override\n    public boolean mouseClicked(double mouseX, double mouseY, int button) {\n        if (this.mouse != null) {", "first_line_groundtruth": "itemheight = element.getHeight(this.width);", "first_line_prediction": " height = element.height();", "match": 0}
{"groundtruth": "TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));", "prediction": " elements.add(serializer.deserialize(child));\n                } else {\n                    elements.addAll(nodeToElements(child));\n                }\n            }\n        }\n        return elements;\n    }\n\n    public String serialize(List<TagElement> elements) {\n        StringBuilder builder = new StringBuilder();\n        for (TagElement element : elements) {\n            builder.append(element.serialize());\n        }\n        return builder.toString();\n    }\n\n    public String serialize(TagElement element) {\n        return element.serialize();\n    }\n\n    public String serialize(TagElement... elements) {\n        StringBuilder builder = new StringBuilder();\n        for (TagElement element", "first_line_groundtruth": "TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));", "first_line_prediction": " elements.add(serializer.deserialize(child));", "match": 0}
{"groundtruth": "element.mouseClicked(mouseX - (columnWidth * index), mouseY, button, columnWidth)) {", "prediction": "element.mouseClicked(mouseX, mouseY, button, columnWidth)) {\n                return true;\n            }\n            index++;\n            mouseX += columnWidth;\n        }\n        return false;\n    }\n\n    @Override\n    public boolean mouseReleased(double mouseX, double mouseY, int button, int width) {\n        int columnWidth = width / this.elements.size();\n        int index = 0;\n        for (TagElement element : elements) {\n            if (element.mouseReleased(mouseX, mouseY, button, columnWidth)) {\n                return true;\n            }\n            index++;\n            mouseX += columnWidth;", "first_line_groundtruth": "element.mouseClicked(mouseX - (columnWidth * index), mouseY, button, columnWidth)) {", "first_line_prediction": "element.mouseClicked(mouseX, mouseY, button, columnWidth)) {", "match": 0}
{"groundtruth": ".max(element.getHeight(width), 20);", "prediction": ".max(element.getHeight(width), 10);\n        }\n        return 10;\n    }\n\n    @Override\n    public void addChild(TagElement child) {\n        this.children.add(child);\n    }\n\n    @Override\n    public void removeChild(TagElement child) {\n        this.children.remove(child);\n    }\n\n    @Override\n    public void clearChildren() {\n        this.children.clear();\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n\n    @Override\n    public TagElement getCurrentChild() {\n       ", "first_line_groundtruth": ".max(element.getHeight(width), 20);", "first_line_prediction": ".max(element.getHeight(width), 10);", "match": 0}
{"groundtruth": "child.getHeight(width);", "prediction": "22;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public boolean mouseReleased(double mouseX, double mouseY, int button, int width) {\n        if (mouseX < 0 || mouseX > width || mouseY < 0 || mouseY > 22) {\n            mouseY -= 22;\n            for (TagElement child : this.children) {\n                if (child.mouseReleased(mouseX, mouseY, button, width)) {\n                    return true;\n                }\n                mouseY -= 22;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public boolean", "first_line_groundtruth": "child.getHeight(width);", "first_line_prediction": "22;", "match": 0}
{"groundtruth": "element.mouseClicked(mouseX, mouseY, button, width - 40);", "prediction": " element.mouseClicked(mouseX, mouseY, button, width);\n        }\n        return false;\n    }\n\n    @Override\n    public boolean mouseReleased(double mouseX, double mouseY, int button, int width) {\n        if (mouseY >= getHeight(width) || mouseY < 0) {\n            return false;\n        }\n        int middle = (getHeight(width - 40) / 2);\n        if (!this.children.isEmpty() && mouseY >= middle - 10 && mouseY <= middle + 10) {\n            if (mouseX > 2 && mouseX <= 16", "first_line_groundtruth": "element.mouseClicked(mouseX, mouseY, button, width - 40);", "first_line_prediction": " element.mouseClicked(mouseX, mouseY, button, width);", "match": 0}
{"groundtruth": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);", "prediction": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);\n    }", "first_line_groundtruth": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);", "first_line_prediction": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);", "match": 1}
{"groundtruth": "bot.getCommand(cmdId).isPresent()) {", "prediction": "botRunner != null) {\n                bot.setBotRunner(botRunner);\n            }\n            cmd = bot.getCommand(cmdId);\n        } else {\n            cmd = new Command();\n        }\n        \n        cmd.setCommand(command);\n        cmd.setArgs(arr);\n        \n        return cmd;\n    }\n    \n    public static CommandParser from(String command, BotRunner botRunner) {\n        return CommandParser.builder()\n                .command(command)\n                .botRunner(botRunner)\n                .build();\n    }\n    \n    public static CommandParser from(String command) {\n        return CommandParser.builder()\n                .command(", "first_line_groundtruth": "bot.getCommand(cmdId).isPresent()) {", "first_line_prediction": "botRunner != null) {", "match": 0}
{"groundtruth": "String key = command.getId();", "prediction": "\n\n        if (command.getClass().isAnnotationPresent(Whitelist.class)) {\n            if (!this.context.isWhitelisted(command.getClass().getAnnotation(Whitelist.class).value())) {\n                return;\n            }\n        }\n\n        if (command.getClass().isAnnotationPresent(Command.class)) {\n            if (!this.context.isCommand(command.getClass().getAnnotation(Command.class).value())) {\n                return;\n            }\n        }\n\n        try {\n            command.execute(this.context, event);\n        } catch (Exception ex) {\n            log.log(Level.SEVERE, \"Error executing command", "first_line_groundtruth": "String key = command.getId();", "first_line_prediction": "", "match": 0}
{"groundtruth": "filter(c -> c.getSources().length == 0).findFirst();", "prediction": "filter(c -> c.getClass().getDeclaredAnnotation(Command.class).start()).findFirst();\n        return optCommand.orElse(null);\n    }", "first_line_groundtruth": "filter(c -> c.getSources().length == 0).findFirst();", "first_line_prediction": "filter(c -> c.getClass().getDeclaredAnnotation(Command.class).start()).findFirst();", "match": 0}
{"groundtruth": "= bot.getStartCommand();", "prediction": " = bot.getClass().getAnnotation(Command.class);\n        var whitelist = bot.getClass().getAnnotation(Whitelist.class);\n\n        if (command == null) {\n            throw new RuntimeException(\"Bot class must be annotated with @Command\");\n        }\n\n        if (whitelist == null) {\n            throw new RuntimeException(\"Bot class must be annotated with @Whitelist\");\n        }\n\n        if (command.value().length() == 0) {\n            throw new RuntimeException(\"Bot class must be annotated with @Command(value=\\\"\\\")\");\n        }\n\n        if (whitelist.value().length == 0) {\n            throw new RuntimeException(\"Bot class must", "first_line_groundtruth": "= bot.getStartCommand();", "first_line_prediction": " = bot.getClass().getAnnotation(Command.class);", "match": 0}
{"groundtruth": "return command.getHelp();", "prediction": " return null;\n    }\n\n    public void sendDirectMessage(PublicKey recipient, String message, ICommand command) {\n        var event = new DirectMessageEvent(recipient, message, command.getId());\n        this.context.addEvent(event.getId(), event.getCreatedAt());\n        this.context.addEvent(event.getId(), event.getCreatedAt());\n        this.context.addEvent(event.getId(), event.getCreatedAt());\n        this.context.addEvent(event.getId(), event.getCreatedAt());\n        this.context.addEvent(event.getId(), event.getCreatedAt());\n        this.context", "first_line_groundtruth": "return command.getHelp();", "first_line_prediction": " return null;", "match": 0}
{"groundtruth": ", \"checkExecutionOrder of {", "prediction": ", \"checkExecutionOrder\");\n    }", "first_line_groundtruth": ", \"checkExecutionOrder of {", "first_line_prediction": ", \"checkExecutionOrder\");", "match": 0}
{"groundtruth": "(command.getId());", "prediction": "();\n            return securityConfiguration.getGroupUsers(group);\n        } catch (IOException ex) {\n            log.log(Level.SEVERE, null, ex);\n        }\n        return new String[0];\n    }\n\n    private void validateCommandParameters(ICommand command) {\n        var violations = Validation.byProvider(HibernateValidator.class).configure().buildValidatorFactory().getValidator().validate(command);\n        if (!violations.isEmpty()) {\n            throw new RuntimeException(String.format(\"Command %s has invalid parameters: %s\", new Object[]{command.getId(), violations.toString()}));\n        }\n    }\n\n    private", "first_line_groundtruth": "(command.getId());", "first_line_prediction": "();", "match": 0}
{"groundtruth": "this.execute(command, null);", "prediction": "\n\n        if (command.getClass().isAnnotationPresent(Whitelist.class)) {\n            if (!context.getWhitelist().contains(command.getClass().getAnnotation(Whitelist.class).value())) {\n                log.log(Level.SEVERE, \"Command {0} is not whitelisted\", command.getClass().getAnnotation(Whitelist.class).value());\n                return;\n            }\n        }\n\n        if (command.getClass().isAnnotationPresent(Command.class)) {\n            if (!command.getClass().getAnnotation(Command.class).value().equals(context.getCommand())) {\n                log.log(Level.SEVERE, \"Command {", "first_line_groundtruth": "this.execute(command, null);", "first_line_prediction": "", "match": 0}
{"groundtruth": ".getSizeZ() <= 1 && Math.abs(center.getY() - pos.getY()) <= area.getSizeY();", "prediction": ".getSizeZ() <= 1;\n    };\n\n    /**\n     * Horizontal cuboid shape with base of ellipse with radius equal to area's <i>x</i> and <i>y</i> size, and height equal to doubled <i>y</i> size\n     */\n    AreaShape CUBOID = (area, pos) -> {\n        Location center = area.getCenter();\n        Point2D centerPoint = new Point2D(center.getX(), center.getY());\n        Point2D posPoint = new Point2D(pos.getX(), pos.getY());\n\n        return (", "first_line_groundtruth": ".getSizeZ() <= 1 && Math.abs(center.getY() - pos.getY()) <= area.getSizeY();", "first_line_prediction": ".getSizeZ() <= 1;", "match": 0}
{"groundtruth": "load(gameMap, gameMap.getName() + \"_\" + System.currentTimeMillis());", "prediction": " load(gameMap, false);\n    }\n\n    /**\n     * Loads specified map. If any map is loaded already, new map won't be loaded<br/>\n     * Loading process consists in creating <i>new world</i> by copying its insides from source stored in {@link GameMap} object.\n     * Player won't be warped to this world automatically, thus it has to be done by hand.\n     * You can see how to do it in <a href=\"https://github.com/TheKaVu/GameAPI/wiki/World-Management\">GameAPI wiki</a>\n     * @", "first_line_groundtruth": "load(gameMap, gameMap.getName() + \"_\" + System.currentTimeMillis());", "first_line_prediction": " load(gameMap, false);", "match": 0}
{"groundtruth": "center = area.getCenter();", "prediction": " loc = pos.clone();\n        double x = loc.getX();\n        double y = loc.getY();\n        double z = loc.getZ();\n        return (x*x + y*y + z*z) <= (area.getSize().getX() * area.getSize().getY() * area.getSize().getZ());\n    };\n\n    /**\n     * Cylindrical shape with each radius equal to area's <i>x</i> and <i>z</i> size\n     */\n    AreaShape CYLINDER = (area, pos) -> {\n        Location  loc = pos.clone();\n       ", "first_line_groundtruth": "center = area.getCenter();", "first_line_prediction": " loc = pos.clone();", "match": 0}
{"groundtruth": "(gameMap.getSource(), activeWorldFolder);", "prediction": "(gameMap.getFolder(), activeWorldFolder);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n\n        this.world = Bukkit.getWorld(worldName);\n        if(world == null) {\n            this.world = Bukkit.createWorld(new WorldCreator(worldName));\n        }\n\n        return true;\n    }\n\n    /**\n     * Unloads currently loaded map. If no map is loaded, nothing happens\n     * @return {@code true} if map was unloaded; {@code false} otherwise\n     */\n    public boolean unload(){\n        if(!isLoaded", "first_line_groundtruth": "(gameMap.getSource(), activeWorldFolder);", "first_line_prediction": "(gameMap.getFolder(), activeWorldFolder);", "match": 0}
{"groundtruth": "= csStats.getProfileInfos(userid);", "prediction": " = csStats.getProfileData(userid);\n        String profileName = profileData.getString(\"personaname\");\n        String profileAvatar = profileData.getString(\"avatar\");\n        String profileUrl = profileData.getString(\"profileurl\");\n        String profileCountry = profileData.getString(\"loccountrycode\");\n        String profileState = profileData.getString(\"locstatecode\");\n        String profileCity = profileData.getString(\"loccityname\");\n        String profileCountryFlag = String.format(API_FLAGS, profileCountry);\n\n        // Create embed\n        EmbedBuilder embed = new EmbedBuilder();\n        embed.setTitle(String.", "first_line_groundtruth": "= csStats.getProfileInfos(userid);", "first_line_prediction": " = csStats.getProfileData(userid);", "match": 0}
{"groundtruth": "= csStats.getStatistics(userid);", "prediction": " = csStats.getUserStats(userid);\n        if (userStats == null) {\n            String msg = String.format(\"Couldn't get user statistics for user id: %s\", userid);\n            event.reply(msg).queue();\n            return;\n        }\n\n        // Get user flags\n        String flags = csStats.getUserFlags(userid);\n        if (flags == null) {\n            String msg = String.format(\"Couldn't get user flags for user id: %s\", userid);\n            event.reply(msg).queue();\n            return;\n        }\n\n        // Get user name\n        String name = csStats.getUser", "first_line_groundtruth": "= csStats.getStatistics(userid);", "first_line_prediction": " = csStats.getUserStats(userid);", "match": 0}
{"groundtruth": "Main.getLogger().error(\"The json body for request '{", "prediction": " return null;\n        }\n    }", "first_line_groundtruth": "Main.getLogger().error(\"The json body for request '{", "first_line_prediction": " return null;", "match": 0}
{"groundtruth": "Main.getLogger().error(\"'success' was not '1' when trying to get statistics for {", "prediction": " return null;\n        }\n\n        JSONArray objPlayers = objResponse.getJSONArray(\"players\");\n        if (objPlayers.length() == 0) {\n            return null;\n        }\n\n        JSONObject objPlayer = objPlayers.getJSONObject(0);\n        String steamid = objPlayer.getString(\"steamid\");\n        if (steamid == null) {\n            return null;\n        }\n\n        return steamid;\n    }\n\n    public String getStats(String userid) {\n        String steamid = getID64(userid);\n        if (steamid == null) {\n            return null;\n        }\n\n        String query = String.format", "first_line_groundtruth": "Main.getLogger().error(\"'success' was not '1' when trying to get statistics for {", "first_line_prediction": " return null;", "match": 0}
{"groundtruth": "(hangman.initialize()) {", "prediction": " (hangman.start()) {\n            games.put(user, hangman);\n        }\n    }\n\n    @Override\n    public void handle(Event event) {\n        if (event instanceof SlashCommandInteractionEvent) {\n            handle((SlashCommandInteractionEvent) event);\n        }\n    }\n\n    public static HangmanCmd getInstance() {\n        return instance;\n    }", "first_line_groundtruth": "(hangman.initialize()) {", "first_line_prediction": " (hangman.start()) {", "match": 0}
{"groundtruth": "if (!mTXVodPlayerWrapper.isPlaying()) {", "prediction": " if (mTXVodPlayerWrapper.isPlaying()) {\n                mTXVodPlayerWrapper.pause();\n                mPauseImageView.setImageResource(R.drawable.ic_play);\n            } else {\n                mTXVodPlayerWrapper.resume();\n                mPauseImageView.setImageResource(R.drawable.ic_pause);\n            }\n        }\n    }\n\n    @Override\n    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n        if (fromUser) {\n            mTXVodPlayerWrapper.seekTo(progress);\n        }\n    }\n\n    @Override\n    public void onStartTrackingTouch(", "first_line_groundtruth": "if (!mTXVodPlayerWrapper.isPlaying()) {", "first_line_prediction": " if (mTXVodPlayerWrapper.isPlaying()) {", "match": 0}
{"groundtruth": "TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());", "prediction": "TAG, \"setTXVodPlayer: \" + mTXVodPlayerWrapper.getPlayState());\n        if (mTXVodPlayerWrapper.getPlayState() == TXVodPlayerWrapper.PLAY_STATE_PREPARED) {\n            mTXCloudVideoView.start();\n        }\n    }\n\n    private void init(Context context) {\n        mRootView = LayoutInflater.from(context).inflate(R.layout.tx_video_base_view, this, true);\n        mSeekBar = mRootView.findViewById(R.id.seekBar);\n        mSeekBar.setOnSeekBarChangeListener(this", "first_line_groundtruth": "TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());", "first_line_prediction": "TAG, \"setTXVodPlayer: \" + mTXVodPlayerWrapper.getPlayState());", "match": 0}
{"groundtruth": "mTXVodPlayerWrapper.setVodChangeListener(this);", "prediction": " mTXVodPlayerWrapper.resumePlay();\n        }\n    }\n\n    @Override\n    public void onPlayEventChanged(TXVodPlayerWrapper.PlayEvent playEvent) {\n        if (playEvent == TXVodPlayerWrapper.PlayEvent.PLAY_EVT_PLAY_PROGRESS) {\n            Bundle param = mTXVodPlayerWrapper.getPlayEventParam();\n            if (param != null) {\n                handlePlayProgress(param);\n            }\n        }\n    }", "first_line_groundtruth": "mTXVodPlayerWrapper.setVodChangeListener(this);", "first_line_prediction": " mTXVodPlayerWrapper.resumePlay();", "match": 0}
{"groundtruth": "i(TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());", "prediction": "d(TAG, \"setTXVodPlayer: \" + mTXVodPlayerWrapper.getPlayState());\n        if (mTXVodPlayerWrapper.getPlayState() == TXVodPlayerWrapper.PLAY_STATE_PREPARED) {\n            mTXCloudVideoView.start();\n        }\n    }\n\n    private void init(Context context) {\n        mRootView = LayoutInflater.from(context).inflate(R.layout.tx_video_base_view, this, true);\n        mSeekBar = mRootView.findViewById(R.id.seekBar);\n        mSeekBar.setOnSeekBarChangeListener", "first_line_groundtruth": "i(TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());", "first_line_prediction": "d(TAG, \"setTXVodPlayer: \" + mTXVodPlayerWrapper.getPlayState());", "match": 0}
{"groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");", "prediction": " event.reply(\"No quotes found for this category\").queue();\n                 return;\n            }\n\n            event.replyEmbeds(Main.getEmbed(quote)).queue();\n        } else {\n            // Get quote from category\n            if (categories.containsKey(category)) {\n                Callable<String> callable = categories.get(category);\n\n                String quote = Utils.getFromCallable(callable);\n                if (quote == null) {\n                    event.reply(\"No quotes found for this category\").queue();\n                    return;\n                }\n\n                event.replyEmbeds(Main.getEmbed(quote)).queue();\n            } else {\n                event", "first_line_groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");", "first_line_prediction": " event.reply(\"No quotes found for this category\").queue();", "match": 0}
{"groundtruth": "mTXVodPlayerWrapper.resumePlay();", "prediction": " mTXVodPlayerWrapper.startPlay();\n            } else {\n                mTXVodPlayerWrapper.pausePlay();\n            }\n        }\n    }\n\n    @Override\n    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n        if (fromUser) {\n            if (mTXVodPlayerWrapper != null) {\n                mTXVodPlayerWrapper.seekTo(progress);\n            }\n        }\n    }\n\n    @Override\n    public void onStartTrackingTouch(SeekBar seekBar) {\n        mStartSeek = true;\n    }\n\n    @Override\n    public void onStopTrackingTouch(SeekBar seek", "first_line_groundtruth": "mTXVodPlayerWrapper.resumePlay();", "first_line_prediction": " mTXVodPlayerWrapper.startPlay();", "match": 0}
{"groundtruth": "Log.i(TAG, \"[startPlay] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());", "prediction": " mTXCloudVideoView.requestLayout();\n        }\n    }\n\n    public void stopPlay() {\n        if (mTXVodPlayerWrapper != null) {\n            mTXVodPlayerWrapper.pausePlay();\n            mPauseImageView.setVisibility(View.VISIBLE);\n            mTXVodPlayerWrapper.setVodChangeListener(null);\n        }\n    }\n\n    @Override\n    public void onPlayEventChanged(TXVodPlayerWrapper.PlayEvent playEvent) {\n        if (playEvent == TXVodPlayerWrapper.PlayEvent.PLAY_EVT_PLAY_PROGRESS) {\n            Bundle param = mTXVodPlayerWrapper.getPlayEvent", "first_line_groundtruth": "Log.i(TAG, \"[startPlay] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());", "first_line_prediction": " mTXCloudVideoView.requestLayout();", "match": 0}
{"groundtruth": "(scramble.initialize()) {", "prediction": " (scramble.start()) {\n            games.put(user, scramble);\n        }\n    }\n\n    public static ScrambleCmd getInstance() {\n        return instance;\n    }", "first_line_groundtruth": "(scramble.initialize()) {", "first_line_prediction": " (scramble.start()) {", "match": 0}
{"groundtruth": ".status = HttpStatus.getEnum(code);", "prediction": ".status = new HttpStatus(code);\n        this.headers = new Headers(rawHeaders);\n        this.body = body;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    public HttpStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(HttpStatus status) {\n        this.status = status;\n    }\n\n    public Headers getHeaders() {\n        return headers;\n    }\n\n    public void setHeaders(Headers headers) {\n        this.headers = headers;\n    }\n\n    public byte[] getBody", "first_line_groundtruth": ".status = HttpStatus.getEnum(code);", "first_line_prediction": ".status = new HttpStatus(code);", "match": 0}
{"groundtruth": "videoView.stopForPlaying();", "prediction": " if (videoView != null) {\n             videoView.release();\n         }\n    }\n\n    @Override\n    public void onViewAttachedToWindow(@NonNull ShortVideoPlayAdapter.VideoViewHolder holder) {\n        super.onViewAttachedToWindow(holder);\n        Log.i(TAG,\"onViewAttachedToWindow\");\n        TXVideoBaseView videoView = (TXVideoBaseView) holder.mRootView.findViewById(R.id.baseItemView);\n        if (videoView != null) {\n            videoView.setVideoView(holder.mVideoView);\n        }\n    }\n\n    @Override\n    public void", "first_line_groundtruth": "videoView.stopForPlaying();", "first_line_prediction": " if (videoView != null) {", "match": 0}
{"groundtruth": "model.addAttribute(\"flights\", flightService.getUserFlights(principal));", "prediction": " model.addAttribute(\"user\", userService.getUserByPrincipal(principal));\n         return \"personal\";\n     }", "first_line_groundtruth": "model.addAttribute(\"flights\", flightService.getUserFlights(principal));", "first_line_prediction": " model.addAttribute(\"user\", userService.getUserByPrincipal(principal));", "match": 0}
{"groundtruth": "txVodPlayerWrapper.stopPlay();", "prediction": " txVodPlayerWrapper.release();\n        }\n        mUrlPlayerMap.clear();\n    }\n\n    public List<VideoModel> playedVideoModel() {\n        List<VideoModel> playedVideoList = new ArrayList<>();\n        for (TXVodPlayerWrapper txVodPlayerWrapper : mUrlPlayerMap.values()) {\n            if (txVodPlayerWrapper.isPlaying()) {\n                playedVideoList.add(txVodPlayerWrapper.getVideoModel());\n            }\n        }\n        return playedVideoList;\n    }", "first_line_groundtruth": "txVodPlayerWrapper.stopPlay();", "first_line_prediction": " txVodPlayerWrapper.release();", "match": 0}
{"groundtruth": "userRepository.findByEmail(principal.getName());", "prediction": " userRepository.findByEmail(principal.getName()).orElseThrow(EntityNotFoundException::new);\n    }\n\n    /**\n     * Method for updating a user entity in the table \"user\"\n     *\n     * @param user - user entity from the view\n     */\n    public void updateUser(User user) {\n        userRepository.save(user);\n    }\n\n    /**\n     * Method for deleting a user entity from the table \"user\"\n     *\n     * @param user - user entity from the view\n     */\n    public void deleteUser(User user) {\n        userRepository.delete(user);\n    }\n\n    /**\n     * Method for", "first_line_groundtruth": "userRepository.findByEmail(principal.getName());", "first_line_prediction": " userRepository.findByEmail(principal.getName()).orElseThrow(EntityNotFoundException::new);", "match": 0}
{"groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");", "prediction": " event.reply(\"No joke found for this category\").queue();\n            } else {\n                event.reply(joke).queue();\n            }\n        } else {\n            // Get joke from category\n            if (categories.containsKey(category)) {\n                Callable<String> callable = categories.get(category);\n\n                String joke = Utils.getFromCallable(callable);\n                if (joke == null) {\n                    event.reply(\"No joke found for this category\").queue();\n                } else {\n                    event.reply(joke).queue();\n                }\n            } else {\n                event.reply(\"No jo", "first_line_groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");", "first_line_prediction": " event.reply(\"No joke found for this category\").queue();", "match": 0}
{"groundtruth": "flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));", "prediction": " flightRepository.findAllByUser(userRepository.findByUsername(principal.getName()));\n    }\n\n    /**\n     * Method for getting a flight entity from the table \"flight\"\n     *\n     * @param id - the id of the flight\n     * @return - the flight\n     */\n    public Flight get(Long id) {\n        return flightRepository.findById(id).orElseThrow(() -> new EntityNotFoundException(\"Flight not found\"));\n    }\n\n    /**\n     * Method for adding a flight entity to the table \"flight\"\n     *\n     * @param flight - the flight to be added\n     * @return - the added flight\n     */\n   ", "first_line_groundtruth": "flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));", "first_line_prediction": " flightRepository.findAllByUser(userRepository.findByUsername(principal.getName()));", "match": 0}
{"groundtruth": "String quote = Utils.getFromCallable(callable);", "prediction": " event.replyEmbeds(Utils.createEmbed(event.getJDA(), callable.call())).queue();\n        } else {\n            // Get quote from category\n            if (categories.containsKey(category)) {\n                Callable<String> callable = categories.get(category);\n                event.replyEmbeds(Utils.createEmbed(event.getJDA(), callable.call())).queue();\n            } else {\n                event.replyEmbeds(Utils.createEmbed(event.getJDA(), \"Invalid category\")).queue();\n            }\n        }\n    }\n\n    @Override\n    public String getHelp() {\n        return \"Shows", "first_line_groundtruth": "String quote = Utils.getFromCallable(callable);", "first_line_prediction": " event.replyEmbeds(Utils.createEmbed(event.getJDA(), callable.call())).queue();", "match": 0}
{"groundtruth": "setUser(userRepository.findByEmail(principal.getName()));", "prediction": "setOrderStatus(true);\n        flight.setUser(userRepository.findByEmail(principal.getName()));\n        flightRepository.save(flight);\n    }", "first_line_groundtruth": "setUser(userRepository.findByEmail(principal.getName()));", "first_line_prediction": "setOrderStatus(true);", "match": 0}
{"groundtruth": "flightService.orderFlight(id, principal);", "prediction": " flightService.orderFlight(id, principal.getName());\n         return \"redirect:/\";\n     }", "first_line_groundtruth": "flightService.orderFlight(id, principal);", "first_line_prediction": " flightService.orderFlight(id, principal.getName());", "match": 0}
{"groundtruth": "mTXVodPlayerWrapper.stopForPlaying();", "prediction": " mTXVodPlayerWrapper.stopPlay();\n             mTXVodPlayerWrapper.setVodChangeListener(null);\n             Log.i(TAG, \"[stopForPlaying] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());\n             mPauseImageView.setVisibility(View.GONE);\n        }\n    }\n\n    public void releasePlayer() {\n        if (mTXVodPlayerWrapper != null) {\n            mTXVodPlayerWrapper.release();\n            mTXVodPlayerWrapper = null;\n        }\n    }\n\n    public void setCover(String url) {\n        Glide.with(getContext()).load(url", "first_line_groundtruth": "mTXVodPlayerWrapper.stopForPlaying();", "first_line_prediction": " mTXVodPlayerWrapper.stopPlay();", "match": 0}
{"groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);", "prediction": " // \u52a0\u8f7d\u89c6\u9891\u5217\u8868\n        List<VideoModel> videoList = ShortVideoModel.getInstance(this).getVideoList();\n        if (videoList != null && videoList.size() > 0) {\n            mPlayFragment.setVideoList(videoList);\n        }\n    }\n\n    @Override\n    public void onDataLoadFull(List<VideoModel> videoList) {\n        mPlayFragment.setVideoList(videoList);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        ShortVideoModel.getInstance(this).setOnDataLoadFullListener(null);\n   ", "first_line_groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);", "first_line_prediction": " // \u52a0\u8f7d\u89c6\u9891\u5217\u8868", "match": 0}
{"groundtruth": "getEmail(), userForm.getPassword());", "prediction": "toUser());\n        return Response.created(uriInfo.getAbsolutePathBuilder().path(String.valueOf(user.getId())).build())\n                .entity(UserDto.fromUser(uriInfo, user)).build();\n    }", "first_line_groundtruth": "getEmail(), userForm.getPassword());", "first_line_prediction": "toUser());", "match": 0}
{"groundtruth": "user = us.create(userForm.getEmail(), userForm.getPassword());", "prediction": " user = new User(userForm.getUsername(), userForm.getPassword());\n        final User savedUser = us.save(user);\n\n        return Response.created(uriInfo.getAbsolutePathBuilder().path(savedUser.getId() + \"\").build())\n                .entity(UserDto.fromUser(uriInfo, savedUser)).build();\n    }", "first_line_groundtruth": "user = us.create(userForm.getEmail(), userForm.getPassword());", "first_line_prediction": " user = new User(userForm.getUsername(), userForm.getPassword());", "match": 0}
{"groundtruth": "response.getFirstLine()));", "prediction": "response.toString().getBytes()));\n        channel.close();\n    }\n\n    private HttpResponse handle404() {\n        HttpResponse response = new HttpResponse(404, \"Not Found\");\n        response.setHeader(Headers.CONTENT_TYPE, \"text/html; charset=utf-8\");\n        response.setHeader(Headers.CONTENT_LENGTH, \"404\");\n        response.setHeader(Headers.SERVER, \"SimpleHttpV3\");\n        response.setHeader(Headers.DATE, LocalDateTime.now().format(DateTimeFormatter.RFC_1123_DATE_TIME));\n        response.setHeader(Headers.CONNECTION,", "first_line_groundtruth": "response.getFirstLine()));", "first_line_prediction": "response.toString().getBytes()));", "match": 0}
{"groundtruth": "ShortVideoModel.getInstance(this).loadDefaultVideo();", "prediction": " List<VideoModel> videoList = ShortVideoModel.getInstance(this).getVideoList();\n        if (videoList != null && videoList.size() > 0) {\n            mPlayFragment.setVideoList(videoList);\n            mPlayFragment.setPlayPosition(0);\n            mPlayFragment.setPlayIndex(0);\n            mPlayFragment.setPlayUrl(videoList.get(0).getVideoUrl());\n            mPlayFragment.setPlayTitle(videoList.get(0).getVideoName());\n            mPlayFragment.setPlayDuration(videoList.get(0).", "first_line_groundtruth": "ShortVideoModel.getInstance(this).loadDefaultVideo();", "first_line_prediction": " List<VideoModel> videoList = ShortVideoModel.getInstance(this).getVideoList();", "match": 0}
{"groundtruth": "response.getHeaders().toString().getBytes()));", "prediction": "response.getHeaders()));\n        channel.write(ByteBuffer.wrap(response.getBody()));\n        channel.register(selectionKey.selector(), SelectionKey.OP_READ);\n    }\n\n    private HttpResponse handle404() {\n        HttpResponse response = new HttpResponse(404, \"Not Found\");\n        response.addHeader(Headers.CONTENT_TYPE, \"text/html; charset=utf-8\");\n        response.addHeader(Headers.CONTENT_LENGTH, \"404\");\n        response.setBody(\"404 Not Found\");\n        return response;\n    }\n\n    private HttpResponse handleOk(String path) throws", "first_line_groundtruth": "response.getHeaders().toString().getBytes()));", "first_line_prediction": "response.getHeaders()));", "match": 0}
{"groundtruth": "channel.write(ByteBuffer.wrap(response.getBody()));", "prediction": " // \u6ce8\u518c\u4e00\u4e2a\u5199\u4e8b\u4ef6\uff0c\u7528\u6765\u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4fe1\u606f\n        selectionKey.interestOps(SelectionKey.OP_WRITE);\n    }\n\n    private HttpResponse handle404() {\n        HttpResponse response = new HttpResponse(404, \"Not Found\");\n        response.addHeader(Headers.CONTENT_TYPE, \"text/html; charset=utf-8\");\n        response.addHeader(Headers.CONTENT_LENGTH, \"404 Not Found\".length());\n        response.addHeader(Headers.SERVER, \"SimpleHttpV3\");\n        response.addHeader(Headers.DATE, LocalDateTime.now().format(", "first_line_groundtruth": "channel.write(ByteBuffer.wrap(response.getBody()));", "first_line_prediction": " // \u6ce8\u518c\u4e00\u4e2a\u5199\u4e8b\u4ef6\uff0c\u7528\u6765\u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4fe1\u606f", "match": 0}
{"groundtruth": "ShortVideoModel.getInstance(this).getVideoByFileId();", "prediction": " // \u5f00\u59cb\u64ad\u653e\n        mPlayFragment.startPlay();\n    }\n\n    @Override\n    public void onDataLoadFull(List<VideoModel> list) {\n        if (list != null && list.size() > 0) {\n            mPlayFragment.setVideoModel(list.get(0));\n        } else {\n            ToastUtils.showShort(\"\u6ca1\u6709\u89c6\u9891\");\n        }\n    }", "first_line_groundtruth": "ShortVideoModel.getInstance(this).getVideoByFileId();", "first_line_prediction": " // \u5f00\u59cb\u64ad\u653e", "match": 0}
{"groundtruth": "write(response.getFirstLine());", "prediction": "write(response.toString().getBytes());\n        outputStream.flush();\n        socket.shutdownOutput();\n    }\n\n    private HttpResponse handle404() {\n        HttpResponse response = new HttpResponse(404, \"Not Found\");\n        response.setHeader(Headers.CONTENT_TYPE, \"text/html; charset=utf-8\");\n        response.setHeader(Headers.CONTENT_LENGTH, \"404\");\n        response.setBody(\"404 Not Found\");\n        return response;\n    }\n\n    private HttpResponse handleOk(String path) throws IOException {\n        HttpResponse response = new HttpResponse(200, \"OK\");\n       ", "first_line_groundtruth": "write(response.getFirstLine());", "first_line_prediction": "write(response.toString().getBytes());", "match": 0}
{"groundtruth": ".write(response.getBody());", "prediction": ".write(response.getBody());\n        outputStream.flush();\n        socket.shutdownOutput();\n    }\n\n    private HttpResponse handle404() {\n        HttpResponse response = new HttpResponse(404, \"Not Found\");\n        response.setBody(\"404 Not Found\");\n        return response;\n    }\n\n    private HttpResponse handleOk(String path) {\n        HttpResponse response = new HttpResponse(200, \"OK\");\n        response.setBody(ResourcesFileUtil.readFile(path));\n        return response;\n    }\n\n    private HttpResponse handle5xx() {\n        HttpResponse response = new HttpResponse(500, \"Internal Server", "first_line_groundtruth": ".write(response.getBody());", "first_line_prediction": ".write(response.getBody());", "match": 1}
{"groundtruth": "ShortVideoModel.getInstance(this).release();", "prediction": " super.onDestroy();\n         ShortVideoModel.getInstance(this).setOnDataLoadFullListener(null);\n    }\n\n    @Override\n    public void onDataLoadFull() {\n        ToastUtils.showShort(\"\u6570\u636e\u52a0\u8f7d\u5b8c\u6bd5\");\n    }", "first_line_groundtruth": "ShortVideoModel.getInstance(this).release();", "first_line_prediction": " super.onDestroy();", "match": 0}
{"groundtruth": "response.getHeaders().toString().getBytes());", "prediction": "response.getHeaders());\n        outputStream.write(response.getBody());\n        outputStream.flush();\n        socket.shutdownOutput();\n    }\n\n    private HttpResponse handle404() {\n        HttpResponse response = new HttpResponse(404, \"Not Found\");\n        response.addHeader(Headers.CONTENT_TYPE, \"text/html\");\n        response.setBody(\"<html><body>404 Not Found</body></html>\");\n        return response;\n    }\n\n    private HttpResponse handleOk(String path) {\n        HttpResponse response = new HttpResponse(200, \"OK\");\n        response.addHeader(Headers.CONTENT_TYPE", "first_line_groundtruth": "response.getHeaders().toString().getBytes());", "first_line_prediction": "response.getHeaders());", "match": 0}
{"groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(null);", "prediction": " super.onDestroy();\n    }\n\n    @Override\n    public void onDataLoadFull() {\n        ToastUtils.showShort(\"\u6570\u636e\u52a0\u8f7d\u5b8c\u6bd5\");\n    }", "first_line_groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(null);", "first_line_prediction": " super.onDestroy();", "match": 0}
{"groundtruth": "faceProvider.invalidateCache();", "prediction": " faceProvider.reload();\n        }\n    }\n\n    @Override\n    public @NotNull FileConfiguration getConfig() {\n        return super.getConfig();\n    }", "first_line_groundtruth": "faceProvider.invalidateCache();", "first_line_prediction": " faceProvider.reload();", "match": 0}
{"groundtruth": "String mrState = mrEvent.getMrState();", "prediction": "\n\t\ttry {\n\t\t\tMergeRequest mergeRequest = gitlab.getMergeRequestApi().getMergeRequest(mrEvent.getProjectId(), mrEvent.getMergeRequestIid());\n\t\t\tif (mergeRequest.getState() == MergeRequestState.OPEN) {\n\t\t\t\tresult.setMergeRequest(mergeRequest);\n\t\t\t\tresult.setMergeRequestResult(MergeRequestResult.OPEN);\n\t\t\t\tresult.setMergeRequestUcascadeState(MergeRequestUcascadeState.NONE);\n\t\t\t\tresult.setMergeRequestResultMessage(\"Merge request is open\");\n\t\t\t\tresult.setMergeRequestResultMessage(result.get", "first_line_groundtruth": "String mrState = mrEvent.getMrState();", "first_line_prediction": "", "match": 0}
{"groundtruth": "Long projectId = mrEvent.getProjectId();", "prediction": "\tif (userId != null && !userId.equals(ucascadeUser)) {\n\t\t\t\tresult.setMergeRequestResult(MergeRequestResult.SKIPPED);\n\t\t\t\tresult.setMergeRequestUcascadeState(MergeRequestUcascadeState.SKIPPED);\n\t\t\t\treturn;\n\t\t\t}", "first_line_groundtruth": "Long projectId = mrEvent.getProjectId();", "first_line_prediction": "\tif (userId != null && !userId.equals(ucascadeUser)) {", "match": 0}
{"groundtruth": "CascadeResult result = gitLabService.createResult(gitlabEventUUID);", "prediction": "", "first_line_groundtruth": "CascadeResult result = gitLabService.createResult(gitlabEventUUID);", "first_line_prediction": "", "match": 0}
{"groundtruth": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();", "prediction": "\tLog.infof(\"GitlabEvent: '%s' | Received (blocking)\", mrSimple.getGitlabEventUUID());\n\t\t\treturn gitLabService.replay(mrSimple);", "first_line_groundtruth": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();", "first_line_prediction": "\tLog.infof(\"GitlabEvent: '%s' | Received (blocking)\", mrSimple.getGitlabEventUUID());", "match": 0}
{"groundtruth": "result.setError(\"Invalid path: \" + path);", "prediction": "\t// consumed by GitLabService class\n\t\t\teventsBus.send(GitLabService.MERGE_REQUEST_EVENT, result);\n\t\t\trc.response().setStatusCode(202);\n\t\t\trc.response().end();\n\t\t}", "first_line_groundtruth": "result.setError(\"Invalid path: \" + path);", "first_line_prediction": "\t// consumed by GitLabService class", "match": 0}
{"groundtruth": "result.setPreviousAutoMrMergedError(e.getMessage());", "prediction": "\tresult.setMergeRequestResult(MergeRequestResult.FAILED);\n\t\t\t\tresult.setMergeRequestUcascadeState(MergeRequestUcascadeState.FAILED);\n\t\t\t\tresult.setMergeRequestResultMessage(e.getMessage());\n\t\t\t\tresultsBus.send(MERGE_REQUEST_EVENT, result);\n\t\t}", "first_line_groundtruth": "result.setPreviousAutoMrMergedError(e.getMessage());", "first_line_prediction": "\tresult.setMergeRequestResult(MergeRequestResult.FAILED);", "match": 0}
{"groundtruth": "Long mrNumber = mrEvent.getMrNumber();", "prediction": "", "first_line_groundtruth": "Long mrNumber = mrEvent.getMrNumber();", "first_line_prediction": "", "match": 0}
{"groundtruth": "Long userId = mrEvent.getUserId();", "prediction": "\ttry {\n\t\t\t\tMergeRequestApi mergeRequestApi = gitlab.getMergeRequestApi();\n\t\t\t\tMergeRequest mergeRequest = mergeRequestApi.getMergeRequest(mrEvent.getProjectId(), mrEvent.getMergeRequestIid());\n\t\t\t\tMergeRequestParams mergeRequestParams = new MergeRequestParams();\n\t\t\t\tmergeRequestParams.setMergeWhenPipelineSucceeds(true);\n\t\t\t\tmergeRequestParams.setMergeWhenBuildSucceeds(true);\n\t\t\t\tmergeRequestParams.setMergeWhenAllDiscussionsAreResolved(true);\n\t\t\t\tmergeRequestParams.setRemoveSourceBranch(true);\n\t\t\t\tmerge", "first_line_groundtruth": "Long userId = mrEvent.getUserId();", "first_line_prediction": "\ttry {", "match": 0}
{"groundtruth": "= mrEvent.getMergeCommitSha();", "prediction": " = mrEvent.getMergeSha();\n\t\tString mergeMessage = mrEvent.getMergeMessage();\n\t\tString mergeAuthorName = mrEvent.getMergeAuthorName();\n\t\tString mergeAuthorEmail = mrEvent.getMergeAuthorEmail();\n\t\tString mergeAuthorUsername = mrEvent.getMergeAuthorUsername();\n\t\tString mergeAuthorAvatarUrl = mrEvent.getMergeAuthorAvatarUrl();\n\t\tString mergeAuthorWebUrl = mrEvent.getMergeAuthorWebUrl();\n\t\tString mergeAuthorId = mrEvent.getMergeAuthorId();\n\t\tString mergeAuthorState = mrEvent.getMergeAuthor", "first_line_groundtruth": "= mrEvent.getMergeCommitSha();", "first_line_prediction": " = mrEvent.getMergeSha();", "match": 0}
{"groundtruth": "result.setExistingBranchDeleteError(e.getMessage());", "prediction": "\tresult.setDeletedExistingBranchError(e.getMessage());\n\t\t}", "first_line_groundtruth": "result.setExistingBranchDeleteError(e.getMessage());", "first_line_prediction": "\tresult.setDeletedExistingBranchError(e.getMessage());", "match": 0}
{"groundtruth": "result.setCreatedAutoMrError(e.getMessage());", "prediction": "\tresult.setAutoMrCreationError(e.getMessage());\n\t\t}", "first_line_groundtruth": "result.setCreatedAutoMrError(e.getMessage());", "first_line_prediction": "\tresult.setAutoMrCreationError(e.getMessage());", "match": 0}
{"groundtruth": "presentation.setTitle(getTitle(doc, SHOWTITLE));", "prediction": "", "first_line_groundtruth": "presentation.setTitle(getTitle(doc, SHOWTITLE));", "first_line_prediction": "", "match": 0}
{"groundtruth": ".print(((BitmapItem) slideItem).getName());", "prediction": ".print(((BitmapItem) slideItem).getImage());\n\t\t\t\t\t}\n\t\t\t\t}", "first_line_groundtruth": ".print(((BitmapItem) slideItem).getName());", "first_line_prediction": ".print(((BitmapItem) slideItem).getImage());", "match": 0}
{"groundtruth": "mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "prediction": " mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "first_line_groundtruth": "mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "first_line_prediction": " mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "match": 0}
{"groundtruth": "= Style.getStyle(slideItem.getLevel());", "prediction": " = slideItem.getStyle();\n\t\tg.setColor(style.getColor());\n\t\tg.setFont(style.getFont());\n\t\tg.drawString(slideItem.getText(), area.x, y);\n\t\ty += style.getFont().getSize();", "first_line_groundtruth": "= Style.getStyle(slideItem.getLevel());", "first_line_prediction": " = slideItem.getStyle();", "match": 0}
{"groundtruth": "out.print(((TextItem) slideItem).getText());", "prediction": "\tout.print(slideItem.getText());\n\t\t\t\t\tout.println(\"</item>\");\n\t\t\t\t} else if (slideItem instanceof BitmapItem) {\n\t\t\t\t\tout.print(\"\\\"image\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");\n\t\t\t\t\t\tout.print(slideItem.getText());\n\t\t\t\t\tout.println(\"</item>\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.err.println(\"Unknown Element type\");\n\t\t\t\t}\n\t\t\t}", "first_line_groundtruth": "out.print(((TextItem) slideItem).getText());", "first_line_prediction": "\tout.print(slideItem.getText());", "match": 0}
{"groundtruth": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");", "prediction": ".print(TEXT);\n\t\t\t\t} else if (slideItem instanceof BitmapItem) {\n\t\t\t\t\tout.print(IMAGE);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.err.println(UNKNOWNTYPE);\n\t\t\t\t}", "first_line_groundtruth": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");", "first_line_prediction": ".print(TEXT);", "match": 0}
{"groundtruth": "< presentation.getSize();", "prediction": " < presentation.size(); slideNumber++) {\n\t\t\tSlide slide = presentation.getSlide(slideNumber);", "first_line_groundtruth": "< presentation.getSize();", "first_line_prediction": " < presentation.size(); slideNumber++) {", "match": 0}
{"groundtruth": ", mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "prediction": " != null ? mrEvent.getProjectId() : -1,\n\t\t\t\tmrEvent.getUserId() != null ? mrEvent.getUserId() : -1,\n\t\t\t\tmrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "first_line_groundtruth": ", mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);", "first_line_prediction": " != null ? mrEvent.getProjectId() : -1,", "match": 0}
{"groundtruth": "bookDTO.setAuthorName(\"Ranjan Sir\");", "prediction": " bookDTO.setAuthorName(\"author1\");\n        bookDTO.setBookName(\"book1\");\n        bookDTO.setPricePerQty(100.00);\n        bookDTO.setQuantity(10);\n        controller.addBook(bookDTO);\n    }", "first_line_groundtruth": "bookDTO.setAuthorName(\"Ranjan Sir\");", "first_line_prediction": " bookDTO.setAuthorName(\"author1\");", "match": 0}
{"groundtruth": "bookDTO.setAuthorEmail(\"author1@gmail.com\");", "prediction": " bookDTO.setName(\"Test Book\");\n         bookDTO.setAuthorName(\"<NAME>\");\n         bookDTO.setPricePerQty(100.00);\n         controller.addBook(bookDTO);\n    }", "first_line_groundtruth": "bookDTO.setAuthorEmail(\"author1@gmail.com\");", "first_line_prediction": " bookDTO.setName(\"Test Book\");", "match": 0}
{"groundtruth": "bookDTO.setAvailableQty(10);", "prediction": " bookDTO.setBookName(\"Book Name\");\n        bookDTO.setPricePerQty(1000);\n        bookDTO.setQuantity(10);\n        controller.addBook(bookDTO);\n    }", "first_line_groundtruth": "bookDTO.setAvailableQty(10);", "first_line_prediction": " bookDTO.setBookName(\"Book Name\");", "match": 0}
{"groundtruth": "bookDTO.setDescription(\"Book One Description\");", "prediction": " /Call the add book functionality\n        controller.addBook(bookDTO);\n    }", "first_line_groundtruth": "bookDTO.setDescription(\"Book One Description\");", "first_line_prediction": " /Call the add book functionality", "match": 0}
{"groundtruth": "bookDTO.setName(\"PlacementPrep\");", "prediction": " /Call the add book functionality\n        controller.addBook(bookDTO);\n    }", "first_line_groundtruth": "bookDTO.setName(\"PlacementPrep\");", "first_line_prediction": " /Call the add book functionality", "match": 0}
{"groundtruth": "bookDTO.setPricePerQty(88.959);", "prediction": " /Call the add book functionality\n        controller.addBook(bookDTO);\n    }", "first_line_groundtruth": "bookDTO.setPricePerQty(88.959);", "first_line_prediction": " /Call the add book functionality", "match": 0}
{"groundtruth": "!code.equals(twoFactorService.getTOTPCode(secret)))\n            return ResponseEntity.status(403).build();", "prediction": "twoFactorService.verifyCode(secret, code)) {\n            authenticationService.setTfaSecret(accountData.getUsername(), secret);\n            return ResponseEntity.ok(Collections.singletonMap(\"success\", true));\n        } else {\n            return ResponseEntity.status(403).build();\n        }\n    }\n\n    @PostMapping(\"/remove\")\n    public ResponseEntity<?> remove() {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData == null) return ResponseEntity.status(403).build();\n        if (accountData.getTfaSecret() ==", "first_line_groundtruth": "!code.equals(twoFactorService.getTOTPCode(secret)))", "first_line_prediction": "twoFactorService.verifyCode(secret, code)) {", "match": 0}
{"groundtruth": "token = BackendApplication.generateString(20);", "prediction": " token = TokenGenerator.generateToken(maxUses);\n        GroupInvite invite = new GroupInvite(token, expire, reciever, issuer, groupData.getId());\n        groupData.getInvited().add(invite);\n        groupRepository.save(groupData);\n        return ResponseEntity.ok(token);\n    }\n\n    public GroupResponse acceptInvite(String token, String uid) {\n        GroupData group = groupRepository.findByInviteToken(token).stream().findFirst().orElse(null);\n        if (group == null)\n            return null;\n        if (group.getMember().stream().anyMatch(member ->", "first_line_groundtruth": "token = BackendApplication.generateString(20);", "first_line_prediction": " token = TokenGenerator.generateToken(maxUses);", "match": 0}
{"groundtruth": "= twoFactorService.getGoogleAuthenticatorBarCode(secret, username, company);", "prediction": " = twoFactorService.generateQRCode(secret, company);\n\n        generateRequests.add(new JSONObject()\n                .put(\"username\", username)\n                .put(\"secret\", secret)\n                .put(\"company\", company)\n                .put(\"barCode\", barCode));\n\n        return ResponseEntity.ok(Collections.singletonMap(\"secret\", secret));\n    }\n\n    @PostMapping(\"/verify\")\n    public ResponseEntity<?> verify(@RequestBody JSONObject request) throws IOException, WriterException {\n        // TODO: Check for team to create qr code!\n\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal", "first_line_groundtruth": "= twoFactorService.getGoogleAuthenticatorBarCode(secret, username, company);", "first_line_prediction": " = twoFactorService.generateQRCode(secret, company);", "match": 0}
{"groundtruth": "twoFactorService.createQRCode(barCode, 400, 400);", "prediction": " twoFactorService.getQRCode(barCode);\n\n        generateRequests.add(new JSONObject().put(\"username\", username).put(\"secret\", secret));\n\n        return ResponseEntity.ok(new JSONObject().put(\"qr\", qr));\n    }\n\n    @PostMapping(\"/verify\")\n    public ResponseEntity<?> verify(@RequestBody JSONObject request) throws IOException, WriterException {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData == null) return ResponseEntity.status(403).build();\n        if (accountData.getTfaSecret() == null) return ResponseEntity.", "first_line_groundtruth": "twoFactorService.createQRCode(barCode, 400, 400);", "first_line_prediction": " twoFactorService.getQRCode(barCode);", "match": 0}
{"groundtruth": "ok(service.getUserByUsername(username));", "prediction": "ok(service.findByUsername(username));\n    }\n\n    @GetMapping(\"/contacts\")\n    public ResponseEntity<List<ContactData>> getContacts() {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData == null)\n            return ResponseEntity.status(403).build();\n        return ResponseEntity.ok(contactService.findByAccountId(accountData.getId()));\n    }\n\n    @PostMapping(\"/contacts\")\n    public ResponseEntity<ContactData> addContact(@RequestBody ContactData contactData) {\n        AccountData accountData = (AccountData) SecurityContextHolder.", "first_line_groundtruth": "ok(service.getUserByUsername(username));", "first_line_prediction": "ok(service.findByUsername(username));", "match": 0}
{"groundtruth": "ok(service.searchByUsername(username));", "prediction": "ok(service.searchUserByUsername(username));\n    }\n\n    @GetMapping(\"/contacts\")\n    public ResponseEntity<List<ContactData>> getContacts() {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData == null)\n            return ResponseEntity.status(403).build();\n        return ResponseEntity.ok(contactService.getContacts(accountData.getId()));\n    }\n\n    @GetMapping(\"/contacts/{uId}\")\n    public ResponseEntity<List<ContactData>> getContacts(@PathVariable String uId) {\n        return ResponseEntity.ok(contactService", "first_line_groundtruth": "ok(service.searchByUsername(username));", "first_line_prediction": "ok(service.searchUserByUsername(username));", "match": 0}
{"groundtruth": "return ResponseEntity.ok(service.findAll());", "prediction": " return ResponseEntity.ok(service.getAll());\n    }\n\n    @PostMapping\n    public ResponseEntity<PublicAccountResponse> createAccount(@RequestBody AccountData accountData) {\n        return ResponseEntity.ok(service.create(accountData));\n    }\n\n    @PutMapping\n    public ResponseEntity<PublicAccountResponse> updateAccount(@RequestBody AccountData accountData) {\n        return ResponseEntity.ok(service.update(accountData));\n    }\n\n    @DeleteMapping(\"/{uId}\")\n    public ResponseEntity<Void> deleteAccount(@PathVariable String uId) {\n        service.delete(uId);\n        return ResponseEntity.noContent().build();\n    }\n\n   ", "first_line_groundtruth": "return ResponseEntity.ok(service.findAll());", "first_line_prediction": " return ResponseEntity.ok(service.getAll());", "match": 0}
{"groundtruth": "min = URL.convertDate(minDate, new Date(0L));", "prediction": " minDateDate = URL.decodeDate(minDate);\n        Date  maxDateDate = URL.decodeDate(maxDate);\n        List<Post> list = postService.fullSearch(text, minDateDate, maxDateDate);\n        return ResponseEntity.ok().body(list);\n    }\n\n    @PostMapping\n    public ResponseEntity<Post> save(@RequestBody Post obj){\n        obj.setCreatedAt(new Date());\n        Post objSaved = postService.save(obj);\n        return ResponseEntity.ok().body(objSaved);\n    }\n\n    @PutMapping(value = \"/{id}\")\n    public ResponseEntity<Post>", "first_line_groundtruth": "min = URL.convertDate(minDate, new Date(0L));", "first_line_prediction": " minDateDate = URL.decodeDate(minDate);", "match": 0}
{"groundtruth": "Post> list = postService.fullSearch(text, min ,max);", "prediction": "Post> list = postService.fullSearch(text, min, max);\n        return ResponseEntity.ok().body(list);\n    }\n\n    @PostMapping\n    public ResponseEntity<Post> save(@RequestBody Post obj){\n        obj.setCreatedAt(new Date());\n        obj = postService.save(obj);\n        return ResponseEntity.ok().body(obj);\n    }\n\n    @PutMapping(value = \"/{id}\")\n    public ResponseEntity<Post> update(@PathVariable String id, @RequestBody Post obj){\n        obj.setId(id);\n        obj.setUpdatedAt(new Date());\n        obj = postService.update(obj);", "first_line_groundtruth": "Post> list = postService.fullSearch(text, min ,max);", "first_line_prediction": "Post> list = postService.fullSearch(text, min, max);", "match": 0}
{"groundtruth": "obj.getId()) ;", "prediction": "obj.getId());\n        newObj.setName(obj.getName());\n        newObj.setEmail(obj.getEmail());\n        newObj.setPassword(obj.getPassword());\n        return repository.save(newObj);\n    }\n\n    public UserDTO toDTO(User obj){\n        return new UserDTO(obj.getId(), obj.getName(), obj.getEmail(), obj.getPassword());\n    }", "first_line_groundtruth": "obj.getId()) ;", "first_line_prediction": "obj.getId());", "match": 0}
{"groundtruth": "text = URL.decodeParam(text);", "prediction": " String decodingText = URL.decodeParam(text);\n         Date minDateObj = URL.decodeDate(minDate);\n         Date maxDateObj = URL.decodeDate(maxDate);\n         List<Post> list = postService.fullSearch(decodingText, minDateObj, maxDateObj);\n         return ResponseEntity.ok().body(list);\n    }\n\n    @PostMapping\n    public ResponseEntity<Post> save(@RequestBody Post obj){\n        obj.setCreatedAt(new Date());\n        Post objSaved = postService.save(obj);\n        return ResponseEntity.ok().body(objSaved);\n    }\n\n    @Put", "first_line_groundtruth": "text = URL.decodeParam(text);", "first_line_prediction": " String decodingText = URL.decodeParam(text);", "match": 0}
{"groundtruth": "= URL.convertDate(maxDate, new Date());", "prediction": " = URL.convertDate(maxDate, new Date(0L));\n        List<Post> list = postService.fullSearch(text, min, max);\n        return ResponseEntity.ok().body(list);\n    }\n\n    @PostMapping\n    public ResponseEntity<Post> save(@RequestBody Post obj){\n        obj.setCreatedAt(new Date());\n        obj = postService.save(obj);\n        return ResponseEntity.ok().body(obj);\n    }\n\n    @PutMapping(value = \"/{id}\")\n    public ResponseEntity<Post> update(@PathVariable String id, @RequestBody Post obj){\n        obj.setId(id);\n       ", "first_line_groundtruth": "= URL.convertDate(maxDate, new Date());", "first_line_prediction": " = URL.convertDate(maxDate, new Date(0L));", "match": 0}
{"groundtruth": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));", "prediction": " post1.setComments(Arrays.asList(c1,c2));\n         post2.setComments(Arrays.asList(c3));\n\n        postRepository.saveAll(Arrays.asList(post1,post2));\n    }", "first_line_groundtruth": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));", "first_line_prediction": " post1.setComments(Arrays.asList(c1,c2));", "match": 0}
{"groundtruth": "return new User(objDTO.getId(), objDTO.getName(), objDTO.getEmail());", "prediction": " User obj = new User();\n         obj.setName(objDTO.getName());\n         obj.setEmail(objDTO.getEmail());\n         return obj;\n    }", "first_line_groundtruth": "return new User(objDTO.getId(), objDTO.getName(), objDTO.getEmail());", "first_line_prediction": " User obj = new User();", "match": 0}
{"groundtruth": "messageHandler.destroySession(username);", "prediction": " messageHandler.closeSession(username);\n                logger.info(\"{} left\", username);\n            });\n            ws.onMessage(ctx -> {\n                String username = userUsernameMap.get(ctx);\n                messageHandler.handleMessage(username, ctx.message());\n            });\n        });\n    }\n\n    private static String randomString() {\n        return new Random().nextInt(1000000) + \"\";\n    }", "first_line_groundtruth": "messageHandler.destroySession(username);", "first_line_prediction": " messageHandler.closeSession(username);", "match": 0}
{"groundtruth": "MethodStatistics(row.getCount()));", "prediction": " MethodStatistics(row.getCount(), Modifier.METHOD));\n            }\n        }\n        return stat;\n    }", "first_line_groundtruth": "MethodStatistics(row.getCount()));", "first_line_prediction": " MethodStatistics(row.getCount(), Modifier.METHOD));", "match": 0}
{"groundtruth": "row.getCount(), Modifier.CONSTRUCTOR));", "prediction": "row));\n            } else {\n                stat.add(new FieldStatistics(row));\n            }\n        }\n        return stat;\n    }", "first_line_groundtruth": "row.getCount(), Modifier.CONSTRUCTOR));", "first_line_prediction": "row));", "match": 0}
{"groundtruth": "return this.modifiers.isInstanceOverridden();", "prediction": " return this.modifiers.isInstancePublicOverridden();\n    }\n\n    boolean isInstancePublic() {\n        return this.modifiers.isInstancePublic();\n    }\n\n    boolean isInstanceProtected() {\n        return this.modifiers.isInstanceProtected();\n    }\n\n    boolean isInstancePackageProtected() {\n        return this.modifiers.isInstancePackageProtected();\n    }\n\n    boolean isInstancePackagePrivateOverridden() {\n        return this.modifiers.isInstancePackagePrivateOverridden();\n    }\n\n    boolean isInstancePackagePrivateOverriddenByProtected() {\n        return this.modifiers.isInstancePackagePrivateOverriddenByProtected();\n    }\n\n    boolean", "first_line_groundtruth": "return this.modifiers.isInstanceOverridden();", "first_line_prediction": " return this.modifiers.isInstancePublicOverridden();", "match": 0}
{"groundtruth": "maria.getPosts().addAll(Arrays.asList(post1,post2));", "prediction": "\n\n    }", "first_line_groundtruth": "maria.getPosts().addAll(Arrays.asList(post1,post2));", "first_line_prediction": "", "match": 0}
{"groundtruth": "new GitHubMetrics(this.project.githubUrl())\n        ).cells();", "prediction": "1\n        ).cells();\n    }", "first_line_groundtruth": "new GitHubMetrics(this.project.githubUrl())", "first_line_prediction": "1", "match": 0}
{"groundtruth": "method -> !method.isConstructor())\n            .mapToLong(MethodStatistics::total)\n            .sum();", "prediction": "MethodStatistics::isMethod)\n             .mapToLong(MethodStatistics::total)\n             .sum();\n    }\n\n    private long constructors() {\n        return this.statistics.stream()\n             .filter(MethodStatistics::isConstructor)\n             .mapToLong(MethodStatistics::total)\n             .sum();\n    }", "first_line_groundtruth": "method -> !method.isConstructor())", "first_line_prediction": "MethodStatistics::isMethod)", "match": 0}
{"groundtruth": "(this.project.path())) {", "prediction": "(this.project.path())) {\n            return files.filter(Files::isRegularFile)\n                .filter(path -> path.toString().endsWith(\".java\"))\n                .map(path -> new ParsedClass(path))\n                .collect(Collectors.toMap(ParsedClass::name, parsed -> parsed));\n        } catch (final IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }", "first_line_groundtruth": "(this.project.path())) {", "first_line_prediction": "(this.project.path())) {", "match": 1}
{"groundtruth": ".modifiers.isStaticPackagePrivate();", "prediction": ".modifiers.isStaticPackage();\n    }\n\n    boolean isStaticPublic() {\n        return this.modifiers.isStaticPublic();\n    }\n\n    boolean isStaticPrivate() {\n        return this.modifiers.isStaticPrivate();\n    }\n\n    boolean isStaticProtected() {\n        return this.modifiers.isStaticProtected();\n    }\n\n    boolean isStaticPublicOverridden() {\n        return this.modifiers.isStaticOverridden();\n    }\n\n    boolean isStaticProtectedOverridden() {\n        return this.modifiers.isStaticProtectedOverridden();\n    }\n\n    boolean isStaticPrivateOverridden() {\n        return this.modifiers.isStatic", "first_line_groundtruth": ".modifiers.isStaticPackagePrivate();", "first_line_prediction": ".modifiers.isStaticPackage();", "match": 0}
{"groundtruth": "modifiers.isInstancePackage();", "prediction": "modifiers.isInstancePackagePrivate();\n    }\n\n    boolean isInstanceProtected() {\n        return this.modifiers.isInstanceProtected();\n    }\n\n    boolean isInstancePublic() {\n        return this.modifiers.isInstancePublic();\n    }\n\n    boolean isStaticPrivate() {\n        return this.modifiers.isStaticPrivate();\n    }\n\n    boolean isStaticPackagePrivate() {\n        return this.modifiers.isStaticPackagePrivate();\n    }\n\n    boolean isStaticProtected() {\n        return this.modifiers.isStaticProtected();\n    }\n\n    boolean isStaticPublic() {\n        return this.modifiers.isStaticPublic();\n    }\n\n    boolean is", "first_line_groundtruth": "modifiers.isInstancePackage();", "first_line_prediction": "modifiers.isInstancePackagePrivate();", "match": 0}
{"groundtruth": "obj.setId(id);", "prediction": " obj.setId(id);\n             service.update(obj);\n             return ResponseEntity.noContent().build();\n    }\n\n    @DeleteMapping(value = \"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable String id){\n        service.delete(id);\n        return ResponseEntity.noContent().build();\n    }", "first_line_groundtruth": "obj.setId(id);", "first_line_prediction": " obj.setId(id);", "match": 0}
{"groundtruth": "proxyServer.open();", "prediction": " proxyServer.start();\n        }\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        super.channelActive(ctx);\n        ctx.channel().attr(AttributeKey.valueOf(\"channel\")).set(ctx.channel());\n        ctx.channel().attr(AttributeKey.valueOf(\"channelContext\")).set(ctx);\n        ctx.channel().attr(AttributeKey.valueOf(\"channelContextKey\")).set(ctx.channel().id().asLongText());\n        ctx.channel().attr(AttributeKey.valueOf(\"channelContextKey2\")).set(ctx.channel().id().asShortText", "first_line_groundtruth": "proxyServer.open();", "first_line_prediction": " proxyServer.start();", "match": 0}
{"groundtruth": "proxyClient.authSuccess();", "prediction": " ctx.channel().close();\n        } else if (opCode == 0x12) {\n            log.info(\"proxy disconnect server\");\n            close();\n        } else if (opCode == 0x13) {\n            log.info(\"proxy send to client data {}\", payload);\n            ctx.channel().writeAndFlush(Unpooled.copiedBuffer(payload));\n        } else if (opCode == 0x14) {\n            log.info(\"proxy send to client data {}\", payload);\n            ctx.channel().writeAndFlush(Unpooled.copiedBuffer(payload));\n        } else", "first_line_groundtruth": "proxyClient.authSuccess();", "first_line_prediction": " ctx.channel().close();", "match": 0}
{"groundtruth": "proxyClient.shutdown();", "prediction": " map.forEach((k, v) -> {\n             try {\n                 v.close();\n             } catch (Exception e) {\n                 log.error(\"close channel error\", e);\n             }\n         });\n         map.clear();\n         proxyClient.close();\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        super.channelActive(ctx);\n        Frame frame = new Frame(0x10, null, null);\n        ctx.writeAndFlush(frame);\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        super.channelInactive(ctx", "first_line_groundtruth": "proxyClient.shutdown();", "first_line_prediction": " map.forEach((k, v) -> {", "match": 0}
{"groundtruth": "proxyClient.updateHeatbeatTime();", "prediction": " Frame frame = new Frame(0x61, serviceKey, null);\n             ctx.writeAndFlush(frame);\n        } else if (opCode == 0x7) {\n            log.info(\"proxy update heartbeat time success\");\n            proxyClient.authSuccess();\n        } else if (opCode == 0x8) {\n            log.info(\"proxy close\");\n            close();\n        } else {\n            log.error(\"proxy unknown opCode {}\", opCode);\n        }\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        super.channelActive(ctx);\n       ", "first_line_groundtruth": "proxyClient.updateHeatbeatTime();", "first_line_prediction": " Frame frame = new Frame(0x61, serviceKey, null);", "match": 0}
{"groundtruth": "().write(Json.parseToJson(this.body));", "prediction": "().write(this.json.toJson(this.body));\n        response.getWriter().close();\n    }", "first_line_groundtruth": "().write(Json.parseToJson(this.body));", "first_line_prediction": "().write(this.json.toJson(this.body));", "match": 0}
{"groundtruth": "message, status.getValue(), request.getRequestURI(), new Date())).build(response);", "prediction": "new Date(), message)).build(request, response);\n    }", "first_line_groundtruth": "message, status.getValue(), request.getRequestURI(), new Date())).build(response);", "first_line_prediction": "new Date(), message)).build(request, response);", "match": 0}
{"groundtruth": "ResponseEntity.ok().body(obj.getPosts());", "prediction": " ResponseEntity.ok(obj.getPosts());\n    }\n\n    @GetMapping(value = \"{id}/posts/{postId}\")\n    ResponseEntity<Post> findPostById(@PathVariable String id, @PathVariable String postId){\n        User obj = service.findById(id);\n        return  ResponseEntity.ok(obj.getPosts().stream().filter(x -> x.getId().equals(postId)).findFirst().orElse(null));\n    }\n\n    @PostMapping(value = \"{id}/posts\")\n    public ResponseEntity<Void> insertPost(@PathVariable String id, @RequestBody Post objPost){\n        User obj = service.findById(id", "first_line_groundtruth": "ResponseEntity.ok().body(obj.getPosts());", "first_line_prediction": " ResponseEntity.ok(obj.getPosts());", "match": 0}
{"groundtruth": "= tenantRepository.findByTenantId(tenant).get();", "prediction": " = tenantRepository.findByTenantId(tenant);\n            if (dbTenant == null) {\n                throw new IllegalStateException(\"Tenant \" + tenant + \" not found\");\n            }\n            properties.put(AvailableSettings.DEFAULT_SCHEMA, dbTenant.getSchema());\n        }\n\n        emfBean.setJpaPropertyMap(properties);\n        emfBean.setJpaVendorAdapter(vendorAdapter);\n        emfBean.setJpaConnectionProvider(connectionProvider);\n        emfBean.setJpaDialect(vendorAdapter.getJpaDialect());\n        emfBean.setJpaVendorAdapter(vendorAdapter);\n        emfBean.setJpaProperty", "first_line_groundtruth": "= tenantRepository.findByTenantId(tenant).get();", "first_line_prediction": " = tenantRepository.findByTenantId(tenant);", "match": 0}
{"groundtruth": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);", "prediction": " if (isolationType == IsolationType.DATABASE) {\n            url = urlPrefix + \"/\" + tenantId + \"/\" + dbOrSchema;\n        } else {\n            url = urlPrefix + \"/\" + tenantId + \"/\" + dbOrSchema + \"/\" + userName;\n        }\n\n        // Create tenant\n        Tenant tenant = new Tenant();\n        tenant.setTenantId(tenantId);\n        tenant.setIsolationType(isolationType);\n        tenant.setDbOrSchema(dbOrSchema);\n        tenant.setUrl(url);\n        tenant.setUserName(userName);\n        tenant.setPassword(password);\n        tenantRepository.", "first_line_groundtruth": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);", "first_line_prediction": " if (isolationType == IsolationType.DATABASE) {", "match": 0}
{"groundtruth": "= masterTenantRepository.findByTenantId(key)\n                                .orElseThrow(() -> new RuntimeException(\"No such tenant: \" + key));", "prediction": " = masterTenantRepository.findByTenantId(key);\n                        if (tenant == null) {\n                            throw new IllegalStateException(\"Tenant not found: \" + key);\n                        }\n                        DataSourceProperties properties = dataSourceProperties.clone();\n                        properties.setUrl(urlPrefix + tenant.getTenantName());\n                        DataSource dataSource = properties.initializeDataSourceBuilder().build();\n                        HikariDataSource hikariDataSource = (HikariDataSource) dataSource;\n                        hikariDataSource.setPoolName(key + TENANT_POOL_NAME_SUFFIX);\n                        return dataSource;\n                    }\n                });\n    }\n\n    @Override\n    protected DataSource selectAnyDataSource() {\n        try", "first_line_groundtruth": "= masterTenantRepository.findByTenantId(key)", "first_line_prediction": " = masterTenantRepository.findByTenantId(key);", "match": 0}
{"groundtruth": "String tenant = TenantContext.getTenantId();", "prediction": " // set tenant specific properties\n        properties.put(AvailableSettings.MULTI_TENANT, true);\n        properties.put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, connectionProvider);\n        properties.put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, tenantResolver);\n\n        emfBean.setJpaPropertyMap(properties);\n\n        return emfBean;\n    }\n\n    @Primary\n    @Bean(\"tenantTransactionManager\")\n    public JpaTransactionManager tenantTransactionManager(\n            @Qualifier(\"tenantEntityManagerFactory\")\n            EntityManagerFactory tenantEntityManagerFactory) {\n        JpaTransactionManager transactionManager = new J", "first_line_groundtruth": "String tenant = TenantContext.getTenantId();", "first_line_prediction": " // set tenant specific properties", "match": 0}
{"groundtruth": "gpuTestCurlAnimView.flipSetToDefault();", "prediction": " gpuTestCurlAnimView.flipFinish();\n                        break;\n                }\n                return true;\n            }\n        });\n    }", "first_line_groundtruth": "gpuTestCurlAnimView.flipSetToDefault();", "first_line_prediction": " gpuTestCurlAnimView.flipFinish();", "match": 0}
{"groundtruth": "f.setXY(width, height);", "prediction": " f.setXY(0, 0);\n        }\n        g.setXY(width, height);\n        e.setXY(0, height);\n        h.setXY(width, height);\n        c.setXY(0, 0);\n        j.setXY(width, 0);\n        b.setXY(0, height);\n        k.setXY(width, height);\n        d.setXY(0, 0);\n        i.setXY(width, 0);\n        a.setXY(x, y);\n        f.setXY(x, y);\n        g", "first_line_groundtruth": "f.setXY(width, height);", "first_line_prediction": " f.setXY(0, 0);", "match": 0}
{"groundtruth": "animationEffecter.onScroll();", "prediction": " animationEffecter.computeScroll();\n        }\n    }\n\n    @Override\n    public void onViewSizeChanged(int width, int height) {\n        vWidth = width;\n        vHeight = height;\n        if (null != animationEffecter) {\n            animationEffecter.onViewSizeChanged(vWidth, vHeight);\n        }\n    }\n\n    @Override\n    public void onViewAttachedToWindow() {\n        if (null != animationEffecter) {\n            animationEffecter.onViewAttachedToWindow();\n        }\n    }\n\n    @Override\n    public void onViewDetachedFromWindow() {\n        if (null != animation", "first_line_groundtruth": "animationEffecter.onScroll();", "first_line_prediction": " animationEffecter.computeScroll();", "match": 0}
{"groundtruth": "return animationEffecter.animInEffect();", "prediction": " return animationEffecter.animRunning();\n        }\n        return false;\n    }\n\n    @Override\n    public void setCurlTexture(Bitmap bitmap) {\n        currentViewBitmap = bitmap;\n        performDrawCurlTexture = true;\n    }\n\n    @Override\n    public void setCurlTexture(Bitmap previousBitmap, Bitmap currentBitmap, Bitmap nextBitmap) {\n        previousViewBitmap = previousBitmap;\n        currentViewBitmap = currentBitmap;\n        nextViewBitmap = nextBitmap;\n        performDrawCurlTexture = true;\n    }\n\n    @Override\n    public void setCurlTexture(Bitmap previousBitmap, Bitmap currentBitmap) {\n        previousViewBitmap =", "first_line_groundtruth": "return animationEffecter.animInEffect();", "first_line_prediction": " return animationEffecter.animRunning();", "match": 0}
{"groundtruth": "f.setXY(0, 0);", "prediction": " f.setXY(width, height);\n    }\n\n    public void flipSetTo(float x, float y) {\n        a.setXY(x, y);\n        f.setXY(x, y);\n    }\n\n    public void flipSetTo(FPoint f) {\n        a.setXY(f.x, f.y);\n        f.setXY(f.x, f.y);\n    }\n\n    public void flipSetTo(FPoint a, FPoint f) {\n        this.a.setXY(a.x, a.y);\n        this.f.setXY", "first_line_groundtruth": "f.setXY(0, 0);", "first_line_prediction": " f.setXY(width, height);", "match": 0}
{"groundtruth": "readAnimView.buildBitmap(coverSlideDirection);", "prediction": " currentX = x;\n                }\n                if (coverSlideDirection != AnimHelper.SLID_DIRECTION_UNKNOWN) {\n                    if (coverSlideDirection == AnimHelper.SLID_DIRECTION_RIGHT) {\n                        if (curDistance > 0) {\n                            moveSampling.add(curDistance);\n                            if (moveSampling.size() > MAX_COUNT) {\n                                moveSampling.remove(0);\n                            }\n                        }\n                    } else {\n                        if (curDistance < 0) {\n                            moveSampling.add(curDistance);\n                            if (moveSampling.size() > MAX_COUNT) {\n                                moveSampling", "first_line_groundtruth": "readAnimView.buildBitmap(coverSlideDirection);", "first_line_prediction": " currentX = x;", "match": 0}
{"groundtruth": "animationEffecter.onViewAttachedToWindow();", "prediction": " animationEffecter.onAttachedToWindow();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        super.onDetachedFromWindow();\n        if (null != animationEffecter) {\n            animationEffecter.onDetachedFromWindow();\n        }\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        vWidth = MeasureSpec.getSize(widthMeasureSpec);\n        vHeight = MeasureSpec.getSize(heightMeasureSpec);\n    }\n\n    @Override\n    protected void onSizeChanged", "first_line_groundtruth": "animationEffecter.onViewAttachedToWindow();", "first_line_prediction": " animationEffecter.onAttachedToWindow();", "match": 0}
{"groundtruth": "f.setXY(width, 0);", "prediction": " a.setXY(x, y);\n             f.setXY(x, y);\n             g.setXY(x, y);\n             e.setXY(x, y);\n             h.setXY(x, y);\n             c.setXY(x, y);\n             j.setXY(x, y);\n             b.setXY(x, y);\n             k.setXY(x, y);\n             d.setXY(x, y);\n             i.setXY(x, y);\n        } else {\n            a.setXY(x, y);\n            f.setXY", "first_line_groundtruth": "f.setXY(width, 0);", "first_line_prediction": " a.setXY(x, y);", "match": 0}
{"groundtruth": "a.setXY(-1, -1);", "prediction": " //\u521d\u59cb\u5316\u56fe\u5f62\n        initPath();\n        //\u521d\u59cb\u5316\u56fe\u5f62\n        initBitmap();\n    }\n\n    private void initPath() {\n        //\u521d\u59cb\u5316\u56fe\u5f62\n        a = new FPoint(width / 2, height / 2);\n        f = new FPoint(width / 2, height / 2);\n        g = new FPoint(width / 2, height / 2);\n        e = new FPoint(width / 2, height / 2);\n        h = new FPoint(width / 2, height / 2);\n        c = new FPoint(width / 2,", "first_line_groundtruth": "a.setXY(-1, -1);", "first_line_prediction": " //\u521d\u59cb\u5316\u56fe\u5f62", "match": 0}
{"groundtruth": "animationEffecter.onViewSizeChanged(vWidth, vHeight);", "prediction": " animationEffecter.onViewAttachedToWindow();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        super.onDetachedFromWindow();\n        if (null != animationEffecter) {\n            animationEffecter.onViewDetachedFromWindow();\n        }\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        vWidth = MeasureSpec.getSize(widthMeasureSpec);\n        vHeight = MeasureSpec.getSize(heightMeasureSpec);\n    }\n\n    @Override\n    protected void on", "first_line_groundtruth": "animationEffecter.onViewSizeChanged(vWidth, vHeight);", "first_line_prediction": " animationEffecter.onViewAttachedToWindow();", "match": 0}
{"groundtruth": "(readAnimView.getPreviousBitmap(), -leftOffset, 0, paint);", "prediction": "(readAnimView.getPreviousBitmap(), leftOffset, 0, paint);\n            canvas.restore();\n            canvas.save();\n            canvas.clipPath(getPathB());\n            canvas.drawBitmap(readAnimView.getCurrentBitmap(), 0, 0, paint);\n            canvas.restore();\n            drawShadow((int) leftOffset, canvas);\n        }\n    }\n\n    private void drawShadow(int offset, Canvas canvas) {\n        if (offset > 0) {\n            canvas.save();\n            canvas.clipPath(getPathAToLeft());\n            canvas.drawBitmap(readAnimView.getPreviousBitmap", "first_line_groundtruth": "(readAnimView.getPreviousBitmap(), -leftOffset, 0, paint);", "first_line_prediction": "(readAnimView.getPreviousBitmap(), leftOffset, 0, paint);", "match": 0}
{"groundtruth": "int i = mRetrofitUrlManager.getPathSize();", "prediction": "int i = 0; i < mRetrofitUrlManager.getPathSize(); i++) {\n                    newPathSegments.add(encodedPathSegments.get(i));\n                }\n            }\n\n            builder.addEncodedPathSegments(newPathSegments);\n            mCache.put(getKey(domainUrl, url), builder.build().toString());\n        }\n\n        return builder.build();\n    }\n\n    private String getKey(HttpUrl domainUrl, HttpUrl url) {\n        return domainUrl.toString() + url.toString();\n    }", "first_line_groundtruth": "int i = mRetrofitUrlManager.getPathSize();", "first_line_prediction": "int i = 0; i < mRetrofitUrlManager.getPathSize(); i++) {", "match": 0}
{"groundtruth": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && (null != readAnimView.getNextBitmap() && null != readAnimView.getCurrentBitmap())) {", "prediction": " (slideDirection == AnimHelper.SLID_DIRECTION_LEFT) {\n            return readAnimView.getCurrentBitmap() != null && readAnimView.getNextBitmap() != null;\n        } else if (slideDirection == AnimHelper.SLID_DIRECTION_RIGHT) {\n            return readAnimView.getPreviousBitmap() != null;\n        }\n        return false;\n    }", "first_line_groundtruth": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && (null != readAnimView.getNextBitmap() && null != readAnimView.getCurrentBitmap())) {", "first_line_prediction": " (slideDirection == AnimHelper.SLID_DIRECTION_LEFT) {", "match": 0}
{"groundtruth": "+ mRetrofitUrlManager.getPathSize();", "prediction": " + url.query();\n    }", "first_line_groundtruth": "+ mRetrofitUrlManager.getPathSize();", "first_line_prediction": " + url.query();", "match": 0}
{"groundtruth": "+ mRetrofitUrlManager.getBaseUrl().host()\n                                + mRetrofitUrlManager.getBaseUrl().encodedPath()));", "prediction": " + mRetrofitUrlManager.getBaseUrl().host() + mRetrofitUrlManager.getBaseUrl().encodedPath()));\n            }\n\n            builder.addEncodedPathSegments(newPathSegments);\n            mCache.put(getKey(domainUrl, url), builder.build().toString());\n        }\n\n        return builder.build();\n    }\n\n    private String getKey(HttpUrl domainUrl, HttpUrl url) {\n        return domainUrl.toString() + url.toString();\n    }", "first_line_groundtruth": "+ mRetrofitUrlManager.getBaseUrl().host()", "first_line_prediction": " + mRetrofitUrlManager.getBaseUrl().host() + mRetrofitUrlManager.getBaseUrl().encodedPath()));", "match": 0}
{"groundtruth": "() > mRetrofitUrlManager.getPathSize()) {", "prediction": "() > 0) {\n                newPathSegments.add(0, url.encodedPathSegments().get(0));\n            }\n\n            builder.encodedPathSegments(newPathSegments);\n\n            mCache.put(getKey(domainUrl, url), builder.build().toString());\n        }\n\n        return builder.build();\n    }\n\n    private String getKey(HttpUrl domainUrl, HttpUrl url) {\n        return domainUrl.toString() + url.toString();\n    }", "first_line_groundtruth": "() > mRetrofitUrlManager.getPathSize()) {", "first_line_prediction": "() > 0) {", "match": 0}
{"groundtruth": "drawable = readAnimView.getAnimHelper().getCoverGradientDrawable();", "prediction": " drawable = new GradientDrawable();\n        drawable.setShape(GradientDrawable.RECTANGLE);\n        drawable.setGradientType(GradientDrawable.LINEAR_GRADIENT);\n        drawable.setGradientRadius(10);\n        drawable.setGradientColors(new int[]{Color.parseColor(\"#000000\"), Color.parseColor(\"#000000\")});\n        drawable.setGradientCenter(0, 0);\n        drawable.setGradientAngle(90);\n        drawable.setGradientCenter(0, 0);\n        drawable.setGradientType(GradientDrawable.LINEAR_GRADIENT);\n       ", "first_line_groundtruth": "drawable = readAnimView.getAnimHelper().getCoverGradientDrawable();", "first_line_prediction": " drawable = new GradientDrawable();", "match": 0}
{"groundtruth": "DLog.log(\"touchUp coverAnimationRunning=%s\", coverAnimationRunning);", "prediction": " if (lastFingerLeftSlop) {\n             if (coverSlideDirection == AnimHelper.SLID_DIRECTION_LEFT) {\n                 readAnimView.onClickNextPage();\n             } else if (coverSlideDirection == AnimHelper.SLID_DIRECTION_RIGHT) {\n                 readAnimView.onClickPrePage();\n             }\n         } else {\n             if (coverSlideDirection == AnimHelper.SLID_DIRECTION_LEFT) {\n                 readAnimView.onClickPrePage();\n             } else if (coverSlideDirection == AnimHelper.SLID_DIRECTION_RIGHT) {\n                 readAnimView.onClickNextPage();", "first_line_groundtruth": "DLog.log(\"touchUp coverAnimationRunning=%s\", coverAnimationRunning);", "first_line_prediction": " if (lastFingerLeftSlop) {", "match": 0}
{"groundtruth": "readLayoutManger.getBookFlipMode();", "prediction": " readLayoutManger.getBookFlipMode();\n    }\n\n    @Override\n    public void onForceLayoutCompleted(int position) {\n        currentPosition = position;\n        if (null != onPositionChangedListener) {\n            onPositionChangedListener.onPositionChanged(position);\n        }\n    }\n\n    @Override\n    public void onScrollStop() {\n        if (null != onPositionChangedListener) {\n            onPositionChangedListener.onPositionChanged(currentPosition);\n        }\n    }\n\n    @Override\n    public void onScrollStart() {\n\n    }\n\n    @Override\n    public void onScrollEnd() {\n\n    }\n\n    @Override", "first_line_groundtruth": "readLayoutManger.getBookFlipMode();", "first_line_prediction": " readLayoutManger.getBookFlipMode();", "match": 0}
{"groundtruth": "readLayoutManger.setonStopScroller(new ItemOnScrollStop());", "prediction": " setItemViewCacheSize(10);\n        setHasFixedSize(true);\n    }\n\n    @Override\n    public void setAdapter(Adapter adapter) {\n        super.setAdapter(adapter);\n        if (adapter instanceof BookView) {\n            ((BookView) adapter).setRVInnerItemFunction(this);\n            ((BookView) adapter).setRVOuterFunction(this);\n        }\n    }\n\n    @Override\n    public void setOnScrollListener(OnScrollListener listener) {\n        super.setOnScrollListener(listener);\n        if (listener instanceof BookView.OnScrollListener) {\n            ((BookView.OnScrollListener", "first_line_groundtruth": "readLayoutManger.setonStopScroller(new ItemOnScrollStop());", "first_line_prediction": " setItemViewCacheSize(10);", "match": 0}
{"groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 10);", "prediction": " if (finallyMoveX > 0) {\n                             //\u5de6\u6ed1\u5230\u5934\u4e86\n                             if (currentPosition > 0) {\n                                 currentPosition--;\n                                 readLayoutManger.smoothScrollToPosition(currentPosition);\n                                 if (null != onPositionChangedListener) {\n                                     onPositionChangedListener.onPositionChanged(currentPosition);\n                                 }\n                             }\n                         }\n                    } else if (lastMoveX - downX > 0) {//\u53f3\u6ed1\n                        if (finallyMoveX < 0) {\n                            //\u53f3\u6ed1\u5230\u5c3e\u4e86\n                            if (currentPosition < getChildCount() - 1) {\n                                current", "first_line_groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 10);", "first_line_prediction": " if (finallyMoveX > 0) {", "match": 0}
{"groundtruth": "readLayoutManger.onRecyclerViewSizeChange();", "prediction": " readLayoutManger.onSizeChanged(w, h, oldw, oldh);\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n        if (allowInterceptTouchEvent) {\n            return super.onInterceptTouchEvent(ev);\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        if (allowInterceptTouchEvent) {\n            return super.onTouchEvent(ev);\n        }\n        return false;\n    }\n\n    @Override\n    public void onScrollStateChanged(int state) {\n        super.onScrollStateChanged(", "first_line_groundtruth": "readLayoutManger.onRecyclerViewSizeChange();", "first_line_prediction": " readLayoutManger.onSizeChanged(w, h, oldw, oldh);", "match": 0}
{"groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 0);", "prediction": " readLayoutManger.setAutoLeftScroll(finallyMoveX > -10);\n                    }\n                }\n                break;\n        }\n        return super.onTouchEvent(e);\n    }\n\n    @Override\n    public void onForceLayoutCompleted(int position) {\n        if (null != onPositionChangedListener) {\n            onPositionChangedListener.onPositionChanged(position);\n        }\n    }\n\n    @Override\n    public void onScrollStop(int position) {\n        if (null != onPositionChangedListener) {\n            onPositionChangedListener.onPositionChanged(position);\n        }\n    }\n\n    @Override\n    public void on", "first_line_groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 0);", "first_line_prediction": " readLayoutManger.setAutoLeftScroll(finallyMoveX > -10);", "match": 0}
{"groundtruth": "readLayoutManger.setBookFlipMode(flipMode);", "prediction": " readLayoutManger.setFlipMode(flipMode);\n    }\n\n    @Override\n    public void onItemClick(View view, int position) {\n        if (null != onPositionChangedListener) {\n            onPositionChangedListener.onPositionChanged(position);\n        }\n    }\n\n    @Override\n    public void onItemLongClick(View view, int position) {\n\n    }\n\n    @Override\n    public void onItemSwipe(View view, int position) {\n\n    }\n\n    @Override\n    public void onItemSwipeComplete(View view, int position) {\n\n    }\n\n    @Override\n    public void onItemForceLayoutCompleted", "first_line_groundtruth": "readLayoutManger.setBookFlipMode(flipMode);", "first_line_prediction": " readLayoutManger.setFlipMode(flipMode);", "match": 0}
{"groundtruth": "DLog.log(\"coverAnimationRunning coverAnimationRunning=%s \u7ed3\u675f\uff0c\u5ef6\u65f6\u5f00\u542f \u72b6\u6001\u91cd\u7f6e\", coverAnimationRunning);", "prediction": " readAnimView.postDelayed(scrollRunnable, 100);\n            }\n            currentX = x;\n            invalidate();\n        }\n    }\n\n    @Override\n    public void onFling() {\n        if (scroller.computeScrollOffset()) {\n            int x = scroller.getCurrX();\n            int y = scroller.getCurrY();\n            if (x == scroller.getFinalX() && y == scroller.getFinalY()) {\n                scroller.forceFinished(true);\n                readAnimView.postDelayed(scrollRunnable, 100);\n            }\n            currentX =", "first_line_groundtruth": "DLog.log(\"coverAnimationRunning coverAnimationRunning=%s \u7ed3\u675f\uff0c\u5ef6\u65f6\u5f00\u542f \u72b6\u6001\u91cd\u7f6e\", coverAnimationRunning);", "first_line_prediction": " readAnimView.postDelayed(scrollRunnable, 100);", "match": 0}
{"groundtruth": "readLayoutManger.forceScrollToPosition(position);", "prediction": " currentPosition = position;\n         readLayoutManger.scrollToPosition(position);\n    }\n\n    @Override\n    public void scrollToPositionWithOffset(int position, int offset) {\n        currentPosition = position;\n        readLayoutManger.scrollToPositionWithOffset(position, offset);\n    }\n\n    @Override\n    public void smoothScrollToPosition(int position) {\n        currentPosition = position;\n        readLayoutManger.smoothScrollToPosition(position);\n    }\n\n    @Override\n    public void smoothScrollToPositionWithOffset(int position, int offset) {\n        currentPosition = position;\n        readLayoutManger.", "first_line_groundtruth": "readLayoutManger.forceScrollToPosition(position);", "first_line_prediction": " currentPosition = position;", "match": 0}
{"groundtruth": "readLayoutManger.setOnForceLayoutCompleted(new ItemOnForceLayoutCompleted());", "prediction": " setItemViewCacheSize(10);\n        setHasFixedSize(true);\n        setNestedScrollingEnabled(false);\n    }\n\n    @Override\n    public void setOnPositionChangedListener(BookView.OnPositionChangedListener onPositionChangedListener) {\n        this.onPositionChangedListener = onPositionChangedListener;\n    }\n\n    @Override\n    public void setEventProxy(EventProxy eventProxy) {\n        this.eventProxyWeakReference = new WeakReference<>(eventProxy);\n    }\n\n    @Override\n    public void setAnimParentView(AnimParentView animParentView) {\n        this.animParentView = animParent", "first_line_groundtruth": "readLayoutManger.setOnForceLayoutCompleted(new ItemOnForceLayoutCompleted());", "first_line_prediction": " setItemViewCacheSize(10);", "match": 0}
{"groundtruth": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");", "prediction": " Food AmericanFoodA = AmericanFoodFactory.produce(\"A\");\n         AmericanFoodA.food();\n         //\u751f\u4ea7\u7f8e\u56fdB\u7c7b\u98df\u7269\n         Food AmericanFoodB = AmericanFoodFactory.produce(\"B\");\n         AmericanFoodB.food();\n    }", "first_line_groundtruth": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");", "first_line_prediction": " Food AmericanFoodA = AmericanFoodFactory.produce(\"A\");", "match": 0}
{"groundtruth": ").animRunning();", "prediction": " ).animRunning();\n        }\n        return false;\n    }\n\n    @Override\n    public void onItemViewTouchEvent(MotionEvent event, int position) {\n        if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {\n            eventProxyWeakReference.get().onItemViewTouchEvent(event, position);\n        }\n    }\n\n    @Override\n    public void onItemViewTouchEvent(MotionEvent event, int position, View view) {\n        if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {\n            eventProxyWeakReference.get().onItemView", "first_line_groundtruth": ").animRunning();", "first_line_prediction": " ).animRunning();", "match": 0}
{"groundtruth": "animParentView.onClickMenuArea();", "prediction": " if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {\n            eventProxyWeakReference.get().onClickMenu();\n         }\n    }\n\n    @Override\n    public void onItemViewClick(View view, int position) {\n        if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {\n            eventProxyWeakReference.get().onItemViewClick(view, position);\n        }\n    }\n\n    @Override\n    public void onItemViewLongClick(View view, int position) {\n        if (null != eventProxyWeakReference && null != eventProxyWeakReference", "first_line_groundtruth": "animParentView.onClickMenuArea();", "first_line_prediction": " if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {", "match": 0}
{"groundtruth": "= AmericanFoodFactory.produce(\"A\");", "prediction": " = AmericanFoodFactory.produce(\"B\");\n        americanFoodB.food();\n    }", "first_line_groundtruth": "= AmericanFoodFactory.produce(\"A\");", "first_line_prediction": " = AmericanFoodFactory.produce(\"B\");", "match": 0}
{"groundtruth": "DLog.log(\"CoverAnimationEffect draw 1\");", "prediction": " return;\n        }\n        if (coverAnimationRunning) {\n            scroller.computeScrollOffset();\n            if (scroller.computeScrollOffset()) {\n                int x = scroller.getCurrX();\n                int y = scroller.getCurrY();\n                readAnimView.buildBitmap(coverSlideDirection);\n                readAnimView.drawBitmap(canvas, x, y);\n                invalidate();\n            } else {\n                coverAnimationRunning = false;\n                readAnimView.buildBitmap(coverSlideDirection);\n                readAnimView.drawBitmap(canvas, 0, 0);\n                invalidate();\n            }\n        }", "first_line_groundtruth": "DLog.log(\"CoverAnimationEffect draw 1\");", "first_line_prediction": " return;", "match": 0}
{"groundtruth": "PlayingSessionInformation.isOnNetwork()) {", "prediction": "client.world.isClient && PlayingSessionInformation.isOnServer()) {\n            if(keybinding.isPressed()) {\n                client.execute(() -> client.interactionManager.clickButton(client.player.currentScreenHandler, 0, 0, 0, client.player));\n            }\n        }\n    }", "first_line_groundtruth": "PlayingSessionInformation.isOnNetwork()) {", "first_line_prediction": "client.world.isClient && PlayingSessionInformation.isOnServer()) {", "match": 0}
{"groundtruth": "!XenyriaConfigManager.getConfig().improvedShootingDetectionForPaintSquad) {", "prediction": "XenyriaConfigManager.getInstance().getPaintSquad().isEnabled()) {\n                    // Check if the player is shooting...\n                    if(MinecraftClient.getInstance().player != null && MinecraftClient.getInstance().player.isSneaking()) {\n                        // Check if the player is in a paint squad...\n                        if(MinecraftClient.getInstance().player.getAttackCooldownProgress(0) > 0.0F) {\n                            // Check if the player is shooting...\n                            if(MinecraftClient.getInstance().player.isAttacking()) {\n                                // Check if the player is in a paint squad...\n                               ", "first_line_groundtruth": "!XenyriaConfigManager.getConfig().improvedShootingDetectionForPaintSquad) {", "first_line_prediction": "XenyriaConfigManager.getInstance().getPaintSquad().isEnabled()) {", "match": 0}
{"groundtruth": "configData = config.toJSON().toString(4);", "prediction": " jsonString = config.save();\n        try(FileWriter writer = new FileWriter(configFile)) {\n            writer.write(jsonString);\n        }\n    }\n\n    public static void setupConfigScreen(ConfigBuilder builder) {\n        builder.setParentScreen(null);\n        builder.setTitle(Text.of(\"Xenyria EEM\"));\n        builder.setSavingRunnable(() -> {\n            try {\n                saveConfig();\n            } catch (IOException | IllegalStateException exception) {\n                LOGGER.error(\"Couldn't save the config file for Xenyria EEM.\", exception);\n            }\n        });\n\n        ConfigCategory category = builder.getOrCreateCategory", "first_line_groundtruth": "configData = config.toJSON().toString(4);", "first_line_prediction": " jsonString = config.save();", "match": 0}
{"groundtruth": "discordActivityAccess.start(applicationId);", "prediction": " // Initialize the new activity access\n                        discordActivityAccess.initialize(applicationId);\n                    }\n\n                    // Send the new rich presence data to the API\n                    LOGGER.info(\"Sending rich presence data...\");\n                    discordActivityAccess.updateActivity(richPresenceData);\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Failed to update rich presence: \" + e.getMessage());\n            }\n        }, 0, UPDATE_INTERVAL, TimeUnit.MILLISECONDS);\n    }", "first_line_groundtruth": "discordActivityAccess.start(applicationId);", "first_line_prediction": " // Initialize the new activity access", "match": 0}
{"groundtruth": "!XenyriaConfigManager.getConfig().shareServerActivity) {", "prediction": "XenyriaConfigManager.getInstance().isDiscordRichPresenceEnabled()) {\n                        richPresenceData.put(\"state\", \"Playing on \" + XenyriaConfigManager.getInstance().getServerName());\n                        richPresenceData.put(\"details\", \"with \" + XenyriaConfigManager.getInstance().getPlayersOnline() + \" players\");\n                        richPresenceData.put(\"large_image\", \"xenyria\");\n                        richPresenceData.put(\"large_text\", \"Xenyria\");\n                        richPresenceData.put(\"small_image\", \"xenyria\");\n                        richPresenceData.put(\"small_text\",", "first_line_groundtruth": "!XenyriaConfigManager.getConfig().shareServerActivity) {", "first_line_prediction": "XenyriaConfigManager.getInstance().isDiscordRichPresenceEnabled()) {", "match": 0}
{"groundtruth": "PlayingSessionInformation.setOnNetwork(true);", "prediction": "\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_SUCCESS) {\n                        // Orion sends one mod handshake packet on login\n                        // This packet contains the current server type\n                        String serverType = packet.getData().getString(\"server_type\");\n                        PlayingSessionInformation.setServerType(EXenyriaServerType.valueOf(serverType));\n                    }\n                }\n        );\n    }", "first_line_groundtruth": "PlayingSessionInformation.setOnNetwork(true);", "first_line_prediction": "", "match": 0}
{"groundtruth": "discordActivityAccess.stop();", "prediction": " // Restart the activity access\n                        discordActivityAccess.initialize();\n                    }\n\n                    // Update the activity\n                    discordActivityAccess.updateActivity(richPresenceData);\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Failed to update rich presence: \" + e.getMessage());\n            }\n        }, 0, UPDATE_INTERVAL, TimeUnit.MILLISECONDS);\n    }", "first_line_groundtruth": "discordActivityAccess.stop();", "first_line_prediction": " // Restart the activity access", "match": 0}
{"groundtruth": "String instanceId = packet.getData().getString(\"server_id\");", "prediction": " // We store it in the PlayingSessionInformation object\n                         PlayingSessionInformation.setServerId(packet.getData());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_ACK) {\n                        // Orion sends one mod handshake packet on login\n                        // This packet contains the current server type\n                        // We store it in the PlayingSessionInformation object\n                        PlayingSessionInformation.setServerType(packet.getData());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_END)", "first_line_groundtruth": "String instanceId = packet.getData().getString(\"server_id\");", "first_line_prediction": " // We store it in the PlayingSessionInformation object", "match": 0}
{"groundtruth": "EXenyriaServerType.determineServerType(instanceId)\n                        );", "prediction": "0,\n                                EXenyriaServerType.fromServerId(instanceId)\n                        );\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_ACK) {\n                        // Orion sends one mod handshake packet on login\n                        // This packet contains the current server ID\n                        String instanceId = packet.getData().getString(\"server_id\");\n                        PlayingSessionInformation.setServerInstanceId(instanceId);\n                        PlayingSessionInformation.setOnNetwork(true);\n                        PlayingSessionInformation.setCurrentServerType(\n                                0,\n                                EXenyriaServerType.fromServerId(", "first_line_groundtruth": "EXenyriaServerType.determineServerType(instanceId)", "first_line_prediction": "0,", "match": 0}
{"groundtruth": "setLastReceivedRichPresence(packet.getData());", "prediction": "updateRichPresence(packet.getRichPresence());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.PS) {\n                        PlayingSessionInformation.updateSessionInformation(packet.getSessionInformation());\n                    }\n                }\n        );\n    }", "first_line_groundtruth": "setLastReceivedRichPresence(packet.getData());", "first_line_prediction": "updateRichPresence(packet.getRichPresence());", "match": 0}
{"groundtruth": "\"Current server id: \" + PlayingSessionInformation.getServerInstanceId());", "prediction": "packet.getData().toString(2));\n                    }\n                }\n        );\n    }", "first_line_groundtruth": "\"Current server id: \" + PlayingSessionInformation.getServerInstanceId());", "first_line_prediction": "packet.getData().toString(2));", "match": 0}
{"groundtruth": "responsePacket.sendToServer();", "prediction": " responsePacket.getData().put(\"server_id\", instanceId);\n                         responsePacket.getData().put(\"server_type\", PlayingSessionInformation.getCurrentServerType().toString());\n                         responsePacket.getData().put(\"server_name\", PlayingSessionInformation.getCurrentServerName());\n                         responsePacket.getData().put(\"server_version\", PlayingSessionInformation.getCurrentServerVersion());\n                         responsePacket.getData().put(\"server_protocol\", PlayingSessionInformation.getCurrentServerProtocol());\n                         responsePacket.getData().put(\"server_port\", PlayingSessionInformation.getCurrentServerPort());\n                         responsePacket.getData().put(\"", "first_line_groundtruth": "responsePacket.sendToServer();", "first_line_prediction": " responsePacket.getData().put(\"server_id\", instanceId);", "match": 0}
{"groundtruth": "XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);", "prediction": " JSONObject json = new JSONObject(rawJsonText);\n                     if(json.has(\"type\")) {\n                         String type = json.getString(\"type\");\n                         if(type.equals(\"session_start\")) {\n                             // Start a new session\n                             PlayingSessionInformation session = new PlayingSessionInformation(json);\n                             if(EXenyriaServerType.isServer()) {\n                                 DiscordRichPresenceIntegration.updatePresence(session);\n                             }\n                         } else if(type.equals(\"session_end\")) {\n                             // End the current session\n                             PlayingSessionInformation session = new PlayingSessionInformation(json);\n                             if(EX", "first_line_groundtruth": "XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);", "first_line_prediction": " JSONObject json = new JSONObject(rawJsonText);", "match": 0}
{"groundtruth": "(\"Current network state: \" + PlayingSessionInformation.isOnNetwork());", "prediction": "(\"Received debug packet: \" + packet.getData().toString());\n                    } else {\n                        LOGGER.warning(\"Unknown packet type: \" + packet.getPacketType());\n                    }\n                }\n        );\n    }", "first_line_groundtruth": "(\"Current network state: \" + PlayingSessionInformation.isOnNetwork());", "first_line_prediction": "(\"Received debug packet: \" + packet.getData().toString());", "match": 0}
{"groundtruth": "XenyriaConfigManager.getConfig().enableDiscordRichPresence) {", "prediction": "XenyriaConfigManager.isRichPresenceEnabled()) {\n                            return;\n                        }\n\n                        // If the packet is a rich presence packet, we send it to the Discord integration\n                        DiscordRichPresenceIntegration.sendRichPresence(packet.getRichPresence());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.PS) {\n                        // If the packet is a playing session packet, we send it to the PlayingSessionInformation class\n                        PlayingSessionInformation.setPlayingSession(packet.getPlayingSession());\n                    }\n                }\n        );\n    }", "first_line_groundtruth": "XenyriaConfigManager.getConfig().enableDiscordRichPresence) {", "first_line_prediction": "XenyriaConfigManager.isRichPresenceEnabled()) {", "match": 0}
{"groundtruth": "PlayingSessionInformation.setServerInstanceId(instanceId);", "prediction": " // If the server ID is not the same as the one we're currently on, we're on a different server\n                        if (!instanceId.equals(PlayingSessionInformation.getInstance().getServerId())) {\n                            PlayingSessionInformation.getInstance().setServerId(instanceId);\n                            PlayingSessionInformation.getInstance().setServerType(EXenyriaServerType.fromId(instanceId));\n                            PlayingSessionInformation.getInstance().setServerVersion(packet.getData().getString(\"server_version\"));\n                            PlayingSessionInformation.getInstance().setServerName(packet.getData().getString(\"server_name\"));\n                            PlayingSessionInformation.getInstance", "first_line_groundtruth": "PlayingSessionInformation.setServerInstanceId(instanceId);", "first_line_prediction": " // If the server ID is not the same as the one we're currently on, we're on a different server", "match": 0}
{"groundtruth": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.DEBUG) {", "prediction": " else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE) {\n                        // Orion sends one mod handshake packet on login\n                        // This packet contains the current server ID\n                        String instanceId = packet.getData().getString(\"server_id\");\n                        PlayingSessionInformation.setServerInstanceId(instanceId);\n                        PlayingSessionInformation.setOnNetwork(true);\n                        PlayingSessionInformation.setCurrentServerType(\n                                EXenyriaServerType.determineServerType(instanceId)\n                        );\n                        LOGGER.info(\"Successfully completed handshake with Orion\");\n                    } else {\n                        LOGGER", "first_line_groundtruth": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.DEBUG) {", "first_line_prediction": " else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE) {", "match": 0}
{"groundtruth": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {", "prediction": " (packet.getType() == XenyriaServerPacket.Type.PLAYING_SESSION_INFORMATION) {\n                        PlayingSessionInformation sessionInformation = packet.getPlayingSessionInformation();\n                        if(sessionInformation != null) {\n                            DiscordRichPresenceIntegration.updatePresence(sessionInformation);\n                        }\n                    } else if (packet.getType() == XenyriaServerPacket.Type.CONFIG_UPDATE) {\n                        XenyriaConfigManager.updateConfig(packet.getConfigUpdate());\n                    } else if (packet.getType() == XenyriaServerPacket.Type.SERVER_TYPE) {\n                        EXenyriaServerType server", "first_line_groundtruth": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {", "first_line_prediction": " (packet.getType() == XenyriaServerPacket.Type.PLAYING_SESSION_INFORMATION) {", "match": 0}
{"groundtruth": ".lexer.lex(markdown)).visit(compiler);", "prediction": ".lexer.lex(markdown));\n        var ast = this.parser.root();\n\n        return compiler.compile(ast);\n    }\n\n    public R process(Text markdown) {\n        var compiler = this.compilerFactory.get();\n\n        this.parser.parse(this.lexer.lex(markdown));\n        var ast = this.parser.root();\n\n        return compiler.compile(ast);\n    }\n\n    public R process(Text.Serializer serializer, Text markdown) {\n        var compiler = this.compilerFactory.get();\n\n        this.parser.parse(this.lexer.lex(markdown));\n        var ast = this.", "first_line_groundtruth": ".lexer.lex(markdown)).visit(compiler);", "first_line_prediction": ".lexer.lex(markdown));", "match": 0}
{"groundtruth": "+ feature.name() + \"' is incompatible with compiler '\" + testCompiler.name() + \"'\");", "prediction": " + feature.getClass().getSimpleName() + \"' does not support compiler '\" + testCompiler.getClass().getSimpleName() + \"'\");\n            }\n        }\n\n        this.lexer = new Lexer(this.features);\n        this.parser = new Parser(this.features);\n    }\n\n    public MarkdownProcessor<R> copyWith(MarkdownCompiler<R> compiler) {\n        return new MarkdownProcessor<>(() -> compiler, this.features);\n    }\n\n    public MarkdownProcessor<R> copyWith(MarkdownFeature... features) {\n        return new MarkdownProcessor<>(this.compilerFactory, Arrays.asList(features));\n    }\n\n    public MarkdownProcessor", "first_line_groundtruth": "+ feature.name() + \"' is incompatible with compiler '\" + testCompiler.name() + \"'\");", "first_line_prediction": " + feature.getClass().getSimpleName() + \"' does not support compiler '\" + testCompiler.getClass().getSimpleName() + \"'\");", "match": 0}
{"groundtruth": "builder.pushStyle(style -> style.withColor(Formatting.GRAY).withItalic(true));", "prediction": "builder.pushStyle(style -> style.withFormatting(Formatting.GRAY));\n    }\n\n    @Override\n    public void visitBlockQuoteEnd() {\n        this.quoteDepth--;\n        this.builder.popStyle();\n        this.builder.append(this.quoteMarker());\n    }\n\n    @Override\n    public void visitList(boolean ordered) {\n        this.listDepth++;\n        this.builder.append(ordered ? Text.literal(\"1. \") : Text.literal(\"\u2022 \"));\n        this.builder.pushStyle(style -> style.withFormatting(Formatting.GRAY));\n    }\n\n    @Override\n    public void visit", "first_line_groundtruth": "builder.pushStyle(style -> style.withColor(Formatting.GRAY).withItalic(true));", "first_line_prediction": "builder.pushStyle(style -> style.withFormatting(Formatting.GRAY));", "match": 0}
{"groundtruth": "this.builder.popStyle();", "prediction": " this.quoteDepth--;\n         this.builder.popStyle();\n         this.builder.append(this.quoteMarker());\n     }", "first_line_groundtruth": "this.builder.popStyle();", "first_line_prediction": " this.quoteDepth--;", "match": 0}
{"groundtruth": "return RealCameraCore.isRenderingWorld && config.shouldDisableRender(modelPartName) && RealCameraCore.isActive();", "prediction": " return true;\n    }\n\n    /**\n     * @see com.xtracr.realcamera.mixins.MixinPlayerEntityRenderer#onRenderModelRETURN\n     * MixinPlayerEntityRenderer.onRenderModelRETURN\n     */\n    public static boolean shouldRender(String modelPartName) {\n        return !ModConfig.Disable.optionalParts.contains(modelPartName);\n    }\n\n    /**\n     * @see com.xtracr.realcamera.mixins.MixinPlayerEntityRenderer#onRenderModelRETURN\n     * MixinPlayerEntityRenderer.onRenderModelRETURN\n     */\n    public static boolean shouldRender(String modelPartName", "first_line_groundtruth": "return RealCameraCore.isRenderingWorld && config.shouldDisableRender(modelPartName) && RealCameraCore.isActive();", "first_line_prediction": " return true;", "match": 0}
{"groundtruth": "modConfig.set(new ModConfig());", "prediction": " GSON.toJson(new ModConfig(), writer);\n        } catch (Exception exception) {\n            RealCamera.LOGGER.warn(\"Failed to reset \" + FILE_NAME, exception);\n        }\n    }", "first_line_groundtruth": "modConfig.set(new ModConfig());", "first_line_prediction": " GSON.toJson(new ModConfig(), writer);", "match": 0}
{"groundtruth": "get(config.getModelModID()).test(tickDelta, matrixStack);", "prediction": "getOrDefault(getModelPartName(), (f, m) -> false).test(tickDelta, matrixStack);\n    }", "first_line_groundtruth": "get(config.getModelModID()).test(tickDelta, matrixStack);", "first_line_prediction": "getOrDefault(getModelPartName(), (f, m) -> false).test(tickDelta, matrixStack);", "match": 0}
{"groundtruth": "else config.setAdjustOffset(!config.isAdjustingOffset());", "prediction": " else config.cycleModAdjustMode();\n            ConfigFile.load();\n            ConfigFile.save();\n        }\n        while (TOGGLE_CAMERA_MODE.wasPressed()) {\n            if (config.isClassic()) config.cycleClassicCameraMode();\n             else config.cycleModCameraMode();\n            ConfigFile.load();\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            if (config.isClassic()) config.adjustClassicUp();\n             else config.adjustModUp();\n            ConfigFile.load();\n            ConfigFile.save();\n        }\n        while (ADJUST_", "first_line_groundtruth": "else config.setAdjustOffset(!config.isAdjustingOffset());", "first_line_prediction": " else config.cycleModAdjustMode();", "match": 0}
{"groundtruth": "(config.isClassic()) config.adjustClassicZ(true);", "prediction": " (config.isAdjustingOffset()) config.adjustOffset(-1);\n            else config.adjustCamera(-1);\n            ConfigFile.save();\n        }\n        while (ADJUST_RIGHT.wasPressed()) {\n            if  (config.isAdjustingOffset()) config.adjustOffset(1);\n            else config.adjustCamera(1);\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            if  (config.isAdjustingOffset()) config.adjustOffset(1);\n            else config.adjustCamera(1);\n            ConfigFile.save();\n        }\n        while", "first_line_groundtruth": "(config.isClassic()) config.adjustClassicZ(true);", "first_line_prediction": " (config.isAdjustingOffset()) config.adjustOffset(-1);", "match": 0}
{"groundtruth": "(config.isClassic()) config.cycleClassicAdjustMode();", "prediction": " (config.isAdjustMode()) {\n                config.setAdjustMode(false);\n            } else {\n                config.setAdjustMode(true);\n            }\n            ConfigFile.save();\n        }\n        while (TOGGLE_CAMERA_MODE.wasPressed()) {\n            if  (config.isCameraMode()) {\n                config.setCameraMode(false);\n            } else {\n                config.setCameraMode(true);\n            }\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            config.setAdjustUp(true);\n            ConfigFile.save();\n        }\n        while", "first_line_groundtruth": "(config.isClassic()) config.cycleClassicAdjustMode();", "first_line_prediction": " (config.isAdjustMode()) {", "match": 0}
{"groundtruth": "!config.isClassic());", "prediction": "false);\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            config.setAdjustOffset(true);\n            ConfigFile.save();\n        }\n        while (ADJUST_DOWN.wasPressed()) {\n            config.setAdjustOffset(false);\n            ConfigFile.save();\n        }\n        while (ADJUST_FRONT.wasPressed()) {\n            config.setAdjustOffset(true);\n            ConfigFile.save();\n        }\n        while (ADJUST_BACK.wasPressed()) {\n            config.setAdjustOffset(false);\n            ConfigFile.save();\n        }\n        while", "first_line_groundtruth": "!config.isClassic());", "first_line_prediction": "false);", "match": 0}
{"groundtruth": "RealCameraCore.isActive();", "prediction": " functionProvider.containsKey(modelPartName);\n    }", "first_line_groundtruth": "RealCameraCore.isActive();", "first_line_prediction": " functionProvider.containsKey(modelPartName);", "match": 0}
{"groundtruth": "config.isEnabled();", "prediction": " config.togglePerspective();\n            config.save();\n            RealCamera.LOGGER.info(\"Toggled perspective mode to \" + enabled);\n        }\n\n        while (TOGGLE_ADJUST_MODE.wasPressed()) {\n            boolean enabled =  config.toggleAdjustMode();\n            config.save();\n            RealCamera.LOGGER.info(\"Toggled adjust mode to \" + enabled);\n        }\n\n        while (TOGGLE_CAMERA_MODE.wasPressed()) {\n            boolean enabled =  config.toggleCameraMode();\n            config.save();\n            RealCamera.LOGGER.info(\"Toggled camera mode to \" + enabled);\n        }", "first_line_groundtruth": "config.isEnabled();", "first_line_prediction": " config.togglePerspective();", "match": 0}
{"groundtruth": "config.isClassic()) config.cycleClassicAdjustMode();", "prediction": "config.isAdjustMode()) {\n                config.setAdjustMode(false);\n            } else {\n                config.setAdjustMode(true);\n            }\n            ConfigFile.save();\n        }\n        while (TOGGLE_CAMERA_MODE.wasPressed()) {\n            if (config.isCameraMode()) {\n                config.setCameraMode(false);\n            } else {\n                config.setCameraMode(true);\n            }\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            config.setAdjustUp(config.getAdjustUp() + 0.1f);\n           ", "first_line_groundtruth": "config.isClassic()) config.cycleClassicAdjustMode();", "first_line_prediction": "config.isAdjustMode()) {", "match": 0}
{"groundtruth": ")) config.adjustClassicZ(true);", "prediction": "true)) config.adjustClassicLeft();\n            else config.adjustOffsetLeft();\n            ConfigFile.save();\n        }\n        while (ADJUST_RIGHT.wasPressed()) {\n            if (config.isClassic(true)) config.adjustClassicRight();\n            else config.adjustOffsetRight();\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            if (config.isClassic(true)) config.adjustClassicUp();\n            else config.adjustOffsetUp();\n            ConfigFile.save();\n        }\n        while (ADJUST_DOWN.wasPressed()) {\n            if (config", "first_line_groundtruth": ")) config.adjustClassicZ(true);", "first_line_prediction": "true)) config.adjustClassicLeft();", "match": 0}
{"groundtruth": "config.adjustBindingZ(true);", "prediction": " config.adjustOffsetX(true);\n            ConfigFile.save();\n        }\n        while (ADJUST_RIGHT.wasPressed()) {\n            if (config.isClassic()) config.adjustClassicZ(false);\n            else  config.adjustOffsetX(false);\n            ConfigFile.save();\n        }\n        while (ADJUST_UP.wasPressed()) {\n            if (config.isClassic()) config.adjustClassicX(true);\n            else  config.adjustOffsetY(true);\n            ConfigFile.save();\n        }\n        while (ADJUST_DOWN.wasPressed()) {\n            if (config.is", "first_line_groundtruth": "config.adjustBindingZ(true);", "first_line_prediction": " config.adjustOffsetX(true);", "match": 0}
{"groundtruth": "return config.getModModelPartName();", "prediction": " return config.compats.modModelPart;\n    }\n\n    /**\n     * @return the value of {@link com.xtracr.realcamera.config.ModConfig.Compats#modModelPart modModelPart}\n     * option in the config\n     */\n    public static boolean isEnabled() {\n        return config.compats.modModelPart != null;\n    }\n\n    /**\n     * @param partialTicks partialTicks\n     * @param matrices     matrices\n     * @return true if the function returns true\n     */\n    public static boolean render(float partialTicks, MatrixStack matrices) {\n        return functionProvider.get", "first_line_groundtruth": "return config.getModModelPartName();", "first_line_prediction": " return config.compats.modModelPart;", "match": 0}
{"groundtruth": "TableFieldUtil.getFieldMap(r.getClass());", "prediction": " TableFieldUtil.getFieldMap(r.getClass());\n        for (CanalEntry.Column column : columnList) {\n            String fieldName = columnNames.get(column.getName());\n            if (StringUtils.isNotEmpty(fieldName)) {\n                TableFieldUtil.setFieldValue(r, fieldName, column.getValue());\n            }\n        }\n        return r;\n    }", "first_line_groundtruth": "TableFieldUtil.getFieldMap(r.getClass());", "first_line_prediction": " TableFieldUtil.getFieldMap(r.getClass());", "match": 0}
{"groundtruth": "Object result = StringConvertUtil.convertType(type, value);", "prediction": " if (type == String.class) {\n             field.set(object, value);\n         } else {\n             field.set(object, type.cast(value));\n         }\n    }", "first_line_groundtruth": "Object result = StringConvertUtil.convertType(type, value);", "first_line_prediction": " if (type == String.class) {", "match": 0}
{"groundtruth": ") config.adjustClassicX(false);", "prediction": " && config.isAdjustingOffset()) config.adjustClassicX(false);\n            else config.adjustBindingX(false);\n            ConfigFile.save();\n        }\n    }", "first_line_groundtruth": ") config.adjustClassicX(false);", "first_line_prediction": " && config.isAdjustingOffset()) config.adjustClassicX(false);", "match": 0}
{"groundtruth": "= canalProperties.getRabbitMq();", "prediction": " = canalProperties.getMq();\n        return new RabbitMqCanalClient(mqProperties.getBroker(), mqProperties.getPort(), mqProperties.getUsername(), mqProperties.getPassword(), messageHandler);\n    }", "first_line_groundtruth": "= canalProperties.getRabbitMq();", "first_line_prediction": " = canalProperties.getMq();", "match": 0}
{"groundtruth": "(VirtualRenderer.shouldDisableRender(\"jacket\")) model.jacket.visible = false;", "prediction": " (VirtualRenderer.shouldDisableRender(\"rightBoots\")) model.rightBoots.visible = false;\n        if  (VirtualRenderer.shouldDisableRender(\"leftBoots\")) model.leftBoots.visible = false;\n    }", "first_line_groundtruth": "(VirtualRenderer.shouldDisableRender(\"jacket\")) model.jacket.visible = false;", "first_line_prediction": " (VirtualRenderer.shouldDisableRender(\"rightBoots\")) model.rightBoots.visible = false;", "match": 0}
{"groundtruth": "() && DoABarrelRollCompat.modEnabled() && RealCameraCore.isActive()) {", "prediction": "() && RealCameraCore.isActive()) {\n            DoABarrelRollCompat.onBeforeCameraUpdate(tickDelta, limitTime, matrixStack);\n        }\n    }", "first_line_groundtruth": "() && DoABarrelRollCompat.modEnabled() && RealCameraCore.isActive()) {", "first_line_prediction": "() && RealCameraCore.isActive()) {", "match": 0}
{"groundtruth": ".modEnabled() && RealCameraCore.isActive()) {", "prediction": ".isActive()) {\n            DoABarrelRollCompat.onBeforeCameraUpdate(tickDelta, limitTime, matrixStack);\n        }\n    }", "first_line_groundtruth": ".modEnabled() && RealCameraCore.isActive()) {", "first_line_prediction": ".isActive()) {", "match": 0}
{"groundtruth": "if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;", "prediction": " if (VirtualRenderer.shouldDisableRender(\"rightPants\")) model.rightPants.visible = false;\n        if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;\n        if (VirtualRenderer.shouldDisableRender(\"rightShirt\")) model.rightShirt.visible = false;\n        if (VirtualRenderer.shouldDisableRender(\"leftShirt\")) model.leftShirt.visible = false;\n        if (VirtualRenderer.shouldDisableRender(\"rightJacket\")) model.rightJacket.visible = false;\n        if (VirtualRenderer.shouldDisableRender", "first_line_groundtruth": "if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;", "first_line_prediction": " if (VirtualRenderer.shouldDisableRender(\"rightPants\")) model.rightPants.visible = false;", "match": 0}
{"groundtruth": "&& camera.isThirdPerson() && RealCameraCore.isActive() &&\n                !ConfigFile.modConfig.allowRenderingHandWhen(client)) {", "prediction": " && RealCameraCore.isActive()) {\n            if (toggled) {\n                matrices.push();\n                matrices.multiply(camera.getRotation());\n                matrices.multiply(camera.getTranslation());\n                matrices.multiply(camera.getScale());\n                matrices.multiply(camera.getProjectionMatrix());\n            }\n        }\n    }\n\n    @Inject(method = \"renderHand\", at = @At(value = \"INVOKE\",\n            target = \"Lnet/minecraft/client/util/math/MatrixStack;pop()V\"))\n    private void unsetThirdPerson(MatrixStack matrices, Camera camera, float tickDelta,", "first_line_groundtruth": "&& camera.isThirdPerson() && RealCameraCore.isActive() &&", "first_line_prediction": " && RealCameraCore.isActive()) {", "match": 0}
{"groundtruth": ").OnMessageReceive(m_baseObject, code, msg);", "prediction": ").OnMessageReceive(fragment, code, msg);\n            }\n        } else {\n            printErrorLog(\"sendMessageToFragment -> fragment:\" + fragment + \" is not bind listener\");\n        }\n    }\n\n    public void sendMessageToContainerView(int containerViewId, int code, Object msg) {\n        if (containerViewId != 0) {\n            FragmentManager fragmentManager = m_containerViewMap.get(containerViewId);\n            if (fragmentManager != null) {\n                fragmentManager.executePendingTransactions();\n                Fragment fragment = fragmentManager.findFragmentByTag(m_metaphorMessage.getTag());", "first_line_groundtruth": ").OnMessageReceive(m_baseObject, code, msg);", "first_line_prediction": ").OnMessageReceive(fragment, code, msg);", "match": 0}
{"groundtruth": "m_metaphorManager.showFragment(strTag);", "prediction": " m_metaphorManager.showFragment(strTag);\n         return this;\n    }\n\n    @Override\n    public IMetaphorSubFragmentManager showFragment(@NonNull Fragment fragment) {\n        m_metaphorManager.showFragment(fragment);\n        return this;\n    }\n\n    @Override\n    public IMetaphorSubFragmentManager showFragment(@NonNull Fragment fragment, @NonNull String strTag) {\n        m_metaphorManager.showFragment(fragment, strTag);\n        return this;\n    }\n\n    @Override\n    public IMetaphorSubFragmentManager showFragment(@NonNull Fragment fragment, @NonNull String strTag,", "first_line_groundtruth": "m_metaphorManager.showFragment(strTag);", "first_line_prediction": " m_metaphorManager.showFragment(strTag);", "match": 0}
{"groundtruth": "m_fx1 = FragmentX1.newInstance();", "prediction": " m_fx1 = new FragmentX1();\n         m_fx2 = new FragmentX2();\n         m_fx3 = new FragmentX3();\n         m_fa = new FragmentA();\n         m_fb = new FragmentB();\n         m_fc = new FragmentC();\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        Metaphor.with(this).registerMessage(this, METAPHOR_MESSAGE_TO_SHOW_FA, METAPHOR_MESSAGE_TO_SHOW_FA);\n        Metaphor.with(this).registerMessage(this", "first_line_groundtruth": "m_fx1 = FragmentX1.newInstance();", "first_line_prediction": " m_fx1 = new FragmentX1();", "match": 0}
{"groundtruth": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));", "prediction": " settings.setTemperature(getTemperatureValue(form.getTemperature()));\n    }\n  }\n\n  @Override\n  public void reset() {\n    if (form != null) {\n      form.setApiKey(settings.getApiKey());\n      form.setModel(settings.getModel());\n      form.setMaxTokens(String.valueOf(settings.getMaxTokens()));\n      form.setTemperature(String.valueOf(settings.getTemperature()));\n    }\n  }\n\n  @Override\n  public void disposeUIResources() {\n    form = null;\n  }\n\n  private int getMaxTokensValue(String maxTokens) {\n    try {\n      return Integer.parseInt(", "first_line_groundtruth": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));", "first_line_prediction": " settings.setTemperature(getTemperatureValue(form.getTemperature()));", "match": 0}
{"groundtruth": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));", "prediction": " !form.getTimeout().equals(String.valueOf(settings.getTimeout()));\n    }\n    return false;\n  }\n\n  @Override\n  public void apply() {\n    settings.setApiKey(form.getApiKey());\n    settings.setModel(form.getModel());\n    settings.setMaxTokens(Integer.parseInt(form.getMaxTokens()));\n    settings.setTimeout(Integer.parseInt(form.getTimeout()));\n  }\n\n  @Override\n  public void reset() {\n    form.setApiKey(settings.getApiKey());\n    form.setModel(settings.getModel());\n    form.setMaxTokens(String.valueOf(settings.getMaxTokens", "first_line_groundtruth": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));", "first_line_prediction": " !form.getTimeout().equals(String.valueOf(settings.getTimeout()));", "match": 0}
{"groundtruth": "return form.getMainPanel();", "prediction": " return form.getRootPanel();\n  }\n\n  @Override\n  public boolean isModified() {\n    return settings.getApiKey() != form.getApiKey();\n  }\n\n  @Override\n  public void apply() {\n    settings.setApiKey(form.getApiKey());\n  }\n\n  @Override\n  public void reset() {\n    form.setApiKey(settings.getApiKey());\n  }\n\n  @Override\n  public void disposeUIResources() {\n    form = null;\n  }", "first_line_groundtruth": "return form.getMainPanel();", "first_line_prediction": " return form.getRootPanel();", "match": 0}
{"groundtruth": "(testRun.getTestRunOutcome() == null) {", "prediction": " (testRun.getOutcome() == null) {\n                    continue;\n                }\n\n                //do not show items without test run outcome\n                if (testRun.getOutcome().getOutcome() == null) {\n                    continue;\n                }\n\n                //do not show items without test run outcome\n                if (testRun.getOutcome().getOutcome().equals(\"SUCCESS\")) {\n                    continue;\n                }\n\n                //do not show items without test run outcome\n                if (testRun.getOutcome().getOutcome().equals(\"FAILURE\")) {\n                    continue;\n                }\n\n                //do not show items without test run outcome\n                if (testRun.get", "first_line_groundtruth": "(testRun.getTestRunOutcome() == null) {", "first_line_prediction": " (testRun.getOutcome() == null) {", "match": 0}
{"groundtruth": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));", "prediction": "form.getTimeout().equals(String.valueOf(settings.getTimeout()));\n    }\n    return false;\n  }\n\n  @Override\n  public void apply() {\n    settings.setApiKey(form.getApiKey());\n    settings.setModel(form.getModel());\n    settings.setMaxTokens(Integer.parseInt(form.getMaxTokens()));\n    settings.setTimeout(Integer.parseInt(form.getTimeout()));\n  }\n\n  @Override\n  public void reset() {\n    form.setApiKey(settings.getApiKey());\n    form.setModel(settings.getModel());\n    form.setMaxTokens(String.valueOf(settings.getMaxTokens()));", "first_line_groundtruth": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));", "first_line_prediction": "form.getTimeout().equals(String.valueOf(settings.getTimeout()));", "match": 0}
{"groundtruth": "apiResponse.getMessage(),\n              String.format(\"%d ExceptionAI Error\", apiResponse.getCode()),\n              Messages.getErrorIcon());", "prediction": " \"Error: \" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getErrorIcon());\n        }\n      });\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }", "first_line_groundtruth": "apiResponse.getMessage(),", "first_line_prediction": " \"Error: \" + apiResponse.getMessage(),", "match": 0}
{"groundtruth": "\"\\n\" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getInformationIcon());", "prediction": " \"Suggestions: \" + apiResponse.getSuggestions(),\n               \"Suggestions\",\n               Messages.getInformationIcon()\n          );\n        } else {\n          Messages.showMessageDialog(\n              project,\n              \"Suggestions: \" + apiResponse.getMessage(),\n              \"Suggestions\",\n              Messages.getInformationIcon()\n          );\n        }\n      });\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }", "first_line_groundtruth": "\"\\n\" + apiResponse.getMessage(),", "first_line_prediction": " \"Suggestions: \" + apiResponse.getSuggestions(),", "match": 0}
{"groundtruth": "= testRun.getDateTime();", "prediction": " = testRun.getTestRunOutcome().getDateTime().toString();\n                JBLabel dateTimeLabel = new JBLabel(dateTimeString);\n                dateTimeLabel.setForeground(ButtonColors.getButtonColor(testRun.getTestRunOutcome().getResult()));\n                historyContent.add(dateTimeLabel, historyGbc);\n\n                // git repo\n                historyGbc.gridx = 1;\n                GitRepository gitRepository = GitService.getGitRepository(project, testRun.getGitRemote());\n                if (gitRepository != null) {\n                    GitRemote gitRemote = gitRepository.getRemote();\n                    String gitRemoteName = gitRemote", "first_line_groundtruth": "= testRun.getDateTime();", "first_line_prediction": " = testRun.getTestRunOutcome().getDateTime().toString();", "match": 0}
{"groundtruth": "switch (testRun.getTestRunOutcome()) {", "prediction": " //If nothing has happened for 15 minutes make the time red\n                if (i == 0 && secondsSinceLastExecution >= 900) {\n                    circleColor = Color.RED;\n                }\n\n                JBLabel circleLabel = new JBLabel(getCircleString(circleColor));\n                historyContent.add(circleLabel, historyGbc);\n\n                // prediction\n                historyGbc.gridy = i;\n                historyGbc.gridx = 2;\n\n                JBLabel predictionLabel = new JBLabel(getPredictionString(testRun));\n                historyContent.add(predictionLabel, historyGbc", "first_line_groundtruth": "switch (testRun.getTestRunOutcome()) {", "first_line_prediction": " //If nothing has happened for 15 minutes make the time red", "match": 0}
{"groundtruth": "14, testRun.getCommit());", "prediction": "10);\n                historyContent.add(exampleGreenCirclePanel, historyGbc);\n\n                // test name\n                historyGbc.gridy = i;\n                historyGbc.gridx = 2;\n\n                JBLabel testNameLabel = new JBLabel(testRun.getTestName());\n                historyContent.add(testNameLabel, historyGbc);\n\n                // test outcome\n                historyGbc.gridy = i;\n                historyGbc.gridx = 3;\n\n                JBLabel testOutcomeLabel = new JBLabel(testRun.getTestRunOutcome().toString());\n                historyContent.add(testOutcomeLabel", "first_line_groundtruth": "14, testRun.getCommit());", "first_line_prediction": "10);", "match": 0}
{"groundtruth": "= testRun.getPrediction() == Prediction.CORRECT ? AllIcons.RunConfigurations.TestPassed : AllIcons.RunConfigurations.TestFailed;", "prediction": " = AllIcons.Actions.Refresh;\n                if (testRun.getTestRunOutcome() == null) {\n                    icon = AllIcons.Actions.Refresh;\n                } else {\n                    switch (testRun.getTestRunOutcome()) {\n                        case PASSED:\n                            icon = AllIcons.Actions.Checkmark;\n                            break;\n                        case FAILED:\n                            icon = AllIcons.Actions.Error;\n                            break;\n                        case NOT_EXECUTED:\n                            icon = AllIcons.Actions.Cancel;\n                            break;\n                    }\n                }\n\n                JBLabel iconLabel = new JBLabel(icon);\n                historyContent.add(icon", "first_line_groundtruth": "= testRun.getPrediction() == Prediction.CORRECT ? AllIcons.RunConfigurations.TestPassed : AllIcons.RunConfigurations.TestFailed;", "first_line_prediction": " = AllIcons.Actions.Refresh;", "match": 0}
{"groundtruth": "apiResponse.getCode() == 200) {", "prediction": "apiResponse.isSuccess()) {\n          String suggestion = apiResponse.getSuggestion();\n          String message = \"Did you mean: \" + suggestion;\n          String title = \"Did you mean: \" + suggestion;\n          int messageType = JOptionPane.INFORMATION_MESSAGE;\n          Messages.showMessageDialog(project, message, title, messageType);\n        } else {\n          String message = \"Error: \" + apiResponse.getMessage();\n          String title = \"Error: \" + apiResponse.getMessage();\n          int messageType = JOptionPane.ERROR_MESSAGE;\n          Messages.showMessageDialog(project, message, title, messageType);\n        }\n     ", "first_line_groundtruth": "apiResponse.getCode() == 200) {", "first_line_prediction": "apiResponse.isSuccess()) {", "match": 0}
{"groundtruth": "<Class<?>, List<ISubscriber>> registeredSubs = SubscriberFinder.find(subscriber);", "prediction": "<Class<?>, List<ISubscriber>> subscriberMap = new HashMap<>();\n        subscriberMap.put(subscriber.getClass(), Arrays.asList(subscriber));\n        // \u5efa\u7acb\u8ba2\u9605\u8005\u5230\u4e8b\u4ef6\u7c7b\u6620\u5c04\n        Map<Class<?>, Boolean> subscriberStatusMap = new HashMap<>();\n        subscriberStatusMap.put(subscriber.getClass(), true);\n        EventBus.subscriberMap.putAll(subscriberMap);\n        EventBus.subscriberStatusMap.putAll(subscriberStatusMap);\n        // \u6ce8\u518c\u8ba2\u9605\u8005\n        executor.execute(new SubscriberRegisterTask(subscriber));\n    }\n\n    public void unregister(Object subscriber)", "first_line_groundtruth": "<Class<?>, List<ISubscriber>> registeredSubs = SubscriberFinder.find(subscriber);", "first_line_prediction": "<Class<?>, List<ISubscriber>> subscriberMap = new HashMap<>();", "match": 0}
{"groundtruth": "subscriber.getThreadType() == ThreadType.ASYNC) {", "prediction": "subscriber.getThreadType() == ThreadType.MAIN) {\n                executor.execute(() -> subscriber.onEvent(event));\n            }else {\n                executor.execute(() -> subscriber.onEvent(event));\n            }\n        }\n    }", "first_line_groundtruth": "subscriber.getThreadType() == ThreadType.ASYNC) {", "first_line_prediction": "subscriber.getThreadType() == ThreadType.MAIN) {", "match": 0}
{"groundtruth": "(sub -> sub.getSubscriber() == subscriber);", "prediction": "(subscriber1 -> subscriber1.equals(subscriber));\n                if(subscribers.isEmpty()) {\n                    subscriberStatusMap.remove(subscriberClass);\n                    logger.info(String.format(\"Unregistered: %s\",subscriber.getClass()));\n                }\n            });\n        }\n    }\n\n    public void post(IEvent event) {\n        Objects.requireNonNull(event);\n        if(subscriberMap != null && !subscriberMap.isEmpty()) {\n            subscriberMap.forEach((subscriberClass, subscribers) -> {\n                if(subscribers == null || subscribers.isEmpty()) {\n                    logger.warn(String.format(\"Subscriber %s was not registered", "first_line_groundtruth": "(sub -> sub.getSubscriber() == subscriber);", "first_line_prediction": "(subscriber1 -> subscriber1.equals(subscriber));", "match": 0}
{"groundtruth": "DataSourceContext.get();", "prediction": " TransactionContext.get().getDataSourceKey();\n        if (dataSourceKey == null) {\n            return defaultDataSource;\n        }\n        return dataSources.get(dataSourceKey);\n    }\n\n    private Connection wrapConnection(DataSource dataSource, Connection connection) {\n        if (dataSource instanceof ConnectionWrapper) {\n            return connection;\n        }\n        if (dataSource instanceof TxConnectionWrapper) {\n            return new TxConnectionWrapper(connection, dataSource);\n        }\n        if (dataSource instanceof TxConnectionContext) {\n            return new TxConnectionWrapper(connection, dataSource);\n        }\n        return new ConnectionWrapper(connection, dataSource);\n    }\n\n    @Override\n    public final", "first_line_groundtruth": "DataSourceContext.get();", "first_line_prediction": " TransactionContext.get().getDataSourceKey();", "match": 0}
{"groundtruth": "return TransactionContext.get() != null;", "prediction": " return TransactionContext.hasTransaction();\n    }\n\n    private SuspendedTx suspend() {\n        return new SuspendedTx(TransactionContext.suspend());\n    }\n\n    private void resume(SuspendedTx suspended) {\n        if (Objects.nonNull(suspended)) {\n            suspended.resume();\n        }\n    }\n\n    private Object doExecute(Transaction transaction) throws Throwable {\n        TxConnectionContext.setTransaction(transaction);\n        try {\n            return transaction.proceed();\n        } finally {\n            TxConnectionContext.removeTransaction();\n        }\n    }", "first_line_groundtruth": "return TransactionContext.get() != null;", "first_line_prediction": " return TransactionContext.hasTransaction();", "match": 0}
{"groundtruth": "= transaction.getNoRollbackFor();", "prediction": " = transaction.getNoRollbacks();\n        if (noRollbacks == null) {\n            return false;\n        }\n        for (Class<? extends Throwable> noRollback : noRollbacks) {\n            if (noRollback.isInstance(t)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private void resume(SuspendedTx suspended) {\n        if (suspended != null) {\n            TransactionContext.set(suspended.getTxId());\n        }\n    }\n\n    private static class SuspendedTx {\n        private final TxId txId;\n\n        private SuspendedTx(", "first_line_groundtruth": "= transaction.getNoRollbackFor();", "first_line_prediction": " = transaction.getNoRollbacks();", "match": 0}
{"groundtruth": "TransactionContext.remove();", "prediction": " return new SuspendedTx(tid);\n    }\n\n    private void resume(SuspendedTx suspended) {\n        if (suspended != null) {\n            suspended.resume();\n        }\n    }\n\n    private Object doExecute(Transaction transaction) throws Throwable {\n        TxConnectionContext.set(transaction.getConnection());\n        try {\n            return transaction.proceed();\n        } finally {\n            TxConnectionContext.remove();\n        }\n    }\n\n    private static class SuspendedTx {\n\n        private final TxId tid;\n\n        private SuspendedTx(TxId tid) {\n            this.tid = tid;\n        }\n\n        public", "first_line_groundtruth": "TransactionContext.remove();", "first_line_prediction": " return new SuspendedTx(tid);", "match": 0}
{"groundtruth": "= transaction.proceed();", "prediction": " = transaction.proceed();\n            rollback = true;\n        } catch (Throwable e) {\n            rollback = false;\n            throw e;\n        } finally {\n            if (rollback) {\n                TransactionContext.remove();\n            } else {\n                TransactionContext.commit(tid);\n            }\n        }\n        return result;\n    }\n\n    private void resume(SuspendedTx suspended) {\n        if (suspended != null) {\n            TransactionContext.set(suspended.getTxId());\n        }\n    }\n\n    private static class SuspendedTx {\n        private final TxId txId;\n\n        private SuspendedTx(Tx", "first_line_groundtruth": "= transaction.proceed();", "first_line_prediction": " = transaction.proceed();", "match": 0}
{"groundtruth": "Extractor.warning(\"Warning: Did not match as a member: \" + line);", "prediction": " continue;\n                }\n                String modifiers = matcher.group(1);\n                String returnType = matcher.group(2);\n                String methodName = matcher.group(3);\n                String arguments = matcher.group(4);\n                String body = matcher.group(5);\n                String comments = matcher.group(6);\n                String signature = returnType + \" \" + methodName + arguments;\n                String className = currentClass;\n                if (className == null) {\n                    className = currentPackage;\n                }\n                if (className != null) {\n                    methodMap.computeIfAbsent(className, k -> Maps.newHashMap()).computeIfAbsent", "first_line_groundtruth": "Extractor.warning(\"Warning: Did not match as a member: \" + line);", "first_line_prediction": " continue;", "match": 0}
{"groundtruth": "Extractor.warning(\"Warning: Did not match as a class/interface: \" + line);", "prediction": " Extractor.warning(\"Warning: Did not match as a class: \" + line);\n                } else {\n                    currentClass = matcher.group(3);\n                    classSet.add(currentClass);\n                    String superType = matcher.group(5);\n                    if (superType != null) {\n                        superType = stripTypeArgs(superType);\n                        classSet.add(superType);\n                    }\n                    String interfaces = matcher.group(7);\n                    if (interfaces != null) {\n                        for (String interfaceType : interfaces.split(\",\")) {\n                            interfaceType = stripTypeArgs(interfaceType);\n                            classSet", "first_line_groundtruth": "Extractor.warning(\"Warning: Did not match as a class/interface: \" + line);", "first_line_prediction": " Extractor.warning(\"Warning: Did not match as a class: \" + line);", "match": 0}
{"groundtruth": "action.deleteCache();", "prediction": " action.clearCache();\n    }", "first_line_groundtruth": "action.deleteCache();", "first_line_prediction": " action.clearCache();", "match": 0}
{"groundtruth": "callback.onCompletion(content);", "prediction": " success = true;\n                }\n            } catch (Exception e) {\n                log.error(\"gpt-3.5-turbo chat error:{}\", ExceptionUtils.getStackTrace(e));\n                retryCount++;\n                Thread.sleep(1000);\n            }\n        }\n        if (!success) {\n            throw new ChatException(\"\u6211", "first_line_groundtruth": "callback.onCompletion(content);", "first_line_prediction": " success = true;", "match": 0}
{"groundtruth": "BotUtil.resetAll();", "prediction": " BotUtil.resetPrompt(chatBO.getSessionId());\n             event.getSubject().sendMessage(\"\u91cd\u7f6e\u6210\u529f\");\n             return;\n        }\n        if (RESET_WORD.equals(prompt)) {\n             ///\u68c0\u6d4b\u5230\u91cd\u7f6e\u4f1a\u8bdd\u6307\u4ee4\n             BotUtil.resetPrompt(chatBO.getSessionId());\n             event.getSubject().sendMessage(\"\u91cd\u7f6e\u6210\u529f\");\n             return;\n        }\n        if (prompt.startsWith(GET_WORD)) {\n            String uniquePrompt = interactService.getUniquePrompt(chatBO.getSessionId());\n            if (StringUtils.isEmpty(uniquePrompt)) {\n                MessageChain messages = new", "first_line_groundtruth": "BotUtil.resetAll();", "first_line_prediction": " BotUtil.resetPrompt(chatBO.getSessionId());", "match": 0}
{"groundtruth": "rateLimiter.setPrompt(sessionId, prompt);", "prediction": " rateLimiter.setPrompt(sessionId, prompt);\n    }\n\n    @Override\n    public void setPrompt(String sessionId, String prompt){\n        rateLimiter.setPrompt(sessionId, prompt);\n    }\n\n    @Override\n    public void resetPrompt(String sessionId){\n        rateLimiter.resetPrompt(sessionId);\n    }\n\n    @Override\n    public void setPrompt(String sessionId, String prompt, String model){\n        rateLimiter.setPrompt(sessionId, prompt, model);\n    }\n\n    @Override\n    public void setPrompt(String sessionId, String prompt, String model, String key){\n        rateLimiter.setPrompt(sessionId, prompt,", "first_line_groundtruth": "rateLimiter.setPrompt(sessionId, prompt);", "first_line_prediction": " rateLimiter.setPrompt(sessionId, prompt);", "match": 0}
{"groundtruth": "FixProtocolVersion.fix();", "prediction": " //ChatGPTPlus\n        apiKeyPlus = new ArrayList<>();\n        for (String apiKey : apiKeyPlus){\n            apiKey = apiKey.trim();\n            if (!\"\".equals(apiKey)){\n                apiKeyPlus.add(apiKey);\n                log.info(\"apiKeyPlus\u4e3a {} \u7684\u8d26\u53f7\u521d\u59cb\u5316\u6210\u529f\", apiKey);\n            }\n        }\n    }\n\n    public Bot getQqBot() {\n        if (qqBot == null) {\n            BotAuthorization botAuthorization = BotAuthorization.of(qq, password);\n            BotConfiguration botConfiguration = BotConfiguration.builder()\n                    .setBotAuthorization(botAuthorization)\n                    .setBotFactory(BotFactory.", "first_line_groundtruth": "FixProtocolVersion.fix();", "first_line_prediction": " //ChatGPTPlus", "match": 0}
{"groundtruth": "this.code = code.getValue();", "prediction": " this.code = code.getCode();\n         this.msg = code.getMsg();\n         this.data = data;\n    }\n\n    public Result(ResultCodeEnum code) {\n        this.code = code.getCode();\n        this.msg = code.getMsg();\n    }\n\n    public Result(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public Result(int code, String msg, T data) {\n        this.code = code;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    public Result(ResultCodeEnum code", "first_line_groundtruth": "this.code = code.getValue();", "first_line_prediction": " this.code = code.getCode();", "match": 0}
{"groundtruth": "HttpContextUtil.setAttributeToSession(\"verifyCode\", code);", "prediction": " return \"\u53d1\u9001\u6210\u529f\";\n    }\n\n    @PostMapping(\"/login\")\n    public String login(@Valid @RequestBody LoginVO loginVO) {\n        UsernamePasswordToken token = new UsernamePasswordToken(loginVO.getEmail(), loginVO.getPassword());\n        Subject subject = SecurityUtils.getSubject();\n        subject.login(token);\n        Session session = subject.getSession();\n        session.setAttribute(\"user\", loginVO.getEmail());\n        return \"\u767b\u5f55\u6210\u529f\";\n    }\n\n    @GetMapping(\"/logout\")\n    public String logout() {\n        Subject subject = SecurityUtils.getSubject();\n        subject.logout();\n        return \"\u9000\u51fa\u6210\u529f\";\n    }", "first_line_groundtruth": "HttpContextUtil.setAttributeToSession(\"verifyCode\", code);", "first_line_prediction": " return \"\u53d1\u9001\u6210\u529f\";", "match": 0}
{"groundtruth": "request.getName())\n                .createdBy(userId)\n                .build();", "prediction": "request.getName())\n                 .build();\n\n        orgHandler.addOrg(org, userId);\n\n        return OrgResponse.builder()\n                .tenantId(org.getTenantId())\n                .orgTypeCode(org.getOrgTypeCode())\n                .leaderId(org.getLeaderId())\n                .superiorId(org.getSuperiorId())\n                .name(org.getName())\n                .build();\n    }\n\n    @Transactional\n    public OrgResponse updateOrg(UpdateOrgRequest request, Long userId) {\n        OrgBuilder builder = orgBuilderFactory.create();\n\n        Org org = builder.tenantId(request.getTenantId())\n                .", "first_line_groundtruth": "request.getName())", "first_line_prediction": "request.getName())", "match": 1}
{"groundtruth": "(request.getTenantId(), id)\n                .orElseThrow(() -> {", "prediction": "(id)\n                .orElseThrow(() -> new BusinessException(\"Org not found\"));\n\n        if (!org.getTenantId().equals(request.getTenantId())) {\n            throw new BusinessException(\"Tenant id not match\");\n        }\n\n        if (!org.getOrgTypeCode().equals(request.getOrgTypeCode())) {\n            throw new BusinessException(\"Org type code not match\");\n        }\n\n        if (!org.getLeaderId().equals(request.getLeaderId())) {\n            throw new BusinessException(\"Leader id not match\");\n        }\n\n        if (!org.getSuperiorId().equals(request.getSuperiorId()))", "first_line_groundtruth": "(request.getTenantId(), id)", "first_line_prediction": "(id)", "match": 0}
{"groundtruth": "= status.code();", "prediction": " = status.name();\n        }\n        return params;\n    }\n\n    private static String buildSqlExistsByIdAndStatus(int statusesLength) {\n        StringBuilder sql = new StringBuilder(\"SELECT COUNT(*) FROM EMP WHERE TENANT_ID = ? AND ID = ? AND STATUS IN (\");\n        for(int i = 0; i < statusesLength; i++) {\n            sql.append(\"?,\");\n        }\n        sql.deleteCharAt(sql.length() - 1);\n        sql.append(\")\");\n        return sql.toString();\n    }", "first_line_groundtruth": "= status.code();", "first_line_prediction": " = status.name();", "match": 0}
{"groundtruth": "assertOrgName.shouldNotEmpty(newName);", "prediction": " assertOrgName.shouldEffective(org.getTenantId(), newName);\n             org.setName(newName);\n        }\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n        org.setAuditInfo(new AuditInfo(userId, LocalDateTime.now()));\n    }", "first_line_groundtruth": "assertOrgName.shouldNotEmpty(newName);", "first_line_prediction": " assertOrgName.shouldEffective(org.getTenantId(), newName);", "match": 0}
{"groundtruth": "(request.getSuperiorId())\n                .name(request.getName())\n                .createdBy(userId)\n                .build();", "prediction": "(request.getSuperiorId())\n                 .name(request.getName())\n                 .description(request.getDescription())\n                 .build();\n\n        orgHandler.addOrg(org, userId);\n\n        return OrgResponse.builder()\n                .tenantId(org.getTenantId())\n                .orgTypeCode(org.getOrgTypeCode())\n                .leaderId(org.getLeaderId())\n                .superiorId(org.getSuperiorId())\n                .name(org.getName())\n                .description(org.getDescription())\n                .build();\n    }\n\n    @Transactional\n    public OrgResponse updateOrg(UpdateOrgRequest request, Long", "first_line_groundtruth": "(request.getSuperiorId())", "first_line_prediction": "(request.getSuperiorId())", "match": 1}
{"groundtruth": "org, request.getName() , request.getLeaderId(), userId);", "prediction": "org, request, userId);\n\n        return buildOrgDto(org);\n    }\n\n    @Transactional\n    public OrgResponse updateOrgDetail(Long id, UpdateOrgDetailRequest request, Long userId) {\n        Org org = orgRepository.findById(request.getTenantId(), id)\n                 .orElseThrow(() -> {\n                    throw new BusinessException(\"\u8981\u4fee\u6539\u7684\u7ec4\u7ec7(id =\" + id + \"  )\u4e0d\u5b58\u5728\uff01\");\n                 });\n\n        orgHandler.updateDetail(org, request, userId);\n\n        return buildOrgDto(org);\n    }\n\n    @Transactional\n    public OrgResponse updateOrgPosition(Long id, UpdateOrgPositionRequest", "first_line_groundtruth": "org, request.getName() , request.getLeaderId(), userId);", "first_line_prediction": "org, request, userId);", "match": 0}
{"groundtruth": "return orgService.cancelOrg(tenant, id, userId);", "prediction": " return orgService.cancelOrg(id, userId, tenant);\n    }", "first_line_groundtruth": "return orgService.cancelOrg(tenant, id, userId);", "first_line_prediction": " return orgService.cancelOrg(id, userId, tenant);", "match": 0}
{"groundtruth": "orgHandler.updateBasic(org, request.getName() , request.getLeaderId(), userId);", "prediction": " org.setOrgTypeCode(request.getOrgTypeCode());\n         org.setName(request.getName());\n         org.setLeaderId(request.getLeaderId());\n         org.setSuperiorId(request.getSuperiorId());\n         org.setUpdatedBy(userId);", "first_line_groundtruth": "orgHandler.updateBasic(org, request.getName() , request.getLeaderId(), userId);", "first_line_prediction": " org.setOrgTypeCode(request.getOrgTypeCode());", "match": 0}
{"groundtruth": "if (newLeader != null && !newLeader.equals(org.getLeaderId())) {", "prediction": " if (newLeader != null) {\n             assertOrgLeader.shouldNotHasEmp(org.getTenantId(), org.getId());\n             assertOrgLeader.shouldEffective(org);\n             org.setLeader(newLeader);\n         }\n    }\n\n    private void updateName(Org org, String newName) {\n        if (newName != null) {\n            assertOrgName.shouldNotHasEmp(org.getTenantId(), org.getId());\n            assertOrgName.shouldEffective(org);\n            org.setName(newName);\n        }\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n       ", "first_line_groundtruth": "if (newLeader != null && !newLeader.equals(org.getLeaderId())) {", "first_line_prediction": " if (newLeader != null) {", "match": 0}
{"groundtruth": "org.cancel();", "prediction": " assertOrgToBeCanceled.shouldNotHasChild(org.getTenantId(), org.getId());\n        assertOrgToBeCanceled.shouldNotHasChild(org.getTenantId(), org.getId());\n        assertOrgToBeCanceled.shouldNotHasChild(org.getTenantId(), org.getId());\n        assertOrgToBeCanceled.shouldNotHasChild(org.getTenantId(), org.getId());\n        assertOrgToBeCanceled.shouldNotHasChild(org.getTenantId(), org.getId());\n        assertOrgToBeCanceled.shouldNotHasChild(org.getTenantId(), org.getId());\n        assertOrgToBeCanceled.shouldNotHas", "first_line_groundtruth": "org.cancel();", "first_line_prediction": " assertOrgToBeCanceled.shouldNotHasChild(org.getTenantId(), org.getId());", "match": 0}
{"groundtruth": "OrgStatus.ofCode(statusCode));", "prediction": "this.statusCode);\n        org.setLastUpdatedAt(this.lastUpdatedAt);\n        org.setLastUpdatedBy(this.lastUpdatedBy);\n        return org;\n    }", "first_line_groundtruth": "OrgStatus.ofCode(statusCode));", "first_line_prediction": "this.statusCode);", "match": 0}
{"groundtruth": "assertOrgType.shouldEffective(tenantId, orgTypeCode);", "prediction": " assertOrgType.shouldEffective(tenantId, orgTypeCode);\n    }", "first_line_groundtruth": "assertOrgType.shouldEffective(tenantId, orgTypeCode);", "first_line_prediction": " assertOrgType.shouldEffective(tenantId, orgTypeCode);", "match": 0}
{"groundtruth": "= assertSuperior.shouldEffective(tenantId, superiorId);", "prediction": " = Org.findOrgById(superiorId);\n        assertSuperior.shouldEffective(tenantId, superiorOrg);\n    }\n\n    private void validateOrgType() {\n        assertOrgType.shouldEffective(tenantId, orgTypeCode);\n    }", "first_line_groundtruth": "= assertSuperior.shouldEffective(tenantId, superiorId);", "first_line_prediction": " = Org.findOrgById(superiorId);", "match": 0}
{"groundtruth": "assertOrgLeader.shouldEffective(org.getTenantId(), newLeader);", "prediction": " assertOrgLeader.shouldNotHasEmp(org.getTenantId(), newLeader);\n             org.setLeaderId(newLeader);\n        }\n    }\n\n    private void updateName(Org org, String newName) {\n        if (newName != null && !newName.equals(org.getName())) {\n            assertOrgName.shouldNotHasEmp(org.getTenantId(), newName);\n            org.setName(newName);\n        }\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n        org.setAuditInfo(new AuditInfo(userId, LocalDateTime.now()));\n    }", "first_line_groundtruth": "assertOrgLeader.shouldEffective(org.getTenantId(), newLeader);", "first_line_prediction": " assertOrgLeader.shouldNotHasEmp(org.getTenantId(), newLeader);", "match": 0}
{"groundtruth": "assertOrgName.shouldNotEmpty(name);", "prediction": " assertOrgName.shouldEffective(tenantId, name);\n    }\n\n    private void validateOrgType() {\n        assertOrgType.shouldEffective(tenantId, orgTypeCode);\n    }\n\n    private void validateSuperior() {\n        assertSuperior.shouldEffective(tenantId, superiorId);\n    }", "first_line_groundtruth": "assertOrgName.shouldNotEmpty(name);", "first_line_prediction": " assertOrgName.shouldEffective(tenantId, name);", "match": 0}
{"groundtruth": "), org.getSuperiorId(), newName);", "prediction": " ), org.getId( ), newName);\n            org.setName(newName);\n        }\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n        org.setAuditInfo(new AuditInfo(userId, LocalDateTime.now()));\n    }", "first_line_groundtruth": "), org.getSuperiorId(), newName);", "first_line_prediction": " ), org.getId( ), newName);", "match": 0}
{"groundtruth": "shouldNotDuplicatedInSameSuperior(org.getTenantId(), org.getSuperiorId(), newName);", "prediction": "shouldEffective(org.getTenantId(), newName);\n            org.setName(newName);\n        }\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n        org.setAuditInfo(new AuditInfo(userId, LocalDateTime.now()));\n    }", "first_line_groundtruth": "shouldNotDuplicatedInSameSuperior(org.getTenantId(), org.getSuperiorId(), newName);", "first_line_prediction": "shouldEffective(org.getTenantId(), newName);", "match": 0}
{"groundtruth": "assertOrgLeader.shouldEffective(tenantId, leaderId);", "prediction": " assertOrgLeader.validate(this.leaderId);\n    }\n\n    private void validateOrgTenant() {\n        assertOrgTenant.validate(this.tenantId);\n    }\n\n    private void validateOrgType() {\n        assertOrgType.validate(this.orgTypeCode);\n    }\n\n    private void validateSuperior() {\n        assertSuperior.validate(this.superiorId);\n    }\n\n    private void validateOrgName() {\n        assertOrgName.validate(this.name);\n    }", "first_line_groundtruth": "assertOrgLeader.shouldEffective(tenantId, leaderId);", "first_line_prediction": " assertOrgLeader.validate(this.leaderId);", "match": 0}
{"groundtruth": "assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);", "prediction": " assertOrgName.shouldEffective(tenantId, name);\n    }\n\n    private void validateOrgType() {\n        assertOrgType.shouldEffective(tenantId, orgTypeCode);\n    }\n\n    private void validateSuperior() {\n        assertSuperior.shouldEffective(tenantId, superiorId);\n    }", "first_line_groundtruth": "assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);", "first_line_prediction": " assertOrgName.shouldEffective(tenantId, name);", "match": 0}
{"groundtruth": "assertOrgType.shouldNotEntp(orgTypeCode);", "prediction": " assertOrgType.ofDevGroupMustDevCenter(tenantId, orgTypeCode);\n         assertOrgType.ofDevCenterAndDirectDeptMustEntp(tenantId, orgTypeCode);\n    }", "first_line_groundtruth": "assertOrgType.shouldNotEntp(orgTypeCode);", "first_line_prediction": " assertOrgType.ofDevGroupMustDevCenter(tenantId, orgTypeCode);", "match": 0}
{"groundtruth": "+ \"' \u7684\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u65e0\u6548!\"));", "prediction": " + \"' \u7684\u7ec4\u7ec7\u7c7b\u578b\u4e0d\u5b58\u5728 !\"));\n    }", "first_line_groundtruth": "+ \"' \u7684\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u65e0\u6548!\"));", "first_line_prediction": " + \"' \u7684\u7ec4\u7ec7\u7c7b\u578b\u4e0d\u5b58\u5728 !\"));", "match": 0}
{"groundtruth": "assertOrgType.shouldNotEmpty(orgTypeCode);", "prediction": " assertOrgType.shouldEffective(tenantId, orgTypeCode);\n    }", "first_line_groundtruth": "assertOrgType.shouldNotEmpty(orgTypeCode);", "first_line_prediction": " assertOrgType.shouldEffective(tenantId, orgTypeCode);", "match": 0}
{"groundtruth": "waitPoint.reset();", "prediction": " try {\n            waitPoint.await(interval, TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n            log.error(\"Interrupted\", e);\n         }", "first_line_groundtruth": "waitPoint.reset();", "first_line_prediction": " try {", "match": 0}
{"groundtruth": "metrics.start();", "prediction": " metrics.start(executionId);\n        TaskResult result = service.process(input);\n        metrics.stop(executionId);\n        return result;\n    }\n\n    @Override\n    public void after() {\n        service.after();\n    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override\n    public Metrics getMetrics() {\n        return metrics;\n    }\n\n    @Override\n    public boolean isFinalTask() {\n        return finalTask;\n    }\n\n    @Override\n    public String getFlowType() {\n        return flowType;\n    }\n\n    @Override\n    public Flow getFlow() {\n        return flow", "first_line_groundtruth": "metrics.start();", "first_line_prediction": " metrics.start(executionId);", "match": 0}
{"groundtruth": "null, flow.getServiceContext());", "prediction": "flow.getContext());\n                    service.after();\n                } catch (Throwable e) {\n                    log.error(\"\u6267\u884c\u670d\u52a1\u5931\u8d25\", e);\n                }\n            }\n        }\n        log.info(getServiceName() + \" stop\");\n    }\n\n    @Override\n    public void onStop() {\n        stopped = true;\n    }\n\n    @Override\n    public void onDestroy() {\n        queue.clear();\n    }\n\n    @Override\n    public void process(Service<?> service) {\n        queue.offer(service);\n    }", "first_line_groundtruth": "null, flow.getServiceContext());", "first_line_prediction": "flow.getContext());", "match": 0}
{"groundtruth": "process(input, getFlow().getServiceContext());", "prediction": "process(input);\n        metrics.stop();\n        return new TaskResult(executionId, output);\n    }\n\n    @Override\n    public void after(TaskResult result) {\n        service.after(result.getOutput());\n    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override\n    public Metrics getMetrics() {\n        return metrics;\n    }\n\n    @Override\n    public boolean isFinalTask() {\n        return finalTask;\n    }\n\n    @Override\n    public String getFlowType() {\n        return flowType;\n    }\n\n    @Override\n    public Flow getFlow() {\n        return flow;\n   ", "first_line_groundtruth": "process(input, getFlow().getServiceContext());", "first_line_prediction": "process(input);", "match": 0}
{"groundtruth": "if (StringUtils.hasText(groovyCode) && HadesCache.diff(instanceName, groovyCode)) {", "prediction": " // \u89e3\u6790groovy\u4ee3\u7801\n                if (StringUtils.hasText(groovyCode)) {\n                    GroovyUtils.parseGroovy(groovyCode);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"\u89e3\u6790\u4e3b\u914d\u7f6e\u5931\u8d25\", e);\n            throw Throwables.propagate(e);\n        }\n    }\n\n    /**\n     * \u6ce8\u518c\u76d1\u542c\u5668\n     */\n    private void addListener() {\n        registerBeanService.register(configProperties.getConfigName(), new HadesCache.HadesCacheListener() {\n            @Override\n            public void onCacheUpdate(String key, String oldValue, String newValue) {\n               ", "first_line_groundtruth": "if (StringUtils.hasText(groovyCode) && HadesCache.diff(instanceName, groovyCode)) {", "first_line_prediction": " // \u89e3\u6790groovy\u4ee3\u7801", "match": 0}
{"groundtruth": "= GroovyUtils.parseClass(instanceName, groovyCode);", "prediction": " = GroovyUtils.loadGroovyClass(groovyCode);\n        registerBeanService.registerBean(instanceName, clazz);\n    }\n\n    /**\n     * \u6ce8\u518c\u76d1\u542c\u5668\n     */\n    public void addListener() {\n        registerBeanService.registerBean(configProperties.getConfigName(), this);\n    }\n\n    /**\n     * \u6ce8\u518cbean\n     *\n     * @param beanName\n     * @param bean\n     */\n    public void registerBean(String beanName, Object bean) {\n        registerBeanService.registerBean(beanName, bean);\n    }\n\n    /**\n     * \u6ce8\u518cbean\n     *\n     * @param bean", "first_line_groundtruth": "= GroovyUtils.parseClass(instanceName, groovyCode);", "first_line_prediction": " = GroovyUtils.loadGroovyClass(groovyCode);", "match": 0}
{"groundtruth": "Object bean = registerBeanService.registerBean(instanceName, clazz);", "prediction": " registerBeanService.registerBean(instanceName, clazz);\n        }\n    }", "first_line_groundtruth": "Object bean = registerBeanService.registerBean(instanceName, clazz);", "first_line_prediction": " registerBeanService.registerBean(instanceName, clazz);", "match": 0}
